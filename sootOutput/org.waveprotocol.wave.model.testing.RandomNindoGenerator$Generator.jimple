class org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator extends java.lang.Object
{
    final org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r;
    final org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p;
    final org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints;
    org.waveprotocol.wave.model.document.operation.NindoAutomaton a;
    org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor targetDoc;
    final org.waveprotocol.wave.model.document.indexed.IndexedDocument doc;
    final java.util.List componentGenerators;
    static final boolean $assertionsDisabled;

    org.waveprotocol.wave.model.document.operation.Attributes generateRandomAttributes(boolean, org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesChecker)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters $r1, $r18;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$1 $r21;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$2 $r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.waveprotocol.wave.model.document.operation.Attributes $r23, r29;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesChecker r5;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r25, $r27;
        java.util.List $r3, $r20;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider $r2, $r15, $r19, $r30;
        java.lang.String[] $r9;
        java.lang.AssertionError $r17, $r24;
        java.lang.String $r11, $r13;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator r0;
        org.waveprotocol.wave.model.util.Pair r7;
        java.lang.Object $r6, $r10, $r12, $r22;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r14, $r16, $r26, $r28;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl $r8;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator;

        z0 := @parameter0: boolean;

        r5 := @parameter1: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesChecker;

        r29 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        if z0 == 0 goto label1;

        $r27 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r28 = interfaceinvoke r5.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesChecker: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.Attributes)>($r27);

        $z8 = virtualinvoke $r28.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z8 == 0 goto label2;

     label1:
        if z0 != 0 goto label3;

        $r25 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r26 = interfaceinvoke r5.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesChecker: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.Attributes)>($r25);

        $z7 = virtualinvoke $r26.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isIllFormed()>();

        if $z7 == 0 goto label3;

     label2:
        return null;

     label3:
        if z0 != 0 goto label7;

        $r14 = interfaceinvoke r5.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesChecker: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.Attributes)>(r29);

        $z1 = virtualinvoke $r14.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z1 == 0 goto label5;

        $z5 = <org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: boolean $assertionsDisabled>;

        if $z5 != 0 goto label4;

        $z6 = interfaceinvoke r29.<org.waveprotocol.wave.model.document.operation.Attributes: boolean isEmpty()>();

        if $z6 != 0 goto label4;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label4:
        $r19 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $r18 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $r20 = virtualinvoke $r18.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: java.util.List getAttributeNames()>();

        $r21 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$1;

        specialinvoke $r21.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$1: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator,org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesChecker)>(r0, r5);

        $r22 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: java.lang.Object access$100(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.List,org.waveprotocol.wave.model.testing.RandomNindoGenerator$Mapper)>($r19, $r20, $r21);

        $r23 = (org.waveprotocol.wave.model.document.operation.Attributes) $r22;

        r29 = $r23;

        if $r23 != null goto label5;

        return null;

     label5:
        $z2 = <org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: boolean $assertionsDisabled>;

        if $z2 != 0 goto label6;

        $r16 = interfaceinvoke r5.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesChecker: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.Attributes)>(r29);

        $z4 = virtualinvoke $r16.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z4 == 0 goto label6;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label6:
        $r15 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $z3 = interfaceinvoke $r15.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider: boolean nextBoolean()>();

        if $z3 == 0 goto label7;

        return r29;

     label7:
        $r30 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $z9 = interfaceinvoke $r30.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider: boolean nextBoolean()>();

        if $z9 == 0 goto label9;

        $r2 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $r1 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: java.util.List getAttributeNames()>();

        $r4 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$2;

        specialinvoke $r4.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$2: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator,org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$AttributesChecker,boolean)>(r0, r29, r5, z0);

        $r6 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: java.lang.Object access$100(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.List,org.waveprotocol.wave.model.testing.RandomNindoGenerator$Mapper)>($r2, $r3, $r4);

        r7 = (org.waveprotocol.wave.model.util.Pair) $r6;

        if r7 != null goto label8;

        return r29;

     label8:
        $r8 = new org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        $r9 = newarray (java.lang.String)[3];

        $r10 = virtualinvoke r7.<org.waveprotocol.wave.model.util.Pair: java.lang.Object getFirst()>();

        $r11 = (java.lang.String) $r10;

        $r9[0] = $r11;

        $r9[1] = null;

        $r12 = virtualinvoke r7.<org.waveprotocol.wave.model.util.Pair: java.lang.Object getSecond()>();

        $r13 = (java.lang.String) $r12;

        $r9[2] = $r13;

        specialinvoke $r8.<org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: void <init>(java.lang.String[])>($r9);

        r29 = interfaceinvoke r29.<org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.Attributes updateWith(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>($r8);

        goto label7;

     label9:
        return r29;
    }

    void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema, org.waveprotocol.wave.model.document.indexed.IndexedDocument)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument r16;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator $r4;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteElementEndGenerator $r8;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator $r2;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementEndGenerator $r6;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters r15;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator $r5;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r14;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$UpdateAttributesGenerator $r10;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteElementStartGenerator $r7;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SetAttributesGenerator $r9;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator $r11;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator $r3;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator r0;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$EndAnnotationGenerator $r12;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r17;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomMutationComponentGenerator[] $r1;
        java.util.List $r13;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator;

        r14 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r15 := @parameter1: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters;

        r17 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        r16 := @parameter3: org.waveprotocol.wave.model.document.indexed.IndexedDocument;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomMutationComponentGenerator)[11];

        $r2 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator;

        specialinvoke $r2.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r0);

        $r1[0] = $r2;

        $r3 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator;

        specialinvoke $r3.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r0);

        $r1[1] = $r3;

        $r4 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator;

        specialinvoke $r4.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r0);

        $r1[2] = $r4;

        $r5 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator;

        specialinvoke $r5.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementStartGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r0);

        $r1[3] = $r5;

        $r6 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementEndGenerator;

        specialinvoke $r6.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$ElementEndGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r0);

        $r1[4] = $r6;

        $r7 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteElementStartGenerator;

        specialinvoke $r7.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteElementStartGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r0);

        $r1[5] = $r7;

        $r8 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteElementEndGenerator;

        specialinvoke $r8.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteElementEndGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r0);

        $r1[6] = $r8;

        $r9 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SetAttributesGenerator;

        specialinvoke $r9.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SetAttributesGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r0);

        $r1[7] = $r9;

        $r10 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$UpdateAttributesGenerator;

        specialinvoke $r10.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$UpdateAttributesGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r0);

        $r1[8] = $r10;

        $r11 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator;

        specialinvoke $r11.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r0);

        $r1[9] = $r11;

        $r12 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$EndAnnotationGenerator;

        specialinvoke $r12.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$EndAnnotationGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r0);

        $r1[10] = $r12;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: java.util.List componentGenerators> = $r13;

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r> = r14;

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p> = r15;

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc> = r16;

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints> = r17;

        return;
    }

    org.waveprotocol.wave.model.document.operation.Nindo generate()
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator r0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r2;
        org.waveprotocol.wave.model.document.operation.Nindo $r5;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r4;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator;

     label1:
        $r1 = new org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $r3 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints>;

        $r2 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.indexed.IndexedDocument)>($r3, $r2);

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a> = $r1;

        $r4 = new org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor targetDoc> = $r4;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: boolean generate1()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: org.waveprotocol.wave.model.document.operation.Nindo build()>();

        return $r5;

     label2:
        goto label1;
    }

    boolean generate1()
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters $r1;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider $r2, $r4, $r9;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$4 $r17;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$3 $r16;
        int $i0, $i1, i2, i3, $i5;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomizerMutationComponent $r7, r12;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton $r13;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator r0;
        java.util.List $r5, $r10;
        java.lang.Object $r6, $r11;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r14, $r15;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator;

        $r2 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $r1 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: int getMaxOpeningComponents()>();

        $i1 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: int access$000(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>($r2, 0, $i0);

        i2 = 0;

     label1:
        if i2 >= $i1 goto label3;

        $r9 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $r10 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: java.util.List componentGenerators>;

        $r16 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$3;

        specialinvoke $r16.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$3: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r0);

        $r11 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: java.lang.Object access$100(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.List,org.waveprotocol.wave.model.testing.RandomNindoGenerator$Mapper)>($r9, $r10, $r16);

        r12 = (org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomizerMutationComponent) $r11;

        if r12 != null goto label2;

        goto label3;

     label2:
        interfaceinvoke r12.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomizerMutationComponent: void apply()>();

        i2 = i2 + 1;

        goto label1;

     label3:
        $r13 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a>;

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkFinish(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(null);

        $r15 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        if $r14 != $r15 goto label7;

        $i5 = (int) -4;

        i3 = $i5;

     label4:
        i3 = i3 + 1;

        $r4 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $r5 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: java.util.List componentGenerators>;

        $r17 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$4;

        specialinvoke $r17.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$4: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator,int)>(r0, i3);

        $r6 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: java.lang.Object access$100(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.List,org.waveprotocol.wave.model.testing.RandomNindoGenerator$Mapper)>($r4, $r5, $r17);

        $r7 = (org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomizerMutationComponent) $r6;

        if i3 >= 0 goto label5;

        if $r7 == null goto label4;

     label5:
        if $r7 != null goto label6;

        return 0;

     label6:
        interfaceinvoke $r7.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomizerMutationComponent: void apply()>();

        goto label3;

     label7:
        return 1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/testing/RandomNindoGenerator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
