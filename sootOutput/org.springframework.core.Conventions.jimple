public abstract class org.springframework.core.Conventions extends java.lang.Object
{
    private static final java.lang.String PLURAL_SUFFIX;
    private static final java.util.Set ignoredInterfaces;

    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.util.Set $r1, $r2, $r3, $r4;

        <org.springframework.core.Conventions: java.lang.String PLURAL_SUFFIX> = "List";

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        <org.springframework.core.Conventions: java.util.Set ignoredInterfaces> = $r0;

        $r1 = <org.springframework.core.Conventions: java.util.Set ignoredInterfaces>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/io/Serializable;");

        $r2 = <org.springframework.core.Conventions: java.util.Set ignoredInterfaces>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/io/Externalizable;");

        $r3 = <org.springframework.core.Conventions: java.util.Set ignoredInterfaces>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/lang/Cloneable;");

        $r4 = <org.springframework.core.Conventions: java.util.Set ignoredInterfaces>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/lang/Comparable;");

        return;
    }

    public void <init>()
    {
        org.springframework.core.Conventions r0;

        r0 := @this: org.springframework.core.Conventions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getVariableName(java.lang.Object)
    {
        java.util.Collection r6;
        java.lang.IllegalArgumentException $r3;
        java.lang.Object r0, $r2;
        java.lang.Class $r1, $r4, r5;
        java.lang.String $r7, $r8;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Value must not be null");

        z3 = 0;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        z3 = 1;

        goto label4;

     label1:
        $z1 = r0 instanceof java.util.Collection;

        if $z1 == 0 goto label3;

        r6 = (java.util.Collection) r0;

        $z2 = interfaceinvoke r6.<java.util.Collection: boolean isEmpty()>();

        if $z2 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot generate variable name for an empty Collection");

        throw $r3;

     label2:
        $r2 = staticinvoke <org.springframework.core.Conventions: java.lang.Object peekAhead(java.util.Collection)>(r6);

        r5 = staticinvoke <org.springframework.core.Conventions: java.lang.Class getClassForValue(java.lang.Object)>($r2);

        z3 = 1;

        goto label4;

     label3:
        r5 = staticinvoke <org.springframework.core.Conventions: java.lang.Class getClassForValue(java.lang.Object)>(r0);

     label4:
        $r7 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortNameAsProperty(java.lang.Class)>(r5);

        if z3 == 0 goto label5;

        $r8 = staticinvoke <org.springframework.core.Conventions: java.lang.String pluralize(java.lang.String)>($r7);

        goto label6;

     label5:
        $r8 = $r7;

     label6:
        return $r8;
    }

    public static java.lang.String getVariableNameForParameter(org.springframework.core.MethodParameter)
    {
        java.lang.IllegalArgumentException $r5;
        org.springframework.core.MethodParameter r0;
        java.lang.Class $r1, $r2, $r3, $r4, $r6, r7;
        java.lang.String $r8, $r9;
        boolean $z0, $z1, z2;

        r0 := @parameter0: org.springframework.core.MethodParameter;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "MethodParameter must not be null");

        z2 = 0;

        $r1 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Class getComponentType()>();

        z2 = 1;

        goto label4;

     label1:
        $r2 = class "Ljava/util/Collection;";

        $r3 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z1 == 0 goto label3;

        $r4 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getCollectionParameterType(org.springframework.core.MethodParameter)>(r0);

        r7 = $r4;

        if $r4 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot generate variable name for non-typed Collection parameter type");

        throw $r5;

     label2:
        z2 = 1;

        goto label4;

     label3:
        r7 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

     label4:
        $r8 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortNameAsProperty(java.lang.Class)>(r7);

        if z2 == 0 goto label5;

        $r9 = staticinvoke <org.springframework.core.Conventions: java.lang.String pluralize(java.lang.String)>($r8);

        goto label6;

     label5:
        $r9 = $r8;

     label6:
        return $r9;
    }

    public static java.lang.String getVariableNameForReturnType(java.lang.reflect.Method)
    {
        java.lang.Class $r1;
        java.lang.String $r2;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r2 = staticinvoke <org.springframework.core.Conventions: java.lang.String getVariableNameForReturnType(java.lang.reflect.Method,java.lang.Class,java.lang.Object)>(r0, $r1, null);

        return $r2;
    }

    public static java.lang.String getVariableNameForReturnType(java.lang.reflect.Method, java.lang.Object)
    {
        java.lang.Class $r1;
        java.lang.Object r2;
        java.lang.String $r3;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r3 = staticinvoke <org.springframework.core.Conventions: java.lang.String getVariableNameForReturnType(java.lang.reflect.Method,java.lang.Class,java.lang.Object)>(r0, $r1, r2);

        return $r3;
    }

    public static java.lang.String getVariableNameForReturnType(java.lang.reflect.Method, java.lang.Class, java.lang.Object)
    {
        java.lang.String $r9, $r13, $r14;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.util.Collection r12;
        java.lang.IllegalArgumentException $r7, $r8, $r10;
        java.lang.Class r1, $r2, $r3, $r4, r11;
        java.lang.Object r5, $r6;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Class;

        r5 := @parameter2: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Method must not be null");

        $r2 = class "Ljava/lang/Object;";

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label02;

        if r5 != null goto label01;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot generate variable name for an Object return type with null value");

        throw $r10;

     label01:
        $r9 = staticinvoke <org.springframework.core.Conventions: java.lang.String getVariableName(java.lang.Object)>(r5);

        return $r9;

     label02:
        z5 = 0;

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label03;

        r11 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        z5 = 1;

        goto label08;

     label03:
        $r3 = class "Ljava/util/Collection;";

        $z2 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z2 == 0 goto label07;

        $r4 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getCollectionReturnType(java.lang.reflect.Method)>(r0);

        r11 = $r4;

        if $r4 != null goto label06;

        $z3 = r5 instanceof java.util.Collection;

        if $z3 != 0 goto label04;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot generate variable name for non-typed Collection return type and a non-Collection value");

        throw $r8;

     label04:
        r12 = (java.util.Collection) r5;

        $z4 = interfaceinvoke r12.<java.util.Collection: boolean isEmpty()>();

        if $z4 == 0 goto label05;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot generate variable name for non-typed Collection return type and an empty Collection value");

        throw $r7;

     label05:
        $r6 = staticinvoke <org.springframework.core.Conventions: java.lang.Object peekAhead(java.util.Collection)>(r12);

        r11 = staticinvoke <org.springframework.core.Conventions: java.lang.Class getClassForValue(java.lang.Object)>($r6);

     label06:
        z5 = 1;

        goto label08;

     label07:
        r11 = r1;

     label08:
        $r13 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortNameAsProperty(java.lang.Class)>(r11);

        if z5 == 0 goto label09;

        $r14 = staticinvoke <org.springframework.core.Conventions: java.lang.String pluralize(java.lang.String)>($r13);

        goto label10;

     label09:
        $r14 = $r13;

     label10:
        return $r14;
    }

    public static java.lang.String attributeNameToPropertyName(java.lang.String)
    {
        int $i0, $i1, i2, $i4, $i5, i7, i8, $i9;
        java.lang.String r0, $r4;
        boolean $z0, z1;
        char c3, $c6;
        char[] $r1, r2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'attributeName\' must not be null");

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("-");

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        r2 = newarray (char)[$i1];

        i7 = 0;

        z1 = 0;

        i2 = lengthof $r1;

        i8 = 0;

        goto label6;

     label2:
        c3 = $r1[i8];

        $i9 = (int) c3;

        if $i9 != 45 goto label3;

        z1 = 1;

        goto label5;

     label3:
        if z1 == 0 goto label4;

        $i5 = i7;

        i7 = i7 + 1;

        $c6 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c3);

        r2[$i5] = $c6;

        z1 = 0;

        goto label5;

     label4:
        $i4 = i7;

        i7 = i7 + 1;

        r2[$i4] = c3;

     label5:
        i8 = i8 + 1;

     label6:
        if i8 < i2 goto label2;

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r2, 0, i7);

        return $r4;
    }

    public static java.lang.String getQualifiedAttributeName(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.StringBuilder $r2, $r5, $r6;
        java.lang.String r1, $r3, $r4, $r7;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'enclosingClass\' must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "\'attributeName\' must not be null");

        $r2 = new java.lang.StringBuilder;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private static java.lang.Class getClassForValue(java.lang.Object)
    {
        java.lang.Class[] $r4;
        java.util.Set $r6;
        int $i0, i1, i2, $i4;
        java.lang.Object r0;
        java.lang.Class $r1, $r3, r5, r7;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r7 = $r1;

        $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>($r1);

        if $z0 == 0 goto label4;

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i1 = lengthof $r4;

        i2 = 0;

        goto label3;

     label1:
        r5 = $r4[i2];

        $r6 = <org.springframework.core.Conventions: java.util.Set ignoredInterfaces>;

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z1 != 0 goto label2;

        return r5;

     label2:
        i2 = i2 + 1;

     label3:
        if i2 < i1 goto label1;

        goto label5;

     label4:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int)>(36);

        $i4 = (int) -1;

        if $i0 == $i4 goto label5;

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        if $r3 != null goto label5;

        r7 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getSuperclass()>();

     label5:
        return r7;
    }

    private static java.lang.String pluralize(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r3;
        java.lang.String r1, $r2, $r4;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("List");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private static java.lang.Object peekAhead(java.util.Collection)
    {
        java.lang.IllegalStateException $r3, $r4;
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to peek ahead in non-empty collection - no element found");

        throw $r4;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to peek ahead in non-empty collection - only null element found");

        throw $r3;

     label2:
        return $r2;
    }
}
