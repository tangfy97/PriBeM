public final enum class thredds.catalog2.xml.names.CatalogNamespace extends java.lang.Enum
{
    public static final enum thredds.catalog2.xml.names.CatalogNamespace CATALOG_1_0;
    public static final enum thredds.catalog2.xml.names.CatalogNamespace CATALOG_0_6;
    public static final enum thredds.catalog2.xml.names.CatalogNamespace XLINK;
    private java.lang.String standardPrefix;
    private java.lang.String namespaceUri;
    private java.lang.String schemaLocalResourceName;
    private java.net.URI schemaRemoteResourceUri;
    private static final thredds.catalog2.xml.names.CatalogNamespace[] $VALUES;

    public static thredds.catalog2.xml.names.CatalogNamespace[] values()
    {
        thredds.catalog2.xml.names.CatalogNamespace[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <thredds.catalog2.xml.names.CatalogNamespace: thredds.catalog2.xml.names.CatalogNamespace[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (thredds.catalog2.xml.names.CatalogNamespace[]) $r1;

        return $r2;
    }

    public static thredds.catalog2.xml.names.CatalogNamespace valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        thredds.catalog2.xml.names.CatalogNamespace $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lthredds/catalog2/xml/names/CatalogNamespace;", r0);

        $r2 = (thredds.catalog2.xml.names.CatalogNamespace) $r1;

        return $r2;
    }

    public static thredds.catalog2.xml.names.CatalogNamespace getNamespace(java.lang.String)
    {
        int i0, i1;
        thredds.catalog2.xml.names.CatalogNamespace[] $r1;
        java.lang.String r0, $r3;
        thredds.catalog2.xml.names.CatalogNamespace r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <thredds.catalog2.xml.names.CatalogNamespace: thredds.catalog2.xml.names.CatalogNamespace[] values()>();

        i0 = lengthof $r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = $r1[i1];

        $r3 = r2.<thredds.catalog2.xml.names.CatalogNamespace: java.lang.String namespaceUri>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label3;

        return r2;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return null;
    }

    private void <init>(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.net.URISyntaxException $r9;
        thredds.catalog2.xml.names.CatalogNamespace r0;
        int i0;
        java.lang.String r1, r2, r3, r4, r5, $r15;
        java.net.URI $r6;
        java.lang.IllegalArgumentException $r7, $r8, $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;

        r0 := @this: thredds.catalog2.xml.names.CatalogNamespace;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r4 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r3 := @parameter5: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        if r2 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The XML Namespace URI may not be null.");

        throw $r8;

     label1:
        if r3 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The remote resourc URL for the XML Schema may not be null.");

        throw $r7;

     label2:
        r0.<thredds.catalog2.xml.names.CatalogNamespace: java.lang.String standardPrefix> = r4;

        r0.<thredds.catalog2.xml.names.CatalogNamespace: java.lang.String namespaceUri> = r2;

        r0.<thredds.catalog2.xml.names.CatalogNamespace: java.lang.String schemaLocalResourceName> = r5;

     label3:
        $r6 = new java.net.URI;

        specialinvoke $r6.<java.net.URI: void <init>(java.lang.String)>(r3);

        r0.<thredds.catalog2.xml.names.CatalogNamespace: java.net.URI schemaRemoteResourceUri> = $r6;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Badly formed resource URI [");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r9);

        throw $r10;

     label6:
        return;

        catch java.net.URISyntaxException from label3 to label4 with label5;
    }

    public java.lang.String getStandardPrefix()
    {
        java.lang.String $r1;
        thredds.catalog2.xml.names.CatalogNamespace r0;

        r0 := @this: thredds.catalog2.xml.names.CatalogNamespace;

        $r1 = r0.<thredds.catalog2.xml.names.CatalogNamespace: java.lang.String standardPrefix>;

        return $r1;
    }

    public java.lang.String getNamespaceUri()
    {
        java.lang.String $r1;
        thredds.catalog2.xml.names.CatalogNamespace r0;

        r0 := @this: thredds.catalog2.xml.names.CatalogNamespace;

        $r1 = r0.<thredds.catalog2.xml.names.CatalogNamespace: java.lang.String namespaceUri>;

        return $r1;
    }

    public java.lang.String getSchemaLocalResourceName()
    {
        java.lang.String $r1;
        thredds.catalog2.xml.names.CatalogNamespace r0;

        r0 := @this: thredds.catalog2.xml.names.CatalogNamespace;

        $r1 = r0.<thredds.catalog2.xml.names.CatalogNamespace: java.lang.String schemaLocalResourceName>;

        return $r1;
    }

    public java.net.URI getSchemaRemoteResourceUri()
    {
        java.net.URI $r1;
        thredds.catalog2.xml.names.CatalogNamespace r0;

        r0 := @this: thredds.catalog2.xml.names.CatalogNamespace;

        $r1 = r0.<thredds.catalog2.xml.names.CatalogNamespace: java.net.URI schemaRemoteResourceUri>;

        return $r1;
    }

    public java.io.InputStream getSchemaAsInputStream() throws java.io.IOException
    {
        thredds.util.HttpUriResolver $r4;
        thredds.catalog2.xml.names.CatalogNamespace r0;
        java.lang.Class $r5;
        java.lang.String $r1, $r7;
        java.net.URI $r2, $r3;
        java.lang.ClassLoader $r6;
        java.io.InputStream r8;

        r0 := @this: thredds.catalog2.xml.names.CatalogNamespace;

        r8 = null;

        $r1 = virtualinvoke r0.<thredds.catalog2.xml.names.CatalogNamespace: java.lang.String getSchemaLocalResourceName()>();

        if $r1 == null goto label1;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r7 = virtualinvoke r0.<thredds.catalog2.xml.names.CatalogNamespace: java.lang.String getSchemaLocalResourceName()>();

        r8 = virtualinvoke $r6.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r7);

     label1:
        if r8 != null goto label2;

        $r2 = virtualinvoke r0.<thredds.catalog2.xml.names.CatalogNamespace: java.net.URI getSchemaRemoteResourceUri()>();

        if $r2 == null goto label2;

        $r3 = virtualinvoke r0.<thredds.catalog2.xml.names.CatalogNamespace: java.net.URI getSchemaRemoteResourceUri()>();

        $r4 = staticinvoke <thredds.util.HttpUriResolverFactory: thredds.util.HttpUriResolver getDefaultHttpUriResolver(java.net.URI)>($r3);

        virtualinvoke $r4.<thredds.util.HttpUriResolver: void makeRequest()>();

        r8 = virtualinvoke $r4.<thredds.util.HttpUriResolver: java.io.InputStream getResponseBodyAsInputStream()>();

     label2:
        return r8;
    }

    public javax.xml.validation.Schema getSchema() throws java.io.IOException, org.xml.sax.SAXException
    {
        javax.xml.validation.SchemaFactory $r0;
        javax.xml.transform.stream.StreamSource $r1;
        java.net.URI $r4;
        java.lang.String $r5;
        thredds.catalog2.xml.names.CatalogNamespace r2;
        javax.xml.validation.Schema $r6;
        java.io.InputStream $r3;

        r2 := @this: thredds.catalog2.xml.names.CatalogNamespace;

        $r0 = staticinvoke <javax.xml.validation.SchemaFactory: javax.xml.validation.SchemaFactory newInstance(java.lang.String)>("http://www.w3.org/2001/XMLSchema");

        $r1 = new javax.xml.transform.stream.StreamSource;

        $r3 = virtualinvoke r2.<thredds.catalog2.xml.names.CatalogNamespace: java.io.InputStream getSchemaAsInputStream()>();

        specialinvoke $r1.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r3);

        $r4 = virtualinvoke r2.<thredds.catalog2.xml.names.CatalogNamespace: java.net.URI getSchemaRemoteResourceUri()>();

        $r5 = virtualinvoke $r4.<java.net.URI: java.lang.String toString()>();

        virtualinvoke $r1.<javax.xml.transform.stream.StreamSource: void setSystemId(java.lang.String)>($r5);

        $r6 = virtualinvoke $r0.<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(javax.xml.transform.Source)>($r1);

        return $r6;
    }

    static void <clinit>()
    {
        thredds.catalog2.xml.names.CatalogNamespace[] $r3;
        thredds.catalog2.xml.names.CatalogNamespace $r0, $r1, $r2, $r4, $r5, $r6;

        $r0 = new thredds.catalog2.xml.names.CatalogNamespace;

        specialinvoke $r0.<thredds.catalog2.xml.names.CatalogNamespace: void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("CATALOG_1_0", 0, "", "http://www.unidata.ucar.edu/namespaces/thredds/InvCatalog/v1.0", "/resources/thredds/schemas/InvCatalog.1.0.2.xsd", "http://www.unidata.ucar.edu/schemas/thredds/InvCatalog.1.0.2.xsd");

        <thredds.catalog2.xml.names.CatalogNamespace: thredds.catalog2.xml.names.CatalogNamespace CATALOG_1_0> = $r0;

        $r1 = new thredds.catalog2.xml.names.CatalogNamespace;

        specialinvoke $r1.<thredds.catalog2.xml.names.CatalogNamespace: void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("CATALOG_0_6", 1, "oldThredds", "http://www.unidata.ucar.edu/thredds", "/resources/thredds/schemas/InvCatalog.0.6.xsd", "http://www.unidata.ucar.edu/schemas/thredds/InvCatalog.0.6.xsd");

        <thredds.catalog2.xml.names.CatalogNamespace: thredds.catalog2.xml.names.CatalogNamespace CATALOG_0_6> = $r1;

        $r2 = new thredds.catalog2.xml.names.CatalogNamespace;

        specialinvoke $r2.<thredds.catalog2.xml.names.CatalogNamespace: void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("XLINK", 2, "xlink", "http://www.w3.org/1999/xlink", "/resources/thredds/schemas/xlink.xsd", "");

        <thredds.catalog2.xml.names.CatalogNamespace: thredds.catalog2.xml.names.CatalogNamespace XLINK> = $r2;

        $r3 = newarray (thredds.catalog2.xml.names.CatalogNamespace)[3];

        $r4 = <thredds.catalog2.xml.names.CatalogNamespace: thredds.catalog2.xml.names.CatalogNamespace CATALOG_1_0>;

        $r3[0] = $r4;

        $r5 = <thredds.catalog2.xml.names.CatalogNamespace: thredds.catalog2.xml.names.CatalogNamespace CATALOG_0_6>;

        $r3[1] = $r5;

        $r6 = <thredds.catalog2.xml.names.CatalogNamespace: thredds.catalog2.xml.names.CatalogNamespace XLINK>;

        $r3[2] = $r6;

        <thredds.catalog2.xml.names.CatalogNamespace: thredds.catalog2.xml.names.CatalogNamespace[] $VALUES> = $r3;

        return;
    }
}
