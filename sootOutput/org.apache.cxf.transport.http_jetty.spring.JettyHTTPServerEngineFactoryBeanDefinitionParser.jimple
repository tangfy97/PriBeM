public class org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser extends org.apache.cxf.configuration.spring.AbstractBeanDefinitionParser
{
    static final java.lang.String HTTP_JETTY_NS;

    public void <init>()
    {
        org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser;

        specialinvoke r0.<org.apache.cxf.configuration.spring.AbstractBeanDefinitionParser: void <init>()>();

        return;
    }

    protected java.lang.String resolveId(org.w3c.dom.Element, org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.factory.xml.ParserContext) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r3;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r6, $r9;
        org.springframework.beans.factory.xml.ParserContext r4;
        java.lang.String $r2, $r5, $r8, $r11, $r13;
        org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser r0;
        boolean $z0, $z1;
        org.w3c.dom.Element r1;
        java.lang.Class $r7, $r10, $r12;

        r0 := @this: org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r4 := @parameter2: org.springframework.beans.factory.xml.ParserContext;

        $r2 = virtualinvoke r0.<org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser: java.lang.String getIdOrName(org.w3c.dom.Element)>(r1);

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r12 = class "Lorg/apache/cxf/transport/http_jetty/JettyHTTPServerEngineFactory;";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        return $r13;

     label1:
        $r5 = specialinvoke r0.<org.apache.cxf.configuration.spring.AbstractBeanDefinitionParser: java.lang.String resolveId(org.w3c.dom.Element,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.factory.xml.ParserContext)>(r1, r3, r4);

        $r6 = virtualinvoke r4.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>();

        $r7 = class "Lorg/apache/cxf/transport/http_jetty/JettyHTTPServerEngineFactory;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $z1 = interfaceinvoke $r6.<org.springframework.beans.factory.support.BeanDefinitionRegistry: boolean containsBeanDefinition(java.lang.String)>($r8);

        if $z1 != 0 goto label2;

        $r9 = virtualinvoke r4.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>();

        $r10 = class "Lorg/apache/cxf/transport/http_jetty/JettyHTTPServerEngineFactory;";

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r9.<org.springframework.beans.factory.support.BeanDefinitionRegistry: void registerAlias(java.lang.String,java.lang.String)>($r5, $r11);

     label2:
        return $r5;
    }

    public void doParse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext, org.springframework.beans.factory.support.BeanDefinitionBuilder)
    {
        java.lang.Object[] $r10, $r12;
        org.springframework.beans.factory.support.BeanDefinitionBuilder $r2, r8;
        org.springframework.beans.factory.support.AbstractBeanDefinition $r7, $r11, $r13;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r4;
        org.springframework.beans.factory.xml.ParserContext r3;
        int $i0;
        org.springframework.beans.factory.config.BeanDefinition $r21;
        java.lang.String $r1, $r6;
        org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser r9;
        boolean $z0;
        java.lang.RuntimeException $r20;
        java.lang.Exception $r17;
        java.util.List $r15;
        org.w3c.dom.Element r0;
        org.apache.cxf.configuration.spring.BusWiringType $r16;
        java.lang.Class $r5;
        javax.xml.namespace.QName $r19;

        r9 := @this: org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        r8 := @parameter2: org.springframework.beans.factory.support.BeanDefinitionBuilder;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("bus");

        $r2 = staticinvoke <org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder rootBeanDefinition(java.lang.Class)>(class "Lorg/apache/cxf/transport/http_jetty/spring/JettySpringTypesFactory;");

        $r4 = virtualinvoke r3.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>();

        $r5 = class "Lorg/apache/cxf/transport/http_jetty/spring/JettySpringTypesFactory;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r2.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.AbstractBeanDefinition getBeanDefinition()>();

        $r21 = (org.springframework.beans.factory.config.BeanDefinition) $r7;

        interfaceinvoke $r4.<org.springframework.beans.factory.support.BeanDefinitionRegistry: void registerBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>($r6, $r21);

     label1:
        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r1);

        if $z0 == 0 goto label2;

        $r16 = <org.apache.cxf.configuration.spring.BusWiringType: org.apache.cxf.configuration.spring.BusWiringType CONSTRUCTOR>;

        virtualinvoke r9.<org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser: void addBusWiringAttribute(org.springframework.beans.factory.support.BeanDefinitionBuilder,org.apache.cxf.configuration.spring.BusWiringType)>(r8, $r16);

        goto label3;

     label2:
        virtualinvoke r8.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addConstructorArgReference(java.lang.String)>($r1);

     label3:
        $r10 = newarray (java.lang.Object)[0];

        $r11 = virtualinvoke r9.<org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser: org.springframework.beans.factory.support.AbstractBeanDefinition mapElementToJaxbBean(org.w3c.dom.Element,java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r0, class "Lorg/apache/cxf/transports/http_jetty/configuration/TLSServerParametersIdentifiedType;", class "Lorg/apache/cxf/transport/http_jetty/spring/JettySpringTypesFactory;", "createTLSServerParametersMap", $r10);

        virtualinvoke r8.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addConstructorArg(java.lang.Object)>($r11);

        $r12 = newarray (java.lang.Object)[0];

        $r13 = virtualinvoke r9.<org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser: org.springframework.beans.factory.support.AbstractBeanDefinition mapElementToJaxbBean(org.w3c.dom.Element,java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r0, class "Lorg/apache/cxf/transports/http_jetty/configuration/ThreadingParametersIdentifiedType;", class "Lorg/apache/cxf/transport/http_jetty/spring/JettySpringTypesFactory;", "createThreadingParametersMap", $r12);

        virtualinvoke r8.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addConstructorArg(java.lang.Object)>($r13);

        $r19 = new javax.xml.namespace.QName;

        specialinvoke $r19.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://cxf.apache.org/transports/http-jetty/configuration", "engine");

        $r15 = specialinvoke r9.<org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser: java.util.List getRequiredElementsList(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,javax.xml.namespace.QName,org.springframework.beans.factory.support.BeanDefinitionBuilder)>(r0, r3, $r19, r8);

        $i0 = interfaceinvoke $r15.<java.util.List: int size()>();

        if $i0 <= 0 goto label4;

        virtualinvoke r8.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("enginesList", $r15);

     label4:
        goto label6;

     label5:
        $r17 := @caughtexception;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not process configuration.", $r17);

        throw $r20;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    private java.util.List getRequiredElementsList(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext, javax.xml.namespace.QName, org.springframework.beans.factory.support.BeanDefinitionBuilder)
    {
        org.springframework.beans.factory.support.BeanDefinitionBuilder r12;
        org.springframework.beans.factory.support.AbstractBeanDefinition $r13;
        org.springframework.beans.factory.support.ManagedList $r16;
        org.springframework.beans.factory.xml.ParserContext r6;
        int $i0;
        org.springframework.beans.factory.xml.BeanDefinitionParserDelegate $r11;
        org.springframework.beans.factory.config.BeanDefinition $r17;
        java.lang.String $r2, $r3;
        org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser r15;
        boolean $z0;
        java.util.Iterator $r8;
        java.util.List $r4, $r18;
        org.w3c.dom.Element r0, r10;
        java.lang.Object $r7, $r9, $r14;
        javax.xml.namespace.QName r1;

        r15 := @this: org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r6 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        r1 := @parameter2: javax.xml.namespace.QName;

        r12 := @parameter3: org.springframework.beans.factory.support.BeanDefinitionBuilder;

        $r2 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r3 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r4 = staticinvoke <org.apache.cxf.helpers.DOMUtils: java.util.List findAllElementsByTagNameNS(org.w3c.dom.Element,java.lang.String,java.lang.String)>(r0, $r2, $r3);

        $r16 = new org.springframework.beans.factory.support.ManagedList;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        specialinvoke $r16.<org.springframework.beans.factory.support.ManagedList: void <init>(int)>($i0);

        $r7 = virtualinvoke r6.<org.springframework.beans.factory.xml.ParserContext: java.lang.Object extractSource(java.lang.Object)>(r0);

        virtualinvoke $r16.<org.springframework.beans.factory.support.ManagedList: void setSource(java.lang.Object)>($r7);

        $r8 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.w3c.dom.Element) $r9;

        $r11 = virtualinvoke r6.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate getDelegate()>();

        $r13 = virtualinvoke r12.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.AbstractBeanDefinition getBeanDefinition()>();

        $r17 = (org.springframework.beans.factory.config.BeanDefinition) $r13;

        $r14 = virtualinvoke $r11.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.lang.Object parsePropertySubElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)>(r10, $r17);

        virtualinvoke $r16.<org.springframework.beans.factory.support.ManagedList: boolean add(java.lang.Object)>($r14);

        goto label1;

     label2:
        $r18 = (java.util.List) $r16;

        return $r18;
    }

    protected boolean shouldGenerateId()
    {
        org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser;

        return 1;
    }

    protected java.lang.Class getBeanClass(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r1;
        org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        return class "Lorg/apache/cxf/transport/http_jetty/spring/JettyHTTPServerEngineFactoryBeanDefinitionParser$SpringJettyHTTPServerEngineFactory;";
    }

    public static void <clinit>()
    {
        <org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineFactoryBeanDefinitionParser: java.lang.String HTTP_JETTY_NS> = "http://cxf.apache.org/transports/http-jetty/configuration";

        return;
    }
}
