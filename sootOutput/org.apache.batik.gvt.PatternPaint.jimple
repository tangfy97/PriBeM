public class org.apache.batik.gvt.PatternPaint extends java.lang.Object implements java.awt.Paint
{
    private org.apache.batik.gvt.GraphicsNode node;
    private java.awt.geom.Rectangle2D patternRegion;
    private java.awt.geom.AffineTransform patternTransform;
    private org.apache.batik.ext.awt.image.renderable.Filter tile;
    private boolean overflow;
    private org.apache.batik.gvt.PatternPaintContext lastContext;

    public void <init>(org.apache.batik.gvt.GraphicsNode, java.awt.geom.Rectangle2D, boolean, java.awt.geom.AffineTransform)
    {
        org.apache.batik.gvt.GraphicsNode r1;
        java.awt.geom.Rectangle2D r2, r8, $r11;
        org.apache.batik.gvt.PatternPaint r0;
        java.awt.geom.AffineTransform r3;
        java.lang.IllegalArgumentException $r12, $r13;
        org.apache.batik.ext.awt.image.renderable.Filter $r6;
        org.apache.batik.gvt.CompositeGraphicsNode $r4;
        org.apache.batik.ext.awt.image.PadMode $r10;
        java.util.List $r5;
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit $r9;
        java.lang.Object $r7;
        boolean z0;

        r0 := @this: org.apache.batik.gvt.PatternPaint;

        r1 := @parameter0: org.apache.batik.gvt.GraphicsNode;

        r2 := @parameter1: java.awt.geom.Rectangle2D;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.awt.geom.AffineTransform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r13;

     label1:
        if r2 != null goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label2:
        r0.<org.apache.batik.gvt.PatternPaint: org.apache.batik.gvt.GraphicsNode node> = r1;

        r0.<org.apache.batik.gvt.PatternPaint: java.awt.geom.Rectangle2D patternRegion> = r2;

        r0.<org.apache.batik.gvt.PatternPaint: boolean overflow> = z0;

        r0.<org.apache.batik.gvt.PatternPaint: java.awt.geom.AffineTransform patternTransform> = r3;

        $r4 = new org.apache.batik.gvt.CompositeGraphicsNode;

        specialinvoke $r4.<org.apache.batik.gvt.CompositeGraphicsNode: void <init>()>();

        $r5 = virtualinvoke $r4.<org.apache.batik.gvt.CompositeGraphicsNode: java.util.List getChildren()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r4.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter getGraphicsNodeRable(boolean)>(1);

        $r7 = virtualinvoke r2.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r8 = (java.awt.geom.Rectangle2D) $r7;

        if z0 == 0 goto label3;

        $r11 = virtualinvoke $r4.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D getBounds()>();

        virtualinvoke r8.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r11);

     label3:
        $r9 = new org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        $r10 = <org.apache.batik.ext.awt.image.PadMode: org.apache.batik.ext.awt.image.PadMode ZERO_PAD>;

        specialinvoke $r9.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.awt.geom.Rectangle2D,org.apache.batik.ext.awt.image.PadMode)>($r6, r8, $r10);

        r0.<org.apache.batik.gvt.PatternPaint: org.apache.batik.ext.awt.image.renderable.Filter tile> = $r9;

        return;
    }

    public org.apache.batik.gvt.GraphicsNode getGraphicsNode()
    {
        org.apache.batik.gvt.PatternPaint r0;
        org.apache.batik.gvt.GraphicsNode $r1;

        r0 := @this: org.apache.batik.gvt.PatternPaint;

        $r1 = r0.<org.apache.batik.gvt.PatternPaint: org.apache.batik.gvt.GraphicsNode node>;

        return $r1;
    }

    public java.awt.geom.Rectangle2D getPatternRect()
    {
        java.awt.geom.Rectangle2D $r1, $r3;
        org.apache.batik.gvt.PatternPaint r0;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.gvt.PatternPaint;

        $r1 = r0.<org.apache.batik.gvt.PatternPaint: java.awt.geom.Rectangle2D patternRegion>;

        $r2 = virtualinvoke $r1.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        $r3 = (java.awt.geom.Rectangle2D) $r2;

        return $r3;
    }

    public java.awt.geom.AffineTransform getPatternTransform()
    {
        org.apache.batik.gvt.PatternPaint r0;
        java.awt.geom.AffineTransform $r1;

        r0 := @this: org.apache.batik.gvt.PatternPaint;

        $r1 = r0.<org.apache.batik.gvt.PatternPaint: java.awt.geom.AffineTransform patternTransform>;

        return $r1;
    }

    public boolean getOverflow()
    {
        org.apache.batik.gvt.PatternPaint r0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.PatternPaint;

        $z0 = r0.<org.apache.batik.gvt.PatternPaint: boolean overflow>;

        return $z0;
    }

    public java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints)
    {
        java.awt.geom.Rectangle2D r17, $r21;
        java.awt.RenderingHints r4;
        byte $b0, $b1, $b2, $b3, $b4, $b7;
        org.apache.batik.gvt.PatternPaint$PatternPaintContextWrapper $r11;
        boolean $z0, $z1;
        java.awt.geom.AffineTransform $r1, $r10, $r14, $r15, r18;
        org.apache.batik.ext.awt.image.renderable.Filter $r20;
        org.apache.batik.gvt.PatternPaintContext $r2, $r5, $r9, $r12, $r13, $r19, $r22;
        java.awt.Rectangle r16;
        double[] r7, r8;
        org.apache.batik.gvt.PatternPaint r0;
        int $i5, $i6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;
        java.awt.image.ColorModel r3, $r6;

        r0 := @this: org.apache.batik.gvt.PatternPaint;

        r3 := @parameter0: java.awt.image.ColorModel;

        r16 := @parameter1: java.awt.Rectangle;

        r17 := @parameter2: java.awt.geom.Rectangle2D;

        r18 := @parameter3: java.awt.geom.AffineTransform;

        r4 := @parameter4: java.awt.RenderingHints;

        $r1 = r0.<org.apache.batik.gvt.PatternPaint: java.awt.geom.AffineTransform patternTransform>;

        if $r1 == null goto label1;

        $r14 = new java.awt.geom.AffineTransform;

        specialinvoke $r14.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r18);

        r18 = $r14;

        $r15 = r0.<org.apache.batik.gvt.PatternPaint: java.awt.geom.AffineTransform patternTransform>;

        virtualinvoke $r14.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r15);

     label1:
        $r2 = r0.<org.apache.batik.gvt.PatternPaint: org.apache.batik.gvt.PatternPaintContext lastContext>;

        if $r2 == null goto label3;

        $r5 = r0.<org.apache.batik.gvt.PatternPaint: org.apache.batik.gvt.PatternPaintContext lastContext>;

        $r6 = virtualinvoke $r5.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.ColorModel getColorModel()>();

        $z0 = virtualinvoke $r6.<java.awt.image.ColorModel: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label3;

        r7 = newarray (double)[6];

        r8 = newarray (double)[6];

        virtualinvoke r18.<java.awt.geom.AffineTransform: void getMatrix(double[])>(r7);

        $r9 = r0.<org.apache.batik.gvt.PatternPaint: org.apache.batik.gvt.PatternPaintContext lastContext>;

        $r10 = virtualinvoke $r9.<org.apache.batik.gvt.PatternPaintContext: java.awt.geom.AffineTransform getUsr2Dev()>();

        virtualinvoke $r10.<java.awt.geom.AffineTransform: void getMatrix(double[])>(r8);

        $d1 = r7[0];

        $d0 = r8[0];

        $b0 = $d1 cmpl $d0;

        if $b0 != 0 goto label3;

        $d3 = r7[1];

        $d2 = r8[1];

        $b1 = $d3 cmpl $d2;

        if $b1 != 0 goto label3;

        $d5 = r7[2];

        $d4 = r8[2];

        $b2 = $d5 cmpl $d4;

        if $b2 != 0 goto label3;

        $d7 = r7[3];

        $d6 = r8[3];

        $b3 = $d7 cmpl $d6;

        if $b3 != 0 goto label3;

        $d9 = r7[4];

        $d8 = r8[4];

        $b4 = $d9 cmpl $d8;

        if $b4 != 0 goto label2;

        $d19 = r7[5];

        $d18 = r8[5];

        $b7 = $d19 cmpl $d18;

        if $b7 != 0 goto label2;

        $r13 = r0.<org.apache.batik.gvt.PatternPaint: org.apache.batik.gvt.PatternPaintContext lastContext>;

        return $r13;

     label2:
        $r11 = new org.apache.batik.gvt.PatternPaint$PatternPaintContextWrapper;

        $r12 = r0.<org.apache.batik.gvt.PatternPaint: org.apache.batik.gvt.PatternPaintContext lastContext>;

        $d11 = r8[4];

        $d10 = r7[4];

        $d12 = $d11 - $d10;

        $d13 = $d12 + 0.5;

        $i6 = (int) $d13;

        $d15 = r8[5];

        $d14 = r7[5];

        $d16 = $d15 - $d14;

        $d17 = $d16 + 0.5;

        $i5 = (int) $d17;

        specialinvoke $r11.<org.apache.batik.gvt.PatternPaint$PatternPaintContextWrapper: void <init>(org.apache.batik.gvt.PatternPaintContext,int,int)>($r12, $i6, $i5);

        return $r11;

     label3:
        $r19 = new org.apache.batik.gvt.PatternPaintContext;

        $r20 = r0.<org.apache.batik.gvt.PatternPaint: org.apache.batik.ext.awt.image.renderable.Filter tile>;

        $r21 = r0.<org.apache.batik.gvt.PatternPaint: java.awt.geom.Rectangle2D patternRegion>;

        $z1 = r0.<org.apache.batik.gvt.PatternPaint: boolean overflow>;

        specialinvoke $r19.<org.apache.batik.gvt.PatternPaintContext: void <init>(java.awt.image.ColorModel,java.awt.geom.AffineTransform,java.awt.RenderingHints,org.apache.batik.ext.awt.image.renderable.Filter,java.awt.geom.Rectangle2D,boolean)>(r3, r18, r4, $r20, $r21, $z1);

        r0.<org.apache.batik.gvt.PatternPaint: org.apache.batik.gvt.PatternPaintContext lastContext> = $r19;

        $r22 = r0.<org.apache.batik.gvt.PatternPaint: org.apache.batik.gvt.PatternPaintContext lastContext>;

        return $r22;
    }

    public int getTransparency()
    {
        org.apache.batik.gvt.PatternPaint r0;

        r0 := @this: org.apache.batik.gvt.PatternPaint;

        return 3;
    }
}
