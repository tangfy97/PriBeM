public class org.apache.cxf.interceptor.transform.TransformOutInterceptor extends org.apache.cxf.phase.AbstractPhaseInterceptor
{
    private static final java.lang.String OUTPUT_STREAM_HOLDER;
    private static final java.lang.String TRANSFORM_SKIP;
    private static final org.apache.cxf.interceptor.StaxOutEndingInterceptor ENDING;
    private java.util.Map outElementsMap;
    private java.util.Map outAppendMap;
    private java.util.List outDropElements;
    private boolean attributesToElements;
    private boolean skipOnFault;
    private java.lang.String contextPropertyName;
    private java.lang.String defaultNamespace;

    public void <init>()
    {
        org.apache.cxf.interceptor.transform.TransformOutInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.transform.TransformOutInterceptor;

        specialinvoke r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: void <init>(java.lang.String)>("pre-stream");

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.cxf.interceptor.transform.TransformOutInterceptor r0;
        java.lang.Class $r2, $r4;
        java.lang.String r1, $r3, $r5;

        r0 := @this: org.apache.cxf.interceptor.transform.TransformOutInterceptor;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>(r1);

        $r2 = class "Lorg/apache/cxf/interceptor/StaxOutInterceptor;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: void addBefore(java.lang.String)>($r3);

        $r4 = class "Lorg/apache/cxf/interceptor/LoggingOutInterceptor;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: void addAfter(java.lang.String)>($r5);

        return;
    }

    public void handleFault(org.apache.cxf.message.Message)
    {
        java.io.OutputStream r4;
        org.apache.cxf.message.Message r1;
        org.apache.cxf.interceptor.transform.TransformOutInterceptor r0;
        java.lang.Object $r3;
        java.lang.String $r2;

        r0 := @this: org.apache.cxf.interceptor.transform.TransformOutInterceptor;

        r1 := @parameter0: org.apache.cxf.message.Message;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void handleFault(org.apache.cxf.message.Message)>(r1);

        $r2 = <org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.lang.String OUTPUT_STREAM_HOLDER>;

        $r3 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.io.OutputStream) $r3;

        if r4 == null goto label1;

        interfaceinvoke r1.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/io/OutputStream;", r4);

     label1:
        return;
    }

    public void handleMessage(org.apache.cxf.message.Message)
    {
        org.apache.cxf.interceptor.InterceptorChain $r11;
        org.apache.cxf.interceptor.transform.TransformOutInterceptor r0;
        org.apache.cxf.interceptor.StaxOutEndingInterceptor $r12;
        java.lang.Boolean $r10;
        javax.xml.stream.XMLStreamWriter r5, $r8;
        java.lang.String $r2, $r9, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.OutputStream r7;
        org.apache.cxf.message.Message r1, $r15;
        org.apache.cxf.message.Exchange $r14;
        java.lang.Object $r3, $r4, $r6, $r13;

        r0 := @this: org.apache.cxf.interceptor.transform.TransformOutInterceptor;

        r1 := @parameter0: org.apache.cxf.message.Message;

        $z0 = virtualinvoke r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: boolean isHttpVerbSupported(org.apache.cxf.message.Message)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.lang.String contextPropertyName>;

        if $r2 == null goto label2;

        $r14 = interfaceinvoke r1.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r15 = interfaceinvoke $r14.<org.apache.cxf.message.Exchange: org.apache.cxf.message.Message getInMessage()>();

        $r16 = r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.lang.String contextPropertyName>;

        $z4 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean getContextualBoolean(org.apache.cxf.message.Message,java.lang.String,boolean)>($r15, $r16, 0);

        if $z4 != 0 goto label2;

        return;

     label2:
        $z1 = r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: boolean skipOnFault>;

        if $z1 == 0 goto label3;

        $r13 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/lang/Exception;");

        if null != $r13 goto label4;

     label3:
        $r3 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("transform.skip");

        $z2 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r3);

        if $z2 == 0 goto label5;

     label4:
        return;

     label5:
        $r4 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljavax/xml/stream/XMLStreamWriter;");

        r5 = (javax.xml.stream.XMLStreamWriter) $r4;

        $r6 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/OutputStream;");

        r7 = (java.io.OutputStream) $r6;

        $r8 = virtualinvoke r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: javax.xml.stream.XMLStreamWriter createTransformWriterIfNeeded(javax.xml.stream.XMLStreamWriter,java.io.OutputStream)>(r5, r7);

        if $r8 == null goto label6;

        interfaceinvoke r1.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljavax/xml/stream/XMLStreamWriter;", $r8);

        $z3 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isRequestor(org.apache.cxf.message.Message)>(r1);

        if $z3 == 0 goto label6;

        interfaceinvoke r1.<org.apache.cxf.message.Message: void removeContent(java.lang.Class)>(class "Ljava/io/OutputStream;");

        $r9 = <org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.lang.String OUTPUT_STREAM_HOLDER>;

        interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r7);

        $r10 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>("disable.outputstream.optimization", $r10);

        $r11 = interfaceinvoke r1.<org.apache.cxf.message.Message: org.apache.cxf.interceptor.InterceptorChain getInterceptorChain()>();

        $r12 = <org.apache.cxf.interceptor.transform.TransformOutInterceptor: org.apache.cxf.interceptor.StaxOutEndingInterceptor ENDING>;

        interfaceinvoke $r11.<org.apache.cxf.interceptor.InterceptorChain: void add(org.apache.cxf.interceptor.Interceptor)>($r12);

     label6:
        return;
    }

    protected javax.xml.stream.XMLStreamWriter createTransformWriterIfNeeded(javax.xml.stream.XMLStreamWriter, java.io.OutputStream)
    {
        java.io.OutputStream r1;
        org.apache.cxf.interceptor.transform.TransformOutInterceptor r2;
        java.util.List $r5;
        java.util.Map $r4, $r6;
        javax.xml.stream.XMLStreamWriter r0, $r7;
        java.lang.String $r3;
        boolean $z0;

        r2 := @this: org.apache.cxf.interceptor.transform.TransformOutInterceptor;

        r0 := @parameter0: javax.xml.stream.XMLStreamWriter;

        r1 := @parameter1: java.io.OutputStream;

        $r6 = r2.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.util.Map outElementsMap>;

        $r5 = r2.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.util.List outDropElements>;

        $r4 = r2.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.util.Map outAppendMap>;

        $z0 = r2.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: boolean attributesToElements>;

        $r3 = r2.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.lang.String defaultNamespace>;

        $r7 = staticinvoke <org.apache.cxf.staxutils.transform.TransformUtils: javax.xml.stream.XMLStreamWriter createTransformWriterIfNeeded(javax.xml.stream.XMLStreamWriter,java.io.OutputStream,java.util.Map,java.util.List,java.util.Map,boolean,java.lang.String)>(r0, r1, $r6, $r5, $r4, $z0, $r3);

        return $r7;
    }

    public void setOutTransformElements(java.util.Map)
    {
        org.apache.cxf.interceptor.transform.TransformOutInterceptor r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.interceptor.transform.TransformOutInterceptor;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.util.Map outElementsMap> = r1;

        return;
    }

    public void setOutAppendElements(java.util.Map)
    {
        org.apache.cxf.interceptor.transform.TransformOutInterceptor r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.interceptor.transform.TransformOutInterceptor;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.util.Map outAppendMap> = r1;

        return;
    }

    public void setOutDropElements(java.util.List)
    {
        java.util.List r1;
        org.apache.cxf.interceptor.transform.TransformOutInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.transform.TransformOutInterceptor;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.util.List outDropElements> = r1;

        return;
    }

    public void setAttributesToElements(boolean)
    {
        org.apache.cxf.interceptor.transform.TransformOutInterceptor r0;
        boolean z0;

        r0 := @this: org.apache.cxf.interceptor.transform.TransformOutInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: boolean attributesToElements> = z0;

        return;
    }

    public void setSkipOnFault(boolean)
    {
        org.apache.cxf.interceptor.transform.TransformOutInterceptor r0;
        boolean z0;

        r0 := @this: org.apache.cxf.interceptor.transform.TransformOutInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: boolean skipOnFault> = z0;

        return;
    }

    protected boolean isHttpVerbSupported(org.apache.cxf.message.Message)
    {
        org.apache.cxf.message.Message r1;
        org.apache.cxf.interceptor.transform.TransformOutInterceptor r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.cxf.interceptor.transform.TransformOutInterceptor;

        r1 := @parameter0: org.apache.cxf.message.Message;

        $z0 = virtualinvoke r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: boolean isRequestor(org.apache.cxf.message.Message)>(r1);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: boolean isGET(org.apache.cxf.message.Message)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 0;

        goto label2;

     label1:
        $z2 = 1;

     label2:
        return $z2;
    }

    public void setContextPropertyName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.interceptor.transform.TransformOutInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.transform.TransformOutInterceptor;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.lang.String contextPropertyName> = r1;

        return;
    }

    public void setDefaultNamespace(java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.interceptor.transform.TransformOutInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.transform.TransformOutInterceptor;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.lang.String defaultNamespace> = r1;

        return;
    }

    static void <clinit>()
    {
        org.apache.cxf.interceptor.StaxOutEndingInterceptor $r6;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.Class $r1;
        java.lang.String $r2, $r5, $r7;

        <org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.lang.String TRANSFORM_SKIP> = "transform.skip";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lorg/apache/cxf/interceptor/transform/TransformOutInterceptor;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".outputstream");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.lang.String OUTPUT_STREAM_HOLDER> = $r5;

        $r6 = new org.apache.cxf.interceptor.StaxOutEndingInterceptor;

        $r7 = <org.apache.cxf.interceptor.transform.TransformOutInterceptor: java.lang.String OUTPUT_STREAM_HOLDER>;

        specialinvoke $r6.<org.apache.cxf.interceptor.StaxOutEndingInterceptor: void <init>(java.lang.String)>($r7);

        <org.apache.cxf.interceptor.transform.TransformOutInterceptor: org.apache.cxf.interceptor.StaxOutEndingInterceptor ENDING> = $r6;

        return;
    }
}
