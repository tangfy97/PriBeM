public final class kodkod.util.ints.Ints extends java.lang.Object
{
    public static final kodkod.util.ints.IntSet EMPTY_SET;

    static void <clinit>()
    {
        kodkod.util.ints.Ints$1 $r0;

        $r0 = new kodkod.util.ints.Ints$1;

        specialinvoke $r0.<kodkod.util.ints.Ints$1: void <init>()>();

        <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET> = $r0;

        return;
    }

    private void <init>()
    {
        kodkod.util.ints.Ints r0;

        r0 := @this: kodkod.util.ints.Ints;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static kodkod.util.ints.IntRange range(int, int)
    {
        kodkod.util.ints.IntRange$TwoPointRange $r2;
        kodkod.util.ints.IntRange$OnePointRange $r1;
        int i0, i1;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= i1 goto label1;

        $r2 = new kodkod.util.ints.IntRange$TwoPointRange;

        specialinvoke $r2.<kodkod.util.ints.IntRange$TwoPointRange: void <init>(int,int)>(i0, i1);

        return $r2;

     label1:
        if i0 != i1 goto label2;

        $r1 = new kodkod.util.ints.IntRange$OnePointRange;

        specialinvoke $r1.<kodkod.util.ints.IntRange$OnePointRange: void <init>(int)>(i0);

        return $r1;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("min > max");

        throw $r0;
    }

    public static kodkod.util.ints.IntRange merge(kodkod.util.ints.IntRange, kodkod.util.ints.IntRange)
    {
        kodkod.util.ints.IntRange r0, r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1;

        r0 := @parameter0: kodkod.util.ints.IntRange;

        r1 := @parameter1: kodkod.util.ints.IntRange;

        $z0 = virtualinvoke r0.<kodkod.util.ints.IntRange: boolean contains(kodkod.util.ints.IntRange)>(r1);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $z1 = virtualinvoke r1.<kodkod.util.ints.IntRange: boolean contains(kodkod.util.ints.IntRange)>(r0);

        if $z1 == 0 goto label2;

        return r1;

     label2:
        $i0 = virtualinvoke r0.<kodkod.util.ints.IntRange: int min()>();

        $i1 = virtualinvoke r1.<kodkod.util.ints.IntRange: int min()>();

        $i2 = staticinvoke <java.lang.StrictMath: int min(int,int)>($i0, $i1);

        $i3 = virtualinvoke r0.<kodkod.util.ints.IntRange: int max()>();

        $i4 = virtualinvoke r1.<kodkod.util.ints.IntRange: int max()>();

        $i5 = staticinvoke <java.lang.StrictMath: int max(int,int)>($i3, $i4);

        $r2 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntRange range(int,int)>($i2, $i5);

        return $r2;
    }

    public static kodkod.util.ints.IntSet unmodifiableIntSet(kodkod.util.ints.IntSet)
    {
        kodkod.util.ints.Ints$UnmodifiableIntSet $r1;
        kodkod.util.ints.IntSet r0;
        java.lang.NullPointerException $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: kodkod.util.ints.IntSet;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("s = null");

        throw $r2;

     label1:
        $z0 = r0 instanceof kodkod.util.ints.Ints$UnmodifiableIntSet;

        if $z0 != 0 goto label2;

        $z1 = r0 instanceof kodkod.util.ints.Ints$SingletonIntSet;

        if $z1 != 0 goto label2;

        $z2 = r0 instanceof kodkod.util.ints.Ints$RangeIntSet;

        if $z2 == 0 goto label3;

     label2:
        return r0;

     label3:
        $r1 = new kodkod.util.ints.Ints$UnmodifiableIntSet;

        specialinvoke $r1.<kodkod.util.ints.Ints$UnmodifiableIntSet: void <init>(kodkod.util.ints.IntSet)>(r0);

        return $r1;
    }

    public static kodkod.util.ints.IntSet singleton(int)
    {
        int i0;
        kodkod.util.ints.Ints$SingletonIntSet $r0;

        i0 := @parameter0: int;

        $r0 = new kodkod.util.ints.Ints$SingletonIntSet;

        specialinvoke $r0.<kodkod.util.ints.Ints$SingletonIntSet: void <init>(int)>(i0);

        return $r0;
    }

    public static kodkod.util.ints.IntSet rangeSet(kodkod.util.ints.IntRange)
    {
        kodkod.util.ints.Ints$RangeIntSet $r1;
        kodkod.util.ints.IntRange r0;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: kodkod.util.ints.IntRange;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $r1 = new kodkod.util.ints.Ints$RangeIntSet;

        specialinvoke $r1.<kodkod.util.ints.Ints$RangeIntSet: void <init>(kodkod.util.ints.IntRange)>(r0);

        return $r1;
    }

    public static kodkod.util.ints.IntSet bestSet(int)
    {
        kodkod.util.ints.IntTreeSet $r1;
        int i0;
        kodkod.util.ints.IntBitSet $r2;
        kodkod.util.ints.AbstractIntSet $r0;

        i0 := @parameter0: int;

        if i0 <= 512 goto label1;

        $r1 = new kodkod.util.ints.IntTreeSet;

        $r0 = $r1;

        specialinvoke $r1.<kodkod.util.ints.IntTreeSet: void <init>()>();

        goto label2;

     label1:
        $r2 = new kodkod.util.ints.IntBitSet;

        $r0 = $r2;

        specialinvoke $r2.<kodkod.util.ints.IntBitSet: void <init>(int)>(i0);

     label2:
        return $r0;
    }

    public static kodkod.util.ints.IntSet bestSet(int, int)
    {
        kodkod.util.ints.IntTreeSet $r3;
        kodkod.util.ints.IntSet $r1;
        int i0, i1, $i2;
        java.lang.IllegalArgumentException $r2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("min > max");

        throw $r2;

     label1:
        if i0 >= 0 goto label2;

        $r3 = new kodkod.util.ints.IntTreeSet;

        $r1 = $r3;

        specialinvoke $r3.<kodkod.util.ints.IntTreeSet: void <init>()>();

        goto label3;

     label2:
        $i2 = i1 + 1;

        $r1 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>($i2);

     label3:
        return $r1;
    }

    public static kodkod.util.ints.IntSet asSet(int[])
    {
        int[] r0;
        kodkod.util.ints.IntSet $r1;
        int $i0;
        kodkod.util.ints.ArrayIntSet $r2;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r1 = <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET>;

        goto label2;

     label1:
        $r2 = new kodkod.util.ints.ArrayIntSet;

        $r1 = $r2;

        specialinvoke $r2.<kodkod.util.ints.ArrayIntSet: void <init>(int[])>(r0);

     label2:
        return $r1;
    }

    public static kodkod.util.ints.IntVector asIntVector(int[])
    {
        int[] r1;
        kodkod.util.ints.Ints$2 $r0;

        r1 := @parameter0: int[];

        $r0 = new kodkod.util.ints.Ints$2;

        specialinvoke $r0.<kodkod.util.ints.Ints$2: void <init>(int[])>(r1);

        return $r0;
    }

    public static kodkod.util.ints.IntVector nCopies(int, int)
    {
        int i0, i1;
        kodkod.util.ints.Ints$3 $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new kodkod.util.ints.Ints$3;

        specialinvoke $r0.<kodkod.util.ints.Ints$3: void <init>(int,int)>(i0, i1);

        return $r0;
    }

    public static kodkod.util.ints.SparseSequence unmodifiableSequence(kodkod.util.ints.SparseSequence)
    {
        kodkod.util.ints.Ints$UnmodifiableSparseSequence $r1;
        kodkod.util.ints.SparseSequence r0;
        java.lang.NullPointerException $r2;
        boolean $z0;

        r0 := @parameter0: kodkod.util.ints.SparseSequence;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $z0 = r0 instanceof kodkod.util.ints.Ints$UnmodifiableSparseSequence;

        if $z0 == 0 goto label2;

        return r0;

     label2:
        $r1 = new kodkod.util.ints.Ints$UnmodifiableSparseSequence;

        specialinvoke $r1.<kodkod.util.ints.Ints$UnmodifiableSparseSequence: void <init>(kodkod.util.ints.SparseSequence)>(r0);

        return $r1;
    }

    private static int low16(int)
    {
        int i0, $i1, $i3;

        i0 := @parameter0: int;

        $i3 = (int) 65535;

        $i1 = i0 & $i3;

        return $i1;
    }

    private static int high16(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $i1 = i0 >>> 16;

        $i2 = staticinvoke <kodkod.util.ints.Ints: int low16(int)>($i1);

        return $i2;
    }

    public static int superFastHashAvalanche(int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, i11, i12;

        i6 := @parameter0: int;

        $i0 = i6 << 3;

        i7 = i6 ^ $i0;

        $i1 = i7 >> 5;

        i8 = i7 + $i1;

        $i2 = i8 << 4;

        i9 = i8 ^ $i2;

        $i3 = i9 >> 17;

        i10 = i9 + $i3;

        $i4 = i10 << 25;

        i11 = i10 ^ $i4;

        $i5 = i11 >> 6;

        i12 = i11 + $i5;

        return i12;
    }

    public static int superFastHashIncremental(int, int)
    {
        int i0, $i1, $i2, $i3, i4, $i5, $i6, i7, i8, i9, i10;

        i0 := @parameter0: int;

        i7 := @parameter1: int;

        $i1 = staticinvoke <kodkod.util.ints.Ints: int low16(int)>(i0);

        i8 = i7 + $i1;

        $i2 = staticinvoke <kodkod.util.ints.Ints: int high16(int)>(i0);

        $i3 = $i2 << 11;

        i4 = $i3 ^ i8;

        $i5 = i8 << 16;

        i9 = $i5 ^ i4;

        $i6 = i9 >> 11;

        i10 = i9 + $i6;

        return i10;
    }

    public static int superFastHash(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $i1 = staticinvoke <kodkod.util.ints.Ints: int superFastHashIncremental(int,int)>(i0, 11);

        $i2 = staticinvoke <kodkod.util.ints.Ints: int superFastHashAvalanche(int)>($i1);

        return $i2;
    }

    public static transient int superFastHash(int[])
    {
        int[] r0;
        int $i0, i1, i2, $i3, i4, i5;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i4 = lengthof r0;

        i5 = 0;

        i1 = lengthof r0;

        goto label3;

     label2:
        i2 = r0[i5];

        i4 = staticinvoke <kodkod.util.ints.Ints: int superFastHashIncremental(int,int)>(i2, i4);

        i5 = i5 + 1;

     label3:
        if i5 < i1 goto label2;

        $i3 = staticinvoke <kodkod.util.ints.Ints: int superFastHashAvalanche(int)>(i4);

        return $i3;
    }

    public static transient int superFastHash(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0, i1, $i2, i3, i4, $i5;
        java.lang.Object r1;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i3 = lengthof r0;

        i4 = 0;

        i1 = lengthof r0;

        goto label5;

     label2:
        r1 = r0[i4];

        if r1 != null goto label3;

        $i5 = 0;

        goto label4;

     label3:
        $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

     label4:
        i3 = staticinvoke <kodkod.util.ints.Ints: int superFastHashIncremental(int,int)>($i5, i3);

        i4 = i4 + 1;

     label5:
        if i4 < i1 goto label2;

        $i2 = staticinvoke <kodkod.util.ints.Ints: int superFastHashAvalanche(int)>(i3);

        return $i2;
    }
}
