public abstract class org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration extends org.eclipse.jdt.internal.compiler.ast.Statement implements org.eclipse.jdt.internal.compiler.lookup.InvocationSite
{
    public int declarationEnd;
    public int declarationSourceEnd;
    public int declarationSourceStart;
    public int hiddenVariableDepth;
    public org.eclipse.jdt.internal.compiler.ast.Expression initialization;
    public int modifiers;
    public int modifiersSourceStart;
    public org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations;
    public char[] name;
    public org.eclipse.jdt.internal.compiler.ast.TypeReference type;
    public static final int FIELD;
    public static final int INITIALIZER;
    public static final int ENUM_CONSTANT;
    public static final int LOCAL_VARIABLE;
    public static final int PARAMETER;
    public static final int TYPE_PARAMETER;

    public void <init>()
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Statement: void <init>()>();

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r1;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r3;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r0 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        return r0;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] genericTypeArguments()
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration;

        return null;
    }

    public abstract int getKind();

    public boolean isSuperAccess()
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration;

        return 0;
    }

    public boolean isTypeAccess()
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration;

        return 0;
    }

    public java.lang.StringBuffer printStatement(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r0;
        java.lang.StringBuffer r1, $r2, $r3;
        int i0, $i1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: java.lang.StringBuffer printAsExpression(int,java.lang.StringBuffer)>(i0, r1);

        $i1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int getKind()>();

        tableswitch($i1)
        {
            case 3: goto label1;
            default: goto label2;
        };

     label1:
        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        return $r2;

     label2:
        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        return $r3;
    }

    public java.lang.StringBuffer printAsExpression(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r2, $r11;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3, $r9;
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r1;
        org.eclipse.jdt.internal.compiler.ast.Expression $r5, $r6, $r7, $r8;
        java.lang.StringBuffer r0, $r10;
        int i0, $i1, $i2;
        char[] $r4;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i0, r0);

        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiers>;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: java.lang.StringBuffer printModifiers(int,java.lang.StringBuffer)>($i1, r0);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations>;

        if $r2 == null goto label1;

        $r11 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations>;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: java.lang.StringBuffer printAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[],java.lang.StringBuffer)>($r11, r0);

     label1:
        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        if $r3 == null goto label2;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r10 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: java.lang.StringBuffer print(int,java.lang.StringBuffer)>(0, r0);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label2:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: char[] name>;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r4);

        $i2 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int getKind()>();

        tableswitch($i2)
        {
            case 3: goto label3;
            default: goto label4;
        };

     label3:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression initialization>;

        if $r5 == null goto label5;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression initialization>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(i0, r0);

        goto label5;

     label4:
        $r7 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression initialization>;

        if $r7 == null goto label5;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r8 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression initialization>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(i0, r0);

     label5:
        return r0;
    }

    public void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        return;
    }

    public void setActualReceiverType(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r0;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;

        return;
    }

    public void setDepth(int)
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r0;
        int i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration;

        i0 := @parameter0: int;

        r0.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int hiddenVariableDepth> = i0;

        return;
    }

    public void setFieldIndex(int)
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r0;
        int i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration;

        i0 := @parameter0: int;

        return;
    }

    public static void <clinit>()
    {
        <org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int TYPE_PARAMETER> = 6;

        <org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int PARAMETER> = 5;

        <org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int LOCAL_VARIABLE> = 4;

        <org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int ENUM_CONSTANT> = 3;

        <org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int INITIALIZER> = 2;

        <org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int FIELD> = 1;

        return;
    }
}
