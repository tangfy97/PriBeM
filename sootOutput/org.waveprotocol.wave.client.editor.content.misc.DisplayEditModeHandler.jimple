public class org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler extends java.lang.Object
{
    public static final org.waveprotocol.wave.model.document.util.Property EDIT_MODE_LISTENER_PROP;

    private void <init>()
    {
        org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void onEditModeChange(org.waveprotocol.wave.client.editor.content.ContentNode, boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler$EditModeListener $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2, $r3;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler: org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler$EditModeListener getListener(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r2 == null goto label1;

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler$EditModeListener: void onEditModeChange(org.waveprotocol.wave.client.editor.content.ContentElement,boolean)>($r3, z0);

     label1:
        return;
    }

    public static boolean hasListener(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler$EditModeListener $r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler: org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler$EditModeListener getListener(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler$EditModeListener getListener(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.model.document.util.Property $r3;
        org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler$EditModeListener $r5;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1, $r2;
        java.lang.Object $r4;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r2 == null goto label1;

        $r3 = <org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler: org.waveprotocol.wave.model.document.util.Property EDIT_MODE_LISTENER_PROP>;

        $r4 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property)>($r3);

        $r5 = (org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler$EditModeListener) $r4;

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public static void setEditModeListener(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler$EditModeListener)
    {
        org.waveprotocol.wave.model.document.util.Property $r2;
        org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler$EditModeListener r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler$EditModeListener;

        $r2 = <org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler: org.waveprotocol.wave.model.document.util.Property EDIT_MODE_LISTENER_PROP>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r2, r1);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.util.Property$ImmutableProperty $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.util.Property: org.waveprotocol.wave.model.document.util.Property$ImmutableProperty immutable(java.lang.String)>("display_edit_mode");

        <org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler: org.waveprotocol.wave.model.document.util.Property EDIT_MODE_LISTENER_PROP> = $r0;

        return;
    }
}
