public class org.waveprotocol.box.server.frontend.testing.FakeClientFrontend extends java.lang.Object implements org.waveprotocol.box.server.frontend.ClientFrontend, org.waveprotocol.box.server.waveserver.WaveBus$Subscriber
{
    private final java.util.Map openListeners;
    private final java.util.Map submitRecords;

    public void <init>()
    {
        org.waveprotocol.box.server.frontend.testing.FakeClientFrontend r0;
        java.util.HashMap $r1, $r2;

        r0 := @this: org.waveprotocol.box.server.frontend.testing.FakeClientFrontend;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend: java.util.Map openListeners> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend: java.util.Map submitRecords> = $r2;

        return;
    }

    public void doSubmitFailed(org.waveprotocol.wave.model.id.WaveletName, java.lang.String)
    {
        org.waveprotocol.box.server.frontend.testing.FakeClientFrontend r0;
        org.waveprotocol.wave.model.id.WaveletName r1;
        java.util.Map $r2;
        org.waveprotocol.box.server.frontend.testing.FakeClientFrontend$SubmitRecord r4;
        java.lang.Object $r3;
        java.lang.String r5;
        org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener $r6;

        r0 := @this: org.waveprotocol.box.server.frontend.testing.FakeClientFrontend;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r5 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend: java.util.Map submitRecords>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (org.waveprotocol.box.server.frontend.testing.FakeClientFrontend$SubmitRecord) $r3;

        if r4 == null goto label1;

        $r6 = r4.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend$SubmitRecord: org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener listener>;

        interfaceinvoke $r6.<org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener: void onFailure(java.lang.String)>(r5);

     label1:
        return;
    }

    public void doSubmitSuccess(org.waveprotocol.wave.model.id.WaveletName)
    {
        byte[] $r0;
        org.waveprotocol.box.server.frontend.testing.FakeClientFrontend r2;
        org.waveprotocol.wave.model.id.WaveletName r3;
        org.waveprotocol.wave.model.version.HashedVersion $r1;

        r2 := @this: org.waveprotocol.box.server.frontend.testing.FakeClientFrontend;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r0 = newarray (byte)[0];

        $r1 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion of(long,byte[])>(0L, $r0);

        virtualinvoke r2.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend: void doSubmitSuccess(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.version.HashedVersion,long)>(r3, $r1, 0L);

        return;
    }

    public void doSubmitSuccess(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.version.HashedVersion, long)
    {
        org.waveprotocol.box.server.frontend.testing.FakeClientFrontend r0;
        org.waveprotocol.wave.model.id.WaveletName r1;
        long l0;
        java.util.Map $r2;
        org.waveprotocol.box.server.frontend.testing.FakeClientFrontend$SubmitRecord r4;
        org.waveprotocol.wave.model.version.HashedVersion r5;
        int $i1;
        java.lang.Object $r3;
        org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener $r6;

        r0 := @this: org.waveprotocol.box.server.frontend.testing.FakeClientFrontend;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r5 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        l0 := @parameter2: long;

        $r2 = r0.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend: java.util.Map submitRecords>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (org.waveprotocol.box.server.frontend.testing.FakeClientFrontend$SubmitRecord) $r3;

        if r4 == null goto label1;

        $r6 = r4.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend$SubmitRecord: org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener listener>;

        $i1 = r4.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend$SubmitRecord: int operations>;

        interfaceinvoke $r6.<org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener: void onSuccess(int,org.waveprotocol.wave.model.version.HashedVersion,long)>($i1, r5, l0);

     label1:
        return;
    }

    public void doUpdateFailure(org.waveprotocol.wave.model.id.WaveId, java.lang.String)
    {
        org.waveprotocol.box.server.frontend.testing.FakeClientFrontend r0;
        org.waveprotocol.wave.model.id.WaveId r1;
        org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r5;

        r0 := @this: org.waveprotocol.box.server.frontend.testing.FakeClientFrontend;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r5 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend: java.util.Map openListeners>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener) $r3;

        if r4 == null goto label1;

        interfaceinvoke r4.<org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener: void onFailure(java.lang.String)>(r5);

     label1:
        return;
    }

    public void openRequest(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.IdFilter, java.util.Collection, org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener)
    {
        org.waveprotocol.box.server.frontend.testing.FakeClientFrontend r0;
        org.waveprotocol.wave.model.id.WaveId r1;
        org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener r2;
        java.util.Map $r3;
        java.util.Collection r6;
        org.waveprotocol.wave.model.id.IdFilter r5;
        org.waveprotocol.wave.model.wave.ParticipantId r4;

        r0 := @this: org.waveprotocol.box.server.frontend.testing.FakeClientFrontend;

        r4 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveId;

        r5 := @parameter2: org.waveprotocol.wave.model.id.IdFilter;

        r6 := @parameter3: java.util.Collection;

        r2 := @parameter4: org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener;

        $r3 = r0.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend: java.util.Map openListeners>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void submitRequest(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta, java.lang.String, org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener)
    {
        org.waveprotocol.box.server.frontend.testing.FakeClientFrontend r0;
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta r3;
        org.waveprotocol.wave.model.wave.ParticipantId r6;
        java.util.Map $r4;
        org.waveprotocol.box.server.frontend.testing.FakeClientFrontend$SubmitRecord $r2;
        int $i0;
        org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener r5;
        java.lang.String r7;

        r0 := @this: org.waveprotocol.box.server.frontend.testing.FakeClientFrontend;

        r6 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        r3 := @parameter2: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta;

        r7 := @parameter3: java.lang.String;

        r5 := @parameter4: org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener;

        $r4 = r0.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend: java.util.Map submitRecords>;

        $r2 = new org.waveprotocol.box.server.frontend.testing.FakeClientFrontend$SubmitRecord;

        $i0 = virtualinvoke r3.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: int getOperationCount()>();

        specialinvoke $r2.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend$SubmitRecord: void <init>(int,org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener)>($i0, r5);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public void waveletCommitted(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.box.server.frontend.testing.FakeClientFrontend r0;
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener r5;
        org.waveprotocol.box.common.DeltaSequence $r6;
        java.util.Map $r3;
        org.waveprotocol.wave.model.version.HashedVersion r7;
        java.lang.Object $r4;

        r0 := @this: org.waveprotocol.box.server.frontend.testing.FakeClientFrontend;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r7 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $r3 = r0.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend: java.util.Map openListeners>;

        $r2 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener) $r4;

        if r5 == null goto label1;

        $r6 = staticinvoke <org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.box.common.DeltaSequence empty()>();

        interfaceinvoke r5.<org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener: void onUpdate(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot,java.util.List,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Boolean,java.lang.String)>(r1, null, $r6, r7, null, null);

     label1:
        return;
    }

    public void waveletUpdate(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.box.common.DeltaSequence)
    {
        org.waveprotocol.box.server.frontend.testing.FakeClientFrontend r0;
        org.waveprotocol.wave.model.id.WaveletName $r8;
        org.waveprotocol.wave.model.id.WaveId $r3, $r6;
        org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener r5;
        org.waveprotocol.wave.model.id.WaveletId $r7;
        org.waveprotocol.box.common.DeltaSequence r9;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r1;
        java.util.Map $r2;
        java.lang.Object $r4;

        r0 := @this: org.waveprotocol.box.server.frontend.testing.FakeClientFrontend;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r9 := @parameter1: org.waveprotocol.box.common.DeltaSequence;

        $r2 = r0.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend: java.util.Map openListeners>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener) $r4;

        if r5 == null goto label1;

        $r6 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r7 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r8 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r6, $r7);

        interfaceinvoke r5.<org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener: void onUpdate(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot,java.util.List,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Boolean,java.lang.String)>($r8, null, r9, null, null, null);

     label1:
        return;
    }
}
