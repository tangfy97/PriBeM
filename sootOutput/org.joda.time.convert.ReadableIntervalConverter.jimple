class org.joda.time.convert.ReadableIntervalConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.IntervalConverter, org.joda.time.convert.DurationConverter, org.joda.time.convert.PeriodConverter
{
    static final org.joda.time.convert.ReadableIntervalConverter INSTANCE;
    static java.lang.Class class$org$joda$time$ReadableInterval;

    protected void <init>()
    {
        org.joda.time.convert.ReadableIntervalConverter r0;

        r0 := @this: org.joda.time.convert.ReadableIntervalConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }

    public long getDurationMillis(java.lang.Object)
    {
        org.joda.time.convert.ReadableIntervalConverter r2;
        org.joda.time.ReadableInterval $r1;
        java.lang.Object r0;
        long $l0;

        r2 := @this: org.joda.time.convert.ReadableIntervalConverter;

        r0 := @parameter0: java.lang.Object;

        $r1 = (org.joda.time.ReadableInterval) r0;

        $l0 = interfaceinvoke $r1.<org.joda.time.ReadableInterval: long toDurationMillis()>();

        return $l0;
    }

    public void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.ReadWritablePeriod r2;
        org.joda.time.Chronology r5, $r6;
        org.joda.time.ReadableInterval r1;
        long $l0, $l1;
        int[] $r3;
        org.joda.time.convert.ReadableIntervalConverter r4;
        int $i2, i3, $i4;
        java.lang.Object r0;

        r4 := @this: org.joda.time.convert.ReadableIntervalConverter;

        r2 := @parameter0: org.joda.time.ReadWritablePeriod;

        r0 := @parameter1: java.lang.Object;

        r5 := @parameter2: org.joda.time.Chronology;

        r1 = (org.joda.time.ReadableInterval) r0;

        if r5 == null goto label1;

        $r6 = r5;

        goto label2;

     label1:
        $r6 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval)>(r1);

     label2:
        $l0 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>();

        $l1 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getEndMillis()>();

        $r3 = virtualinvoke $r6.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r2, $l0, $l1);

        i3 = 0;

     label3:
        $i4 = lengthof $r3;

        if i3 >= $i4 goto label4;

        $i2 = $r3[i3];

        interfaceinvoke r2.<org.joda.time.ReadWritablePeriod: void setValue(int,int)>(i3, $i2);

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }

    public boolean isReadableInterval(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.Chronology r2;
        java.lang.Object r1;
        org.joda.time.convert.ReadableIntervalConverter r0;

        r0 := @this: org.joda.time.convert.ReadableIntervalConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        return 1;
    }

    public void setInto(org.joda.time.ReadWritableInterval, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.ReadWritableInterval r2;
        org.joda.time.convert.ReadableIntervalConverter r5;
        org.joda.time.Chronology r3, $r4;
        org.joda.time.ReadableInterval r1;
        java.lang.Object r0;

        r5 := @this: org.joda.time.convert.ReadableIntervalConverter;

        r2 := @parameter0: org.joda.time.ReadWritableInterval;

        r0 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.joda.time.Chronology;

        r1 = (org.joda.time.ReadableInterval) r0;

        interfaceinvoke r2.<org.joda.time.ReadWritableInterval: void setInterval(org.joda.time.ReadableInterval)>(r1);

        if r3 == null goto label1;

        interfaceinvoke r2.<org.joda.time.ReadWritableInterval: void setChronology(org.joda.time.Chronology)>(r3);

        goto label2;

     label1:
        $r4 = interfaceinvoke r1.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>();

        interfaceinvoke r2.<org.joda.time.ReadWritableInterval: void setChronology(org.joda.time.Chronology)>($r4);

     label2:
        return;
    }

    public java.lang.Class getSupportedType()
    {
        java.lang.Class $r0, $r2;
        org.joda.time.convert.ReadableIntervalConverter r1;

        r1 := @this: org.joda.time.convert.ReadableIntervalConverter;

        $r0 = <org.joda.time.convert.ReadableIntervalConverter: java.lang.Class class$org$joda$time$ReadableInterval>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.joda.time.convert.ReadableIntervalConverter: java.lang.Class class$(java.lang.String)>("org.joda.time.ReadableInterval");

        <org.joda.time.convert.ReadableIntervalConverter: java.lang.Class class$org$joda$time$ReadableInterval> = $r2;

        goto label2;

     label1:
        $r2 = <org.joda.time.convert.ReadableIntervalConverter: java.lang.Class class$org$joda$time$ReadableInterval>;

     label2:
        return $r2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.joda.time.convert.ReadableIntervalConverter $r0;

        $r0 = new org.joda.time.convert.ReadableIntervalConverter;

        specialinvoke $r0.<org.joda.time.convert.ReadableIntervalConverter: void <init>()>();

        <org.joda.time.convert.ReadableIntervalConverter: org.joda.time.convert.ReadableIntervalConverter INSTANCE> = $r0;

        return;
    }
}
