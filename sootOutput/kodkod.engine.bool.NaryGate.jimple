final class kodkod.engine.bool.NaryGate extends kodkod.engine.bool.MultiGate
{
    private final kodkod.engine.bool.BooleanFormula[] inputs;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/engine/bool/NaryGate;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.engine.bool.NaryGate: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(kodkod.engine.bool.BooleanAccumulator, int, int)
    {
        kodkod.engine.bool.Operator$Nary $r2;
        java.util.Iterator $r4;
        kodkod.engine.bool.NaryGate r0;
        kodkod.engine.bool.BooleanAccumulator r1;
        kodkod.engine.bool.BooleanFormula $r7;
        kodkod.engine.bool.BooleanFormula[] $r3, $r5;
        int i0, i1, $i2, i3;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: kodkod.engine.bool.NaryGate;

        r1 := @parameter0: kodkod.engine.bool.BooleanAccumulator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r1.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op>;

        specialinvoke r0.<kodkod.engine.bool.MultiGate: void <init>(kodkod.engine.bool.Operator$Nary,int,int)>($r2, i0, i1);

        $i2 = virtualinvoke r1.<kodkod.engine.bool.BooleanAccumulator: int size()>();

        $r3 = newarray (kodkod.engine.bool.BooleanFormula)[$i2];

        r0.<kodkod.engine.bool.NaryGate: kodkod.engine.bool.BooleanFormula[] inputs> = $r3;

        i3 = 0;

        $r4 = virtualinvoke r1.<kodkod.engine.bool.BooleanAccumulator: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = r0.<kodkod.engine.bool.NaryGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (kodkod.engine.bool.BooleanFormula) $r6;

        $r5[i3] = $r7;

        i3 = i3 + 1;

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public int size()
    {
        int $i0;
        kodkod.engine.bool.BooleanFormula[] $r1;
        kodkod.engine.bool.NaryGate r0;

        r0 := @this: kodkod.engine.bool.NaryGate;

        $r1 = r0.<kodkod.engine.bool.NaryGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public java.util.Iterator iterator()
    {
        kodkod.engine.bool.BooleanFormula[] $r1;
        java.util.Iterator $r2;
        kodkod.engine.bool.NaryGate r0;

        r0 := @this: kodkod.engine.bool.NaryGate;

        $r1 = r0.<kodkod.engine.bool.NaryGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r2 = staticinvoke <kodkod.util.collections.Containers: java.util.Iterator iterate(java.lang.Object[])>($r1);

        return $r2;
    }

    int contains(kodkod.engine.bool.Operator, int, int)
    {
        kodkod.engine.bool.Operator$Nary $r2;
        kodkod.engine.bool.BooleanFormula $r5;
        java.lang.AssertionError $r7;
        kodkod.engine.bool.Operator r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, i9, $i10, i11, i12, i13, $i15;
        boolean $z0;
        kodkod.engine.bool.NaryGate r0;
        kodkod.engine.bool.BooleanFormula[] $r3, $r4;

        r0 := @this: kodkod.engine.bool.NaryGate;

        r1 := @parameter0: kodkod.engine.bool.Operator;

        i0 := @parameter1: int;

        i7 := @parameter2: int;

        $z0 = <kodkod.engine.bool.NaryGate: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if i7 > 0 goto label01;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label01:
        $i1 = virtualinvoke r0.<kodkod.engine.bool.NaryGate: int label()>();

        if i0 != $i1 goto label02;

        return 1;

     label02:
        $r2 = r0.<kodkod.engine.bool.NaryGate: kodkod.engine.bool.Operator$Nary op>;

        if $r2 != r1 goto label03;

        $i2 = virtualinvoke r0.<kodkod.engine.bool.NaryGate: int label()>();

        if i0 > $i2 goto label03;

        $i3 = neg i0;

        $i4 = virtualinvoke r0.<kodkod.engine.bool.NaryGate: int label()>();

        if $i3 <= $i4 goto label04;

     label03:
        $i15 = (int) -1;

        return $i15;

     label04:
        i11 = 0;

        $r3 = r0.<kodkod.engine.bool.NaryGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $i5 = lengthof $r3;

        i12 = $i5 - 1;

        i13 = 1;

        goto label09;

     label05:
        $i8 = i11 + i12;

        i9 = $i8 >>> 1;

        $r4 = r0.<kodkod.engine.bool.NaryGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r5 = $r4[i9];

        $i10 = virtualinvoke $r5.<kodkod.engine.bool.BooleanFormula: int label()>();

        if $i10 >= i0 goto label06;

        i11 = i9 + 1;

        goto label08;

     label06:
        if $i10 <= i0 goto label07;

        i12 = i9 - 1;

        goto label08;

     label07:
        return i13;

     label08:
        i13 = i13 + 1;

     label09:
        if i11 > i12 goto label10;

        if i13 <= i7 goto label05;

     label10:
        $i6 = 1 - i13;

        return $i6;
    }

    void flatten(kodkod.engine.bool.Operator, java.util.Set, int)
    {
        kodkod.engine.bool.Operator$Nary $r2;
        kodkod.engine.bool.BooleanFormula r7;
        java.lang.AssertionError $r8;
        kodkod.engine.bool.Operator r1;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8, i9;
        boolean $z0;
        kodkod.engine.bool.NaryGate r0;
        java.util.Set r3;
        kodkod.engine.bool.BooleanFormula[] $r4, $r5, r6;

        r0 := @this: kodkod.engine.bool.NaryGate;

        r1 := @parameter0: kodkod.engine.bool.Operator;

        r3 := @parameter1: java.util.Set;

        i0 := @parameter2: int;

        $z0 = <kodkod.engine.bool.NaryGate: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 > 0 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $r2 = r0.<kodkod.engine.bool.NaryGate: kodkod.engine.bool.Operator$Nary op>;

        if $r2 != r1 goto label4;

        $r4 = r0.<kodkod.engine.bool.NaryGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $i1 = lengthof $r4;

        if i0 < $i1 goto label4;

        $r5 = r0.<kodkod.engine.bool.NaryGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $i2 = lengthof $r5;

        i8 = i0 - $i2;

        r6 = r0.<kodkod.engine.bool.NaryGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        i9 = 0;

        i3 = lengthof r6;

        goto label3;

     label2:
        r7 = r6[i9];

        $i4 = interfaceinvoke r3.<java.util.Set: int size()>();

        $i5 = staticinvoke <java.lang.StrictMath: int max(int,int)>(1, i8);

        virtualinvoke r7.<kodkod.engine.bool.BooleanFormula: void flatten(kodkod.engine.bool.Operator,java.util.Set,int)>(r1, r3, $i5);

        $i6 = interfaceinvoke r3.<java.util.Set: int size()>();

        $i7 = $i6 - $i4;

        i8 = i8 - $i7;

        i9 = i9 + 1;

     label3:
        if i9 < i3 goto label2;

        goto label5;

     label4:
        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r0);

     label5:
        return;
    }

    boolean sameInputs(java.util.Iterator)
    {
        java.util.Iterator r3;
        kodkod.engine.bool.NaryGate r0;
        kodkod.engine.bool.BooleanFormula r2;
        kodkod.engine.bool.BooleanFormula[] r1;
        int i0, i1;
        java.lang.Object $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: kodkod.engine.bool.NaryGate;

        r3 := @parameter0: java.util.Iterator;

        r1 = r0.<kodkod.engine.bool.NaryGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        i1 = 0;

        i0 = lengthof r1;

        goto label4;

     label1:
        r2 = r1[i1];

        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        if r2 == $r4 goto label3;

     label2:
        return 0;

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label1;

        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $z2 = 0;

        goto label6;

     label5:
        $z2 = 1;

     label6:
        return $z2;
    }

    public kodkod.engine.bool.BooleanFormula input(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        kodkod.engine.bool.NaryGate r1;
        kodkod.engine.bool.BooleanFormula $r4;
        int i0, $i1;
        kodkod.engine.bool.BooleanFormula[] $r2, $r3;

        r1 := @this: kodkod.engine.bool.NaryGate;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r2 = r1.<kodkod.engine.bool.NaryGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $i1 = lengthof $r2;

        if i0 <= $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        $r3 = r1.<kodkod.engine.bool.NaryGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r4 = $r3[i0];

        return $r4;
    }
}
