public class org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier extends java.lang.Object implements org.bouncycastle.crypto.modes.gcm.GCMMultiplier
{
    private final int[][][] M;

    public void <init>()
    {
        int[][][] $r1;
        org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier r0;

        r0 := @this: org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newmultiarray (int)[16][256][];

        r0.<org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier: int[][][] M> = $r1;

        return;
    }

    public void init(byte[])
    {
        byte[] r5;
        int[][] $r3, $r6, $r10, $r12, $r15, $r18, $r21, $r24, $r26, $r29;
        int[] $r2, $r7, $r9, $r13, r16, $r19, $r22, $r27, r30, r31;
        org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier r0;
        int[][][] $r1, $r4, $r8, $r11, $r14, $r17, $r20, $r23, $r25, $r28;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7;

        r0 := @this: org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier;

        r5 := @parameter0: byte[];

        $r1 = r0.<org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier: int[][][] M>;

        $r3 = $r1[0];

        $r2 = newarray (int)[4];

        $r3[0] = $r2;

        $r4 = r0.<org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier: int[][][] M>;

        $r6 = $r4[0];

        $r7 = staticinvoke <org.bouncycastle.crypto.modes.gcm.GCMUtil: int[] asInts(byte[])>(r5);

        $r6[128] = $r7;

        i3 = 64;

     label01:
        if i3 < 1 goto label02;

        r30 = newarray (int)[4];

        $r25 = r0.<org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier: int[][][] M>;

        $r26 = $r25[0];

        $i2 = i3 + i3;

        $r27 = $r26[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r27, 0, r30, 0, 4);

        staticinvoke <org.bouncycastle.crypto.modes.gcm.GCMUtil: void multiplyP(int[])>(r30);

        $r28 = r0.<org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier: int[][][] M>;

        $r29 = $r28[0];

        $r29[i3] = r30;

        i3 = i3 >> 1;

        goto label01;

     label02:
        i4 = 0;

     label03:
        i5 = 2;

     label04:
        if i5 >= 256 goto label07;

        i6 = 1;

     label05:
        if i6 >= i5 goto label06;

        r16 = newarray (int)[4];

        $r17 = r0.<org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier: int[][][] M>;

        $r18 = $r17[i4];

        $r19 = $r18[i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r19, 0, r16, 0, 4);

        $r20 = r0.<org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier: int[][][] M>;

        $r21 = $r20[i4];

        $r22 = $r21[i6];

        staticinvoke <org.bouncycastle.crypto.modes.gcm.GCMUtil: void xor(int[],int[])>(r16, $r22);

        $r23 = r0.<org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier: int[][][] M>;

        $r24 = $r23[i4];

        $i1 = i5 + i6;

        $r24[$i1] = r16;

        i6 = i6 + 1;

        goto label05;

     label06:
        i5 = i5 + i5;

        goto label04;

     label07:
        i4 = i4 + 1;

        if i4 != 16 goto label08;

        return;

     label08:
        $r8 = r0.<org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier: int[][][] M>;

        $r10 = $r8[i4];

        $r9 = newarray (int)[4];

        $r10[0] = $r9;

        i7 = 128;

     label09:
        if i7 <= 0 goto label10;

        r31 = newarray (int)[4];

        $r11 = r0.<org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier: int[][][] M>;

        $i0 = i4 - 1;

        $r12 = $r11[$i0];

        $r13 = $r12[i7];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, r31, 0, 4);

        staticinvoke <org.bouncycastle.crypto.modes.gcm.GCMUtil: void multiplyP8(int[])>(r31);

        $r14 = r0.<org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier: int[][][] M>;

        $r15 = $r14[i4];

        $r15[i7] = r31;

        i7 = i7 >> 1;

        goto label09;

     label10:
        goto label03;
    }

    public void multiplyH(byte[])
    {
        byte[] r1;
        int[][] $r4;
        short $s5, $s19;
        byte $b4;
        int[] r0, r5;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, $i20, $i22;
        org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier r2;
        int[][][] $r3;

        r2 := @this: org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier;

        r1 := @parameter0: byte[];

        r0 = newarray (int)[4];

        i18 = 15;

     label1:
        if i18 < 0 goto label2;

        $r3 = r2.<org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier: int[][][] M>;

        $r4 = $r3[i18];

        $b4 = r1[i18];

        $s19 = (short) $b4;

        $s5 = $s19 & 255;

        $i20 = (int) $s5;

        r5 = $r4[$i20];

        $i7 = r0[0];

        $i6 = r5[0];

        $i8 = $i7 ^ $i6;

        r0[0] = $i8;

        $i10 = r0[1];

        $i9 = r5[1];

        $i11 = $i10 ^ $i9;

        r0[1] = $i11;

        $i13 = r0[2];

        $i12 = r5[2];

        $i14 = $i13 ^ $i12;

        r0[2] = $i14;

        $i16 = r0[3];

        $i15 = r5[3];

        $i17 = $i16 ^ $i15;

        r0[3] = $i17;

        $i22 = (int) -1;

        i18 = i18 + $i22;

        goto label1;

     label2:
        $i0 = r0[0];

        staticinvoke <org.bouncycastle.crypto.util.Pack: void intToBigEndian(int,byte[],int)>($i0, r1, 0);

        $i1 = r0[1];

        staticinvoke <org.bouncycastle.crypto.util.Pack: void intToBigEndian(int,byte[],int)>($i1, r1, 4);

        $i2 = r0[2];

        staticinvoke <org.bouncycastle.crypto.util.Pack: void intToBigEndian(int,byte[],int)>($i2, r1, 8);

        $i3 = r0[3];

        staticinvoke <org.bouncycastle.crypto.util.Pack: void intToBigEndian(int,byte[],int)>($i3, r1, 12);

        return;
    }
}
