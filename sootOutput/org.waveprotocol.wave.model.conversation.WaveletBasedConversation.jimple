public final class org.waveprotocol.wave.model.conversation.WaveletBasedConversation extends java.lang.Object implements org.waveprotocol.wave.model.conversation.ObservableConversation
{
    private final org.waveprotocol.wave.model.wave.WaveletListener waveletListener;
    private final org.waveprotocol.wave.model.conversation.ObservableManifest$Listener manifestListener;
    private final org.waveprotocol.wave.model.conversation.WaveBasedConversationView wave;
    private final org.waveprotocol.wave.model.wave.ObservableWavelet wavelet;
    private final org.waveprotocol.wave.model.id.IdGenerator idGenerator;
    private final org.waveprotocol.wave.model.conversation.ObservableManifest manifest;
    private final org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread rootThread;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet anchorListeners;
    private final org.waveprotocol.wave.model.util.StringMap blips;
    private final org.waveprotocol.wave.model.util.StringMap threads;
    private boolean isUsable;

    public static boolean waveletHasConversation(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.wave.Wavelet r0;
        org.waveprotocol.wave.model.document.ObservableDocument $r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r1 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.document.ObservableDocument getManifestDocument(org.waveprotocol.wave.model.wave.Wavelet)>(r0);

        $z0 = staticinvoke <org.waveprotocol.wave.model.conversation.DocumentBasedManifest: boolean documentHasManifest(org.waveprotocol.wave.model.document.Document)>($r1);

        return $z0;
    }

    public static void makeWaveletConversational(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.wave.Wavelet r0;
        org.waveprotocol.wave.model.document.ObservableDocument $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r1 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.document.ObservableDocument getManifestDocument(org.waveprotocol.wave.model.wave.Wavelet)>(r0);

        staticinvoke <org.waveprotocol.wave.model.conversation.DocumentBasedManifest: void initialiseDocumentManifest(org.waveprotocol.wave.model.document.Document)>($r1);

        return;
    }

    public static java.lang.String idFor(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r0;
        java.lang.String $r2;
        org.waveprotocol.wave.model.util.Serializer $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r1 = <org.waveprotocol.wave.model.id.WaveletIdSerializer: org.waveprotocol.wave.model.util.Serializer INSTANCE>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.Serializer: java.lang.String toString(java.lang.Object)>(r0);

        return $r2;
    }

    public static org.waveprotocol.wave.model.id.WaveletId widFor(java.lang.String)
    {
        org.waveprotocol.wave.model.util.Serializer $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.model.id.WaveletIdSerializer: org.waveprotocol.wave.model.util.Serializer INSTANCE>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.Serializer: java.lang.Object fromString(java.lang.String)>(r0);

        $r3 = (org.waveprotocol.wave.model.id.WaveletId) $r2;

        return $r3;
    }

    static org.waveprotocol.wave.model.conversation.WaveletBasedConversation create(org.waveprotocol.wave.model.conversation.WaveBasedConversationView, org.waveprotocol.wave.model.wave.ObservableWavelet, org.waveprotocol.wave.model.conversation.ObservableManifest, org.waveprotocol.wave.model.id.IdGenerator)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r1;
        org.waveprotocol.wave.model.wave.WaveletListener $r5;
        org.waveprotocol.wave.model.conversation.ObservableManifest r3;
        org.waveprotocol.wave.model.id.IdGenerator r4;
        org.waveprotocol.wave.model.wave.ObservableWavelet r2;
        org.waveprotocol.wave.model.conversation.ObservableManifest$Listener $r6;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r7;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.ObservableWavelet;

        r3 := @parameter2: org.waveprotocol.wave.model.conversation.ObservableManifest;

        r4 := @parameter3: org.waveprotocol.wave.model.id.IdGenerator;

        $r0 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void <init>(org.waveprotocol.wave.model.conversation.WaveBasedConversationView,org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.conversation.ObservableManifest,org.waveprotocol.wave.model.id.IdGenerator)>(r1, r2, r3, r4);

        $r5 = $r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.WaveletListener waveletListener>;

        interfaceinvoke r2.<org.waveprotocol.wave.model.wave.ObservableWavelet: void addListener(java.lang.Object)>($r5);

        $r6 = $r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.ObservableManifest$Listener manifestListener>;

        interfaceinvoke r3.<org.waveprotocol.wave.model.conversation.ObservableManifest: void addListener(java.lang.Object)>($r6);

        $r7 = $r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread rootThread>;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void observe(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)>($r7);

        return $r0;
    }

    static org.waveprotocol.wave.model.document.ObservableDocument getManifestDocument(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.wave.Wavelet r0;
        org.waveprotocol.wave.model.document.ObservableDocument $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("conversation");

        return $r1;
    }

    void <init>(org.waveprotocol.wave.model.conversation.WaveBasedConversationView, org.waveprotocol.wave.model.wave.ObservableWavelet, org.waveprotocol.wave.model.conversation.ObservableManifest, org.waveprotocol.wave.model.id.IdGenerator)
    {
        org.waveprotocol.wave.model.id.WaveletId $r21;
        org.waveprotocol.wave.model.util.StringMap $r5, $r6;
        org.waveprotocol.wave.model.wave.ObservableWavelet r7;
        java.lang.String $r23;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r9;
        org.waveprotocol.wave.model.id.WaveId $r18;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r11;
        java.lang.RuntimeException $r14;
        org.waveprotocol.wave.model.conversation.ObservableManifest r8;
        java.lang.IllegalArgumentException $r15;
        org.waveprotocol.wave.model.id.IdGenerator r10;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$1 $r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r3, $r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$2 $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper $r12;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r13;
        java.lang.StringBuilder $r16, $r17, $r19, $r20, $r22;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r9 := @parameter0: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r7 := @parameter1: org.waveprotocol.wave.model.wave.ObservableWavelet;

        r8 := @parameter2: org.waveprotocol.wave.model.conversation.ObservableManifest;

        r10 := @parameter3: org.waveprotocol.wave.model.id.IdGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversation$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$1: void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversation)>(r0);

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.WaveletListener waveletListener> = $r1;

        $r2 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversation$2;

        specialinvoke $r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$2: void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversation)>(r0);

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.ObservableManifest$Listener manifestListener> = $r2;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r3;

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet anchorListeners> = $r4;

        $r5 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.StringMap blips> = $r5;

        $r6 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.StringMap threads> = $r6;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: boolean isUsable> = 1;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r7, "Null wavelet");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r8, "Null conversation manifest");

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveBasedConversationView wave> = r9;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.ObservableWavelet wavelet> = r7;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.ObservableManifest manifest> = r8;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.IdGenerator idGenerator> = r10;

     label1:
        $r11 = interfaceinvoke r8.<org.waveprotocol.wave.model.conversation.ObservableManifest: org.waveprotocol.wave.model.conversation.ObservableManifestThread getRootThread()>();

        $r12 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper;

        specialinvoke $r12.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper: void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversation)>(r0);

        $r13 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread create(org.waveprotocol.wave.model.conversation.ObservableManifestThread,org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip,org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper)>($r11, null, $r12);

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread rootThread> = $r13;

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create conversation on wavelet ");

        $r18 = interfaceinvoke r7.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r21 = interfaceinvoke r7.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r23, $r14);

        throw $r15;

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public boolean hasAnchor()
    {
        org.waveprotocol.wave.model.id.WaveletId $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.WaveletId getAnchorWaveletId()>();

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: java.lang.String getAnchorBlipId()>();

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: boolean isValidAnchor(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>($r1, $r2);

        return $z0;
    }

    public void delete()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.document.ObservableDocument $r3;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread getRootThread()>();

        virtualinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void deleteBlips()>();

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.ObservableWavelet wavelet>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.document.ObservableDocument getManifestDocument(org.waveprotocol.wave.model.wave.Wavelet)>($r2);

        staticinvoke <org.waveprotocol.wave.model.conversation.DocumentBasedManifest: void delete(org.waveprotocol.wave.model.document.Document)>($r3);

        $z0 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: boolean isUsable>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Conversation still usable after delete");

        return;
    }

    public org.waveprotocol.wave.model.conversation.Conversation$Anchor getAnchor()
    {
        org.waveprotocol.wave.model.id.WaveletId $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.Conversation$Anchor $r3;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.WaveletId getAnchorWaveletId()>();

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: java.lang.String getAnchorBlipId()>();

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.Conversation$Anchor maybeMakeAnchor(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>($r1, $r2);

        return $r3;
    }

    public void setAnchor(org.waveprotocol.wave.model.conversation.Conversation$Anchor)
    {
        org.waveprotocol.wave.model.id.WaveletId $r13;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r9;
        org.waveprotocol.wave.model.conversation.Conversation $r4, $r7, $r8;
        java.lang.String $r10, $r14;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0, $r15;
        org.waveprotocol.wave.model.conversation.AnchorData $r2, $r11;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.conversation.ObservableManifest $r3, $r12;
        org.waveprotocol.wave.model.conversation.Conversation$Anchor r1;
        java.lang.Class $r5, $r6;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.Conversation$Anchor;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void checkIsUsable()>();

        if r1 == null goto label5;

        $r4 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.Conversation$Anchor: org.waveprotocol.wave.model.conversation.Conversation getConversation()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r5 != $r6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Anchor must not refer to a different conversation class");

        $r7 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.Conversation$Anchor: org.waveprotocol.wave.model.conversation.Conversation getConversation()>();

        if $r7 == r0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Anchor must not refer to a different anchored conversation");

        $r8 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.Conversation$Anchor: org.waveprotocol.wave.model.conversation.Conversation getConversation()>();

        $r15 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversation) $r8;

        $r9 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.Conversation$Anchor: org.waveprotocol.wave.model.conversation.ConversationBlip getBlip()>();

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.lang.String getId()>();

        $r12 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.ObservableManifest manifest>;

        $r11 = new org.waveprotocol.wave.model.conversation.AnchorData;

        $r13 = specialinvoke $r15.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r14 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: java.lang.String idFor(org.waveprotocol.wave.model.id.WaveletId)>($r13);

        specialinvoke $r11.<org.waveprotocol.wave.model.conversation.AnchorData: void <init>(java.lang.String,java.lang.String)>($r14, $r10);

        interfaceinvoke $r12.<org.waveprotocol.wave.model.conversation.ObservableManifest: void setAnchor(org.waveprotocol.wave.model.conversation.AnchorData)>($r11);

        goto label6;

     label5:
        $r3 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.ObservableManifest manifest>;

        $r2 = new org.waveprotocol.wave.model.conversation.AnchorData;

        specialinvoke $r2.<org.waveprotocol.wave.model.conversation.AnchorData: void <init>(java.lang.String,java.lang.String)>(null, null);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.conversation.ObservableManifest: void setAnchor(org.waveprotocol.wave.model.conversation.AnchorData)>($r2);

     label6:
        return;
    }

    public org.waveprotocol.wave.model.conversation.Conversation$Anchor createAnchor(org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        org.waveprotocol.wave.model.conversation.ConversationBlip r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.Conversation$Anchor $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r2 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void checkIsUsable()>();

        $r1 = new org.waveprotocol.wave.model.conversation.Conversation$Anchor;

        specialinvoke $r1.<org.waveprotocol.wave.model.conversation.Conversation$Anchor: void <init>(org.waveprotocol.wave.model.conversation.Conversation,org.waveprotocol.wave.model.conversation.ConversationBlip)>(r0, r2);

        return $r1;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread getRootThread()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread rootThread>;

        return $r1;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip getBlip(java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r4;
        java.lang.Object $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.util.StringMap $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.StringMap blips>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $r4 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip) $r3;

        return $r4;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread getThread(java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r4;
        java.lang.Object $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.util.StringMap $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.StringMap threads>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $r4 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread) $r3;

        return $r4;
    }

    public org.waveprotocol.wave.model.document.ObservableDocument getDataDocument(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String r0, $r1, $r7;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r2;
        org.waveprotocol.wave.model.document.ObservableDocument $r9;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isBlipId(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot fetch blip document ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as a data document");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r7);

        goto label2;

     label1:
        $r1 = "conversation";

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>("Cannot fetch conversation manifest as a data document");

     label2:
        $r8 = r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.ObservableWavelet wavelet>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>(r0);

        return $r9;
    }

    public java.util.Set getParticipantIds()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r1;
        java.util.Set $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.ObservableWavelet wavelet>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.ObservableWavelet: java.util.Set getParticipantIds()>();

        return $r2;
    }

    public void addParticipant(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void checkIsUsable()>();

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.ObservableWavelet wavelet>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.ObservableWavelet: void addParticipant(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        return;
    }

    public void removeParticipant(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void checkIsUsable()>();

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.ObservableWavelet wavelet>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.ObservableWavelet: void removeParticipant(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        return;
    }

    public java.lang.String getId()
    {
        org.waveprotocol.wave.model.id.WaveletId $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: java.lang.String idFor(org.waveprotocol.wave.model.id.WaveletId)>($r1);

        return $r2;
    }

    public void addListener(org.waveprotocol.wave.model.conversation.ObservableConversation$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversation$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.conversation.ObservableConversation$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversation$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void addListener(org.waveprotocol.wave.model.conversation.ObservableConversation$AnchorListener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.ObservableConversation$AnchorListener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversation$AnchorListener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet anchorListeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.conversation.ObservableConversation$AnchorListener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.ObservableConversation$AnchorListener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversation$AnchorListener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet anchorListeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.id.WaveId $r4;
        org.waveprotocol.wave.model.id.WaveletId $r7;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r3, $r6;
        java.lang.StringBuilder $r0, $r1, $r5, $r8, $r9;
        java.lang.String $r10;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r2;

        r2 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WaveletBasedConversation(");

        $r3 = r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.ObservableWavelet wavelet>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.ObservableWavelet wavelet>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.ObservableWavelet wavelet>;

        return $r1;
    }

    void destroy()
    {
        org.waveprotocol.wave.model.wave.WaveletListener $r1;
        org.waveprotocol.wave.model.conversation.ObservableManifest $r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r5, $r6;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.conversation.ObservableManifest$Listener $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r7;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void checkIsUsable()>();

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.ObservableWavelet wavelet>;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.WaveletListener waveletListener>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.ObservableWavelet: void removeListener(java.lang.Object)>($r1);

        $r4 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.ObservableManifest manifest>;

        $r3 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.ObservableManifest$Listener manifestListener>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.conversation.ObservableManifest: void removeListener(java.lang.Object)>($r3);

        $r5 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r5.<org.waveprotocol.wave.model.util.CopyOnWriteSet: void clear()>();

        $r6 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet anchorListeners>;

        virtualinvoke $r6.<org.waveprotocol.wave.model.util.CopyOnWriteSet: void clear()>();

        $r7 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread rootThread>;

        virtualinvoke $r7.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void destroy()>();

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: boolean isUsable> = 0;

        return;
    }

    org.waveprotocol.wave.model.conversation.ObservableManifest getManifest()
    {
        org.waveprotocol.wave.model.conversation.ObservableManifest $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.ObservableManifest manifest>;

        return $r1;
    }

    private org.waveprotocol.wave.model.id.WaveletId getWaveletId()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r1;
        org.waveprotocol.wave.model.id.WaveletId $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.ObservableWavelet wavelet>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        return $r2;
    }

    private org.waveprotocol.wave.model.id.WaveletId getAnchorWaveletId()
    {
        org.waveprotocol.wave.model.id.WaveletId $r4;
        java.lang.String $r3;
        org.waveprotocol.wave.model.conversation.ObservableManifest $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.AnchorData $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.ObservableManifest manifest>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ObservableManifest: org.waveprotocol.wave.model.conversation.AnchorData getAnchor()>();

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.conversation.AnchorData: java.lang.String getConversationId()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.WaveletId widFor(java.lang.String)>($r3);

        return $r4;
    }

    private java.lang.String getAnchorBlipId()
    {
        java.lang.String $r3;
        org.waveprotocol.wave.model.conversation.ObservableManifest $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.AnchorData $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.ObservableManifest manifest>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ObservableManifest: org.waveprotocol.wave.model.conversation.AnchorData getAnchor()>();

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.conversation.AnchorData: java.lang.String getBlipId()>();

        return $r3;
    }

    private boolean isValidAnchor(org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView $r3;
        org.waveprotocol.wave.model.id.WaveletId r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r5;
        java.lang.String r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r2, $r4;
        boolean z0, $z1;

        r2 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r1 := @parameter1: java.lang.String;

        z0 = 0;

        if r0 == null goto label3;

        if r1 == null goto label3;

        $r3 = r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveBasedConversationView wave>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation(org.waveprotocol.wave.model.id.WaveletId)>(r0);

        if $r4 == null goto label3;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip getBlip(java.lang.String)>(r1);

        if $r5 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

     label3:
        return z0;
    }

    private org.waveprotocol.wave.model.id.WaveletId maybeMakeWaveletId(java.lang.String)
    {
        org.waveprotocol.wave.model.id.WaveletId $r1;
        java.lang.String r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r2;

        r2 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.WaveletId widFor(java.lang.String)>(r0);

        return $r1;
    }

    private org.waveprotocol.wave.model.conversation.Conversation$Anchor maybeMakeAnchor(org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView $r3;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.conversation.Conversation$Anchor $r6, r7;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r5;
        java.lang.String r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0, $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: java.lang.String;

        r7 = null;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: boolean isValidAnchor(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveBasedConversationView wave>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip getBlip(java.lang.String)>(r2);

        $r6 = new org.waveprotocol.wave.model.conversation.Conversation$Anchor;

        specialinvoke $r6.<org.waveprotocol.wave.model.conversation.Conversation$Anchor: void <init>(org.waveprotocol.wave.model.conversation.Conversation,org.waveprotocol.wave.model.conversation.ConversationBlip)>($r4, $r5);

        r7 = $r6;

     label1:
        return r7;
    }

    public void checkIsUsable()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $z0 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: boolean isUsable>;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot use destroyed conversation");

        return;
    }

    private void observe(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)
    {
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.util.StringMap $r2;
        java.lang.Iterable $r5;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$BlipListenerAggregator $r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r8;
        java.lang.Object $r7;
        java.lang.String $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.StringMap blips>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: java.lang.String getId()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r3, r1);

        $r4 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversation$BlipListenerAggregator;

        specialinvoke $r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$BlipListenerAggregator: void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversation,org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)>(r0, r1);

        virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void addListener(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener)>($r4);

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: java.lang.Iterable getReplyThreads()>();

        $r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread) $r7;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void observe(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)>(r8);

        goto label1;

     label2:
        return;
    }

    private void observe(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)
    {
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.util.StringMap $r2;
        java.lang.Iterable $r5;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r8;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ThreadListenerAggregator $r4;
        java.lang.Object $r7;
        java.lang.String $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.StringMap threads>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: java.lang.String getId()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r3, r1);

        $r4 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ThreadListenerAggregator;

        specialinvoke $r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ThreadListenerAggregator: void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversation,org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)>(r0, r1);

        virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void addListener(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener)>($r4);

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: java.lang.Iterable getBlips()>();

        $r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip) $r7;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void observe(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)>(r8);

        goto label1;

     label2:
        return;
    }

    private void triggerOnParticipantAdded(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r5;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableConversation$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableConversation$Listener: void onParticipantAdded(org.waveprotocol.wave.model.wave.ParticipantId)>(r5);

        goto label1;

     label2:
        return;
    }

    private void triggerOnParticipantRemoved(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r5;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableConversation$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableConversation$Listener: void onParticipantRemoved(org.waveprotocol.wave.model.wave.ParticipantId)>(r5);

        goto label1;

     label2:
        return;
    }

    private void triggerOnAnchorChanged(org.waveprotocol.wave.model.conversation.AnchorData, org.waveprotocol.wave.model.conversation.AnchorData)
    {
        org.waveprotocol.wave.model.id.WaveletId $r3, $r6;
        org.waveprotocol.wave.model.conversation.Conversation$Anchor $r8, $r10;
        java.lang.String $r2, $r5, $r7, $r9;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.AnchorData r1, r4;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.AnchorData;

        r4 := @parameter1: org.waveprotocol.wave.model.conversation.AnchorData;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.AnchorData: java.lang.String getConversationId()>();

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.WaveletId maybeMakeWaveletId(java.lang.String)>($r2);

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.model.conversation.AnchorData: java.lang.String getConversationId()>();

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.WaveletId maybeMakeWaveletId(java.lang.String)>($r5);

        $r7 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.AnchorData: java.lang.String getBlipId()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.Conversation$Anchor maybeMakeAnchor(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>($r3, $r7);

        $r9 = virtualinvoke r4.<org.waveprotocol.wave.model.conversation.AnchorData: java.lang.String getBlipId()>();

        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.Conversation$Anchor maybeMakeAnchor(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>($r6, $r9);

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void triggerOnAnchorChanged(org.waveprotocol.wave.model.conversation.Conversation$Anchor,org.waveprotocol.wave.model.conversation.Conversation$Anchor)>($r8, $r10);

        return;
    }

    private void triggerOnAnchorChanged(org.waveprotocol.wave.model.conversation.Conversation$Anchor, org.waveprotocol.wave.model.conversation.Conversation$Anchor)
    {
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.conversation.Conversation$Anchor r0, r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r3;
        java.lang.Object $r5;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r2;
        org.waveprotocol.wave.model.conversation.ObservableConversation$AnchorListener r6;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.Conversation$Anchor;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.Conversation$Anchor;

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean notEqual(java.lang.Object,java.lang.Object)>(r0, r1);

        if $z0 == 0 goto label2;

        $r3 = r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet anchorListeners>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.conversation.ObservableConversation$AnchorListener) $r5;

        interfaceinvoke r6.<org.waveprotocol.wave.model.conversation.ObservableConversation$AnchorListener: void onAnchorChanged(org.waveprotocol.wave.model.conversation.Conversation$Anchor,org.waveprotocol.wave.model.conversation.Conversation$Anchor)>(r0, r1);

        goto label1;

     label2:
        return;
    }

    private void triggerOnBlipAdded(org.waveprotocol.wave.model.conversation.ObservableConversationBlip)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip r5;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableConversation$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableConversation$Listener: void onBlipAdded(org.waveprotocol.wave.model.conversation.ObservableConversationBlip)>(r5);

        goto label1;

     label2:
        return;
    }

    private void triggerOnBlipDeleted(org.waveprotocol.wave.model.conversation.ObservableConversationBlip)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip r5;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableConversation$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableConversation$Listener: void onBlipDeleted(org.waveprotocol.wave.model.conversation.ObservableConversationBlip)>(r5);

        goto label1;

     label2:
        return;
    }

    private void triggerOnThreadAdded(org.waveprotocol.wave.model.conversation.ObservableConversationThread)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.ObservableConversationThread r5;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableConversation$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableConversation$Listener: void onThreadAdded(org.waveprotocol.wave.model.conversation.ObservableConversationThread)>(r5);

        goto label1;

     label2:
        return;
    }

    private void triggerOnInlineThreadAdded(org.waveprotocol.wave.model.conversation.ObservableConversationThread, int)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.ObservableConversationThread r5;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener r4;
        int i0;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationThread;

        i0 := @parameter1: int;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableConversation$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableConversation$Listener: void onInlineThreadAdded(org.waveprotocol.wave.model.conversation.ObservableConversationThread,int)>(r5, i0);

        goto label1;

     label2:
        return;
    }

    private void triggerOnThreadDeleted(org.waveprotocol.wave.model.conversation.ObservableConversationThread)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.ObservableConversationThread r5;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableConversation$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableConversation$Listener: void onThreadDeleted(org.waveprotocol.wave.model.conversation.ObservableConversationThread)>(r5);

        goto label1;

     label2:
        return;
    }

    private void triggerOnBlipContributorAdded(org.waveprotocol.wave.model.conversation.ObservableConversationBlip, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r6;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip r5;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationBlip;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableConversation$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableConversation$Listener: void onBlipContributorAdded(org.waveprotocol.wave.model.conversation.ObservableConversationBlip,org.waveprotocol.wave.model.wave.ParticipantId)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    private void triggerOnBlipContributorRemoved(org.waveprotocol.wave.model.conversation.ObservableConversationBlip, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r6;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip r5;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationBlip;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableConversation$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableConversation$Listener: void onBlipContributorRemoved(org.waveprotocol.wave.model.conversation.ObservableConversationBlip,org.waveprotocol.wave.model.wave.ParticipantId)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    private void triggerOnBlipSubmitted(org.waveprotocol.wave.model.conversation.ObservableConversationBlip)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip r5;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableConversation$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableConversation$Listener: void onBlipSumbitted(org.waveprotocol.wave.model.conversation.ObservableConversationBlip)>(r5);

        goto label1;

     label2:
        return;
    }

    private void triggerOnBlipTimestampChanged(org.waveprotocol.wave.model.conversation.ObservableConversationBlip, long, long)
    {
        java.util.Iterator $r2;
        long l0, l1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip r5;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationBlip;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableConversation$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableConversation$Listener: void onBlipTimestampChanged(org.waveprotocol.wave.model.conversation.ObservableConversationBlip,long,long)>(r5, l0, l1);

        goto label1;

     label2:
        return;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversationThread getRootThread()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread getRootThread()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversationThread getThread(java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread getThread(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversationBlip getBlip(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip getBlip(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.document.Document getDataDocument(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.document.ObservableDocument $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.document.ObservableDocument getDataDocument(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.conversation.ConversationThread getThread(java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread getThread(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.conversation.ConversationBlip getBlip(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip getBlip(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.conversation.ConversationThread getRootThread()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread getRootThread()>();

        return $r1;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableConversation$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void removeListener(org.waveprotocol.wave.model.conversation.ObservableConversation$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.ObservableConversation$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableConversation$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void addListener(org.waveprotocol.wave.model.conversation.ObservableConversation$Listener)>($r2);

        return;
    }

    static org.waveprotocol.wave.model.id.IdGenerator access$000(org.waveprotocol.wave.model.conversation.WaveletBasedConversation)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.id.IdGenerator $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.IdGenerator idGenerator>;

        return $r1;
    }

    static org.waveprotocol.wave.model.wave.ObservableWavelet access$100(org.waveprotocol.wave.model.conversation.WaveletBasedConversation)
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.ObservableWavelet wavelet>;

        return $r1;
    }

    static void access$200(org.waveprotocol.wave.model.conversation.WaveletBasedConversation, org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void observe(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)>(r1);

        return;
    }

    static void access$300(org.waveprotocol.wave.model.conversation.WaveletBasedConversation, org.waveprotocol.wave.model.conversation.ObservableConversationBlip)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.ObservableConversationBlip;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void triggerOnBlipAdded(org.waveprotocol.wave.model.conversation.ObservableConversationBlip)>(r1);

        return;
    }

    static void access$400(org.waveprotocol.wave.model.conversation.WaveletBasedConversation, org.waveprotocol.wave.model.conversation.ObservableConversationThread)
    {
        org.waveprotocol.wave.model.conversation.ObservableConversationThread r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.ObservableConversationThread;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void triggerOnThreadDeleted(org.waveprotocol.wave.model.conversation.ObservableConversationThread)>(r1);

        return;
    }

    static org.waveprotocol.wave.model.util.StringMap access$500(org.waveprotocol.wave.model.conversation.WaveletBasedConversation)
    {
        org.waveprotocol.wave.model.util.StringMap $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.StringMap threads>;

        return $r1;
    }

    static void access$600(org.waveprotocol.wave.model.conversation.WaveletBasedConversation, org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void observe(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)>(r1);

        return;
    }

    static void access$700(org.waveprotocol.wave.model.conversation.WaveletBasedConversation, org.waveprotocol.wave.model.conversation.ObservableConversationThread)
    {
        org.waveprotocol.wave.model.conversation.ObservableConversationThread r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.ObservableConversationThread;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void triggerOnThreadAdded(org.waveprotocol.wave.model.conversation.ObservableConversationThread)>(r1);

        return;
    }

    static void access$800(org.waveprotocol.wave.model.conversation.WaveletBasedConversation, org.waveprotocol.wave.model.conversation.ObservableConversationThread, int)
    {
        int i0;
        org.waveprotocol.wave.model.conversation.ObservableConversationThread r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.ObservableConversationThread;

        i0 := @parameter2: int;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void triggerOnInlineThreadAdded(org.waveprotocol.wave.model.conversation.ObservableConversationThread,int)>(r1, i0);

        return;
    }

    static void access$900(org.waveprotocol.wave.model.conversation.WaveletBasedConversation, org.waveprotocol.wave.model.conversation.ObservableConversationBlip)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.ObservableConversationBlip;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void triggerOnBlipDeleted(org.waveprotocol.wave.model.conversation.ObservableConversationBlip)>(r1);

        return;
    }

    static org.waveprotocol.wave.model.util.StringMap access$1000(org.waveprotocol.wave.model.conversation.WaveletBasedConversation)
    {
        org.waveprotocol.wave.model.util.StringMap $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.util.StringMap blips>;

        return $r1;
    }

    static void access$1100(org.waveprotocol.wave.model.conversation.WaveletBasedConversation, org.waveprotocol.wave.model.conversation.ObservableConversationBlip, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.ObservableConversationBlip;

        r2 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void triggerOnBlipContributorAdded(org.waveprotocol.wave.model.conversation.ObservableConversationBlip,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r2);

        return;
    }

    static void access$1200(org.waveprotocol.wave.model.conversation.WaveletBasedConversation, org.waveprotocol.wave.model.conversation.ObservableConversationBlip, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.ObservableConversationBlip;

        r2 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void triggerOnBlipContributorRemoved(org.waveprotocol.wave.model.conversation.ObservableConversationBlip,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r2);

        return;
    }

    static void access$1300(org.waveprotocol.wave.model.conversation.WaveletBasedConversation, org.waveprotocol.wave.model.conversation.ObservableConversationBlip)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.ObservableConversationBlip;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void triggerOnBlipSubmitted(org.waveprotocol.wave.model.conversation.ObservableConversationBlip)>(r1);

        return;
    }

    static void access$1400(org.waveprotocol.wave.model.conversation.WaveletBasedConversation, org.waveprotocol.wave.model.conversation.ObservableConversationBlip, long, long)
    {
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip r1;
        long l0, l1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.ObservableConversationBlip;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void triggerOnBlipTimestampChanged(org.waveprotocol.wave.model.conversation.ObservableConversationBlip,long,long)>(r1, l0, l1);

        return;
    }

    static void access$1500(org.waveprotocol.wave.model.conversation.WaveletBasedConversation, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void triggerOnParticipantAdded(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        return;
    }

    static void access$1600(org.waveprotocol.wave.model.conversation.WaveletBasedConversation, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void triggerOnParticipantRemoved(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        return;
    }

    static void access$1700(org.waveprotocol.wave.model.conversation.WaveletBasedConversation, org.waveprotocol.wave.model.conversation.AnchorData, org.waveprotocol.wave.model.conversation.AnchorData)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r0;
        org.waveprotocol.wave.model.conversation.AnchorData r1, r2;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.AnchorData;

        r2 := @parameter2: org.waveprotocol.wave.model.conversation.AnchorData;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void triggerOnAnchorChanged(org.waveprotocol.wave.model.conversation.AnchorData,org.waveprotocol.wave.model.conversation.AnchorData)>(r1, r2);

        return;
    }
}
