public class com.hp.hpl.jena.sparql.resultset.RDFInput extends com.hp.hpl.jena.sparql.resultset.ResultSetMem
{

    public void <init>(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.sparql.resultset.RDFInput r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.RDFInput;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.ResultSetMem: void <init>()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.RDFInput: void buildFromDumpFormat(com.hp.hpl.jena.rdf.model.Model)>(r1);

        return;
    }

    private void buildFromDumpFormat(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Statement $r6;
        com.hp.hpl.jena.rdf.model.Resource $r3, $r7;
        java.util.ArrayList $r1;
        com.hp.hpl.jena.sparql.resultset.RDFInput r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r5;
        com.hp.hpl.jena.rdf.model.Property $r4;
        com.hp.hpl.jena.rdf.model.Model r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.RDFInput;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.resultset.RDFInput: java.util.List varNames> = $r1;

        $r4 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r3 = <com.hp.hpl.jena.sparql.vocabulary.ResultSetGraphVocab: com.hp.hpl.jena.rdf.model.Resource ResultSet>;

        $r5 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r4, $r3);

     label1:
        $z0 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.RDFInput: void buildOneResource(com.hp.hpl.jena.rdf.model.Resource)>($r7);

        goto label1;

     label2:
        interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.RDFInput: void reset()>();

        return;
    }

    private void buildOneResource(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.sparql.resultset.RDFInput r0;
        com.hp.hpl.jena.rdf.model.Property $r3;
        int $i0;
        com.hp.hpl.jena.rdf.model.Model $r2;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.RDFInput;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.RDFInput: void buildVariables(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        $i0 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.RDFInput: int buildPreprocess(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r3 = <com.hp.hpl.jena.sparql.vocabulary.ResultSetGraphVocab: com.hp.hpl.jena.rdf.model.Property index>;

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Model: boolean contains(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r3, null);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.RDFInput: void buildRowsOrdered(com.hp.hpl.jena.rdf.model.Resource,int)>(r1, $i0);

        goto label2;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.RDFInput: void buildRows(com.hp.hpl.jena.rdf.model.Resource)>(r1);

     label2:
        return;
    }

    private void buildVariables(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.Statement $r3;
        com.hp.hpl.jena.rdf.model.Resource r0;
        java.util.List $r6;
        com.hp.hpl.jena.sparql.resultset.RDFInput r5;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.rdf.model.Property $r1;
        java.lang.String $r4;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.sparql.resultset.RDFInput;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = <com.hp.hpl.jena.sparql.vocabulary.ResultSetGraphVocab: com.hp.hpl.jena.rdf.model.Property resultVariable>;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r1);

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Statement: java.lang.String getString()>();

        $r6 = r5.<com.hp.hpl.jena.sparql.resultset.RDFInput: java.util.List varNames>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        return;
    }

    private int buildPreprocess(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.sparql.resultset.RDFInput r3;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.rdf.model.Property $r1, $r13;
        int i0, i1;
        java.lang.String $r10;
        boolean $z0, $z1;
        com.hp.hpl.jena.rdf.model.Statement $r11;
        com.hp.hpl.jena.rdf.model.Resource r0, $r12;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;

        r3 := @this: com.hp.hpl.jena.sparql.resultset.RDFInput;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = <com.hp.hpl.jena.sparql.vocabulary.ResultSetGraphVocab: com.hp.hpl.jena.rdf.model.Property solution>;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r1);

        i0 = 0;

        i1 = 0;

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        i0 = i0 + 1;

        $r13 = <com.hp.hpl.jena.sparql.vocabulary.ResultSetGraphVocab: com.hp.hpl.jena.rdf.model.Property index>;

        $z1 = interfaceinvoke $r12.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property)>($r13);

        if $z1 == 0 goto label2;

        i1 = i1 + 1;

     label2:
        goto label1;

     label3:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        if i1 <= 0 goto label4;

        if i0 == i1 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rows = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but only ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" indexes");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r3, $r10);

        return i0;

     label4:
        return i0;
    }

    private void buildRowsOrdered(com.hp.hpl.jena.rdf.model.Resource, int)
    {
        com.hp.hpl.jena.sparql.resultset.RDFInput r7;
        com.hp.hpl.jena.rdf.model.StmtIterator $r4;
        com.hp.hpl.jena.rdf.model.Property $r3;
        int $i0, i1, $i2, i3;
        java.lang.String $r13, $r21;
        boolean $z0, $z1;
        com.hp.hpl.jena.rdf.model.Statement $r5;
        com.hp.hpl.jena.rdf.model.Resource r0, $r6;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r8;
        java.util.List $r9, $r14, $r17;
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.StringBuilder $r10, $r11, $r12, $r15, $r16, $r18, $r19, $r20;
        com.hp.hpl.jena.rdf.model.Literal $r2;

        r7 := @this: com.hp.hpl.jena.sparql.resultset.RDFInput;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        i1 := @parameter1: int;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        i3 = 1;

     label1:
        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createTypedLiteral(int)>(i3);

        $r3 = <com.hp.hpl.jena.sparql.vocabulary.ResultSetGraphVocab: com.hp.hpl.jena.rdf.model.Property index>;

        $r4 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r3, $r2);

        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $z1 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("More than one solution: index = ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r7, $r13);

     label3:
        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $r8 = specialinvoke r7.<com.hp.hpl.jena.sparql.resultset.RDFInput: com.hp.hpl.jena.sparql.engine.binding.Binding buildBinding(com.hp.hpl.jena.rdf.model.Resource)>($r6);

        $r9 = r7.<com.hp.hpl.jena.sparql.resultset.RDFInput: java.util.List rows>;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r8);

        interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        i3 = i3 + 1;

        goto label1;

     label4:
        $r14 = r7.<com.hp.hpl.jena.sparql.resultset.RDFInput: java.util.List rows>;

        $i0 = interfaceinvoke $r14.<java.util.List: int size()>();

        if $i0 == i1 goto label5;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found ");

        $r17 = r7.<com.hp.hpl.jena.sparql.resultset.RDFInput: java.util.List rows>;

        $i2 = interfaceinvoke $r17.<java.util.List: int size()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": expected ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r7, $r21);

     label5:
        return;
    }

    private void buildRows(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.shared.JenaException $r17;
        com.hp.hpl.jena.sparql.resultset.RDFInput r6;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.rdf.model.Property $r1, $r3, $r4;
        int $i0, i1;
        java.lang.String $r12;
        boolean $z0, $z1;
        com.hp.hpl.jena.rdf.model.Statement $r5, $r13;
        com.hp.hpl.jena.rdf.model.Resource r0, $r14;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r15;
        java.util.List $r16;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r6 := @this: com.hp.hpl.jena.sparql.resultset.RDFInput;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        i1 = 0;

        $r1 = <com.hp.hpl.jena.sparql.vocabulary.ResultSetGraphVocab: com.hp.hpl.jena.rdf.model.Property solution>;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r1);

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r14 = interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        i1 = i1 + 1;

        $r15 = specialinvoke r6.<com.hp.hpl.jena.sparql.resultset.RDFInput: com.hp.hpl.jena.sparql.engine.binding.Binding buildBinding(com.hp.hpl.jena.rdf.model.Resource)>($r14);

        $r16 = r6.<com.hp.hpl.jena.sparql.resultset.RDFInput: java.util.List rows>;

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label1;

     label2:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        $r3 = <com.hp.hpl.jena.sparql.vocabulary.ResultSetGraphVocab: com.hp.hpl.jena.rdf.model.Property size>;

        $z1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property)>($r3);

        if $z1 == 0 goto label6;

     label3:
        $r4 = <com.hp.hpl.jena.sparql.vocabulary.ResultSetGraphVocab: com.hp.hpl.jena.rdf.model.Property size>;

        $r5 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r4);

        $i0 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: int getInt()>();

        if $i0 == i1 goto label4;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: Declared size = ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : Count = ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r6, $r12);

     label4:
        goto label6;

     label5:
        $r17 := @caughtexception;

     label6:
        return;

        catch com.hp.hpl.jena.shared.JenaException from label3 to label4 with label5;
    }

    private com.hp.hpl.jena.sparql.engine.binding.Binding buildBinding(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.graph.Node $r13;
        com.hp.hpl.jena.sparql.resultset.RDFInput r15;
        com.hp.hpl.jena.rdf.model.StmtIterator $r3;
        com.hp.hpl.jena.rdf.model.Property $r2, $r6, $r9;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r0;
        java.lang.String $r8, $r19;
        boolean $z0;
        com.hp.hpl.jena.rdf.model.RDFNode $r11;
        com.hp.hpl.jena.shared.PropertyNotFoundException $r14;
        com.hp.hpl.jena.sparql.core.Var $r12;
        com.hp.hpl.jena.rdf.model.Statement $r4, $r7, $r10;
        com.hp.hpl.jena.rdf.model.Resource r1, $r5;
        java.lang.StringBuilder $r16, $r17, $r18;

        r15 := @this: com.hp.hpl.jena.sparql.resultset.RDFInput;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create()>();

        $r2 = <com.hp.hpl.jena.sparql.vocabulary.ResultSetGraphVocab: com.hp.hpl.jena.rdf.model.Property binding>;

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r2);

     label1:
        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r6 = <com.hp.hpl.jena.sparql.vocabulary.ResultSetGraphVocab: com.hp.hpl.jena.rdf.model.Property variable>;

        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r6);

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Statement: java.lang.String getString()>();

     label2:
        $r9 = <com.hp.hpl.jena.sparql.vocabulary.ResultSetGraphVocab: com.hp.hpl.jena.rdf.model.Property value>;

        $r10 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r9);

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>($r8);

        $r13 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.graph.Node asNode()>();

        interfaceinvoke $r0.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r12, $r13);

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get value for ?");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r15, $r19);

     label5:
        goto label1;

     label6:
        interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        return $r0;

        catch com.hp.hpl.jena.shared.PropertyNotFoundException from label2 to label3 with label4;
    }
}
