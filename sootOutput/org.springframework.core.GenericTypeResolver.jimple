public abstract class org.springframework.core.GenericTypeResolver extends java.lang.Object
{
    private static final java.util.Map typeVariableCache;

    static void <clinit>()
    {
        java.util.WeakHashMap $r0;
        java.util.Map $r1;

        $r0 = new java.util.WeakHashMap;

        specialinvoke $r0.<java.util.WeakHashMap: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r0);

        <org.springframework.core.GenericTypeResolver: java.util.Map typeVariableCache> = $r1;

        return;
    }

    public void <init>()
    {
        org.springframework.core.GenericTypeResolver r0;

        r0 := @this: org.springframework.core.GenericTypeResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.reflect.Type getTargetType(org.springframework.core.MethodParameter)
    {
        java.lang.reflect.Constructor $r1, $r7;
        java.lang.reflect.Type $r3, $r6, $r9;
        org.springframework.core.MethodParameter r0;
        int $i0, $i1, $i2;
        java.lang.reflect.Type[] $r5, $r8;
        java.lang.reflect.Method $r2, $r4;

        r0 := @parameter0: org.springframework.core.MethodParameter;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "MethodParameter must not be null");

        $r1 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.reflect.Constructor getConstructor()>();

        if $r1 == null goto label1;

        $r7 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.reflect.Constructor getConstructor()>();

        $r8 = virtualinvoke $r7.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $i2 = virtualinvoke r0.<org.springframework.core.MethodParameter: int getParameterIndex()>();

        $r9 = $r8[$i2];

        return $r9;

     label1:
        $i0 = virtualinvoke r0.<org.springframework.core.MethodParameter: int getParameterIndex()>();

        if $i0 < 0 goto label2;

        $r4 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method getMethod()>();

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $i1 = virtualinvoke r0.<org.springframework.core.MethodParameter: int getParameterIndex()>();

        $r6 = $r5[$i1];

        return $r6;

     label2:
        $r2 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method getMethod()>();

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        return $r3;
    }

    public static java.lang.Class resolveParameterType(org.springframework.core.MethodParameter, java.lang.Class)
    {
        java.lang.reflect.Type $r1, $r4;
        org.springframework.core.MethodParameter r0;
        java.util.Map $r3;
        java.lang.Class r2, $r5;
        boolean $z0;

        r0 := @parameter0: org.springframework.core.MethodParameter;

        r2 := @parameter1: java.lang.Class;

        $r1 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.reflect.Type getTargetType(org.springframework.core.MethodParameter)>(r0);

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "Class must not be null");

        $r3 = staticinvoke <org.springframework.core.GenericTypeResolver: java.util.Map getTypeVariableMap(java.lang.Class)>(r2);

        $r4 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.reflect.Type getRawType(java.lang.reflect.Type,java.util.Map)>($r1, $r3);

        $z0 = $r4 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r5 = (java.lang.Class) $r4;

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

     label2:
        virtualinvoke r0.<org.springframework.core.MethodParameter: void setParameterType(java.lang.Class)>($r5);

        r0.<org.springframework.core.MethodParameter: java.util.Map typeVariableMap> = $r3;

        return $r5;
    }

    public static java.lang.Class resolveReturnType(java.lang.reflect.Method, java.lang.Class)
    {
        java.lang.reflect.Type $r1, $r4;
        java.util.Map $r3;
        java.lang.Class r2, $r5;
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Method must not be null");

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "Class must not be null");

        $r3 = staticinvoke <org.springframework.core.GenericTypeResolver: java.util.Map getTypeVariableMap(java.lang.Class)>(r2);

        $r4 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.reflect.Type getRawType(java.lang.reflect.Type,java.util.Map)>($r1, $r3);

        $z0 = $r4 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r5 = (java.lang.Class) $r4;

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

     label2:
        return $r5;
    }

    public static java.lang.Class resolveTypeArgument(java.lang.Class, java.lang.Class)
    {
        java.lang.Class[] $r2;
        java.lang.IllegalArgumentException $r4;
        int $i0, $i1;
        java.lang.Class r0, r1, $r3;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        java.lang.String $r6, $r10;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class[] resolveTypeArguments(java.lang.Class,java.lang.Class)>(r0, r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r2;

        if $i0 == 1 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected 1 type argument on generic interface [");

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] but found ");

        $i1 = lengthof $r2;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        $r3 = $r2[0];

        return $r3;
    }

    public static java.lang.Class[] resolveTypeArguments(java.lang.Class, java.lang.Class)
    {
        java.lang.Class[] $r2;
        java.lang.Class r0, r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class[] doResolveTypeArguments(java.lang.Class,java.lang.Class,java.lang.Class)>(r0, r0, r1);

        return $r2;
    }

    private static java.lang.Class[] doResolveTypeArguments(java.lang.Class, java.lang.Class, java.lang.Class)
    {
        java.lang.Class[] $r3, $r6;
        java.lang.reflect.Type $r2, r5;
        java.lang.reflect.Type[] $r4;
        int i0, i1;
        java.lang.Class r0, r1, r7;
        boolean $z0;

        r1 := @parameter0: java.lang.Class;

        r7 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.Class;

        goto label7;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label5;

        $r4 = virtualinvoke r7.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        i0 = lengthof $r4;

        i1 = 0;

        goto label4;

     label2:
        r5 = $r4[i1];

        $r6 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class[] doResolveTypeArguments(java.lang.Class,java.lang.reflect.Type,java.lang.Class)>(r1, r5, r0);

        if $r6 == null goto label3;

        return $r6;

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label2;

        goto label6;

     label5:
        $r2 = virtualinvoke r7.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        $r3 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class[] doResolveTypeArguments(java.lang.Class,java.lang.reflect.Type,java.lang.Class)>(r1, $r2, r0);

        if $r3 == null goto label6;

        return $r3;

     label6:
        r7 = virtualinvoke r7.<java.lang.Class: java.lang.Class getSuperclass()>();

     label7:
        if r7 != null goto label1;

        return null;
    }

    private static java.lang.Class[] doResolveTypeArguments(java.lang.Class, java.lang.reflect.Type, java.lang.Class)
    {
        int $i0, $i1, i2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class[] $r5, $r10, r12;
        java.lang.reflect.ParameterizedType r6;
        java.lang.reflect.Type r0, $r7, r13;
        java.lang.reflect.Type[] $r11;
        java.lang.Class r1, $r2, r3, $r4, $r8, $r9, $r14;

        r3 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.reflect.Type;

        r1 := @parameter2: java.lang.Class;

        $z0 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label4;

        r6 = (java.lang.reflect.ParameterizedType) r0;

        $r7 = interfaceinvoke r6.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label3;

        $r11 = interfaceinvoke r6.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = lengthof $r11;

        r12 = newarray (java.lang.Class)[$i0];

        i2 = 0;

        goto label2;

     label1:
        r13 = $r11[i2];

        $r14 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class extractClass(java.lang.Class,java.lang.reflect.Type)>(r3, r13);

        r12[i2] = $r14;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof $r11;

        if i2 < $i1 goto label1;

        return r12;

     label3:
        $r8 = (java.lang.Class) $r7;

        $z3 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z3 == 0 goto label5;

        $r9 = (java.lang.Class) $r7;

        $r10 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class[] doResolveTypeArguments(java.lang.Class,java.lang.Class,java.lang.Class)>(r3, $r9, r1);

        return $r10;

     label4:
        $r2 = (java.lang.Class) r0;

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z1 == 0 goto label5;

        $r4 = (java.lang.Class) r0;

        $r5 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class[] doResolveTypeArguments(java.lang.Class,java.lang.Class,java.lang.Class)>(r3, $r4, r1);

        return $r5;

     label5:
        return null;
    }

    private static java.lang.Class extractClass(java.lang.Class, java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType r11;
        java.util.Map $r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.reflect.TypeVariable r12;
        java.lang.reflect.ParameterizedType $r7;
        java.lang.reflect.Type $r3, $r8, r10, r13;
        java.lang.Class r0, $r4, $r6, $r9, $r14;
        java.lang.Object $r2, $r5;

        r0 := @parameter0: java.lang.Class;

        r10 := @parameter1: java.lang.reflect.Type;

        $z0 = r10 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label1;

        $r7 = (java.lang.reflect.ParameterizedType) r10;

        $r8 = interfaceinvoke $r7.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r9 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class extractClass(java.lang.Class,java.lang.reflect.Type)>(r0, $r8);

        return $r9;

     label1:
        $z1 = r10 instanceof java.lang.reflect.GenericArrayType;

        if $z1 == 0 goto label2;

        r11 = (java.lang.reflect.GenericArrayType) r10;

        $r3 = interfaceinvoke r11.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r4 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class extractClass(java.lang.Class,java.lang.reflect.Type)>(r0, $r3);

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r4, 0);

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        return $r6;

     label2:
        $z2 = r10 instanceof java.lang.reflect.TypeVariable;

        if $z2 == 0 goto label4;

        r12 = (java.lang.reflect.TypeVariable) r10;

        $r1 = staticinvoke <org.springframework.core.GenericTypeResolver: java.util.Map getTypeVariableMap(java.lang.Class)>(r0);

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r13 = (java.lang.reflect.Type) $r2;

        if r13 != null goto label3;

        r10 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.reflect.Type extractBoundForTypeVariable(java.lang.reflect.TypeVariable)>(r12);

        goto label4;

     label3:
        r10 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class extractClass(java.lang.Class,java.lang.reflect.Type)>(r0, r13);

     label4:
        $z3 = r10 instanceof java.lang.Class;

        if $z3 == 0 goto label5;

        $r14 = (java.lang.Class) r10;

        goto label6;

     label5:
        $r14 = class "Ljava/lang/Object;";

     label6:
        return $r14;
    }

    static java.lang.Class resolveType(java.lang.reflect.Type, java.util.Map)
    {
        java.lang.reflect.Type r0, $r2;
        java.util.Map r1;
        java.lang.Class $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.util.Map;

        $r2 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.reflect.Type getRawType(java.lang.reflect.Type,java.util.Map)>(r0, r1);

        $z0 = $r2 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Class) $r2;

        goto label2;

     label1:
        $r3 = class "Ljava/lang/Object;";

     label2:
        return $r3;
    }

    static java.lang.reflect.Type getRawType(java.lang.reflect.Type, java.util.Map)
    {
        java.lang.reflect.TypeVariable r3;
        java.lang.reflect.ParameterizedType $r1;
        java.lang.reflect.Type r0, $r2, r6;
        java.util.Map r4;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.reflect.Type;

        r4 := @parameter1: java.util.Map;

        r6 = r0;

        $z0 = r0 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        r3 = (java.lang.reflect.TypeVariable) r0;

        $r5 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r6 = (java.lang.reflect.Type) $r5;

        if r6 != null goto label1;

        r6 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.reflect.Type extractBoundForTypeVariable(java.lang.reflect.TypeVariable)>(r3);

     label1:
        $z1 = r6 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label2;

        $r1 = (java.lang.reflect.ParameterizedType) r6;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        return $r2;

     label2:
        return r6;
    }

    static java.util.Map getTypeVariableMap(java.lang.Class)
    {
        java.util.HashMap $r4;
        java.util.Map $r1, $r8, $r12, r13;
        java.lang.ref.WeakReference $r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.ref.Reference r3;
        java.lang.reflect.ParameterizedType r16, r18;
        java.lang.reflect.Type $r6, r14;
        java.lang.reflect.Type[] $r5, $r10;
        java.lang.Class r0, $r9, r15, r17;
        java.lang.Object $r2, $r11;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.springframework.core.GenericTypeResolver: java.util.Map typeVariableCache>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.ref.Reference) $r2;

        if r3 == null goto label01;

        $r11 = virtualinvoke r3.<java.lang.ref.Reference: java.lang.Object get()>();

        $r12 = (java.util.Map) $r11;

        goto label02;

     label01:
        $r12 = null;

     label02:
        r13 = $r12;

        if $r12 != null goto label10;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r13 = $r4;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        staticinvoke <org.springframework.core.GenericTypeResolver: void extractTypeVariablesFromGenericInterfaces(java.lang.reflect.Type[],java.util.Map)>($r5, $r4);

        r14 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        r15 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label05;

     label03:
        $z2 = r14 instanceof java.lang.reflect.ParameterizedType;

        if $z2 == 0 goto label04;

        r16 = (java.lang.reflect.ParameterizedType) r14;

        staticinvoke <org.springframework.core.GenericTypeResolver: void populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType,java.util.Map)>(r16, $r4);

     label04:
        $r10 = virtualinvoke r15.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        staticinvoke <org.springframework.core.GenericTypeResolver: void extractTypeVariablesFromGenericInterfaces(java.lang.reflect.Type[],java.util.Map)>($r10, $r4);

        r14 = virtualinvoke r15.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        r15 = virtualinvoke r15.<java.lang.Class: java.lang.Class getSuperclass()>();

     label05:
        if r15 == null goto label06;

        $r9 = class "Ljava/lang/Object;";

        $z1 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(r15);

        if $z1 == 0 goto label03;

     label06:
        r17 = r0;

        goto label09;

     label07:
        $r6 = virtualinvoke r17.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        $z0 = $r6 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label08;

        r18 = (java.lang.reflect.ParameterizedType) $r6;

        staticinvoke <org.springframework.core.GenericTypeResolver: void populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType,java.util.Map)>(r18, $r4);

     label08:
        r17 = virtualinvoke r17.<java.lang.Class: java.lang.Class getEnclosingClass()>();

     label09:
        $z3 = virtualinvoke r17.<java.lang.Class: boolean isMemberClass()>();

        if $z3 != 0 goto label07;

        $r8 = <org.springframework.core.GenericTypeResolver: java.util.Map typeVariableCache>;

        $r7 = new java.lang.ref.WeakReference;

        specialinvoke $r7.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r4);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r7);

     label10:
        return r13;
    }

    static java.lang.reflect.Type extractBoundForTypeVariable(java.lang.reflect.TypeVariable)
    {
        java.lang.reflect.Type r3;
        java.lang.reflect.TypeVariable r0, $r2;
        java.lang.reflect.Type[] $r1;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.TypeVariable;

        $r1 = interfaceinvoke r0.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return class "Ljava/lang/Object;";

     label1:
        r3 = $r1[0];

        $z0 = r3 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label2;

        $r2 = (java.lang.reflect.TypeVariable) r3;

        r3 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.reflect.Type extractBoundForTypeVariable(java.lang.reflect.TypeVariable)>($r2);

     label2:
        return r3;
    }

    private static void extractTypeVariablesFromGenericInterfaces(java.lang.reflect.Type[], java.util.Map)
    {
        java.lang.reflect.ParameterizedType r5;
        java.lang.reflect.Type r1, $r6, $r7;
        java.util.Map r4;
        java.lang.reflect.Type[] r0, $r3, $r9;
        int i0, i1;
        java.lang.Class $r2, $r8;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.Type[];

        r4 := @parameter1: java.util.Map;

        i0 = lengthof r0;

        i1 = 0;

        goto label4;

     label1:
        r1 = r0[i1];

        $z0 = r1 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label2;

        r5 = (java.lang.reflect.ParameterizedType) r1;

        staticinvoke <org.springframework.core.GenericTypeResolver: void populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType,java.util.Map)>(r5, r4);

        $r6 = interfaceinvoke r5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z2 = $r6 instanceof java.lang.Class;

        if $z2 == 0 goto label3;

        $r7 = interfaceinvoke r5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r8 = (java.lang.Class) $r7;

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        staticinvoke <org.springframework.core.GenericTypeResolver: void extractTypeVariablesFromGenericInterfaces(java.lang.reflect.Type[],java.util.Map)>($r9, r4);

        goto label3;

     label2:
        $z1 = r1 instanceof java.lang.Class;

        if $z1 == 0 goto label3;

        $r2 = (java.lang.Class) r1;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        staticinvoke <org.springframework.core.GenericTypeResolver: void extractTypeVariablesFromGenericInterfaces(java.lang.reflect.Type[],java.util.Map)>($r3, r4);

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label1;

        return;
    }

    private static void populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map)
    {
        java.util.Map r9;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.reflect.TypeVariable r7, r8;
        java.lang.reflect.ParameterizedType r0;
        java.lang.reflect.Type $r1, $r3, r6, r11;
        java.lang.reflect.TypeVariable[] $r5;
        java.lang.reflect.Type[] $r2;
        java.lang.Class $r4;
        java.lang.Object $r10;

        r0 := @parameter0: java.lang.reflect.ParameterizedType;

        r9 := @parameter1: java.util.Map;

        $r1 = interfaceinvoke r0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z0 = $r1 instanceof java.lang.Class;

        if $z0 == 0 goto label8;

        $r2 = interfaceinvoke r0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r3 = interfaceinvoke r0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r4 = (java.lang.Class) $r3;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        i0 = 0;

        goto label7;

     label1:
        r6 = $r2[i0];

        r7 = $r5[i0];

        $z1 = r6 instanceof java.lang.Class;

        if $z1 == 0 goto label2;

        interfaceinvoke r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r6);

        goto label6;

     label2:
        $z2 = r6 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label3;

        interfaceinvoke r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r6);

        goto label6;

     label3:
        $z3 = r6 instanceof java.lang.reflect.ParameterizedType;

        if $z3 == 0 goto label4;

        interfaceinvoke r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r6);

        goto label6;

     label4:
        $z4 = r6 instanceof java.lang.reflect.TypeVariable;

        if $z4 == 0 goto label6;

        r8 = (java.lang.reflect.TypeVariable) r6;

        $r10 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r11 = (java.lang.reflect.Type) $r10;

        if r11 != null goto label5;

        r11 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.reflect.Type extractBoundForTypeVariable(java.lang.reflect.TypeVariable)>(r8);

     label5:
        interfaceinvoke r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r11);

     label6:
        i0 = i0 + 1;

     label7:
        $i1 = lengthof $r2;

        if i0 < $i1 goto label1;

     label8:
        return;
    }
}
