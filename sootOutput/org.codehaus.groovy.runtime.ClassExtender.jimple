public class org.codehaus.groovy.runtime.ClassExtender extends java.lang.Object
{
    private java.util.Map variables;
    private java.util.Map methods;

    public void <init>()
    {
        org.codehaus.groovy.runtime.ClassExtender r0;

        r0 := @this: org.codehaus.groovy.runtime.ClassExtender;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public synchronized java.lang.Object get(java.lang.String)
    {
        org.codehaus.groovy.runtime.ClassExtender r0;
        java.util.Map $r1, $r3;
        java.lang.Object $r4;
        java.lang.String r2;

        r0 := @this: org.codehaus.groovy.runtime.ClassExtender;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map variables>;

        if $r1 == null goto label1;

        $r3 = r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map variables>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        return $r4;

     label1:
        return null;
    }

    public synchronized void set(java.lang.String, java.lang.Object)
    {
        org.codehaus.groovy.runtime.ClassExtender r0;
        java.util.Map $r1, $r4, $r5;
        java.lang.Object r3;
        java.lang.String r2;

        r0 := @this: org.codehaus.groovy.runtime.ClassExtender;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r1 = r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map variables>;

        if $r1 != null goto label1;

        $r5 = virtualinvoke r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map createMap()>();

        r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map variables> = $r5;

     label1:
        $r4 = r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map variables>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }

    public synchronized void remove(java.lang.String)
    {
        org.codehaus.groovy.runtime.ClassExtender r0;
        java.util.Map $r1, $r3;
        java.lang.String r2;

        r0 := @this: org.codehaus.groovy.runtime.ClassExtender;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map variables>;

        if $r1 == null goto label1;

        $r3 = r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map variables>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    public void call(java.lang.String, java.lang.Object)
    {
        java.lang.Throwable $r6;
        groovy.lang.Closure r7;
        org.codehaus.groovy.runtime.ClassExtender r0;
        java.util.Map $r1, $r4;
        java.lang.Object r2, $r5;
        java.lang.String r3;

        r0 := @this: org.codehaus.groovy.runtime.ClassExtender;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r7 = null;

        entermonitor r0;

     label1:
        $r1 = r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map methods>;

        if $r1 == null goto label2;

        $r4 = r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map methods>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r7 = (groovy.lang.Closure) $r5;

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r6;

     label6:
        if r7 == null goto label7;

        virtualinvoke r7.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r2);

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public synchronized void addMethod(java.lang.String, groovy.lang.Closure)
    {
        org.codehaus.groovy.runtime.ClassExtender r0;
        java.util.Map $r1, $r3, $r4, $r5;
        groovy.lang.Closure r6;
        java.lang.String r2;

        r0 := @this: org.codehaus.groovy.runtime.ClassExtender;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: groovy.lang.Closure;

        $r1 = r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map methods>;

        if $r1 != null goto label1;

        $r5 = virtualinvoke r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map createMap()>();

        r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map methods> = $r5;

     label1:
        $r4 = r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map methods>;

        $r3 = r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map methods>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r3);

        return;
    }

    public synchronized void removeMethod(java.lang.String)
    {
        org.codehaus.groovy.runtime.ClassExtender r0;
        java.util.Map $r1, $r3;
        java.lang.String r2;

        r0 := @this: org.codehaus.groovy.runtime.ClassExtender;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map methods>;

        if $r1 == null goto label1;

        $r3 = r0.<org.codehaus.groovy.runtime.ClassExtender: java.util.Map methods>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    protected java.util.Map createMap()
    {
        java.util.HashMap $r0;
        org.codehaus.groovy.runtime.ClassExtender r1;

        r1 := @this: org.codehaus.groovy.runtime.ClassExtender;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        return $r0;
    }
}
