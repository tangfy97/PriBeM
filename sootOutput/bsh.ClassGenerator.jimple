public abstract class bsh.ClassGenerator extends java.lang.Object
{
    private static bsh.ClassGenerator cg;

    public void <init>()
    {
        bsh.ClassGenerator r0;

        r0 := @this: bsh.ClassGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static bsh.ClassGenerator getClassGenerator() throws bsh.UtilEvalError
    {
        bsh.ClassGenerator $r0, $r1, $r4;
        java.lang.Exception $r5;
        bsh.Capabilities$Unavailable $r6;
        java.lang.StringBuffer $r7, $r8, $r9;
        java.lang.Class $r2;
        java.lang.Object $r3;
        java.lang.String $r10;

        $r0 = <bsh.ClassGenerator: bsh.ClassGenerator cg>;

        if $r0 != null goto label4;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("bsh.ClassGeneratorImpl");

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r4 = (bsh.ClassGenerator) $r3;

        <bsh.ClassGenerator: bsh.ClassGenerator cg> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new bsh.Capabilities$Unavailable;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ClassGenerator unavailable: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<bsh.Capabilities$Unavailable: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        $r1 = <bsh.ClassGenerator: bsh.ClassGenerator cg>;

        return $r1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public abstract java.lang.Class generateClass(java.lang.String, bsh.Modifiers, java.lang.Class[], java.lang.Class, bsh.BSHBlock, boolean, bsh.CallStack, bsh.Interpreter) throws bsh.EvalError;

    public abstract java.lang.Object invokeSuperclassMethod(bsh.BshClassManager, java.lang.Object, java.lang.String, java.lang.Object[]) throws bsh.UtilEvalError, bsh.ReflectError, java.lang.reflect.InvocationTargetException;

    public abstract void setInstanceNameSpaceParent(java.lang.Object, java.lang.String, bsh.NameSpace);
}
