public abstract class kodkod.util.ints.AbstractIntCollection extends java.lang.Object implements kodkod.util.ints.IntCollection
{

    protected void <init>()
    {
        kodkod.util.ints.AbstractIntCollection r0;

        r0 := @this: kodkod.util.ints.AbstractIntCollection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isEmpty()
    {
        int $i0;
        kodkod.util.ints.AbstractIntCollection r0;

        r0 := @this: kodkod.util.ints.AbstractIntCollection;

        $i0 = virtualinvoke r0.<kodkod.util.ints.AbstractIntCollection: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean contains(int)
    {
        kodkod.util.ints.AbstractIntCollection r0;
        int i0, $i1;
        kodkod.util.ints.IntIterator $r1;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractIntCollection;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntCollection: kodkod.util.ints.IntIterator iterator()>();

        goto label2;

     label1:
        $i1 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: int next()>();

        if i0 != $i1 goto label2;

        return 1;

     label2:
        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return 0;
    }

    public boolean add(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        kodkod.util.ints.AbstractIntCollection r1;

        r1 := @this: kodkod.util.ints.AbstractIntCollection;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean remove(int)
    {
        kodkod.util.ints.AbstractIntCollection r0;
        int i0, $i1;
        kodkod.util.ints.IntIterator $r1;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractIntCollection;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntCollection: kodkod.util.ints.IntIterator iterator()>();

        goto label2;

     label1:
        $i1 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: int next()>();

        if i0 != $i1 goto label2;

        interfaceinvoke $r1.<kodkod.util.ints.IntIterator: void remove()>();

        return 1;

     label2:
        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return 0;
    }

    public boolean containsAll(kodkod.util.ints.IntCollection)
    {
        kodkod.util.ints.IntIterator $r2;
        kodkod.util.ints.IntCollection r1;
        kodkod.util.ints.AbstractIntCollection r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: kodkod.util.ints.AbstractIntCollection;

        r1 := @parameter0: kodkod.util.ints.IntCollection;

        $i0 = virtualinvoke r0.<kodkod.util.ints.AbstractIntCollection: int size()>();

        $i1 = interfaceinvoke r1.<kodkod.util.ints.IntCollection: int size()>();

        if $i0 < $i1 goto label3;

        $r2 = interfaceinvoke r1.<kodkod.util.ints.IntCollection: kodkod.util.ints.IntIterator iterator()>();

        goto label2;

     label1:
        $i2 = interfaceinvoke $r2.<kodkod.util.ints.IntIterator: int next()>();

        $z1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntCollection: boolean contains(int)>($i2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $z0 = interfaceinvoke $r2.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return 1;

     label3:
        return 0;
    }

    public boolean addAll(kodkod.util.ints.IntCollection)
    {
        kodkod.util.ints.AbstractIntCollection r2;
        int $i0;
        kodkod.util.ints.IntIterator $r1;
        kodkod.util.ints.IntCollection r0;
        boolean $z0, z1, $z2;

        r2 := @this: kodkod.util.ints.AbstractIntCollection;

        r0 := @parameter0: kodkod.util.ints.IntCollection;

        z1 = 0;

        $r1 = interfaceinvoke r0.<kodkod.util.ints.IntCollection: kodkod.util.ints.IntIterator iterator()>();

        goto label2;

     label1:
        $i0 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: int next()>();

        $z0 = virtualinvoke r2.<kodkod.util.ints.AbstractIntCollection: boolean add(int)>($i0);

        if $z0 == 0 goto label2;

        z1 = 1;

     label2:
        $z2 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        return z1;
    }

    public boolean retainAll(kodkod.util.ints.IntCollection)
    {
        kodkod.util.ints.AbstractIntCollection r0;
        int $i0;
        kodkod.util.ints.IntIterator $r1;
        kodkod.util.ints.IntCollection r2;
        boolean $z0, z1, $z2;

        r0 := @this: kodkod.util.ints.AbstractIntCollection;

        r2 := @parameter0: kodkod.util.ints.IntCollection;

        z1 = 0;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntCollection: kodkod.util.ints.IntIterator iterator()>();

        goto label2;

     label1:
        $i0 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: int next()>();

        $z0 = interfaceinvoke r2.<kodkod.util.ints.IntCollection: boolean contains(int)>($i0);

        if $z0 != 0 goto label2;

        z1 = 1;

        interfaceinvoke $r1.<kodkod.util.ints.IntIterator: void remove()>();

     label2:
        $z2 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        return z1;
    }

    public boolean removeAll(kodkod.util.ints.IntCollection)
    {
        kodkod.util.ints.AbstractIntCollection r0;
        int $i0;
        kodkod.util.ints.IntIterator $r1;
        kodkod.util.ints.IntCollection r2;
        boolean $z0, z1, $z2;

        r0 := @this: kodkod.util.ints.AbstractIntCollection;

        r2 := @parameter0: kodkod.util.ints.IntCollection;

        z1 = 0;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntCollection: kodkod.util.ints.IntIterator iterator()>();

        goto label2;

     label1:
        $i0 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: int next()>();

        $z0 = interfaceinvoke r2.<kodkod.util.ints.IntCollection: boolean contains(int)>($i0);

        if $z0 == 0 goto label2;

        z1 = 1;

        interfaceinvoke $r1.<kodkod.util.ints.IntIterator: void remove()>();

     label2:
        $z2 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        return z1;
    }

    public void clear()
    {
        kodkod.util.ints.IntIterator $r1;
        kodkod.util.ints.AbstractIntCollection r0;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractIntCollection;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntCollection: kodkod.util.ints.IntIterator iterator()>();

        goto label2;

     label1:
        interfaceinvoke $r1.<kodkod.util.ints.IntIterator: int next()>();

        interfaceinvoke $r1.<kodkod.util.ints.IntIterator: void remove()>();

     label2:
        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public int[] toArray()
    {
        int[] $r1, $r2;
        kodkod.util.ints.AbstractIntCollection r0;
        int $i0;

        r0 := @this: kodkod.util.ints.AbstractIntCollection;

        $i0 = virtualinvoke r0.<kodkod.util.ints.AbstractIntCollection: int size()>();

        $r1 = newarray (int)[$i0];

        $r2 = virtualinvoke r0.<kodkod.util.ints.AbstractIntCollection: int[] toArray(int[])>($r1);

        return $r2;
    }

    public int[] toArray(int[])
    {
        kodkod.util.ints.IntIterator $r1;
        int[] r2;
        kodkod.util.ints.AbstractIntCollection r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractIntCollection;

        r2 := @parameter0: int[];

        $i0 = lengthof r2;

        $i1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntCollection: int size()>();

        if $i0 >= $i1 goto label1;

        $i4 = virtualinvoke r0.<kodkod.util.ints.AbstractIntCollection: int size()>();

        r2 = newarray (int)[$i4];

     label1:
        i5 = 0;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntCollection: kodkod.util.ints.IntIterator iterator()>();

        goto label3;

     label2:
        $i2 = i5;

        i5 = i5 + 1;

        $i3 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: int next()>();

        r2[$i2] = $i3;

     label3:
        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return r2;
    }
}
