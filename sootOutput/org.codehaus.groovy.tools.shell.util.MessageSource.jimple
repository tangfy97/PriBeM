public class org.codehaus.groovy.tools.shell.util.MessageSource extends groovy.lang.GroovyObjectSupport
{
    private final java.lang.String[] bundleNames;
    private java.util.ResourceBundle[] cachedBundles;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$codehaus$groovy$tools$shell$util$MessageSource;

    public void <init>(java.lang.String[])
    {
        int $i0;
        java.lang.String[] r1;
        java.lang.AssertionError $r2, $r3;
        org.codehaus.groovy.tools.shell.util.MessageSource r0;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.tools.shell.util.MessageSource;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<groovy.lang.GroovyObjectSupport: void <init>()>();

        $z0 = <org.codehaus.groovy.tools.shell.util.MessageSource: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z1 = <org.codehaus.groovy.tools.shell.util.MessageSource: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        r0.<org.codehaus.groovy.tools.shell.util.MessageSource: java.lang.String[] bundleNames> = r1;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.codehaus.groovy.tools.shell.util.MessageSource r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.MessageSource;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.util.MessageSource: void <init>(java.lang.String[])>($r1);

        return;
    }

    private static java.lang.String[] classNames(java.lang.Class[])
    {
        java.lang.Class[] r0;
        java.lang.String[] $r5;
        java.lang.AssertionError $r4, $r6, $r7;
        int $i0, $i1, i2, $i3;
        java.lang.Class $r1, $r3;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class[];

        $z0 = <org.codehaus.groovy.tools.shell.util.MessageSource: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $z1 = <org.codehaus.groovy.tools.shell.util.MessageSource: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $i0 = lengthof r0;

        $r5 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label3:
        $i3 = lengthof r0;

        if i2 >= $i3 goto label5;

        $z2 = <org.codehaus.groovy.tools.shell.util.MessageSource: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $r3 = r0[i2];

        if $r3 != null goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        $r1 = r0[i2];

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r5[i2] = $r2;

        i2 = i2 + 1;

        goto label3;

     label5:
        return $r5;
    }

    public void <init>(java.lang.Class[])
    {
        java.lang.Class[] r1;
        java.lang.String[] $r2;
        org.codehaus.groovy.tools.shell.util.MessageSource r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.MessageSource;

        r1 := @parameter0: java.lang.Class[];

        $r2 = staticinvoke <org.codehaus.groovy.tools.shell.util.MessageSource: java.lang.String[] classNames(java.lang.Class[])>(r1);

        specialinvoke r0.<org.codehaus.groovy.tools.shell.util.MessageSource: void <init>(java.lang.String[])>($r2);

        return;
    }

    public void <init>(java.lang.Class)
    {
        java.lang.String[] $r1;
        java.lang.Class r2;
        java.lang.String $r3;
        org.codehaus.groovy.tools.shell.util.MessageSource r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.MessageSource;

        r2 := @parameter0: java.lang.Class;

        $r1 = newarray (java.lang.String)[1];

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r1[0] = $r3;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.util.MessageSource: void <init>(java.lang.String[])>($r1);

        return;
    }

    private java.util.ResourceBundle[] createBundles()
    {
        java.util.ResourceBundle[] r2;
        java.lang.String[] $r1, $r3, $r4, $r7;
        java.lang.AssertionError $r9;
        org.codehaus.groovy.tools.shell.util.MessageSource r0;
        java.util.ResourceBundle $r6;
        int $i0, $i1, i2;
        java.lang.String $r5, $r8;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.MessageSource;

        $r1 = r0.<org.codehaus.groovy.tools.shell.util.MessageSource: java.lang.String[] bundleNames>;

        $i0 = lengthof $r1;

        r2 = newarray (java.util.ResourceBundle)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<org.codehaus.groovy.tools.shell.util.MessageSource: java.lang.String[] bundleNames>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label3;

        $z0 = <org.codehaus.groovy.tools.shell.util.MessageSource: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r7 = r0.<org.codehaus.groovy.tools.shell.util.MessageSource: java.lang.String[] bundleNames>;

        $r8 = $r7[i2];

        if $r8 != null goto label2;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label2:
        $r4 = r0.<org.codehaus.groovy.tools.shell.util.MessageSource: java.lang.String[] bundleNames>;

        $r5 = $r4[i2];

        $r6 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>($r5);

        r2[i2] = $r6;

        i2 = i2 + 1;

        goto label1;

     label3:
        return r2;
    }

    private java.util.ResourceBundle[] getBundles()
    {
        java.util.ResourceBundle[] $r1, $r2, $r3;
        org.codehaus.groovy.tools.shell.util.MessageSource r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.MessageSource;

        $r1 = r0.<org.codehaus.groovy.tools.shell.util.MessageSource: java.util.ResourceBundle[] cachedBundles>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<org.codehaus.groovy.tools.shell.util.MessageSource: java.util.ResourceBundle[] createBundles()>();

        r0.<org.codehaus.groovy.tools.shell.util.MessageSource: java.util.ResourceBundle[] cachedBundles> = $r3;

     label1:
        $r2 = r0.<org.codehaus.groovy.tools.shell.util.MessageSource: java.util.ResourceBundle[] cachedBundles>;

        return $r2;
    }

    public java.lang.String getMessage(java.lang.String)
    {
        java.util.ResourceBundle[] $r1;
        java.util.MissingResourceException $r7, r8;
        java.lang.AssertionError $r2, $r6;
        org.codehaus.groovy.tools.shell.util.MessageSource r0;
        java.util.ResourceBundle $r4;
        int i0, $i1;
        java.lang.String r3, $r5;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.tools.shell.util.MessageSource;

        r3 := @parameter0: java.lang.String;

        $z0 = <org.codehaus.groovy.tools.shell.util.MessageSource: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r3 != null goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        r8 = null;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.util.MessageSource: java.util.ResourceBundle[] getBundles()>();

        i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label7;

     label3:
        $r4 = $r1[i0];

        $r5 = virtualinvoke $r4.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r3);

     label4:
        return $r5;

     label5:
        $r7 := @caughtexception;

        if r8 == null goto label6;

        r8 = $r7;

     label6:
        i0 = i0 + 1;

        goto label2;

     label7:
        $z1 = <org.codehaus.groovy.tools.shell.util.MessageSource: boolean $assertionsDisabled>;

        if $z1 != 0 goto label8;

        if r8 != null goto label8;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label8:
        throw r8;

        catch java.util.MissingResourceException from label3 to label4 with label5;
    }

    public java.lang.String format(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r3;
        java.lang.String r1, $r2, $r4;
        java.lang.AssertionError $r5;
        org.codehaus.groovy.tools.shell.util.MessageSource r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.MessageSource;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object[];

        $z0 = <org.codehaus.groovy.tools.shell.util.MessageSource: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r3 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.tools.shell.util.MessageSource: java.lang.String getMessage(java.lang.String)>(r1);

        $r4 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r2, r3);

        return $r4;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        java.lang.String r1, $r2;
        org.codehaus.groovy.tools.shell.util.MessageSource r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.MessageSource;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.tools.shell.util.MessageSource: java.lang.String getMessage(java.lang.String)>(r1);

        return $r2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.codehaus.groovy.tools.shell.util.MessageSource: java.lang.Class class$org$codehaus$groovy$tools$shell$util$MessageSource>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.codehaus.groovy.tools.shell.util.MessageSource: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.MessageSource");

        <org.codehaus.groovy.tools.shell.util.MessageSource: java.lang.Class class$org$codehaus$groovy$tools$shell$util$MessageSource> = $r1;

        goto label2;

     label1:
        $r1 = <org.codehaus.groovy.tools.shell.util.MessageSource: java.lang.Class class$org$codehaus$groovy$tools$shell$util$MessageSource>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.codehaus.groovy.tools.shell.util.MessageSource: boolean $assertionsDisabled> = $z1;

        return;
    }
}
