final class com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1 extends java.lang.Object implements com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference
{

    void <init>()
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object get()
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1;

        return null;
    }

    public com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry getEntry()
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1;

        return null;
    }

    public com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference copyFor(java.lang.ref.ReferenceQueue, com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1 r0;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry r2;
        java.lang.ref.ReferenceQueue r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1;

        r1 := @parameter0: java.lang.ref.ReferenceQueue;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry;

        return r0;
    }

    public boolean isComputingReference()
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1;

        return 0;
    }

    public java.lang.Object waitForValue()
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1;

        return null;
    }

    public void clear(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference;

        return;
    }
}
