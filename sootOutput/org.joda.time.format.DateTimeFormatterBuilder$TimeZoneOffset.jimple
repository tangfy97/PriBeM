class org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset extends java.lang.Object implements org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser
{
    private final java.lang.String iZeroOffsetText;
    private final boolean iShowSeparators;
    private final int iMinFields;
    private final int iMaxFields;

    void <init>(java.lang.String, boolean, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        int i0, i1;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;
        boolean z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetText> = r1;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators> = z0;

        if i0 <= 0 goto label1;

        if i1 >= i0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        if i0 <= 4 goto label3;

        i0 = 4;

        i1 = 4;

     label3:
        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields> = i0;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields> = i1;

        return;
    }

    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        $i1 = 1 + $i0;

        i5 = $i1 << 1;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z0 == 0 goto label1;

        $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        $i4 = $i3 - 1;

        i5 = i5 + $i4;

     label1:
        $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetText>;

        if $r1 == null goto label2;

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetText>;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i2 <= i5 goto label2;

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetText>;

        i5 = virtualinvoke $r3.<java.lang.String: int length()>();

     label2:
        return i5;
    }

    public void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r2;
        long l12;
        java.lang.StringBuffer r1;
        java.util.Locale r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i13, i14, i15, i16, $i18, $i20;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2;
        org.joda.time.Chronology r5;

        r2 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        r1 := @parameter0: java.lang.StringBuffer;

        l12 := @parameter1: long;

        r5 := @parameter2: org.joda.time.Chronology;

        i13 := @parameter3: int;

        r0 := @parameter4: org.joda.time.DateTimeZone;

        r6 := @parameter5: java.util.Locale;

        if r0 != null goto label01;

        return;

     label01:
        if i13 != 0 goto label02;

        $r3 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetText>;

        if $r3 == null goto label02;

        $r4 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetText>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        return;

     label02:
        if i13 < 0 goto label03;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43);

        goto label04;

     label03:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        i13 = neg i13;

     label04:
        $i11 = i13 / 3600000;

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i11, 2);

        $i0 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>;

        if $i0 != 1 goto label05;

        return;

     label05:
        $i1 = $i11 * 3600000;

        i14 = i13 - $i1;

        if i14 != 0 goto label06;

        $i9 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        if $i9 > 1 goto label06;

        return;

     label06:
        $i18 = (int) 60000;

        $i10 = i14 / $i18;

        $z0 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z0 == 0 goto label07;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

     label07:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i10, 2);

        $i2 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>;

        if $i2 != 2 goto label08;

        return;

     label08:
        $i20 = (int) 60000;

        $i3 = $i10 * $i20;

        i15 = i14 - $i3;

        if i15 != 0 goto label09;

        $i7 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        if $i7 > 2 goto label09;

        return;

     label09:
        $i8 = i15 / 1000;

        $z1 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z1 == 0 goto label10;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

     label10:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i8, 2);

        $i4 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>;

        if $i4 != 3 goto label11;

        return;

     label11:
        $i5 = $i8 * 1000;

        i16 = i15 - $i5;

        if i16 != 0 goto label12;

        $i6 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        if $i6 > 3 goto label12;

        return;

     label12:
        $z2 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z2 == 0 goto label13;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

     label13:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i16, 3);

        return;
    }

    public void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r2;
        long l12;
        java.util.Locale r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i13, i14, i15, i16, $i18, $i20;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2;
        org.joda.time.Chronology r5;
        java.io.Writer r1;

        r2 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        r1 := @parameter0: java.io.Writer;

        l12 := @parameter1: long;

        r5 := @parameter2: org.joda.time.Chronology;

        i13 := @parameter3: int;

        r0 := @parameter4: org.joda.time.DateTimeZone;

        r6 := @parameter5: java.util.Locale;

        if r0 != null goto label01;

        return;

     label01:
        if i13 != 0 goto label02;

        $r3 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetText>;

        if $r3 == null goto label02;

        $r4 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetText>;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r4);

        return;

     label02:
        if i13 < 0 goto label03;

        virtualinvoke r1.<java.io.Writer: void write(int)>(43);

        goto label04;

     label03:
        virtualinvoke r1.<java.io.Writer: void write(int)>(45);

        i13 = neg i13;

     label04:
        $i11 = i13 / 3600000;

        staticinvoke <org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>(r1, $i11, 2);

        $i0 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>;

        if $i0 != 1 goto label05;

        return;

     label05:
        $i1 = $i11 * 3600000;

        i14 = i13 - $i1;

        if i14 != 0 goto label06;

        $i9 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        if $i9 != 1 goto label06;

        return;

     label06:
        $i18 = (int) 60000;

        $i10 = i14 / $i18;

        $z0 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z0 == 0 goto label07;

        virtualinvoke r1.<java.io.Writer: void write(int)>(58);

     label07:
        staticinvoke <org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>(r1, $i10, 2);

        $i2 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>;

        if $i2 != 2 goto label08;

        return;

     label08:
        $i20 = (int) 60000;

        $i3 = $i10 * $i20;

        i15 = i14 - $i3;

        if i15 != 0 goto label09;

        $i7 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        if $i7 != 2 goto label09;

        return;

     label09:
        $i8 = i15 / 1000;

        $z1 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z1 == 0 goto label10;

        virtualinvoke r1.<java.io.Writer: void write(int)>(58);

     label10:
        staticinvoke <org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>(r1, $i8, 2);

        $i4 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>;

        if $i4 != 3 goto label11;

        return;

     label11:
        $i5 = $i8 * 1000;

        i16 = i15 - $i5;

        if i16 != 0 goto label12;

        $i6 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        if $i6 != 3 goto label12;

        return;

     label12:
        $z2 = r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z2 == 0 goto label13;

        virtualinvoke r1.<java.io.Writer: void write(int)>(46);

     label13:
        staticinvoke <org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>(r1, i16, 3);

        return;
    }

    public void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        java.lang.StringBuffer r1;
        java.util.Locale r3;
        org.joda.time.ReadablePartial r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

        return;
    }

    public void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        java.util.Locale r3;
        java.io.Writer r1;
        org.joda.time.ReadablePartial r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

        return;
    }

    public int estimateParsedLength()
    {
        int $i0;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        $i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>();

        return $i0;
    }

    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r1;
        java.lang.String r0, $r2, $r4, $r5, $r6, $r7;
        org.joda.time.format.DateTimeParserBucket r3;
        boolean $z0, z1, z2, z3, z4, z5, z6, z7;
        int $i0, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i18, $i19, $i20, $i22, $i23, $i26, $i27, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, i39, i40, i41, i42, i43, i44, i45, i46, i47, $i48, $i49, $i50, $i51, $i53, $i54, $i55, $i57, $i59, $i61, $i63, $i65, $i66, $i68, $i69, $i70, $i72, $i74, $i76, $i78, $i79, $i81, $i83, $i85, $i87, $i88, $i89, $i91, $i92, $i93, $i94;
        char $c1, $c5, $c13, $c17, $c21, $c24, $c25, $c28, $c38;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        r3 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r0 := @parameter1: java.lang.String;

        i39 := @parameter2: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i40 = $i0 - i39;

        $r2 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetText>;

        if $r2 == null goto label03;

        $r4 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetText>;

        $i34 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i34 != 0 goto label02;

        if i40 <= 0 goto label01;

        $c38 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i39);

        $i50 = (int) $c38;

        if $i50 == 45 goto label03;

        $i51 = (int) $c38;

        if $i51 != 43 goto label01;

        goto label03;

     label01:
        virtualinvoke r3.<org.joda.time.format.DateTimeParserBucket: void setOffset(int)>(0);

        return i39;

     label02:
        $r6 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetText>;

        $r5 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetText>;

        $i35 = virtualinvoke $r5.<java.lang.String: int length()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i39, $r6, 0, $i35);

        if $z0 == 0 goto label03;

        virtualinvoke r3.<org.joda.time.format.DateTimeParserBucket: void setOffset(int)>(0);

        $r7 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetText>;

        $i36 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i37 = i39 + $i36;

        return $i37;

     label03:
        if i40 > 1 goto label04;

        $i53 = (int) -1;

        $i33 = i39 ^ $i53;

        return $i33;

     label04:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i39);

        $i54 = (int) $c1;

        if $i54 != 45 goto label05;

        z1 = 1;

        goto label07;

     label05:
        $i55 = (int) $c1;

        if $i55 != 43 goto label06;

        z1 = 0;

        goto label07;

     label06:
        $i57 = (int) -1;

        $i2 = i39 ^ $i57;

        return $i2;

     label07:
        $i59 = (int) -1;

        i41 = i40 + $i59;

        i42 = i39 + 1;

        $i3 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r0, i42, 2);

        if $i3 >= 2 goto label08;

        $i61 = (int) -1;

        $i32 = i42 ^ $i61;

        return $i32;

     label08:
        $i4 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r0, i42);

        if $i4 <= 23 goto label09;

        $i63 = (int) -1;

        $i31 = i42 ^ $i63;

        return $i31;

     label09:
        i43 = $i4 * 3600000;

        $i65 = (int) -2;

        i44 = i41 + $i65;

        i45 = i42 + 2;

        if i44 > 0 goto label10;

        goto label27;

     label10:
        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i45);

        $i66 = (int) $c5;

        if $i66 != 58 goto label11;

        z2 = 1;

        z7 = 1;

        z6 = 1;

        z5 = 1;

        z4 = 1;

        z3 = 1;

        $i68 = (int) -1;

        i44 = i44 + $i68;

        i45 = i45 + 1;

        goto label12;

     label11:
        $i69 = (int) $c5;

        if $i69 < 48 goto label27;

        $i70 = (int) $c5;

        if $i70 > 57 goto label27;

        z2 = 0;

        z7 = 0;

        z6 = 0;

        z5 = 0;

        z4 = 0;

        z3 = 0;

     label12:
        $i6 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r0, i45, 2);

        if $i6 != 0 goto label13;

        if z4 != 0 goto label13;

        goto label27;

     label13:
        if $i6 >= 2 goto label14;

        $i72 = (int) -1;

        $i30 = i45 ^ $i72;

        return $i30;

     label14:
        $i7 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r0, i45);

        if $i7 <= 59 goto label15;

        $i74 = (int) -1;

        $i29 = i45 ^ $i74;

        return $i29;

     label15:
        $i76 = (int) 60000;

        $i8 = $i7 * $i76;

        i43 = i43 + $i8;

        $i78 = (int) -2;

        i46 = i44 + $i78;

        i45 = i45 + 2;

        if i46 > 0 goto label16;

        goto label27;

     label16:
        if z7 == 0 goto label18;

        $c28 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i45);

        $i79 = (int) $c28;

        if $i79 == 58 goto label17;

        goto label27;

     label17:
        $i81 = (int) -1;

        i46 = i46 + $i81;

        i45 = i45 + 1;

     label18:
        $i9 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r0, i45, 2);

        if $i9 != 0 goto label19;

        if z5 != 0 goto label19;

        goto label27;

     label19:
        if $i9 >= 2 goto label20;

        $i83 = (int) -1;

        $i27 = i45 ^ $i83;

        return $i27;

     label20:
        $i10 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r0, i45);

        if $i10 <= 59 goto label21;

        $i85 = (int) -1;

        $i26 = i45 ^ $i85;

        return $i26;

     label21:
        $i11 = $i10 * 1000;

        i43 = i43 + $i11;

        $i87 = (int) -2;

        i47 = i46 + $i87;

        i45 = i45 + 2;

        if i47 > 0 goto label22;

        goto label27;

     label22:
        if z6 == 0 goto label24;

        $c24 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i45);

        $i88 = (int) $c24;

        if $i88 == 46 goto label23;

        $c25 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i45);

        $i89 = (int) $c25;

        if $i89 == 44 goto label23;

        goto label27;

     label23:
        i45 = i45 + 1;

     label24:
        $i48 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r0, i45, 3);

        if $i48 != 0 goto label25;

        if z3 != 0 goto label25;

        goto label27;

     label25:
        if $i48 >= 1 goto label26;

        $i91 = (int) -1;

        $i23 = i45 ^ $i91;

        return $i23;

     label26:
        $i12 = i45;

        i45 = i45 + 1;

        $c13 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i12);

        $i92 = (int) $c13;

        $i14 = $i92 - 48;

        $i15 = $i14 * 100;

        i43 = i43 + $i15;

        if $i48 <= 1 goto label27;

        $i16 = i45;

        i45 = i45 + 1;

        $c17 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i16);

        $i93 = (int) $c17;

        $i18 = $i93 - 48;

        $i19 = $i18 * 10;

        i43 = i43 + $i19;

        if $i48 <= 2 goto label27;

        $i20 = i45;

        i45 = i45 + 1;

        $c21 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i20);

        $i94 = (int) $c21;

        $i22 = $i94 - 48;

        i43 = i43 + $i22;

     label27:
        if z1 == 0 goto label28;

        $i49 = neg i43;

        goto label29;

     label28:
        $i49 = i43;

     label29:
        virtualinvoke r3.<org.joda.time.format.DateTimeParserBucket: void setOffset(int)>($i49);

        return i45;
    }

    private int digitCount(java.lang.String, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r1;
        char $c4;
        int $i0, i1, $i2, $i3, i5, i6, i7, $i8, $i9, $i11;
        java.lang.String r0;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i5 := @parameter2: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i0 - i1;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i5);

        i7 = 0;

     label1:
        if i6 <= 0 goto label3;

        $i3 = i1 + i7;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $i8 = (int) $c4;

        if $i8 < 48 goto label3;

        $i9 = (int) $c4;

        if $i9 <= 57 goto label2;

        goto label3;

     label2:
        i7 = i7 + 1;

        $i11 = (int) -1;

        i6 = i6 + $i11;

        goto label1;

     label3:
        return i7;
    }
}
