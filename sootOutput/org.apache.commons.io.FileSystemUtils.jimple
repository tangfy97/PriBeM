public class org.apache.commons.io.FileSystemUtils extends java.lang.Object
{
    private static final org.apache.commons.io.FileSystemUtils INSTANCE;
    private static final int INIT_PROBLEM;
    private static final int OTHER;
    private static final int WINDOWS;
    private static final int UNIX;
    private static final int POSIX_UNIX;
    private static final int OS;
    private static final java.lang.String DF;

    public void <init>()
    {
        org.apache.commons.io.FileSystemUtils r0;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long freeSpace(java.lang.String) throws java.io.IOException
    {
        int $i0;
        long $l1;
        java.lang.String r0;
        org.apache.commons.io.FileSystemUtils $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.io.FileSystemUtils: org.apache.commons.io.FileSystemUtils INSTANCE>;

        $i0 = <org.apache.commons.io.FileSystemUtils: int OS>;

        $l1 = virtualinvoke $r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>(r0, $i0, 0, -1L);

        return $l1;
    }

    public static long freeSpaceKb(java.lang.String) throws java.io.IOException
    {
        long $l0;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>(r0, -1L);

        return $l0;
    }

    public static long freeSpaceKb(java.lang.String, long) throws java.io.IOException
    {
        int $i1;
        long l0, $l2;
        java.lang.String r0;
        org.apache.commons.io.FileSystemUtils $r1;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r1 = <org.apache.commons.io.FileSystemUtils: org.apache.commons.io.FileSystemUtils INSTANCE>;

        $i1 = <org.apache.commons.io.FileSystemUtils: int OS>;

        $l2 = virtualinvoke $r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>(r0, $i1, 1, l0);

        return $l2;
    }

    public static long freeSpaceKb() throws java.io.IOException
    {
        long $l0;

        $l0 = staticinvoke <org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>(-1L);

        return $l0;
    }

    public static long freeSpaceKb(long) throws java.io.IOException
    {
        long l0, $l1;
        java.lang.String $r1;
        java.io.File $r0;

        l0 := @parameter0: long;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(".");

        $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $l1 = staticinvoke <org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>($r1, l0);

        return $l1;
    }

    long freeSpaceOS(java.lang.String, int, boolean, long) throws java.io.IOException
    {
        java.lang.IllegalStateException $r2, $r3;
        long l1, $l2, $l3, $l4, $l5;
        org.apache.commons.io.FileSystemUtils r1;
        java.lang.IllegalArgumentException $r4;
        int i0;
        java.lang.String r0;
        boolean z0;

        r1 := @this: org.apache.commons.io.FileSystemUtils;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        l1 := @parameter3: long;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Path must not be empty");

        throw $r4;

     label1:
        tableswitch(i0)
        {
            case 0: goto label7;
            case 1: goto label2;
            case 2: goto label5;
            case 3: goto label6;
            default: goto label8;
        };

     label2:
        if z0 == 0 goto label3;

        $l4 = virtualinvoke r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String,long)>(r0, l1);

        $l5 = $l4 / 1024L;

        goto label4;

     label3:
        $l5 = virtualinvoke r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String,long)>(r0, l1);

     label4:
        return $l5;

     label5:
        $l3 = virtualinvoke r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean,long)>(r0, z0, 0, l1);

        return $l3;

     label6:
        $l2 = virtualinvoke r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean,long)>(r0, z0, 1, l1);

        return $l2;

     label7:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unsupported operating system");

        throw $r2;

     label8:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Exception caught when determining operating system");

        throw $r3;
    }

    long freeSpaceWindows(java.lang.String, long) throws java.io.IOException
    {
        long l1, $l3;
        java.lang.String[] $r16;
        org.apache.commons.io.FileSystemUtils r1;
        int $i0, $i2, $i5, i6, $i7, $i9;
        java.lang.String $r0, $r7, r9, r14, r15, $r20;
        char $c4;
        java.io.IOException $r25;
        java.util.List $r21;
        java.lang.StringBuilder $r4, $r5, $r6, $r11, $r12, $r13, $r18, $r19, $r22, $r23, $r24;
        java.lang.Object $r8;

        r1 := @this: org.apache.commons.io.FileSystemUtils;

        r14 := @parameter0: java.lang.String;

        l1 := @parameter1: long;

        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r14, 0);

        r15 = $r0;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $i7 = (int) $c4;

        if $i7 == 34 goto label1;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r16 = newarray (java.lang.String)[3];

        $r16[0] = "cmd.exe";

        $r16[1] = "/C";

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dir /a /-c ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16[2] = $r20;

        $r21 = virtualinvoke r1.<org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int,long)>($r16, 2147483647, l1);

        $i5 = interfaceinvoke $r21.<java.util.List: int size()>();

        i6 = $i5 - 1;

     label2:
        if i6 < 0 goto label4;

        $r8 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(i6);

        r9 = (java.lang.String) $r8;

        $i2 = virtualinvoke r9.<java.lang.String: int length()>();

        if $i2 <= 0 goto label3;

        $l3 = virtualinvoke r1.<org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)>(r9, r15);

        return $l3;

     label3:
        $i9 = (int) -1;

        i6 = i6 + $i9;

        goto label2;

     label4:
        $r25 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'dir /-c\' did not return any info for path \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r25;
    }

    long parseDir(java.lang.String, java.lang.String) throws java.io.IOException
    {
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r14;
        long $l2;
        org.apache.commons.io.FileSystemUtils r3;
        int $i0, $i1, $i4, i8, i9, i10, i11, $i13, $i14, $i15, $i17, $i18, $i19, $i21;
        java.lang.String r0, $r2, $r4, r5, $r11;
        char $c3, $c5, $c6, $c7;
        java.io.IOException $r13;

        r3 := @this: org.apache.commons.io.FileSystemUtils;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        i8 = 0;

        i9 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i10 = $i0 - 1;

     label01:
        if i10 < 0 goto label03;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c7);

        if $z1 == 0 goto label02;

        i9 = i10 + 1;

        goto label03;

     label02:
        $i13 = (int) -1;

        i10 = i10 + $i13;

        goto label01;

     label03:
        if i10 < 0 goto label05;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c6);

        if $z0 != 0 goto label04;

        $i14 = (int) $c6;

        if $i14 == 44 goto label04;

        $i15 = (int) $c6;

        if $i15 == 46 goto label04;

        i8 = i10 + 1;

        goto label05;

     label04:
        $i17 = (int) -1;

        i10 = i10 + $i17;

        goto label03;

     label05:
        if i10 >= 0 goto label06;

        $r13 = new java.io.IOException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'dir /-c\' did not return valid info for path \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r13;

     label06:
        $r14 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i8, i9);

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        i11 = 0;

     label07:
        $i1 = virtualinvoke $r14.<java.lang.StringBuilder: int length()>();

        if i11 >= $i1 goto label10;

        $c3 = virtualinvoke $r14.<java.lang.StringBuilder: char charAt(int)>(i11);

        $i18 = (int) $c3;

        if $i18 == 44 goto label08;

        $c5 = virtualinvoke $r14.<java.lang.StringBuilder: char charAt(int)>(i11);

        $i19 = (int) $c5;

        if $i19 != 46 goto label09;

     label08:
        $i4 = i11;

        $i21 = (int) -1;

        i11 = i11 + $i21;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($i4);

     label09:
        i11 = i11 + 1;

        goto label07;

     label10:
        $r4 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $l2 = virtualinvoke r3.<org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)>($r4, r5);

        return $l2;
    }

    long freeSpaceUnix(java.lang.String, boolean, boolean, long) throws java.io.IOException
    {
        boolean z0, z1;
        java.util.List $r3;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r21, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r32, $r33, $r34, $r35, $r36, $r37;
        long l2, $l5;
        java.lang.String[] $r40;
        org.apache.commons.io.FileSystemUtils r2;
        java.util.StringTokenizer $r6, $r19, r41;
        int $i0, $i1, $i3, $i4, $i6, $i7;
        java.lang.String r0, $r1, r5, $r7, $r11, $r17, $r23, $r30, $r31, r39, r42;
        java.io.IOException $r8, $r20;
        java.lang.IllegalArgumentException $r38;
        java.lang.Object $r4, $r18;

        r2 := @this: org.apache.commons.io.FileSystemUtils;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        l2 := @parameter3: long;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r38 = new java.lang.IllegalArgumentException;

        specialinvoke $r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Path must not be empty");

        throw $r38;

     label1:
        r39 = "-";

        if z0 == 0 goto label2;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("k");

        r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        if z1 == 0 goto label3;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("P");

        r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $i1 = virtualinvoke r39.<java.lang.String: int length()>();

        if $i1 <= 1 goto label4;

        $r40 = newarray (java.lang.String)[3];

        $r31 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;

        $r40[0] = $r31;

        $r40[1] = r39;

        $r40[2] = r0;

        goto label5;

     label4:
        $r40 = newarray (java.lang.String)[2];

        $r1 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;

        $r40[0] = $r1;

        $r40[1] = r0;

     label5:
        $r3 = virtualinvoke r2.<org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int,long)>($r40, 3, l2);

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i3 >= 2 goto label6;

        $r20 = new java.io.IOException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'");

        $r23 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' did not return info as expected ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("for path \'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'- response was ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r30);

        throw $r20;

     label6:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(1);

        r5 = (java.lang.String) $r4;

        $r6 = new java.util.StringTokenizer;

        specialinvoke $r6.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r5, " ");

        r41 = $r6;

        $i4 = virtualinvoke $r6.<java.util.StringTokenizer: int countTokens()>();

        if $i4 >= 4 goto label8;

        $i6 = virtualinvoke $r6.<java.util.StringTokenizer: int countTokens()>();

        if $i6 != 1 goto label7;

        $i7 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i7 < 3 goto label7;

        $r18 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(2);

        r42 = (java.lang.String) $r18;

        $r19 = new java.util.StringTokenizer;

        specialinvoke $r19.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r42, " ");

        r41 = $r19;

        goto label9;

     label7:
        $r8 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'");

        $r11 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' did not return data as expected ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("for path \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'- check path is valid");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r17);

        throw $r8;

     label8:
        virtualinvoke $r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label9:
        virtualinvoke r41.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke r41.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r7 = virtualinvoke r41.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $l5 = virtualinvoke r2.<org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)>($r7, r0);

        return $l5;
    }

    long parseBytes(java.lang.String, java.lang.String) throws java.io.IOException
    {
        long $l0;
        org.apache.commons.io.FileSystemUtils r23;
        byte $b1;
        int $i2;
        java.lang.String r0, $r4, r8, $r11, $r16, $r22;
        org.apache.commons.io.IOExceptionWithCause $r27;
        java.lang.NumberFormatException $r12;
        java.io.IOException $r25;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r9, $r10, $r15, $r17, $r18, $r19, $r20, $r21, $r24, $r26;

        r23 := @this: org.apache.commons.io.FileSystemUtils;

        r0 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

     label1:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0);

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label2;

        $r25 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'");

        $r4 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' did not find free space in response ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("for path \'");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'- check path is valid");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r25;

     label2:
        return $l0;

     label3:
        $r12 := @caughtexception;

        $r27 = new org.apache.commons.io.IOExceptionWithCause;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'");

        $r16 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' did not return numeric data as expected ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("for path \'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'- check path is valid");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.apache.commons.io.IOExceptionWithCause: void <init>(java.lang.String,java.lang.Throwable)>($r22, $r12);

        throw $r27;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    java.util.List performCommand(java.lang.String[], int, long) throws java.io.IOException
    {
        java.util.Locale $r24;
        java.lang.Thread $r1;
        java.lang.Process $r4, r37;
        org.apache.commons.io.IOExceptionWithCause $r29;
        java.util.List $r13, $r21, $r32;
        java.lang.StringBuilder $r11, $r12, $r14, $r17, $r18, $r19, $r20, $r22, $r30, $r31, $r33, $r34, $r35;
        java.lang.Throwable $r27;
        long l0;
        java.lang.String[] r3;
        org.apache.commons.io.FileSystemUtils r2;
        java.util.ArrayList $r0;
        int $i1, $i2, $i3, $i4, i5;
        java.lang.String $r15, $r23, $r25, $r26, $r36, r42;
        java.io.OutputStream $r6, r39;
        java.io.IOException $r10, $r16;
        java.io.InputStreamReader $r9;
        java.lang.InterruptedException $r28;
        java.io.BufferedReader $r8, r41;
        java.io.InputStream $r5, $r7, r38, r40;

        r2 := @this: org.apache.commons.io.FileSystemUtils;

        r3 := @parameter0: java.lang.String[];

        i5 := @parameter1: int;

        l0 := @parameter2: long;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(20);

        r37 = null;

        r38 = null;

        r39 = null;

        r40 = null;

        r41 = null;

     label01:
        $r1 = staticinvoke <org.apache.commons.io.ThreadMonitor: java.lang.Thread start(long)>(l0);

        $r4 = virtualinvoke r2.<org.apache.commons.io.FileSystemUtils: java.lang.Process openProcess(java.lang.String[])>(r3);

        r37 = $r4;

        $r5 = virtualinvoke $r4.<java.lang.Process: java.io.InputStream getInputStream()>();

        r38 = $r5;

        $r6 = virtualinvoke $r4.<java.lang.Process: java.io.OutputStream getOutputStream()>();

        r39 = $r6;

        $r7 = virtualinvoke $r4.<java.lang.Process: java.io.InputStream getErrorStream()>();

        r40 = $r7;

        $r8 = new java.io.BufferedReader;

        $r9 = new java.io.InputStreamReader;

        specialinvoke $r9.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r5);

        specialinvoke $r8.<java.io.BufferedReader: void <init>(java.io.Reader)>($r9);

        r41 = $r8;

        r42 = virtualinvoke $r8.<java.io.BufferedReader: java.lang.String readLine()>();

     label02:
        if r42 == null goto label03;

        $i4 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i4 >= i5 goto label03;

        $r24 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r25 = virtualinvoke r42.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r26);

        r42 = virtualinvoke $r8.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label02;

     label03:
        virtualinvoke $r4.<java.lang.Process: int waitFor()>();

        staticinvoke <org.apache.commons.io.ThreadMonitor: void stop(java.lang.Thread)>($r1);

        $i1 = virtualinvoke $r4.<java.lang.Process: int exitValue()>();

        if $i1 == 0 goto label04;

        $r16 = new java.io.IOException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line returned OS error code \'");

        $i3 = virtualinvoke $r4.<java.lang.Process: int exitValue()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for command ");

        $r21 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r16;

     label04:
        $i2 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i2 != 0 goto label05;

        $r10 = new java.io.IOException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line did not return any info for command ");

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label05:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r5);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r6);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r7);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>($r8);

        if $r4 == null goto label06;

        virtualinvoke $r4.<java.lang.Process: void destroy()>();

     label06:
        return $r0;

     label07:
        $r28 := @caughtexception;

        $r29 = new org.apache.commons.io.IOExceptionWithCause;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line threw an InterruptedException for command ");

        $r32 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeout=");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<org.apache.commons.io.IOExceptionWithCause: void <init>(java.lang.String,java.lang.Throwable)>($r36, $r28);

        throw $r29;

     label08:
        $r27 := @caughtexception;

     label09:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r38);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r39);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r40);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r41);

        if r37 == null goto label10;

        virtualinvoke r37.<java.lang.Process: void destroy()>();

     label10:
        throw $r27;

        catch java.lang.InterruptedException from label01 to label05 with label07;
        catch java.lang.Throwable from label01 to label05 with label08;
        catch java.lang.Throwable from label07 to label09 with label08;
    }

    java.lang.Process openProcess(java.lang.String[]) throws java.io.IOException
    {
        java.lang.Process $r2;
        java.lang.Runtime $r0;
        java.lang.String[] r1;
        org.apache.commons.io.FileSystemUtils r3;

        r3 := @this: org.apache.commons.io.FileSystemUtils;

        r1 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r2 = virtualinvoke $r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        byte b13;
        java.util.Locale $r2;
        java.lang.Exception $r5;
        org.apache.commons.io.FileSystemUtils $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i15, $i17, $i19, $i21, $i23, $i25, $i27, $i29, $i31, $i33, $i35, $i37, $i39;
        java.lang.String $r1, $r3, r6;
        java.io.IOException $r8;

        <org.apache.commons.io.FileSystemUtils: int POSIX_UNIX> = 3;

        <org.apache.commons.io.FileSystemUtils: int UNIX> = 2;

        <org.apache.commons.io.FileSystemUtils: int WINDOWS> = 1;

        <org.apache.commons.io.FileSystemUtils: int OTHER> = 0;

        <org.apache.commons.io.FileSystemUtils: int INIT_PROBLEM> = -1;

        $r7 = new org.apache.commons.io.FileSystemUtils;

        specialinvoke $r7.<org.apache.commons.io.FileSystemUtils: void <init>()>();

        <org.apache.commons.io.FileSystemUtils: org.apache.commons.io.FileSystemUtils INSTANCE> = $r7;

        r6 = "df";

     label01:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        if $r1 != null goto label02;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("os.name not found");

        throw $r8;

     label02:
        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("windows");

        $i15 = (int) -1;

        if $i0 == $i15 goto label03;

        b13 = 1;

        goto label10;

     label03:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("linux");

        $i17 = (int) -1;

        if $i1 != $i17 goto label04;

        $i2 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("mpe/ix");

        $i19 = (int) -1;

        if $i2 != $i19 goto label04;

        $i3 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("freebsd");

        $i21 = (int) -1;

        if $i3 != $i21 goto label04;

        $i4 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("irix");

        $i23 = (int) -1;

        if $i4 != $i23 goto label04;

        $i5 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("digital unix");

        $i25 = (int) -1;

        if $i5 != $i25 goto label04;

        $i6 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("unix");

        $i27 = (int) -1;

        if $i6 != $i27 goto label04;

        $i7 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("mac os x");

        $i29 = (int) -1;

        if $i7 == $i29 goto label05;

     label04:
        b13 = 2;

        goto label10;

     label05:
        $i8 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("sun os");

        $i31 = (int) -1;

        if $i8 != $i31 goto label06;

        $i9 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("sunos");

        $i33 = (int) -1;

        if $i9 != $i33 goto label06;

        $i10 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("solaris");

        $i35 = (int) -1;

        if $i10 == $i35 goto label07;

     label06:
        b13 = 3;

        r6 = "/usr/xpg4/bin/df";

        goto label10;

     label07:
        $i11 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("hp-ux");

        $i37 = (int) -1;

        if $i11 != $i37 goto label08;

        $i12 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("aix");

        $i39 = (int) -1;

        if $i12 == $i39 goto label09;

     label08:
        b13 = 3;

        goto label10;

     label09:
        b13 = 0;

     label10:
        goto label12;

     label11:
        $r5 := @caughtexception;

        b13 = -1;

     label12:
        <org.apache.commons.io.FileSystemUtils: int OS> = b13;

        <org.apache.commons.io.FileSystemUtils: java.lang.String DF> = r6;

        return;

        catch java.lang.Exception from label01 to label10 with label11;
    }
}
