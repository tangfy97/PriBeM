public class org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest extends org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest
{
    private java.util.Map multipartParameters;

    public void <init>(javax.servlet.http.HttpServletRequest, org.springframework.util.MultiValueMap, java.util.Map)
    {
        javax.servlet.http.HttpServletRequest r1;
        java.util.Map r3;
        org.springframework.util.MultiValueMap r2;
        org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest r0;

        r0 := @this: org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: org.springframework.util.MultiValueMap;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: void <init>(javax.servlet.http.HttpServletRequest)>(r1);

        virtualinvoke r0.<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: void setMultipartFiles(org.springframework.util.MultiValueMap)>(r2);

        virtualinvoke r0.<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: void setMultipartParameters(java.util.Map)>(r3);

        return;
    }

    public void <init>(javax.servlet.http.HttpServletRequest)
    {
        org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest r0;
        javax.servlet.http.HttpServletRequest r1;

        r0 := @this: org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        specialinvoke r0.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: void <init>(javax.servlet.http.HttpServletRequest)>(r1);

        return;
    }

    public java.util.Enumeration getParameterNames()
    {
        java.util.Enumeration $r2, $r8;
        java.util.Collection $r7;
        java.util.Set $r6;
        org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest r1;
        java.util.HashSet $r0;
        java.util.Map $r5;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0;

        r1 := @this: org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = specialinvoke r1.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: java.util.Enumeration getParameterNames()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r4 = (java.lang.String) $r3;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r4);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r1.<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: java.util.Map getMultipartParameters()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $r7 = (java.util.Collection) $r6;

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r7);

        $r8 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r0);

        return $r8;
    }

    public java.lang.String getParameter(java.lang.String)
    {
        org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest r0;
        java.lang.String[] r4;
        java.util.Map $r1;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r2, $r5, $r6;

        r0 := @this: org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: java.util.Map getMultipartParameters()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r4 = (java.lang.String[]) $r3;

        if r4 == null goto label3;

        $i0 = lengthof r4;

        if $i0 <= 0 goto label1;

        $r6 = r4[0];

        goto label2;

     label1:
        $r6 = null;

     label2:
        return $r6;

     label3:
        $r5 = specialinvoke r0.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: java.lang.String getParameter(java.lang.String)>(r2);

        return $r5;
    }

    public java.lang.String[] getParameterValues(java.lang.String)
    {
        java.util.Map $r1;
        org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest r0;
        java.lang.Object $r3;
        java.lang.String[] r4, $r5;
        java.lang.String r2;

        r0 := @this: org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: java.util.Map getMultipartParameters()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r4 = (java.lang.String[]) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        $r5 = specialinvoke r0.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: java.lang.String[] getParameterValues(java.lang.String)>(r2);

        return $r5;
    }

    public java.util.Map getParameterMap()
    {
        java.util.Map $r2, $r3;
        java.util.HashMap $r0;
        org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest r1;

        r1 := @this: org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = specialinvoke r1.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: java.util.Map getParameterMap()>();

        interfaceinvoke $r0.<java.util.Map: void putAll(java.util.Map)>($r2);

        $r3 = virtualinvoke r1.<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: java.util.Map getMultipartParameters()>();

        interfaceinvoke $r0.<java.util.Map: void putAll(java.util.Map)>($r3);

        return $r0;
    }

    protected final void setMultipartParameters(java.util.Map)
    {
        org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest r0;
        java.util.Map r1;

        r0 := @this: org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;

        r1 := @parameter0: java.util.Map;

        r0.<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: java.util.Map multipartParameters> = r1;

        return;
    }

    protected java.util.Map getMultipartParameters()
    {
        org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;

        $r1 = r0.<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: java.util.Map multipartParameters>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: void initializeMultipart()>();

     label1:
        $r2 = r0.<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: java.util.Map multipartParameters>;

        return $r2;
    }
}
