class org.apache.commons.compress.archivers.zip.ExplodingInputStream extends java.io.InputStream
{
    private final java.io.InputStream in;
    private org.apache.commons.compress.archivers.zip.BitStream bits;
    private final int dictionarySize;
    private final int numberOfTrees;
    private final int minimumMatchLength;
    private org.apache.commons.compress.archivers.zip.BinaryTree literalTree;
    private org.apache.commons.compress.archivers.zip.BinaryTree lengthTree;
    private org.apache.commons.compress.archivers.zip.BinaryTree distanceTree;
    private final org.apache.commons.compress.archivers.zip.CircularBuffer buffer;

    public void <init>(int, int, java.io.InputStream)
    {
        org.apache.commons.compress.archivers.zip.ExplodingInputStream r0;
        org.apache.commons.compress.archivers.zip.CircularBuffer $r5;
        java.lang.IllegalArgumentException $r6, $r7;
        int i0, i1, $i3;
        java.io.InputStream r2;

        r0 := @this: org.apache.commons.compress.archivers.zip.ExplodingInputStream;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: java.io.InputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r5 = new org.apache.commons.compress.archivers.zip.CircularBuffer;

        $i3 = (int) 32768;

        specialinvoke $r5.<org.apache.commons.compress.archivers.zip.CircularBuffer: void <init>(int)>($i3);

        r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.CircularBuffer buffer> = $r5;

        if i0 == 4096 goto label1;

        if i0 == 8192 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The dictionary size must be 4096 or 8192");

        throw $r6;

     label1:
        if i1 == 2 goto label2;

        if i1 == 3 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number of trees must be 2 or 3");

        throw $r7;

     label2:
        r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: int dictionarySize> = i0;

        r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: int numberOfTrees> = i1;

        r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: int minimumMatchLength> = i1;

        r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: java.io.InputStream in> = r2;

        return;
    }

    private void init() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.zip.ExplodingInputStream r0;
        org.apache.commons.compress.archivers.zip.BitStream $r1, $r6;
        org.apache.commons.compress.archivers.zip.BinaryTree $r3, $r5, $r9;
        int $i0;
        java.io.InputStream $r2, $r4, $r7, $r8;

        r0 := @this: org.apache.commons.compress.archivers.zip.ExplodingInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BitStream bits>;

        if $r1 != null goto label2;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: int numberOfTrees>;

        if $i0 != 3 goto label1;

        $r8 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: java.io.InputStream in>;

        $r9 = staticinvoke <org.apache.commons.compress.archivers.zip.BinaryTree: org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)>($r8, 256);

        r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BinaryTree literalTree> = $r9;

     label1:
        $r2 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: java.io.InputStream in>;

        $r3 = staticinvoke <org.apache.commons.compress.archivers.zip.BinaryTree: org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)>($r2, 64);

        r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BinaryTree lengthTree> = $r3;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: java.io.InputStream in>;

        $r5 = staticinvoke <org.apache.commons.compress.archivers.zip.BinaryTree: org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)>($r4, 64);

        r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BinaryTree distanceTree> = $r5;

        $r6 = new org.apache.commons.compress.archivers.zip.BitStream;

        $r7 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: java.io.InputStream in>;

        specialinvoke $r6.<org.apache.commons.compress.archivers.zip.BitStream: void <init>(java.io.InputStream)>($r7);

        r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BitStream bits> = $r6;

     label2:
        return;
    }

    public int read() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.zip.ExplodingInputStream r0;
        int $i0;
        org.apache.commons.compress.archivers.zip.CircularBuffer $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ExplodingInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.CircularBuffer buffer>;

        $z0 = virtualinvoke $r1.<org.apache.commons.compress.archivers.zip.CircularBuffer: boolean available()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: void fillBuffer()>();

     label1:
        $r2 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.CircularBuffer buffer>;

        $i0 = virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.CircularBuffer: int get()>();

        return $i0;
    }

    private void fillBuffer() throws java.io.IOException
    {
        byte b13, $b15, $b16;
        org.apache.commons.compress.archivers.zip.CircularBuffer $r7, $r11;
        org.apache.commons.compress.archivers.zip.ExplodingInputStream r0;
        org.apache.commons.compress.archivers.zip.BitStream $r1, $r2, $r3, $r5, $r8, $r10, $r12;
        org.apache.commons.compress.archivers.zip.BinaryTree $r4, $r6, $r9, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i14, $i18, $i20;

        r0 := @this: org.apache.commons.compress.archivers.zip.ExplodingInputStream;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: void init()>();

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BitStream bits>;

        $i0 = virtualinvoke $r1.<org.apache.commons.compress.archivers.zip.BitStream: int nextBit()>();

        if $i0 != 1 goto label4;

        $r9 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BinaryTree literalTree>;

        if $r9 == null goto label1;

        $r13 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BinaryTree literalTree>;

        $r12 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BitStream bits>;

        i11 = virtualinvoke $r13.<org.apache.commons.compress.archivers.zip.BinaryTree: int read(org.apache.commons.compress.archivers.zip.BitStream)>($r12);

        goto label2;

     label1:
        $r10 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BitStream bits>;

        i11 = virtualinvoke $r10.<org.apache.commons.compress.archivers.zip.BitStream: int nextBits(int)>(8);

     label2:
        $i18 = (int) -1;

        if i11 != $i18 goto label3;

        return;

     label3:
        $r11 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.CircularBuffer buffer>;

        virtualinvoke $r11.<org.apache.commons.compress.archivers.zip.CircularBuffer: void put(int)>(i11);

        goto label9;

     label4:
        if $i0 != 0 goto label9;

        $i1 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: int dictionarySize>;

        if $i1 != 4096 goto label5;

        $b16 = 6;

        $b15 = 6;

        goto label6;

     label5:
        $b16 = 7;

        $b15 = 7;

     label6:
        b13 = $b15;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BitStream bits>;

        $i2 = virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.BitStream: int nextBits(int)>($b16);

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BinaryTree distanceTree>;

        $r3 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BitStream bits>;

        $i3 = virtualinvoke $r4.<org.apache.commons.compress.archivers.zip.BinaryTree: int read(org.apache.commons.compress.archivers.zip.BitStream)>($r3);

        $i20 = (int) -1;

        if $i3 != $i20 goto label7;

        if $i2 > 0 goto label7;

        return;

     label7:
        $i4 = $i3 << b13;

        $i10 = $i4 | $i2;

        $r6 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BinaryTree lengthTree>;

        $r5 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BitStream bits>;

        $i5 = virtualinvoke $r6.<org.apache.commons.compress.archivers.zip.BinaryTree: int read(org.apache.commons.compress.archivers.zip.BitStream)>($r5);

        i14 = $i5;

        if $i5 != 63 goto label8;

        $r8 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.BitStream bits>;

        $i8 = virtualinvoke $r8.<org.apache.commons.compress.archivers.zip.BitStream: int nextBits(int)>(8);

        i14 = $i5 + $i8;

     label8:
        $i6 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: int minimumMatchLength>;

        $i9 = i14 + $i6;

        $r7 = r0.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: org.apache.commons.compress.archivers.zip.CircularBuffer buffer>;

        $i7 = $i10 + 1;

        virtualinvoke $r7.<org.apache.commons.compress.archivers.zip.CircularBuffer: void copy(int,int)>($i7, $i9);

     label9:
        return;
    }
}
