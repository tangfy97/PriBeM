public class com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine extends java.lang.Object implements com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI
{
    protected com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph;
    protected java.util.List rules;
    protected com.hp.hpl.jena.util.OneToManyMap clauseIndex;
    protected java.util.List addsPending;
    protected java.util.HashSet addsHash;
    protected java.util.List deletesPending;
    protected com.hp.hpl.jena.reasoner.rulesys.impl.RETEConflictSet conflictSet;
    protected com.hp.hpl.jena.util.OneToManyMap predicatePatterns;
    protected boolean wildcardRule;
    protected boolean recordDerivations;
    long nRulesFired;
    boolean processedAxioms;
    boolean isMonotonic;
    protected static org.slf4j.Logger logger;

    public void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI, java.util.List)
    {
        java.util.Iterator $r6;
        java.util.ArrayList $r1, $r3;
        java.util.HashSet $r2;
        java.util.List r5;
        com.hp.hpl.jena.reasoner.rulesys.Rule r8;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        java.lang.Object $r7;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        r4 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI;

        r5 := @parameter1: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List addsPending> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.HashSet addsHash> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List deletesPending> = $r3;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: long nRulesFired> = 0L;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean processedAxioms> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean isMonotonic> = 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph> = r4;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List rules> = r5;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean isMonotonic> = 1;

        $r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.reasoner.rulesys.Rule) $r7;

        $z1 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isMonotonic()>();

        if $z1 != 0 goto label2;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean isMonotonic> = 0;

        goto label3;

     label2:
        goto label1;

     label3:
        return;
    }

    public void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI)
    {
        java.util.HashSet $r2;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        java.util.ArrayList $r1, $r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        r4 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List addsPending> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.HashSet addsHash> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List deletesPending> = $r3;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: long nRulesFired> = 0L;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean processedAxioms> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean isMonotonic> = 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph> = r4;

        return;
    }

    public void init(boolean, com.hp.hpl.jena.reasoner.Finder)
    {
        java.util.List $r1;
        com.hp.hpl.jena.reasoner.Finder r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        z0 := @parameter0: boolean;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.Finder;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List rules>;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void compile(java.util.List,boolean)>($r1, z0);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void findAndProcessAxioms()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void fastInit(com.hp.hpl.jena.reasoner.Finder)>(r2);

        return;
    }

    public void fastInit(com.hp.hpl.jena.reasoner.Finder)
    {
        com.hp.hpl.jena.graph.Node $r14, $r16;
        com.hp.hpl.jena.util.OneToManyMap $r6;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r3, $r4;
        com.hp.hpl.jena.graph.Graph $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Map$Entry r10;
        java.util.Iterator $r8;
        java.util.Set $r7;
        com.hp.hpl.jena.graph.Triple r19, $r23;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext $r2;
        com.hp.hpl.jena.reasoner.Finder r11;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r17, $r21;
        com.hp.hpl.jena.reasoner.TriplePattern $r12, $r20;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        java.lang.Object $r9, $r13, $r15, $r18, $r22;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEConflictSet $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        r11 := @parameter0: com.hp.hpl.jena.reasoner.Finder;

        $r1 = new com.hp.hpl.jena.reasoner.rulesys.impl.RETEConflictSet;

        $r2 = new com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        specialinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI,com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine)>($r3, r0);

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean isMonotonic>;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEConflictSet: void <init>(com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext,boolean)>($r2, $z0);

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.impl.RETEConflictSet conflictSet> = $r1;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void findAndProcessActions()>();

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: com.hp.hpl.jena.graph.Graph getRawGraph()>();

        if $r5 == null goto label7;

        $z1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean wildcardRule>;

        if $z1 == 0 goto label3;

        $r20 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r20.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, null, null);

        $r21 = interfaceinvoke r11.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>($r20);

     label1:
        $z4 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label2;

        $r22 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        $r23 = (com.hp.hpl.jena.graph.Triple) $r22;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void addTriple(com.hp.hpl.jena.graph.Triple,boolean)>($r23, 0);

        goto label1;

     label2:
        goto label7;

     label3:
        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap predicatePatterns>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.util.OneToManyMap: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r12 = new com.hp.hpl.jena.reasoner.TriplePattern;

        $r13 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (com.hp.hpl.jena.graph.Node) $r13;

        $r15 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (com.hp.hpl.jena.graph.Node) $r15;

        specialinvoke $r12.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, $r14, $r16);

        $r17 = interfaceinvoke r11.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>($r12);

     label5:
        $z3 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r19 = (com.hp.hpl.jena.graph.Triple) $r18;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void addTriple(com.hp.hpl.jena.graph.Triple,boolean)>(r19, 0);

        goto label5;

     label6:
        goto label4;

     label7:
        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void runAll()>();

        return;
    }

    public synchronized void add(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void addTriple(com.hp.hpl.jena.graph.Triple,boolean)>(r1, 0);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void runAll()>();

        return;
    }

    public synchronized boolean delete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void deleteTriple(com.hp.hpl.jena.graph.Triple,boolean)>(r1, 0);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void runAll()>();

        return 1;
    }

    public long getNRulesFired()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        long $l0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        $l0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: long nRulesFired>;

        return $l0;
    }

    public boolean shouldTrace()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        return 1;
    }

    public void setDerivationLogging(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean recordDerivations> = z0;

        return;
    }

    public java.lang.Object getRuleStore()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine$RuleStore $r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r1;
        com.hp.hpl.jena.util.OneToManyMap $r2, $r3;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine$RuleStore;

        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap predicatePatterns>;

        $z1 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean wildcardRule>;

        $z0 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean isMonotonic>;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine$RuleStore: void <init>(com.hp.hpl.jena.util.OneToManyMap,com.hp.hpl.jena.util.OneToManyMap,boolean,boolean)>($r3, $r2, $z1, $z0);

        return $r0;
    }

    public void setRuleStore(java.lang.Object)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETENode $r16, $r17;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine$RuleStore r1;
        java.util.HashMap $r6;
        com.hp.hpl.jena.util.OneToManyMap $r3, $r7, $r8, $r13;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r5;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r12;
        java.util.Iterator $r10;
        java.util.Set $r9;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext $r4;
        java.lang.Object r0, $r11, $r14, $r15;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r2;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        r0 := @parameter0: java.lang.Object;

        r1 = (com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine$RuleStore) r0;

        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine$RuleStore: com.hp.hpl.jena.util.OneToManyMap predicatePatterns>;

        r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap predicatePatterns> = $r3;

        $z0 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine$RuleStore: boolean wildcardRule>;

        r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean wildcardRule> = $z0;

        $z1 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine$RuleStore: boolean isMonotonic>;

        r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean isMonotonic> = $z1;

        $r4 = new com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        $r5 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI,com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine)>($r5, r2);

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        $r7 = new com.hp.hpl.jena.util.OneToManyMap;

        specialinvoke $r7.<com.hp.hpl.jena.util.OneToManyMap: void <init>()>();

        r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex> = $r7;

        $r8 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine$RuleStore: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.util.OneToManyMap: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r13 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        $r14 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (com.hp.hpl.jena.reasoner.rulesys.impl.RETENode) $r15;

        $r17 = interfaceinvoke $r16.<com.hp.hpl.jena.reasoner.rulesys.impl.RETENode: com.hp.hpl.jena.reasoner.rulesys.impl.RETENode clone(java.util.Map,com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext)>($r6, $r4);

        virtualinvoke $r13.<com.hp.hpl.jena.util.OneToManyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r17);

        goto label1;

     label2:
        return;
    }

    public void requestRuleFiring(com.hp.hpl.jena.reasoner.rulesys.Rule, com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment, boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEConflictSet $r3;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment r2;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment;

        z0 := @parameter2: boolean;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.impl.RETEConflictSet conflictSet>;

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEConflictSet: void add(com.hp.hpl.jena.reasoner.rulesys.Rule,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment,boolean)>(r1, r2, z0);

        return;
    }

    public void compile(java.util.List, boolean)
    {
        com.hp.hpl.jena.graph.Node $r13, $r15, $r22, r26;
        byte $b2;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r8;
        java.lang.Byte $r21;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETESourceNode r25;
        java.util.List r3;
        com.hp.hpl.jena.reasoner.TriplePattern $r10, $r12, $r14;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETETerminal $r7;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue $r17, $r18;
        com.hp.hpl.jena.util.OneToManyMap $r1, $r2, $r16, $r23;
        java.util.ArrayList $r9, $r27;
        int $i0, $i1, i3, $i4;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r20;
        java.util.Iterator $r4, $r28;
        boolean[] $r24;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter $r11;
        com.hp.hpl.jena.reasoner.rulesys.Rule r6;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        java.lang.Object $r5, $r19;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        r3 := @parameter0: java.util.List;

        z1 := @parameter1: boolean;

        $r1 = new com.hp.hpl.jena.util.OneToManyMap;

        specialinvoke $r1.<com.hp.hpl.jena.util.OneToManyMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex> = $r1;

        $r2 = new com.hp.hpl.jena.util.OneToManyMap;

        specialinvoke $r2.<com.hp.hpl.jena.util.OneToManyMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap predicatePatterns> = $r2;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean wildcardRule> = 0;

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z9 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label15;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.reasoner.rulesys.Rule) $r5;

        if z1 == 0 goto label02;

        $z8 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isBackward()>();

        if $z8 == 0 goto label02;

        goto label01;

     label02:
        $i0 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: int getNumVars()>();

        $r24 = newarray (boolean)[$i0];

        r25 = null;

        i3 = 0;

     label03:
        $i4 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        if i3 >= $i4 goto label13;

        $r8 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getBodyElement(int)>(i3);

        $z2 = $r8 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z2 == 0 goto label12;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i0);

        $r10 = (com.hp.hpl.jena.reasoner.TriplePattern) $r8;

        $r11 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter compile(com.hp.hpl.jena.reasoner.TriplePattern,int,java.util.List)>($r10, $i0, $r9);

        $r12 = (com.hp.hpl.jena.reasoner.TriplePattern) $r8;

        $r13 = virtualinvoke $r12.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r14 = (com.hp.hpl.jena.reasoner.TriplePattern) $r8;

        $r15 = virtualinvoke $r14.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        r26 = $r15;

        $z3 = virtualinvoke $r13.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label04;

        $r23 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        $r22 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        virtualinvoke $r23.<com.hp.hpl.jena.util.OneToManyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r11);

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean wildcardRule> = 1;

        goto label07;

     label04:
        $r16 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        virtualinvoke $r16.<com.hp.hpl.jena.util.OneToManyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r11);

        $z4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean wildcardRule>;

        if $z4 != 0 goto label07;

        $z6 = virtualinvoke $r15.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z6 == 0 goto label05;

        r26 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

     label05:
        $z7 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>(r26);

        if $z7 == 0 goto label06;

        r26 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

     label06:
        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void recordPredicatePattern(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r13, r26);

     label07:
        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>(int)>($i0);

        $r28 = virtualinvoke $r9.<java.util.ArrayList: java.util.Iterator iterator()>();

     label08:
        $z10 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label10;

        $r19 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) $r19;

        $i1 = virtualinvoke $r20.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        $z5 = $r24[$i1];

        if $z5 == 0 goto label09;

        $r21 = new java.lang.Byte;

        $b2 = (byte) $i1;

        specialinvoke $r21.<java.lang.Byte: void <init>(byte)>($b2);

        virtualinvoke $r27.<java.util.ArrayList: boolean add(java.lang.Object)>($r21);

     label09:
        $r24[$i1] = 1;

        goto label08;

     label10:
        if r25 != null goto label11;

        r25 = $r11;

        goto label12;

     label11:
        $r17 = new com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue;

        specialinvoke $r17.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue: void <init>(java.util.List)>($r27);

        $r18 = new com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue;

        specialinvoke $r18.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue: void <init>(java.util.List)>($r27);

        virtualinvoke $r17.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue: void setSibling(com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue)>($r18);

        virtualinvoke $r18.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue: void setSibling(com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue)>($r17);

        virtualinvoke $r11.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: void setContinuation(com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode)>($r18);

        interfaceinvoke r25.<com.hp.hpl.jena.reasoner.rulesys.impl.RETESourceNode: void setContinuation(com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode)>($r17);

        r25 = $r17;

     label12:
        i3 = i3 + 1;

        goto label03;

     label13:
        if r25 == null goto label14;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.impl.RETETerminal createTerminal(com.hp.hpl.jena.reasoner.rulesys.Rule)>(r6);

        interfaceinvoke r25.<com.hp.hpl.jena.reasoner.rulesys.impl.RETESourceNode: void setContinuation(com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode)>($r7);

     label14:
        goto label01;

     label15:
        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean wildcardRule>;

        if $z0 == 0 goto label16;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap predicatePatterns> = null;

     label16:
        return;
    }

    private void recordPredicatePattern(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, $r2, r4, $r5;
        com.hp.hpl.jena.util.OneToManyMap $r3, $r6, $r7, $r8;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap predicatePatterns>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.util.OneToManyMap: boolean contains(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $z0 == 0 goto label1;

        goto label3;

     label1:
        $r5 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z1 = virtualinvoke r4.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label2;

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap predicatePatterns>;

        virtualinvoke $r7.<com.hp.hpl.jena.util.OneToManyMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap predicatePatterns>;

        virtualinvoke $r8.<com.hp.hpl.jena.util.OneToManyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        goto label3;

     label2:
        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap predicatePatterns>;

        virtualinvoke $r6.<com.hp.hpl.jena.util.OneToManyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

     label3:
        return;
    }

    protected com.hp.hpl.jena.reasoner.rulesys.impl.RETETerminal createTerminal(com.hp.hpl.jena.reasoner.rulesys.Rule)
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r1;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETETerminal $r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r2;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.impl.RETETerminal;

        $r3 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETETerminal: void <init>(com.hp.hpl.jena.reasoner.rulesys.Rule,com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine,com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI)>(r1, r2, $r3);

        return $r0;
    }

    public synchronized void addTriple(com.hp.hpl.jena.graph.Triple, boolean)
    {
        java.util.HashSet $r4, $r7;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r1, $r5;
        int $i0;
        java.lang.String $r12, $r14;
        boolean $z0, $z1, z2;
        org.slf4j.Logger $r10;
        com.hp.hpl.jena.graph.Triple r3;
        java.util.List $r2, $r6, $r8;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        java.lang.StringBuilder $r9, $r11, $r13;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        z2 := @parameter1: boolean;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: boolean shouldTrace()>();

        if $z0 == 0 goto label1;

        $r10 = <com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: org.slf4j.Logger logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Add triple: ");

        $r12 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Triple)>(r3);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r14);

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List deletesPending>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List deletesPending>;

        interfaceinvoke $r8.<java.util.List: boolean remove(java.lang.Object)>(r3);

     label2:
        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.HashSet addsHash>;

        $z1 = virtualinvoke $r4.<java.util.HashSet: boolean contains(java.lang.Object)>(r3);

        if $z1 != 0 goto label3;

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List addsPending>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r3);

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.HashSet addsHash>;

        virtualinvoke $r7.<java.util.HashSet: boolean add(java.lang.Object)>(r3);

     label3:
        if z2 == 0 goto label4;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        interfaceinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: void addDeduction(com.hp.hpl.jena.graph.Triple)>(r3);

     label4:
        return;
    }

    public synchronized void deleteTriple(com.hp.hpl.jena.graph.Triple, boolean)
    {
        com.hp.hpl.jena.graph.Triple r1;
        java.util.HashSet $r3;
        java.util.List $r2, $r4, $r9;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r5, $r7;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        com.hp.hpl.jena.graph.Graph $r6, $r8;
        boolean z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List addsPending>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.HashSet addsHash>;

        virtualinvoke $r3.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List deletesPending>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        if z0 == 0 goto label1;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: com.hp.hpl.jena.graph.Graph getCurrentDeductionsGraph()>();

        interfaceinvoke $r6.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r1);

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: com.hp.hpl.jena.graph.Graph getRawGraph()>();

        $z1 = interfaceinvoke $r8.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Triple)>(r1);

        if $z1 == 0 goto label1;

        $r9 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List deletesPending>;

        interfaceinvoke $r9.<java.util.List: boolean remove(java.lang.Object)>(r1);

     label1:
        return;
    }

    protected void incRuleCount()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        long $l0, $l1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        $l0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: long nRulesFired>;

        $l1 = $l0 + 1L;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: long nRulesFired> = $l1;

        return;
    }

    protected synchronized com.hp.hpl.jena.graph.Triple nextAddTriple()
    {
        com.hp.hpl.jena.graph.Triple r4;
        java.util.HashSet $r5;
        java.util.List $r1, $r2;
        int $i0, $i1;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        java.lang.Object $r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List addsPending>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List addsPending>;

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i1);

        r4 = (com.hp.hpl.jena.graph.Triple) $r3;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.HashSet addsHash>;

        virtualinvoke $r5.<java.util.HashSet: boolean remove(java.lang.Object)>(r4);

        return r4;

     label1:
        return null;
    }

    protected synchronized com.hp.hpl.jena.graph.Triple nextDeleteTriple()
    {
        java.util.List $r1, $r2;
        int $i0, $i1;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.Triple $r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List deletesPending>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List deletesPending>;

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i1);

        $r4 = (com.hp.hpl.jena.graph.Triple) $r3;

        return $r4;

     label1:
        return null;
    }

    public void runAll()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEConflictSet $r2, $r3;
        com.hp.hpl.jena.graph.Triple $r1, r4;
        boolean $z0, z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

     label1:
        z1 = 0;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.graph.Triple nextDeleteTriple()>();

        r4 = $r1;

        if $r1 != null goto label2;

        r4 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.graph.Triple nextAddTriple()>();

        z1 = 1;

     label2:
        if r4 != null goto label4;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.impl.RETEConflictSet conflictSet>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEConflictSet: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        return;

     label3:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.impl.RETEConflictSet conflictSet>;

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEConflictSet: boolean fireOne()>();

        goto label5;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void inject(com.hp.hpl.jena.graph.Triple,boolean)>(r4, z1);

     label5:
        goto label1;
    }

    private void inject(com.hp.hpl.jena.graph.Triple, boolean)
    {
        com.hp.hpl.jena.graph.Node $r14, $r17;
        com.hp.hpl.jena.util.OneToManyMap $r13, $r16;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r1;
        java.lang.String $r9, $r11, $r12;
        boolean $z0, z1, $z2;
        org.slf4j.Logger $r6;
        java.util.Iterator $r15, $r18;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter r4;
        com.hp.hpl.jena.graph.Triple r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r19, $r20;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r7, $r8, $r10;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        z1 := @parameter1: boolean;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: boolean shouldTrace()>();

        if $z0 == 0 goto label3;

        $r6 = <com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: org.slf4j.Logger logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        if z1 == 0 goto label1;

        $r12 = "Inserting";

        goto label2;

     label1:
        $r12 = "Deleting";

     label2:
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" triple: ");

        $r9 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Triple)>(r2);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r11);

     label3:
        $r13 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        $r14 = virtualinvoke r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r15 = virtualinvoke $r13.<com.hp.hpl.jena.util.OneToManyMap: java.util.Iterator getAll(java.lang.Object)>($r14);

        $r16 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        $r17 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r18 = virtualinvoke $r16.<com.hp.hpl.jena.util.OneToManyMap: java.util.Iterator getAll(java.lang.Object)>($r17);

        $r19 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r15);

        $r20 = interfaceinvoke $r19.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator andThen(java.util.Iterator)>($r18);

     label4:
        $z2 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r3 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter) $r3;

        virtualinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: void fire(com.hp.hpl.jena.graph.Triple,boolean)>(r2, z1);

        goto label4;

     label5:
        return;
    }

    public void testTripleInsert(com.hp.hpl.jena.graph.Triple)
    {
        java.util.Iterator $r4, $r7;
        com.hp.hpl.jena.graph.Node $r3, $r5;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter r11;
        com.hp.hpl.jena.util.OneToManyMap $r2, $r6;
        com.hp.hpl.jena.graph.Triple r1;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r8, $r9;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        java.lang.Object $r10;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r4 = virtualinvoke $r2.<com.hp.hpl.jena.util.OneToManyMap: java.util.Iterator getAll(java.lang.Object)>($r3);

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        $r5 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.util.OneToManyMap: java.util.Iterator getAll(java.lang.Object)>($r5);

        $r8 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r4);

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator andThen(java.util.Iterator)>($r7);

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter) $r10;

        virtualinvoke r11.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: void fire(com.hp.hpl.jena.graph.Triple,boolean)>(r1, 1);

        goto label1;

     label2:
        return;
    }

    protected void findAndProcessAxioms()
    {
        com.hp.hpl.jena.graph.Node[] $r8;
        java.util.Iterator $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext $r5;
        java.util.List $r1;
        com.hp.hpl.jena.reasoner.rulesys.Rule r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector $r7;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r6;
        int $i0;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r0;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List rules>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.reasoner.rulesys.Rule) $r3;

        $z1 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isAxiom()>();

        if $z1 == 0 goto label2;

        $r5 = new com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        specialinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI,com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine)>($r6, r0);

        $r7 = new com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        $i0 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.Rule: int getNumVars()>();

        $r8 = newarray (com.hp.hpl.jena.graph.Node)[$i0];

        specialinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: void <init>(com.hp.hpl.jena.graph.Node[])>($r8);

        virtualinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: void setEnv(com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r7);

        virtualinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: void setRule(com.hp.hpl.jena.reasoner.rulesys.Rule)>(r4);

        $z2 = virtualinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: boolean shouldFire(boolean)>(1);

        if $z2 == 0 goto label2;

        staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.RETEConflictSet: void execute(com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext,boolean)>($r5, 1);

     label2:
        goto label1;

     label3:
        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: boolean processedAxioms> = 1;

        return;
    }

    protected void findAndProcessActions()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector $r19;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r2;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r7;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r13, $r16, $r18;
        com.hp.hpl.jena.reasoner.ReasonerException $r10;
        boolean $z0, $z1;
        com.hp.hpl.jena.graph.Node[] $r20;
        java.util.Iterator $r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext $r0;
        java.util.List $r3;
        com.hp.hpl.jena.reasoner.rulesys.Rule r6;
        com.hp.hpl.jena.reasoner.rulesys.Builtin $r9;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r1;
        java.lang.Object $r5;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r17;
        com.hp.hpl.jena.reasoner.rulesys.Functor r8;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI,com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine)>($r2, r1);

        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: java.util.List rules>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.reasoner.rulesys.Rule) $r5;

        $i0 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        if $i0 != 0 goto label5;

        i4 = 0;

     label2:
        $i1 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: int headLength()>();

        if i4 >= $i1 goto label5;

        $r7 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getHeadElement(int)>(i4);

        $z1 = $r7 instanceof com.hp.hpl.jena.reasoner.rulesys.Functor;

        if $z1 == 0 goto label4;

        r8 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r7;

        $r9 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin getImplementor()>();

        if $r9 == null goto label3;

        virtualinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: void setRule(com.hp.hpl.jena.reasoner.rulesys.Rule)>(r6);

        $r19 = new com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        $i2 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: int getNumVars()>();

        specialinvoke $r19.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: void <init>(int)>($i2);

        virtualinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: void setEnv(com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r19);

        $r20 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $i3 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.Functor: int getArgLength()>();

        interfaceinvoke $r9.<com.hp.hpl.jena.reasoner.rulesys.Builtin: void headAction(com.hp.hpl.jena.graph.Node[],int,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>($r20, $i3, $r0);

        goto label4;

     label3:
        $r10 = new com.hp.hpl.jena.reasoner.ReasonerException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invoking undefined Functor ");

        $r13 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r16 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String toShortString()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>($r18);

        throw $r10;

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        goto label1;

     label6:
        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/reasoner/rulesys/impl/FRuleEngine;");

        <com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: org.slf4j.Logger logger> = $r0;

        return;
    }
}
