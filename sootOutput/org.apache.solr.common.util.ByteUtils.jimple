public class org.apache.solr.common.util.ByteUtils extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.solr.common.util.ByteUtils r0;

        r0 := @this: org.apache.solr.common.util.ByteUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int UTF8toUTF16(byte[], int, int, char[], int)
    {
        byte[] r0;
        byte $b5, $b8, $b9, $b13, $b14, $b18, $b19, $b35, $b36, $b40, $b41, $b48, $b49;
        long $l25, $l26, $l27;
        java.lang.AssertionError $r4, $r5;
        short s6, $s7, $s34, $s46, $s58;
        char[] r1;
        boolean $z0, $z1;
        int i0, i1, i2, $i3, $i4, $i10, $i11, $i12, $i15, $i16, $i17, $i20, i21, $i22, $i23, $i28, $i30, $i32, $i33, $i37, $i38, $i39, $i42, $i43, $i45, $i47, $i50, $i51, $i53, i55, i56, i57, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i74, $i76;
        char $c24, $c29, $c31, $c44, $c52, $c54;

        r0 := @parameter0: byte[];

        i55 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: char[];

        i56 := @parameter4: int;

        i0 = i56;

        i2 = i55 + i1;

     label1:
        if i55 >= i2 goto label9;

        $i4 = i55;

        i55 = i55 + 1;

        $b5 = r0[$i4];

        $s58 = (short) $b5;

        s6 = $s58 & 255;

        $i59 = (int) s6;

        if $i59 >= 192 goto label3;

        $z1 = <org.apache.solr.common.util.ByteUtils: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i60 = (int) s6;

        if $i60 < 128 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $i53 = i56;

        i56 = i56 + 1;

        $c54 = (char) s6;

        r1[$i53] = $c54;

        goto label8;

     label3:
        $i61 = (int) s6;

        if $i61 >= 224 goto label4;

        $i45 = i56;

        i56 = i56 + 1;

        $s46 = s6 & 31;

        $i62 = (int) $s46;

        $i50 = $i62 << 6;

        $i47 = i55;

        i55 = i55 + 1;

        $b48 = r0[$i47];

        $b49 = $b48 & 63;

        $i63 = (int) $b49;

        $i51 = $i50 + $i63;

        $c52 = (char) $i51;

        r1[$i45] = $c52;

        goto label8;

     label4:
        $i64 = (int) s6;

        if $i64 >= 240 goto label5;

        $i33 = i56;

        i56 = i56 + 1;

        $s34 = s6 & 15;

        $i65 = (int) $s34;

        $i38 = $i65 << 12;

        $b35 = r0[i55];

        $b36 = $b35 & 63;

        $i66 = (int) $b36;

        $i37 = $i66 << 6;

        $i42 = $i38 + $i37;

        $i39 = i55 + 1;

        $b40 = r0[$i39];

        $b41 = $b40 & 63;

        $i67 = (int) $b41;

        $i43 = $i42 + $i67;

        $c44 = (char) $i43;

        r1[$i33] = $c44;

        i55 = i55 + 2;

        goto label8;

     label5:
        $z0 = <org.apache.solr.common.util.ByteUtils: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        $i68 = (int) s6;

        if $i68 < 248 goto label6;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label6:
        $s7 = s6 & 7;

        $i69 = (int) $s7;

        $i11 = $i69 << 18;

        $b8 = r0[i55];

        $b9 = $b8 & 63;

        $i70 = (int) $b9;

        $i10 = $i70 << 12;

        $i16 = $i11 + $i10;

        $i12 = i55 + 1;

        $b13 = r0[$i12];

        $b14 = $b13 & 63;

        $i71 = (int) $b14;

        $i15 = $i71 << 6;

        $i20 = $i16 + $i15;

        $i17 = i55 + 2;

        $b18 = r0[$i17];

        $b19 = $b18 & 63;

        $i72 = (int) $b19;

        $i32 = $i20 + $i72;

        i55 = i55 + 3;

        $i74 = (int) 65535;

        if $i32 >= $i74 goto label7;

        $i30 = i56;

        i56 = i56 + 1;

        $c31 = (char) $i32;

        r1[$i30] = $c31;

        goto label8;

     label7:
        i21 = $i32 - 65536;

        i57 = i56 + 1;

        $i22 = i21 >> 10;

        $i76 = (int) 55296;

        $i23 = $i22 + $i76;

        $c24 = (char) $i23;

        r1[i56] = $c24;

        i56 = i57 + 1;

        $l25 = (long) i21;

        $l26 = $l25 & 1023L;

        $l27 = $l26 + 56320L;

        $i28 = (int) $l27;

        $c29 = (char) $i28;

        r1[i57] = $c29;

     label8:
        goto label1;

     label9:
        $i3 = i56 - i0;

        return $i3;
    }

    public static void UTF8toUTF16(byte[], int, int, org.noggit.CharArr)
    {
        byte[] r1;
        org.noggit.CharArr r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        char[] $r2;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0 := @parameter3: org.noggit.CharArr;

        virtualinvoke r0.<org.noggit.CharArr: void reserve(int)>(i0);

        $r2 = virtualinvoke r0.<org.noggit.CharArr: char[] getArray()>();

        $i2 = virtualinvoke r0.<org.noggit.CharArr: int getEnd()>();

        $i3 = staticinvoke <org.apache.solr.common.util.ByteUtils: int UTF8toUTF16(byte[],int,int,char[],int)>(r1, i1, i0, $r2, $i2);

        $i4 = virtualinvoke r0.<org.noggit.CharArr: int getEnd()>();

        $i5 = $i4 + $i3;

        virtualinvoke r0.<org.noggit.CharArr: void setEnd(int)>($i5);

        return;
    }

    public static java.lang.String UTF8toUTF16(byte[], int, int)
    {
        byte[] r1;
        int i0, i1, $i2;
        char[] r0;
        java.lang.String $r2;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0 = newarray (char)[i0];

        $i2 = staticinvoke <org.apache.solr.common.util.ByteUtils: int UTF8toUTF16(byte[],int,int,char[],int)>(r1, i1, i0, r0, 0);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(r0, 0, $i2);

        return $r2;
    }

    public static int UTF16toUTF8(java.lang.CharSequence, int, int, byte[], int)
    {
        byte[] r1;
        byte $b8, $b12, $b15, $b24, $b28, $b32, $b35, $b38, $b41, $b43;
        java.lang.CharSequence r0;
        short $s14, $s40;
        int i0, i1, i2, i3, $i4, $i6, $i7, $i9, $i10, $i11, $i16, $i17, $i19, $i21, $i22, $i23, $i25, $i26, $i27, $i29, $i30, $i31, $i33, $i34, $i36, $i37, $i42, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, $i55, $i56, $i57, $i58, $i60, $i61, $i63, $i64, $i65, $i66, $i68, $i69, $i71, $i72, $i74, $i75, $i77, $i78;
        char $c5, $c13, $c18, $c20, $c39;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: byte[];

        i3 := @parameter4: int;

        i2 = i0 + i1;

        i44 = i3;

        i45 = i0;

     label1:
        if i45 >= i2 goto label8;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i45);

        $i55 = (int) $c5;

        if $i55 >= 128 goto label2;

        $i42 = i44;

        i44 = i44 + 1;

        $b43 = (byte) $c5;

        r1[$i42] = $b43;

        goto label7;

     label2:
        $i56 = (int) $c5;

        if $i56 >= 2048 goto label3;

        i46 = i44 + 1;

        $i57 = (int) $c5;

        $i36 = $i57 >> 6;

        $i37 = 192 | $i36;

        $b38 = (byte) $i37;

        r1[i44] = $b38;

        i44 = i46 + 1;

        $c39 = $c5 & 63;

        $s40 = 128 | $c39;

        $b41 = (byte) $s40;

        r1[i46] = $b41;

        goto label7;

     label3:
        $i58 = (int) $c5;

        $i60 = (int) 55296;

        if $i58 < $i60 goto label4;

        $i61 = (int) $c5;

        $i63 = (int) 57343;

        if $i61 <= $i63 goto label5;

     label4:
        i47 = i44 + 1;

        $i64 = (int) $c5;

        $i6 = $i64 >> 12;

        $i7 = 224 | $i6;

        $b8 = (byte) $i7;

        r1[i44] = $b8;

        i48 = i47 + 1;

        $i65 = (int) $c5;

        $i9 = $i65 >> 6;

        $i10 = $i9 & 63;

        $i11 = 128 | $i10;

        $b12 = (byte) $i11;

        r1[i47] = $b12;

        i44 = i48 + 1;

        $c13 = $c5 & 63;

        $s14 = 128 | $c13;

        $b15 = (byte) $s14;

        r1[i48] = $b15;

        goto label7;

     label5:
        $i66 = (int) $c5;

        $i68 = (int) 56320;

        if $i66 >= $i68 goto label6;

        $i16 = i2 - 1;

        if i45 >= $i16 goto label6;

        $i17 = i45 + 1;

        $c18 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i17);

        $i69 = (int) $c18;

        $i71 = (int) 56320;

        if $i69 < $i71 goto label6;

        $i72 = (int) $c18;

        $i74 = (int) 57343;

        if $i72 > $i74 goto label6;

        $i75 = (int) $c5;

        $i77 = (int) 55232;

        $i19 = $i75 - $i77;

        $i21 = $i19 << 10;

        $c20 = $c18 & 1023;

        $i78 = (int) $c20;

        i49 = $i21 + $i78;

        i45 = i45 + 1;

        i50 = i44 + 1;

        $i22 = i49 >> 18;

        $i23 = 240 | $i22;

        $b24 = (byte) $i23;

        r1[i44] = $b24;

        i51 = i50 + 1;

        $i25 = i49 >> 12;

        $i26 = $i25 & 63;

        $i27 = 128 | $i26;

        $b28 = (byte) $i27;

        r1[i50] = $b28;

        i52 = i51 + 1;

        $i29 = i49 >> 6;

        $i30 = $i29 & 63;

        $i31 = 128 | $i30;

        $b32 = (byte) $i31;

        r1[i51] = $b32;

        i44 = i52 + 1;

        $i33 = i49 & 63;

        $i34 = 128 | $i33;

        $b35 = (byte) $i34;

        r1[i52] = $b35;

        goto label7;

     label6:
        i53 = i44 + 1;

        r1[i44] = -17;

        i54 = i53 + 1;

        r1[i53] = -65;

        i44 = i54 + 1;

        r1[i54] = -67;

     label7:
        i45 = i45 + 1;

        goto label1;

     label8:
        $i4 = i44 - i3;

        return $i4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/solr/common/util/ByteUtils;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.solr.common.util.ByteUtils: boolean $assertionsDisabled> = $z1;

        return;
    }
}
