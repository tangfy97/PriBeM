public final enum class org.xmpp.packet.StreamError$Condition extends java.lang.Enum
{
    public static final enum org.xmpp.packet.StreamError$Condition bad_format;
    public static final enum org.xmpp.packet.StreamError$Condition bad_namespace_prefix;
    public static final enum org.xmpp.packet.StreamError$Condition conflict;
    public static final enum org.xmpp.packet.StreamError$Condition connection_timeout;
    public static final enum org.xmpp.packet.StreamError$Condition host_gone;
    public static final enum org.xmpp.packet.StreamError$Condition host_unknown;
    public static final enum org.xmpp.packet.StreamError$Condition improper_addressing;
    public static final enum org.xmpp.packet.StreamError$Condition internal_server_error;
    public static final enum org.xmpp.packet.StreamError$Condition invalid_from;
    public static final enum org.xmpp.packet.StreamError$Condition invalid_id;
    public static final enum org.xmpp.packet.StreamError$Condition invalid_namespace;
    public static final enum org.xmpp.packet.StreamError$Condition invalid_xml;
    public static final enum org.xmpp.packet.StreamError$Condition not_authorized;
    public static final enum org.xmpp.packet.StreamError$Condition policy_violation;
    public static final enum org.xmpp.packet.StreamError$Condition remote_connection_failed;
    public static final enum org.xmpp.packet.StreamError$Condition resource_constraint;
    public static final enum org.xmpp.packet.StreamError$Condition restricted_xml;
    public static final enum org.xmpp.packet.StreamError$Condition see_other_host;
    public static final enum org.xmpp.packet.StreamError$Condition system_shutdown;
    public static final enum org.xmpp.packet.StreamError$Condition undefined_condition;
    public static final enum org.xmpp.packet.StreamError$Condition unsupported_encoding;
    public static final enum org.xmpp.packet.StreamError$Condition unsupported_stanza_type;
    public static final enum org.xmpp.packet.StreamError$Condition unsupported_version;
    public static final enum org.xmpp.packet.StreamError$Condition xml_not_well_formed;
    private java.lang.String value;
    private static final org.xmpp.packet.StreamError$Condition[] $VALUES;

    public static org.xmpp.packet.StreamError$Condition[] values()
    {
        java.lang.Object $r1;
        org.xmpp.packet.StreamError$Condition[] $r0, $r2;

        $r0 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.xmpp.packet.StreamError$Condition[]) $r1;

        return $r2;
    }

    public static org.xmpp.packet.StreamError$Condition valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.xmpp.packet.StreamError$Condition $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/xmpp/packet/StreamError$Condition;", r0);

        $r2 = (org.xmpp.packet.StreamError$Condition) $r1;

        return $r2;
    }

    public static org.xmpp.packet.StreamError$Condition fromXMPP(java.lang.String)
    {
        java.lang.StringBuilder $r50, $r51, $r52;
        java.lang.String $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r48, $r53, r79;
        java.lang.NullPointerException $r78;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23;
        org.xmpp.packet.StreamError$Condition $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77;
        java.lang.IllegalArgumentException $r49;

        r79 := @parameter0: java.lang.String;

        if r79 != null goto label01;

        $r78 = new java.lang.NullPointerException;

        specialinvoke $r78.<java.lang.NullPointerException: void <init>()>();

        throw $r78;

     label01:
        $r0 = virtualinvoke r79.<java.lang.String: java.lang.String toLowerCase()>();

        $r1 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition bad_format>;

        $r2 = virtualinvoke $r1.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label02;

        $r77 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition bad_format>;

        return $r77;

     label02:
        $r3 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition bad_namespace_prefix>;

        $r4 = virtualinvoke $r3.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z1 == 0 goto label03;

        $r76 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition bad_namespace_prefix>;

        return $r76;

     label03:
        $r5 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition conflict>;

        $r6 = virtualinvoke $r5.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z2 == 0 goto label04;

        $r75 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition conflict>;

        return $r75;

     label04:
        $r7 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition connection_timeout>;

        $r8 = virtualinvoke $r7.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z3 == 0 goto label05;

        $r74 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition connection_timeout>;

        return $r74;

     label05:
        $r9 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition host_gone>;

        $r10 = virtualinvoke $r9.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z4 == 0 goto label06;

        $r73 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition host_gone>;

        return $r73;

     label06:
        $r11 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition host_unknown>;

        $r12 = virtualinvoke $r11.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z5 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z5 == 0 goto label07;

        $r72 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition host_unknown>;

        return $r72;

     label07:
        $r13 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition improper_addressing>;

        $r14 = virtualinvoke $r13.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z6 == 0 goto label08;

        $r71 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition improper_addressing>;

        return $r71;

     label08:
        $r15 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition internal_server_error>;

        $r16 = virtualinvoke $r15.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z7 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z7 == 0 goto label09;

        $r70 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition internal_server_error>;

        return $r70;

     label09:
        $r17 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_from>;

        $r18 = virtualinvoke $r17.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z8 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z8 == 0 goto label10;

        $r69 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_from>;

        return $r69;

     label10:
        $r19 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_id>;

        $r20 = virtualinvoke $r19.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z9 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z9 == 0 goto label11;

        $r68 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_id>;

        return $r68;

     label11:
        $r21 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_namespace>;

        $r22 = virtualinvoke $r21.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z10 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z10 == 0 goto label12;

        $r67 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_namespace>;

        return $r67;

     label12:
        $r23 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_xml>;

        $r24 = virtualinvoke $r23.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z11 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z11 == 0 goto label13;

        $r66 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_xml>;

        return $r66;

     label13:
        $r25 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition not_authorized>;

        $r26 = virtualinvoke $r25.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z12 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z12 == 0 goto label14;

        $r65 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition not_authorized>;

        return $r65;

     label14:
        $r27 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition policy_violation>;

        $r28 = virtualinvoke $r27.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z13 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z13 == 0 goto label15;

        $r64 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition policy_violation>;

        return $r64;

     label15:
        $r29 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition remote_connection_failed>;

        $r30 = virtualinvoke $r29.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z14 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z14 == 0 goto label16;

        $r63 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition remote_connection_failed>;

        return $r63;

     label16:
        $r31 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition resource_constraint>;

        $r32 = virtualinvoke $r31.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z15 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z15 == 0 goto label17;

        $r62 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition resource_constraint>;

        return $r62;

     label17:
        $r33 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition restricted_xml>;

        $r34 = virtualinvoke $r33.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z16 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z16 == 0 goto label18;

        $r61 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition restricted_xml>;

        return $r61;

     label18:
        $r35 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition see_other_host>;

        $r36 = virtualinvoke $r35.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z17 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z17 == 0 goto label19;

        $r60 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition see_other_host>;

        return $r60;

     label19:
        $r37 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition system_shutdown>;

        $r38 = virtualinvoke $r37.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z18 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z18 == 0 goto label20;

        $r59 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition system_shutdown>;

        return $r59;

     label20:
        $r39 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition undefined_condition>;

        $r40 = virtualinvoke $r39.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z19 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z19 == 0 goto label21;

        $r58 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition undefined_condition>;

        return $r58;

     label21:
        $r41 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition unsupported_encoding>;

        $r42 = virtualinvoke $r41.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z20 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z20 == 0 goto label22;

        $r57 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition unsupported_encoding>;

        return $r57;

     label22:
        $r43 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition unsupported_stanza_type>;

        $r44 = virtualinvoke $r43.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z21 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z21 == 0 goto label23;

        $r56 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition unsupported_stanza_type>;

        return $r56;

     label23:
        $r45 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition unsupported_version>;

        $r46 = virtualinvoke $r45.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z22 = virtualinvoke $r46.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z22 == 0 goto label24;

        $r55 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition unsupported_version>;

        return $r55;

     label24:
        $r47 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition xml_not_well_formed>;

        $r48 = virtualinvoke $r47.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $z23 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z23 == 0 goto label25;

        $r54 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition xml_not_well_formed>;

        return $r54;

     label25:
        $r49 = new java.lang.IllegalArgumentException;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Condition invalid:");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r53);

        throw $r49;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        int i0;
        java.lang.String r1, r2;
        org.xmpp.packet.StreamError$Condition r0;

        r0 := @this: org.xmpp.packet.StreamError$Condition;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.xmpp.packet.StreamError$Condition: java.lang.String value> = r2;

        return;
    }

    public java.lang.String toXMPP()
    {
        java.lang.String $r1;
        org.xmpp.packet.StreamError$Condition r0;

        r0 := @this: org.xmpp.packet.StreamError$Condition;

        $r1 = r0.<org.xmpp.packet.StreamError$Condition: java.lang.String value>;

        return $r1;
    }

    static void <clinit>()
    {
        org.xmpp.packet.StreamError$Condition[] $r24;
        org.xmpp.packet.StreamError$Condition $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48;

        $r0 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r0.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("bad_format", 0, "bad-format");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition bad_format> = $r0;

        $r1 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r1.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("bad_namespace_prefix", 1, "bad-namespace-prefix");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition bad_namespace_prefix> = $r1;

        $r2 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r2.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("conflict", 2, "conflict");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition conflict> = $r2;

        $r3 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r3.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("connection_timeout", 3, "connection-timeout");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition connection_timeout> = $r3;

        $r4 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r4.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("host_gone", 4, "host-gone");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition host_gone> = $r4;

        $r5 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r5.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("host_unknown", 5, "host-unknown");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition host_unknown> = $r5;

        $r6 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r6.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("improper_addressing", 6, "improper-addressing");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition improper_addressing> = $r6;

        $r7 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r7.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("internal_server_error", 7, "internal-server-error");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition internal_server_error> = $r7;

        $r8 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r8.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("invalid_from", 8, "invalid-from");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_from> = $r8;

        $r9 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r9.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("invalid_id", 9, "invalid-id");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_id> = $r9;

        $r10 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r10.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("invalid_namespace", 10, "invalid-namespace");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_namespace> = $r10;

        $r11 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r11.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("invalid_xml", 11, "invalid-xml");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_xml> = $r11;

        $r12 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r12.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("not_authorized", 12, "not-authorized");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition not_authorized> = $r12;

        $r13 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r13.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("policy_violation", 13, "policy-violation");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition policy_violation> = $r13;

        $r14 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r14.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("remote_connection_failed", 14, "remote-connection-failed");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition remote_connection_failed> = $r14;

        $r15 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r15.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("resource_constraint", 15, "resource-constraint");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition resource_constraint> = $r15;

        $r16 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r16.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("restricted_xml", 16, "restricted-xml");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition restricted_xml> = $r16;

        $r17 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r17.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("see_other_host", 17, "see-other-host");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition see_other_host> = $r17;

        $r18 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r18.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("system_shutdown", 18, "system-shutdown");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition system_shutdown> = $r18;

        $r19 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r19.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("undefined_condition", 19, "undefined-condition");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition undefined_condition> = $r19;

        $r20 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r20.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("unsupported_encoding", 20, "unsupported-encoding");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition unsupported_encoding> = $r20;

        $r21 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r21.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("unsupported_stanza_type", 21, "unsupported-stanza-type");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition unsupported_stanza_type> = $r21;

        $r22 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r22.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("unsupported_version", 22, "unsupported-version");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition unsupported_version> = $r22;

        $r23 = new org.xmpp.packet.StreamError$Condition;

        specialinvoke $r23.<org.xmpp.packet.StreamError$Condition: void <init>(java.lang.String,int,java.lang.String)>("xml_not_well_formed", 23, "xml-not-well-formed");

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition xml_not_well_formed> = $r23;

        $r24 = newarray (org.xmpp.packet.StreamError$Condition)[24];

        $r25 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition bad_format>;

        $r24[0] = $r25;

        $r26 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition bad_namespace_prefix>;

        $r24[1] = $r26;

        $r27 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition conflict>;

        $r24[2] = $r27;

        $r28 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition connection_timeout>;

        $r24[3] = $r28;

        $r29 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition host_gone>;

        $r24[4] = $r29;

        $r30 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition host_unknown>;

        $r24[5] = $r30;

        $r31 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition improper_addressing>;

        $r24[6] = $r31;

        $r32 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition internal_server_error>;

        $r24[7] = $r32;

        $r33 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_from>;

        $r24[8] = $r33;

        $r34 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_id>;

        $r24[9] = $r34;

        $r35 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_namespace>;

        $r24[10] = $r35;

        $r36 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition invalid_xml>;

        $r24[11] = $r36;

        $r37 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition not_authorized>;

        $r24[12] = $r37;

        $r38 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition policy_violation>;

        $r24[13] = $r38;

        $r39 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition remote_connection_failed>;

        $r24[14] = $r39;

        $r40 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition resource_constraint>;

        $r24[15] = $r40;

        $r41 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition restricted_xml>;

        $r24[16] = $r41;

        $r42 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition see_other_host>;

        $r24[17] = $r42;

        $r43 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition system_shutdown>;

        $r24[18] = $r43;

        $r44 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition undefined_condition>;

        $r24[19] = $r44;

        $r45 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition unsupported_encoding>;

        $r24[20] = $r45;

        $r46 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition unsupported_stanza_type>;

        $r24[21] = $r46;

        $r47 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition unsupported_version>;

        $r24[22] = $r47;

        $r48 = <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition xml_not_well_formed>;

        $r24[23] = $r48;

        <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition[] $VALUES> = $r24;

        return;
    }
}
