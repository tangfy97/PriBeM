public abstract class org.joda.time.base.AbstractPartial extends java.lang.Object implements org.joda.time.ReadablePartial, java.lang.Comparable
{

    protected void <init>()
    {
        org.joda.time.base.AbstractPartial r0;

        r0 := @this: org.joda.time.base.AbstractPartial;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract org.joda.time.DateTimeField getField(int, org.joda.time.Chronology);

    public org.joda.time.DateTimeFieldType getFieldType(int)
    {
        org.joda.time.base.AbstractPartial r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        org.joda.time.DateTimeFieldType $r3;

        r0 := @this: org.joda.time.base.AbstractPartial;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1);

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        return $r3;
    }

    public org.joda.time.DateTimeFieldType[] getFieldTypes()
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.DateTimeFieldType[] r1;
        int $i0, $i1, i2;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

        r1 = newarray (org.joda.time.DateTimeFieldType)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i2);

        r1[i2] = $r2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public org.joda.time.DateTimeField getField(int)
    {
        org.joda.time.base.AbstractPartial r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1);

        return $r2;
    }

    public org.joda.time.DateTimeField[] getFields()
    {
        org.joda.time.base.AbstractPartial r0;
        int $i0, $i1, i2;
        org.joda.time.DateTimeField[] r1;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

        r1 = newarray (org.joda.time.DateTimeField)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int)>(i2);

        r1[i2] = $r2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public int[] getValues()
    {
        org.joda.time.base.AbstractPartial r0;
        int[] r1;
        int $i0, $i1, $i2, i3;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

        r1 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label2;

        $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>(i3);

        r1[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    public int get(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.base.AbstractPartial r0;
        int $i0, $i1;
        org.joda.time.DateTimeFieldType r1;

        r0 := @this: org.joda.time.base.AbstractPartial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1);

        $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>($i0);

        return $i1;
    }

    public boolean isSupported(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.base.AbstractPartial r0;
        int $i0, $i2;
        org.joda.time.DateTimeFieldType r1;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractPartial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>(r1);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int indexOf(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.base.AbstractPartial r0;
        int $i0, i1, $i3;
        org.joda.time.DateTimeFieldType $r1, r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        r2 := @parameter0: org.joda.time.DateTimeFieldType;

        i1 = 0;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

     label1:
        if i1 >= $i0 goto label3;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i1);

        if $r1 != r2 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i3 = (int) -1;

        return $i3;
    }

    protected int indexOfSupported(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.base.AbstractPartial r0;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuffer $r4, $r5, $r6, $r8;
        int $i0, $i2;
        org.joda.time.DateTimeFieldType r1;
        java.lang.String $r7;

        r0 := @this: org.joda.time.base.AbstractPartial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>(r1);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Field \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not supported");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label1:
        return $i0;
    }

    protected int indexOf(org.joda.time.DurationFieldType)
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.DurationFieldType $r2, r3;
        int $i0, i1, $i3;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.base.AbstractPartial;

        r3 := @parameter0: org.joda.time.DurationFieldType;

        i1 = 0;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

     label1:
        if i1 >= $i0 goto label3;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i1);

        $r2 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        if $r2 != r3 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i3 = (int) -1;

        return $i3;
    }

    protected int indexOfSupported(org.joda.time.DurationFieldType)
    {
        org.joda.time.base.AbstractPartial r0;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuffer $r4, $r5, $r6, $r8;
        org.joda.time.DurationFieldType r1;
        int $i0, $i2;
        java.lang.String $r7;

        r0 := @this: org.joda.time.base.AbstractPartial;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DurationFieldType)>(r1);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Field \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not supported");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label1:
        return $i0;
    }

    public org.joda.time.DateTime toDateTime(org.joda.time.ReadableInstant)
    {
        org.joda.time.base.AbstractPartial r2;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTime $r3;
        org.joda.time.ReadableInstant r0;
        long $l0, $l1;

        r2 := @this: org.joda.time.base.AbstractPartial;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r0);

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r0);

        $l1 = virtualinvoke $r1.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r2, $l0);

        $r3 = new org.joda.time.DateTime;

        specialinvoke $r3.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l1, $r1);

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.Chronology $r3, $r4;
        org.joda.time.ReadablePartial r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object r1;
        org.joda.time.DateTimeFieldType $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.base.AbstractPartial;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.ReadablePartial;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.joda.time.ReadablePartial) r1;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

        $i1 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        i5 = 0;

        $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

     label4:
        if i5 >= $i2 goto label7;

        $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>(i5);

        $i4 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int getValue(int)>(i5);

        if $i3 != $i4 goto label5;

        $r5 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i5);

        $r6 = interfaceinvoke r2.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i5);

        if $r5 == $r6 goto label6;

     label5:
        return 0;

     label6:
        i5 = i5 + 1;

        goto label4;

     label7:
        $r3 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>();

        $r4 = interfaceinvoke r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $z1 = staticinvoke <org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4);

        return $z1;
    }

    public int hashCode()
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.Chronology $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        i6 = 157;

        i7 = 0;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

     label1:
        if i7 >= $i0 goto label2;

        $i2 = 23 * i6;

        $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>(i7);

        i8 = $i2 + $i3;

        $i4 = 23 * i8;

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i7);

        $i5 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        i6 = $i4 + $i5;

        i7 = i7 + 1;

        goto label1;

     label2:
        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>();

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        i9 = i6 + $i1;

        return i9;
    }

    public int compareTo(java.lang.Object)
    {
        org.joda.time.base.AbstractPartial r0;
        java.lang.ClassCastException $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i11;
        org.joda.time.DateTimeFieldType $r3, $r4;
        org.joda.time.ReadablePartial r2;
        java.lang.Object r1;

        r0 := @this: org.joda.time.base.AbstractPartial;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 0;

     label1:
        r2 = (org.joda.time.ReadablePartial) r1;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

        $i1 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int size()>();

        if $i0 == $i1 goto label2;

        $r7 = new java.lang.ClassCastException;

        specialinvoke $r7.<java.lang.ClassCastException: void <init>(java.lang.String)>("ReadablePartial objects must have matching field types");

        throw $r7;

     label2:
        i8 = 0;

        $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

     label3:
        if i8 >= $i2 goto label5;

        $r3 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i8);

        $r4 = interfaceinvoke r2.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i8);

        if $r3 == $r4 goto label4;

        $r8 = new java.lang.ClassCastException;

        specialinvoke $r8.<java.lang.ClassCastException: void <init>(java.lang.String)>("ReadablePartial objects must have matching field types");

        throw $r8;

     label4:
        i8 = i8 + 1;

        goto label3;

     label5:
        i9 = 0;

        $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

     label6:
        if i9 >= $i3 goto label9;

        $i4 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>(i9);

        $i5 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int getValue(int)>(i9);

        if $i4 <= $i5 goto label7;

        return 1;

     label7:
        $i6 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>(i9);

        $i7 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int getValue(int)>(i9);

        if $i6 >= $i7 goto label8;

        $i11 = (int) -1;

        return $i11;

     label8:
        i9 = i9 + 1;

        goto label6;

     label9:
        return 0;
    }

    public boolean isAfter(org.joda.time.ReadablePartial)
    {
        org.joda.time.base.AbstractPartial r1;
        org.joda.time.ReadablePartial r0;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r1 := @this: org.joda.time.base.AbstractPartial;

        r0 := @parameter0: org.joda.time.ReadablePartial;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Partial cannot be null");

        throw $r2;

     label1:
        $i0 = virtualinvoke r1.<org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>(r0);

        if $i0 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isBefore(org.joda.time.ReadablePartial)
    {
        org.joda.time.base.AbstractPartial r1;
        org.joda.time.ReadablePartial r0;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r1 := @this: org.joda.time.base.AbstractPartial;

        r0 := @parameter0: org.joda.time.ReadablePartial;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Partial cannot be null");

        throw $r2;

     label1:
        $i0 = virtualinvoke r1.<org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>(r0);

        if $i0 >= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isEqual(org.joda.time.ReadablePartial)
    {
        org.joda.time.base.AbstractPartial r1;
        org.joda.time.ReadablePartial r0;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r1 := @this: org.joda.time.base.AbstractPartial;

        r0 := @parameter0: org.joda.time.ReadablePartial;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Partial cannot be null");

        throw $r2;

     label1:
        $i0 = virtualinvoke r1.<org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>(r0);

        if $i0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.lang.String toString(org.joda.time.format.DateTimeFormatter)
    {
        org.joda.time.base.AbstractPartial r1;
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.String $r2, $r3;

        r1 := @this: org.joda.time.base.AbstractPartial;

        r0 := @parameter0: org.joda.time.format.DateTimeFormatter;

        if r0 != null goto label1;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        return $r3;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r1);

        return $r2;
    }
}
