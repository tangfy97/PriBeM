public class org.eclipse.jdt.internal.compiler.ast.Initializer extends org.eclipse.jdt.internal.compiler.ast.FieldDeclaration
{
    public org.eclipse.jdt.internal.compiler.ast.Block block;
    public int lastVisibleFieldID;
    public int bodyStart;
    public int bodyEnd;

    public void <init>(org.eclipse.jdt.internal.compiler.ast.Block, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Block r1;
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.ast.Initializer r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Initializer;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Block;

        i0 := @parameter1: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block> = r1;

        r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: int modifiers> = i0;

        if r1 == null goto label1;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceStart>;

        r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: int sourceStart> = $i1;

        r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceStart> = $i1;

     label1:
        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.MethodScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.ast.Block $r1, $r5;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r4;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r2, $r6;
        org.eclipse.jdt.internal.compiler.ast.Initializer r0;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Initializer;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.MethodScope;

        r4 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r2 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        if $r1 == null goto label1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r3, r4, r2);

        return $r6;

     label1:
        return r2;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r3;
        org.eclipse.jdt.internal.compiler.ast.Block $r2, $r4;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r1;
        int $i0, $i1, i2, $i3;
        org.eclipse.jdt.internal.compiler.ast.Initializer r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Initializer;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bits>;

        $i1 = $i0 & -2147483648;

        if $i1 != 0 goto label1;

        return;

     label1:
        i2 = r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        if $r2 == null goto label2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Block: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r3, r1);

     label2:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: int sourceStart>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i2, $i3);

        return;
    }

    public int getKind()
    {
        org.eclipse.jdt.internal.compiler.ast.Initializer r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Initializer;

        return 2;
    }

    public boolean isStatic()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.ast.Initializer r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Initializer;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: int modifiers>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void parseStatements(org.eclipse.jdt.internal.compiler.parser.Parser, org.eclipse.jdt.internal.compiler.ast.TypeDeclaration, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r2;
        org.eclipse.jdt.internal.compiler.ast.Initializer r1;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration r3;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.Initializer;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.parser.Parser;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void parse(org.eclipse.jdt.internal.compiler.ast.Initializer,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)>(r1, r2, r3);

        return;
    }

    public java.lang.StringBuffer printStatement(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Block $r1, $r4, $r6, $r8;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r5, $r9;
        java.lang.StringBuffer r2, $r3, $r7;
        int $i0, i1, $i2;
        org.eclipse.jdt.internal.compiler.ast.Initializer r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Initializer;

        i1 := @parameter0: int;

        r2 := @parameter1: java.lang.StringBuffer;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: int modifiers>;

        if $i0 == 0 goto label3;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.Initializer: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i1, r2);

        $i2 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: int modifiers>;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.Initializer: java.lang.StringBuffer printModifiers(int,java.lang.StringBuffer)>($i2, r2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations>;

        if $r5 == null goto label1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations>;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.Initializer: java.lang.StringBuffer printAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[],java.lang.StringBuffer)>($r9, r2);

     label1:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{\n");

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        if $r6 == null goto label2;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.Block: java.lang.StringBuffer printBody(int,java.lang.StringBuffer)>(i1, r2);

     label2:
        $r7 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.Initializer: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i1, r2);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        return r2;

     label3:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        if $r1 == null goto label4;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Block: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>(i1, r2);

        goto label5;

     label4:
        $r3 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.Initializer: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i1, r2);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{}");

     label5:
        return r2;
    }

    public void resolve(org.eclipse.jdt.internal.compiler.lookup.MethodScope)
    {
        java.lang.Throwable $r6;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r4;
        org.eclipse.jdt.internal.compiler.ast.Block $r3, $r7;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r5;
        org.eclipse.jdt.internal.compiler.lookup.FieldBinding r1;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope r0;
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.ast.Initializer r2;
        boolean $z0, $z1, $z2;

        r2 := @this: org.eclipse.jdt.internal.compiler.ast.Initializer;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.MethodScope;

        r1 = r0.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.lookup.FieldBinding initializedField>;

        i0 = r0.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int lastVisibleFieldID>;

     label1:
        r0.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.lookup.FieldBinding initializedField> = null;

        $i1 = r2.<org.eclipse.jdt.internal.compiler.ast.Initializer: int lastVisibleFieldID>;

        r0.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int lastVisibleFieldID> = $i1;

        $z0 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.ast.Initializer: boolean isStatic()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding enclosingSourceType()>();

        $z1 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean isNestedType()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean isStatic()>();

        if $z2 != 0 goto label2;

        $r5 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void innerTypesCannotDeclareStaticInitializers(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.ast.Initializer)>($r4, r2);

     label2:
        $r7 = r2.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        if $r7 == null goto label4;

        $r3 = r2.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Block: void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0);

        goto label4;

     label3:
        $r6 := @caughtexception;

        r0.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.lookup.FieldBinding initializedField> = r1;

        r0.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int lastVisibleFieldID> = i0;

        throw $r6;

     label4:
        r0.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.lookup.FieldBinding initializedField> = r1;

        r0.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int lastVisibleFieldID> = i0;

        return;

        catch java.lang.Throwable from label1 to label3 with label3;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.MethodScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.ast.Block $r3, $r4;
        org.eclipse.jdt.internal.compiler.ast.Initializer r1;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope r2;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.Initializer;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.MethodScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.Initializer,org.eclipse.jdt.internal.compiler.lookup.MethodScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        if $r3 == null goto label1;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Block: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.Initializer,org.eclipse.jdt.internal.compiler.lookup.MethodScope)>(r1, r2);

        return;
    }
}
