public class org.springframework.web.filter.DelegatingFilterProxy extends org.springframework.web.filter.GenericFilterBean
{
    private java.lang.String contextAttribute;
    private java.lang.String targetBeanName;
    private boolean targetFilterLifecycle;
    private javax.servlet.Filter delegate;
    private final java.lang.Object delegateMonitor;

    public void <init>()
    {
        org.springframework.web.filter.DelegatingFilterProxy r0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.web.filter.DelegatingFilterProxy;

        specialinvoke r0.<org.springframework.web.filter.GenericFilterBean: void <init>()>();

        r0.<org.springframework.web.filter.DelegatingFilterProxy: boolean targetFilterLifecycle> = 0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<org.springframework.web.filter.DelegatingFilterProxy: java.lang.Object delegateMonitor> = $r1;

        return;
    }

    public void setContextAttribute(java.lang.String)
    {
        org.springframework.web.filter.DelegatingFilterProxy r0;
        java.lang.String r1;

        r0 := @this: org.springframework.web.filter.DelegatingFilterProxy;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.web.filter.DelegatingFilterProxy: java.lang.String contextAttribute> = r1;

        return;
    }

    public java.lang.String getContextAttribute()
    {
        org.springframework.web.filter.DelegatingFilterProxy r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.web.filter.DelegatingFilterProxy;

        $r1 = r0.<org.springframework.web.filter.DelegatingFilterProxy: java.lang.String contextAttribute>;

        return $r1;
    }

    public void setTargetBeanName(java.lang.String)
    {
        org.springframework.web.filter.DelegatingFilterProxy r0;
        java.lang.String r1;

        r0 := @this: org.springframework.web.filter.DelegatingFilterProxy;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.web.filter.DelegatingFilterProxy: java.lang.String targetBeanName> = r1;

        return;
    }

    protected java.lang.String getTargetBeanName()
    {
        org.springframework.web.filter.DelegatingFilterProxy r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.web.filter.DelegatingFilterProxy;

        $r1 = r0.<org.springframework.web.filter.DelegatingFilterProxy: java.lang.String targetBeanName>;

        return $r1;
    }

    public void setTargetFilterLifecycle(boolean)
    {
        org.springframework.web.filter.DelegatingFilterProxy r0;
        boolean z0;

        r0 := @this: org.springframework.web.filter.DelegatingFilterProxy;

        z0 := @parameter0: boolean;

        r0.<org.springframework.web.filter.DelegatingFilterProxy: boolean targetFilterLifecycle> = z0;

        return;
    }

    protected boolean isTargetFilterLifecycle()
    {
        org.springframework.web.filter.DelegatingFilterProxy r0;
        boolean $z0;

        r0 := @this: org.springframework.web.filter.DelegatingFilterProxy;

        $z0 = r0.<org.springframework.web.filter.DelegatingFilterProxy: boolean targetFilterLifecycle>;

        return $z0;
    }

    protected void initFilterBean() throws javax.servlet.ServletException
    {
        java.lang.Throwable $r6;
        org.springframework.web.filter.DelegatingFilterProxy r0;
        org.springframework.web.context.WebApplicationContext $r3;
        java.lang.Object $r2;
        javax.servlet.Filter $r4;
        java.lang.String $r1, $r5;

        r0 := @this: org.springframework.web.filter.DelegatingFilterProxy;

        $r1 = r0.<org.springframework.web.filter.DelegatingFilterProxy: java.lang.String targetBeanName>;

        if $r1 != null goto label1;

        $r5 = virtualinvoke r0.<org.springframework.web.filter.DelegatingFilterProxy: java.lang.String getFilterName()>();

        r0.<org.springframework.web.filter.DelegatingFilterProxy: java.lang.String targetBeanName> = $r5;

     label1:
        $r2 = r0.<org.springframework.web.filter.DelegatingFilterProxy: java.lang.Object delegateMonitor>;

        entermonitor $r2;

     label2:
        $r3 = virtualinvoke r0.<org.springframework.web.filter.DelegatingFilterProxy: org.springframework.web.context.WebApplicationContext findWebApplicationContext()>();

        if $r3 == null goto label3;

        $r4 = virtualinvoke r0.<org.springframework.web.filter.DelegatingFilterProxy: javax.servlet.Filter initDelegate(org.springframework.web.context.WebApplicationContext)>($r3);

        r0.<org.springframework.web.filter.DelegatingFilterProxy: javax.servlet.Filter delegate> = $r4;

     label3:
        exitmonitor $r2;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r6;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws javax.servlet.ServletException, java.io.IOException
    {
        java.lang.Throwable $r10;
        java.lang.IllegalStateException $r9;
        javax.servlet.ServletRequest r3;
        javax.servlet.FilterChain r5;
        org.springframework.web.context.WebApplicationContext $r6;
        org.springframework.web.filter.DelegatingFilterProxy r0;
        javax.servlet.ServletResponse r4;
        java.lang.Object $r1;
        javax.servlet.Filter $r2, $r7, $r8;

        r0 := @this: org.springframework.web.filter.DelegatingFilterProxy;

        r3 := @parameter0: javax.servlet.ServletRequest;

        r4 := @parameter1: javax.servlet.ServletResponse;

        r5 := @parameter2: javax.servlet.FilterChain;

        $r1 = r0.<org.springframework.web.filter.DelegatingFilterProxy: java.lang.Object delegateMonitor>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.web.filter.DelegatingFilterProxy: javax.servlet.Filter delegate>;

        if $r2 != null goto label3;

        $r6 = virtualinvoke r0.<org.springframework.web.filter.DelegatingFilterProxy: org.springframework.web.context.WebApplicationContext findWebApplicationContext()>();

        if $r6 != null goto label2;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No WebApplicationContext found: no ContextLoaderListener registered?");

        throw $r9;

     label2:
        $r7 = virtualinvoke r0.<org.springframework.web.filter.DelegatingFilterProxy: javax.servlet.Filter initDelegate(org.springframework.web.context.WebApplicationContext)>($r6);

        r0.<org.springframework.web.filter.DelegatingFilterProxy: javax.servlet.Filter delegate> = $r7;

     label3:
        $r8 = r0.<org.springframework.web.filter.DelegatingFilterProxy: javax.servlet.Filter delegate>;

        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r10;

     label7:
        virtualinvoke r0.<org.springframework.web.filter.DelegatingFilterProxy: void invokeDelegate(javax.servlet.Filter,javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>($r8, r3, r4, r5);

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void destroy()
    {
        java.lang.Throwable $r2;
        org.springframework.web.filter.DelegatingFilterProxy r0;
        java.lang.Object $r1;
        javax.servlet.Filter r3;

        r0 := @this: org.springframework.web.filter.DelegatingFilterProxy;

        $r1 = r0.<org.springframework.web.filter.DelegatingFilterProxy: java.lang.Object delegateMonitor>;

        entermonitor $r1;

     label1:
        r3 = r0.<org.springframework.web.filter.DelegatingFilterProxy: javax.servlet.Filter delegate>;

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

     label5:
        if r3 == null goto label6;

        virtualinvoke r0.<org.springframework.web.filter.DelegatingFilterProxy: void destroyDelegate(javax.servlet.Filter)>(r3);

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected org.springframework.web.context.WebApplicationContext findWebApplicationContext()
    {
        org.springframework.web.filter.DelegatingFilterProxy r0;
        org.springframework.web.context.WebApplicationContext $r3, $r5;
        javax.servlet.ServletContext $r2, $r4;
        java.lang.String $r1;

        r0 := @this: org.springframework.web.filter.DelegatingFilterProxy;

        $r1 = virtualinvoke r0.<org.springframework.web.filter.DelegatingFilterProxy: java.lang.String getContextAttribute()>();

        if $r1 == null goto label1;

        $r4 = virtualinvoke r0.<org.springframework.web.filter.DelegatingFilterProxy: javax.servlet.ServletContext getServletContext()>();

        $r5 = staticinvoke <org.springframework.web.context.support.WebApplicationContextUtils: org.springframework.web.context.WebApplicationContext getWebApplicationContext(javax.servlet.ServletContext,java.lang.String)>($r4, $r1);

        return $r5;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.web.filter.DelegatingFilterProxy: javax.servlet.ServletContext getServletContext()>();

        $r3 = staticinvoke <org.springframework.web.context.support.WebApplicationContextUtils: org.springframework.web.context.WebApplicationContext getWebApplicationContext(javax.servlet.ServletContext)>($r2);

        return $r3;
    }

    protected javax.servlet.Filter initDelegate(org.springframework.web.context.WebApplicationContext) throws javax.servlet.ServletException
    {
        org.springframework.web.filter.DelegatingFilterProxy r1;
        javax.servlet.FilterConfig $r5;
        org.springframework.web.context.WebApplicationContext r0;
        java.lang.Object $r3;
        javax.servlet.Filter r4;
        java.lang.String $r2;
        boolean $z0;

        r1 := @this: org.springframework.web.filter.DelegatingFilterProxy;

        r0 := @parameter0: org.springframework.web.context.WebApplicationContext;

        $r2 = virtualinvoke r1.<org.springframework.web.filter.DelegatingFilterProxy: java.lang.String getTargetBeanName()>();

        $r3 = interfaceinvoke r0.<org.springframework.web.context.WebApplicationContext: java.lang.Object getBean(java.lang.String,java.lang.Class)>($r2, class "Ljavax/servlet/Filter;");

        r4 = (javax.servlet.Filter) $r3;

        $z0 = virtualinvoke r1.<org.springframework.web.filter.DelegatingFilterProxy: boolean isTargetFilterLifecycle()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r1.<org.springframework.web.filter.DelegatingFilterProxy: javax.servlet.FilterConfig getFilterConfig()>();

        interfaceinvoke r4.<javax.servlet.Filter: void init(javax.servlet.FilterConfig)>($r5);

     label1:
        return r4;
    }

    protected void invokeDelegate(javax.servlet.Filter, javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws javax.servlet.ServletException, java.io.IOException
    {
        org.springframework.web.filter.DelegatingFilterProxy r4;
        javax.servlet.ServletRequest r1;
        javax.servlet.FilterChain r3;
        javax.servlet.ServletResponse r2;
        javax.servlet.Filter r0;

        r4 := @this: org.springframework.web.filter.DelegatingFilterProxy;

        r0 := @parameter0: javax.servlet.Filter;

        r1 := @parameter1: javax.servlet.ServletRequest;

        r2 := @parameter2: javax.servlet.ServletResponse;

        r3 := @parameter3: javax.servlet.FilterChain;

        interfaceinvoke r0.<javax.servlet.Filter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>(r1, r2, r3);

        return;
    }

    protected void destroyDelegate(javax.servlet.Filter)
    {
        org.springframework.web.filter.DelegatingFilterProxy r0;
        javax.servlet.Filter r1;
        boolean $z0;

        r0 := @this: org.springframework.web.filter.DelegatingFilterProxy;

        r1 := @parameter0: javax.servlet.Filter;

        $z0 = virtualinvoke r0.<org.springframework.web.filter.DelegatingFilterProxy: boolean isTargetFilterLifecycle()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<javax.servlet.Filter: void destroy()>();

     label1:
        return;
    }
}
