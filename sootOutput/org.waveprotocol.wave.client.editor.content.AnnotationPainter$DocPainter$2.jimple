class org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2 extends java.lang.Object implements org.waveprotocol.wave.model.util.ReadableStringSet$Proc
{
    final int val$start;
    final org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter this$0;

    void <init>(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter, int)
    {
        int i0;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r1;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        i0 := @parameter1: int;

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter this$0> = r1;

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2: int val$start> = i0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void apply(java.lang.String)
    {
        org.waveprotocol.wave.model.document.MutableAnnotationSet$Local $r2;
        java.util.HashMap $r8, $r13, $r15;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2 r0;
        java.util.Map $r7, $r11;
        int $i0;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter $r1, $r5, $r6, $r10, $r12, $r14;
        java.lang.String r3;
        java.lang.Object $r4, $r9;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.MutableAnnotationSet$Local access$300(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)>($r1);

        $i0 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2: int val$start>;

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.MutableAnnotationSet$Local: java.lang.Object getAnnotation(int,java.lang.String)>($i0, r3);

        $r5 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter this$0>;

        $r7 = $r5.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.Map boundaryBefore>;

        $r6 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter this$0>;

        $r8 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.HashMap access$400(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)>($r6);

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r9);

        $r10 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter this$0>;

        $r11 = $r10.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.Map boundaryAfter>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r4);

        if $r4 != null goto label1;

        $r14 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter this$0>;

        $r15 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.HashMap access$400(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)>($r14);

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r3);

        goto label2;

     label1:
        $r12 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter this$0>;

        $r13 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.HashMap access$400(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)>($r12);

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r4);

     label2:
        return;
    }
}
