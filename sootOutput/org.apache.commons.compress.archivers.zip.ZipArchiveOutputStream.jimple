public class org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream extends org.apache.commons.compress.archivers.ArchiveOutputStream
{
    static final int BUFFER_SIZE;
    protected boolean finished;
    private static final int DEFLATER_BLOCK_SIZE;
    public static final int DEFLATED;
    public static final int DEFAULT_COMPRESSION;
    public static final int STORED;
    static final java.lang.String DEFAULT_ENCODING;
    public static final int EFS_FLAG;
    private static final byte[] EMPTY;
    private org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry;
    private java.lang.String comment;
    private int level;
    private boolean hasCompressionLevelChanged;
    private int method;
    private final java.util.List entries;
    private final java.util.zip.CRC32 crc;
    private long written;
    private long cdOffset;
    private long cdLength;
    private static final byte[] ZERO;
    private static final byte[] LZERO;
    private final java.util.Map offsets;
    private java.lang.String encoding;
    private org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding;
    protected final java.util.zip.Deflater def;
    private final byte[] buf;
    private final java.io.RandomAccessFile raf;
    private final java.io.OutputStream out;
    private boolean useUTF8Flag;
    private boolean fallbackToUTF8;
    private org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy createUnicodeExtraFields;
    private boolean hasUsedZip64;
    private org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode;
    static final byte[] LFH_SIG;
    static final byte[] DD_SIG;
    static final byte[] CFH_SIG;
    static final byte[] EOCD_SIG;
    static final byte[] ZIP64_EOCD_SIG;
    static final byte[] ZIP64_EOCD_LOC_SIG;
    private static final byte[] ONE;

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream r9;
        byte[] $r6;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy $r7;
        java.util.HashMap $r12;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r4;
        java.util.zip.Deflater $r13;
        org.apache.commons.compress.archivers.zip.Zip64Mode $r8;
        int $i0, $i2;
        java.util.zip.CRC32 $r11;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        java.util.LinkedList $r10;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r9 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean finished> = 0;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.lang.String comment> = "";

        $i2 = (int) -1;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int level> = $i2;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasCompressionLevelChanged> = 0;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int method> = 8;

        $r10 = new java.util.LinkedList;

        specialinvoke $r10.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.List entries> = $r10;

        $r11 = new java.util.zip.CRC32;

        specialinvoke $r11.<java.util.zip.CRC32: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.CRC32 crc> = $r11;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = 0L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long cdOffset> = 0L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long cdLength> = 0L;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.Map offsets> = $r12;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.lang.String encoding> = "UTF8";

        $r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding getZipEncoding(java.lang.String)>("UTF8");

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding> = $r4;

        $r13 = new java.util.zip.Deflater;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int level>;

        specialinvoke $r13.<java.util.zip.Deflater: void <init>(int,boolean)>($i0, 1);

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.Deflater def> = $r13;

        $r6 = newarray (byte)[512];

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] buf> = $r6;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean useUTF8Flag> = 1;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean fallbackToUTF8> = 0;

        $r7 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy NEVER>;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy createUnicodeExtraFields> = $r7;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasUsedZip64> = 0;

        $r8 = <org.apache.commons.compress.archivers.zip.Zip64Mode: org.apache.commons.compress.archivers.zip.Zip64Mode AsNeeded>;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode> = $r8;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.OutputStream out> = r9;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf> = null;

        return;
    }

    public void <init>(java.io.File) throws java.io.IOException
    {
        byte[] $r6;
        java.io.RandomAccessFile r14, $r19;
        java.util.HashMap $r17;
        int $i0, $i2;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        java.util.LinkedList $r15;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy $r7;
        java.io.FileOutputStream r13, $r20;
        java.io.IOException $r11;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r4;
        java.util.zip.Deflater $r18;
        java.io.File r10;
        org.apache.commons.compress.archivers.zip.Zip64Mode $r8;
        java.util.zip.CRC32 $r16;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r10 := @parameter0: java.io.File;

        specialinvoke r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean finished> = 0;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.lang.String comment> = "";

        $i2 = (int) -1;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int level> = $i2;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasCompressionLevelChanged> = 0;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int method> = 8;

        $r15 = new java.util.LinkedList;

        specialinvoke $r15.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.List entries> = $r15;

        $r16 = new java.util.zip.CRC32;

        specialinvoke $r16.<java.util.zip.CRC32: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.CRC32 crc> = $r16;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = 0L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long cdOffset> = 0L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long cdLength> = 0L;

        $r17 = new java.util.HashMap;

        specialinvoke $r17.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.Map offsets> = $r17;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.lang.String encoding> = "UTF8";

        $r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding getZipEncoding(java.lang.String)>("UTF8");

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding> = $r4;

        $r18 = new java.util.zip.Deflater;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int level>;

        specialinvoke $r18.<java.util.zip.Deflater: void <init>(int,boolean)>($i0, 1);

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.Deflater def> = $r18;

        $r6 = newarray (byte)[512];

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] buf> = $r6;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean useUTF8Flag> = 1;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean fallbackToUTF8> = 0;

        $r7 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy NEVER>;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy createUnicodeExtraFields> = $r7;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasUsedZip64> = 0;

        $r8 = <org.apache.commons.compress.archivers.zip.Zip64Mode: org.apache.commons.compress.archivers.zip.Zip64Mode AsNeeded>;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode> = $r8;

        r13 = null;

        r14 = null;

     label1:
        $r19 = new java.io.RandomAccessFile;

        specialinvoke $r19.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r10, "rw");

        r14 = $r19;

        virtualinvoke $r19.<java.io.RandomAccessFile: void setLength(long)>(0L);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        staticinvoke <org.apache.commons.compress.utils.IOUtils: void closeQuietly(java.io.Closeable)>(r14);

        r14 = null;

        $r20 = new java.io.FileOutputStream;

        specialinvoke $r20.<java.io.FileOutputStream: void <init>(java.io.File)>(r10);

        r13 = $r20;

     label4:
        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.OutputStream out> = r13;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf> = r14;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean isSeekable()
    {
        java.io.RandomAccessFile $r1;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setEncoding(java.lang.String)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        java.lang.String r1;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.lang.String encoding> = r1;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding getZipEncoding(java.lang.String)>(r1);

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding> = $r2;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean useUTF8Flag>;

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: boolean isUTF8(java.lang.String)>(r1);

        if $z1 != 0 goto label1;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean useUTF8Flag> = 0;

     label1:
        return;
    }

    public java.lang.String getEncoding()
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.lang.String encoding>;

        return $r1;
    }

    public void setUseLanguageEncodingFlag(boolean)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        java.lang.String $r1;
        boolean z0, $z1, $z2;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.lang.String encoding>;

        $z1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: boolean isUTF8(java.lang.String)>($r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean useUTF8Flag> = $z2;

        return;
    }

    public void setCreateUnicodeExtraFields(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy createUnicodeExtraFields> = r1;

        return;
    }

    public void setFallbackToUTF8(boolean)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean fallbackToUTF8> = z0;

        return;
    }

    public void setUseZip64(org.apache.commons.compress.archivers.zip.Zip64Mode)
    {
        org.apache.commons.compress.archivers.zip.Zip64Mode r1;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.Zip64Mode;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode> = r1;

        return;
    }

    public void finish() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r8;
        long $l0, $l1, $l2, $l3;
        java.util.Map $r4;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry $r1;
        java.io.IOException $r9, $r10;
        java.util.zip.Deflater $r6;
        java.util.List $r2, $r5;
        java.lang.Object $r7;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label1;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("This archive has already been finished");

        throw $r10;

     label1:
        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        if $r1 == null goto label2;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("This archive contains unclosed entries.");

        throw $r9;

     label2:
        $l0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long cdOffset> = $l0;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.List entries>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) $r7;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r8);

        goto label3;

     label4:
        $l2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long cdOffset>;

        $l3 = $l2 - $l1;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long cdLength> = $l3;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeZip64CentralDirectory()>();

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeCentralDirectoryEnd()>();

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.Map offsets>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.List entries>;

        interfaceinvoke $r5.<java.util.List: void clear()>();

        $r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.Deflater def>;

        virtualinvoke $r6.<java.util.zip.Deflater: void end()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean finished> = 1;

        return;
    }

    public void closeArchiveEntry() throws java.io.IOException
    {
        java.io.RandomAccessFile $r9;
        byte[] $r12;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r4, $r11;
        long $l0, $l1, $l2, $l3;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        boolean $z0, $z1, $z2;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry $r1, $r2, $r3, $r6, $r10;
        java.io.IOException $r13, $r14;
        org.apache.commons.compress.archivers.zip.Zip64Mode $r5;
        java.util.zip.CRC32 $r7, $r8;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label1;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Stream has already been finished");

        throw $r14;

     label1:
        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        if $r1 != null goto label2;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("No current entry to close");

        throw $r13;

     label2:
        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $z1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: boolean access$000(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r2);

        if $z1 != 0 goto label3;

        $r12 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] EMPTY>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void write(byte[],int,int)>($r12, 0, 0);

     label3:
        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void flushDeflater()>();

        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r3);

        $r5 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.Zip64Mode getEffectiveZip64Mode(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r4);

        $l0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $l1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long access$200(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r6);

        $l3 = $l0 - $l1;

        $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.CRC32 crc>;

        $l2 = virtualinvoke $r7.<java.util.zip.CRC32: long getValue()>();

        $r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r8.<java.util.zip.CRC32: void reset()>();

        $z2 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean handleSizesAndCrc(long,long,org.apache.commons.compress.archivers.zip.Zip64Mode)>($l3, $l2, $r5);

        $r9 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        if $r9 == null goto label4;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void rewriteSizesAndCrc(boolean)>($z2);

     label4:
        $r10 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r11 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r10);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r11);

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry> = null;

        return;
    }

    private void flushDeflater() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r2;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry $r1;
        int $i0;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        java.util.zip.Deflater $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r1);

        $i0 = virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        if $i0 != 8 goto label2;

        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.Deflater def>;

        virtualinvoke $r3.<java.util.zip.Deflater: void finish()>();

     label1:
        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.Deflater def>;

        $z0 = virtualinvoke $r4.<java.util.zip.Deflater: boolean finished()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void deflate()>();

        goto label1;

     label2:
        return;
    }

    private boolean handleSizesAndCrc(long, long, org.apache.commons.compress.archivers.zip.Zip64Mode) throws java.util.zip.ZipException
    {
        java.io.RandomAccessFile $r3;
        byte $b4, $b6, $b8, $b10;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry $r1, $r4, $r6, $r8, $r13, $r16, $r18, $r20, $r22, $r27, $r32, $r41, $r46, $r54, $r56, $r57, $r59;
        org.apache.commons.compress.archivers.zip.Zip64Mode r10, $r11, $r62;
        java.lang.StringBuilder $r26, $r30, $r31, $r34, $r35, $r36, $r40, $r44, $r45, $r49, $r50, $r52, $r63, $r65;
        long l1, l2, $l3, $l5, $l7, $l9, $l11, $l12, $l13;
        java.lang.String $r15, $r29, $r37, $r43, $r48, $r51, $r53;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r2, $r5, $r7, $r9, $r14, $r17, $r19, $r21, $r23, $r28, $r33, $r42, $r47, $r55, $r58, $r60;
        boolean z0, $z2, $z3;
        java.util.zip.ZipException $r64, $r66;
        java.util.zip.Deflater $r61;
        org.apache.commons.compress.archivers.zip.Zip64RequiredException $r67;
        int $i0, $i14, $i15;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        l1 := @parameter0: long;

        l2 := @parameter1: long;

        r10 := @parameter2: org.apache.commons.compress.archivers.zip.Zip64Mode;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r1);

        $i0 = virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        if $i0 != 8 goto label1;

        $r54 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r55 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r54);

        $r56 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $l13 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long access$300(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r56);

        virtualinvoke $r55.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setSize(long)>($l13);

        $r57 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r58 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r57);

        virtualinvoke $r58.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setCompressedSize(long)>(l1);

        $r59 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r60 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r59);

        virtualinvoke $r60.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setCrc(long)>(l2);

        $r61 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.Deflater def>;

        virtualinvoke $r61.<java.util.zip.Deflater: void reset()>();

        goto label4;

     label1:
        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        if $r3 != null goto label3;

        $r20 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r21 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r20);

        $l7 = virtualinvoke $r21.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCrc()>();

        $b8 = $l7 cmp l2;

        if $b8 == 0 goto label2;

        $r64 = new java.util.zip.ZipException;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad CRC checksum for entry ");

        $r41 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r42 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r41);

        $r43 = virtualinvoke $r42.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: java.lang.String getName()>();

        $r44 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r46 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r47 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r46);

        $l12 = virtualinvoke $r47.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCrc()>();

        $r48 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l12);

        $r49 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead of ");

        $r51 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l2);

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r64.<java.util.zip.ZipException: void <init>(java.lang.String)>($r53);

        throw $r64;

     label2:
        $r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r23 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r22);

        $l9 = virtualinvoke $r23.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $b10 = $l9 cmp l1;

        if $b10 == 0 goto label4;

        $r66 = new java.util.zip.ZipException;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad size for entry ");

        $r27 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r28 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r27);

        $r29 = virtualinvoke $r28.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: java.lang.String getName()>();

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r32 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r33 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r32);

        $l11 = virtualinvoke $r33.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead of ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r66.<java.util.zip.ZipException: void <init>(java.lang.String)>($r37);

        throw $r66;

     label3:
        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r5 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r4);

        virtualinvoke $r5.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setSize(long)>(l1);

        $r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r6);

        virtualinvoke $r7.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setCompressedSize(long)>(l1);

        $r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r9 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r8);

        virtualinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setCrc(long)>(l2);

     label4:
        $r62 = <org.apache.commons.compress.archivers.zip.Zip64Mode: org.apache.commons.compress.archivers.zip.Zip64Mode Always>;

        if r10 == $r62 goto label5;

        $r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r17 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r16);

        $l3 = virtualinvoke $r17.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $b4 = $l3 cmp 4294967295L;

        $i14 = (int) $b4;

        if $i14 >= 0 goto label5;

        $r18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r19 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r18);

        $l5 = virtualinvoke $r19.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        $b6 = $l5 cmp 4294967295L;

        $i15 = (int) $b6;

        if $i15 < 0 goto label6;

     label5:
        $z3 = 1;

        $z2 = 1;

        goto label7;

     label6:
        $z3 = 0;

        $z2 = 0;

     label7:
        z0 = $z2;

        if $z3 == 0 goto label8;

        $r11 = <org.apache.commons.compress.archivers.zip.Zip64Mode: org.apache.commons.compress.archivers.zip.Zip64Mode Never>;

        if r10 != $r11 goto label8;

        $r67 = new org.apache.commons.compress.archivers.zip.Zip64RequiredException;

        $r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r14 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r13);

        $r15 = staticinvoke <org.apache.commons.compress.archivers.zip.Zip64RequiredException: java.lang.String getEntryTooBigMessage(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r14);

        specialinvoke $r67.<org.apache.commons.compress.archivers.zip.Zip64RequiredException: void <init>(java.lang.String)>($r15);

        throw $r67;

     label8:
        return z0;
    }

    private void rewriteSizesAndCrc(boolean) throws java.io.IOException
    {
        java.io.RandomAccessFile $r1, $r3, $r18, $r29, $r41;
        byte[] $r6, $r11, $r14, $r24, $r27, $r30, $r38, $r40;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r5, $r8, $r10, $r13, $r16, $r20, $r23, $r26, $r32, $r35;
        java.nio.ByteBuffer $r21;
        boolean $z0, $z1, z2, $z3;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry $r2, $r4, $r7, $r9, $r12, $r15, $r17, $r19, $r22, $r25, $r28, $r31, $r34, $r36;
        org.apache.commons.compress.archivers.zip.ZipLong $r37, $r39;
        org.apache.commons.compress.archivers.zip.ZipShort $r33;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12, $l13, $l14, $l15;
        int $i8;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        z2 := @parameter0: boolean;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        $l0 = virtualinvoke $r1.<java.io.RandomAccessFile: long getFilePointer()>();

        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $l1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long access$400(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r2);

        virtualinvoke $r3.<java.io.RandomAccessFile: void seek(long)>($l1);

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r5 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r4);

        $l2 = virtualinvoke $r5.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCrc()>();

        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l2);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r6);

        $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r8 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r7);

        $z0 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r8);

        if $z0 == 0 goto label1;

        if z2 != 0 goto label2;

     label1:
        $r9 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r10 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r9);

        $l3 = virtualinvoke $r10.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        $r11 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l3);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r11);

        $r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r13 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r12);

        $l4 = virtualinvoke $r13.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $r14 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l4);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r14);

        goto label3;

     label2:
        $r37 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong ZIP64_MAGIC>;

        $r38 = virtualinvoke $r37.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r38);

        $r39 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong ZIP64_MAGIC>;

        $r40 = virtualinvoke $r39.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r40);

     label3:
        $r15 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r16 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r15);

        $z1 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r16);

        if $z1 == 0 goto label4;

        $r18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        $r17 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $l5 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long access$400(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r17);

        $l6 = $l5 + 12L;

        $l7 = $l6 + 4L;

        $r19 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r20 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r19);

        $r21 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.nio.ByteBuffer getName(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r20);

        $i8 = virtualinvoke $r21.<java.nio.ByteBuffer: int limit()>();

        $l9 = (long) $i8;

        $l10 = $l7 + $l9;

        $l11 = $l10 + 4L;

        virtualinvoke $r18.<java.io.RandomAccessFile: void seek(long)>($l11);

        $r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r23 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r22);

        $l12 = virtualinvoke $r23.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $r24 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte[] getBytes(long)>($l12);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r24);

        $r25 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r26 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r25);

        $l13 = virtualinvoke $r26.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        $r27 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte[] getBytes(long)>($l13);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r27);

        if z2 != 0 goto label4;

        $r29 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        $r28 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $l14 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long access$400(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r28);

        $l15 = $l14 - 10L;

        virtualinvoke $r29.<java.io.RandomAccessFile: void seek(long)>($l15);

        $r30 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>(10);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r30);

        $r31 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r32 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r31);

        $r33 = <org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID>;

        virtualinvoke $r32.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void removeExtraField(org.apache.commons.compress.archivers.zip.ZipShort)>($r33);

        $r34 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r35 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r34);

        virtualinvoke $r35.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setExtra()>();

        $r36 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $z3 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: boolean access$500(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r36);

        if $z3 == 0 goto label4;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasUsedZip64> = 0;

     label4:
        $r41 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        virtualinvoke $r41.<java.io.RandomAccessFile: void seek(long)>($l0);

        return;
    }

    public void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r4, $r7, $r9, $r11, $r14, $r17, $r20, $r22, $r25, $r29, $r31, $r33;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField $r18;
        byte $b3;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r23, r27;
        boolean $z0, $z1, $z2;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry $r1, $r2, $r5, $r8, $r10, $r13, $r16, $r19, $r21, $r24, $r28, $r30, $r32;
        java.util.zip.Deflater $r15;
        org.apache.commons.compress.archivers.zip.Zip64Mode $r12;
        java.util.List $r6;
        org.apache.commons.compress.archivers.ArchiveEntry r3;
        long $l2, $l4;
        int $i0, $i1, $i5;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        java.io.IOException $r26;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r3 := @parameter0: org.apache.commons.compress.archivers.ArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label1;

        $r26 = new java.io.IOException;

        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.String)>("Stream has already been finished");

        throw $r26;

     label1:
        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        if $r1 == null goto label2;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void closeArchiveEntry()>();

     label2:
        $r2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry;

        $r4 = (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) r3;

        specialinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: void <init>(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1)>($r4, null);

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry> = $r2;

        $r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.List entries>;

        $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r5);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r9 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r8);

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void setDefaults(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r9);

        $r10 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r11 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r10);

        $r12 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.Zip64Mode getEffectiveZip64Mode(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r11);

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void validateSizeInformation(org.apache.commons.compress.archivers.zip.Zip64Mode)>($r12);

        $r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r14 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r13);

        $z1 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean shouldAddZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.Zip64Mode)>($r14, $r12);

        if $z1 == 0 goto label4;

        $r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r17 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r16);

        $r18 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField getZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r17);

        r27 = <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: org.apache.commons.compress.archivers.zip.ZipEightByteInteger ZERO>;

        $r19 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r20 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r19);

        $i1 = virtualinvoke $r20.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        if $i1 != 0 goto label3;

        $r21 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r22 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r21);

        $l2 = virtualinvoke $r22.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $b3 = $l2 cmp -1L;

        if $b3 == 0 goto label3;

        $r23 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        $r24 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r25 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r24);

        $l4 = virtualinvoke $r25.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        specialinvoke $r23.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(long)>($l4);

        r27 = $r23;

     label3:
        virtualinvoke $r18.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: void setSize(org.apache.commons.compress.archivers.zip.ZipEightByteInteger)>(r27);

        virtualinvoke $r18.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: void setCompressedSize(org.apache.commons.compress.archivers.zip.ZipEightByteInteger)>(r27);

        $r28 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r29 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r28);

        virtualinvoke $r29.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setExtra()>();

     label4:
        $r30 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r31 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r30);

        $i5 = virtualinvoke $r31.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        if $i5 != 8 goto label5;

        $z2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasCompressionLevelChanged>;

        if $z2 == 0 goto label5;

        $r15 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.Deflater def>;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int level>;

        virtualinvoke $r15.<java.util.zip.Deflater: void setLevel(int)>($i0);

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasCompressionLevelChanged> = 0;

     label5:
        $r32 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r33 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r32);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r33);

        return;
    }

    private void setDefaults(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r0;
        long $l1, $l3;
        byte $b2;
        int $i0, $i4, $i6;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r1;

        r1 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        $i0 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        $i4 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int method>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setMethod(int)>($i4);

     label1:
        $l1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getTime()>();

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label2;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setTime(long)>($l3);

     label2:
        return;
    }

    private void validateSizeInformation(org.apache.commons.compress.archivers.zip.Zip64Mode) throws java.util.zip.ZipException
    {
        java.io.RandomAccessFile $r11;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r2, $r7, $r10, $r13, $r15, $r17, $r19, $r23;
        byte $b2, $b4, $b6, $b9;
        java.util.zip.ZipException $r24, $r25;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry $r1, $r6, $r9, $r12, $r14, $r16, $r18, $r22;
        org.apache.commons.compress.archivers.zip.Zip64Mode r3, $r4;
        org.apache.commons.compress.archivers.zip.Zip64RequiredException $r26;
        long $l1, $l3, $l5, $l7, $l8;
        int $i0, $i10, $i11;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        java.lang.String $r8;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r3 := @parameter0: org.apache.commons.compress.archivers.zip.Zip64Mode;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r1);

        $i0 = virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        if $i0 != 0 goto label3;

        $r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        if $r11 != null goto label3;

        $r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r13 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r12);

        $l3 = virtualinvoke $r13.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $b4 = $l3 cmp -1L;

        if $b4 != 0 goto label1;

        $r24 = new java.util.zip.ZipException;

        specialinvoke $r24.<java.util.zip.ZipException: void <init>(java.lang.String)>("uncompressed size is required for STORED method when not writing to a file");

        throw $r24;

     label1:
        $r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r15 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r14);

        $l5 = virtualinvoke $r15.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCrc()>();

        $b6 = $l5 cmp -1L;

        if $b6 != 0 goto label2;

        $r25 = new java.util.zip.ZipException;

        specialinvoke $r25.<java.util.zip.ZipException: void <init>(java.lang.String)>("crc checksum is required for STORED method when not writing to a file");

        throw $r25;

     label2:
        $r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r17 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r16);

        $r18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r19 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r18);

        $l7 = virtualinvoke $r19.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        virtualinvoke $r17.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setCompressedSize(long)>($l7);

     label3:
        $r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r23 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r22);

        $l8 = virtualinvoke $r23.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $b9 = $l8 cmp 4294967295L;

        $i10 = (int) $b9;

        if $i10 >= 0 goto label4;

        $r9 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r10 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r9);

        $l1 = virtualinvoke $r10.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        $b2 = $l1 cmp 4294967295L;

        $i11 = (int) $b2;

        if $i11 < 0 goto label5;

     label4:
        $r4 = <org.apache.commons.compress.archivers.zip.Zip64Mode: org.apache.commons.compress.archivers.zip.Zip64Mode Never>;

        if r3 != $r4 goto label5;

        $r26 = new org.apache.commons.compress.archivers.zip.Zip64RequiredException;

        $r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r6);

        $r8 = staticinvoke <org.apache.commons.compress.archivers.zip.Zip64RequiredException: java.lang.String getEntryTooBigMessage(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r7);

        specialinvoke $r26.<org.apache.commons.compress.archivers.zip.Zip64RequiredException: void <init>(java.lang.String)>($r8);

        throw $r26;

     label5:
        return;
    }

    private boolean shouldAddZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.Zip64Mode)
    {
        java.io.RandomAccessFile $r4;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r2;
        long $l0, $l2, $l4;
        org.apache.commons.compress.archivers.zip.Zip64Mode r0, $r1, $r5;
        byte $b1, $b3, $b5;
        int $i6, $i7;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r3;
        boolean $z0;

        r3 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r2 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        r0 := @parameter1: org.apache.commons.compress.archivers.zip.Zip64Mode;

        $r1 = <org.apache.commons.compress.archivers.zip.Zip64Mode: org.apache.commons.compress.archivers.zip.Zip64Mode Always>;

        if r0 == $r1 goto label1;

        $l0 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $b1 = $l0 cmp 4294967295L;

        $i6 = (int) $b1;

        if $i6 >= 0 goto label1;

        $l2 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        $b3 = $l2 cmp 4294967295L;

        $i7 = (int) $b3;

        if $i7 >= 0 goto label1;

        $l4 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $b5 = $l4 cmp -1L;

        if $b5 != 0 goto label2;

        $r4 = r3.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        if $r4 == null goto label2;

        $r5 = <org.apache.commons.compress.archivers.zip.Zip64Mode: org.apache.commons.compress.archivers.zip.Zip64Mode Never>;

        if r0 == $r5 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void setComment(java.lang.String)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.lang.String comment> = r1;

        return;
    }

    public void setLevel(int)
    {
        java.lang.IllegalArgumentException $r7;
        int i0, $i1, $i3;
        java.lang.StringBuilder $r2, $r3, $r6;
        java.lang.String $r4;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r5;
        boolean $z0;

        r5 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        i0 := @parameter0: int;

        $i3 = (int) -1;

        if i0 < $i3 goto label1;

        if i0 <= 9 goto label2;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid compression level: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r7;

     label2:
        $i1 = r5.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int level>;

        if $i1 == i0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        r5.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasCompressionLevelChanged> = $z0;

        r5.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int level> = i0;

        return;
    }

    public void setMethod(int)
    {
        int i0;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int method> = i0;

        return;
    }

    public boolean canWriteEntryData(org.apache.commons.compress.archivers.ArchiveEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r1;
        org.apache.commons.compress.archivers.ArchiveEntry r0;
        org.apache.commons.compress.archivers.zip.ZipMethod $r2, $r3;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r4;
        boolean $z0, $z1, $z2;

        r4 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r0 := @parameter0: org.apache.commons.compress.archivers.ArchiveEntry;

        $z0 = r0 instanceof org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        if $z0 == 0 goto label3;

        r1 = (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) r0;

        $i0 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        $r2 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod IMPLODING>;

        $i1 = virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>();

        if $i0 == $i1 goto label1;

        $i2 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        $r3 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod UNSHRINKING>;

        $i3 = virtualinvoke $r3.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>();

        if $i2 == $i3 goto label1;

        $z1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: boolean canHandleEntryData(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r7;
        java.lang.IllegalStateException $r9;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r3, $r6;
        long $l3, $l4, $l5;
        int $i0, i1, i2;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry $r1, $r2, $r4, $r5;
        java.util.zip.CRC32 $r8;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r7 := @parameter0: byte[];

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        if $r1 != null goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No current entry");

        throw $r9;

     label1:
        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r3 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r2);

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: void checkRequestedFeatures(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r3);

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: boolean access$002(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry,boolean)>($r4, 1);

        $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r5);

        $i0 = virtualinvoke $r6.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        if $i0 != 8 goto label2;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeDeflated(byte[],int,int)>(r7, i1, i2);

        goto label3;

     label2:
        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[],int,int)>(r7, i1, i2);

        $l4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l3 = (long) i2;

        $l5 = $l4 + $l3;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l5;

     label3:
        $r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r8.<java.util.zip.CRC32: void update(byte[],int,int)>(r7, i1, i2);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void count(int)>(i2);

        return;
    }

    private void writeDeflated(byte[], int, int) throws java.io.IOException
    {
        byte[] r3;
        long $l1;
        int i0, i2, i3, $i4, $i5, $i6, $i7, i8, i9;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        boolean $z0;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry $r2;
        java.util.zip.Deflater $r1, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r3 := @parameter0: byte[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 <= 0 goto label4;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.Deflater def>;

        $z0 = virtualinvoke $r1.<java.util.zip.Deflater: boolean finished()>();

        if $z0 != 0 goto label4;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $l1 = (long) i0;

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long access$314(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry,long)>($r2, $l1);

        if i0 > 8192 goto label1;

        $r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.Deflater def>;

        virtualinvoke $r6.<java.util.zip.Deflater: void setInput(byte[],int,int)>(r3, i3, i0);

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void deflateUntilInputIsNeeded()>();

        goto label4;

     label1:
        i2 = i0 / 8192;

        i8 = 0;

     label2:
        if i8 >= i2 goto label3;

        $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.Deflater def>;

        $i6 = i8 * 8192;

        $i7 = i3 + $i6;

        virtualinvoke $r5.<java.util.zip.Deflater: void setInput(byte[],int,int)>(r3, $i7, 8192);

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void deflateUntilInputIsNeeded()>();

        i8 = i8 + 1;

        goto label2;

     label3:
        i9 = i2 * 8192;

        if i9 >= i0 goto label4;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.Deflater def>;

        $i5 = i3 + i9;

        $i4 = i0 - i9;

        virtualinvoke $r4.<java.util.zip.Deflater: void setInput(byte[],int,int)>(r3, $i5, $i4);

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void deflateUntilInputIsNeeded()>();

     label4:
        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean finished>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void finish()>();

     label1:
        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void destroy()>();

        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.OutputStream $r1, $r2;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.OutputStream out>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void flush()>();

     label1:
        return;
    }

    protected final void deflate() throws java.io.IOException
    {
        byte[] $r1, $r2, $r4;
        long $l2, $l3, $l4;
        java.util.zip.Deflater $r3;
        int $i0, $i1;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.Deflater def>;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] buf>;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] buf>;

        $i0 = lengthof $r1;

        $i1 = virtualinvoke $r3.<java.util.zip.Deflater: int deflate(byte[],int,int)>($r2, 0, $i0);

        if $i1 <= 0 goto label1;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] buf>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[],int,int)>($r4, 0, $i1);

        $l3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l2 = (long) $i1;

        $l4 = $l3 + $l2;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l4;

     label1:
        return;
    }

    protected void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException
    {
        byte[] $r9, $r10, $r13, $r14, $r16, $r18, $r20, $r22, $r23, r25, $r26, $r27, $r28, $r29;
        java.io.RandomAccessFile $r19;
        java.lang.Long $r8;
        java.util.Map $r7;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry $r11, $r24, $r30;
        org.apache.commons.compress.archivers.zip.ZipLong $r15, $r17, $r21;
        long $l0, $l1, $l2, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l17, $l18, $l20, $l21, $l26, $l28, $l29, $l30, $l32, $l33, $l34;
        java.lang.String $r3;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r1, $r12;
        java.nio.ByteBuffer $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r2;
        int $i3, $i16, $i19, $i22, $i23, $i24, $i25, $i27, $i31;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy $r5, $r6;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding>;

        $r3 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: java.lang.String getName()>();

        $z0 = interfaceinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipEncoding: boolean canEncode(java.lang.String)>($r3);

        $r4 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.nio.ByteBuffer getName(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r1);

        $r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy createUnicodeExtraFields>;

        $r5 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy NEVER>;

        if $r6 == $r5 goto label1;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void addUnicodeExtraFields(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,boolean,java.nio.ByteBuffer)>(r1, $z0, $r4);

     label1:
        $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.Map offsets>;

        $l0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8);

        $r9 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] LFH_SIG>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r9);

        $l1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l2 = $l1 + 4L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l2;

        $i3 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        if $z0 != 0 goto label2;

        $z3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean fallbackToUTF8>;

        if $z3 == 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        $z5 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r1);

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeVersionNeededToExtractAndGeneralPurposeBits(int,boolean,boolean)>($i3, $z4, $z5);

        $l6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l7 = $l6 + 4L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l7;

        $r22 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($i3);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r22);

        $l8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l9 = $l8 + 2L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l9;

        $l10 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getTime()>();

        $r23 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: byte[] toDosTime(long)>($l10);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r23);

        $l11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l12 = $l11 + 4L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l12;

        $r24 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $l13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long access$402(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry,long)>($r24, $l13);

        if $i3 == 8 goto label4;

        $r19 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        if $r19 == null goto label6;

     label4:
        $r10 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] LZERO>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r10);

        $r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $r12 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)>($r11);

        $z1 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r12);

        if $z1 == 0 goto label5;

        $r15 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong ZIP64_MAGIC>;

        $r16 = virtualinvoke $r15.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r16);

        $r17 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong ZIP64_MAGIC>;

        $r18 = virtualinvoke $r17.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r18);

        goto label8;

     label5:
        $r13 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] LZERO>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r13);

        $r14 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] LZERO>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r14);

        goto label8;

     label6:
        $l4 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCrc()>();

        $r20 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l4);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r20);

        $r21 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong ZIP64_MAGIC>;

        r25 = virtualinvoke $r21.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        $z2 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r1);

        if $z2 != 0 goto label7;

        $l5 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        r25 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l5);

     label7:
        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>(r25);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>(r25);

     label8:
        $l14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l15 = $l14 + 12L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l15;

        $i16 = virtualinvoke $r4.<java.nio.ByteBuffer: int limit()>();

        $r26 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($i16);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r26);

        $l17 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l18 = $l17 + 2L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l18;

        $r27 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: byte[] getLocalFileDataExtra()>();

        $i19 = lengthof $r27;

        $r28 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($i19);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r28);

        $l20 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l21 = $l20 + 2L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l21;

        $r29 = virtualinvoke $r4.<java.nio.ByteBuffer: byte[] array()>();

        $i22 = virtualinvoke $r4.<java.nio.ByteBuffer: int arrayOffset()>();

        $i23 = virtualinvoke $r4.<java.nio.ByteBuffer: int limit()>();

        $i24 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>();

        $i25 = $i23 - $i24;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[],int,int)>($r29, $i22, $i25);

        $l26 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $i27 = virtualinvoke $r4.<java.nio.ByteBuffer: int limit()>();

        $l28 = (long) $i27;

        $l29 = $l26 + $l28;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l29;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r27);

        $l30 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $i31 = lengthof $r27;

        $l32 = (long) $i31;

        $l33 = $l30 + $l32;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l33;

        $r30 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $l34 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long access$202(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry,long)>($r30, $l34);

        return;
    }

    private void addUnicodeExtraFields(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, boolean, java.nio.ByteBuffer) throws java.io.IOException
    {
        byte[] $r7, $r15;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r3;
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField $r4;
        java.nio.ByteBuffer r6, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        java.lang.String $r5, $r8, $r16;
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField $r14;
        boolean $z0, $z1, z2;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy $r1, $r2, $r10, $r11;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r9, $r12;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r3 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        z2 := @parameter1: boolean;

        r6 := @parameter2: java.nio.ByteBuffer;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy createUnicodeExtraFields>;

        $r1 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy ALWAYS>;

        if $r2 == $r1 goto label1;

        if z2 != 0 goto label2;

     label1:
        $r4 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField;

        $r5 = virtualinvoke r3.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: java.lang.String getName()>();

        $r7 = virtualinvoke r6.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke r6.<java.nio.ByteBuffer: int arrayOffset()>();

        $i1 = virtualinvoke r6.<java.nio.ByteBuffer: int limit()>();

        $i2 = virtualinvoke r6.<java.nio.ByteBuffer: int position()>();

        $i3 = $i1 - $i2;

        specialinvoke $r4.<org.apache.commons.compress.archivers.zip.UnicodePathExtraField: void <init>(java.lang.String,byte[],int,int)>($r5, $r7, $i0, $i3);

        virtualinvoke r3.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void addExtraField(org.apache.commons.compress.archivers.zip.ZipExtraField)>($r4);

     label2:
        $r16 = virtualinvoke r3.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: java.lang.String getComment()>();

        if $r16 == null goto label4;

        $r8 = "";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z0 != 0 goto label4;

        $r9 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding>;

        $z1 = interfaceinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipEncoding: boolean canEncode(java.lang.String)>($r16);

        $r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy createUnicodeExtraFields>;

        $r10 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy ALWAYS>;

        if $r11 == $r10 goto label3;

        if $z1 != 0 goto label4;

     label3:
        $r12 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding getEntryEncoding(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r3);

        $r13 = interfaceinvoke $r12.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.nio.ByteBuffer encode(java.lang.String)>($r16);

        $r14 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;

        $r15 = virtualinvoke $r13.<java.nio.ByteBuffer: byte[] array()>();

        $i4 = virtualinvoke $r13.<java.nio.ByteBuffer: int arrayOffset()>();

        $i5 = virtualinvoke $r13.<java.nio.ByteBuffer: int limit()>();

        $i6 = virtualinvoke $r13.<java.nio.ByteBuffer: int position()>();

        $i7 = $i5 - $i6;

        specialinvoke $r14.<org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField: void <init>(java.lang.String,byte[],int,int)>($r16, $r15, $i4, $i7);

        virtualinvoke r3.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void addExtraField(org.apache.commons.compress.archivers.zip.ZipExtraField)>($r14);

     label4:
        return;
    }

    protected void writeDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException
    {
        java.io.RandomAccessFile $r2;
        byte[] $r3, $r4, $r5, $r6, $r7, $r8;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r0;
        long $l1, $l2, $l3, $l6, $l7, $l8, $l9, $l10;
        byte b11;
        int $i0, $i4, $i5;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r1;
        boolean $z0;

        r1 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        $i0 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        if $i0 != 8 goto label1;

        $r2 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        if $r2 == null goto label2;

     label1:
        return;

     label2:
        $r3 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] DD_SIG>;

        virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r3);

        $l1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCrc()>();

        $r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l1);

        virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r4);

        b11 = 4;

        $z0 = specialinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r0);

        if $z0 != 0 goto label3;

        $l9 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        $r7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l9);

        virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r7);

        $l10 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $r8 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l10);

        virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r8);

        goto label4;

     label3:
        b11 = 8;

        $l2 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        $r5 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte[] getBytes(long)>($l2);

        virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r5);

        $l3 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte[] getBytes(long)>($l3);

        virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r6);

     label4:
        $l7 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $i4 = 2 * b11;

        $i5 = 8 + $i4;

        $l6 = (long) $i5;

        $l8 = $l7 + $l6;

        r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l8;

        return;
    }

    protected void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException
    {
        byte[] $r1, $r6, $r10, $r12, $r14, $r15, $r16, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r32, $r33, $r34;
        byte $b52, $b56, $b58, $b59, $b60, $b70;
        java.lang.Long $r5;
        java.util.Map $r3;
        org.apache.commons.compress.archivers.zip.ZipLong $r9, $r11;
        org.apache.commons.compress.archivers.zip.Zip64Mode $r29, $r30;
        long $l0, $l1, $l2, $l6, $l7, $l9, $l10, $l12, $l13, $l15, $l16, $l18, $l19, $l20, $l21, $l23, $l24, $l25, $l26, $l27, $l28, $l29, $l30, $l35, $l37, $l38, $l40, $l41, $l42, $l47, $l49, $l50, $l51, $l53, $l54, $l55, $l57, $l61, $l62, $l63, $l64, $l65, $l66, $l67, $l68, $l69;
        java.lang.String $r8, $r17, r35;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r2;
        java.nio.ByteBuffer $r13, $r19;
        boolean $z0, z1, $z2, $z3, $z4, $z6, $z7, $z8;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r7, $r18;
        org.apache.commons.compress.archivers.zip.Zip64RequiredException $r36;
        int $i3, $i4, $i5, $i8, $i11, $i14, $i17, $i22, $i31, $i32, $i33, $i34, $i36, $i39, $i43, $i44, $i45, $i46, $i48, $i71, $i72, $i73, $i74, $i75;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r2 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        $r1 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] CFH_SIG>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r1);

        $l0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l1 = $l0 + 4L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l1;

        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.Map offsets>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (java.lang.Long) $r4;

        $l2 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        $z0 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r2);

        if $z0 != 0 goto label01;

        $l55 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        $b56 = $l55 cmp 4294967295L;

        $i71 = (int) $b56;

        if $i71 >= 0 goto label01;

        $l57 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $b58 = $l57 cmp 4294967295L;

        $i72 = (int) $b58;

        if $i72 >= 0 goto label01;

        $b59 = $l2 cmp 4294967295L;

        $i73 = (int) $b59;

        if $i73 < 0 goto label02;

     label01:
        $z8 = 1;

        $z7 = 1;

        goto label03;

     label02:
        $z8 = 0;

        $z7 = 0;

     label03:
        z1 = $z7;

        if $z8 == 0 goto label04;

        $r30 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode>;

        $r29 = <org.apache.commons.compress.archivers.zip.Zip64Mode: org.apache.commons.compress.archivers.zip.Zip64Mode Never>;

        if $r30 != $r29 goto label04;

        $r36 = new org.apache.commons.compress.archivers.zip.Zip64RequiredException;

        specialinvoke $r36.<org.apache.commons.compress.archivers.zip.Zip64RequiredException: void <init>(java.lang.String)>("archive\'s size exceeds the limit of 4GByte.");

        throw $r36;

     label04:
        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void handleZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,long,boolean)>(r2, $l2, z1);

        $i3 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getPlatform()>();

        $i4 = $i3 << 8;

        $z2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasUsedZip64>;

        if $z2 != 0 goto label05;

        $b60 = 20;

        goto label06;

     label05:
        $b60 = 45;

     label06:
        $i5 = $i4 | $b60;

        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($i5);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r6);

        $l6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l7 = $l6 + 2L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l7;

        $i8 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding>;

        $r8 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: java.lang.String getName()>();

        $z3 = interfaceinvoke $r7.<org.apache.commons.compress.archivers.zip.ZipEncoding: boolean canEncode(java.lang.String)>($r8);

        if $z3 != 0 goto label07;

        $z4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean fallbackToUTF8>;

        if $z4 == 0 goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeVersionNeededToExtractAndGeneralPurposeBits(int,boolean,boolean)>($i8, $z6, z1);

        $l61 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l62 = $l61 + 4L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l62;

        $r32 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($i8);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r32);

        $l63 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l64 = $l63 + 2L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l64;

        $l65 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getTime()>();

        $r33 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: byte[] toDosTime(long)>($l65);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r33);

        $l66 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l67 = $l66 + 4L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l67;

        $l68 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCrc()>();

        $r34 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l68);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r34);

        $l69 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        $b70 = $l69 cmp 4294967295L;

        $i74 = (int) $b70;

        if $i74 >= 0 goto label09;

        $l51 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $b52 = $l51 cmp 4294967295L;

        $i75 = (int) $b52;

        if $i75 < 0 goto label10;

     label09:
        $r9 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong ZIP64_MAGIC>;

        $r10 = virtualinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r10);

        $r11 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong ZIP64_MAGIC>;

        $r12 = virtualinvoke $r11.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r12);

        goto label11;

     label10:
        $l53 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        $r27 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l53);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r27);

        $l54 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $r28 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l54);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r28);

     label11:
        $l9 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l10 = $l9 + 12L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l10;

        $r13 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.nio.ByteBuffer getName(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r2);

        $i11 = virtualinvoke $r13.<java.nio.ByteBuffer: int limit()>();

        $r14 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($i11);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r14);

        $l12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l13 = $l12 + 2L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l13;

        $r15 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: byte[] getCentralDirectoryExtra()>();

        $i14 = lengthof $r15;

        $r16 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($i14);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r16);

        $l15 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l16 = $l15 + 2L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l16;

        $r17 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: java.lang.String getComment()>();

        r35 = $r17;

        if $r17 != null goto label12;

        r35 = "";

     label12:
        $r18 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding getEntryEncoding(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r2);

        $r19 = interfaceinvoke $r18.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.nio.ByteBuffer encode(java.lang.String)>(r35);

        $i17 = virtualinvoke $r19.<java.nio.ByteBuffer: int limit()>();

        $r20 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($i17);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r20);

        $l18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l19 = $l18 + 2L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l19;

        $r21 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] ZERO>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r21);

        $l20 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l21 = $l20 + 2L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l21;

        $i22 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getInternalAttributes()>();

        $r22 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($i22);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r22);

        $l23 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l24 = $l23 + 2L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l24;

        $l25 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getExternalAttributes()>();

        $r23 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l25);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r23);

        $l26 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l27 = $l26 + 4L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l27;

        $l28 = staticinvoke <java.lang.Math: long min(long,long)>($l2, 4294967295L);

        $r24 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l28);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r24);

        $l29 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $l30 = $l29 + 4L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l30;

        $r25 = virtualinvoke $r13.<java.nio.ByteBuffer: byte[] array()>();

        $i31 = virtualinvoke $r13.<java.nio.ByteBuffer: int arrayOffset()>();

        $i32 = virtualinvoke $r13.<java.nio.ByteBuffer: int limit()>();

        $i33 = virtualinvoke $r13.<java.nio.ByteBuffer: int position()>();

        $i34 = $i32 - $i33;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[],int,int)>($r25, $i31, $i34);

        $l35 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $i36 = virtualinvoke $r13.<java.nio.ByteBuffer: int limit()>();

        $l37 = (long) $i36;

        $l38 = $l35 + $l37;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l38;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r15);

        $l41 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $i39 = lengthof $r15;

        $l40 = (long) $i39;

        $l42 = $l41 + $l40;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l42;

        $r26 = virtualinvoke $r19.<java.nio.ByteBuffer: byte[] array()>();

        $i43 = virtualinvoke $r19.<java.nio.ByteBuffer: int arrayOffset()>();

        $i44 = virtualinvoke $r19.<java.nio.ByteBuffer: int limit()>();

        $i45 = virtualinvoke $r19.<java.nio.ByteBuffer: int position()>();

        $i46 = $i44 - $i45;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[],int,int)>($r26, $i43, $i46);

        $l47 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $i48 = virtualinvoke $r19.<java.nio.ByteBuffer: int limit()>();

        $l49 = (long) $i48;

        $l50 = $l47 + $l49;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written> = $l50;

        return;
    }

    private void handleZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, long, boolean)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r1;
        long $l0, $l2, $l3, l4, $l6;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField $r2;
        byte $b1, $b5, $b7;
        int $i8, $i9, $i10;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r6, $r7, $r8;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        l4 := @parameter1: long;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label5;

        $r2 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField getZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r1);

        $l0 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        $b1 = $l0 cmp 4294967295L;

        $i8 = (int) $b1;

        if $i8 >= 0 goto label1;

        $l6 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $b7 = $l6 cmp 4294967295L;

        $i9 = (int) $b7;

        if $i9 < 0 goto label2;

     label1:
        $r6 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        $l2 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        specialinvoke $r6.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(long)>($l2);

        virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: void setCompressedSize(org.apache.commons.compress.archivers.zip.ZipEightByteInteger)>($r6);

        $r7 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        $l3 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        specialinvoke $r7.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(long)>($l3);

        virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: void setSize(org.apache.commons.compress.archivers.zip.ZipEightByteInteger)>($r7);

        goto label3;

     label2:
        virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: void setCompressedSize(org.apache.commons.compress.archivers.zip.ZipEightByteInteger)>(null);

        virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: void setSize(org.apache.commons.compress.archivers.zip.ZipEightByteInteger)>(null);

     label3:
        $b5 = l4 cmp 4294967295L;

        $i10 = (int) $b5;

        if $i10 < 0 goto label4;

        $r8 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        specialinvoke $r8.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(long)>(l4);

        virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: void setRelativeHeaderOffset(org.apache.commons.compress.archivers.zip.ZipEightByteInteger)>($r8);

     label4:
        virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setExtra()>();

     label5:
        return;
    }

    protected void writeCentralDirectoryEnd() throws java.io.IOException
    {
        byte[] $r1, $r2, $r3, $r5, $r6, $r7, $r11, $r12;
        java.nio.ByteBuffer $r10;
        byte $b2;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r9;
        org.apache.commons.compress.archivers.zip.Zip64Mode $r13, $r14, $r16, $r17;
        java.util.List $r4;
        org.apache.commons.compress.archivers.zip.Zip64RequiredException $r19, $r20;
        long $l1, $l4, $l5, $l6, $l7;
        int $i0, $i3, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i17;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        java.lang.String $r8;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        $r1 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] EOCD_SIG>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r1);

        $r2 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] ZERO>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r2);

        $r3 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] ZERO>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r3);

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.List entries>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i14 = (int) 65535;

        if $i0 <= $i14 goto label1;

        $r17 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode>;

        $r16 = <org.apache.commons.compress.archivers.zip.Zip64Mode: org.apache.commons.compress.archivers.zip.Zip64Mode Never>;

        if $r17 != $r16 goto label1;

        $r19 = new org.apache.commons.compress.archivers.zip.Zip64RequiredException;

        specialinvoke $r19.<org.apache.commons.compress.archivers.zip.Zip64RequiredException: void <init>(java.lang.String)>("archive contains more than 65535 entries.");

        throw $r19;

     label1:
        $l1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long cdOffset>;

        $b2 = $l1 cmp 4294967295L;

        $i15 = (int) $b2;

        if $i15 <= 0 goto label2;

        $r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode>;

        $r13 = <org.apache.commons.compress.archivers.zip.Zip64Mode: org.apache.commons.compress.archivers.zip.Zip64Mode Never>;

        if $r14 != $r13 goto label2;

        $r20 = new org.apache.commons.compress.archivers.zip.Zip64RequiredException;

        specialinvoke $r20.<org.apache.commons.compress.archivers.zip.Zip64RequiredException: void <init>(java.lang.String)>("archive\'s size exceeds the limit of 4GByte.");

        throw $r20;

     label2:
        $i17 = (int) 65535;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i17);

        $r5 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($i3);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r5);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r5);

        $l4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long cdLength>;

        $l5 = staticinvoke <java.lang.Math: long min(long,long)>($l4, 4294967295L);

        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l5);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r6);

        $l6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long cdOffset>;

        $l7 = staticinvoke <java.lang.Math: long min(long,long)>($l6, 4294967295L);

        $r7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l7);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r7);

        $r9 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding>;

        $r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.lang.String comment>;

        $r10 = interfaceinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.nio.ByteBuffer encode(java.lang.String)>($r8);

        $i8 = virtualinvoke $r10.<java.nio.ByteBuffer: int limit()>();

        $r11 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($i8);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r11);

        $r12 = virtualinvoke $r10.<java.nio.ByteBuffer: byte[] array()>();

        $i9 = virtualinvoke $r10.<java.nio.ByteBuffer: int arrayOffset()>();

        $i10 = virtualinvoke $r10.<java.nio.ByteBuffer: int limit()>();

        $i11 = virtualinvoke $r10.<java.nio.ByteBuffer: int position()>();

        $i12 = $i10 - $i11;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[],int,int)>($r12, $i9, $i12);

        return;
    }

    protected void writeZip64CentralDirectory() throws java.io.IOException
    {
        byte[] $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        byte $b6, $b8;
        boolean $z0, $z1;
        org.apache.commons.compress.archivers.zip.Zip64Mode $r1, $r2;
        java.util.List $r9, $r17;
        long l0, $l2, $l3, $l4, $l5, $l7;
        int $i1, $i9, $i10, $i11, $i13;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode>;

        $r1 = <org.apache.commons.compress.archivers.zip.Zip64Mode: org.apache.commons.compress.archivers.zip.Zip64Mode Never>;

        if $r2 != $r1 goto label1;

        return;

     label1:
        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasUsedZip64>;

        if $z0 != 0 goto label3;

        $l5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long cdOffset>;

        $b6 = $l5 cmp 4294967295L;

        $i10 = (int) $b6;

        if $i10 >= 0 goto label2;

        $l7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long cdLength>;

        $b8 = $l7 cmp 4294967295L;

        $i11 = (int) $b8;

        if $i11 >= 0 goto label2;

        $r17 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.List entries>;

        $i9 = interfaceinvoke $r17.<java.util.List: int size()>();

        $i13 = (int) 65535;

        if $i9 < $i13 goto label3;

     label2:
        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasUsedZip64> = 1;

     label3:
        $z1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasUsedZip64>;

        if $z1 != 0 goto label4;

        return;

     label4:
        l0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long written>;

        $r3 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] ZIP64_EOCD_SIG>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r3);

        $r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte[] getBytes(long)>(44L);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r4);

        $r5 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>(45);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r5);

        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>(45);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r6);

        $r7 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] LZERO>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r7);

        $r8 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] LZERO>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r8);

        $r9 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.List entries>;

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        $l2 = (long) $i1;

        $r10 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte[] getBytes(long)>($l2);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r10);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r10);

        $l3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long cdLength>;

        $r11 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte[] getBytes(long)>($l3);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r11);

        $l4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: long cdOffset>;

        $r12 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte[] getBytes(long)>($l4);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r12);

        $r13 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] ZIP64_EOCD_LOC_SIG>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r13);

        $r14 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] LZERO>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r14);

        $r15 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte[] getBytes(long)>(l0);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r15);

        $r16 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] ONE>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r16);

        return;
    }

    protected final void writeOut(byte[]) throws java.io.IOException
    {
        int $i0;
        byte[] r1;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    protected final void writeOut(byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream $r3;
        java.io.RandomAccessFile $r1, $r4;
        byte[] r2;
        int i0, i1;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        virtualinvoke $r4.<java.io.RandomAccessFile: void write(byte[],int,int)>(r2, i0, i1);

        goto label2;

     label1:
        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, i0, i1);

     label2:
        return;
    }

    private void deflateUntilInputIsNeeded() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        java.util.zip.Deflater $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

     label1:
        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.util.zip.Deflater def>;

        $z0 = virtualinvoke $r1.<java.util.zip.Deflater: boolean needsInput()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void deflate()>();

        goto label1;

     label2:
        return;
    }

    private void writeVersionNeededToExtractAndGeneralPurposeBits(int, boolean, boolean) throws java.io.IOException
    {
        byte[] $r2, $r3;
        java.io.RandomAccessFile $r4;
        byte b1;
        int i0;
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit $r0;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r1;
        boolean $z0, z1, z2, $z3;

        r1 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        i0 := @parameter0: int;

        z2 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        b1 = 10;

        $r0 = new org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        specialinvoke $r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: void <init>()>();

        $z0 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean useUTF8Flag>;

        if $z0 != 0 goto label1;

        if z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        virtualinvoke $r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: void useUTF8ForNames(boolean)>($z3);

        if i0 != 8 goto label4;

        $r4 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        if $r4 != null goto label4;

        b1 = 20;

        virtualinvoke $r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: void useDataDescriptor(boolean)>(1);

     label4:
        if z1 == 0 goto label5;

        b1 = 45;

     label5:
        $r2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>(b1);

        virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r2);

        $r3 = virtualinvoke $r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: byte[] encode()>();

        virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void writeOut(byte[])>($r3);

        return;
    }

    public org.apache.commons.compress.archivers.ArchiveEntry createArchiveEntry(java.io.File, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r1;
        java.io.IOException $r4;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        java.lang.String r3;
        java.io.File r2;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r2 := @parameter0: java.io.File;

        r3 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Stream has already been finished");

        throw $r4;

     label1:
        $r1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        specialinvoke $r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void <init>(java.io.File,java.lang.String)>(r2, r3);

        return $r1;
    }

    private org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField getZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r2;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry $r1, $r4;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField $r3, $r7, r8;
        org.apache.commons.compress.archivers.zip.ZipExtraField $r6;
        org.apache.commons.compress.archivers.zip.ZipShort $r5;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r2 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        if $r1 == null goto label3;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry>;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasUsedZip64>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: boolean access$502(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry,boolean)>($r4, $z1);

     label3:
        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean hasUsedZip64> = 1;

        $r5 = <org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID>;

        $r6 = virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: org.apache.commons.compress.archivers.zip.ZipExtraField getExtraField(org.apache.commons.compress.archivers.zip.ZipShort)>($r5);

        $r7 = (org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField) $r6;

        r8 = $r7;

        if $r7 != null goto label4;

        $r3 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;

        specialinvoke $r3.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: void <init>()>();

        r8 = $r3;

     label4:
        virtualinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void addAsFirstExtraField(org.apache.commons.compress.archivers.zip.ZipExtraField)>(r8);

        return r8;
    }

    private boolean hasZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipExtraField $r2;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r0;
        org.apache.commons.compress.archivers.zip.ZipShort $r1;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r3;
        boolean $z0;

        r3 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        $r1 = <org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID>;

        $r2 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: org.apache.commons.compress.archivers.zip.ZipExtraField getExtraField(org.apache.commons.compress.archivers.zip.ZipShort)>($r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private org.apache.commons.compress.archivers.zip.Zip64Mode getEffectiveZip64Mode(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)
    {
        java.io.RandomAccessFile $r3;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r4;
        long $l1;
        org.apache.commons.compress.archivers.zip.Zip64Mode $r1, $r2, $r5, $r6;
        byte $b2;
        int $i0;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r4 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode>;

        $r1 = <org.apache.commons.compress.archivers.zip.Zip64Mode: org.apache.commons.compress.archivers.zip.Zip64Mode AsNeeded>;

        if $r2 != $r1 goto label1;

        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        if $r3 != null goto label1;

        $i0 = virtualinvoke r4.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        if $i0 != 8 goto label1;

        $l1 = virtualinvoke r4.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $b2 = $l1 cmp -1L;

        if $b2 == 0 goto label2;

     label1:
        $r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode>;

        return $r6;

     label2:
        $r5 = <org.apache.commons.compress.archivers.zip.Zip64Mode: org.apache.commons.compress.archivers.zip.Zip64Mode Never>;

        return $r5;
    }

    private org.apache.commons.compress.archivers.zip.ZipEncoding getEntryEncoding(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r1;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r2, $r4;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding>;

        $r3 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: java.lang.String getName()>();

        $z0 = interfaceinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipEncoding: boolean canEncode(java.lang.String)>($r3);

        if $z0 != 0 goto label1;

        $z1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: boolean fallbackToUTF8>;

        if $z1 == 0 goto label1;

        $r4 = <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding UTF8_ZIP_ENCODING>;

        goto label2;

     label1:
        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding>;

     label2:
        return $r4;
    }

    private java.nio.ByteBuffer getName(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r1;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r2;
        java.lang.String $r3;
        java.nio.ByteBuffer $r4;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        $r2 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding getEntryEncoding(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r1);

        $r3 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: java.lang.String getName()>();

        $r4 = interfaceinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.nio.ByteBuffer encode(java.lang.String)>($r3);

        return $r4;
    }

    void destroy() throws java.io.IOException
    {
        java.io.OutputStream $r2, $r3;
        java.io.RandomAccessFile $r1, $r4;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.RandomAccessFile raf>;

        virtualinvoke $r4.<java.io.RandomAccessFile: void close()>();

     label1:
        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.OutputStream out>;

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

     label2:
        return;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r4, $r6, $r8, $r9, $r10, $r11, $r12;
        org.apache.commons.compress.archivers.zip.ZipLong $r3, $r5, $r7;

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int EFS_FLAG> = 2048;

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: java.lang.String DEFAULT_ENCODING> = "UTF8";

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int STORED> = 0;

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int DEFAULT_COMPRESSION> = -1;

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int DEFLATED> = 8;

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int DEFLATER_BLOCK_SIZE> = 8192;

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: int BUFFER_SIZE> = 512;

        $r0 = newarray (byte)[0];

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] EMPTY> = $r0;

        $r1 = newarray (byte)[2];

        $r1[0] = 0;

        $r1[1] = 0;

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] ZERO> = $r1;

        $r2 = newarray (byte)[4];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] LZERO> = $r2;

        $r3 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong LFH_SIG>;

        $r4 = virtualinvoke $r3.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] LFH_SIG> = $r4;

        $r5 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong DD_SIG>;

        $r6 = virtualinvoke $r5.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] DD_SIG> = $r6;

        $r7 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong CFH_SIG>;

        $r8 = virtualinvoke $r7.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] CFH_SIG> = $r8;

        $r9 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>(101010256L);

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] EOCD_SIG> = $r9;

        $r10 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>(101075792L);

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] ZIP64_EOCD_SIG> = $r10;

        $r11 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>(117853008L);

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] ZIP64_EOCD_LOC_SIG> = $r11;

        $r12 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>(1L);

        <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] ONE> = $r12;

        return;
    }
}
