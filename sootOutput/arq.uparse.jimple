public class arq.uparse extends arq.cmdline.CmdARQ
{
    protected static final arq.cmdline.ArgDecl fileArg;
    protected static final arq.cmdline.ArgDecl syntaxArg;
    protected static final arq.cmdline.ArgDecl argDeclPrint;
    java.util.List requestFiles;
    protected com.hp.hpl.jena.query.Syntax updateSyntax;
    private boolean printUpdate;
    private boolean printNone;
    static final java.lang.String divider;
    static boolean needDivider;

    public static transient void main(java.lang.String[])
    {
        java.lang.String[] r1;
        arq.uparse $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new arq.uparse;

        specialinvoke $r0.<arq.uparse: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<arq.uparse: void mainRun()>();

        return;
    }

    protected void <init>(java.lang.String[])
    {
        arq.uparse r0;
        com.hp.hpl.jena.query.Syntax $r2;
        arq.cmdline.ArgDecl $r3, $r4, $r5;
        java.lang.String[] r1;

        r0 := @this: arq.uparse;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CmdARQ: void <init>(java.lang.String[])>(r1);

        r0.<arq.uparse: java.util.List requestFiles> = null;

        $r2 = <com.hp.hpl.jena.query.Syntax: com.hp.hpl.jena.query.Syntax defaultUpdateSyntax>;

        r0.<arq.uparse: com.hp.hpl.jena.query.Syntax updateSyntax> = $r2;

        r0.<arq.uparse: boolean printUpdate> = 0;

        r0.<arq.uparse: boolean printNone> = 0;

        $r3 = <arq.uparse: arq.cmdline.ArgDecl fileArg>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r3, "--file=FILE", "Update commands to parse");

        $r4 = <arq.uparse: arq.cmdline.ArgDecl syntaxArg>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r4, "--syntax=name", "Update syntax");

        $r5 = <arq.uparse: arq.cmdline.ArgDecl argDeclPrint>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r5, "--print", "Print in various forms [update, none]");

        return;
    }

    protected void processModulesAndArgs()
    {
        com.hp.hpl.jena.query.Syntax $r14;
        arq.cmdline.ArgDecl $r1, $r3;
        java.lang.String r7, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        arq.uparse r0;
        java.util.Iterator $r5;
        java.util.List $r2, $r4;
        arq.cmd.CmdException $r8;
        java.lang.Object $r6;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @this: arq.uparse;

        $r1 = <arq.uparse: arq.cmdline.ArgDecl fileArg>;

        $r2 = virtualinvoke r0.<arq.uparse: java.util.List getValues(arq.cmdline.ArgDecl)>($r1);

        r0.<arq.uparse: java.util.List requestFiles> = $r2;

        specialinvoke r0.<arq.cmdline.CmdARQ: void processModulesAndArgs()>();

        $z0 = r0.<arq.cmdline.CmdARQ: boolean cmdStrictMode>;

        if $z0 == 0 goto label1;

        $r14 = <com.hp.hpl.jena.query.Syntax: com.hp.hpl.jena.query.Syntax syntaxSPARQL_11>;

        r0.<arq.uparse: com.hp.hpl.jena.query.Syntax updateSyntax> = $r14;

     label1:
        $r3 = <arq.uparse: arq.cmdline.ArgDecl argDeclPrint>;

        $r4 = virtualinvoke r0.<arq.uparse: java.util.List getValues(arq.cmdline.ArgDecl)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $z3 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("query");

        if $z3 == 0 goto label3;

        r0.<arq.uparse: boolean printUpdate> = 1;

        goto label5;

     label3:
        $z4 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("none");

        if $z4 == 0 goto label4;

        r0.<arq.uparse: boolean printNone> = 1;

        goto label5;

     label4:
        $r8 = new arq.cmd.CmdException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a recognized print form: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : Choices are: query, op, quad, opt, optquad");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<arq.cmd.CmdException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label5:
        goto label2;

     label6:
        $z1 = r0.<arq.uparse: boolean printUpdate>;

        if $z1 != 0 goto label7;

        $z2 = r0.<arq.uparse: boolean printNone>;

        if $z2 != 0 goto label7;

        r0.<arq.uparse: boolean printUpdate> = 1;

     label7:
        return;
    }

    protected java.lang.String getCommandName()
    {
        arq.uparse r0;
        java.lang.String $r1;

        r0 := @this: arq.uparse;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r0);

        return $r1;
    }

    protected java.lang.String getSummary()
    {
        arq.uparse r1;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r2, $r5;

        r1 := @this: arq.uparse;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<arq.uparse: java.lang.String getCommandName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --file=<request file> | <update string>");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected void exec()
    {
        arq.uparse r0;
        java.util.ListIterator $r2, $r4;
        java.util.List $r1, $r3;
        java.lang.Object $r5, $r7;
        java.lang.String $r6, $r8, r9, r10;
        boolean $z0, $z1;

        r0 := @this: arq.uparse;

        $r1 = r0.<arq.uparse: java.util.List requestFiles>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r7;

        $r8 = specialinvoke r0.<arq.uparse: java.lang.String oneFile(java.lang.String)>(r9);

        if $r8 == null goto label2;

        specialinvoke r0.<arq.uparse: void execOne(java.lang.String)>($r8);

     label2:
        goto label1;

     label3:
        $r3 = r0.<arq.cmdline.CmdARQ: java.util.List positionals>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.ListIterator listIterator()>();

     label4:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r5;

        $r6 = virtualinvoke r0.<arq.uparse: java.lang.String indirect(java.lang.String)>(r10);

        specialinvoke r0.<arq.uparse: void execOne(java.lang.String)>($r6);

        goto label4;

     label5:
        return;
    }

    private java.lang.String oneFile(java.lang.String)
    {
        java.io.PrintStream $r4;
        arq.uparse r8;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String r0, $r1, $r7;

        r8 := @this: arq.uparse;

        r0 := @parameter0: java.lang.String;

        staticinvoke <arq.uparse: void divider()>();

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String readWholeFileAsUTF8(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such file: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7);

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void execOne(java.lang.String)
    {
        com.hp.hpl.jena.query.Syntax $r2, $r6;
        com.hp.hpl.jena.update.UpdateRequest $r3, r16;
        java.lang.String r0, $r5, $r15;
        com.hp.hpl.jena.query.QueryParseException $r9, $r12;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r7, $r8, $r10, $r11, $r13, $r14;
        arq.uparse r1;
        org.apache.jena.atlas.io.IndentedLineBuffer $r4;

        r1 := @this: arq.uparse;

        r0 := @parameter0: java.lang.String;

     label01:
        $r2 = r1.<arq.uparse: com.hp.hpl.jena.query.Syntax updateSyntax>;

        $r3 = staticinvoke <com.hp.hpl.jena.update.UpdateFactory: com.hp.hpl.jena.update.UpdateRequest create(java.lang.String,com.hp.hpl.jena.query.Syntax)>(r0, $r2);

     label02:
        goto label04;

     label03:
        $r12 := @caughtexception;

        $r13 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r13.<java.io.PrintStream: void print(java.lang.String)>("Parse error: ");

        $r14 = <java.lang.System: java.io.PrintStream err>;

        $r15 = virtualinvoke $r12.<com.hp.hpl.jena.query.QueryParseException: java.lang.String getMessage()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r15);

        return;

     label04:
        $z0 = r1.<arq.uparse: boolean printUpdate>;

        if $z0 == 0 goto label05;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void print(java.lang.Object)>($r3);

     label05:
        $z1 = r1.<arq.uparse: boolean printNone>;

        if $z1 == 0 goto label06;

        return;

     label06:
        $r4 = new org.apache.jena.atlas.io.IndentedLineBuffer;

        specialinvoke $r4.<org.apache.jena.atlas.io.IndentedLineBuffer: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.modify.request.UpdateWriter: void output(com.hp.hpl.jena.update.UpdateRequest,org.apache.jena.atlas.io.IndentedWriter)>($r3, $r4);

        $r5 = virtualinvoke $r4.<org.apache.jena.atlas.io.IndentedLineBuffer: java.lang.String asString()>();

        r16 = null;

     label07:
        $r6 = r1.<arq.uparse: com.hp.hpl.jena.query.Syntax updateSyntax>;

        r16 = staticinvoke <com.hp.hpl.jena.update.UpdateFactory: com.hp.hpl.jena.update.UpdateRequest create(java.lang.String,com.hp.hpl.jena.query.Syntax)>($r5, $r6);

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Can not reparse update after serialization");

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label10:
        $z2 = virtualinvoke $r3.<com.hp.hpl.jena.update.UpdateRequest: boolean equalTo(com.hp.hpl.jena.update.UpdateRequest)>(r16);

        if $z2 != 0 goto label11;

        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("Reparsed update does not .equalTo original parsed request");

     label11:
        return;

        catch com.hp.hpl.jena.query.QueryParseException from label01 to label02 with label03;
        catch com.hp.hpl.jena.query.QueryParseException from label07 to label08 with label09;
    }

    private static void divider()
    {
        java.io.PrintStream $r0;
        boolean $z0;

        $z0 = <arq.uparse: boolean needDivider>;

        if $z0 == 0 goto label1;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");

     label1:
        <arq.uparse: boolean needDivider> = 1;

        return;
    }

    static void <clinit>()
    {
        arq.cmdline.ArgDecl $r0, $r2, $r4;
        java.lang.String[] $r1, $r3, $r5;

        <arq.uparse: java.lang.String divider> = "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -";

        $r0 = new arq.cmdline.ArgDecl;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "update";

        specialinvoke $r0.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "file", $r1);

        <arq.uparse: arq.cmdline.ArgDecl fileArg> = $r0;

        $r2 = new arq.cmdline.ArgDecl;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "syn";

        specialinvoke $r2.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "syntax", $r3);

        <arq.uparse: arq.cmdline.ArgDecl syntaxArg> = $r2;

        $r4 = new arq.cmdline.ArgDecl;

        $r5 = newarray (java.lang.String)[0];

        specialinvoke $r4.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "print", $r5);

        <arq.uparse: arq.cmdline.ArgDecl argDeclPrint> = $r4;

        <arq.uparse: boolean needDivider> = 0;

        return;
    }
}
