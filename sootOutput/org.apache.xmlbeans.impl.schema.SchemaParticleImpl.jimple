public class org.apache.xmlbeans.impl.schema.SchemaParticleImpl extends java.lang.Object implements org.apache.xmlbeans.SchemaParticle
{
    private int _particleType;
    private java.math.BigInteger _minOccurs;
    private java.math.BigInteger _maxOccurs;
    private org.apache.xmlbeans.SchemaParticle[] _particleChildren;
    private boolean _isImmutable;
    private org.apache.xmlbeans.QNameSet _startSet;
    private org.apache.xmlbeans.QNameSet _excludeNextSet;
    private boolean _isSkippable;
    private boolean _isDeterministic;
    private int _intMinOccurs;
    private int _intMaxOccurs;
    private org.apache.xmlbeans.QNameSet _wildcardSet;
    private int _wildcardProcess;
    private java.lang.String _defaultText;
    private boolean _isDefault;
    private boolean _isFixed;
    private javax.xml.namespace.QName _qName;
    private boolean _isNillable;
    private org.apache.xmlbeans.SchemaType$Ref _typeref;
    protected org.apache.xmlbeans.XmlObject _parseObject;
    private java.lang.Object _userData;
    private org.apache.xmlbeans.impl.schema.XmlValueRef _defaultValue;
    private static final java.math.BigInteger _maxint;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$schema$SchemaParticleImpl;

    public void <init>()
    {
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected void mutate()
    {
        java.lang.IllegalStateException $r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean _isImmutable>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public void setImmutable()
    {
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void mutate()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean _isImmutable> = 1;

        return;
    }

    public boolean hasTransitionRules()
    {
        org.apache.xmlbeans.QNameSet $r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.QNameSet _startSet>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasTransitionNotes()
    {
        org.apache.xmlbeans.QNameSet $r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.QNameSet _excludeNextSet>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setTransitionRules(org.apache.xmlbeans.QNameSet, boolean)
    {
        org.apache.xmlbeans.QNameSet r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        r1 := @parameter0: org.apache.xmlbeans.QNameSet;

        z0 := @parameter1: boolean;

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.QNameSet _startSet> = r1;

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean _isSkippable> = z0;

        return;
    }

    public void setTransitionNotes(org.apache.xmlbeans.QNameSet, boolean)
    {
        org.apache.xmlbeans.QNameSet r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        r1 := @parameter0: org.apache.xmlbeans.QNameSet;

        z0 := @parameter1: boolean;

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.QNameSet _excludeNextSet> = r1;

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean _isDeterministic> = z0;

        return;
    }

    public boolean canStartWithElement(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.QNameSet $r2;
        javax.xml.namespace.QName r0;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r1;
        boolean $z0, $z1;

        r1 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        r0 := @parameter0: javax.xml.namespace.QName;

        if r0 == null goto label1;

        $r2 = r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.QNameSet _startSet>;

        $z0 = virtualinvoke $r2.<org.apache.xmlbeans.QNameSet: boolean contains(javax.xml.namespace.QName)>(r0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public org.apache.xmlbeans.QNameSet acceptedStartNames()
    {
        org.apache.xmlbeans.QNameSet $r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.QNameSet _startSet>;

        return $r1;
    }

    public org.apache.xmlbeans.QNameSet getExcludeNextSet()
    {
        org.apache.xmlbeans.QNameSet $r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.QNameSet _excludeNextSet>;

        return $r1;
    }

    public boolean isSkippable()
    {
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean _isSkippable>;

        return $z0;
    }

    public boolean isDeterministic()
    {
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean _isDeterministic>;

        return $z0;
    }

    public int getParticleType()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int _particleType>;

        return $i0;
    }

    public void setParticleType(int)
    {
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void mutate()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int _particleType> = i0;

        return;
    }

    public boolean isSingleton()
    {
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        int $i0, $i1;
        java.math.BigInteger $r1, $r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.math.BigInteger _maxOccurs>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.math.BigInteger _maxOccurs>;

        $r2 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 != 0 goto label1;

        $r5 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.math.BigInteger _minOccurs>;

        $r4 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $i1 = virtualinvoke $r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.math.BigInteger getMinOccurs()
    {
        java.math.BigInteger $r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.math.BigInteger _minOccurs>;

        return $r1;
    }

    public void setMinOccurs(java.math.BigInteger)
    {
        int $i0;
        java.math.BigInteger r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        r1 := @parameter0: java.math.BigInteger;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void mutate()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.math.BigInteger _minOccurs> = r1;

        $i0 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int pegBigInteger(java.math.BigInteger)>(r1);

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int _intMinOccurs> = $i0;

        return;
    }

    public int getIntMinOccurs()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int _intMinOccurs>;

        return $i0;
    }

    public java.math.BigInteger getMaxOccurs()
    {
        java.math.BigInteger $r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.math.BigInteger _maxOccurs>;

        return $r1;
    }

    public int getIntMaxOccurs()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int _intMaxOccurs>;

        return $i0;
    }

    public void setMaxOccurs(java.math.BigInteger)
    {
        int $i0;
        java.math.BigInteger r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        r1 := @parameter0: java.math.BigInteger;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void mutate()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.math.BigInteger _maxOccurs> = r1;

        $i0 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int pegBigInteger(java.math.BigInteger)>(r1);

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int _intMaxOccurs> = $i0;

        return;
    }

    public org.apache.xmlbeans.SchemaParticle[] getParticleChildren()
    {
        org.apache.xmlbeans.SchemaParticle[] $r1, $r2, r3, $r4, $r5;
        java.lang.AssertionError $r6;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaParticle[] _particleChildren>;

        if $r1 != null goto label3;

        $z0 = <org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i2 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int _particleType>;

        if $i2 == 1 goto label1;

        $i3 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int _particleType>;

        if $i3 == 3 goto label1;

        $i4 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int _particleType>;

        if $i4 != 2 goto label2;

     label1:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        return null;

     label3:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaParticle[] _particleChildren>;

        $i0 = lengthof $r2;

        r3 = newarray (org.apache.xmlbeans.SchemaParticle)[$i0];

        $r5 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaParticle[] _particleChildren>;

        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaParticle[] _particleChildren>;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r3, 0, $i1);

        return r3;
    }

    public void setParticleChildren(org.apache.xmlbeans.SchemaParticle[])
    {
        org.apache.xmlbeans.SchemaParticle[] r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaParticle[];

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void mutate()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaParticle[] _particleChildren> = r1;

        return;
    }

    public org.apache.xmlbeans.SchemaParticle getParticleChild(int)
    {
        org.apache.xmlbeans.SchemaParticle $r2;
        org.apache.xmlbeans.SchemaParticle[] $r1;
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaParticle[] _particleChildren>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int countOfParticleChild()
    {
        org.apache.xmlbeans.SchemaParticle[] $r1, $r2;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaParticle[] _particleChildren>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaParticle[] _particleChildren>;

        $i0 = lengthof $r2;

     label2:
        return $i0;
    }

    public void setWildcardSet(org.apache.xmlbeans.QNameSet)
    {
        org.apache.xmlbeans.QNameSet r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        r1 := @parameter0: org.apache.xmlbeans.QNameSet;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void mutate()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.QNameSet _wildcardSet> = r1;

        return;
    }

    public org.apache.xmlbeans.QNameSet getWildcardSet()
    {
        org.apache.xmlbeans.QNameSet $r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.QNameSet _wildcardSet>;

        return $r1;
    }

    public void setWildcardProcess(int)
    {
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void mutate()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int _wildcardProcess> = i0;

        return;
    }

    public int getWildcardProcess()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int _wildcardProcess>;

        return $i0;
    }

    private static final int pegBigInteger(java.math.BigInteger)
    {
        int $i0, $i1, $i2;
        java.math.BigInteger r0, $r1;

        r0 := @parameter0: java.math.BigInteger;

        if r0 != null goto label1;

        return 2147483647;

     label1:
        $i0 = virtualinvoke r0.<java.math.BigInteger: int signum()>();

        if $i0 > 0 goto label2;

        return 0;

     label2:
        $r1 = <org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.math.BigInteger _maxint>;

        $i1 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i1 < 0 goto label3;

        return 2147483647;

     label3:
        $i2 = virtualinvoke r0.<java.math.BigInteger: int intValue()>();

        return $i2;
    }

    public javax.xml.namespace.QName getName()
    {
        javax.xml.namespace.QName $r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: javax.xml.namespace.QName _qName>;

        return $r1;
    }

    public void setNameAndTypeRef(javax.xml.namespace.QName, org.apache.xmlbeans.SchemaType$Ref)
    {
        javax.xml.namespace.QName r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        org.apache.xmlbeans.SchemaType$Ref r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        r1 := @parameter0: javax.xml.namespace.QName;

        r2 := @parameter1: org.apache.xmlbeans.SchemaType$Ref;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void mutate()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: javax.xml.namespace.QName _qName> = r1;

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaType$Ref _typeref> = r2;

        return;
    }

    public boolean isTypeResolved()
    {
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        org.apache.xmlbeans.SchemaType$Ref $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaType$Ref _typeref>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void resolveTypeRef(org.apache.xmlbeans.SchemaType$Ref)
    {
        java.lang.IllegalStateException $r3;
        org.apache.xmlbeans.SchemaType$Ref $r1, r2;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        r2 := @parameter0: org.apache.xmlbeans.SchemaType$Ref;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaType$Ref _typeref>;

        if $r1 == null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaType$Ref _typeref> = r2;

        return;
    }

    public boolean isAttribute()
    {
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        return 0;
    }

    public org.apache.xmlbeans.SchemaType getType()
    {
        org.apache.xmlbeans.SchemaType$Ref $r1, $r2;
        org.apache.xmlbeans.SchemaType $r3;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaType$Ref _typeref>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaType$Ref _typeref>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

        return $r3;
    }

    public java.lang.String getDefaultText()
    {
        java.lang.String $r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.lang.String _defaultText>;

        return $r1;
    }

    public boolean isDefault()
    {
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean _isDefault>;

        return $z0;
    }

    public boolean isFixed()
    {
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean _isFixed>;

        return $z0;
    }

    public void setDefault(java.lang.String, boolean, org.apache.xmlbeans.XmlObject)
    {
        java.lang.String r1;
        org.apache.xmlbeans.XmlObject r2;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        boolean z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.xmlbeans.XmlObject;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void mutate()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.lang.String _defaultText> = r1;

        if r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean _isDefault> = $z1;

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean _isFixed> = z0;

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.XmlObject _parseObject> = r2;

        return;
    }

    public boolean isNillable()
    {
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean _isNillable>;

        return $z0;
    }

    public void setNillable(boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void mutate()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean _isNillable> = z0;

        return;
    }

    public org.apache.xmlbeans.XmlAnySimpleType getDefaultValue()
    {
        java.lang.Throwable $r18;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;
        java.lang.String $r2, $r7, $r14;
        org.apache.xmlbeans.XmlObject $r5, $r12;
        org.apache.xmlbeans.SchemaType $r3, $r4, $r6, $r9, $r10, $r13;
        boolean $z0, $z1;
        org.apache.xmlbeans.XmlAnySimpleType $r8, $r15, $r17;
        org.apache.xmlbeans.impl.values.NamespaceContext $r11;
        org.apache.xmlbeans.impl.schema.XmlValueRef $r1, $r16;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.impl.schema.XmlValueRef _defaultValue>;

        if $r1 == null goto label1;

        $r16 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.impl.schema.XmlValueRef _defaultValue>;

        $r17 = virtualinvoke $r16.<org.apache.xmlbeans.impl.schema.XmlValueRef: org.apache.xmlbeans.XmlAnySimpleType get()>();

        return $r17;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.lang.String _defaultText>;

        if $r2 == null goto label7;

        $r3 = <org.apache.xmlbeans.XmlAnySimpleType: org.apache.xmlbeans.SchemaType type>;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaType getType()>();

        $z0 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>($r4);

        if $z0 == 0 goto label7;

        $r5 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.XmlObject _parseObject>;

        if $r5 == null goto label6;

        $r9 = <org.apache.xmlbeans.XmlQName: org.apache.xmlbeans.SchemaType type>;

        $r10 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaType getType()>();

        $z1 = interfaceinvoke $r9.<org.apache.xmlbeans.SchemaType: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>($r10);

        if $z1 == 0 goto label6;

     label2:
        $r11 = new org.apache.xmlbeans.impl.values.NamespaceContext;

        $r12 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.XmlObject _parseObject>;

        specialinvoke $r11.<org.apache.xmlbeans.impl.values.NamespaceContext: void <init>(org.apache.xmlbeans.XmlObject)>($r12);

        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void push(org.apache.xmlbeans.impl.values.NamespaceContext)>($r11);

        $r13 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaType getType()>();

        $r14 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.lang.String _defaultText>;

        $r15 = interfaceinvoke $r13.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType newValue(java.lang.Object)>($r14);

     label3:
        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void pop()>();

        return $r15;

     label4:
        $r18 := @caughtexception;

     label5:
        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void pop()>();

        throw $r18;

     label6:
        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaType getType()>();

        $r7 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.lang.String _defaultText>;

        $r8 = interfaceinvoke $r6.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType newValue(java.lang.Object)>($r7);

        return $r8;

     label7:
        return null;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setDefaultValue(org.apache.xmlbeans.impl.schema.XmlValueRef)
    {
        org.apache.xmlbeans.impl.schema.XmlValueRef r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.XmlValueRef;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void mutate()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.impl.schema.XmlValueRef _defaultValue> = r1;

        return;
    }

    public java.lang.Object getUserData()
    {
        java.lang.Object $r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.lang.Object _userData>;

        return $r1;
    }

    public void setUserData(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        r1 := @parameter0: java.lang.Object;

        r0.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.lang.Object _userData> = r1;

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        java.math.BigInteger $r1;
        boolean $z0, $z1;

        $r0 = <org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.lang.Class class$org$apache$xmlbeans$impl$schema$SchemaParticleImpl>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.schema.SchemaParticleImpl");

        <org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.lang.Class class$org$apache$xmlbeans$impl$schema$SchemaParticleImpl> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.lang.Class class$org$apache$xmlbeans$impl$schema$SchemaParticleImpl>;

     label2:
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2147483647L);

        <org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.math.BigInteger _maxint> = $r1;

        return;
    }
}
