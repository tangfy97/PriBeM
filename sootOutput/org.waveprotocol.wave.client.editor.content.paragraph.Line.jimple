public class org.waveprotocol.wave.client.editor.content.paragraph.Line extends java.lang.Object
{
    private static final org.waveprotocol.wave.model.document.util.Property LINE;
    private static final org.waveprotocol.wave.model.document.util.Property FIRST_LINE;
    public static final int DIRTY;
    private final org.waveprotocol.wave.model.document.util.DocumentContext cxt;
    private final org.waveprotocol.wave.client.editor.content.ContentElement lineElement;
    private final org.waveprotocol.wave.client.editor.content.ContentElement paragraph;
    private org.waveprotocol.wave.client.editor.content.paragraph.Line previous;
    private org.waveprotocol.wave.client.editor.content.paragraph.Line next;
    private int cachedNumberValue;
    static final boolean $assertionsDisabled;

    public static org.waveprotocol.wave.client.editor.content.paragraph.Line fromLineElement(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.model.document.util.Property $r1;
        java.lang.AssertionError $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r3;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $z0 = <org.waveprotocol.wave.client.editor.content.paragraph.Line: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLineElement(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        if $z1 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not line element: ");

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getTagName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r4;

     label1:
        $r1 = <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.model.document.util.Property LINE>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property)>($r1);

        $r3 = (org.waveprotocol.wave.client.editor.content.paragraph.Line) $r2;

        return $r3;
    }

    public static org.waveprotocol.wave.client.editor.content.paragraph.Line fromParagraph(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.model.document.util.Property $r1;
        java.lang.AssertionError $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r3;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $z0 = <org.waveprotocol.wave.client.editor.content.paragraph.Line: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLineElement(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        if $z1 == 0 goto label1;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Is but shouldn\'t be line element: ");

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getTagName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r4;

     label1:
        $r1 = <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.model.document.util.Property LINE>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property)>($r1);

        $r3 = (org.waveprotocol.wave.client.editor.content.paragraph.Line) $r2;

        return $r3;
    }

    public static org.waveprotocol.wave.client.editor.content.paragraph.Line getFirstLineOfContainer(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.model.document.util.Property $r1;
        java.lang.AssertionError $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r3;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $z0 = <org.waveprotocol.wave.client.editor.content.paragraph.Line: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLineContainerElement(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        if $z1 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not container: ");

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getTagName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r4;

     label1:
        $r1 = <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.model.document.util.Property FIRST_LINE>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property)>($r1);

        $r3 = (org.waveprotocol.wave.client.editor.content.paragraph.Line) $r2;

        return $r3;
    }

    public static void setFirstLineOfContainer(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.paragraph.Line)
    {
        org.waveprotocol.wave.model.document.util.Property $r2;
        java.lang.AssertionError $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r1;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6, $r8;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $z0 = <org.waveprotocol.wave.client.editor.content.paragraph.Line: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLineContainerElement(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not container: ");

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getTagName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r3;

     label1:
        $r2 = <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.model.document.util.Property FIRST_LINE>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r2, r1);

        return;
    }

    void <init>(org.waveprotocol.wave.model.document.util.DocumentContext, org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r7;
        org.waveprotocol.wave.model.document.util.ElementManager $r11;
        org.waveprotocol.wave.model.document.util.DocumentContext r1;
        java.lang.AssertionError $r16;
        java.util.Map $r5;
        int $i1;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r2, $r6, $r9, $r10, $r14;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.util.LocalDocument $r3;
        org.waveprotocol.wave.model.document.util.Property $r12, $r13;
        org.waveprotocol.wave.model.document.MutableDocument $r4;
        java.lang.Object $r8;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentContext;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) -1;

        r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int cachedNumberValue> = $i1;

        $z0 = <org.waveprotocol.wave.client.editor.content.paragraph.Line: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLineElement(org.waveprotocol.wave.client.editor.content.ContentElement)>(r2);

        if $z1 != 0 goto label1;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label1:
        r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.model.document.util.DocumentContext cxt> = r1;

        r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement lineElement> = r2;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        $r4 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.MutableDocument document()>();

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.MutableDocument: java.util.Map getAttributes(java.lang.Object)>(r2);

        $r6 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r7 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        $r8 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object transparentCreate(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object)>("l:p", $r5, $r6, $r7);

        $r9 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r8;

        r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement paragraph> = $r9;

        $r11 = <org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.document.util.ElementManager ELEMENT_MANAGER>;

        $r10 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement paragraph>;

        staticinvoke <org.waveprotocol.wave.model.document.util.PersistentContent: void makeHard(org.waveprotocol.wave.model.document.util.ElementManager,java.lang.Object)>($r11, $r10);

        $r12 = <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.model.document.util.Property LINE>;

        virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentElement: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r12, r0);

        $r14 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement paragraph>;

        $r13 = <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.model.document.util.Property LINE>;

        virtualinvoke $r14.<org.waveprotocol.wave.client.editor.content.ContentElement: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r13, r0);

        return;
    }

    public org.waveprotocol.wave.client.editor.content.paragraph.Line next()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0, $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.paragraph.Line previous()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0, $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous>;

        return $r1;
    }

    public void insertAfter(org.waveprotocol.wave.client.editor.content.paragraph.Line)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0, r1, $r2, $r3, $r4, $r5, $r6;

        r1 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Previous line must not be null");

        r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous> = r0;

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous>;

        $r3 = $r2.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next>;

        r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next> = $r3;

        $r4 = r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous>;

        $r4.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next> = r1;

        $r5 = r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next>;

        if $r5 == null goto label1;

        $r6 = r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next>;

        $r6.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous> = r1;

     label1:
        return;
    }

    public void insertBefore(org.waveprotocol.wave.client.editor.content.paragraph.Line)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0, r1, $r2, $r3, $r4, $r5, $r6;

        r1 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Next line must not be null");

        r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next> = r0;

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next>;

        $r3 = $r2.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous>;

        r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous> = $r3;

        $r4 = r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next>;

        $r4.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous> = r1;

        $r5 = r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous>;

        if $r5 == null goto label1;

        $r6 = r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous>;

        $r6.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next> = r1;

     label1:
        return;
    }

    public void remove()
    {
        org.waveprotocol.wave.model.document.util.LocalDocument $r10;
        org.waveprotocol.wave.model.document.util.DocumentContext $r9;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0, $r3, $r4, $r5, $r6, $r7, $r8;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1, $r2, $r11;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement paragraph>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r2 == null goto label1;

        $r9 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.model.document.util.DocumentContext cxt>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        $r11 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement paragraph>;

        interfaceinvoke $r10.<org.waveprotocol.wave.model.document.util.LocalDocument: void transparentDeepRemove(java.lang.Object)>($r11);

     label1:
        $r3 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next>;

        if $r3 == null goto label2;

        $r8 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next>;

        $r7 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous>;

        $r8.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous> = $r7;

     label2:
        $r4 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous>;

        if $r4 == null goto label3;

        $r6 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous>;

        $r5 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next>;

        $r6.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next> = $r5;

     label3:
        r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next> = null;

        r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous> = null;

        return;
    }

    public org.waveprotocol.wave.model.document.MutableDocument getMutableDoc()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0;
        org.waveprotocol.wave.model.document.util.DocumentContext $r1;
        org.waveprotocol.wave.model.document.MutableDocument $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.model.document.util.DocumentContext cxt>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.MutableDocument document()>();

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement paragraph>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.ContentElement getLineElement()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement lineElement>;

        return $r1;
    }

    public java.lang.String getAttribute(java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        java.lang.String r1, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement lineElement>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>(r1);

        return $r3;
    }

    public java.util.Map getAttributes()
    {
        java.util.Map $r3;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.model.document.MutableDocument $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.model.document.MutableDocument getMutableDoc()>();

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement lineElement>;

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.MutableDocument: java.util.Map getAttributes(java.lang.Object)>($r2);

        return $r3;
    }

    public org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour getBehaviour()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0;
        java.lang.String $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: java.lang.String getAttribute(java.lang.String)>("t");

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour of(java.lang.String)>($r1);

        return $r2;
    }

    public boolean isDecimalListItem()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement paragraph>;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: boolean isDecimalListItem(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        return $z0;
    }

    public int getIndent()
    {
        int $i0;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement lineElement>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement lineElement>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("i");

        $i0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: int getIndent(java.lang.String)>($r3);

     label2:
        return $i0;
    }

    public void setCachedNumberValue(int)
    {
        int i0;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        i0 := @parameter0: int;

        r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int cachedNumberValue> = i0;

        return;
    }

    public int getCachedNumberValue()
    {
        int $i0;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $i0 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int cachedNumberValue>;

        return $i0;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.client.editor.content.ContentView $r4;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r5;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r7, $r8, $r9, $r10;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        java.lang.String $r6, $r11;

        r2 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Line(");

        $r4 = <org.waveprotocol.wave.client.editor.content.FullContentView: org.waveprotocol.wave.client.editor.content.ContentView INSTANCE>;

        $r3 = r2.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement lineElement>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createNode(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r4, $r3);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String getXmlString()>();

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i0 = r2.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int cachedNumberValue>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.util.Property$ImmutableProperty $r1;
        java.lang.Class $r0;
        org.waveprotocol.wave.model.document.util.Property$MutableProperty $r2;
        boolean $z0, $z1;

        <org.waveprotocol.wave.client.editor.content.paragraph.Line: int DIRTY> = -1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/paragraph/Line;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.paragraph.Line: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.Property: org.waveprotocol.wave.model.document.util.Property$ImmutableProperty immutable(java.lang.String)>("line");

        <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.model.document.util.Property LINE> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.Property: org.waveprotocol.wave.model.document.util.Property$MutableProperty mutable(java.lang.String)>("fline");

        <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.model.document.util.Property FIRST_LINE> = $r2;

        return;
    }
}
