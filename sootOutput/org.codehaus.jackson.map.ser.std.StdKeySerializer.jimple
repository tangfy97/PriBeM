public class org.codehaus.jackson.map.ser.std.StdKeySerializer extends org.codehaus.jackson.map.ser.std.SerializerBase
{
    static final org.codehaus.jackson.map.ser.std.StdKeySerializer instace;

    public void <init>()
    {
        org.codehaus.jackson.map.ser.std.StdKeySerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.StdKeySerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        return;
    }

    public void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.std.StdKeySerializer r5;
        org.codehaus.jackson.JsonGenerator r1;
        java.util.Date $r4;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r0;
        java.lang.String $r2;
        boolean $z0;

        r5 := @this: org.codehaus.jackson.map.ser.std.StdKeySerializer;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $z0 = r0 instanceof java.util.Date;

        if $z0 == 0 goto label1;

        $r4 = (java.util.Date) r0;

        virtualinvoke r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeDateKey(java.util.Date,org.codehaus.jackson.JsonGenerator)>($r4, r1);

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r2);

     label2:
        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.std.StdKeySerializer r0;
        java.lang.reflect.Type r3;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.StdKeySerializer;

        r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r3 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.StdKeySerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String)>("string");

        return $r1;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.std.StdKeySerializer $r0;

        $r0 = new org.codehaus.jackson.map.ser.std.StdKeySerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.StdKeySerializer: void <init>()>();

        <org.codehaus.jackson.map.ser.std.StdKeySerializer: org.codehaus.jackson.map.ser.std.StdKeySerializer instace> = $r0;

        return;
    }
}
