public class org.apache.solr.client.solrj.response.FieldAnalysisResponse extends org.apache.solr.client.solrj.response.AnalysisResponseBase
{
    private java.util.Map analysisByFieldTypeName;
    private java.util.Map analysisByFieldName;

    public void <init>()
    {
        java.util.HashMap $r1, $r2;
        org.apache.solr.client.solrj.response.FieldAnalysisResponse r0;

        r0 := @this: org.apache.solr.client.solrj.response.FieldAnalysisResponse;

        specialinvoke r0.<org.apache.solr.client.solrj.response.AnalysisResponseBase: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.solr.client.solrj.response.FieldAnalysisResponse: java.util.Map analysisByFieldTypeName> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.solr.client.solrj.response.FieldAnalysisResponse: java.util.Map analysisByFieldName> = $r2;

        return;
    }

    public void setResponse(org.apache.solr.common.util.NamedList)
    {
        org.apache.solr.client.solrj.response.FieldAnalysisResponse r0;
        org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis $r15, $r21;
        java.util.Map $r11, $r17;
        boolean $z0, $z1;
        java.util.Map$Entry r22, r23;
        java.util.Iterator $r6, $r9;
        org.apache.solr.common.util.NamedList r1, r3, $r5, $r8, $r14, $r20;
        java.lang.Object $r2, $r4, $r7, $r10, $r12, $r13, $r16, $r18, $r19;

        r0 := @this: org.apache.solr.client.solrj.response.FieldAnalysisResponse;

        r1 := @parameter0: org.apache.solr.common.util.NamedList;

        specialinvoke r0.<org.apache.solr.client.solrj.response.AnalysisResponseBase: void setResponse(org.apache.solr.common.util.NamedList)>(r1);

        $r2 = virtualinvoke r1.<org.apache.solr.common.util.NamedList: java.lang.Object get(java.lang.String)>("analysis");

        r3 = (org.apache.solr.common.util.NamedList) $r2;

        $r4 = virtualinvoke r3.<org.apache.solr.common.util.NamedList: java.lang.Object get(java.lang.String)>("field_types");

        $r5 = (org.apache.solr.common.util.NamedList) $r4;

        $r6 = virtualinvoke $r5.<org.apache.solr.common.util.NamedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r16 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.util.Map$Entry) $r16;

        $r17 = r0.<org.apache.solr.client.solrj.response.FieldAnalysisResponse: java.util.Map analysisByFieldTypeName>;

        $r18 = interfaceinvoke r22.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = interfaceinvoke r22.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (org.apache.solr.common.util.NamedList) $r19;

        $r21 = specialinvoke r0.<org.apache.solr.client.solrj.response.FieldAnalysisResponse: org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis buildAnalysis(org.apache.solr.common.util.NamedList)>($r20);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r21);

        goto label1;

     label2:
        $r7 = virtualinvoke r3.<org.apache.solr.common.util.NamedList: java.lang.Object get(java.lang.String)>("field_names");

        $r8 = (org.apache.solr.common.util.NamedList) $r7;

        $r9 = virtualinvoke $r8.<org.apache.solr.common.util.NamedList: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.util.Map$Entry) $r10;

        $r11 = r0.<org.apache.solr.client.solrj.response.FieldAnalysisResponse: java.util.Map analysisByFieldName>;

        $r12 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (org.apache.solr.common.util.NamedList) $r13;

        $r15 = specialinvoke r0.<org.apache.solr.client.solrj.response.FieldAnalysisResponse: org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis buildAnalysis(org.apache.solr.common.util.NamedList)>($r14);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r15);

        goto label3;

     label4:
        return;
    }

    private org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis buildAnalysis(org.apache.solr.common.util.NamedList)
    {
        org.apache.solr.common.util.NamedList r1, r3, $r7;
        org.apache.solr.client.solrj.response.FieldAnalysisResponse r4;
        java.util.List $r6, $r8;
        org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis $r0;
        java.lang.Object $r2, $r5;

        r4 := @this: org.apache.solr.client.solrj.response.FieldAnalysisResponse;

        r1 := @parameter0: org.apache.solr.common.util.NamedList;

        $r0 = new org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis;

        specialinvoke $r0.<org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis: void <init>(org.apache.solr.client.solrj.response.FieldAnalysisResponse$1)>(null);

        $r2 = virtualinvoke r1.<org.apache.solr.common.util.NamedList: java.lang.Object get(java.lang.String)>("query");

        r3 = (org.apache.solr.common.util.NamedList) $r2;

        if r3 != null goto label1;

        $r8 = null;

        goto label2;

     label1:
        $r8 = virtualinvoke r4.<org.apache.solr.client.solrj.response.FieldAnalysisResponse: java.util.List buildPhases(org.apache.solr.common.util.NamedList)>(r3);

     label2:
        staticinvoke <org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis: void access$100(org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis,java.util.List)>($r0, $r8);

        $r5 = virtualinvoke r1.<org.apache.solr.common.util.NamedList: java.lang.Object get(java.lang.String)>("index");

        $r7 = (org.apache.solr.common.util.NamedList) $r5;

        $r6 = virtualinvoke r4.<org.apache.solr.client.solrj.response.FieldAnalysisResponse: java.util.List buildPhases(org.apache.solr.common.util.NamedList)>($r7);

        staticinvoke <org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis: void access$200(org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis,java.util.List)>($r0, $r6);

        return $r0;
    }

    public int getFieldTypeAnalysisCount()
    {
        int $i0;
        org.apache.solr.client.solrj.response.FieldAnalysisResponse r0;
        java.util.Map $r1;

        r0 := @this: org.apache.solr.client.solrj.response.FieldAnalysisResponse;

        $r1 = r0.<org.apache.solr.client.solrj.response.FieldAnalysisResponse: java.util.Map analysisByFieldTypeName>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis getFieldTypeAnalysis(java.lang.String)
    {
        org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        org.apache.solr.client.solrj.response.FieldAnalysisResponse r0;

        r0 := @this: org.apache.solr.client.solrj.response.FieldAnalysisResponse;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.client.solrj.response.FieldAnalysisResponse: java.util.Map analysisByFieldTypeName>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis) $r3;

        return $r4;
    }

    public java.lang.Iterable getAllFieldTypeAnalysis()
    {
        java.util.Set $r2;
        org.apache.solr.client.solrj.response.FieldAnalysisResponse r0;
        java.util.Map $r1;

        r0 := @this: org.apache.solr.client.solrj.response.FieldAnalysisResponse;

        $r1 = r0.<org.apache.solr.client.solrj.response.FieldAnalysisResponse: java.util.Map analysisByFieldTypeName>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        return $r2;
    }

    public int getFieldNameAnalysisCount()
    {
        int $i0;
        org.apache.solr.client.solrj.response.FieldAnalysisResponse r0;
        java.util.Map $r1;

        r0 := @this: org.apache.solr.client.solrj.response.FieldAnalysisResponse;

        $r1 = r0.<org.apache.solr.client.solrj.response.FieldAnalysisResponse: java.util.Map analysisByFieldName>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis getFieldNameAnalysis(java.lang.String)
    {
        org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        org.apache.solr.client.solrj.response.FieldAnalysisResponse r0;

        r0 := @this: org.apache.solr.client.solrj.response.FieldAnalysisResponse;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.client.solrj.response.FieldAnalysisResponse: java.util.Map analysisByFieldName>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.solr.client.solrj.response.FieldAnalysisResponse$Analysis) $r3;

        return $r4;
    }

    public java.lang.Iterable getAllFieldNameAnalysis()
    {
        java.util.Set $r2;
        org.apache.solr.client.solrj.response.FieldAnalysisResponse r0;
        java.util.Map $r1;

        r0 := @this: org.apache.solr.client.solrj.response.FieldAnalysisResponse;

        $r1 = r0.<org.apache.solr.client.solrj.response.FieldAnalysisResponse: java.util.Map analysisByFieldName>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        return $r2;
    }
}
