public final class kodkod.engine.bool.ITEGate extends kodkod.engine.bool.BooleanFormula
{
    private final kodkod.engine.bool.BooleanFormula[] inputs;
    private final int label;
    private final int hashcode;
    private final int labelhash;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/engine/bool/ITEGate;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.engine.bool.ITEGate: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(int, int, kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFormula)
    {
        kodkod.engine.bool.BooleanFormula r2, r4, r6;
        kodkod.engine.bool.ITEGate r0;
        kodkod.engine.bool.BooleanFormula[] $r1, $r3, $r5, $r7;
        java.lang.AssertionError $r8;
        int i0, $i1, i2;
        boolean $z0;

        r0 := @this: kodkod.engine.bool.ITEGate;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        r2 := @parameter2: kodkod.engine.bool.BooleanFormula;

        r4 := @parameter3: kodkod.engine.bool.BooleanFormula;

        r6 := @parameter4: kodkod.engine.bool.BooleanFormula;

        specialinvoke r0.<kodkod.engine.bool.BooleanFormula: void <init>(kodkod.engine.bool.BooleanFormula)>(null);

        $z0 = <kodkod.engine.bool.ITEGate: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        r0.<kodkod.engine.bool.ITEGate: int label> = i0;

        $i1 = staticinvoke <kodkod.util.ints.Ints: int superFastHash(int)>(i0);

        r0.<kodkod.engine.bool.ITEGate: int labelhash> = $i1;

        r0.<kodkod.engine.bool.ITEGate: int hashcode> = i2;

        $r1 = newarray (kodkod.engine.bool.BooleanFormula)[3];

        r0.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs> = $r1;

        $r3 = r0.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r3[0] = r2;

        $r5 = r0.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r5[1] = r4;

        $r7 = r0.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r7[2] = r6;

        return;
    }

    int hash(kodkod.engine.bool.Operator)
    {
        int $i0;
        kodkod.engine.bool.Operator r1;
        kodkod.engine.bool.ITEGate r0;

        r0 := @this: kodkod.engine.bool.ITEGate;

        r1 := @parameter0: kodkod.engine.bool.Operator;

        $i0 = r0.<kodkod.engine.bool.ITEGate: int labelhash>;

        return $i0;
    }

    public java.util.Iterator iterator()
    {
        kodkod.engine.bool.BooleanFormula[] $r1;
        java.util.Iterator $r2;
        kodkod.engine.bool.ITEGate r0;

        r0 := @this: kodkod.engine.bool.ITEGate;

        $r1 = r0.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r2 = staticinvoke <kodkod.util.collections.Containers: java.util.Iterator iterate(java.lang.Object[])>($r1);

        return $r2;
    }

    public int size()
    {
        kodkod.engine.bool.ITEGate r0;

        r0 := @this: kodkod.engine.bool.ITEGate;

        return 3;
    }

    public int label()
    {
        int $i0;
        kodkod.engine.bool.ITEGate r0;

        r0 := @this: kodkod.engine.bool.ITEGate;

        $i0 = r0.<kodkod.engine.bool.ITEGate: int label>;

        return $i0;
    }

    public java.lang.Object accept(kodkod.engine.bool.BooleanVisitor, java.lang.Object)
    {
        kodkod.engine.bool.ITEGate r1;
        kodkod.engine.bool.BooleanVisitor r0;
        java.lang.Object r2, $r3;

        r1 := @this: kodkod.engine.bool.ITEGate;

        r0 := @parameter0: kodkod.engine.bool.BooleanVisitor;

        r2 := @parameter1: java.lang.Object;

        $r3 = interfaceinvoke r0.<kodkod.engine.bool.BooleanVisitor: java.lang.Object visit(kodkod.engine.bool.ITEGate,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public java.lang.String toString()
    {
        kodkod.engine.bool.BooleanFormula $r3, $r7, $r11;
        kodkod.engine.bool.ITEGate r1;
        kodkod.engine.bool.BooleanFormula[] $r2, $r6, $r10;
        java.lang.StringBuilder $r0, $r4, $r5, $r8, $r9, $r12, $r13;
        java.lang.String $r14;

        r1 := @this: kodkod.engine.bool.ITEGate;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("(");

        $r2 = r1.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r3 = $r2[0];

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r6 = r1.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r7 = $r6[1];

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r10 = r1.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r11 = $r10[2];

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public int hashCode()
    {
        int $i0;
        kodkod.engine.bool.ITEGate r0;

        r0 := @this: kodkod.engine.bool.ITEGate;

        $i0 = r0.<kodkod.engine.bool.ITEGate: int hashcode>;

        return $i0;
    }

    public kodkod.engine.bool.Operator op()
    {
        kodkod.engine.bool.Operator$Ternary $r0;
        kodkod.engine.bool.ITEGate r1;

        r1 := @this: kodkod.engine.bool.ITEGate;

        $r0 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Ternary ITE>;

        return $r0;
    }

    public kodkod.engine.bool.BooleanFormula input(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        kodkod.engine.bool.BooleanFormula $r3;
        kodkod.engine.bool.ITEGate r1;
        int i0;
        kodkod.engine.bool.BooleanFormula[] $r2;

        r1 := @this: kodkod.engine.bool.ITEGate;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 2 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        $r2 = r1.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r3 = $r2[i0];

        return $r3;
    }

    int contains(kodkod.engine.bool.Operator, int, int)
    {
        kodkod.engine.bool.BooleanFormula $r4, $r6, $r8;
        kodkod.engine.bool.ITEGate r0;
        java.lang.AssertionError $r10;
        kodkod.engine.bool.Operator r1;
        kodkod.engine.bool.Operator$Ternary $r2;
        byte $b9;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11;
        boolean $z0;
        kodkod.engine.bool.BooleanFormula[] $r3, $r5, $r7;

        r0 := @this: kodkod.engine.bool.ITEGate;

        r1 := @parameter0: kodkod.engine.bool.Operator;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = <kodkod.engine.bool.ITEGate: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i2 > 0 goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $i1 = r0.<kodkod.engine.bool.ITEGate: int label>;

        if i0 != $i1 goto label2;

        return 1;

     label2:
        $r2 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Ternary ITE>;

        if r1 != $r2 goto label3;

        if i2 < 3 goto label3;

        $i3 = r0.<kodkod.engine.bool.ITEGate: int label>;

        if i0 > $i3 goto label3;

        $i5 = neg i0;

        $i4 = r0.<kodkod.engine.bool.ITEGate: int label>;

        if $i5 <= $i4 goto label4;

     label3:
        $i11 = (int) -1;

        return $i11;

     label4:
        $r3 = r0.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r4 = $r3[0];

        $i6 = virtualinvoke $r4.<kodkod.engine.bool.BooleanFormula: int label()>();

        if $i6 == i0 goto label5;

        $r5 = r0.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r6 = $r5[1];

        $i7 = virtualinvoke $r6.<kodkod.engine.bool.BooleanFormula: int label()>();

        if $i7 == i0 goto label5;

        $r7 = r0.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r8 = $r7[2];

        $i8 = virtualinvoke $r8.<kodkod.engine.bool.BooleanFormula: int label()>();

        if $i8 != i0 goto label6;

     label5:
        $b9 = 3;

        goto label7;

     label6:
        $b9 = -3;

     label7:
        return $b9;
    }

    void flatten(kodkod.engine.bool.Operator, java.util.Set, int)
    {
        kodkod.engine.bool.BooleanFormula $r5, $r7, $r9;
        kodkod.engine.bool.ITEGate r3;
        java.util.Set r2;
        kodkod.engine.bool.BooleanFormula[] $r4, $r6, $r8;
        java.lang.AssertionError $r10;
        kodkod.engine.bool.Operator r0;
        kodkod.engine.bool.Operator$Ternary $r1;
        int i0;
        boolean $z0;

        r3 := @this: kodkod.engine.bool.ITEGate;

        r0 := @parameter0: kodkod.engine.bool.Operator;

        r2 := @parameter1: java.util.Set;

        i0 := @parameter2: int;

        $z0 = <kodkod.engine.bool.ITEGate: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 > 0 goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $r1 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Ternary ITE>;

        if r0 != $r1 goto label2;

        if i0 <= 2 goto label2;

        $r4 = r3.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r5 = $r4[0];

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r5);

        $r6 = r3.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r7 = $r6[1];

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r7);

        $r8 = r3.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula[] inputs>;

        $r9 = $r8[2];

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r9);

        goto label3;

     label2:
        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r3);

     label3:
        return;
    }
}
