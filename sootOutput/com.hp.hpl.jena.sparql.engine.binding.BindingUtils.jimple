public class com.hp.hpl.jena.sparql.engine.binding.BindingUtils extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.engine.binding.BindingUtils r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.engine.binding.Binding asBinding(com.hp.hpl.jena.query.QuerySolution)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r4;
        com.hp.hpl.jena.query.QuerySolution r0;
        com.hp.hpl.jena.sparql.core.ResultBinding $r3;
        com.hp.hpl.jena.sparql.engine.binding.BindingProjectNamed $r2;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.query.QuerySolution;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof com.hp.hpl.jena.sparql.core.ResultBinding;

        if $z0 == 0 goto label2;

        $r2 = new com.hp.hpl.jena.sparql.engine.binding.BindingProjectNamed;

        $r3 = (com.hp.hpl.jena.sparql.core.ResultBinding) r0;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.ResultBinding: com.hp.hpl.jena.sparql.engine.binding.Binding getBinding()>();

        specialinvoke $r2.<com.hp.hpl.jena.sparql.engine.binding.BindingProjectNamed: void <init>(com.hp.hpl.jena.sparql.engine.binding.Binding)>($r4);

        return $r2;

     label2:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create()>();

        staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingUtils: void addToBinding(com.hp.hpl.jena.sparql.engine.binding.BindingMap,com.hp.hpl.jena.query.QuerySolution)>($r1, r0);

        return $r1;
    }

    public static void addToBinding(com.hp.hpl.jena.sparql.engine.binding.BindingMap, com.hp.hpl.jena.query.QuerySolution)
    {
        com.hp.hpl.jena.graph.Node $r7;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap r5;
        java.lang.String r3, $r13;
        boolean $z0, $z1;
        java.util.Iterator $r1;
        com.hp.hpl.jena.rdf.model.RDFNode $r4;
        com.hp.hpl.jena.sparql.core.Var $r6;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r8;
        com.hp.hpl.jena.query.QuerySolution r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r5 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.BindingMap;

        r0 := @parameter1: com.hp.hpl.jena.query.QuerySolution;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.QuerySolution: java.util.Iterator varNames()>();

     label2:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.RDFNode get(java.lang.String)>(r3);

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isBlankNodeVarName(java.lang.String)>(r3);

        if $z0 == 0 goto label3;

        goto label2;

     label3:
        $r6 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>(r3);

        $r7 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.graph.Node asNode()>();

        interfaceinvoke r5.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r6, $r7);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to bind ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when already bound");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/engine/binding/BindingUtils;", $r13);

     label6:
        goto label2;

     label7:
        return;

        catch com.hp.hpl.jena.sparql.ARQInternalErrorException from label3 to label4 with label5;
    }

    public static void addAll(com.hp.hpl.jena.sparql.engine.binding.BindingMap, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap r5;
        java.lang.Object $r2;
        com.hp.hpl.jena.graph.Node $r4;
        com.hp.hpl.jena.sparql.core.Var r3;
        boolean $z0;

        r5 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.BindingMap;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.sparql.core.Var) $r2;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r3);

        interfaceinvoke r5.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r3, $r4);

        goto label1;

     label2:
        return;
    }

    public static boolean equals(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r0, r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingBase: boolean equals(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0, r1);

        return $z0;
    }
}
