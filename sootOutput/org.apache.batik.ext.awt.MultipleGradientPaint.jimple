public abstract class org.apache.batik.ext.awt.MultipleGradientPaint extends java.lang.Object implements java.awt.Paint
{
    protected int transparency;
    protected float[] fractions;
    protected java.awt.Color[] colors;
    protected java.awt.geom.AffineTransform gradientTransform;
    protected org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum cycleMethod;
    protected org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum colorSpace;
    public static final org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum NO_CYCLE;
    public static final org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum REFLECT;
    public static final org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum REPEAT;
    public static final org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum SRGB;
    public static final org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum LINEAR_RGB;

    public void <init>(float[], java.awt.Color[], org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum, org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum, java.awt.geom.AffineTransform)
    {
        java.awt.Color $r14;
        org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum r5, $r6, $r16, $r17;
        boolean z0, $z1;
        java.awt.geom.AffineTransform r7, $r13;
        org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum r3, $r4, $r19;
        float[] r1, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9;
        org.apache.batik.ext.awt.MultipleGradientPaint r0;
        java.lang.IllegalArgumentException $r15, $r18, $r20, $r21, $r22, $r23, $r24;
        java.lang.Object $r12;
        java.awt.Color[] r2, $r10, $r11;

        r0 := @this: org.apache.batik.ext.awt.MultipleGradientPaint;

        r1 := @parameter0: float[];

        r2 := @parameter1: java.awt.Color[];

        r5 := @parameter2: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum;

        r3 := @parameter3: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum;

        r7 := @parameter4: java.awt.geom.AffineTransform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label01;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fractions array cannot be null");

        throw $r24;

     label01:
        if r2 != null goto label02;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Colors array cannot be null");

        throw $r23;

     label02:
        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label03;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Colors and fractions must have equal size");

        throw $r22;

     label03:
        $i2 = lengthof r2;

        if $i2 >= 2 goto label04;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("User must specify at least 2 colors");

        throw $r21;

     label04:
        $r4 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum LINEAR_RGB>;

        if r3 == $r4 goto label05;

        $r19 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum SRGB>;

        if r3 == $r19 goto label05;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid colorspace for interpolation.");

        throw $r20;

     label05:
        $r6 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum NO_CYCLE>;

        if r5 == $r6 goto label06;

        $r16 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum REFLECT>;

        if r5 == $r16 goto label06;

        $r17 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum REPEAT>;

        if r5 == $r17 goto label06;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid cycle method.");

        throw $r18;

     label06:
        if r7 != null goto label07;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Gradient transform cannot be null.");

        throw $r15;

     label07:
        $i3 = lengthof r1;

        $r8 = newarray (float)[$i3];

        r0.<org.apache.batik.ext.awt.MultipleGradientPaint: float[] fractions> = $r8;

        $r9 = r0.<org.apache.batik.ext.awt.MultipleGradientPaint: float[] fractions>;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r9, 0, $i4);

        $i5 = lengthof r2;

        $r10 = newarray (java.awt.Color)[$i5];

        r0.<org.apache.batik.ext.awt.MultipleGradientPaint: java.awt.Color[] colors> = $r10;

        $r11 = r0.<org.apache.batik.ext.awt.MultipleGradientPaint: java.awt.Color[] colors>;

        $i6 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r11, 0, $i6);

        r0.<org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum colorSpace> = r3;

        r0.<org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum cycleMethod> = r5;

        $r12 = virtualinvoke r7.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r13 = (java.awt.geom.AffineTransform) $r12;

        r0.<org.apache.batik.ext.awt.MultipleGradientPaint: java.awt.geom.AffineTransform gradientTransform> = $r13;

        z0 = 1;

        i8 = 0;

        goto label11;

     label08:
        if z0 == 0 goto label09;

        $r14 = r2[i8];

        $i7 = virtualinvoke $r14.<java.awt.Color: int getAlpha()>();

        if $i7 != 255 goto label09;

        $z1 = 1;

        goto label10;

     label09:
        $z1 = 0;

     label10:
        z0 = $z1;

        i8 = i8 + 1;

     label11:
        $i9 = lengthof r2;

        if i8 < $i9 goto label08;

        if z0 == 0 goto label12;

        r0.<org.apache.batik.ext.awt.MultipleGradientPaint: int transparency> = 1;

        goto label13;

     label12:
        r0.<org.apache.batik.ext.awt.MultipleGradientPaint: int transparency> = 3;

     label13:
        return;
    }

    public java.awt.Color[] getColors()
    {
        int $i0, $i1;
        org.apache.batik.ext.awt.MultipleGradientPaint r0;
        java.awt.Color[] $r1, r2, $r3, $r4;

        r0 := @this: org.apache.batik.ext.awt.MultipleGradientPaint;

        $r1 = r0.<org.apache.batik.ext.awt.MultipleGradientPaint: java.awt.Color[] colors>;

        $i0 = lengthof $r1;

        r2 = newarray (java.awt.Color)[$i0];

        $r4 = r0.<org.apache.batik.ext.awt.MultipleGradientPaint: java.awt.Color[] colors>;

        $r3 = r0.<org.apache.batik.ext.awt.MultipleGradientPaint: java.awt.Color[] colors>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i1);

        return r2;
    }

    public float[] getFractions()
    {
        int $i0, $i1;
        org.apache.batik.ext.awt.MultipleGradientPaint r0;
        float[] $r1, r2, $r3, $r4;

        r0 := @this: org.apache.batik.ext.awt.MultipleGradientPaint;

        $r1 = r0.<org.apache.batik.ext.awt.MultipleGradientPaint: float[] fractions>;

        $i0 = lengthof $r1;

        r2 = newarray (float)[$i0];

        $r4 = r0.<org.apache.batik.ext.awt.MultipleGradientPaint: float[] fractions>;

        $r3 = r0.<org.apache.batik.ext.awt.MultipleGradientPaint: float[] fractions>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i1);

        return r2;
    }

    public int getTransparency()
    {
        int $i0;
        org.apache.batik.ext.awt.MultipleGradientPaint r0;

        r0 := @this: org.apache.batik.ext.awt.MultipleGradientPaint;

        $i0 = r0.<org.apache.batik.ext.awt.MultipleGradientPaint: int transparency>;

        return $i0;
    }

    public org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum getCycleMethod()
    {
        org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum $r1;
        org.apache.batik.ext.awt.MultipleGradientPaint r0;

        r0 := @this: org.apache.batik.ext.awt.MultipleGradientPaint;

        $r1 = r0.<org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum cycleMethod>;

        return $r1;
    }

    public org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum getColorSpace()
    {
        org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum $r1;
        org.apache.batik.ext.awt.MultipleGradientPaint r0;

        r0 := @this: org.apache.batik.ext.awt.MultipleGradientPaint;

        $r1 = r0.<org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum colorSpace>;

        return $r1;
    }

    public java.awt.geom.AffineTransform getTransform()
    {
        org.apache.batik.ext.awt.MultipleGradientPaint r0;
        java.lang.Object $r2;
        java.awt.geom.AffineTransform $r1, $r3;

        r0 := @this: org.apache.batik.ext.awt.MultipleGradientPaint;

        $r1 = r0.<org.apache.batik.ext.awt.MultipleGradientPaint: java.awt.geom.AffineTransform gradientTransform>;

        $r2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r3 = (java.awt.geom.AffineTransform) $r2;

        return $r3;
    }

    public abstract java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints);

    static void <clinit>()
    {
        org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum $r3, $r4;
        org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum $r0, $r1, $r2;

        $r0 = new org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum;

        specialinvoke $r0.<org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum: void <init>()>();

        <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum NO_CYCLE> = $r0;

        $r1 = new org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum;

        specialinvoke $r1.<org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum: void <init>()>();

        <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum REFLECT> = $r1;

        $r2 = new org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum;

        specialinvoke $r2.<org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum: void <init>()>();

        <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum REPEAT> = $r2;

        $r3 = new org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum;

        specialinvoke $r3.<org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum: void <init>()>();

        <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum SRGB> = $r3;

        $r4 = new org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum;

        specialinvoke $r4.<org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum: void <init>()>();

        <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum LINEAR_RGB> = $r4;

        return;
    }
}
