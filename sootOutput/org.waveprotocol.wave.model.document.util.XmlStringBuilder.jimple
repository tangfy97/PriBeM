public abstract class org.waveprotocol.wave.model.document.util.XmlStringBuilder extends java.lang.Object
{

    public void <init>()
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXml(org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r1;
        org.waveprotocol.wave.model.document.ReadableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXml1(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        return $r1;
    }

    private static org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXml1(org.waveprotocol.wave.model.document.ReadableDocument)
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r2;
        org.waveprotocol.wave.model.document.ReadableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getDocumentElement()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createChildren(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r1);

        return $r2;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXml(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters r1;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r2;
        org.waveprotocol.wave.model.document.ReadableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXmlHelper(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)>(r0, r1);

        return $r2;
    }

    private static org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXmlHelper(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r2, $r4;
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createEmptyWithCharConstraints(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)>(r0, r1);

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getDocumentElement()>();

        $r4 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc appendChildXmlFragment(java.lang.Object)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc outerXml(org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r1;
        org.waveprotocol.wave.model.document.ReadableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc outerXml1(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        return $r1;
    }

    private static org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc outerXml1(org.waveprotocol.wave.model.document.ReadableDocument)
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r2;
        org.waveprotocol.wave.model.document.ReadableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getDocumentElement()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createNode(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r1);

        return $r2;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder createEmpty()
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createEmpty(org.waveprotocol.wave.model.document.ReadableDocument)>(null);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder createEmptyWithCharConstraints(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters r0;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createEmptyWithCharConstraints(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)>(null, r0);

        return $r1;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder createFromXmlString(java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocProvider $r1;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.document.indexed.IndexedDocProvider POJO>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocProvider: org.waveprotocol.wave.model.document.indexed.IndexedDocument parse(java.lang.String)>(r0);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXml(org.waveprotocol.wave.model.document.ReadableDocument)>($r2);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder createFromXmlStringWithContraints(java.lang.String, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocProvider $r1;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r4;
        java.lang.String r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters r3;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters;

        $r1 = <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.document.indexed.IndexedDocProvider POJO>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocProvider: org.waveprotocol.wave.model.document.indexed.IndexedDocument parse(java.lang.String)>(r0);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXml(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)>($r2, r3);

        return $r4;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder createText(java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r0, $r2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createEmpty()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder appendText(java.lang.String)>(r1);

        return $r2;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createEmpty(org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r1;
        org.waveprotocol.wave.model.document.ReadableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createEmpty(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        return $r1;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createNode(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r1, $r3;
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createEmpty(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc appendNode(java.lang.Object)>(r2);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createChildren(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r1, $r3;
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createEmpty(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc appendChildXmlFragment(java.lang.Object)>(r2);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createText(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r1, $r3;
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.String r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createEmpty(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc appendText(java.lang.String)>(r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.document.util.XmlStringBuilder appendBr()
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r0, $r1, $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createEmpty()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String)>("br");

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder append(org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r2);

        return $r3;
    }

    public abstract void clear();

    public abstract int getLength();

    public abstract org.waveprotocol.wave.model.document.util.XmlStringBuilder append(org.waveprotocol.wave.model.document.util.XmlStringBuilder);

    public abstract org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String);

    public abstract transient org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String, java.lang.String[]);

    public abstract org.waveprotocol.wave.model.document.util.XmlStringBuilder appendText(java.lang.String);

    public abstract org.waveprotocol.wave.model.document.util.XmlStringBuilder appendText(java.lang.String, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters);

    public abstract java.lang.String getXmlString();

    public final org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String, org.waveprotocol.wave.model.util.StringMap)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r3, $r8;
        java.lang.Object[] $r6;
        org.waveprotocol.wave.model.document.util.XmlStringBuilder$1 $r2;
        java.lang.String[] $r5, $r7;
        org.waveprotocol.wave.model.util.StringMap r1;
        java.util.ArrayList $r0;
        int $i0, $i1;
        java.lang.String r4;

        r3 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.model.util.StringMap;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = new org.waveprotocol.wave.model.document.util.XmlStringBuilder$1;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.util.XmlStringBuilder$1: void <init>(org.waveprotocol.wave.model.document.util.XmlStringBuilder,java.util.List)>(r3, $r0);

        interfaceinvoke r1.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r2);

        $i0 = interfaceinvoke r1.<org.waveprotocol.wave.model.util.StringMap: int countEntries()>();

        $i1 = $i0 * 2;

        $r5 = newarray (java.lang.String)[$i1];

        $r6 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.String[]) $r6;

        $r8 = virtualinvoke r3.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String,java.lang.String[])>(r4, $r7);

        return $r8;
    }
}
