class org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef extends java.lang.ref.SoftReference implements org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference
{
    private volatile org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry entry;

    public void <init>(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry, java.lang.Object, java.lang.ref.ReferenceQueue)
    {
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef r0;
        java.lang.Object r1;
        java.lang.ref.ReferenceQueue r2;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r3;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef;

        r3 := @parameter0: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.ref.ReferenceQueue;

        specialinvoke r0.<java.lang.ref.SoftReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, r2);

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry entry> = r3;

        return;
    }

    public void clear()
    {
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef r0;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef;

        specialinvoke r0.<java.lang.ref.SoftReference: void clear()>();

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry entry> = null;

        return;
    }

    static org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$400(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef)
    {
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef r0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry $r1;

        r0 := @parameter0: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef;

        $r1 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry entry>;

        return $r1;
    }

    static org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$402(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef, org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)
    {
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef r0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r1;

        r0 := @parameter0: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef;

        r1 := @parameter1: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry entry> = r1;

        return r1;
    }
}
