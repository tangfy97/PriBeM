public class org.springframework.scheduling.support.CronSequenceGenerator extends java.lang.Object
{
    private final java.util.BitSet seconds;
    private final java.util.BitSet minutes;
    private final java.util.BitSet hours;
    private final java.util.BitSet daysOfWeek;
    private final java.util.BitSet daysOfMonth;
    private final java.util.BitSet months;
    private final java.lang.String expression;
    private final java.util.TimeZone timeZone;

    public void <init>(java.lang.String, java.util.TimeZone)
    {
        java.util.TimeZone r8;
        org.springframework.scheduling.support.CronSequenceGenerator r0;
        java.util.BitSet $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String r7;

        r0 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.util.TimeZone;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.BitSet;

        specialinvoke $r1.<java.util.BitSet: void <init>(int)>(60);

        r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet seconds> = $r1;

        $r2 = new java.util.BitSet;

        specialinvoke $r2.<java.util.BitSet: void <init>(int)>(60);

        r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet minutes> = $r2;

        $r3 = new java.util.BitSet;

        specialinvoke $r3.<java.util.BitSet: void <init>(int)>(24);

        r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet hours> = $r3;

        $r4 = new java.util.BitSet;

        specialinvoke $r4.<java.util.BitSet: void <init>(int)>(7);

        r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfWeek> = $r4;

        $r5 = new java.util.BitSet;

        specialinvoke $r5.<java.util.BitSet: void <init>(int)>(31);

        r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfMonth> = $r5;

        $r6 = new java.util.BitSet;

        specialinvoke $r6.<java.util.BitSet: void <init>(int)>(12);

        r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet months> = $r6;

        r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.lang.String expression> = r7;

        r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.TimeZone timeZone> = r8;

        specialinvoke r0.<org.springframework.scheduling.support.CronSequenceGenerator: void parse(java.lang.String)>(r7);

        return;
    }

    public java.util.Date next(java.util.Date)
    {
        java.util.GregorianCalendar $r0;
        java.util.TimeZone $r2;
        java.util.Date r3, $r4;
        org.springframework.scheduling.support.CronSequenceGenerator r1;
        int $i0;

        r1 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        r3 := @parameter0: java.util.Date;

        $r0 = new java.util.GregorianCalendar;

        specialinvoke $r0.<java.util.GregorianCalendar: void <init>()>();

        $r2 = r1.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.TimeZone timeZone>;

        virtualinvoke $r0.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r2);

        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>(r3);

        virtualinvoke $r0.<java.util.Calendar: void add(int,int)>(13, 1);

        virtualinvoke $r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(1);

        specialinvoke r1.<org.springframework.scheduling.support.CronSequenceGenerator: void doNext(java.util.Calendar,int)>($r0, $i0);

        $r4 = virtualinvoke $r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r4;
    }

    private void doNext(java.util.Calendar, int)
    {
        java.lang.IllegalStateException $r10;
        java.lang.Integer $r11, $r12, $r13, $r14;
        java.util.ArrayList $r0;
        java.util.Calendar r1;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.springframework.scheduling.support.CronSequenceGenerator r3;
        java.util.List $r2;
        java.util.BitSet $r4, $r5, $r6, $r7, $r8, $r9;

        r3 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        r1 := @parameter0: java.util.Calendar;

        i4 := @parameter1: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $i0 = virtualinvoke r1.<java.util.Calendar: int get(int)>(13);

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r4 = r3.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet seconds>;

        $i1 = specialinvoke r3.<org.springframework.scheduling.support.CronSequenceGenerator: int findNext(java.util.BitSet,int,java.util.Calendar,int,int,java.util.List)>($r4, $i0, r1, 13, 12, $r2);

        if $i0 != $i1 goto label1;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r14);

     label1:
        $i2 = virtualinvoke r1.<java.util.Calendar: int get(int)>(12);

        $r5 = r3.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet minutes>;

        $i3 = specialinvoke r3.<org.springframework.scheduling.support.CronSequenceGenerator: int findNext(java.util.BitSet,int,java.util.Calendar,int,int,java.util.List)>($r5, $i2, r1, 12, 11, $r0);

        if $i2 != $i3 goto label2;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label3;

     label2:
        specialinvoke r3.<org.springframework.scheduling.support.CronSequenceGenerator: void doNext(java.util.Calendar,int)>(r1, i4);

     label3:
        $i5 = virtualinvoke r1.<java.util.Calendar: int get(int)>(11);

        $r6 = r3.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet hours>;

        $i6 = specialinvoke r3.<org.springframework.scheduling.support.CronSequenceGenerator: int findNext(java.util.BitSet,int,java.util.Calendar,int,int,java.util.List)>($r6, $i5, r1, 11, 7, $r0);

        if $i5 != $i6 goto label4;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label5;

     label4:
        specialinvoke r3.<org.springframework.scheduling.support.CronSequenceGenerator: void doNext(java.util.Calendar,int)>(r1, i4);

     label5:
        $i7 = virtualinvoke r1.<java.util.Calendar: int get(int)>(7);

        $i8 = virtualinvoke r1.<java.util.Calendar: int get(int)>(5);

        $r8 = r3.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfMonth>;

        $r7 = r3.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfWeek>;

        $i9 = specialinvoke r3.<org.springframework.scheduling.support.CronSequenceGenerator: int findNextDay(java.util.Calendar,java.util.BitSet,int,java.util.BitSet,int,java.util.List)>(r1, $r8, $i8, $r7, $i7, $r0);

        if $i8 != $i9 goto label6;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label7;

     label6:
        specialinvoke r3.<org.springframework.scheduling.support.CronSequenceGenerator: void doNext(java.util.Calendar,int)>(r1, i4);

     label7:
        $i10 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        $r9 = r3.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet months>;

        $i11 = specialinvoke r3.<org.springframework.scheduling.support.CronSequenceGenerator: int findNext(java.util.BitSet,int,java.util.Calendar,int,int,java.util.List)>($r9, $i10, r1, 2, 1, $r0);

        if $i10 == $i11 goto label9;

        $i12 = virtualinvoke r1.<java.util.Calendar: int get(int)>(1);

        $i13 = $i12 - i4;

        if $i13 <= 4 goto label8;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid cron expression led to runaway search for next trigger");

        throw $r10;

     label8:
        specialinvoke r3.<org.springframework.scheduling.support.CronSequenceGenerator: void doNext(java.util.Calendar,int)>(r1, i4);

     label9:
        return;
    }

    private int findNextDay(java.util.Calendar, java.util.BitSet, int, java.util.BitSet, int, java.util.List)
    {
        java.lang.IllegalStateException $r4;
        java.util.Calendar r1;
        int $i0, $i1, i2, i3, i4;
        org.springframework.scheduling.support.CronSequenceGenerator r2;
        java.lang.String $r6, $r8;
        boolean $z0, $z1;
        java.util.List r3;
        java.lang.StringBuilder $r5, $r7;
        java.util.BitSet r0, r9;

        r2 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        r1 := @parameter0: java.util.Calendar;

        r0 := @parameter1: java.util.BitSet;

        i2 := @parameter2: int;

        r9 := @parameter3: java.util.BitSet;

        i3 := @parameter4: int;

        r3 := @parameter5: java.util.List;

        i4 = 0;

        goto label2;

     label1:
        virtualinvoke r1.<java.util.Calendar: void add(int,int)>(5, 1);

        i2 = virtualinvoke r1.<java.util.Calendar: int get(int)>(5);

        i3 = virtualinvoke r1.<java.util.Calendar: int get(int)>(7);

        specialinvoke r2.<org.springframework.scheduling.support.CronSequenceGenerator: void reset(java.util.Calendar,java.util.List)>(r1, r3);

     label2:
        $z0 = virtualinvoke r0.<java.util.BitSet: boolean get(int)>(i2);

        if $z0 == 0 goto label3;

        $i1 = i3 - 1;

        $z1 = virtualinvoke r9.<java.util.BitSet: boolean get(int)>($i1);

        if $z1 != 0 goto label4;

     label3:
        $i0 = i4;

        i4 = i4 + 1;

        if $i0 < 366 goto label1;

     label4:
        if i4 < 366 goto label5;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Overflow in day for expression=");

        $r6 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.lang.String expression>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label5:
        return i2;
    }

    private int findNext(java.util.BitSet, int, java.util.Calendar, int, int, java.util.List)
    {
        java.lang.Integer $r5;
        java.util.List r3, $r6;
        java.util.Calendar r1;
        int i0, $i1, i2, i3, i4, $i6;
        org.springframework.scheduling.support.CronSequenceGenerator r2;
        java.util.BitSet r0;
        java.lang.Integer[] $r4;

        r2 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        r0 := @parameter0: java.util.BitSet;

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.Calendar;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r3 := @parameter5: java.util.List;

        $i1 = virtualinvoke r0.<java.util.BitSet: int nextSetBit(int)>(i0);

        i4 = $i1;

        $i6 = (int) -1;

        if $i1 != $i6 goto label1;

        virtualinvoke r1.<java.util.Calendar: void add(int,int)>(i3, 1);

        $r4 = newarray (java.lang.Integer)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke r2.<org.springframework.scheduling.support.CronSequenceGenerator: void reset(java.util.Calendar,java.util.List)>(r1, $r6);

        i4 = virtualinvoke r0.<java.util.BitSet: int nextSetBit(int)>(0);

     label1:
        if i4 == i0 goto label2;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(i2, i4);

        specialinvoke r2.<org.springframework.scheduling.support.CronSequenceGenerator: void reset(java.util.Calendar,java.util.List)>(r1, r3);

     label2:
        return i4;
    }

    private void reset(java.util.Calendar, java.util.List)
    {
        java.util.Iterator $r1;
        java.lang.Integer $r3;
        java.util.List r0;
        java.util.Calendar r4;
        byte $b1;
        int $i0;
        org.springframework.scheduling.support.CronSequenceGenerator r5;
        java.lang.Object $r2;
        boolean $z0;

        r5 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        r4 := @parameter0: java.util.Calendar;

        r0 := @parameter1: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if $i0 != 5 goto label2;

        $b1 = 1;

        goto label3;

     label2:
        $b1 = 0;

     label3:
        virtualinvoke r4.<java.util.Calendar: void set(int,int)>($i0, $b1);

     label4:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private void parse(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r20;
        java.lang.String[] $r1;
        java.lang.Integer $r21;
        int $i0, $i1;
        org.springframework.scheduling.support.CronSequenceGenerator r2;
        java.lang.String r0, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r22;
        boolean $z0;
        java.lang.IllegalArgumentException $r19;
        java.util.BitSet $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r17, $r18;

        r2 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] tokenizeToStringArray(java.lang.String,java.lang.String)>(r0, " ");

        $i0 = lengthof $r1;

        if $i0 == 6 goto label1;

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = newarray (java.lang.Object)[2];

        $i1 = lengthof $r1;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r20[0] = $r21;

        $r20[1] = r0;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("cron expression must consist of 6 fields (found %d in %s)", $r20);

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r19;

     label1:
        $r4 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet seconds>;

        $r3 = $r1[0];

        specialinvoke r2.<org.springframework.scheduling.support.CronSequenceGenerator: void setNumberHits(java.util.BitSet,java.lang.String,int,int)>($r4, $r3, 0, 60);

        $r6 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet minutes>;

        $r5 = $r1[1];

        specialinvoke r2.<org.springframework.scheduling.support.CronSequenceGenerator: void setNumberHits(java.util.BitSet,java.lang.String,int,int)>($r6, $r5, 0, 60);

        $r8 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet hours>;

        $r7 = $r1[2];

        specialinvoke r2.<org.springframework.scheduling.support.CronSequenceGenerator: void setNumberHits(java.util.BitSet,java.lang.String,int,int)>($r8, $r7, 0, 24);

        $r10 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfMonth>;

        $r9 = $r1[3];

        specialinvoke r2.<org.springframework.scheduling.support.CronSequenceGenerator: void setDaysOfMonth(java.util.BitSet,java.lang.String)>($r10, $r9);

        $r12 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet months>;

        $r11 = $r1[4];

        specialinvoke r2.<org.springframework.scheduling.support.CronSequenceGenerator: void setMonths(java.util.BitSet,java.lang.String)>($r12, $r11);

        $r14 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfWeek>;

        $r13 = $r1[5];

        $r15 = specialinvoke r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.lang.String replaceOrdinals(java.lang.String,java.lang.String)>($r13, "SUN,MON,TUE,WED,THU,FRI,SAT");

        specialinvoke r2.<org.springframework.scheduling.support.CronSequenceGenerator: void setDays(java.util.BitSet,java.lang.String,int)>($r14, $r15, 8);

        $r16 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfWeek>;

        $z0 = virtualinvoke $r16.<java.util.BitSet: boolean get(int)>(7);

        if $z0 == 0 goto label2;

        $r17 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfWeek>;

        virtualinvoke $r17.<java.util.BitSet: void set(int)>(0);

        $r18 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfWeek>;

        virtualinvoke $r18.<java.util.BitSet: void clear(int)>(7);

     label2:
        return;
    }

    private java.lang.String replaceOrdinals(java.lang.String, java.lang.String)
    {
        java.lang.String[] $r1;
        int $i0, i1;
        org.springframework.scheduling.support.CronSequenceGenerator r8;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String r0, $r2, $r3, $r4, $r7, r9;

        r8 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        r9 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>(r0);

        i1 = 0;

        goto label2;

     label1:
        $r2 = $r1[i1];

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        $r4 = virtualinvoke r9.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($r4, $r3, $r7);

        i1 = i1 + 1;

     label2:
        $i0 = lengthof $r1;

        if i1 < $i0 goto label1;

        return r9;
    }

    private void setDaysOfMonth(java.util.BitSet, java.lang.String)
    {
        org.springframework.scheduling.support.CronSequenceGenerator r0;
        java.util.BitSet r1;
        java.lang.String r2;

        r0 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        r1 := @parameter0: java.util.BitSet;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.springframework.scheduling.support.CronSequenceGenerator: void setDays(java.util.BitSet,java.lang.String,int)>(r1, r2, 32);

        virtualinvoke r1.<java.util.BitSet: void clear(int)>(0);

        return;
    }

    private void setDays(java.util.BitSet, java.lang.String, int)
    {
        org.springframework.scheduling.support.CronSequenceGenerator r0;
        int i0;
        java.util.BitSet r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        r1 := @parameter0: java.util.BitSet;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("?");

        if $z0 == 0 goto label1;

        r2 = "*";

     label1:
        specialinvoke r0.<org.springframework.scheduling.support.CronSequenceGenerator: void setNumberHits(java.util.BitSet,java.lang.String,int,int)>(r1, r2, 0, i0);

        return;
    }

    private void setMonths(java.util.BitSet, java.lang.String)
    {
        org.springframework.scheduling.support.CronSequenceGenerator r0;
        int $i0, i1;
        java.lang.String $r1, r4;
        java.util.BitSet $r2, r3;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        r3 := @parameter0: java.util.BitSet;

        r4 := @parameter1: java.lang.String;

        $r1 = specialinvoke r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.lang.String replaceOrdinals(java.lang.String,java.lang.String)>(r4, "FOO,JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC");

        $r2 = new java.util.BitSet;

        specialinvoke $r2.<java.util.BitSet: void <init>(int)>(13);

        specialinvoke r0.<org.springframework.scheduling.support.CronSequenceGenerator: void setNumberHits(java.util.BitSet,java.lang.String,int,int)>($r2, $r1, 1, 13);

        i1 = 1;

        goto label3;

     label1:
        $z0 = virtualinvoke $r2.<java.util.BitSet: boolean get(int)>(i1);

        if $z0 == 0 goto label2;

        $i0 = i1 - 1;

        virtualinvoke r3.<java.util.BitSet: void set(int)>($i0);

     label2:
        i1 = i1 + 1;

     label3:
        if i1 <= 12 goto label1;

        return;
    }

    private void setNumberHits(java.util.BitSet, java.lang.String, int, int)
    {
        java.lang.String[] $r1, $r3;
        java.lang.Integer $r9;
        int[] $r6, $r15;
        int i0, $i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        org.springframework.scheduling.support.CronSequenceGenerator r4;
        java.lang.String r0, r2, $r5, $r7, $r8, $r14;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r12, $r13;
        java.util.BitSet r10;

        r4 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        r10 := @parameter0: java.util.BitSet;

        r0 := @parameter1: java.lang.String;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] delimitedListToStringArray(java.lang.String,java.lang.String)>(r0, ",");

        i0 = lengthof $r1;

        i10 = 0;

        goto label8;

     label1:
        r2 = $r1[i10];

        $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("/");

        if $z0 != 0 goto label2;

        $r15 = specialinvoke r4.<org.springframework.scheduling.support.CronSequenceGenerator: int[] getRange(java.lang.String,int,int)>(r2, i2, i3);

        $i9 = $r15[0];

        $i7 = $r15[1];

        $i8 = $i7 + 1;

        virtualinvoke r10.<java.util.BitSet: void set(int,int)>($i9, $i8);

        goto label7;

     label2:
        $r3 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] delimitedListToStringArray(java.lang.String,java.lang.String)>(r2, "/");

        $i1 = lengthof $r3;

        if $i1 <= 2 goto label3;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Incrementer has more than two fields: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label3:
        $r5 = $r3[0];

        $r6 = specialinvoke r4.<org.springframework.scheduling.support.CronSequenceGenerator: int[] getRange(java.lang.String,int,int)>($r5, i2, i3);

        $r7 = $r3[0];

        $z1 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("-");

        if $z1 != 0 goto label4;

        $i6 = i3 - 1;

        $r6[1] = $i6;

     label4:
        $r8 = $r3[1];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r8);

        $i4 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        i11 = $r6[0];

        goto label6;

     label5:
        virtualinvoke r10.<java.util.BitSet: void set(int)>(i11);

        i11 = i11 + $i4;

     label6:
        $i5 = $r6[1];

        if i11 <= $i5 goto label5;

     label7:
        i10 = i10 + 1;

     label8:
        if i10 < i0 goto label1;

        return;
    }

    private int[] getRange(java.lang.String, int, int)
    {
        java.lang.Integer $r4, $r6, $r23;
        int[] r0;
        org.springframework.scheduling.support.CronSequenceGenerator r24;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r20, $r21;
        java.lang.String[] $r2;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, $i7, $i8, $i9, $i10;
        java.lang.String r1, $r3, $r5, $r12, $r18, $r22;
        java.lang.IllegalArgumentException $r7, $r13, $r19;

        r24 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        r1 := @parameter0: java.lang.String;

        i6 := @parameter1: int;

        i3 := @parameter2: int;

        r0 = newarray (int)[2];

        $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("*");

        if $z0 == 0 goto label1;

        r0[0] = i6;

        $i10 = i3 - 1;

        r0[1] = $i10;

        return r0;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("-");

        if $z1 != 0 goto label2;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r1);

        $i9 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        r0[1] = $i9;

        r0[0] = $i9;

        goto label4;

     label2:
        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] delimitedListToStringArray(java.lang.String,java.lang.String)>(r1, "-");

        $i0 = lengthof $r2;

        if $i0 <= 2 goto label3;

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Range has more than two fields: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r19;

     label3:
        $r3 = $r2[0];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r3);

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        r0[0] = $i1;

        $r5 = $r2[1];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r5);

        $i2 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        r0[1] = $i2;

     label4:
        $i4 = r0[0];

        if $i4 >= i3 goto label5;

        $i5 = r0[1];

        if $i5 < i3 goto label6;

     label5:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Range exceeds maximum (");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label6:
        $i7 = r0[0];

        if $i7 < i6 goto label7;

        $i8 = r0[1];

        if $i8 >= i6 goto label8;

     label7:
        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Range less than minimum (");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label8:
        return r0;
    }

    public boolean equals(java.lang.Object)
    {
        org.springframework.scheduling.support.CronSequenceGenerator r1, r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Object r0;
        java.util.BitSet $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r2 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.springframework.scheduling.support.CronSequenceGenerator;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.springframework.scheduling.support.CronSequenceGenerator) r0;

        $r4 = r1.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet months>;

        $r3 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet months>;

        $z1 = virtualinvoke $r4.<java.util.BitSet: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r6 = r1.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfMonth>;

        $r5 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfMonth>;

        $z2 = virtualinvoke $r6.<java.util.BitSet: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        $r8 = r1.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfWeek>;

        $r7 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfWeek>;

        $z3 = virtualinvoke $r8.<java.util.BitSet: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label2;

        $r10 = r1.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet hours>;

        $r9 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet hours>;

        $z4 = virtualinvoke $r10.<java.util.BitSet: boolean equals(java.lang.Object)>($r9);

        if $z4 == 0 goto label2;

        $r12 = r1.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet minutes>;

        $r11 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet minutes>;

        $z5 = virtualinvoke $r12.<java.util.BitSet: boolean equals(java.lang.Object)>($r11);

        if $z5 == 0 goto label2;

        $r14 = r1.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet seconds>;

        $r13 = r2.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet seconds>;

        $z6 = virtualinvoke $r14.<java.util.BitSet: boolean equals(java.lang.Object)>($r13);

        if $z6 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        org.springframework.scheduling.support.CronSequenceGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.util.BitSet $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        $r1 = r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet months>;

        $i0 = virtualinvoke $r1.<java.util.BitSet: int hashCode()>();

        $i1 = 17 * $i0;

        $i2 = 37 + $i1;

        $r2 = r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfMonth>;

        $i3 = virtualinvoke $r2.<java.util.BitSet: int hashCode()>();

        $i4 = 29 * $i3;

        $i5 = $i2 + $i4;

        $r3 = r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet daysOfWeek>;

        $i6 = virtualinvoke $r3.<java.util.BitSet: int hashCode()>();

        $i7 = 37 * $i6;

        $i8 = $i5 + $i7;

        $r4 = r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet hours>;

        $i9 = virtualinvoke $r4.<java.util.BitSet: int hashCode()>();

        $i10 = 41 * $i9;

        $i11 = $i8 + $i10;

        $r5 = r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet minutes>;

        $i12 = virtualinvoke $r5.<java.util.BitSet: int hashCode()>();

        $i13 = 53 * $i12;

        $i14 = $i11 + $i13;

        $r6 = r0.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.BitSet seconds>;

        $i15 = virtualinvoke $r6.<java.util.BitSet: int hashCode()>();

        $i16 = 61 * $i15;

        $i17 = $i14 + $i16;

        return $i17;
    }

    public java.lang.String toString()
    {
        org.springframework.scheduling.support.CronSequenceGenerator r1;
        java.lang.StringBuilder $r0, $r5, $r7;
        java.lang.Class $r2;
        java.lang.String $r3, $r4, $r6, $r8;

        r1 := @this: org.springframework.scheduling.support.CronSequenceGenerator;

        $r0 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r6 = r1.<org.springframework.scheduling.support.CronSequenceGenerator: java.lang.String expression>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
