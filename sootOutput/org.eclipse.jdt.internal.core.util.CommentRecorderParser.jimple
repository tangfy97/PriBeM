public class org.eclipse.jdt.internal.core.util.CommentRecorderParser extends org.eclipse.jdt.internal.compiler.parser.Parser
{
    int[] commentStops;
    int[] commentStarts;
    int commentPtr;
    protected static final int CommentIncrement;

    public void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter, boolean)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter r1;
        int[] $r2, $r3;
        int $i1;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r0;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.problem.ProblemReporter;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,boolean)>(r1, z0);

        $r2 = newarray (int)[10];

        r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[] commentStops> = $r2;

        $r3 = newarray (int)[10];

        r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[] commentStarts> = $r3;

        $i1 = (int) -1;

        r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int commentPtr> = $i1;

        return;
    }

    public void checkComment()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r12;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r0;
        int[] $r3, $r5, $r7, $r15;
        boolean $z0, $z1, z2, z3, $z4;
        org.eclipse.jdt.internal.compiler.parser.JavadocParser $r8, $r9, $r10, $r11, $r18;
        int $i0, i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i16, $i18;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r2, $r4, $r6, $r14, $r17;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r13, $r16;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        $z0 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: boolean diet>;

        if $z0 == 0 goto label01;

        $i13 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int dietInt>;

        if $i13 == 0 goto label02;

     label01:
        $r1 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        if $i0 < 0 goto label02;

        $i12 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int endStatementPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int flushCommentsDefinedPriorTo(int)>($i12);

     label02:
        z2 = 0;

        z3 = 0;

        $r17 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        i14 = $r17.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        goto label11;

     label03:
        $r2 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        i1 = $r3[i14];

        if i1 < 0 goto label10;

        $i2 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int modifiersSourceStart>;

        $i16 = (int) -1;

        if $i2 == $i16 goto label04;

        $i11 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int modifiersSourceStart>;

        if $i11 < i1 goto label10;

     label04:
        $r4 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r5 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i3 = $r5[i14];

        if $i3 >= 0 goto label05;

        goto label10;

     label05:
        z3 = 1;

        $r6 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r7 = $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i4 = $r7[i14];

        i5 = $i4 - 1;

        $r8 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $z1 = $r8.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean shouldReportProblems>;

        if $z1 == 0 goto label08;

        $r18 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r16 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r16 == null goto label06;

        $i10 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int lastJavadocEnd>;

        if i5 > $i10 goto label06;

        $z4 = 0;

        goto label07;

     label06:
        $z4 = 1;

     label07:
        $r18.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean reportProblems> = $z4;

        goto label09;

     label08:
        $r9 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r9.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean reportProblems> = 0;

     label09:
        $r10 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        z2 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean checkDeprecation(int)>(i14);

        $r11 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r12 = $r11.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: org.eclipse.jdt.internal.compiler.ast.Javadoc docComment>;

        r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r12;

        $r13 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r13 != null goto label12;

        r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int lastJavadocEnd> = i5;

        goto label12;

     label10:
        $i18 = (int) -1;

        i14 = i14 + $i18;

     label11:
        if i14 >= 0 goto label03;

     label12:
        if z2 == 0 goto label13;

        virtualinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void checkAndSetModifiers(int)>(1048576);

     label13:
        if i14 < 0 goto label14;

        if z3 == 0 goto label14;

        $r14 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r15 = $r14.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i6 = $r15[i14];

        r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int modifiersSourceStart> = $i6;

        $i7 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int modifiersSourceStart>;

        if $i7 >= 0 goto label14;

        $i8 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int modifiersSourceStart>;

        $i9 = neg $i8;

        r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int modifiersSourceStart> = $i9;

     label14:
        return;
    }

    protected void consumeClassHeader()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r0;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        $r1 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void pushOnCommentsStack(int,int)>(0, $i0);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassHeader()>();

        return;
    }

    protected void consumeEmptyTypeDeclaration()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r0;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        $r1 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void pushOnCommentsStack(int,int)>(0, $i0);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyTypeDeclaration()>();

        return;
    }

    protected void consumeInterfaceHeader()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r0;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        $r1 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void pushOnCommentsStack(int,int)>(0, $i0);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInterfaceHeader()>();

        return;
    }

    public boolean containsComment(int, int)
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r2;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r0;
        int[] $r3;
        int i0, i1, i2, i3, $i5;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        i2 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        goto label6;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        i3 = $r3[i2];

        if i3 >= 0 goto label2;

        i3 = neg i3;

     label2:
        if i3 >= i0 goto label3;

        goto label5;

     label3:
        if i3 <= i1 goto label4;

        goto label5;

     label4:
        return 1;

     label5:
        $i5 = (int) -1;

        i2 = i2 + $i5;

     label6:
        if i2 >= 0 goto label1;

        return 0;
    }

    protected org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration endParse(int)
    {
        int[][] $r2, $r4;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r3;
        int i0, $i1;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r0;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r1;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration endParse(int)>(i0);

        $r2 = $r1.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: int[][] comments>;

        if $r2 != null goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i1 = $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void pushOnCommentsStack(int,int)>(0, $i1);

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[][] getCommentsPositions()>();

        $r1.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: int[][] comments> = $r4;

     label1:
        return $r1;
    }

    public int flushCommentsDefinedPriorTo(int)
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r2, $r4, $r5, $r8, $r9, $r12, $r13, $r16, $r17, $r20, $r21, $r24, $r25, $r28, $r29, $r32, $r33, $r36, $r37, $r40, $r41, $r44, $r45, $r48, $r49, $r52, $r54, $r55, $r57, $r58, $r60;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r0;
        int[] $r3, $r6, $r7, $r10, $r11, $r14, $r15, $r18, $r19, $r22, $r23, $r26, $r27, $r30, $r31, $r34, $r35, $r38, $r39, $r42, $r43, $r46, $r47, $r50, $r51, $r53, $r56, $r59;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i29, i30, i31, i32, i33, $i34, $i36, $i38, $i40;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        i29 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        i0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        if i0 >= 0 goto label01;

        return i29;

     label01:
        i30 = i0;

        i31 = 0;

        goto label05;

     label02:
        $r2 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        i32 = $r3[i30];

        if i32 >= 0 goto label03;

        i32 = neg i32;

     label03:
        if i32 > i29 goto label04;

        goto label06;

     label04:
        $i36 = (int) -1;

        i30 = i30 + $i36;

        i31 = i31 + 1;

     label05:
        if i30 >= 0 goto label02;

     label06:
        if i31 <= 0 goto label10;

        goto label09;

     label07:
        $i38 = (int) -1;

        i33 = $i24 + $i38;

        $r54 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r56 = $r54.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r55 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i25 = $r55.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $i26 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>(i29, $r56, 0, $i25);

        $r57 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r59 = $r57.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r58 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i27 = $r58.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $i28 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>(i33, $r59, 0, $i27);

        if $i26 == $i28 goto label08;

        goto label10;

     label08:
        i29 = i33;

        $i40 = (int) -1;

        i31 = i31 + $i40;

        i30 = i30 + 1;

     label09:
        if i30 >= i0 goto label10;

        $r52 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r53 = $r52.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i22 = i30 + 1;

        $i23 = $r53[$i22];

        $i24 = neg $i23;

        if $i24 > 0 goto label07;

     label10:
        if i30 >= 0 goto label11;

        return i29;

     label11:
        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void pushOnCommentsStack(int,int)>(0, i30);

        tableswitch(i31)
        {
            case 0: goto label12;
            case 1: goto label14;
            case 2: goto label13;
            default: goto label15;
        };

     label12:
        goto label16;

     label13:
        $r4 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r7 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $r5 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r6 = $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i1 = i30 + 1;

        $i2 = $r6[$i1];

        $r7[0] = $i2;

        $r8 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r11 = $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $r9 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r10 = $r9.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i3 = i30 + 1;

        $i4 = $r10[$i3];

        $r11[0] = $i4;

        $r12 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r15 = $r12.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        $r13 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        $i5 = i30 + 1;

        $i6 = $r14[$i5];

        $r15[0] = $i6;

        $r16 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r19 = $r16.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $r17 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r18 = $r17.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i7 = i30 + 2;

        $i8 = $r18[$i7];

        $r19[1] = $i8;

        $r20 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r23 = $r20.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $r21 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r22 = $r21.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i9 = i30 + 2;

        $i10 = $r22[$i9];

        $r23[1] = $i10;

        $r24 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r27 = $r24.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        $r25 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r26 = $r25.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        $i11 = i30 + 2;

        $i12 = $r26[$i11];

        $r27[1] = $i12;

        goto label16;

     label14:
        $r28 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r31 = $r28.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $r29 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r30 = $r29.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i13 = i30 + 1;

        $i14 = $r30[$i13];

        $r31[0] = $i14;

        $r32 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r35 = $r32.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $r33 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r34 = $r33.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i15 = i30 + 1;

        $i16 = $r34[$i15];

        $r35[0] = $i16;

        $r36 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r39 = $r36.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        $r37 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r38 = $r37.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        $i17 = i30 + 1;

        $i18 = $r38[$i17];

        $r39[0] = $i18;

        goto label16;

     label15:
        $r40 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r43 = $r40.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i19 = i30 + 1;

        $r41 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r42 = $r41.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r43, $i19, $r42, 0, i31);

        $r44 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r47 = $r44.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i20 = i30 + 1;

        $r45 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r46 = $r45.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r47, $i20, $r46, 0, i31);

        $r48 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r51 = $r48.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        $i21 = i30 + 1;

        $r49 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r50 = $r49.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r51, $i21, $r50, 0, i31);

     label16:
        $r60 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i34 = i31 - 1;

        $r60.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr> = $i34;

        return i29;
    }

    public int[][] getCommentsPositions()
    {
        int[][] r1;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r0;
        int[] $r2, $r3, $r4, $r5;
        int $i0, $i1, i2, $i3, $i4, i5;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        $i0 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int commentPtr>;

        $i1 = $i0 + 1;

        r1 = newmultiarray (int)[$i1][2];

        i5 = 0;

        i2 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int commentPtr>;

        goto label2;

     label1:
        $r3 = r1[i5];

        $r2 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[] commentStarts>;

        $i3 = $r2[i5];

        $r3[0] = $i3;

        $r5 = r1[i5];

        $r4 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[] commentStops>;

        $i4 = $r4[i5];

        $r5[1] = $i4;

        i5 = i5 + 1;

     label2:
        if i5 <= i2 goto label1;

        return r1;
    }

    public void initialize(boolean)
    {
        int $i1;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r0;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize(boolean)>(z0);

        $i1 = (int) -1;

        r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int commentPtr> = $i1;

        return;
    }

    public void initialize()
    {
        int $i1;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r0;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize()>();

        $i1 = (int) -1;

        r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int commentPtr> = $i1;

        return;
    }

    public void initializeScanner()
    {
        org.eclipse.jdt.internal.core.util.CommentRecorderScanner $r9;
        long $l1;
        char[][] $r7, $r8;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r0;
        int $i0, $i3;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        $r9 = new org.eclipse.jdt.internal.core.util.CommentRecorderScanner;

        $r2 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $i0 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int getSeverity(long)>(256L);

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r3 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l1 = $r3.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $r4 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $r8 = $r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskTags>;

        $r5 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $r7 = $r5.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskPriorites>;

        $r6 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z0 = $r6.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean isTaskCaseSensitive>;

        specialinvoke $r9.<org.eclipse.jdt.internal.core.util.CommentRecorderScanner: void <init>(boolean,boolean,boolean,long,char[][],char[][],boolean)>(0, 0, $z1, $l1, $r8, $r7, $z0);

        r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner> = $r9;

        return;
    }

    private void pushOnCommentsStack(int, int)
    {
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r0;
        int[] $r2, $r4, $r5, $r6, $r7, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r20;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, $i24, $i26, $i28;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r3, $r8, $r11, $r19;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i20 = i0;

        goto label10;

     label01:
        $r1 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r2 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i2 = $r2[i20];

        if $i2 >= 0 goto label02;

        $r19 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r20 = $r19.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i19 = $r20[i20];

        $i21 = neg $i19;

        goto label03;

     label02:
        $r3 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r4 = $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i21 = $r4[i20];

     label03:
        i3 = $i21;

        $i4 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int commentPtr>;

        $i24 = (int) -1;

        if $i4 != $i24 goto label04;

        $i26 = (int) -1;

        $i22 = $i26;

        goto label06;

     label04:
        $r5 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[] commentStarts>;

        $i5 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int commentPtr>;

        $i6 = $r5[$i5];

        if $i6 >= 0 goto label05;

        $r18 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[] commentStarts>;

        $i17 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int commentPtr>;

        $i18 = $r18[$i17];

        $i22 = neg $i18;

        goto label06;

     label05:
        $r6 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[] commentStarts>;

        $i7 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int commentPtr>;

        $i22 = $r6[$i7];

     label06:
        $i28 = (int) -1;

        if $i22 == $i28 goto label07;

        if i3 <= $i22 goto label09;

     label07:
        $r7 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[] commentStarts>;

        $i16 = lengthof $r7;

        $i8 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int commentPtr>;

        $i9 = $i8 + 1;

        r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int commentPtr> = $i9;

        if $i9 < $i16 goto label08;

        $r15 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[] commentStarts>;

        $i14 = $i16 + 100;

        $r14 = newarray (int)[$i14];

        r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[] commentStarts> = $r14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, $r14, 0, $i16);

        $r17 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[] commentStops>;

        $i15 = $i16 + 100;

        $r16 = newarray (int)[$i15];

        r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[] commentStops> = $r16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, 0, $r16, 0, $i16);

     label08:
        $r10 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[] commentStarts>;

        $i11 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int commentPtr>;

        $r8 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r9 = $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i10 = $r9[i20];

        $r10[$i11] = $i10;

        $r13 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[] commentStops>;

        $i13 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int commentPtr>;

        $r11 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r12 = $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i12 = $r12[i20];

        $r13[$i13] = $i12;

     label09:
        i20 = i20 + 1;

     label10:
        if i20 <= i1 goto label01;

        return;
    }

    protected void resetModifiers()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r0;

        r0 := @this: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        $r1 = r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void pushOnCommentsStack(int,int)>(0, $i0);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        return;
    }

    public static void <clinit>()
    {
        <org.eclipse.jdt.internal.core.util.CommentRecorderParser: int CommentIncrement> = 100;

        return;
    }
}
