public class org.springframework.expression.spel.ast.VariableReference extends org.springframework.expression.spel.ast.SpelNodeImpl
{
    private static final java.lang.String THIS;
    private static final java.lang.String ROOT;
    private final java.lang.String name;

    public void <init>(java.lang.String, int)
    {
        org.springframework.expression.spel.ast.VariableReference r0;
        int i0;
        java.lang.String r2;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1;

        r0 := @this: org.springframework.expression.spel.ast.VariableReference;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[0];

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, $r1);

        r0.<org.springframework.expression.spel.ast.VariableReference: java.lang.String name> = r2;

        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.spel.SpelEvaluationException
    {
        org.springframework.expression.spel.ast.VariableReference r0;
        org.springframework.expression.spel.ExpressionState r3;
        java.lang.String $r1, $r2, $r4;
        org.springframework.expression.TypedValue $r5, $r6, $r7;
        boolean $z0, $z1;

        r0 := @this: org.springframework.expression.spel.ast.VariableReference;

        r3 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = r0.<org.springframework.expression.spel.ast.VariableReference: java.lang.String name>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("this");

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r3.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>();

        return $r7;

     label1:
        $r2 = r0.<org.springframework.expression.spel.ast.VariableReference: java.lang.String name>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("root");

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r3.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>();

        return $r6;

     label2:
        $r4 = r0.<org.springframework.expression.spel.ast.VariableReference: java.lang.String name>;

        $r5 = virtualinvoke r3.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue lookupVariable(java.lang.String)>($r4);

        return $r5;
    }

    public void setValue(org.springframework.expression.spel.ExpressionState, java.lang.Object) throws org.springframework.expression.spel.SpelEvaluationException
    {
        org.springframework.expression.spel.ast.VariableReference r1;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object r2;
        java.lang.String $r3;

        r1 := @this: org.springframework.expression.spel.ast.VariableReference;

        r0 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r2 := @parameter1: java.lang.Object;

        $r3 = r1.<org.springframework.expression.spel.ast.VariableReference: java.lang.String name>;

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void setVariable(java.lang.String,java.lang.Object)>($r3, r2);

        return;
    }

    public java.lang.String toStringAST()
    {
        org.springframework.expression.spel.ast.VariableReference r1;
        java.lang.StringBuilder $r0, $r3;
        java.lang.String $r2, $r4;

        r1 := @this: org.springframework.expression.spel.ast.VariableReference;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("#");

        $r2 = r1.<org.springframework.expression.spel.ast.VariableReference: java.lang.String name>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public boolean isWritable(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.spel.SpelEvaluationException
    {
        org.springframework.expression.spel.ast.VariableReference r0;
        org.springframework.expression.spel.ExpressionState r3;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.expression.spel.ast.VariableReference;

        r3 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = r0.<org.springframework.expression.spel.ast.VariableReference: java.lang.String name>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("this");

        if $z0 != 0 goto label1;

        $r2 = r0.<org.springframework.expression.spel.ast.VariableReference: java.lang.String name>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("root");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 0;

        goto label3;

     label2:
        $z2 = 1;

     label3:
        return $z2;
    }

    public static void <clinit>()
    {
        <org.springframework.expression.spel.ast.VariableReference: java.lang.String ROOT> = "root";

        <org.springframework.expression.spel.ast.VariableReference: java.lang.String THIS> = "this";

        return;
    }
}
