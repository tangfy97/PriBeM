public class org.apache.batik.bridge.BaseScriptingEnvironment extends java.lang.Object
{
    public static final java.lang.String INLINE_SCRIPT_DESCRIPTION;
    public static final java.lang.String EVENT_SCRIPT_DESCRIPTION;
    protected static final java.lang.String EVENT_NAME;
    protected static final java.lang.String ALTERNATE_EVENT_NAME;
    protected static final java.lang.String APPLICATION_ECMASCRIPT;
    protected org.apache.batik.bridge.BridgeContext bridgeContext;
    protected org.apache.batik.bridge.UserAgent userAgent;
    protected org.w3c.dom.Document document;
    protected org.apache.batik.util.ParsedURL docPURL;
    protected java.util.Set languages;
    protected org.apache.batik.script.Interpreter interpreter;

    public static boolean isDynamicDocument(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Document)
    {
        org.w3c.dom.Document r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1;
        org.apache.batik.bridge.BridgeContext r10;
        org.w3c.dom.Element $r1, $r11;

        r10 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Document;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        if $r1 == null goto label7;

        $r2 = "http://www.w3.org/2000/svg";

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label7;

        $r4 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onabort");

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        $r5 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onerror");

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 <= 0 goto label2;

        return 1;

     label2:
        $r6 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onresize");

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i2 <= 0 goto label3;

        return 1;

     label3:
        $r7 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onunload");

        $i3 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i3 <= 0 goto label4;

        return 1;

     label4:
        $r8 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onscroll");

        $i4 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i4 <= 0 goto label5;

        return 1;

     label5:
        $r9 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onzoom");

        $i5 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i5 <= 0 goto label6;

        return 1;

     label6:
        $r11 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $z1 = staticinvoke <org.apache.batik.bridge.BaseScriptingEnvironment: boolean isDynamicElement(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r10, $r11);

        return $z1;

     label7:
        return 0;
    }

    public static boolean isDynamicElement(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        java.util.List $r3;
        org.w3c.dom.Element r1;
        org.w3c.dom.Document $r2;
        org.apache.batik.bridge.BridgeContext r0;
        boolean $z0;

        r0 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.w3c.dom.Element;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r3 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: java.util.List getBridgeExtensions(org.w3c.dom.Document)>($r2);

        $z0 = staticinvoke <org.apache.batik.bridge.BaseScriptingEnvironment: boolean isDynamicElement(org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext,java.util.List)>(r1, r0, $r3);

        return $z0;
    }

    public static boolean isDynamicElement(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext, java.util.List)
    {
        boolean $z0, $z1, $z2, $z3;
        org.apache.batik.bridge.BridgeContext r6;
        org.apache.batik.bridge.BridgeExtension r22;
        java.util.List r0;
        short $s0;
        org.w3c.dom.Node r23;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r4, $r5, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.util.Iterator $r1;
        org.w3c.dom.Element r3, $r7;
        java.lang.Object $r2;

        r3 := @parameter0: org.w3c.dom.Element;

        r6 := @parameter1: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter2: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label02;

     label01:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.apache.batik.bridge.BridgeExtension) $r2;

        $z1 = interfaceinvoke r22.<org.apache.batik.bridge.BridgeExtension: boolean isDynamicElement(org.w3c.dom.Element)>(r3);

        if $z1 == 0 goto label02;

        return 1;

     label02:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label01;

        $r4 = "http://www.w3.org/2000/svg";

        $r5 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label16;

        $r8 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onkeyup");

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 <= 0 goto label03;

        return 1;

     label03:
        $r9 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onkeydown");

        $i2 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i2 <= 0 goto label04;

        return 1;

     label04:
        $r10 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onkeypress");

        $i3 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i3 <= 0 goto label05;

        return 1;

     label05:
        $r11 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onload");

        $i4 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i4 <= 0 goto label06;

        return 1;

     label06:
        $r12 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onerror");

        $i5 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i5 <= 0 goto label07;

        return 1;

     label07:
        $r13 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onactivate");

        $i6 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i6 <= 0 goto label08;

        return 1;

     label08:
        $r14 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onclick");

        $i7 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i7 <= 0 goto label09;

        return 1;

     label09:
        $r15 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onfocusin");

        $i8 = virtualinvoke $r15.<java.lang.String: int length()>();

        if $i8 <= 0 goto label10;

        return 1;

     label10:
        $r16 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onfocusout");

        $i9 = virtualinvoke $r16.<java.lang.String: int length()>();

        if $i9 <= 0 goto label11;

        return 1;

     label11:
        $r17 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onmousedown");

        $i10 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i10 <= 0 goto label12;

        return 1;

     label12:
        $r18 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onmousemove");

        $i11 = virtualinvoke $r18.<java.lang.String: int length()>();

        if $i11 <= 0 goto label13;

        return 1;

     label13:
        $r19 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onmouseout");

        $i12 = virtualinvoke $r19.<java.lang.String: int length()>();

        if $i12 <= 0 goto label14;

        return 1;

     label14:
        $r20 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onmouseover");

        $i13 = virtualinvoke $r20.<java.lang.String: int length()>();

        if $i13 <= 0 goto label15;

        return 1;

     label15:
        $r21 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onmouseup");

        $i14 = virtualinvoke $r21.<java.lang.String: int length()>();

        if $i14 <= 0 goto label16;

        return 1;

     label16:
        r23 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label19;

     label17:
        $s0 = interfaceinvoke r23.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label18;

        $r7 = (org.w3c.dom.Element) r23;

        $z3 = staticinvoke <org.apache.batik.bridge.BaseScriptingEnvironment: boolean isDynamicElement(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r6, $r7);

        if $z3 == 0 goto label18;

        return 1;

     label18:
        r23 = interfaceinvoke r23.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label19:
        if r23 != null goto label17;

        return 0;
    }

    public void <init>(org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.bridge.BaseScriptingEnvironment r0;
        org.w3c.dom.svg.SVGDocument $r6;
        org.apache.batik.bridge.BridgeContext r2, $r8;
        java.util.HashSet $r1;
        org.apache.batik.bridge.UserAgent $r9;
        org.apache.batik.util.ParsedURL $r4;
        org.w3c.dom.Document $r3, $r5;
        java.lang.String $r7;

        r0 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        r2 := @parameter0: org.apache.batik.bridge.BridgeContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.apache.batik.bridge.BaseScriptingEnvironment: java.util.Set languages> = $r1;

        r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.BridgeContext bridgeContext> = r2;

        $r3 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document getDocument()>();

        r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.w3c.dom.Document document> = $r3;

        $r4 = new org.apache.batik.util.ParsedURL;

        $r5 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.w3c.dom.Document document>;

        $r6 = (org.w3c.dom.svg.SVGDocument) $r5;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.svg.SVGDocument: java.lang.String getURL()>();

        specialinvoke $r4.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String)>($r7);

        r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.util.ParsedURL docPURL> = $r4;

        $r8 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $r9 = virtualinvoke $r8.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.UserAgent userAgent> = $r9;

        return;
    }

    public org.apache.batik.script.Window createWindow(org.apache.batik.script.Interpreter, java.lang.String)
    {
        org.apache.batik.bridge.BaseScriptingEnvironment r1;
        org.apache.batik.script.Interpreter r2;
        org.apache.batik.bridge.BaseScriptingEnvironment$Window $r0;
        java.lang.String r3;

        r1 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        r2 := @parameter0: org.apache.batik.script.Interpreter;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.apache.batik.bridge.BaseScriptingEnvironment$Window;

        specialinvoke $r0.<org.apache.batik.bridge.BaseScriptingEnvironment$Window: void <init>(org.apache.batik.bridge.BaseScriptingEnvironment,org.apache.batik.script.Interpreter,java.lang.String)>(r1, r2, r3);

        return $r0;
    }

    public org.apache.batik.script.Window createWindow()
    {
        org.apache.batik.bridge.BaseScriptingEnvironment r0;
        org.apache.batik.script.Window $r1;

        r0 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.script.Window createWindow(org.apache.batik.script.Interpreter,java.lang.String)>(null, null);

        return $r1;
    }

    public org.apache.batik.script.Interpreter getInterpreter()
    {
        org.apache.batik.bridge.BaseScriptingEnvironment r0;
        org.apache.batik.script.Interpreter $r1, $r6, $r7;
        org.w3c.dom.Element $r3;
        org.w3c.dom.Document $r2;
        java.lang.String $r5;
        org.w3c.dom.svg.SVGSVGElement r4;

        r0 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        $r1 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.script.Interpreter interpreter>;

        if $r1 == null goto label1;

        $r7 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.script.Interpreter interpreter>;

        return $r7;

     label1:
        $r2 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.w3c.dom.Document document>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r4 = (org.w3c.dom.svg.SVGSVGElement) $r3;

        $r5 = interfaceinvoke r4.<org.w3c.dom.svg.SVGSVGElement: java.lang.String getContentScriptType()>();

        $r6 = virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.script.Interpreter getInterpreter(java.lang.String)>($r5);

        return $r6;
    }

    public org.apache.batik.script.Interpreter getInterpreter(java.lang.String)
    {
        org.apache.batik.bridge.BaseScriptingEnvironment r0;
        org.apache.batik.script.Interpreter $r3, $r4, $r6, $r8;
        java.util.Set $r5, $r7, $r9, $r10;
        org.apache.batik.bridge.BridgeContext $r2;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $r3 = virtualinvoke $r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.script.Interpreter getInterpreter(java.lang.String)>(r1);

        r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.script.Interpreter interpreter> = $r3;

        $r4 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.script.Interpreter interpreter>;

        if $r4 != null goto label2;

        $r9 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: java.util.Set languages>;

        $z1 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        return null;

     label1:
        $r10 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: java.util.Set languages>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return null;

     label2:
        $r5 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: java.util.Set languages>;

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r7 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: java.util.Set languages>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r8 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.script.Interpreter interpreter>;

        virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: void initializeEnvironment(org.apache.batik.script.Interpreter,java.lang.String)>($r8, r1);

     label3:
        $r6 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.script.Interpreter interpreter>;

        return $r6;
    }

    public void initializeEnvironment(org.apache.batik.script.Interpreter, java.lang.String)
    {
        org.apache.batik.bridge.BaseScriptingEnvironment r1;
        org.apache.batik.script.Interpreter r0;
        java.lang.String r2;
        org.apache.batik.script.Window $r3;

        r1 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        r0 := @parameter0: org.apache.batik.script.Interpreter;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r1.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.script.Window createWindow(org.apache.batik.script.Interpreter,java.lang.String)>(r0, r2);

        interfaceinvoke r0.<org.apache.batik.script.Interpreter: void bindObject(java.lang.String,java.lang.Object)>("window", $r3);

        return;
    }

    public void loadScripts()
    {
        java.util.jar.Manifest $r91;
        byte[] r83;
        java.io.PushbackInputStream $r94;
        java.lang.Integer $r98;
        byte $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b14, $b15, $b16, $b17, $b18, $b19;
        org.w3c.dom.Document $r1, $r11, $r51, $r55;
        java.lang.Object[] $r12;
        org.w3c.dom.svg.SVGDocument $r52, r85;
        short $s4, $s5;
        java.lang.StringBuffer $r15, $r17, $r18, $r62, $r63, $r97, $r99, $r101;
        java.io.IOException $r65;
        java.io.InputStreamReader $r93, $r95, $r96;
        java.io.StringReader $r100;
        java.lang.SecurityException $r56;
        org.apache.batik.script.Interpreter $r6;
        java.util.jar.Attributes $r47, $r77;
        org.w3c.dom.svg.EventListenerInitializer r79;
        org.w3c.dom.Node $r3, $r21, r86;
        int $i0, $i1, $i2, $i3, $i6, i20, $i21, $i23, $i24, $i26, $i27, $i29, $i30, $i32, $i33, $i35, $i36, $i38, $i39, $i41, $i42, $i44, $i45, $i47, $i48, $i49;
        java.io.PrintStream $r61;
        org.w3c.dom.NodeList $r2;
        java.lang.Class $r49, $r53;
        java.lang.Object $r50, $r54;
        org.apache.batik.bridge.BaseScriptingEnvironment r0;
        org.apache.batik.bridge.BridgeContext $r9;
        java.io.Reader r80;
        java.lang.Exception $r69;
        org.apache.batik.bridge.UserAgent $r57, $r58, $r66, $r67, $r70, $r71;
        org.apache.batik.util.ParsedURL $r8, $r39, $r87, $r92;
        org.apache.batik.bridge.DocumentJarClassLoader $r90;
        java.lang.String $r5, $r7, $r13, $r16, $r19, $r23, $r25, $r27, $r29, $r30, $r31, $r35, $r37, $r40, $r43, $r48, $r64, r74, $r78, r81, r82;
        org.apache.batik.dom.AbstractElement r4;
        org.apache.batik.bridge.DocumentLoader $r10;
        java.net.URL $r44, r75, $r88, $r89;
        org.apache.batik.script.InterpreterException $r59;
        boolean $z0, $z1, $z2;
        org.apache.batik.script.ScriptHandler r76;
        java.io.UnsupportedEncodingException $r68;
        org.apache.batik.script.Window r73;
        java.net.MalformedURLException $r72;
        java.io.InputStream $r28, $r46;

        r0 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        r73 = null;

        $r1 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.w3c.dom.Document document>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "script");

        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 != 0 goto label01;

        return;

     label01:
        i20 = 0;

        goto label43;

     label02:
        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i20);

        r4 = (org.apache.batik.dom.AbstractElement) $r3;

        $r5 = virtualinvoke r4.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "type");

        r74 = $r5;

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 != 0 goto label03;

        r74 = "text/ecmascript";

     label03:
        $z0 = virtualinvoke r74.<java.lang.String: boolean equals(java.lang.Object)>("application/java-archive");

        if $z0 == 0 goto label16;

     label04:
        $r35 = staticinvoke <org.apache.batik.dom.util.XLinkSupport: java.lang.String getXLinkHref(org.w3c.dom.Element)>(r4);

        $r87 = new org.apache.batik.util.ParsedURL;

        $r37 = virtualinvoke r4.<org.apache.batik.dom.AbstractNode: java.lang.String getBaseURI()>();

        specialinvoke $r87.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String,java.lang.String)>($r37, $r35);

        virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: void checkCompatibleScriptURL(java.lang.String,org.apache.batik.util.ParsedURL)>(r74, $r87);

        r75 = null;

     label05:
        $r88 = new java.net.URL;

        $r39 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.util.ParsedURL docPURL>;

        $r40 = virtualinvoke $r39.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

        specialinvoke $r88.<java.net.URL: void <init>(java.lang.String)>($r40);

        r75 = $r88;

     label06:
        goto label08;

     label07:
        $r72 := @caughtexception;

     label08:
        $r90 = new org.apache.batik.bridge.DocumentJarClassLoader;

        $r89 = new java.net.URL;

        $r43 = virtualinvoke $r87.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

        specialinvoke $r89.<java.net.URL: void <init>(java.lang.String)>($r43);

        specialinvoke $r90.<org.apache.batik.bridge.DocumentJarClassLoader: void <init>(java.net.URL,java.net.URL)>($r89, r75);

        $r44 = virtualinvoke $r90.<java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>("META-INF/MANIFEST.MF");

        if $r44 != null goto label09;

        goto label42;

     label09:
        $r91 = new java.util.jar.Manifest;

        $r46 = virtualinvoke $r44.<java.net.URL: java.io.InputStream openStream()>();

        specialinvoke $r91.<java.util.jar.Manifest: void <init>(java.io.InputStream)>($r46);

        $r47 = virtualinvoke $r91.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();

        $r48 = virtualinvoke $r47.<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>("Script-Handler");

        if $r48 == null goto label11;

        $r53 = virtualinvoke $r90.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r48);

        $r54 = virtualinvoke $r53.<java.lang.Class: java.lang.Object newInstance()>();

        r76 = (org.apache.batik.script.ScriptHandler) $r54;

        if r73 != null goto label10;

        r73 = virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.script.Window createWindow()>();

     label10:
        $r55 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.w3c.dom.Document document>;

        interfaceinvoke r76.<org.apache.batik.script.ScriptHandler: void run(org.w3c.dom.Document,org.apache.batik.script.Window)>($r55, r73);

     label11:
        $r77 = virtualinvoke $r91.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();

        $r78 = virtualinvoke $r77.<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>("SVG-Handler-Class");

        if $r78 == null goto label13;

        $r49 = virtualinvoke $r90.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r78);

        $r50 = virtualinvoke $r49.<java.lang.Class: java.lang.Object newInstance()>();

        r79 = (org.w3c.dom.svg.EventListenerInitializer) $r50;

        if r73 != null goto label12;

        r73 = virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.script.Window createWindow()>();

     label12:
        $r51 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.w3c.dom.Document document>;

        $r52 = (org.w3c.dom.svg.SVGDocument) $r51;

        interfaceinvoke r79.<org.w3c.dom.svg.EventListenerInitializer: void initializeEventListeners(org.w3c.dom.svg.SVGDocument)>($r52);

     label13:
        goto label15;

     label14:
        $r69 := @caughtexception;

        $r70 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.UserAgent userAgent>;

        if $r70 == null goto label15;

        $r71 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r71.<org.apache.batik.bridge.UserAgent: void displayError(java.lang.Exception)>($r69);

     label15:
        goto label42;

     label16:
        $r6 = virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.script.Interpreter getInterpreter(java.lang.String)>(r74);

        if $r6 != null goto label17;

        goto label42;

     label17:
        $r7 = staticinvoke <org.apache.batik.dom.util.XLinkSupport: java.lang.String getXLinkHref(org.w3c.dom.Element)>(r4);

        r80 = null;

        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i2 <= 0 goto label31;

        r81 = $r7;

        $r92 = new org.apache.batik.util.ParsedURL;

        $r27 = virtualinvoke r4.<org.apache.batik.dom.AbstractNode: java.lang.String getBaseURI()>();

        specialinvoke $r92.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String,java.lang.String)>($r27, $r7);

        virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: void checkCompatibleScriptURL(java.lang.String,org.apache.batik.util.ParsedURL)>(r74, $r92);

        $r28 = virtualinvoke $r92.<org.apache.batik.util.ParsedURL: java.io.InputStream openStream()>();

        $r29 = virtualinvoke $r92.<org.apache.batik.util.ParsedURL: java.lang.String getContentTypeMediaType()>();

        $r30 = virtualinvoke $r92.<org.apache.batik.util.ParsedURL: java.lang.String getContentTypeCharset()>();

        r82 = $r30;

        if $r30 == null goto label21;

     label18:
        $r93 = new java.io.InputStreamReader;

        specialinvoke $r93.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r28, $r30);

        r80 = $r93;

     label19:
        goto label21;

     label20:
        $r68 := @caughtexception;

        r82 = null;

     label21:
        if r80 != null goto label30;

        $r31 = "application/ecmascript";

        $z1 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z1 == 0 goto label29;

        $z2 = virtualinvoke $r92.<org.apache.batik.util.ParsedURL: boolean hasContentTypeParameter(java.lang.String)>("version");

        if $z2 == 0 goto label22;

        goto label42;

     label22:
        $r94 = new java.io.PushbackInputStream;

        specialinvoke $r94.<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>($r28, 8);

        r83 = newarray (byte)[4];

        $i6 = virtualinvoke $r94.<java.io.FilterInputStream: int read(byte[])>(r83);

        if $i6 <= 0 goto label28;

        virtualinvoke $r94.<java.io.PushbackInputStream: void unread(byte[],int,int)>(r83, 0, $i6);

        if $i6 < 2 goto label27;

        $b7 = r83[0];

        $i21 = (int) $b7;

        $i23 = (int) -1;

        if $i21 != $i23 goto label24;

        $b17 = r83[1];

        $i24 = (int) $b17;

        $i26 = (int) -2;

        if $i24 != $i26 goto label24;

        if $i6 < 4 goto label23;

        $b18 = r83[2];

        if $b18 != 0 goto label23;

        $b19 = r83[3];

        if $b19 != 0 goto label23;

        r82 = "UTF32-LE";

        virtualinvoke $r94.<java.io.PushbackInputStream: long skip(long)>(4L);

        goto label27;

     label23:
        r82 = "UTF-16LE";

        virtualinvoke $r94.<java.io.PushbackInputStream: long skip(long)>(2L);

        goto label27;

     label24:
        $b8 = r83[0];

        $i27 = (int) $b8;

        $i29 = (int) -2;

        if $i27 != $i29 goto label25;

        $b16 = r83[1];

        $i30 = (int) $b16;

        $i32 = (int) -1;

        if $i30 != $i32 goto label25;

        r82 = "UTF-16BE";

        virtualinvoke $r94.<java.io.PushbackInputStream: long skip(long)>(2L);

        goto label27;

     label25:
        if $i6 < 3 goto label26;

        $b13 = r83[0];

        $i33 = (int) $b13;

        $i35 = (int) -17;

        if $i33 != $i35 goto label26;

        $b14 = r83[1];

        $i36 = (int) $b14;

        $i38 = (int) -69;

        if $i36 != $i38 goto label26;

        $b15 = r83[2];

        $i39 = (int) $b15;

        $i41 = (int) -65;

        if $i39 != $i41 goto label26;

        r82 = "UTF-8";

        virtualinvoke $r94.<java.io.PushbackInputStream: long skip(long)>(3L);

        goto label27;

     label26:
        if $i6 < 4 goto label27;

        $b9 = r83[0];

        if $b9 != 0 goto label27;

        $b10 = r83[1];

        if $b10 != 0 goto label27;

        $b11 = r83[2];

        $i42 = (int) $b11;

        $i44 = (int) -2;

        if $i42 != $i44 goto label27;

        $b12 = r83[3];

        $i45 = (int) $b12;

        $i47 = (int) -1;

        if $i45 != $i47 goto label27;

        r82 = "UTF-32BE";

        virtualinvoke $r94.<java.io.PushbackInputStream: long skip(long)>(4L);

     label27:
        if r82 != null goto label28;

        r82 = "UTF-8";

     label28:
        $r95 = new java.io.InputStreamReader;

        specialinvoke $r95.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r94, r82);

        r80 = $r95;

        goto label30;

     label29:
        $r96 = new java.io.InputStreamReader;

        specialinvoke $r96.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r28);

        r80 = $r96;

     label30:
        goto label36;

     label31:
        $r8 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.util.ParsedURL docPURL>;

        virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: void checkCompatibleScriptURL(java.lang.String,org.apache.batik.util.ParsedURL)>(r74, $r8);

        $r9 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $r10 = virtualinvoke $r9.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.DocumentLoader getDocumentLoader()>();

        $r11 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r85 = (org.w3c.dom.svg.SVGDocument) $r11;

        $i3 = virtualinvoke $r10.<org.apache.batik.bridge.DocumentLoader: int getLineNumber(org.w3c.dom.Element)>(r4);

        $r12 = newarray (java.lang.Object)[3];

        $r13 = interfaceinvoke r85.<org.w3c.dom.svg.SVGDocument: java.lang.String getURL()>();

        $r12[0] = $r13;

        $r97 = new java.lang.StringBuffer;

        specialinvoke $r97.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<");

        $r16 = virtualinvoke r4.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        $r12[1] = $r19;

        $r98 = new java.lang.Integer;

        specialinvoke $r98.<java.lang.Integer: void <init>(int)>($i3);

        $r12[2] = $r98;

        r81 = staticinvoke <org.apache.batik.bridge.Messages: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("BaseScriptingEnvironment.constant.inline.script.description", $r12);

        $r21 = virtualinvoke r4.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        r86 = $r21;

        if $r21 == null goto label42;

        $r99 = new java.lang.StringBuffer;

        specialinvoke $r99.<java.lang.StringBuffer: void <init>()>();

        goto label35;

     label32:
        $s4 = interfaceinvoke r86.<org.w3c.dom.Node: short getNodeType()>();

        $i48 = (int) $s4;

        if $i48 == 4 goto label33;

        $s5 = interfaceinvoke r86.<org.w3c.dom.Node: short getNodeType()>();

        $i49 = (int) $s5;

        if $i49 != 3 goto label34;

     label33:
        $r23 = interfaceinvoke r86.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r99.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

     label34:
        r86 = interfaceinvoke r86.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label35:
        if r86 != null goto label32;

        $r100 = new java.io.StringReader;

        $r25 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r100.<java.io.StringReader: void <init>(java.lang.String)>($r25);

        r80 = $r100;

     label36:
        interfaceinvoke $r6.<org.apache.batik.script.Interpreter: java.lang.Object evaluate(java.io.Reader,java.lang.String)>(r80, r81);

     label37:
        goto label42;

     label38:
        $r65 := @caughtexception;

        $r66 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.UserAgent userAgent>;

        if $r66 == null goto label39;

        $r67 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r67.<org.apache.batik.bridge.UserAgent: void displayError(java.lang.Exception)>($r65);

     label39:
        return;

     label40:
        $r59 := @caughtexception;

        $r61 = <java.lang.System: java.io.PrintStream err>;

        $r101 = new java.lang.StringBuffer;

        specialinvoke $r101.<java.lang.StringBuffer: void <init>()>();

        $r62 = virtualinvoke $r101.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("InterpExcept: ");

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r59);

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r61.<java.io.PrintStream: void println(java.lang.String)>($r64);

        virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: void handleInterpreterException(org.apache.batik.script.InterpreterException)>($r59);

        return;

     label41:
        $r56 := @caughtexception;

        $r57 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.UserAgent userAgent>;

        if $r57 == null goto label42;

        $r58 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r58.<org.apache.batik.bridge.UserAgent: void displayError(java.lang.Exception)>($r56);

     label42:
        i20 = i20 + 1;

     label43:
        if i20 < $i0 goto label02;

        return;

        catch java.net.MalformedURLException from label05 to label06 with label07;
        catch java.lang.Exception from label04 to label13 with label14;
        catch java.io.UnsupportedEncodingException from label18 to label19 with label20;
        catch java.io.IOException from label17 to label37 with label38;
        catch org.apache.batik.script.InterpreterException from label17 to label37 with label40;
        catch java.lang.SecurityException from label17 to label37 with label41;
    }

    protected void checkCompatibleScriptURL(java.lang.String, org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.bridge.UserAgent $r4;
        org.apache.batik.bridge.BaseScriptingEnvironment r0;
        org.apache.batik.util.ParsedURL r2, $r3;
        java.lang.String r1;

        r0 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.batik.util.ParsedURL;

        $r4 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.UserAgent userAgent>;

        $r3 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.util.ParsedURL docPURL>;

        interfaceinvoke $r4.<org.apache.batik.bridge.UserAgent: void checkLoadScript(java.lang.String,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r1, r2, $r3);

        return;
    }

    public void dispatchSVGLoadEvent()
    {
        org.apache.batik.bridge.BaseScriptingEnvironment r0;
        long $l0;
        org.apache.batik.bridge.BridgeContext $r5;
        org.w3c.dom.Element $r2;
        org.apache.batik.bridge.SVGAnimationEngine $r6;
        org.w3c.dom.Document $r1;
        java.lang.String $r4;
        org.w3c.dom.svg.SVGSVGElement r3;

        r0 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        $r1 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.w3c.dom.Document document>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r3 = (org.w3c.dom.svg.SVGSVGElement) $r2;

        $r4 = interfaceinvoke r3.<org.w3c.dom.svg.SVGSVGElement: java.lang.String getContentScriptType()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r5 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $r6 = virtualinvoke $r5.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine getAnimationEngine()>();

        virtualinvoke $r6.<org.apache.batik.bridge.SVGAnimationEngine: void start(long)>($l0);

        virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: void dispatchSVGLoad(org.w3c.dom.Element,boolean,java.lang.String)>(r3, 1, $r4);

        return;
    }

    protected void dispatchSVGLoad(org.w3c.dom.Element, boolean, java.lang.String)
    {
        org.apache.batik.bridge.DocumentLoader $r12;
        java.lang.Integer $r16;
        org.w3c.dom.Document $r4, $r13;
        boolean $z0, z1;
        org.apache.batik.bridge.BaseScriptingEnvironment r1;
        org.apache.batik.script.Interpreter $r10;
        org.apache.batik.bridge.BridgeContext $r8, $r11;
        org.apache.batik.dom.events.AbstractEvent r7;
        org.apache.batik.util.ParsedURL $r19;
        org.w3c.dom.events.Event $r6;
        java.lang.Object[] $r14;
        org.w3c.dom.svg.SVGDocument $r20;
        short $s0;
        org.w3c.dom.Node r22;
        int $i1, $i2;
        java.lang.String r2, $r9, $r15, $r17, r23, r24, r25, r26;
        org.apache.batik.bridge.BaseScriptingEnvironment$1 $r18;
        org.w3c.dom.events.DocumentEvent r5;
        org.apache.batik.dom.events.NodeEventTarget $r21;
        org.w3c.dom.Element r0, $r3;

        r1 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        r0 := @parameter0: org.w3c.dom.Element;

        z1 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        r22 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label3;

     label1:
        $s0 = interfaceinvoke r22.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label2;

        $r3 = (org.w3c.dom.Element) r22;

        virtualinvoke r1.<org.apache.batik.bridge.BaseScriptingEnvironment: void dispatchSVGLoad(org.w3c.dom.Element,boolean,java.lang.String)>($r3, z1, r2);

     label2:
        r22 = interfaceinvoke r22.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label3:
        if r22 != null goto label1;

        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r5 = (org.w3c.dom.events.DocumentEvent) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.events.DocumentEvent: org.w3c.dom.events.Event createEvent(java.lang.String)>("SVGEvents");

        r7 = (org.apache.batik.dom.events.AbstractEvent) $r6;

        $r8 = r1.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $z0 = virtualinvoke $r8.<org.apache.batik.bridge.BridgeContext: boolean isSVG12()>();

        if $z0 == 0 goto label4;

        r23 = "load";

        r26 = "load";

        r25 = "load";

        r24 = "load";

        goto label5;

     label4:
        r23 = "SVGLoad";

        r26 = "SVGLoad";

        r25 = "SVGLoad";

        r24 = "SVGLoad";

     label5:
        virtualinvoke r7.<org.apache.batik.dom.events.AbstractEvent: void initEventNS(java.lang.String,java.lang.String,boolean,boolean)>("http://www.w3.org/2001/xml-events", r24, 0, 0);

        $r21 = (org.apache.batik.dom.events.NodeEventTarget) r0;

        $r9 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "onload");

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i1 != 0 goto label6;

        interfaceinvoke $r21.<org.apache.batik.dom.events.NodeEventTarget: boolean dispatchEvent(org.w3c.dom.events.Event)>(r7);

        return;

     label6:
        $r10 = virtualinvoke r1.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.script.Interpreter getInterpreter()>();

        if $r10 != null goto label7;

        interfaceinvoke $r21.<org.apache.batik.dom.events.NodeEventTarget: boolean dispatchEvent(org.w3c.dom.events.Event)>(r7);

        return;

     label7:
        if z1 == 0 goto label8;

        $r19 = r1.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.util.ParsedURL docPURL>;

        virtualinvoke r1.<org.apache.batik.bridge.BaseScriptingEnvironment: void checkCompatibleScriptURL(java.lang.String,org.apache.batik.util.ParsedURL)>(r2, $r19);

     label8:
        $r11 = r1.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $r12 = virtualinvoke $r11.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.DocumentLoader getDocumentLoader()>();

        $r13 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r20 = (org.w3c.dom.svg.SVGDocument) $r13;

        $i2 = virtualinvoke $r12.<org.apache.batik.bridge.DocumentLoader: int getLineNumber(org.w3c.dom.Element)>(r0);

        $r14 = newarray (java.lang.Object)[3];

        $r15 = interfaceinvoke $r20.<org.w3c.dom.svg.SVGDocument: java.lang.String getURL()>();

        $r14[0] = $r15;

        $r14[1] = "onload";

        $r16 = new java.lang.Integer;

        specialinvoke $r16.<java.lang.Integer: void <init>(int)>($i2);

        $r14[2] = $r16;

        $r17 = staticinvoke <org.apache.batik.bridge.Messages: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("BaseScriptingEnvironment.constant.event.script.description", $r14);

        $r18 = new org.apache.batik.bridge.BaseScriptingEnvironment$1;

        specialinvoke $r18.<org.apache.batik.bridge.BaseScriptingEnvironment$1: void <init>(org.apache.batik.bridge.BaseScriptingEnvironment,org.apache.batik.script.Interpreter,java.lang.String,java.lang.String)>(r1, $r10, $r9, $r17);

        interfaceinvoke $r21.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", r25, $r18, 0, null);

        interfaceinvoke $r21.<org.apache.batik.dom.events.NodeEventTarget: boolean dispatchEvent(org.w3c.dom.events.Event)>(r7);

        interfaceinvoke $r21.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", r26, $r18, 0);

        return;
    }

    protected void dispatchSVGZoomEvent()
    {
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.bridge.BaseScriptingEnvironment r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        $r1 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $z0 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: boolean isSVG12()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: void dispatchSVGDocEvent(java.lang.String)>("zoom");

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: void dispatchSVGDocEvent(java.lang.String)>("SVGZoom");

     label2:
        return;
    }

    protected void dispatchSVGScrollEvent()
    {
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.bridge.BaseScriptingEnvironment r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        $r1 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $z0 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: boolean isSVG12()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: void dispatchSVGDocEvent(java.lang.String)>("scroll");

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: void dispatchSVGDocEvent(java.lang.String)>("SVGScroll");

     label2:
        return;
    }

    protected void dispatchSVGResizeEvent()
    {
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.bridge.BaseScriptingEnvironment r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        $r1 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $z0 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: boolean isSVG12()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: void dispatchSVGDocEvent(java.lang.String)>("resize");

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: void dispatchSVGDocEvent(java.lang.String)>("SVGResize");

     label2:
        return;
    }

    protected void dispatchSVGDocEvent(java.lang.String)
    {
        org.apache.batik.bridge.BaseScriptingEnvironment r0;
        org.w3c.dom.events.DocumentEvent r5;
        org.apache.batik.dom.events.AbstractEvent r7;
        org.w3c.dom.Element $r2;
        org.w3c.dom.Document $r1, $r4;
        org.w3c.dom.events.Event $r6;
        java.lang.String r8;
        org.w3c.dom.svg.SVGSVGElement r3;

        r0 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        r8 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.w3c.dom.Document document>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r3 = (org.w3c.dom.svg.SVGSVGElement) $r2;

        $r4 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.w3c.dom.Document document>;

        r5 = (org.w3c.dom.events.DocumentEvent) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.events.DocumentEvent: org.w3c.dom.events.Event createEvent(java.lang.String)>("SVGEvents");

        r7 = (org.apache.batik.dom.events.AbstractEvent) $r6;

        virtualinvoke r7.<org.apache.batik.dom.events.AbstractEvent: void initEventNS(java.lang.String,java.lang.String,boolean,boolean)>("http://www.w3.org/2001/xml-events", r8, 0, 0);

        interfaceinvoke r3.<org.w3c.dom.events.EventTarget: boolean dispatchEvent(org.w3c.dom.events.Event)>(r7);

        return;
    }

    protected void handleInterpreterException(org.apache.batik.script.InterpreterException)
    {
        org.apache.batik.script.InterpreterException r2;
        org.apache.batik.bridge.UserAgent $r1, $r4;
        org.apache.batik.bridge.BaseScriptingEnvironment r0;
        java.lang.Exception $r3, $r5;

        r0 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        r2 := @parameter0: org.apache.batik.script.InterpreterException;

        $r1 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.UserAgent userAgent>;

        if $r1 == null goto label3;

        $r3 = virtualinvoke r2.<org.apache.batik.script.InterpreterException: java.lang.Exception getException()>();

        $r4 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.UserAgent userAgent>;

        if $r3 != null goto label1;

        $r5 = r2;

        goto label2;

     label1:
        $r5 = $r3;

     label2:
        interfaceinvoke $r4.<org.apache.batik.bridge.UserAgent: void displayError(java.lang.Exception)>($r5);

     label3:
        return;
    }

    protected void handleSecurityException(java.lang.SecurityException)
    {
        org.apache.batik.bridge.UserAgent $r1, $r3;
        org.apache.batik.bridge.BaseScriptingEnvironment r0;
        java.lang.SecurityException r2;

        r0 := @this: org.apache.batik.bridge.BaseScriptingEnvironment;

        r2 := @parameter0: java.lang.SecurityException;

        $r1 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.UserAgent userAgent>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.batik.bridge.BaseScriptingEnvironment: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: void displayError(java.lang.Exception)>(r2);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.batik.bridge.BaseScriptingEnvironment: java.lang.String APPLICATION_ECMASCRIPT> = "application/ecmascript";

        <org.apache.batik.bridge.BaseScriptingEnvironment: java.lang.String ALTERNATE_EVENT_NAME> = "evt";

        <org.apache.batik.bridge.BaseScriptingEnvironment: java.lang.String EVENT_NAME> = "event";

        <org.apache.batik.bridge.BaseScriptingEnvironment: java.lang.String EVENT_SCRIPT_DESCRIPTION> = "BaseScriptingEnvironment.constant.event.script.description";

        <org.apache.batik.bridge.BaseScriptingEnvironment: java.lang.String INLINE_SCRIPT_DESCRIPTION> = "BaseScriptingEnvironment.constant.inline.script.description";

        return;
    }
}
