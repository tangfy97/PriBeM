public class org.apache.poi.xslf.usermodel.XSLFShadow extends org.apache.poi.xslf.usermodel.XSLFSimpleShape
{
    private org.apache.poi.xslf.usermodel.XSLFSimpleShape _parent;

    void <init>(org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect, org.apache.poi.xslf.usermodel.XSLFSimpleShape)
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r2;
        org.apache.poi.xslf.usermodel.XSLFShadow r0;
        org.apache.poi.xslf.usermodel.XSLFSheet $r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFShadow;

        r1 := @parameter0: org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect;

        r2 := @parameter1: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r3 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.XSLFSheet getSheet()>();

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: void <init>(org.apache.xmlbeans.XmlObject,org.apache.poi.xslf.usermodel.XSLFSheet)>(r1, $r3);

        r0.<org.apache.poi.xslf.usermodel.XSLFShadow: org.apache.poi.xslf.usermodel.XSLFSimpleShape _parent> = r2;

        return;
    }

    public void fill(java.awt.Graphics2D, java.awt.Shape)
    {
        java.awt.Color $r4;
        org.apache.poi.xslf.usermodel.XSLFShadow r0;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape $r1, $r2;
        java.awt.Graphics2D r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12;
        boolean $z0;
        java.awt.Shape r5;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFShadow;

        r3 := @parameter0: java.awt.Graphics2D;

        r5 := @parameter1: java.awt.Shape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFShadow: org.apache.poi.xslf.usermodel.XSLFSimpleShape _parent>;

        $d0 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: double getRotation()>();

        d12 = $d0;

        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFShadow: org.apache.poi.xslf.usermodel.XSLFSimpleShape _parent>;

        $z0 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: boolean getFlipVertical()>();

        if $z0 == 0 goto label1;

        d12 = $d0 + 180.0;

     label1:
        $d1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShadow: double getAngle()>();

        $d9 = $d1 - d12;

        $d2 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShadow: double getDistance()>();

        $d3 = staticinvoke <java.lang.Math: double toRadians(double)>($d9);

        $d4 = staticinvoke <java.lang.Math: double cos(double)>($d3);

        $d10 = $d2 * $d4;

        $d5 = staticinvoke <java.lang.Math: double toRadians(double)>($d9);

        $d6 = staticinvoke <java.lang.Math: double sin(double)>($d5);

        $d11 = $d2 * $d6;

        virtualinvoke r3.<java.awt.Graphics2D: void translate(double,double)>($d10, $d11);

        $r4 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShadow: java.awt.Color getFillColor()>();

        if $r4 == null goto label2;

        virtualinvoke r3.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r4);

        virtualinvoke r3.<java.awt.Graphics2D: void fill(java.awt.Shape)>(r5);

     label2:
        $d8 = neg $d10;

        $d7 = neg $d11;

        virtualinvoke r3.<java.awt.Graphics2D: void translate(double,double)>($d8, $d7);

        return;
    }

    public void draw(java.awt.Graphics2D, java.awt.Shape)
    {
        java.awt.Color $r2;
        java.awt.Shape r3;
        org.apache.poi.xslf.usermodel.XSLFShadow r0;
        java.awt.Graphics2D r1;
        double $d0, $d1, $d2, $d3, d4, $d5, $d6, d7, $d8, $d9;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFShadow;

        r1 := @parameter0: java.awt.Graphics2D;

        r3 := @parameter1: java.awt.Shape;

        $d0 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShadow: double getAngle()>();

        $d1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShadow: double getDistance()>();

        $d2 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d3 = staticinvoke <java.lang.Math: double cos(double)>($d2);

        d4 = $d1 * $d3;

        $d5 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d6 = staticinvoke <java.lang.Math: double sin(double)>($d5);

        d7 = $d1 * $d6;

        virtualinvoke r1.<java.awt.Graphics2D: void translate(double,double)>(d4, d7);

        $r2 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShadow: java.awt.Color getFillColor()>();

        if $r2 == null goto label1;

        virtualinvoke r1.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r2);

        virtualinvoke r1.<java.awt.Graphics2D: void draw(java.awt.Shape)>(r3);

     label1:
        $d9 = neg d4;

        $d8 = neg d7;

        virtualinvoke r1.<java.awt.Graphics2D: void translate(double,double)>($d9, $d8);

        return;
    }

    public java.awt.geom.Rectangle2D getAnchor()
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape $r1;
        org.apache.poi.xslf.usermodel.XSLFShadow r0;
        java.awt.geom.Rectangle2D $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFShadow;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFShadow: org.apache.poi.xslf.usermodel.XSLFSimpleShape _parent>;

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: java.awt.geom.Rectangle2D getAnchor()>();

        return $r2;
    }

    public void setAnchor(java.awt.geom.Rectangle2D)
    {
        java.lang.IllegalStateException $r0;
        org.apache.poi.xslf.usermodel.XSLFShadow r1;
        java.awt.geom.Rectangle2D r2;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFShadow;

        r2 := @parameter0: java.awt.geom.Rectangle2D;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You can\'t set anchor of a shadow");

        throw $r0;
    }

    public double getDistance()
    {
        org.apache.poi.xslf.usermodel.XSLFShadow r0;
        long $l0;
        org.apache.xmlbeans.XmlObject $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect r2;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFShadow;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShadow: org.apache.xmlbeans.XmlObject getXmlObject()>();

        r2 = (org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect) $r1;

        $z0 = interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect: boolean isSetDist()>();

        if $z0 == 0 goto label1;

        $l0 = interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect: long getDist()>();

        $d0 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l0);

        goto label2;

     label1:
        $d0 = 0.0;

     label2:
        return $d0;
    }

    public double getAngle()
    {
        org.apache.poi.xslf.usermodel.XSLFShadow r0;
        int $i0;
        org.apache.xmlbeans.XmlObject $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect r2;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFShadow;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShadow: org.apache.xmlbeans.XmlObject getXmlObject()>();

        r2 = (org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect) $r1;

        $z0 = interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect: boolean isSetDir()>();

        if $z0 == 0 goto label1;

        $i0 = interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect: int getDir()>();

        $d0 = (double) $i0;

        $d1 = $d0 / 60000.0;

        goto label2;

     label1:
        $d1 = 0.0;

     label2:
        return $d1;
    }

    public double getBlur()
    {
        org.apache.poi.xslf.usermodel.XSLFShadow r0;
        long $l0;
        org.apache.xmlbeans.XmlObject $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect r2;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFShadow;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShadow: org.apache.xmlbeans.XmlObject getXmlObject()>();

        r2 = (org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect) $r1;

        $z0 = interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect: boolean isSetBlurRad()>();

        if $z0 == 0 goto label1;

        $l0 = interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect: long getBlurRad()>();

        $d0 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l0);

        goto label2;

     label1:
        $d0 = 0.0;

     label2:
        return $d0;
    }

    public java.awt.Color getFillColor()
    {
        java.awt.Color $r7;
        org.apache.poi.xslf.usermodel.XSLFShadow r0;
        org.apache.poi.xslf.usermodel.XSLFColor $r6;
        org.apache.poi.xslf.usermodel.XSLFSheet $r1;
        org.apache.poi.xslf.usermodel.XSLFTheme $r2;
        org.apache.xmlbeans.XmlObject $r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor $r5;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFShadow;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShadow: org.apache.poi.xslf.usermodel.XSLFSheet getSheet()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFTheme getTheme()>();

        $r3 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShadow: org.apache.xmlbeans.XmlObject getXmlObject()>();

        r4 = (org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        $r5 = interfaceinvoke r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect: org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor getSchemeClr()>();

        $r6 = new org.apache.poi.xslf.usermodel.XSLFColor;

        specialinvoke $r6.<org.apache.poi.xslf.usermodel.XSLFColor: void <init>(org.apache.xmlbeans.XmlObject,org.apache.poi.xslf.usermodel.XSLFTheme,org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor)>(r4, $r2, $r5);

        $r7 = virtualinvoke $r6.<org.apache.poi.xslf.usermodel.XSLFColor: java.awt.Color getColor()>();

        return $r7;
    }
}
