class com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1 extends java.lang.Object implements com.googlecode.mp4parser.authoring.Sample
{
    final com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl this$0;
    private final int val$currentPosition;

    void <init>(com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl, int)
    {
        int i0;
        com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl r1;
        com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1 r0;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1;

        r1 := @parameter0: com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl;

        i0 := @parameter1: int;

        r0.<com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1: com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl this$0> = r1;

        r0.<com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1: int val$currentPosition> = i0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void writeTo(java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        com.googlecode.mp4parser.DataSource $r2;
        long $l2, $l3;
        com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1 r0;
        int $i0, $i1;
        java.nio.channels.WritableByteChannel r4;
        com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl $r1, $r3;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1;

        r4 := @parameter0: java.nio.channels.WritableByteChannel;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1: com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl this$0>;

        $r2 = staticinvoke <com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl: com.googlecode.mp4parser.DataSource access$1(com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl)>($r1);

        $i0 = r0.<com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1: int val$currentPosition>;

        $l3 = (long) $i0;

        $r3 = r0.<com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1: com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl this$0>;

        $i1 = $r3.<com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl: int frameSize>;

        $l2 = (long) $i1;

        interfaceinvoke $r2.<com.googlecode.mp4parser.DataSource: long transferTo(long,long,java.nio.channels.WritableByteChannel)>($l3, $l2, r4);

        return;
    }

    public long getSize()
    {
        int $i0;
        long $l1;
        com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl $r1;
        com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1 r0;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1: com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl this$0>;

        $i0 = $r1.<com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl: int frameSize>;

        $l1 = (long) $i0;

        return $l1;
    }

    public java.nio.ByteBuffer asByteBuffer()
    {
        com.googlecode.mp4parser.DataSource $r2;
        long $l2, $l3;
        java.io.IOException $r5;
        java.lang.RuntimeException $r6;
        java.nio.ByteBuffer $r4;
        com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1 r0;
        int $i0, $i1;
        com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl $r1, $r3;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1;

     label1:
        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1: com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl this$0>;

        $r2 = staticinvoke <com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl: com.googlecode.mp4parser.DataSource access$1(com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl)>($r1);

        $i0 = r0.<com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1: int val$currentPosition>;

        $l3 = (long) $i0;

        $r3 = r0.<com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl$1: com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl this$0>;

        $i1 = $r3.<com.googlecode.mp4parser.authoring.tracks.DTSTrackImpl: int frameSize>;

        $l2 = (long) $i1;

        $r4 = interfaceinvoke $r2.<com.googlecode.mp4parser.DataSource: java.nio.ByteBuffer map(long,long)>($l3, $l2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
