class org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3 extends java.lang.Object implements org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Mapper
{
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton val$a;
    final org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage val$stage;
    final org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0;

    void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage r3;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator r1;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3 r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r3 := @parameter2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0> = r1;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton val$a> = r2;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage val$stage> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent map(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton $r3, $r5;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent $r4;
        java.lang.AssertionError $r7;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r6;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3 r1;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3;

        r0 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator;

        $r3 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton val$a>;

        $r2 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage val$stage>;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent generate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,boolean,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)>($r3, 1, $r2);

        if $r4 == null goto label1;

        $z0 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r5 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton val$a>;

        $r6 = virtualinvoke $r4.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r5, null);

        $z1 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z1 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        return $r4;
    }

    public volatile java.lang.Object map(java.lang.Object)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator $r2;
        java.lang.Object r1;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent $r3;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3 r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent map(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/testing/RandomDocOpGenerator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3: boolean $assertionsDisabled> = $z1;

        return;
    }
}
