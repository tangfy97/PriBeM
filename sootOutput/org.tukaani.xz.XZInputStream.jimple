public class org.tukaani.xz.XZInputStream extends java.io.InputStream
{
    private final int memoryLimit;
    private java.io.InputStream in;
    private org.tukaani.xz.SingleXZInputStream xzIn;
    private boolean endReached;
    private java.io.IOException exception;
    private final byte[] tempBuf;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        int $i1;
        org.tukaani.xz.XZInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.tukaani.xz.XZInputStream;

        r1 := @parameter0: java.io.InputStream;

        $i1 = (int) -1;

        specialinvoke r0.<org.tukaani.xz.XZInputStream: void <init>(java.io.InputStream,int)>(r1, $i1);

        return;
    }

    public void <init>(java.io.InputStream, int) throws java.io.IOException
    {
        byte[] $r1;
        org.tukaani.xz.XZInputStream r0;
        int i0;
        org.tukaani.xz.SingleXZInputStream $r3;
        java.io.InputStream r2;

        r0 := @this: org.tukaani.xz.XZInputStream;

        r2 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.tukaani.xz.XZInputStream: boolean endReached> = 0;

        r0.<org.tukaani.xz.XZInputStream: java.io.IOException exception> = null;

        $r1 = newarray (byte)[1];

        r0.<org.tukaani.xz.XZInputStream: byte[] tempBuf> = $r1;

        r0.<org.tukaani.xz.XZInputStream: java.io.InputStream in> = r2;

        r0.<org.tukaani.xz.XZInputStream: int memoryLimit> = i0;

        $r3 = new org.tukaani.xz.SingleXZInputStream;

        specialinvoke $r3.<org.tukaani.xz.SingleXZInputStream: void <init>(java.io.InputStream,int)>(r2, i0);

        r0.<org.tukaani.xz.XZInputStream: org.tukaani.xz.SingleXZInputStream xzIn> = $r3;

        return;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r1, $r2;
        org.tukaani.xz.XZInputStream r0;
        short $s2;
        byte $b1;
        int $i0, $i4;

        r0 := @this: org.tukaani.xz.XZInputStream;

        $r1 = r0.<org.tukaani.xz.XZInputStream: byte[] tempBuf>;

        $i0 = virtualinvoke r0.<org.tukaani.xz.XZInputStream: int read(byte[],int,int)>($r1, 0, 1);

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $s2 = -1;

        goto label2;

     label1:
        $r2 = r0.<org.tukaani.xz.XZInputStream: byte[] tempBuf>;

        $b1 = $r2[0];

        $s2 = $b1 & 255;

     label2:
        return $s2;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r0;
        java.lang.IndexOutOfBoundsException $r10;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i7, $i9, $i11, $i13;
        org.tukaani.xz.SingleXZInputStream $r4, $r5;
        boolean $z0, $z1;
        org.tukaani.xz.XZInputStream r1;
        java.io.IOException $r3, $r6, $r8;
        org.tukaani.xz.XZIOException $r11;
        java.io.InputStream $r2;

        r1 := @this: org.tukaani.xz.XZInputStream;

        r0 := @parameter0: byte[];

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        if i4 < 0 goto label01;

        if i5 < 0 goto label01;

        $i0 = i4 + i5;

        if $i0 < 0 goto label01;

        $i2 = i4 + i5;

        $i1 = lengthof r0;

        if $i2 <= $i1 goto label02;

     label01:
        $r10 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r10.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r10;

     label02:
        if i5 != 0 goto label03;

        return 0;

     label03:
        $r2 = r1.<org.tukaani.xz.XZInputStream: java.io.InputStream in>;

        if $r2 != null goto label04;

        $r11 = new org.tukaani.xz.XZIOException;

        specialinvoke $r11.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream closed");

        throw $r11;

     label04:
        $r3 = r1.<org.tukaani.xz.XZInputStream: java.io.IOException exception>;

        if $r3 == null goto label05;

        $r6 = r1.<org.tukaani.xz.XZInputStream: java.io.IOException exception>;

        throw $r6;

     label05:
        $z0 = r1.<org.tukaani.xz.XZInputStream: boolean endReached>;

        if $z0 == 0 goto label06;

        $i9 = (int) -1;

        return $i9;

     label06:
        i6 = 0;

     label07:
        if i5 <= 0 goto label13;

        $r4 = r1.<org.tukaani.xz.XZInputStream: org.tukaani.xz.SingleXZInputStream xzIn>;

        if $r4 != null goto label10;

        specialinvoke r1.<org.tukaani.xz.XZInputStream: void prepareNextStream()>();

        $z1 = r1.<org.tukaani.xz.XZInputStream: boolean endReached>;

        if $z1 == 0 goto label10;

        if i6 != 0 goto label08;

        $i11 = (int) -1;

        $i7 = $i11;

        goto label09;

     label08:
        $i7 = i6;

     label09:
        return $i7;

     label10:
        $r5 = r1.<org.tukaani.xz.XZInputStream: org.tukaani.xz.SingleXZInputStream xzIn>;

        $i3 = virtualinvoke $r5.<org.tukaani.xz.SingleXZInputStream: int read(byte[],int,int)>(r0, i4, i5);

        if $i3 <= 0 goto label11;

        i6 = i6 + $i3;

        i4 = i4 + $i3;

        i5 = i5 - $i3;

        goto label12;

     label11:
        $i13 = (int) -1;

        if $i3 != $i13 goto label12;

        r1.<org.tukaani.xz.XZInputStream: org.tukaani.xz.SingleXZInputStream xzIn> = null;

     label12:
        goto label07;

     label13:
        goto label15;

     label14:
        $r8 := @caughtexception;

        r1.<org.tukaani.xz.XZInputStream: java.io.IOException exception> = $r8;

        if i6 != 0 goto label15;

        throw $r8;

     label15:
        return i6;

        catch java.io.IOException from label07 to label09 with label14;
        catch java.io.IOException from label10 to label13 with label14;
    }

    private void prepareNextStream() throws java.io.IOException
    {
        byte[] r3;
        java.io.DataInputStream $r8;
        org.tukaani.xz.XZInputStream r1;
        org.tukaani.xz.XZFormatException $r4;
        org.tukaani.xz.CorruptedInputException $r10;
        byte $b1, $b2, $b3, $b4;
        int $i0, $i5, $i7;
        org.tukaani.xz.SingleXZInputStream $r9;
        java.io.InputStream $r2, $r7;

        r1 := @this: org.tukaani.xz.XZInputStream;

        $r8 = new java.io.DataInputStream;

        $r2 = r1.<org.tukaani.xz.XZInputStream: java.io.InputStream in>;

        specialinvoke $r8.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r2);

        r3 = newarray (byte)[12];

     label1:
        $i0 = virtualinvoke $r8.<java.io.DataInputStream: int read(byte[],int,int)>(r3, 0, 1);

        $i7 = (int) -1;

        if $i0 != $i7 goto label2;

        r1.<org.tukaani.xz.XZInputStream: boolean endReached> = 1;

        return;

     label2:
        virtualinvoke $r8.<java.io.DataInputStream: void readFully(byte[],int,int)>(r3, 1, 3);

        $b1 = r3[0];

        if $b1 != 0 goto label3;

        $b2 = r3[1];

        if $b2 != 0 goto label3;

        $b3 = r3[2];

        if $b3 != 0 goto label3;

        $b4 = r3[3];

        if $b4 == 0 goto label1;

     label3:
        virtualinvoke $r8.<java.io.DataInputStream: void readFully(byte[],int,int)>(r3, 4, 8);

     label4:
        $r9 = new org.tukaani.xz.SingleXZInputStream;

        $r7 = r1.<org.tukaani.xz.XZInputStream: java.io.InputStream in>;

        $i5 = r1.<org.tukaani.xz.XZInputStream: int memoryLimit>;

        specialinvoke $r9.<org.tukaani.xz.SingleXZInputStream: void <init>(java.io.InputStream,int,byte[])>($r7, $i5, r3);

        r1.<org.tukaani.xz.XZInputStream: org.tukaani.xz.SingleXZInputStream xzIn> = $r9;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        $r10 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r10.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("Garbage after a valid XZ Stream");

        throw $r10;

     label7:
        return;

        catch org.tukaani.xz.XZFormatException from label4 to label5 with label6;
    }

    public int available() throws java.io.IOException
    {
        org.tukaani.xz.XZInputStream r0;
        java.io.IOException $r2, $r5;
        org.tukaani.xz.XZIOException $r6;
        int $i0;
        org.tukaani.xz.SingleXZInputStream $r3, $r4;
        java.io.InputStream $r1;

        r0 := @this: org.tukaani.xz.XZInputStream;

        $r1 = r0.<org.tukaani.xz.XZInputStream: java.io.InputStream in>;

        if $r1 != null goto label1;

        $r6 = new org.tukaani.xz.XZIOException;

        specialinvoke $r6.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream closed");

        throw $r6;

     label1:
        $r2 = r0.<org.tukaani.xz.XZInputStream: java.io.IOException exception>;

        if $r2 == null goto label2;

        $r5 = r0.<org.tukaani.xz.XZInputStream: java.io.IOException exception>;

        throw $r5;

     label2:
        $r3 = r0.<org.tukaani.xz.XZInputStream: org.tukaani.xz.SingleXZInputStream xzIn>;

        if $r3 != null goto label3;

        $i0 = 0;

        goto label4;

     label3:
        $r4 = r0.<org.tukaani.xz.XZInputStream: org.tukaani.xz.SingleXZInputStream xzIn>;

        $i0 = virtualinvoke $r4.<org.tukaani.xz.SingleXZInputStream: int available()>();

     label4:
        return $i0;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r3;
        org.tukaani.xz.XZInputStream r0;
        java.io.InputStream $r1, $r2;

        r0 := @this: org.tukaani.xz.XZInputStream;

        $r1 = r0.<org.tukaani.xz.XZInputStream: java.io.InputStream in>;

        if $r1 == null goto label5;

     label1:
        $r2 = r0.<org.tukaani.xz.XZInputStream: java.io.InputStream in>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label2:
        r0.<org.tukaani.xz.XZInputStream: java.io.InputStream in> = null;

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        r0.<org.tukaani.xz.XZInputStream: java.io.InputStream in> = null;

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
