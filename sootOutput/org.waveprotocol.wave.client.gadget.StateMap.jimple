public class org.waveprotocol.wave.client.gadget.StateMap extends com.google.gwt.core.client.JavaScriptObject
{

    protected void <init>()
    {
        org.waveprotocol.wave.client.gadget.StateMap r0;

        r0 := @this: org.waveprotocol.wave.client.gadget.StateMap;

        specialinvoke r0.<com.google.gwt.core.client.JavaScriptObject: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.client.gadget.StateMap create()
    {
        com.google.gwt.core.client.JavaScriptObject $r0, $r1;
        org.waveprotocol.wave.client.gadget.StateMap $r2;

        $r0 = staticinvoke <com.google.gwt.core.client.JavaScriptObject: com.google.gwt.core.client.JavaScriptObject createObject()>();

        $r1 = virtualinvoke $r0.<com.google.gwt.core.client.JavaScriptObject: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r2 = (org.waveprotocol.wave.client.gadget.StateMap) $r1;

        return $r2;
    }

    public static org.waveprotocol.wave.client.gadget.StateMap createFromStringMap(org.waveprotocol.wave.model.util.ReadableStringMap)
    {
        org.waveprotocol.wave.client.gadget.StateMap r2;
        com.google.gwt.core.client.JavaScriptObject $r0, $r1;
        org.waveprotocol.wave.model.util.ReadableStringMap r3;
        org.waveprotocol.wave.client.gadget.StateMap$1 $r4;

        r3 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringMap;

        $r0 = staticinvoke <com.google.gwt.core.client.JavaScriptObject: com.google.gwt.core.client.JavaScriptObject createObject()>();

        $r1 = virtualinvoke $r0.<com.google.gwt.core.client.JavaScriptObject: com.google.gwt.core.client.JavaScriptObject cast()>();

        r2 = (org.waveprotocol.wave.client.gadget.StateMap) $r1;

        $r4 = new org.waveprotocol.wave.client.gadget.StateMap$1;

        specialinvoke $r4.<org.waveprotocol.wave.client.gadget.StateMap$1: void <init>(org.waveprotocol.wave.client.gadget.StateMap)>(r2);

        interfaceinvoke r3.<org.waveprotocol.wave.model.util.ReadableStringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r4);

        return r2;
    }

    public final native boolean has(java.lang.String);

    public final native java.lang.String get(java.lang.String);

    public final native void put(java.lang.String, java.lang.String);

    public final void remove(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.client.gadget.StateMap r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.StateMap;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.StateMap: boolean has(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.StateMap: void nativeRemove(java.lang.String)>(r1);

     label1:
        return;
    }

    public final void applyDelta(org.waveprotocol.wave.client.gadget.StateMap)
    {
        org.waveprotocol.wave.client.gadget.StateMap r0, r2;
        org.waveprotocol.wave.client.gadget.StateMap$2 $r1;

        r2 := @this: org.waveprotocol.wave.client.gadget.StateMap;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.StateMap;

        $r1 = new org.waveprotocol.wave.client.gadget.StateMap$2;

        specialinvoke $r1.<org.waveprotocol.wave.client.gadget.StateMap$2: void <init>(org.waveprotocol.wave.client.gadget.StateMap)>(r2);

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.StateMap: void each(org.waveprotocol.wave.client.gadget.StateMap$Each)>($r1);

        return;
    }

    public final org.waveprotocol.wave.client.gadget.StateMap getDelta(org.waveprotocol.wave.client.gadget.StateMap)
    {
        org.waveprotocol.wave.client.gadget.StateMap $r0, r1, r3;
        org.waveprotocol.wave.client.gadget.StateMap$4 $r4;
        org.waveprotocol.wave.client.gadget.StateMap$3 $r2;

        r3 := @this: org.waveprotocol.wave.client.gadget.StateMap;

        r1 := @parameter0: org.waveprotocol.wave.client.gadget.StateMap;

        $r0 = staticinvoke <org.waveprotocol.wave.client.gadget.StateMap: org.waveprotocol.wave.client.gadget.StateMap create()>();

        $r2 = new org.waveprotocol.wave.client.gadget.StateMap$3;

        specialinvoke $r2.<org.waveprotocol.wave.client.gadget.StateMap$3: void <init>(org.waveprotocol.wave.client.gadget.StateMap,org.waveprotocol.wave.client.gadget.StateMap)>(r3, $r0);

        virtualinvoke r1.<org.waveprotocol.wave.client.gadget.StateMap: void each(org.waveprotocol.wave.client.gadget.StateMap$Each)>($r2);

        $r4 = new org.waveprotocol.wave.client.gadget.StateMap$4;

        specialinvoke $r4.<org.waveprotocol.wave.client.gadget.StateMap$4: void <init>(org.waveprotocol.wave.client.gadget.StateMap,org.waveprotocol.wave.client.gadget.StateMap,org.waveprotocol.wave.client.gadget.StateMap)>(r3, r1, $r0);

        virtualinvoke r3.<org.waveprotocol.wave.client.gadget.StateMap: void each(org.waveprotocol.wave.client.gadget.StateMap$Each)>($r4);

        return $r0;
    }

    public final boolean compare(org.waveprotocol.wave.client.gadget.StateMap)
    {
        org.waveprotocol.wave.client.gadget.StateMap r0, r1;
        org.waveprotocol.wave.client.gadget.StateMap$KeyValueComparator $r2, $r3;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.client.gadget.StateMap;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.StateMap;

        if r0 == null goto label1;

        $r2 = new org.waveprotocol.wave.client.gadget.StateMap$KeyValueComparator;

        specialinvoke $r2.<org.waveprotocol.wave.client.gadget.StateMap$KeyValueComparator: void <init>(org.waveprotocol.wave.client.gadget.StateMap)>(r0);

        $z0 = virtualinvoke r1.<org.waveprotocol.wave.client.gadget.StateMap: boolean checkKeyValue(org.waveprotocol.wave.client.gadget.StateMap$CheckKeyValue)>($r2);

        if $z0 == 0 goto label1;

        $r3 = new org.waveprotocol.wave.client.gadget.StateMap$KeyValueComparator;

        specialinvoke $r3.<org.waveprotocol.wave.client.gadget.StateMap$KeyValueComparator: void <init>(org.waveprotocol.wave.client.gadget.StateMap)>(r1);

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.StateMap: boolean checkKeyValue(org.waveprotocol.wave.client.gadget.StateMap$CheckKeyValue)>($r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public final void each(org.waveprotocol.wave.client.gadget.StateMap$Each)
    {
        org.waveprotocol.wave.client.gadget.StateMap$5 $r1;
        org.waveprotocol.wave.client.gadget.StateMap$Each r2;
        org.waveprotocol.wave.client.gadget.StateMap r0;

        r0 := @this: org.waveprotocol.wave.client.gadget.StateMap;

        r2 := @parameter0: org.waveprotocol.wave.client.gadget.StateMap$Each;

        $r1 = new org.waveprotocol.wave.client.gadget.StateMap$5;

        specialinvoke $r1.<org.waveprotocol.wave.client.gadget.StateMap$5: void <init>(org.waveprotocol.wave.client.gadget.StateMap,org.waveprotocol.wave.client.gadget.StateMap$Each)>(r0, r2);

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.StateMap: boolean checkKeyValue(org.waveprotocol.wave.client.gadget.StateMap$CheckKeyValue)>($r1);

        return;
    }

    public final boolean checkKeyValue(org.waveprotocol.wave.client.gadget.StateMap$CheckKeyValue)
    {
        com.google.gwt.core.client.GWT$UncaughtExceptionHandler $r3;
        org.waveprotocol.wave.client.gadget.StateMap r0;
        org.waveprotocol.wave.client.gadget.StateMap$CheckKeyValue r1;
        java.lang.Exception $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.StateMap;

        r1 := @parameter0: org.waveprotocol.wave.client.gadget.StateMap$CheckKeyValue;

     label1:
        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.StateMap: boolean checkKeyValueImpl(org.waveprotocol.wave.client.gadget.StateMap$CheckKeyValue)>(r1);

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        $r3 = staticinvoke <com.google.gwt.core.client.GWT: com.google.gwt.core.client.GWT$UncaughtExceptionHandler getUncaughtExceptionHandler()>();

        interfaceinvoke $r3.<com.google.gwt.core.client.GWT$UncaughtExceptionHandler: void onUncaughtException(java.lang.Throwable)>($r2);

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private final native boolean checkKeyValueImpl(org.waveprotocol.wave.client.gadget.StateMap$CheckKeyValue);

    public final void clear()
    {
        org.waveprotocol.wave.client.gadget.StateMap$6 $r1;
        org.waveprotocol.wave.client.gadget.StateMap r0;

        r0 := @this: org.waveprotocol.wave.client.gadget.StateMap;

        $r1 = new org.waveprotocol.wave.client.gadget.StateMap$6;

        specialinvoke $r1.<org.waveprotocol.wave.client.gadget.StateMap$6: void <init>(org.waveprotocol.wave.client.gadget.StateMap)>(r0);

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.StateMap: void each(org.waveprotocol.wave.client.gadget.StateMap$Each)>($r1);

        return;
    }

    public final void copyFrom(org.waveprotocol.wave.client.gadget.StateMap)
    {
        org.waveprotocol.wave.client.gadget.StateMap$7 $r2;
        org.waveprotocol.wave.client.gadget.StateMap r0, r1;

        r0 := @this: org.waveprotocol.wave.client.gadget.StateMap;

        r1 := @parameter0: org.waveprotocol.wave.client.gadget.StateMap;

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.StateMap: void clear()>();

        $r2 = new org.waveprotocol.wave.client.gadget.StateMap$7;

        specialinvoke $r2.<org.waveprotocol.wave.client.gadget.StateMap$7: void <init>(org.waveprotocol.wave.client.gadget.StateMap)>(r0);

        virtualinvoke r1.<org.waveprotocol.wave.client.gadget.StateMap: void each(org.waveprotocol.wave.client.gadget.StateMap$Each)>($r2);

        return;
    }

    public static final native void copyJson(com.google.gwt.core.client.JavaScriptObject, com.google.gwt.core.client.JavaScriptObject);

    public final native void fromJson(java.lang.String);

    public final void fromJsonObject(com.google.gwt.core.client.JavaScriptObject)
    {
        com.google.gwt.core.client.JavaScriptObject r0;
        org.waveprotocol.wave.client.gadget.StateMap r1;

        r1 := @this: org.waveprotocol.wave.client.gadget.StateMap;

        r0 := @parameter0: com.google.gwt.core.client.JavaScriptObject;

        staticinvoke <org.waveprotocol.wave.client.gadget.StateMap: void copyJson(com.google.gwt.core.client.JavaScriptObject,com.google.gwt.core.client.JavaScriptObject)>(r0, r1);

        return;
    }

    public final java.lang.String toJson()
    {
        org.waveprotocol.wave.client.gadget.StateMap$8 $r2;
        org.waveprotocol.wave.client.gadget.StateMap r1;
        java.lang.StringBuilder $r0;
        java.lang.String $r3;

        r1 := @this: org.waveprotocol.wave.client.gadget.StateMap;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r2 = new org.waveprotocol.wave.client.gadget.StateMap$8;

        specialinvoke $r2.<org.waveprotocol.wave.client.gadget.StateMap$8: void <init>(org.waveprotocol.wave.client.gadget.StateMap,java.lang.StringBuilder)>(r1, $r0);

        virtualinvoke r1.<org.waveprotocol.wave.client.gadget.StateMap: void each(org.waveprotocol.wave.client.gadget.StateMap$Each)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private final native void putKeyValue(com.google.gwt.core.client.JavaScriptObject, java.lang.String, java.lang.String);

    public final com.google.gwt.core.client.JavaScriptObject asJavaScriptObject()
    {
        com.google.gwt.core.client.JavaScriptObject $r0;
        org.waveprotocol.wave.client.gadget.StateMap$9 $r2;
        org.waveprotocol.wave.client.gadget.StateMap r1;

        r1 := @this: org.waveprotocol.wave.client.gadget.StateMap;

        $r0 = staticinvoke <com.google.gwt.core.client.JavaScriptObject: com.google.gwt.core.client.JavaScriptObject createObject()>();

        $r2 = new org.waveprotocol.wave.client.gadget.StateMap$9;

        specialinvoke $r2.<org.waveprotocol.wave.client.gadget.StateMap$9: void <init>(org.waveprotocol.wave.client.gadget.StateMap,com.google.gwt.core.client.JavaScriptObject)>(r1, $r0);

        virtualinvoke r1.<org.waveprotocol.wave.client.gadget.StateMap: void each(org.waveprotocol.wave.client.gadget.StateMap$Each)>($r2);

        return $r0;
    }

    private final native void nativeRemove(java.lang.String);

    private final native java.lang.String escapeValue(java.lang.String);

    static java.lang.String access$000(org.waveprotocol.wave.client.gadget.StateMap, java.lang.String)
    {
        java.lang.String r1, $r2;
        org.waveprotocol.wave.client.gadget.StateMap r0;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.StateMap;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.StateMap: java.lang.String escapeValue(java.lang.String)>(r1);

        return $r2;
    }

    static void access$100(org.waveprotocol.wave.client.gadget.StateMap, com.google.gwt.core.client.JavaScriptObject, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.StateMap r0;
        com.google.gwt.core.client.JavaScriptObject r1;
        java.lang.String r2, r3;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.StateMap;

        r1 := @parameter1: com.google.gwt.core.client.JavaScriptObject;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.StateMap: void putKeyValue(com.google.gwt.core.client.JavaScriptObject,java.lang.String,java.lang.String)>(r1, r2, r3);

        return;
    }
}
