public class org.xmlpull.v1.builder.impl.XmlNamespaceImpl extends java.lang.Object implements org.xmlpull.v1.builder.XmlNamespace
{
    private java.lang.String namespaceName;
    private java.lang.String prefix;

    void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.xmlpull.v1.builder.XmlBuilderException $r2;
        org.xmlpull.v1.builder.impl.XmlNamespaceImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlNamespaceImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r2.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("namespace name can not be null");

        throw $r2;

     label1:
        r0.<org.xmlpull.v1.builder.impl.XmlNamespaceImpl: java.lang.String namespaceName> = r1;

        return;
    }

    void <init>(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlNamespaceImpl r0;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r9, $r13;
        int $i0, $i2;
        java.lang.String r1, r2, $r10;
        org.xmlpull.v1.builder.XmlBuilderException $r12, $r14;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlNamespaceImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.xmlpull.v1.builder.impl.XmlNamespaceImpl: java.lang.String prefix> = r1;

        if r2 != null goto label1;

        $r12 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r12.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("namespace name can not be null");

        throw $r12;

     label1:
        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        $i2 = (int) -1;

        if $i0 == $i2 goto label2;

        $r14 = new org.xmlpull.v1.builder.XmlBuilderException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("prefix \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' for namespace \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' can not contain colon (:)");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>($r10);

        throw $r14;

     label2:
        r0.<org.xmlpull.v1.builder.impl.XmlNamespaceImpl: java.lang.String namespaceName> = r2;

        return;
    }

    public java.lang.String getPrefix()
    {
        java.lang.String $r1;
        org.xmlpull.v1.builder.impl.XmlNamespaceImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlNamespaceImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlNamespaceImpl: java.lang.String prefix>;

        return $r1;
    }

    public java.lang.String getNamespaceName()
    {
        java.lang.String $r1;
        org.xmlpull.v1.builder.impl.XmlNamespaceImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlNamespaceImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlNamespaceImpl: java.lang.String namespaceName>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.xmlpull.v1.builder.impl.XmlNamespaceImpl r1;
        org.xmlpull.v1.builder.XmlNamespace r2;
        java.lang.Object r0;
        java.lang.String $r3, $r4;
        boolean $z0, $z1;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlNamespaceImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        $z0 = r0 instanceof org.xmlpull.v1.builder.XmlNamespace;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (org.xmlpull.v1.builder.XmlNamespace) r0;

        $r3 = virtualinvoke r1.<org.xmlpull.v1.builder.impl.XmlNamespaceImpl: java.lang.String getNamespaceName()>();

        $r4 = interfaceinvoke r2.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getNamespaceName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z1;
    }

    public java.lang.String toString()
    {
        org.xmlpull.v1.builder.impl.XmlNamespaceImpl r2;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r7, $r8;
        java.lang.String $r3, $r6, $r9;

        r2 := @this: org.xmlpull.v1.builder.impl.XmlNamespaceImpl;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{prefix=\'");

        $r3 = r2.<org.xmlpull.v1.builder.impl.XmlNamespaceImpl: java.lang.String prefix>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\',namespaceName=\'");

        $r6 = r2.<org.xmlpull.v1.builder.impl.XmlNamespaceImpl: java.lang.String namespaceName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'}");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }
}
