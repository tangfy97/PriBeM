public class com.hp.hpl.jena.sparql.algebra.optimize.ExprVisitorApplyVisitor extends com.hp.hpl.jena.sparql.expr.ExprVisitorBase
{
    private final com.hp.hpl.jena.sparql.algebra.OpVisitor visitor;

    public void <init>(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.ExprVisitorApplyVisitor r0;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.ExprVisitorApplyVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprVisitorBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.optimize.ExprVisitorApplyVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor> = r1;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.ExprFunctionOp)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionOp r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1;
        com.hp.hpl.jena.sparql.algebra.optimize.ExprVisitorApplyVisitor r2;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r3;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.optimize.ExprVisitorApplyVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunctionOp;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: com.hp.hpl.jena.sparql.algebra.Op getGraphPattern()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.optimize.ExprVisitorApplyVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor>;

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r3);

        return;
    }
}
