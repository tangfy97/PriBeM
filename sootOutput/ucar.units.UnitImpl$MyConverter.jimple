public class ucar.units.UnitImpl$MyConverter extends ucar.units.ConverterImpl
{
    private final ucar.units.DerivableUnit fromUnit;
    private final ucar.units.DerivableUnit toUnit;

    protected void <init>(ucar.units.Unit, ucar.units.Unit) throws ucar.units.ConversionException
    {
        ucar.units.Unit r1, r2;
        ucar.units.DerivableUnit $r4, $r5;
        ucar.units.ConversionException $r3;
        ucar.units.UnitImpl$MyConverter r0;
        boolean $z0, $z1;

        r0 := @this: ucar.units.UnitImpl$MyConverter;

        r1 := @parameter0: ucar.units.Unit;

        r2 := @parameter1: ucar.units.Unit;

        specialinvoke r0.<ucar.units.ConverterImpl: void <init>(ucar.units.Unit,ucar.units.Unit)>(r1, r2);

        $z0 = r1 instanceof ucar.units.DerivableUnit;

        if $z0 == 0 goto label1;

        $z1 = r2 instanceof ucar.units.DerivableUnit;

        if $z1 != 0 goto label2;

     label1:
        $r3 = new ucar.units.ConversionException;

        specialinvoke $r3.<ucar.units.ConversionException: void <init>(ucar.units.Unit,ucar.units.Unit)>(r1, r2);

        throw $r3;

     label2:
        $r4 = (ucar.units.DerivableUnit) r1;

        r0.<ucar.units.UnitImpl$MyConverter: ucar.units.DerivableUnit fromUnit> = $r4;

        $r5 = (ucar.units.DerivableUnit) r2;

        r0.<ucar.units.UnitImpl$MyConverter: ucar.units.DerivableUnit toUnit> = $r5;

        return;
    }

    public double convert(double)
    {
        ucar.units.DerivableUnit $r1, $r2;
        ucar.units.ConversionException $r3;
        ucar.units.UnitImpl$MyConverter r0;
        double d0, $d1, d2;

        r0 := @this: ucar.units.UnitImpl$MyConverter;

        d0 := @parameter0: double;

     label1:
        $r2 = r0.<ucar.units.UnitImpl$MyConverter: ucar.units.DerivableUnit toUnit>;

        $r1 = r0.<ucar.units.UnitImpl$MyConverter: ucar.units.DerivableUnit fromUnit>;

        $d1 = interfaceinvoke $r1.<ucar.units.DerivableUnit: double toDerivedUnit(double)>(d0);

        d2 = interfaceinvoke $r2.<ucar.units.DerivableUnit: double fromDerivedUnit(double)>($d1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        d2 = 0.0;

     label4:
        return d2;

        catch ucar.units.ConversionException from label1 to label2 with label3;
    }

    public float[] convert(float[], float[])
    {
        ucar.units.DerivableUnit $r3, $r4;
        ucar.units.ConversionException $r6;
        float[] r1, r2, $r5;
        ucar.units.UnitImpl$MyConverter r0;

        r0 := @this: ucar.units.UnitImpl$MyConverter;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

     label1:
        $r4 = r0.<ucar.units.UnitImpl$MyConverter: ucar.units.DerivableUnit toUnit>;

        $r3 = r0.<ucar.units.UnitImpl$MyConverter: ucar.units.DerivableUnit fromUnit>;

        $r5 = interfaceinvoke $r3.<ucar.units.DerivableUnit: float[] toDerivedUnit(float[],float[])>(r1, r2);

        interfaceinvoke $r4.<ucar.units.DerivableUnit: float[] fromDerivedUnit(float[],float[])>($r5, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return r2;

        catch ucar.units.ConversionException from label1 to label2 with label3;
    }

    public double[] convert(double[], double[])
    {
        ucar.units.DerivableUnit $r3, $r4;
        ucar.units.ConversionException $r6;
        double[] r1, r2, $r5;
        ucar.units.UnitImpl$MyConverter r0;

        r0 := @this: ucar.units.UnitImpl$MyConverter;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

     label1:
        $r4 = r0.<ucar.units.UnitImpl$MyConverter: ucar.units.DerivableUnit toUnit>;

        $r3 = r0.<ucar.units.UnitImpl$MyConverter: ucar.units.DerivableUnit fromUnit>;

        $r5 = interfaceinvoke $r3.<ucar.units.DerivableUnit: double[] toDerivedUnit(double[],double[])>(r1, r2);

        interfaceinvoke $r4.<ucar.units.DerivableUnit: double[] fromDerivedUnit(double[],double[])>($r5, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return r2;

        catch ucar.units.ConversionException from label1 to label2 with label3;
    }
}
