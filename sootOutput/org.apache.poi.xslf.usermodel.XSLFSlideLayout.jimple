public class org.apache.poi.xslf.usermodel.XSLFSlideLayout extends org.apache.poi.xslf.usermodel.XSLFSheet
{
    private org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout _layout;
    private org.apache.poi.xslf.usermodel.XSLFSlideMaster _master;

    void <init>()
    {
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: void <init>()>();

        $r1 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout$Factory: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout newInstance()>();

        r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout _layout> = $r1;

        return;
    }

    public void <init>(org.apache.poi.openxml4j.opc.PackagePart, org.apache.poi.openxml4j.opc.PackageRelationship) throws java.io.IOException, org.apache.xmlbeans.XmlException
    {
        org.apache.poi.openxml4j.opc.PackageRelationship r2;
        org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData $r8;
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r0;
        org.apache.poi.openxml4j.opc.PackagePart r1, $r3;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout $r6, $r7;
        org.openxmlformats.schemas.presentationml.x2006.main.SldLayoutDocument $r5;
        java.io.InputStream $r4;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePart;

        r2 := @parameter1: org.apache.poi.openxml4j.opc.PackageRelationship;

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: void <init>(org.apache.poi.openxml4j.opc.PackagePart,org.apache.poi.openxml4j.opc.PackageRelationship)>(r1, r2);

        $r3 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r4 = virtualinvoke $r3.<org.apache.poi.openxml4j.opc.PackagePart: java.io.InputStream getInputStream()>();

        $r5 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.SldLayoutDocument$Factory: org.openxmlformats.schemas.presentationml.x2006.main.SldLayoutDocument parse(java.io.InputStream)>($r4);

        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.presentationml.x2006.main.SldLayoutDocument: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout getSldLayout()>();

        r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout _layout> = $r6;

        $r7 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout _layout>;

        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout: org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData getCSld()>();

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: void setCommonSlideData(org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData)>($r8);

        return;
    }

    public java.lang.String getName()
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData $r2;
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout $r1;
        java.lang.String $r3;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout _layout>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout: org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData getCSld()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData: java.lang.String getName()>();

        return $r3;
    }

    public org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout getXmlObject()
    {
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout _layout>;

        return $r1;
    }

    protected java.lang.String getRootElementName()
    {
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        return "sldLayout";
    }

    public org.apache.poi.xslf.usermodel.XSLFSlideMaster getSlideMaster()
    {
        java.lang.IllegalStateException $r4;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster $r1, $r2, $r3, $r14;
        org.apache.poi.POIXMLDocumentPart r13;
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r0;
        java.lang.String $r7, $r9;
        boolean $z0, $z1;
        java.util.Iterator $r11;
        java.util.List $r10;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.Object $r12;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.apache.poi.xslf.usermodel.XSLFSlideMaster _master>;

        if $r1 != null goto label3;

        $r10 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: java.util.List getRelations()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.apache.poi.POIXMLDocumentPart) $r12;

        $z1 = r13 instanceof org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        if $z1 == 0 goto label2;

        $r14 = (org.apache.poi.xslf.usermodel.XSLFSlideMaster) r13;

        r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.apache.poi.xslf.usermodel.XSLFSlideMaster _master> = $r14;

     label2:
        goto label1;

     label3:
        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.apache.poi.xslf.usermodel.XSLFSlideMaster _master>;

        if $r2 != null goto label4;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SlideMaster was not found for ");

        $r7 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label4:
        $r3 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.apache.poi.xslf.usermodel.XSLFSlideMaster _master>;

        return $r3;
    }

    public org.apache.poi.xslf.usermodel.XSLFSlideMaster getMasterSheet()
    {
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r0;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.apache.poi.xslf.usermodel.XSLFSlideMaster getSlideMaster()>();

        return $r1;
    }

    public org.apache.poi.xslf.usermodel.XSLFTheme getTheme()
    {
        org.apache.poi.xslf.usermodel.XSLFTheme $r2;
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r0;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.apache.poi.xslf.usermodel.XSLFSlideMaster getSlideMaster()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.apache.poi.xslf.usermodel.XSLFTheme getTheme()>();

        return $r2;
    }

    public boolean getFollowMasterGraphics()
    {
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout _layout>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout: boolean isSetShowMasterSp()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout _layout>;

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout: boolean getShowMasterSp()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected boolean canDraw(org.apache.poi.xslf.usermodel.XSLFShape)
    {
        org.apache.poi.xslf.usermodel.XSLFShape r0;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r1;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder $r2;
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r3;
        boolean $z0;

        r3 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        r0 := @parameter0: org.apache.poi.xslf.usermodel.XSLFShape;

        $z0 = r0 instanceof org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        if $z0 == 0 goto label1;

        r1 = (org.apache.poi.xslf.usermodel.XSLFSimpleShape) r0;

        $r2 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder getCTPlaceholder()>();

        if $r2 == null goto label1;

        return 0;

     label1:
        return 1;
    }

    public org.apache.poi.xslf.usermodel.XSLFBackground getBackground()
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData $r2;
        org.openxmlformats.schemas.presentationml.x2006.main.CTBackground $r3;
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout $r1;
        org.apache.poi.xslf.usermodel.XSLFBackground $r5, $r6;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster $r4;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout _layout>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout: org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData getCSld()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData: org.openxmlformats.schemas.presentationml.x2006.main.CTBackground getBg()>();

        if $r3 == null goto label1;

        $r6 = new org.apache.poi.xslf.usermodel.XSLFBackground;

        specialinvoke $r6.<org.apache.poi.xslf.usermodel.XSLFBackground: void <init>(org.openxmlformats.schemas.presentationml.x2006.main.CTBackground,org.apache.poi.xslf.usermodel.XSLFSheet)>($r3, r0);

        return $r6;

     label1:
        $r4 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.apache.poi.xslf.usermodel.XSLFSlideMaster getMasterSheet()>();

        $r5 = virtualinvoke $r4.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.apache.poi.xslf.usermodel.XSLFBackground getBackground()>();

        return $r5;
    }

    public void copyLayout(org.apache.poi.xslf.usermodel.XSLFSlide)
    {
        org.apache.poi.xslf.usermodel.XSLFShape r2;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape $r7;
        int[] $r5;
        org.openxmlformats.schemas.presentationml.x2006.main.CTShape $r8;
        int i0, $i1, $i2, i3;
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r0;
        org.apache.xmlbeans.XmlObject $r9, $r10;
        org.apache.poi.xslf.usermodel.XSLFTextShape r3;
        boolean $z0;
        org.apache.poi.xslf.usermodel.XSLFShape[] $r1;
        org.apache.poi.xslf.usermodel.Placeholder $r4;
        org.apache.poi.xslf.usermodel.XSLFSlide r6;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        r6 := @parameter0: org.apache.poi.xslf.usermodel.XSLFSlide;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.apache.poi.xslf.usermodel.XSLFShape[] getShapes()>();

        i0 = lengthof $r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        r2 = $r1[i3];

        $z0 = r2 instanceof org.apache.poi.xslf.usermodel.XSLFTextShape;

        if $z0 == 0 goto label5;

        r3 = (org.apache.poi.xslf.usermodel.XSLFTextShape) r2;

        $r4 = virtualinvoke r3.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.apache.poi.xslf.usermodel.Placeholder getTextType()>();

        if $r4 != null goto label2;

        goto label5;

     label2:
        $r5 = <org.apache.poi.xslf.usermodel.XSLFSlideLayout$1: int[] $SwitchMap$org$apache$poi$xslf$usermodel$Placeholder>;

        $i1 = virtualinvoke $r4.<org.apache.poi.xslf.usermodel.Placeholder: int ordinal()>();

        $i2 = $r5[$i1];

        tableswitch($i2)
        {
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label3;
            default: goto label4;
        };

     label3:
        goto label5;

     label4:
        $r7 = virtualinvoke r6.<org.apache.poi.xslf.usermodel.XSLFSlide: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape getSpTree()>();

        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTShape addNewSp()>();

        $r9 = virtualinvoke r3.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.apache.xmlbeans.XmlObject getXmlObject()>();

        $r10 = interfaceinvoke $r9.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject copy()>();

        interfaceinvoke $r8.<org.openxmlformats.schemas.presentationml.x2006.main.CTShape: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>($r10);

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return;
    }

    public org.apache.poi.xslf.usermodel.SlideLayout getType()
    {
        int $i0, i1;
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r0;
        org.openxmlformats.schemas.presentationml.x2006.main.STSlideLayoutType$Enum $r2;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout $r1;
        org.apache.poi.xslf.usermodel.SlideLayout[] $r3;
        org.apache.poi.xslf.usermodel.SlideLayout $r4;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout _layout>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout: org.openxmlformats.schemas.presentationml.x2006.main.STSlideLayoutType$Enum getType()>();

        $i0 = virtualinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.STSlideLayoutType$Enum: int intValue()>();

        i1 = $i0 - 1;

        $r3 = staticinvoke <org.apache.poi.xslf.usermodel.SlideLayout: org.apache.poi.xslf.usermodel.SlideLayout[] values()>();

        $r4 = $r3[i1];

        return $r4;
    }

    public volatile org.apache.poi.xslf.usermodel.XSLFSheet getMasterSheet()
    {
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r0;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.apache.poi.xslf.usermodel.XSLFSlideMaster getMasterSheet()>();

        return $r1;
    }

    public volatile org.apache.xmlbeans.XmlObject getXmlObject()
    {
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideLayout getXmlObject()>();

        return $r1;
    }
}
