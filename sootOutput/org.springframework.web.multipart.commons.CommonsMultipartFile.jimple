public class org.springframework.web.multipart.commons.CommonsMultipartFile extends java.lang.Object implements org.springframework.web.multipart.MultipartFile, java.io.Serializable
{
    protected static final org.apache.commons.logging.Log logger;
    private final org.apache.commons.fileupload.FileItem fileItem;
    private final long size;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/web/multipart/commons/CommonsMultipartFile;");

        <org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>(org.apache.commons.fileupload.FileItem)
    {
        org.springframework.web.multipart.commons.CommonsMultipartFile r0;
        org.apache.commons.fileupload.FileItem r1, $r2;
        long $l0;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartFile;

        r1 := @parameter0: org.apache.commons.fileupload.FileItem;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem> = r1;

        $r2 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        $l0 = interfaceinvoke $r2.<org.apache.commons.fileupload.FileItem: long getSize()>();

        r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: long size> = $l0;

        return;
    }

    public final org.apache.commons.fileupload.FileItem getFileItem()
    {
        org.springframework.web.multipart.commons.CommonsMultipartFile r0;
        org.apache.commons.fileupload.FileItem $r1;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartFile;

        $r1 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        return $r1;
    }

    public java.lang.String getName()
    {
        java.lang.String $r2;
        org.springframework.web.multipart.commons.CommonsMultipartFile r0;
        org.apache.commons.fileupload.FileItem $r1;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartFile;

        $r1 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.fileupload.FileItem: java.lang.String getFieldName()>();

        return $r2;
    }

    public java.lang.String getOriginalFilename()
    {
        org.apache.commons.fileupload.FileItem $r1;
        org.springframework.web.multipart.commons.CommonsMultipartFile r0;
        int $i0, $i1, i2, $i4, $i6;
        java.lang.String $r2, $r3;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartFile;

        $r1 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.fileupload.FileItem: java.lang.String getName()>();

        if $r2 != null goto label1;

        return "";

     label1:
        $i0 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        i2 = $i0;

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        i2 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(java.lang.String)>("\\");

     label2:
        $i6 = (int) -1;

        if i2 == $i6 goto label3;

        $i1 = i2 + 1;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r3;

     label3:
        return $r2;
    }

    public java.lang.String getContentType()
    {
        java.lang.String $r2;
        org.springframework.web.multipart.commons.CommonsMultipartFile r0;
        org.apache.commons.fileupload.FileItem $r1;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartFile;

        $r1 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.fileupload.FileItem: java.lang.String getContentType()>();

        return $r2;
    }

    public boolean isEmpty()
    {
        long $l0;
        byte $b1;
        org.springframework.web.multipart.commons.CommonsMultipartFile r0;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartFile;

        $l0 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: long size>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public long getSize()
    {
        long $l0;
        org.springframework.web.multipart.commons.CommonsMultipartFile r0;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartFile;

        $l0 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: long size>;

        return $l0;
    }

    public byte[] getBytes()
    {
        byte[] $r2, $r4;
        java.lang.IllegalStateException $r3;
        org.springframework.web.multipart.commons.CommonsMultipartFile r0;
        org.apache.commons.fileupload.FileItem $r1;
        boolean $z0;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartFile;

        $z0 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: boolean isAvailable()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("File has been moved - cannot be read again");

        throw $r3;

     label1:
        $r1 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.fileupload.FileItem: byte[] get()>();

        if $r2 == null goto label2;

        $r4 = $r2;

        goto label3;

     label2:
        $r4 = newarray (byte)[0];

     label3:
        return $r4;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        byte[] $r3;
        java.lang.IllegalStateException $r6;
        org.apache.commons.fileupload.FileItem $r1;
        java.io.ByteArrayInputStream $r7;
        org.springframework.web.multipart.commons.CommonsMultipartFile r0;
        boolean $z0;
        java.io.InputStream $r2, $r5;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartFile;

        $z0 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: boolean isAvailable()>();

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("File has been moved - cannot be read again");

        throw $r6;

     label1:
        $r1 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.fileupload.FileItem: java.io.InputStream getInputStream()>();

        if $r2 == null goto label2;

        $r5 = $r2;

        goto label3;

     label2:
        $r7 = new java.io.ByteArrayInputStream;

        $r5 = $r7;

        $r3 = newarray (byte)[0];

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

     label3:
        return $r5;
    }

    public void transferTo(java.io.File) throws java.io.IOException, java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r42, $r46;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Exception $r12;
        java.lang.StringBuilder $r8, $r9, $r17, $r28, $r29, $r31, $r32, $r34, $r35, $r36, $r37, $r39, $r40, $r43, $r45, $r47;
        java.lang.Throwable $r20;
        java.lang.String $r7, $r10, $r16, $r18, $r22, r23, $r24, $r27, $r30, $r33, $r38, $r41;
        org.apache.commons.fileupload.FileItem $r2, $r4;
        java.io.IOException $r19, $r44, $r48;
        java.io.File r1;
        org.springframework.web.multipart.commons.CommonsMultipartFile r0;
        org.apache.commons.logging.Log $r3, $r13, $r25;
        org.apache.commons.fileupload.FileUploadException $r49;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartFile;

        r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: boolean isAvailable()>();

        if $z0 != 0 goto label01;

        $r42 = new java.lang.IllegalStateException;

        specialinvoke $r42.<java.lang.IllegalStateException: void <init>(java.lang.String)>("File has already been moved - cannot be transferred again");

        throw $r42;

     label01:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label02;

        $z5 = virtualinvoke r1.<java.io.File: boolean delete()>();

        if $z5 != 0 goto label02;

        $r44 = new java.io.IOException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination file [");

        $r7 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] already exists and could not be deleted");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r44.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r44;

     label02:
        $r2 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        interfaceinvoke $r2.<org.apache.commons.fileupload.FileItem: void write(java.io.File)>(r1);

        $r3 = <org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label10;

        r23 = "transferred";

        $r4 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        $z3 = interfaceinvoke $r4.<org.apache.commons.fileupload.FileItem: boolean isInMemory()>();

        if $z3 != 0 goto label05;

        $z4 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: boolean isAvailable()>();

        if $z4 == 0 goto label03;

        $r24 = "copied";

        goto label04;

     label03:
        $r24 = "moved";

     label04:
        r23 = $r24;

     label05:
        $r25 = <org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.logging.Log logger>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("Multipart file \'");

        $r27 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: java.lang.String getName()>();

        $r28 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with original filename [");

        $r30 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: java.lang.String getOriginalFilename()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], stored ");

        $r33 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: java.lang.String getStorageDescription()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to [");

        $r38 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r41);

     label06:
        goto label10;

     label07:
        $r20 := @caughtexception;

        $r46 = new java.lang.IllegalStateException;

        $r49 = (org.apache.commons.fileupload.FileUploadException) $r20;

        $r22 = virtualinvoke $r49.<org.apache.commons.fileupload.FileUploadException: java.lang.String getMessage()>();

        specialinvoke $r46.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r46;

     label08:
        $r19 := @caughtexception;

        throw $r19;

     label09:
        $r12 := @caughtexception;

        $r13 = <org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Could not transfer to file", $r12);

        $r48 = new java.io.IOException;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not transfer to file: ");

        $r16 = virtualinvoke $r12.<java.lang.Exception: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r48;

     label10:
        return;

        catch org.apache.commons.fileupload.FileUploadException from label02 to label06 with label07;
        catch java.io.IOException from label02 to label06 with label08;
        catch java.lang.Exception from label02 to label06 with label09;
    }

    protected boolean isAvailable()
    {
        org.apache.commons.fileupload.FileItem $r1, $r2, $r3, $r4;
        long $l0, $l1;
        java.io.File $r6;
        org.apache.commons.fileupload.disk.DiskFileItem $r5;
        byte $b2;
        org.springframework.web.multipart.commons.CommonsMultipartFile r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartFile;

        $r1 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.fileupload.FileItem: boolean isInMemory()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        $z1 = $r2 instanceof org.apache.commons.fileupload.disk.DiskFileItem;

        if $z1 == 0 goto label2;

        $r4 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        $r5 = (org.apache.commons.fileupload.disk.DiskFileItem) $r4;

        $r6 = virtualinvoke $r5.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File getStoreLocation()>();

        $z2 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        return $z2;

     label2:
        $r3 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        $l0 = interfaceinvoke $r3.<org.apache.commons.fileupload.FileItem: long getSize()>();

        $l1 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: long size>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public java.lang.String getStorageDescription()
    {
        org.apache.commons.fileupload.FileItem $r1, $r2, $r4;
        java.io.File $r6;
        org.apache.commons.fileupload.disk.DiskFileItem $r5;
        org.springframework.web.multipart.commons.CommonsMultipartFile r0;
        java.lang.StringBuilder $r3, $r8, $r9;
        java.lang.String $r7, $r10;
        boolean $z0, $z1;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartFile;

        $r1 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.fileupload.FileItem: boolean isInMemory()>();

        if $z0 == 0 goto label1;

        return "in memory";

     label1:
        $r2 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        $z1 = $r2 instanceof org.apache.commons.fileupload.disk.DiskFileItem;

        if $z1 == 0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("at [");

        $r4 = r0.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem fileItem>;

        $r5 = (org.apache.commons.fileupload.disk.DiskFileItem) $r4;

        $r6 = virtualinvoke $r5.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File getStoreLocation()>();

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label2:
        return "on disk";
    }
}
