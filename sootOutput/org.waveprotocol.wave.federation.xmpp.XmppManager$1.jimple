class org.waveprotocol.wave.federation.xmpp.XmppManager$1 extends java.lang.Object implements java.lang.Runnable
{
    final java.lang.String val$key;
    final org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall val$call;
    final org.waveprotocol.wave.federation.xmpp.PacketCallback val$callback;
    final org.waveprotocol.wave.federation.xmpp.XmppManager this$0;

    void <init>(org.waveprotocol.wave.federation.xmpp.XmppManager, java.lang.String, org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall, org.waveprotocol.wave.federation.xmpp.PacketCallback)
    {
        org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall r3;
        org.waveprotocol.wave.federation.xmpp.PacketCallback r4;
        org.waveprotocol.wave.federation.xmpp.XmppManager r1;
        java.lang.String r2;
        org.waveprotocol.wave.federation.xmpp.XmppManager$1 r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager$1;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall;

        r4 := @parameter3: org.waveprotocol.wave.federation.xmpp.PacketCallback;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$1: org.waveprotocol.wave.federation.xmpp.XmppManager this$0> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$1: java.lang.String val$key> = r2;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$1: org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall val$call> = r3;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$1: org.waveprotocol.wave.federation.xmpp.PacketCallback val$callback> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r7;
        org.waveprotocol.wave.federation.xmpp.XmppManager$1 r0;
        java.util.concurrent.ConcurrentMap $r2;
        org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall $r3;
        org.waveprotocol.wave.federation.xmpp.PacketCallback $r6;
        org.waveprotocol.wave.federation.xmpp.XmppManager $r1;
        java.lang.String $r4;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager$1;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$1: org.waveprotocol.wave.federation.xmpp.XmppManager this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppManager: java.util.concurrent.ConcurrentMap access$100(org.waveprotocol.wave.federation.xmpp.XmppManager)>($r1);

        $r4 = r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$1: java.lang.String val$key>;

        $r3 = r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$1: org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall val$call>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z0 == 0 goto label1;

        $r6 = r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$1: org.waveprotocol.wave.federation.xmpp.PacketCallback val$callback>;

        $r5 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code REMOTE_SERVER_TIMEOUT>;

        $r7 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError newFederationError(org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code)>($r5);

        interfaceinvoke $r6.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r7);

     label1:
        return;
    }
}
