public class org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter extends org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter
{

    public void <init>()
    {
        org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter r0;

        r0 := @this: org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;

        specialinvoke r0.<org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter: void <init>()>();

        return;
    }

    public boolean canRead(java.lang.Class, org.springframework.http.MediaType)
    {
        org.springframework.http.MediaType r2;
        java.lang.Class r0;
        boolean $z0, $z1, $z2;
        org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter r1;

        r1 := @this: org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.http.MediaType;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlRootElement;");

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlType;");

        if $z2 == 0 goto label2;

     label1:
        $z1 = virtualinvoke r1.<org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter: boolean canRead(org.springframework.http.MediaType)>(r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean canWrite(java.lang.Class, org.springframework.http.MediaType)
    {
        org.springframework.http.MediaType r3;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class r0;
        org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter r2;
        boolean $z0;

        r2 := @this: org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.springframework.http.MediaType;

        $r1 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.Class,java.lang.Class)>(r0, class "Ljavax/xml/bind/annotation/XmlRootElement;");

        if $r1 == null goto label1;

        $z0 = virtualinvoke r2.<org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter: boolean canWrite(org.springframework.http.MediaType)>(r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean supports(java.lang.Class)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Class r2;
        org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter r1;

        r1 := @this: org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;

        r2 := @parameter0: java.lang.Class;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    protected java.lang.Object readFromSource(java.lang.Class, org.springframework.http.HttpHeaders, javax.xml.transform.Source) throws java.io.IOException
    {
        org.springframework.http.converter.HttpMessageConversionException $r8;
        javax.xml.transform.Source r3;
        java.lang.String $r10, $r12, $r18, $r20;
        org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter r0;
        boolean $z0;
        javax.xml.bind.Unmarshaller $r2;
        javax.xml.bind.UnmarshalException $r13;
        org.springframework.http.HttpHeaders r21;
        javax.xml.bind.JAXBElement $r4;
        javax.xml.bind.JAXBException $r7;
        org.springframework.http.converter.HttpMessageNotReadableException $r14;
        java.lang.Class r1;
        java.lang.Object $r5, $r6;
        java.lang.StringBuilder $r9, $r11, $r15, $r16, $r17, $r19;

        r0 := @this: org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r21 := @parameter1: org.springframework.http.HttpHeaders;

        r3 := @parameter2: javax.xml.transform.Source;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter: javax.xml.bind.Unmarshaller createUnmarshaller(java.lang.Class)>(r1);

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlRootElement;");

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r2.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(javax.xml.transform.Source)>(r3);

     label2:
        return $r6;

     label3:
        $r4 = interfaceinvoke $r2.<javax.xml.bind.Unmarshaller: javax.xml.bind.JAXBElement unmarshal(javax.xml.transform.Source,java.lang.Class)>(r3, r1);

        $r5 = virtualinvoke $r4.<javax.xml.bind.JAXBElement: java.lang.Object getValue()>();

     label4:
        return $r5;

     label5:
        $r13 := @caughtexception;

        $r14 = new org.springframework.http.converter.HttpMessageNotReadableException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not unmarshal to [");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r18 = virtualinvoke $r13.<javax.xml.bind.UnmarshalException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.springframework.http.converter.HttpMessageNotReadableException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r13);

        throw $r14;

     label6:
        $r7 := @caughtexception;

        $r8 = new org.springframework.http.converter.HttpMessageConversionException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate JAXBContext: ");

        $r10 = virtualinvoke $r7.<javax.xml.bind.JAXBException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.http.converter.HttpMessageConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r7);

        throw $r8;

        catch javax.xml.bind.UnmarshalException from label1 to label2 with label5;
        catch javax.xml.bind.UnmarshalException from label3 to label4 with label5;
        catch javax.xml.bind.JAXBException from label1 to label2 with label6;
        catch javax.xml.bind.JAXBException from label3 to label4 with label6;
    }

    protected void writeToResult(java.lang.Object, org.springframework.http.HttpHeaders, javax.xml.transform.Result) throws java.io.IOException
    {
        org.springframework.http.converter.HttpMessageConversionException $r8;
        javax.xml.bind.Marshaller $r3;
        javax.xml.transform.Result r6;
        org.springframework.http.converter.HttpMessageNotWritableException $r14;
        javax.xml.bind.MarshalException $r13;
        java.lang.String $r10, $r12, $r18, $r20;
        org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter r2;
        org.springframework.http.HttpHeaders r4;
        org.springframework.http.MediaType $r5;
        javax.xml.bind.JAXBException $r7;
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.StringBuilder $r9, $r11, $r15, $r16, $r17, $r19;

        r2 := @this: org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: org.springframework.http.HttpHeaders;

        r6 := @parameter2: javax.xml.transform.Result;

     label1:
        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class getUserClass(java.lang.Object)>(r0);

        $r3 = virtualinvoke r2.<org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter: javax.xml.bind.Marshaller createMarshaller(java.lang.Class)>($r1);

        $r5 = virtualinvoke r4.<org.springframework.http.HttpHeaders: org.springframework.http.MediaType getContentType()>();

        specialinvoke r2.<org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter: void setCharset(org.springframework.http.MediaType,javax.xml.bind.Marshaller)>($r5, $r3);

        interfaceinvoke $r3.<javax.xml.bind.Marshaller: void marshal(java.lang.Object,javax.xml.transform.Result)>(r0, r6);

     label2:
        goto label5;

     label3:
        $r13 := @caughtexception;

        $r14 = new org.springframework.http.converter.HttpMessageNotWritableException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not marshal [");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r18 = virtualinvoke $r13.<javax.xml.bind.MarshalException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.springframework.http.converter.HttpMessageNotWritableException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r13);

        throw $r14;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.springframework.http.converter.HttpMessageConversionException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate JAXBContext: ");

        $r10 = virtualinvoke $r7.<javax.xml.bind.JAXBException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.http.converter.HttpMessageConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r7);

        throw $r8;

     label5:
        return;

        catch javax.xml.bind.MarshalException from label1 to label2 with label3;
        catch javax.xml.bind.JAXBException from label1 to label2 with label4;
    }

    private void setCharset(org.springframework.http.MediaType, javax.xml.bind.Marshaller) throws javax.xml.bind.PropertyException
    {
        java.nio.charset.Charset $r1, $r3;
        org.springframework.http.MediaType r0;
        javax.xml.bind.Marshaller r2;
        java.lang.String $r4;
        org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter r5;

        r5 := @this: org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;

        r0 := @parameter0: org.springframework.http.MediaType;

        r2 := @parameter1: javax.xml.bind.Marshaller;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r2.<javax.xml.bind.Marshaller: void setProperty(java.lang.String,java.lang.Object)>("jaxb.encoding", $r4);

     label1:
        return;
    }
}
