public final class org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl extends org.waveprotocol.wave.communication.gwt.JsonMessage implements org.waveprotocol.wave.federation.ProtocolSignerInfo
{
    private static final java.lang.String keyHashAlgorithm;
    private static final java.lang.String keyDomain;
    private static final java.lang.String keyCertificate;

    protected void <init>()
    {
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        specialinvoke r0.<org.waveprotocol.wave.communication.gwt.JsonMessage: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl create()
    {
        org.waveprotocol.wave.communication.gwt.JsonMessage $r0;
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r1;

        $r0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonMessage: org.waveprotocol.wave.communication.gwt.JsonMessage createJsonMessage()>();

        r1 = (org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl) $r0;

        virtualinvoke r1.<org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl: void clearCertificate()>();

        return r1;
    }

    public void copyFrom(org.waveprotocol.wave.federation.ProtocolSignerInfo)
    {
        org.waveprotocol.wave.federation.ProtocolSignerInfo r1;
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r0, $r2;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        r1 := @parameter0: org.waveprotocol.wave.federation.ProtocolSignerInfo;

        $r2 = (org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl) r1;

        specialinvoke r0.<org.waveprotocol.wave.communication.gwt.JsonMessage: void copyFrom(org.waveprotocol.wave.communication.gwt.JsonMessage)>($r2);

        return;
    }

    public org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm getHashAlgorithm()
    {
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r0;
        java.lang.Enum $r2;
        org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm $r3;
        org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm[] $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "1");

        if $z0 == 0 goto label1;

        $i0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: int getPropertyAsInteger(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "1");

        $r1 = staticinvoke <org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm: org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm[] values()>();

        $r2 = staticinvoke <org.waveprotocol.wave.communication.ProtoEnums: java.lang.Enum valOf(int,java.lang.Enum[])>($i0, $r1);

        $r3 = (org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm) $r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setHashAlgorithm(org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm)
    {
        int $i0;
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r0;
        org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm r1;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        r1 := @parameter0: org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm;

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm: int getValue()>();

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void setPropertyAsInteger(com.google.gwt.core.client.JavaScriptObject,java.lang.String,int)>(r0, "1", $i0);

        return;
    }

    public java.lang.String getDomain()
    {
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "2");

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: java.lang.String getPropertyAsString(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "2");

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public void setDomain(java.lang.String)
    {
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void setPropertyAsString(com.google.gwt.core.client.JavaScriptObject,java.lang.String,java.lang.String)>(r0, "2", r1);

        return;
    }

    public java.util.List getCertificate()
    {
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r0;
        int $i0, i1;
        org.waveprotocol.wave.communication.Blob $r2;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void initArray(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl: int getCertificateSize()>();

        if i1 >= $i0 goto label2;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl: org.waveprotocol.wave.communication.Blob getCertificate(int)>(i1);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public void addAllCertificate(java.util.List)
    {
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r4;
        java.util.List r0;
        java.util.Iterator $r1;
        org.waveprotocol.wave.communication.Blob r3;
        java.lang.Object $r2;
        boolean $z0;

        r4 := @this: org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.waveprotocol.wave.communication.Blob) $r2;

        virtualinvoke r4.<org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl: void addCertificate(org.waveprotocol.wave.communication.Blob)>(r3);

        goto label1;

     label2:
        return;
    }

    public org.waveprotocol.wave.communication.Blob getCertificate(int)
    {
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r0;
        int i0, $i1, $i2;
        java.lang.String $r5, $r12, $r18;
        com.google.gwt.core.client.JavaScriptObject $r1, $r2;
        java.lang.IllegalArgumentException $r6, $r13;
        org.waveprotocol.wave.communication.Blob $r4;
        com.google.gwt.core.client.JsArrayString r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        i0 := @parameter0: int;

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void initArray(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

        $r1 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: com.google.gwt.core.client.JavaScriptObject getPropertyAsObject(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

        $r2 = virtualinvoke $r1.<com.google.gwt.core.client.JavaScriptObject: com.google.gwt.core.client.JavaScriptObject cast()>();

        r3 = (com.google.gwt.core.client.JsArrayString) $r2;

        if i0 >= 0 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < 0");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label1:
        $i1 = virtualinvoke r3.<com.google.gwt.core.client.JsArrayString: int length()>();

        if $i1 > i0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">= array length ");

        $i2 = virtualinvoke r3.<com.google.gwt.core.client.JsArrayString: int length()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label2:
        $r4 = new org.waveprotocol.wave.communication.Blob;

        $r5 = virtualinvoke r3.<com.google.gwt.core.client.JsArrayString: java.lang.String get(int)>(i0);

        specialinvoke $r4.<org.waveprotocol.wave.communication.Blob: void <init>(java.lang.String)>($r5);

        return $r4;
    }

    public void setCertificate(int, org.waveprotocol.wave.communication.Blob)
    {
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r0;
        com.google.gwt.core.client.JavaScriptObject $r1;
        java.lang.IllegalArgumentException $r5;
        int i0;
        org.waveprotocol.wave.communication.Blob r2;
        com.google.gwt.core.client.JsArrayString $r3;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r4, $r10;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        i0 := @parameter0: int;

        r2 := @parameter1: org.waveprotocol.wave.communication.Blob;

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < 0");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void initArray(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

        $r1 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: com.google.gwt.core.client.JavaScriptObject getPropertyAsObject(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

        $r3 = (com.google.gwt.core.client.JsArrayString) $r1;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.communication.Blob: java.lang.String getData()>();

        virtualinvoke $r3.<com.google.gwt.core.client.JsArrayString: void set(int,java.lang.String)>(i0, $r4);

        return;
    }

    public int getCertificateSize()
    {
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r0;
        com.google.gwt.core.client.JsArray $r2;
        com.google.gwt.core.client.JavaScriptObject $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: com.google.gwt.core.client.JavaScriptObject getPropertyAsObject(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

        $r2 = (com.google.gwt.core.client.JsArray) $r1;

        $i0 = virtualinvoke $r2.<com.google.gwt.core.client.JsArray: int length()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public void addCertificate(org.waveprotocol.wave.communication.Blob)
    {
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r0;
        com.google.gwt.core.client.JavaScriptObject $r1;
        org.waveprotocol.wave.communication.Blob r2;
        com.google.gwt.core.client.JsArrayString $r3;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        r2 := @parameter0: org.waveprotocol.wave.communication.Blob;

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void initArray(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

        $r1 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: com.google.gwt.core.client.JavaScriptObject getPropertyAsObject(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

        $r3 = (com.google.gwt.core.client.JsArrayString) $r1;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.communication.Blob: java.lang.String getData()>();

        virtualinvoke $r3.<com.google.gwt.core.client.JsArrayString: void push(java.lang.String)>($r4);

        return;
    }

    public void clearCertificate()
    {
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void clearArray(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

        return;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl r1;
        org.waveprotocol.wave.federation.ProtocolSignerInfo $r2;
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl;

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r1.<org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl: boolean nativeIsEqualTo(java.lang.Object)>(r0);

        return $z3;

     label1:
        $z1 = r0 instanceof org.waveprotocol.wave.federation.ProtocolSignerInfo;

        if $z1 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.federation.ProtocolSignerInfo) r0;

        $z2 = staticinvoke <org.waveprotocol.wave.federation.ProtocolSignerInfoUtil: boolean isEqual(org.waveprotocol.wave.federation.ProtocolSignerInfo,org.waveprotocol.wave.federation.ProtocolSignerInfo)>(r1, $r2);

        return $z2;

     label2:
        return 0;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl: java.lang.String keyCertificate> = "3";

        <org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl: java.lang.String keyDomain> = "2";

        <org.waveprotocol.wave.federation.jso.ProtocolSignerInfoJsoImpl: java.lang.String keyHashAlgorithm> = "1";

        return;
    }
}
