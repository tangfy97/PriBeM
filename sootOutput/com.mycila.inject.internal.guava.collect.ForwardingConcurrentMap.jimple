public abstract class com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap extends com.mycila.inject.internal.guava.collect.ForwardingMap implements java.util.concurrent.ConcurrentMap
{

    protected void <init>()
    {
        com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingMap: void <init>()>();

        return;
    }

    protected abstract java.util.concurrent.ConcurrentMap delegate();

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r2, r3, $r4;
        com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap: java.util.concurrent.ConcurrentMap delegate()>();

        $r4 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r2, r3);

        return $r4;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r2, r3;
        com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap r0;
        java.util.concurrent.ConcurrentMap $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap: java.util.concurrent.ConcurrentMap delegate()>();

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r2, r3);

        return $z0;
    }

    public java.lang.Object replace(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r2, r3, $r4;
        com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap: java.util.concurrent.ConcurrentMap delegate()>();

        $r4 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>(r2, r3);

        return $r4;
    }

    public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r2, r3, r4;
        com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap r0;
        java.util.concurrent.ConcurrentMap $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap: java.util.concurrent.ConcurrentMap delegate()>();

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r4);

        return $z0;
    }

    protected volatile java.util.Map delegate()
    {
        com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap: java.util.concurrent.ConcurrentMap delegate()>();

        return $r1;
    }

    protected volatile java.lang.Object delegate()
    {
        com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingConcurrentMap: java.util.concurrent.ConcurrentMap delegate()>();

        return $r1;
    }
}
