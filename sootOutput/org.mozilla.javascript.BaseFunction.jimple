public class org.mozilla.javascript.BaseFunction extends org.mozilla.javascript.IdScriptableObject implements org.mozilla.javascript.Function
{
    static final long serialVersionUID;
    private static final java.lang.Object FUNCTION_TAG;
    private static final int Id_length;
    private static final int Id_arity;
    private static final int Id_name;
    private static final int Id_prototype;
    private static final int Id_arguments;
    private static final int MAX_INSTANCE_ID;
    private static final int Id_constructor;
    private static final int Id_toString;
    private static final int Id_toSource;
    private static final int Id_apply;
    private static final int Id_call;
    private static final int MAX_PROTOTYPE_ID;
    private java.lang.Object prototypeProperty;
    private boolean isPrototypePropertyImmune;

    static void init(org.mozilla.javascript.Scriptable, boolean)
    {
        org.mozilla.javascript.Scriptable r1;
        org.mozilla.javascript.BaseFunction $r0;
        boolean z0;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        z0 := @parameter1: boolean;

        $r0 = new org.mozilla.javascript.BaseFunction;

        specialinvoke $r0.<org.mozilla.javascript.BaseFunction: void <init>()>();

        $r0.<org.mozilla.javascript.BaseFunction: boolean isPrototypePropertyImmune> = 1;

        virtualinvoke $r0.<org.mozilla.javascript.BaseFunction: org.mozilla.javascript.IdFunctionObject exportAsJSClass(int,org.mozilla.javascript.Scriptable,boolean)>(5, r1, z0);

        return;
    }

    public void <init>()
    {
        org.mozilla.javascript.BaseFunction r0;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: void <init>()>();

        return;
    }

    public void <init>(org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r1, r2;
        org.mozilla.javascript.BaseFunction r0;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: void <init>(org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable)>(r1, r2);

        return;
    }

    public java.lang.String getClassName()
    {
        org.mozilla.javascript.BaseFunction r0;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        return "Function";
    }

    public boolean hasInstance(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.EcmaError $r3;
        org.mozilla.javascript.Scriptable r4, $r5;
        org.mozilla.javascript.BaseFunction r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        r4 := @parameter0: org.mozilla.javascript.Scriptable;

        $r1 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getProperty(org.mozilla.javascript.Scriptable,java.lang.String)>(r0, "prototype");

        $z0 = $r1 instanceof org.mozilla.javascript.Scriptable;

        if $z0 == 0 goto label1;

        $r5 = (org.mozilla.javascript.Scriptable) $r1;

        $z1 = staticinvoke <org.mozilla.javascript.ScriptRuntime: boolean jsDelegatesTo(org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable)>(r4, $r5);

        return $z1;

     label1:
        $r2 = virtualinvoke r0.<org.mozilla.javascript.BaseFunction: java.lang.String getFunctionName()>();

        $r3 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.EcmaError typeError1(java.lang.String,java.lang.String)>("msg.instanceof.bad.prototype", $r2);

        throw $r3;
    }

    protected int getMaxInstanceId()
    {
        org.mozilla.javascript.BaseFunction r0;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        return 5;
    }

    protected int findInstanceIdInfo(java.lang.String)
    {
        java.lang.IllegalStateException $r7;
        byte b3, b4, $b5, b7, b8, b9;
        int $i0, $i2, $i6, $i10, $i11;
        java.lang.String r0, r3, r4, r5, r6;
        boolean $z0, $z1;
        char $c1;
        org.mozilla.javascript.BaseFunction r1;

        r1 := @this: org.mozilla.javascript.BaseFunction;

        r0 := @parameter0: java.lang.String;

        b3 = 0;

        b9 = 0;

        b8 = 0;

        b7 = 0;

        r3 = null;

        r6 = null;

        r5 = null;

        r4 = null;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        tableswitch($i0)
        {
            case 4: goto label01;
            case 5: goto label02;
            case 6: goto label03;
            case 7: goto label06;
            case 8: goto label06;
            case 9: goto label04;
            default: goto label06;
        };

     label01:
        r3 = "name";

        r6 = "name";

        r5 = "name";

        r4 = "name";

        b3 = 3;

        b9 = 3;

        b8 = 3;

        b7 = 3;

        goto label06;

     label02:
        r3 = "arity";

        r6 = "arity";

        r5 = "arity";

        r4 = "arity";

        b3 = 2;

        b9 = 2;

        b8 = 2;

        b7 = 2;

        goto label06;

     label03:
        r3 = "length";

        r6 = "length";

        r5 = "length";

        r4 = "length";

        b3 = 1;

        b9 = 1;

        b8 = 1;

        b7 = 1;

        goto label06;

     label04:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i10 = (int) $c1;

        if $i10 != 97 goto label05;

        r3 = "arguments";

        r6 = "arguments";

        r5 = "arguments";

        r4 = "arguments";

        b3 = 5;

        b9 = 5;

        b8 = 5;

        b7 = 5;

        goto label06;

     label05:
        $i11 = (int) $c1;

        if $i11 != 112 goto label06;

        r3 = "prototype";

        r6 = "prototype";

        r5 = "prototype";

        r4 = "prototype";

        b3 = 4;

        b9 = 4;

        b8 = 4;

        b7 = 4;

        goto label06;

     label06:
        if r5 == null goto label07;

        if r6 == r0 goto label07;

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label07;

        b3 = 0;

        b9 = 0;

        b8 = 0;

        b7 = 0;

     label07:
        if b8 != 0 goto label08;

        $i2 = specialinvoke r1.<org.mozilla.javascript.IdScriptableObject: int findInstanceIdInfo(java.lang.String)>(r0);

        return $i2;

     label08:
        tableswitch(b9)
        {
            case 1: goto label09;
            case 2: goto label09;
            case 3: goto label09;
            case 4: goto label10;
            case 5: goto label13;
            default: goto label14;
        };

     label09:
        b4 = 7;

        goto label15;

     label10:
        $z0 = r1.<org.mozilla.javascript.BaseFunction: boolean isPrototypePropertyImmune>;

        if $z0 == 0 goto label11;

        $b5 = 7;

        goto label12;

     label11:
        $b5 = 2;

     label12:
        b4 = $b5;

        goto label15;

     label13:
        b4 = 6;

        goto label15;

     label14:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label15:
        $i6 = staticinvoke <org.mozilla.javascript.BaseFunction: int instanceIdInfo(int,int)>(b4, b7);

        return $i6;
    }

    protected java.lang.String getInstanceIdName(int)
    {
        int i0;
        java.lang.String $r1;
        org.mozilla.javascript.BaseFunction r0;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        return "length";

     label2:
        return "arity";

     label3:
        return "name";

     label4:
        return "prototype";

     label5:
        return "arguments";

     label6:
        $r1 = specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: java.lang.String getInstanceIdName(int)>(i0);

        return $r1;
    }

    protected java.lang.Object getInstanceIdValue(int)
    {
        java.lang.Integer $r4, $r5;
        org.mozilla.javascript.BaseFunction r0;
        int i0, $i1, $i2;
        java.lang.Object $r1, $r2, $r6;
        java.lang.String $r3;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        $i2 = virtualinvoke r0.<org.mozilla.javascript.BaseFunction: int getLength()>();

        $r5 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Integer wrapInt(int)>($i2);

        return $r5;

     label2:
        $i1 = virtualinvoke r0.<org.mozilla.javascript.BaseFunction: int getArity()>();

        $r4 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Integer wrapInt(int)>($i1);

        return $r4;

     label3:
        $r3 = virtualinvoke r0.<org.mozilla.javascript.BaseFunction: java.lang.String getFunctionName()>();

        return $r3;

     label4:
        $r2 = virtualinvoke r0.<org.mozilla.javascript.BaseFunction: java.lang.Object getPrototypeProperty()>();

        return $r2;

     label5:
        $r1 = specialinvoke r0.<org.mozilla.javascript.BaseFunction: java.lang.Object getArguments()>();

        return $r1;

     label6:
        $r6 = specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: java.lang.Object getInstanceIdValue(int)>(i0);

        return $r6;
    }

    protected void setInstanceIdValue(int, java.lang.Object)
    {
        org.mozilla.javascript.BaseFunction r0;
        int i0;
        java.lang.Object r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        if i0 != 4 goto label4;

        $z0 = r0.<org.mozilla.javascript.BaseFunction: boolean isPrototypePropertyImmune>;

        if $z0 != 0 goto label3;

        if r1 == null goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = <org.mozilla.javascript.UniqueTag: org.mozilla.javascript.UniqueTag NULL_VALUE>;

     label2:
        r0.<org.mozilla.javascript.BaseFunction: java.lang.Object prototypeProperty> = $r3;

     label3:
        return;

     label4:
        if i0 != 5 goto label6;

        $r2 = <org.mozilla.javascript.BaseFunction: java.lang.Object NOT_FOUND>;

        if r1 != $r2 goto label5;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label5:
        virtualinvoke r0.<org.mozilla.javascript.BaseFunction: void defaultPut(java.lang.String,java.lang.Object)>("arguments", r1);

     label6:
        specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: void setInstanceIdValue(int,java.lang.Object)>(i0, r1);

        return;
    }

    protected void fillConstructorProperties(org.mozilla.javascript.IdFunctionObject)
    {
        org.mozilla.javascript.IdFunctionObject r0;
        org.mozilla.javascript.BaseFunction r1;

        r1 := @this: org.mozilla.javascript.BaseFunction;

        r0 := @parameter0: org.mozilla.javascript.IdFunctionObject;

        virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: void setPrototype(org.mozilla.javascript.Scriptable)>(r1);

        specialinvoke r1.<org.mozilla.javascript.IdScriptableObject: void fillConstructorProperties(org.mozilla.javascript.IdFunctionObject)>(r0);

        return;
    }

    protected void initPrototypeId(int)
    {
        byte b1;
        org.mozilla.javascript.BaseFunction r0;
        int i0;
        java.lang.Object $r4;
        java.lang.String $r2, r3;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        b1 = 1;

        r3 = "constructor";

        goto label7;

     label2:
        b1 = 1;

        r3 = "toString";

        goto label7;

     label3:
        b1 = 1;

        r3 = "toSource";

        goto label7;

     label4:
        b1 = 2;

        r3 = "apply";

        goto label7;

     label5:
        b1 = 1;

        r3 = "call";

        goto label7;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label7:
        $r4 = <org.mozilla.javascript.BaseFunction: java.lang.Object FUNCTION_TAG>;

        virtualinvoke r0.<org.mozilla.javascript.BaseFunction: void initPrototypeMethod(java.lang.Object,int,java.lang.String,int)>($r4, i0, r3, b1);

        return;
    }

    public java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject, org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        java.lang.Object[] r5;
        org.mozilla.javascript.IdFunctionObject r0;
        byte b5;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r11, $r14, $r16;
        boolean $z0, $z1;
        org.mozilla.javascript.Context r2;
        java.lang.IllegalArgumentException $r13;
        org.mozilla.javascript.Scriptable r3, r4;
        org.mozilla.javascript.BaseFunction r7, $r8, $r10;
        java.lang.Object $r1, $r6, $r9, $r12, $r15;

        r7 := @this: org.mozilla.javascript.BaseFunction;

        r0 := @parameter0: org.mozilla.javascript.IdFunctionObject;

        r2 := @parameter1: org.mozilla.javascript.Context;

        r3 := @parameter2: org.mozilla.javascript.Scriptable;

        r4 := @parameter3: org.mozilla.javascript.Scriptable;

        r5 := @parameter4: java.lang.Object[];

        $r1 = <org.mozilla.javascript.BaseFunction: java.lang.Object FUNCTION_TAG>;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: boolean hasTag(java.lang.Object)>($r1);

        if $z0 != 0 goto label01;

        $r15 = specialinvoke r7.<org.mozilla.javascript.IdScriptableObject: java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r0, r2, r3, r4, r5);

        return $r15;

     label01:
        $i0 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: int methodId()>();

        tableswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label07;
            case 5: goto label07;
            default: goto label10;
        };

     label02:
        $r12 = staticinvoke <org.mozilla.javascript.BaseFunction: java.lang.Object jsConstructor(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r2, r3, r5);

        return $r12;

     label03:
        $r10 = specialinvoke r7.<org.mozilla.javascript.BaseFunction: org.mozilla.javascript.BaseFunction realFunction(org.mozilla.javascript.Scriptable,org.mozilla.javascript.IdFunctionObject)>(r4, r0);

        $i3 = staticinvoke <org.mozilla.javascript.ScriptRuntime: int toInt32(java.lang.Object[],int)>(r5, 0);

        $r11 = virtualinvoke $r10.<org.mozilla.javascript.BaseFunction: java.lang.String decompile(int,int)>($i3, 0);

        return $r11;

     label04:
        $r8 = specialinvoke r7.<org.mozilla.javascript.BaseFunction: org.mozilla.javascript.BaseFunction realFunction(org.mozilla.javascript.Scriptable,org.mozilla.javascript.IdFunctionObject)>(r4, r0);

        i4 = 0;

        b5 = 2;

        $i1 = lengthof r5;

        if $i1 == 0 goto label06;

        $r9 = r5[0];

        $i2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: int toInt32(java.lang.Object)>($r9);

        i4 = $i2;

        if $i2 < 0 goto label05;

        b5 = 0;

        goto label06;

     label05:
        i4 = 0;

     label06:
        $r16 = virtualinvoke $r8.<org.mozilla.javascript.BaseFunction: java.lang.String decompile(int,int)>(i4, b5);

        return $r16;

     label07:
        if $i0 != 4 goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        $r6 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Object applyOrCall(boolean,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>($z1, r2, r3, r4, r5);

        return $r6;

     label10:
        $r13 = new java.lang.IllegalArgumentException;

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;
    }

    private org.mozilla.javascript.BaseFunction realFunction(org.mozilla.javascript.Scriptable, org.mozilla.javascript.IdFunctionObject)
    {
        org.mozilla.javascript.EcmaError $r5;
        org.mozilla.javascript.Scriptable r0;
        org.mozilla.javascript.IdFunctionObject r3;
        org.mozilla.javascript.BaseFunction $r6, r7;
        java.lang.Class $r1;
        java.lang.Object $r2;
        java.lang.String $r4;
        boolean $z0;

        r7 := @this: org.mozilla.javascript.BaseFunction;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        r3 := @parameter1: org.mozilla.javascript.IdFunctionObject;

        $r1 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class FunctionClass>;

        $r2 = interfaceinvoke r0.<org.mozilla.javascript.Scriptable: java.lang.Object getDefaultValue(java.lang.Class)>($r1);

        $z0 = $r2 instanceof org.mozilla.javascript.BaseFunction;

        if $z0 == 0 goto label1;

        $r6 = (org.mozilla.javascript.BaseFunction) $r2;

        return $r6;

     label1:
        $r4 = virtualinvoke r3.<org.mozilla.javascript.IdFunctionObject: java.lang.String getFunctionName()>();

        $r5 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.EcmaError typeError1(java.lang.String,java.lang.String)>("msg.incompat.call", $r4);

        throw $r5;
    }

    public void setImmunePrototypeProperty(java.lang.Object)
    {
        java.lang.IllegalStateException $r2;
        org.mozilla.javascript.BaseFunction r0;
        java.lang.Object r1, $r3;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        r1 := @parameter0: java.lang.Object;

        $z0 = r0.<org.mozilla.javascript.BaseFunction: boolean isPrototypePropertyImmune>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        if r1 == null goto label2;

        $r3 = r1;

        goto label3;

     label2:
        $r3 = <org.mozilla.javascript.UniqueTag: org.mozilla.javascript.UniqueTag NULL_VALUE>;

     label3:
        r0.<org.mozilla.javascript.BaseFunction: java.lang.Object prototypeProperty> = $r3;

        r0.<org.mozilla.javascript.BaseFunction: boolean isPrototypePropertyImmune> = 1;

        return;
    }

    protected org.mozilla.javascript.Scriptable getClassPrototype()
    {
        org.mozilla.javascript.Scriptable $r2, $r3;
        org.mozilla.javascript.BaseFunction r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.BaseFunction: java.lang.Object getPrototypeProperty()>();

        $z0 = $r1 instanceof org.mozilla.javascript.Scriptable;

        if $z0 == 0 goto label1;

        $r3 = (org.mozilla.javascript.Scriptable) $r1;

        return $r3;

     label1:
        $r2 = staticinvoke <org.mozilla.javascript.BaseFunction: org.mozilla.javascript.Scriptable getClassPrototype(org.mozilla.javascript.Scriptable,java.lang.String)>(r0, "Object");

        return $r2;
    }

    public java.lang.Object call(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        org.mozilla.javascript.Scriptable r3, r4;
        java.lang.Object[] r5;
        org.mozilla.javascript.Context r2;
        org.mozilla.javascript.BaseFunction r1;
        java.lang.Object $r0;

        r1 := @this: org.mozilla.javascript.BaseFunction;

        r2 := @parameter0: org.mozilla.javascript.Context;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        r4 := @parameter2: org.mozilla.javascript.Scriptable;

        r5 := @parameter3: java.lang.Object[];

        $r0 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        return $r0;
    }

    public org.mozilla.javascript.Scriptable construct(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        java.lang.IllegalStateException $r10;
        java.lang.Object[] r4;
        java.lang.StringBuffer $r11, $r12, $r14, $r15, $r18;
        java.lang.String $r13, $r17, $r19;
        boolean $z0, $z1;
        org.mozilla.javascript.Context r1;
        org.mozilla.javascript.Scriptable r2, $r3, $r6, $r7, $r8, $r9, r21;
        org.mozilla.javascript.BaseFunction r0;
        java.lang.Object $r5, $r20;
        java.lang.Class $r16;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        r1 := @parameter0: org.mozilla.javascript.Context;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        r4 := @parameter2: java.lang.Object[];

        $r3 = virtualinvoke r0.<org.mozilla.javascript.BaseFunction: org.mozilla.javascript.Scriptable createObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable)>(r1, r2);

        r21 = $r3;

        if $r3 == null goto label1;

        $r20 = virtualinvoke r0.<org.mozilla.javascript.BaseFunction: java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r1, r2, $r3, r4);

        $z1 = $r20 instanceof org.mozilla.javascript.Scriptable;

        if $z1 == 0 goto label4;

        r21 = (org.mozilla.javascript.Scriptable) $r20;

        goto label4;

     label1:
        $r5 = virtualinvoke r0.<org.mozilla.javascript.BaseFunction: java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r1, r2, null, r4);

        $z0 = $r5 instanceof org.mozilla.javascript.Scriptable;

        if $z0 != 0 goto label2;

        $r10 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad implementaion of call as constructor, name=");

        $r13 = virtualinvoke r0.<org.mozilla.javascript.BaseFunction: java.lang.String getFunctionName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in ");

        $r16 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw $r10;

     label2:
        r21 = (org.mozilla.javascript.Scriptable) $r5;

        $r6 = interfaceinvoke r21.<org.mozilla.javascript.Scriptable: org.mozilla.javascript.Scriptable getPrototype()>();

        if $r6 != null goto label3;

        $r9 = virtualinvoke r0.<org.mozilla.javascript.BaseFunction: org.mozilla.javascript.Scriptable getClassPrototype()>();

        interfaceinvoke r21.<org.mozilla.javascript.Scriptable: void setPrototype(org.mozilla.javascript.Scriptable)>($r9);

     label3:
        $r7 = interfaceinvoke r21.<org.mozilla.javascript.Scriptable: org.mozilla.javascript.Scriptable getParentScope()>();

        if $r7 != null goto label4;

        $r8 = virtualinvoke r0.<org.mozilla.javascript.BaseFunction: org.mozilla.javascript.Scriptable getParentScope()>();

        if r21 == $r8 goto label4;

        interfaceinvoke r21.<org.mozilla.javascript.Scriptable: void setParentScope(org.mozilla.javascript.Scriptable)>($r8);

     label4:
        return r21;
    }

    public org.mozilla.javascript.Scriptable createObject(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.NativeObject $r0;
        org.mozilla.javascript.Scriptable $r2, $r3, r5;
        org.mozilla.javascript.Context r4;
        org.mozilla.javascript.BaseFunction r1;

        r1 := @this: org.mozilla.javascript.BaseFunction;

        r4 := @parameter0: org.mozilla.javascript.Context;

        r5 := @parameter1: org.mozilla.javascript.Scriptable;

        $r0 = new org.mozilla.javascript.NativeObject;

        specialinvoke $r0.<org.mozilla.javascript.NativeObject: void <init>()>();

        $r2 = virtualinvoke r1.<org.mozilla.javascript.BaseFunction: org.mozilla.javascript.Scriptable getClassPrototype()>();

        interfaceinvoke $r0.<org.mozilla.javascript.Scriptable: void setPrototype(org.mozilla.javascript.Scriptable)>($r2);

        $r3 = virtualinvoke r1.<org.mozilla.javascript.BaseFunction: org.mozilla.javascript.Scriptable getParentScope()>();

        interfaceinvoke $r0.<org.mozilla.javascript.Scriptable: void setParentScope(org.mozilla.javascript.Scriptable)>($r3);

        return $r0;
    }

    java.lang.String decompile(int, int)
    {
        java.lang.StringBuffer $r0;
        org.mozilla.javascript.BaseFunction r1;
        int i0, $i1, $i2, i3;
        java.lang.String $r2, $r3;
        boolean z0, $z2, $z3;

        r1 := @this: org.mozilla.javascript.BaseFunction;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $i1 = i0 & 1;

        if 0 == $i1 goto label1;

        $z3 = 1;

        $z2 = 1;

        goto label2;

     label1:
        $z3 = 0;

        $z2 = 0;

     label2:
        z0 = $z2;

        if $z3 != 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("function ");

        $r3 = virtualinvoke r1.<org.mozilla.javascript.BaseFunction: java.lang.String getFunctionName()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("() {\n\t");

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[native code, arity=");

        $i2 = virtualinvoke r1.<org.mozilla.javascript.BaseFunction: int getArity()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]\n");

        if z0 != 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}\n");

     label4:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public int getArity()
    {
        org.mozilla.javascript.BaseFunction r0;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        return 0;
    }

    public int getLength()
    {
        org.mozilla.javascript.BaseFunction r0;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        return 0;
    }

    public java.lang.String getFunctionName()
    {
        org.mozilla.javascript.BaseFunction r0;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        return "";
    }

    final java.lang.Object getPrototypeProperty()
    {
        java.lang.Throwable $r2;
        org.mozilla.javascript.UniqueTag $r1;
        org.mozilla.javascript.BaseFunction r0;
        java.lang.Object r3;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        r3 = r0.<org.mozilla.javascript.BaseFunction: java.lang.Object prototypeProperty>;

        if r3 != null goto label6;

        entermonitor r0;

     label1:
        r3 = r0.<org.mozilla.javascript.BaseFunction: java.lang.Object prototypeProperty>;

        if r3 != null goto label2;

        specialinvoke r0.<org.mozilla.javascript.BaseFunction: void setupDefaultPrototype()>();

        r3 = r0.<org.mozilla.javascript.BaseFunction: java.lang.Object prototypeProperty>;

     label2:
        exitmonitor r0;

     label3:
        goto label7;

     label4:
        $r2 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r2;

     label6:
        $r1 = <org.mozilla.javascript.UniqueTag: org.mozilla.javascript.UniqueTag NULL_VALUE>;

        if r3 != $r1 goto label7;

        r3 = null;

     label7:
        return r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void setupDefaultPrototype()
    {
        org.mozilla.javascript.NativeObject $r0;
        org.mozilla.javascript.Scriptable $r2;
        org.mozilla.javascript.BaseFunction r1;

        r1 := @this: org.mozilla.javascript.BaseFunction;

        $r0 = new org.mozilla.javascript.NativeObject;

        specialinvoke $r0.<org.mozilla.javascript.NativeObject: void <init>()>();

        virtualinvoke $r0.<org.mozilla.javascript.NativeObject: void defineProperty(java.lang.String,java.lang.Object,int)>("constructor", r1, 2);

        r1.<org.mozilla.javascript.BaseFunction: java.lang.Object prototypeProperty> = $r0;

        $r2 = staticinvoke <org.mozilla.javascript.BaseFunction: org.mozilla.javascript.Scriptable getObjectPrototype(org.mozilla.javascript.Scriptable)>(r1);

        if $r2 == $r0 goto label1;

        virtualinvoke $r0.<org.mozilla.javascript.NativeObject: void setPrototype(org.mozilla.javascript.Scriptable)>($r2);

     label1:
        return;
    }

    private java.lang.Object getArguments()
    {
        org.mozilla.javascript.Context $r3;
        org.mozilla.javascript.BaseFunction r0;
        java.lang.Object $r1, $r2, $r5;
        org.mozilla.javascript.NativeCall $r4;

        r0 := @this: org.mozilla.javascript.BaseFunction;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.BaseFunction: java.lang.Object defaultGet(java.lang.String)>("arguments");

        $r2 = <org.mozilla.javascript.BaseFunction: java.lang.Object NOT_FOUND>;

        if $r1 == $r2 goto label1;

        return $r1;

     label1:
        $r3 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getContext()>();

        $r4 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.NativeCall findFunctionActivation(org.mozilla.javascript.Context,org.mozilla.javascript.Function)>($r3, r0);

        if $r4 != null goto label2;

        $r5 = null;

        goto label3;

     label2:
        $r5 = virtualinvoke $r4.<org.mozilla.javascript.NativeCall: java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable)>("arguments", $r4);

     label3:
        return $r5;
    }

    private static java.lang.Object jsConstructor(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        org.mozilla.javascript.Interpreter $r10;
        java.lang.Object[] r0;
        int[] $r14;
        java.lang.StringBuffer $r1;
        int i0, $i1, $i2, $i3, i4, $i5;
        org.mozilla.javascript.Function $r11;
        java.lang.String $r3, $r4, $r5, $r13, $r16, r17;
        org.mozilla.javascript.Context r2;
        org.mozilla.javascript.ErrorReporter $r8, $r9;
        org.mozilla.javascript.Scriptable r6, $r7;
        java.lang.Object $r12, $r15;

        r2 := @parameter0: org.mozilla.javascript.Context;

        r6 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: java.lang.Object[];

        i0 = lengthof r0;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("function ");

        $i1 = virtualinvoke r2.<org.mozilla.javascript.Context: int getLanguageVersion()>();

        if $i1 == 120 goto label1;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("anonymous");

     label1:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        i4 = 0;

     label2:
        $i5 = i0 - 1;

        if i4 >= $i5 goto label4;

        if i4 <= 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

     label3:
        $r15 = r0[i4];

        $r16 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r15);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        i4 = i4 + 1;

        goto label2;

     label4:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") {");

        if i0 == 0 goto label5;

        $i3 = i0 - 1;

        $r12 = r0[$i3];

        $r13 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r12);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

     label5:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = newarray (int)[1];

        $r4 = staticinvoke <org.mozilla.javascript.Context: java.lang.String getSourcePositionFromStack(int[])>($r14);

        r17 = $r4;

        if $r4 != null goto label6;

        r17 = "<eval\'ed string>";

        $r14[0] = 1;

     label6:
        $i2 = $r14[0];

        $r5 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String makeUrlForGeneratedScript(boolean,java.lang.String,int)>(0, r17, $i2);

        $r7 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r6);

        $r8 = virtualinvoke r2.<org.mozilla.javascript.Context: org.mozilla.javascript.ErrorReporter getErrorReporter()>();

        $r9 = staticinvoke <org.mozilla.javascript.DefaultErrorReporter: org.mozilla.javascript.ErrorReporter forEval(org.mozilla.javascript.ErrorReporter)>($r8);

        $r10 = new org.mozilla.javascript.Interpreter;

        specialinvoke $r10.<org.mozilla.javascript.Interpreter: void <init>()>();

        $r11 = virtualinvoke r2.<org.mozilla.javascript.Context: org.mozilla.javascript.Function compileFunction(org.mozilla.javascript.Scriptable,java.lang.String,org.mozilla.javascript.Interpreter,org.mozilla.javascript.ErrorReporter,java.lang.String,int,java.lang.Object)>($r7, $r3, $r10, $r9, $r5, 1, null);

        return $r11;
    }

    protected int findPrototypeId(java.lang.String)
    {
        char $c1;
        byte b2;
        org.mozilla.javascript.BaseFunction r1;
        int $i0, $i3, $i4;
        java.lang.String r0, r2, r3, r4, r5;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.BaseFunction;

        r0 := @parameter0: java.lang.String;

        b2 = 0;

        r2 = null;

        r5 = null;

        r4 = null;

        r3 = null;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        tableswitch($i0)
        {
            case 4: goto label1;
            case 5: goto label2;
            case 6: goto label6;
            case 7: goto label6;
            case 8: goto label3;
            case 9: goto label6;
            case 10: goto label6;
            case 11: goto label5;
            default: goto label6;
        };

     label1:
        r2 = "call";

        r5 = "call";

        r4 = "call";

        r3 = "call";

        b2 = 5;

        goto label6;

     label2:
        r2 = "apply";

        r5 = "apply";

        r4 = "apply";

        r3 = "apply";

        b2 = 4;

        goto label6;

     label3:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(3);

        $i3 = (int) $c1;

        if $i3 != 111 goto label4;

        r2 = "toSource";

        r5 = "toSource";

        r4 = "toSource";

        r3 = "toSource";

        b2 = 3;

        goto label6;

     label4:
        $i4 = (int) $c1;

        if $i4 != 116 goto label6;

        r2 = "toString";

        r5 = "toString";

        r4 = "toString";

        r3 = "toString";

        b2 = 2;

        goto label6;

     label5:
        r2 = "constructor";

        r5 = "constructor";

        r4 = "constructor";

        r3 = "constructor";

        b2 = 1;

        goto label6;

     label6:
        if r3 == null goto label7;

        if r4 == r0 goto label7;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label7;

        b2 = 0;

     label7:
        return b2;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <org.mozilla.javascript.BaseFunction: int MAX_PROTOTYPE_ID> = 5;

        <org.mozilla.javascript.BaseFunction: int Id_call> = 5;

        <org.mozilla.javascript.BaseFunction: int Id_apply> = 4;

        <org.mozilla.javascript.BaseFunction: int Id_toSource> = 3;

        <org.mozilla.javascript.BaseFunction: int Id_toString> = 2;

        <org.mozilla.javascript.BaseFunction: int Id_constructor> = 1;

        <org.mozilla.javascript.BaseFunction: int MAX_INSTANCE_ID> = 5;

        <org.mozilla.javascript.BaseFunction: int Id_arguments> = 5;

        <org.mozilla.javascript.BaseFunction: int Id_prototype> = 4;

        <org.mozilla.javascript.BaseFunction: int Id_name> = 3;

        <org.mozilla.javascript.BaseFunction: int Id_arity> = 2;

        <org.mozilla.javascript.BaseFunction: int Id_length> = 1;

        <org.mozilla.javascript.BaseFunction: long serialVersionUID> = 5311394446546053859L;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.mozilla.javascript.BaseFunction: java.lang.Object FUNCTION_TAG> = $r0;

        return;
    }
}
