final class org.apache.poi.hwpf.converter.AbstractWordConverter$Structure extends java.lang.Object implements java.lang.Comparable
{
    final int end;
    final int start;
    final java.lang.Object structure;

    void <init>(org.apache.poi.hwpf.usermodel.Bookmark)
    {
        org.apache.poi.hwpf.usermodel.Bookmark r1;
        int $i0, $i1;
        org.apache.poi.hwpf.converter.AbstractWordConverter$Structure r0;

        r0 := @this: org.apache.poi.hwpf.converter.AbstractWordConverter$Structure;

        r1 := @parameter0: org.apache.poi.hwpf.usermodel.Bookmark;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke r1.<org.apache.poi.hwpf.usermodel.Bookmark: int getStart()>();

        r0.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: int start> = $i0;

        $i1 = interfaceinvoke r1.<org.apache.poi.hwpf.usermodel.Bookmark: int getEnd()>();

        r0.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: int end> = $i1;

        r0.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: java.lang.Object structure> = r1;

        return;
    }

    void <init>(org.apache.poi.hwpf.converter.AbstractWordConverter$DeadFieldBoundaries, int, int)
    {
        org.apache.poi.hwpf.converter.AbstractWordConverter$DeadFieldBoundaries r1;
        int i0, i1;
        org.apache.poi.hwpf.converter.AbstractWordConverter$Structure r0;

        r0 := @this: org.apache.poi.hwpf.converter.AbstractWordConverter$Structure;

        r1 := @parameter0: org.apache.poi.hwpf.converter.AbstractWordConverter$DeadFieldBoundaries;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: int start> = i0;

        r0.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: int end> = i1;

        r0.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: java.lang.Object structure> = r1;

        return;
    }

    void <init>(org.apache.poi.hwpf.usermodel.Field)
    {
        org.apache.poi.hwpf.usermodel.Field r1;
        int $i0, $i1;
        org.apache.poi.hwpf.converter.AbstractWordConverter$Structure r0;

        r0 := @this: org.apache.poi.hwpf.converter.AbstractWordConverter$Structure;

        r1 := @parameter0: org.apache.poi.hwpf.usermodel.Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke r1.<org.apache.poi.hwpf.usermodel.Field: int getFieldStartOffset()>();

        r0.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: int start> = $i0;

        $i1 = interfaceinvoke r1.<org.apache.poi.hwpf.usermodel.Field: int getFieldEndOffset()>();

        r0.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: int end> = $i1;

        r0.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: java.lang.Object structure> = r1;

        return;
    }

    public int compareTo(org.apache.poi.hwpf.converter.AbstractWordConverter$Structure)
    {
        byte $b4;
        int $i0, $i1, $i2, $i3;
        org.apache.poi.hwpf.converter.AbstractWordConverter$Structure r0, r1;

        r0 := @this: org.apache.poi.hwpf.converter.AbstractWordConverter$Structure;

        r1 := @parameter0: org.apache.poi.hwpf.converter.AbstractWordConverter$Structure;

        $i1 = r0.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: int start>;

        $i0 = r1.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: int start>;

        if $i1 >= $i0 goto label1;

        $b4 = -1;

        goto label3;

     label1:
        $i3 = r0.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: int start>;

        $i2 = r1.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: int start>;

        if $i3 != $i2 goto label2;

        $b4 = 0;

        goto label3;

     label2:
        $b4 = 1;

     label3:
        return $b4;
    }

    public java.lang.String toString()
    {
        org.apache.poi.hwpf.converter.AbstractWordConverter$Structure r2;
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r9;
        java.lang.Object $r7;
        java.lang.String $r8, $r10;

        r2 := @this: org.apache.poi.hwpf.converter.AbstractWordConverter$Structure;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Structure [");

        $i0 = r2.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: int start>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $i1 = r2.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: int end>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r7 = r2.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: java.lang.Object structure>;

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public volatile int compareTo(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        org.apache.poi.hwpf.converter.AbstractWordConverter$Structure r0, $r2;

        r0 := @this: org.apache.poi.hwpf.converter.AbstractWordConverter$Structure;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.poi.hwpf.converter.AbstractWordConverter$Structure) r1;

        $i0 = virtualinvoke r0.<org.apache.poi.hwpf.converter.AbstractWordConverter$Structure: int compareTo(org.apache.poi.hwpf.converter.AbstractWordConverter$Structure)>($r2);

        return $i0;
    }
}
