public class org.apache.commons.compress.compressors.xz.XZCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream
{
    private final java.io.InputStream in;

    public static boolean matches(byte[], int)
    {
        byte[] $r0, $r1, r2, $r3;
        byte $b3, $b4;
        int i0, $i1, $i2, i5, $i6, $i7;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r0 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        $i1 = lengthof $r0;

        if i0 >= $i1 goto label1;

        return 0;

     label1:
        i5 = 0;

     label2:
        $r1 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        $i2 = lengthof $r1;

        if i5 >= $i2 goto label4;

        $b4 = r2[i5];

        $r3 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        $b3 = $r3[i5];

        $i6 = (int) $b4;

        $i7 = (int) $b3;

        if $i6 == $i7 goto label3;

        return 0;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return 1;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: void <init>(java.io.InputStream,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.io.InputStream, boolean) throws java.io.IOException
    {
        org.tukaani.xz.XZInputStream $r3;
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        org.tukaani.xz.SingleXZInputStream $r1;
        boolean z0;
        java.io.InputStream r2;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        r2 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.compress.compressors.CompressorInputStream: void <init>()>();

        if z0 == 0 goto label1;

        $r3 = new org.tukaani.xz.XZInputStream;

        specialinvoke $r3.<org.tukaani.xz.XZInputStream: void <init>(java.io.InputStream)>(r2);

        r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: java.io.InputStream in> = $r3;

        goto label2;

     label1:
        $r1 = new org.tukaani.xz.SingleXZInputStream;

        specialinvoke $r1.<org.tukaani.xz.SingleXZInputStream: void <init>(java.io.InputStream)>(r2);

        r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: java.io.InputStream in> = $r1;

     label2:
        return;
    }

    public int read() throws java.io.IOException
    {
        byte $b1;
        int $i0, $i3;
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $b1 = -1;

        goto label2;

     label1:
        $b1 = 1;

     label2:
        virtualinvoke r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: void count(int)>($b1);

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        int i0, i1, $i2;
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: java.io.InputStream in>;

        $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: void count(int)>($i2);

        return $i2;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        long l0, $l1;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: java.io.InputStream in>;

        $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0);

        return $l1;
    }

    public int available() throws java.io.IOException
    {
        int $i0;
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }
}
