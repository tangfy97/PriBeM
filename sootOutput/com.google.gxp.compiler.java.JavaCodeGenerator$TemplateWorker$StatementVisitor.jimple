public class com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor extends com.google.gxp.compiler.base.DefaultingExpressionVisitor implements com.google.gxp.compiler.base.CallVisitor
{
    final com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0;

    protected void <init>(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker r1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker;

        r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0> = r1;

        specialinvoke r0.<com.google.gxp.compiler.base.DefaultingExpressionVisitor: void <init>()>();

        return;
    }

    public java.lang.Void defaultVisitExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.base.Expression r1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r2;

        r2 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.Void visitExceptionExpression(com.google.gxp.compiler.base.ExceptionExpression)
    {
        java.lang.AssertionError $r16;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r3;
        int[] $r1;
        com.google.gxp.compiler.base.ExceptionExpression$Kind $r2, $r19;
        int $i0, $i1;
        java.lang.String $r11, $r12, $r15, $r21;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker $r4;
        com.google.gxp.compiler.alerts.SourcePosition $r5;
        com.google.gxp.compiler.base.ExceptionExpression r0;
        com.google.gxp.compiler.base.OutputLanguage $r10;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r13, $r14, $r17, $r18, $r20;

        r3 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.ExceptionExpression;

        $r1 = <com.google.gxp.compiler.java.JavaCodeGenerator$1: int[] $SwitchMap$com$google$gxp$compiler$base$ExceptionExpression$Kind>;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.ExceptionExpression: com.google.gxp.compiler.base.ExceptionExpression$Kind getKind()>();

        $i0 = virtualinvoke $r2.<com.google.gxp.compiler.base.ExceptionExpression$Kind: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            default: goto label2;
        };

     label1:
        goto label3;

     label2:
        $r16 = new java.lang.AssertionError;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported ExceptionExpression.Kind: ");

        $r19 = virtualinvoke r0.<com.google.gxp.compiler.base.ExceptionExpression: com.google.gxp.compiler.base.ExceptionExpression$Kind getKind()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21);

        throw $r16;

     label3:
        $r4 = r3.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r5 = virtualinvoke r0.<com.google.gxp.compiler.base.ExceptionExpression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("throw new ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("java.lang.IllegalStateException");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r10 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $r11 = virtualinvoke r0.<com.google.gxp.compiler.base.ExceptionExpression: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r11);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$400(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r4, $r5, $r15);

        return null;
    }

    public java.lang.Void visitStringConstant(com.google.gxp.compiler.base.StringConstant)
    {
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker $r3;
        com.google.gxp.compiler.alerts.SourcePosition $r4;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r2;
        com.google.gxp.compiler.schema.Schema $r1;
        java.lang.String $r5;
        java.lang.AssertionError $r6;
        com.google.gxp.compiler.base.StringConstant r0;

        r2 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.StringConstant;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.StringConstant: com.google.gxp.compiler.schema.Schema getSchema()>();

        if $r1 != null goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r3 = r2.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r4 = virtualinvoke r0.<com.google.gxp.compiler.base.StringConstant: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r5 = virtualinvoke r0.<com.google.gxp.compiler.base.StringConstant: java.lang.String evaluate()>();

        virtualinvoke $r3.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void writeString(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String)>($r4, $r5);

        return null;
    }

    public java.lang.Void visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)
    {
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker $r2, $r7;
        com.google.gxp.compiler.alerts.SourcePosition $r3;
        com.google.gxp.compiler.base.Expression $r8;
        java.lang.Object[] $r4;
        com.google.gxp.compiler.schema.Schema $r5;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.String $r6, $r9;
        com.google.gxp.compiler.base.EscapeExpression r1;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.EscapeExpression;

        $r2 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r3 = virtualinvoke r1.<com.google.gxp.compiler.base.EscapeExpression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r4 = newarray (java.lang.Object)[4];

        $r5 = virtualinvoke r1.<com.google.gxp.compiler.base.EscapeExpression: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r6 = virtualinvoke $r5.<com.google.gxp.compiler.schema.Schema: java.lang.String getJavaAppender()>();

        $r4[0] = $r6;

        $r4[1] = "gxp$out";

        $r4[2] = "gxp_context";

        $r7 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r8 = virtualinvoke r1.<com.google.gxp.compiler.base.EscapeExpression: com.google.gxp.compiler.base.Expression getSubexpression()>();

        $r9 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String access$500(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,com.google.gxp.compiler.base.Expression)>($r7, $r8);

        $r4[3] = $r9;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$600(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r2, $r3, "%s.INSTANCE.append(%s, %s, %s);", $r4);

        return null;
    }

    public java.lang.Void visitExampleExpression(com.google.gxp.compiler.base.ExampleExpression)
    {
        com.google.gxp.compiler.base.ExampleExpression r0;
        java.lang.Void $r4;
        com.google.gxp.compiler.base.Expression $r1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r2;
        java.lang.Object $r3;

        r2 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.ExampleExpression;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.ExampleExpression: com.google.gxp.compiler.base.Expression getSubexpression()>();

        $r3 = virtualinvoke $r1.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r2);

        $r4 = (java.lang.Void) $r3;

        return $r4;
    }

    public java.lang.Void visitConvertibleToContent(com.google.gxp.compiler.base.ConvertibleToContent)
    {
        com.google.gxp.compiler.base.Expression $r1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r2;
        com.google.gxp.compiler.base.ConvertibleToContent r0;

        r2 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.ConvertibleToContent;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.ConvertibleToContent: com.google.gxp.compiler.base.Expression getSubexpression()>();

        virtualinvoke $r1.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r2);

        return null;
    }

    public java.lang.Void visitConcatenation(com.google.gxp.compiler.base.Concatenation)
    {
        java.util.List $r1;
        com.google.gxp.compiler.base.Expression r4;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r5;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        com.google.gxp.compiler.base.Concatenation r0;
        boolean $z0;

        r5 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.Concatenation;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.Concatenation: java.util.List getValues()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.gxp.compiler.base.Expression) $r3;

        virtualinvoke r4.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r5);

        goto label1;

     label2:
        return null;
    }

    public java.lang.Void visitConditional(com.google.gxp.compiler.base.Conditional)
    {
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker $r8, $r9;
        com.google.gxp.compiler.base.Conditional$Clause $r6, $r11;
        com.google.gxp.compiler.base.Expression $r7;
        java.util.Iterator $r2;
        com.google.gxp.compiler.base.Conditional r0;
        java.lang.AssertionError $r3;
        java.util.List $r1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r4;
        java.lang.Object $r5, $r10;
        boolean $z0, $z1, $z2;

        r4 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.Conditional;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.Conditional: java.util.List getClauses()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.gxp.compiler.base.Conditional$Clause) $r5;

        specialinvoke r4.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: void appendIf(java.lang.String,com.google.gxp.compiler.base.Conditional$Clause)>("if (", $r6);

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r10 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.google.gxp.compiler.base.Conditional$Clause) $r10;

        specialinvoke r4.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: void appendIf(java.lang.String,com.google.gxp.compiler.base.Conditional$Clause)>("} else if (", $r11);

        goto label1;

     label2:
        $r7 = virtualinvoke r0.<com.google.gxp.compiler.base.Conditional: com.google.gxp.compiler.base.Expression getElseExpression()>();

        $z2 = virtualinvoke $r7.<com.google.gxp.compiler.base.Expression: boolean alwaysEmpty()>();

        if $z2 != 0 goto label3;

        $r9 = r4.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$700(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r9, "} else {");

        virtualinvoke $r7.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r4);

     label3:
        $r8 = r4.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$800(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r8, "}");

        goto label5;

     label4:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("No clauses in Conditional!");

        throw $r3;

     label5:
        return null;
    }

    private void appendIf(java.lang.String, com.google.gxp.compiler.base.Conditional$Clause)
    {
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker $r3, $r8;
        com.google.gxp.compiler.base.Conditional$Clause r0;
        com.google.gxp.compiler.alerts.SourcePosition $r4;
        com.google.gxp.compiler.base.Expression $r1, $r13;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r2;
        java.lang.StringBuilder $r5, $r7, $r10, $r11;
        java.lang.String r6, $r9, $r12;

        r2 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: com.google.gxp.compiler.base.Conditional$Clause;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.Conditional$Clause: com.google.gxp.compiler.base.Expression getPredicate()>();

        $r3 = r2.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r4 = virtualinvoke $r1.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = r2.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r9 = virtualinvoke $r8.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String getJavaExpression(com.google.gxp.compiler.base.Expression)>($r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") {");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$900(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r3, $r4, $r12);

        $r13 = virtualinvoke r0.<com.google.gxp.compiler.base.Conditional$Clause: com.google.gxp.compiler.base.Expression getExpression()>();

        virtualinvoke $r13.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r2);

        return;
    }

    private void writeConditionalDelim(com.google.gxp.compiler.base.Expression, java.lang.String)
    {
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker $r4, $r5, $r7, $r8;
        com.google.gxp.compiler.base.Expression r0;
        java.lang.Object[] $r2, $r6;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r1;
        java.lang.String r3;
        boolean $z0;

        r1 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.Expression;

        r3 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.google.gxp.compiler.base.Expression: boolean alwaysEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = r1.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$1000(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.String,java.lang.Object[])>($r4, "if (%s) {", $r2);

        virtualinvoke r0.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r1);

        $r5 = r1.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$1100(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r5, "} else {");

        $r7 = r1.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r3;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$1200(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.String,java.lang.Object[])>($r7, "%s = true;", $r6);

        $r8 = r1.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$1300(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r8, "}");

     label1:
        return;
    }

    public java.lang.Void visitLoopExpression(com.google.gxp.compiler.base.LoopExpression)
    {
        com.google.gxp.compiler.base.Type $r33, $r56, $r69, $r73, $r77;
        java.lang.StringBuilder $r64, $r65, $r66;
        com.google.gxp.compiler.base.Expression $r3, $r7, $r8, $r9, $r10, $r15, $r19, $r21, $r25, $r27, $r41, $r43, $r47, $r51, $r84;
        java.lang.Object[] $r31, $r45, $r54, $r63, $r75, $r86, $r94, $r96;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.String $r5, $r6, $r34, $r38, $r39, $r42, $r50, $r57, $r58, $r60, $r67, $r70, $r71, $r78, $r82, $r83, $r89, $r93, r98, r99;
        com.google.gxp.compiler.base.OutputLanguage $r14, $r20, $r26, $r28, $r36, $r48, $r80, $r91;
        com.google.gxp.compiler.codegen.MissingExpressionError $r18, $r24;
        com.google.gxp.compiler.codegen.LoopMissingBothIterableAndIteratorError $r13;
        boolean $z0, $z1, $z2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker $r1, $r4, $r11, $r16, $r22, $r29, $r32, $r35, $r40, $r44, $r46, $r49, $r52, $r55, $r59, $r61, $r68, $r72, $r76, $r79, $r85, $r87, $r88, $r90, $r95, $r97, $r100;
        com.google.gxp.compiler.base.LoopExpression r2;
        com.google.gxp.compiler.alerts.AlertSink $r12, $r17, $r23, $r37, $r81, $r92;
        com.google.gxp.compiler.alerts.SourcePosition $r30, $r53, $r62, $r74;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r2 := @parameter0: com.google.gxp.compiler.base.LoopExpression;

        $r1 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$1400(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r1, "{");

        $r3 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getDelimiter()>();

        $r4 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r5 = virtualinvoke $r4.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String createVarName(java.lang.String)>("bool");

        $z0 = virtualinvoke $r3.<com.google.gxp.compiler.base.Expression: boolean alwaysEmpty()>();

        if $z0 != 0 goto label1;

        $r97 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r96 = newarray (java.lang.Object)[1];

        $r96[0] = $r5;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$1500(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.String,java.lang.Object[])>($r97, "boolean %s = false;", $r96);

     label1:
        r98 = null;

        r99 = null;

        $r6 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: java.lang.String getKey()>();

        if $r6 == null goto label2;

        $r88 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r89 = virtualinvoke $r88.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String createVarName(java.lang.String)>("key");

        r98 = $r89;

        $r91 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $r90 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r92 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$1600(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)>($r90);

        $r93 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: java.lang.String getKey()>();

        r99 = virtualinvoke $r91.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String validateName(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Node,java.lang.String)>($r92, r2, $r93);

        $r95 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r94 = newarray (java.lang.Object)[1];

        $r94[0] = $r89;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$1700(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.String,java.lang.Object[])>($r95, "int %s = 0;", $r94);

     label2:
        $r7 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterator()>();

        if $r7 == null goto label4;

        $r47 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterator()>();

        $r48 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $z2 = virtualinvoke $r47.<com.google.gxp.compiler.base.Expression: boolean canEvaluateAs(com.google.gxp.compiler.base.OutputLanguage)>($r48);

        if $z2 == 0 goto label4;

        $r49 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r50 = virtualinvoke $r49.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String createVarName(java.lang.String)>("iter");

        $r51 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterator()>();

        $r52 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r53 = virtualinvoke $r51.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r54 = newarray (java.lang.Object)[3];

        $r55 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r56 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Type getType()>();

        $r57 = virtualinvoke $r55.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String toJavaType(com.google.gxp.compiler.base.Type)>($r56);

        $r58 = staticinvoke <com.google.gxp.compiler.java.JavaUtil: java.lang.String toReferenceType(java.lang.String)>($r57);

        $r54[0] = $r58;

        $r54[1] = $r50;

        $r59 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r60 = virtualinvoke $r59.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String getJavaExpression(com.google.gxp.compiler.base.Expression)>($r51);

        $r54[2] = $r60;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$1800(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r52, $r53, "final java.util.Iterator<? extends %s> %s = %s;", $r54);

        $r61 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r62 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r63 = newarray (java.lang.Object)[1];

        $r63[0] = $r50;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$1900(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r61, $r62, "while (%s.hasNext()) {", $r63);

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".next()");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        $r68 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r69 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Type getType()>();

        $r70 = virtualinvoke $r68.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String toJavaType(com.google.gxp.compiler.base.Type)>($r69);

        $r71 = staticinvoke <com.google.gxp.compiler.java.JavaUtil: java.lang.String unbox(java.lang.String,java.lang.String)>($r67, $r70);

        $r72 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r73 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Type getType()>();

        $r74 = virtualinvoke $r73.<com.google.gxp.compiler.base.Type: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r75 = newarray (java.lang.Object)[3];

        $r76 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r77 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Type getType()>();

        $r78 = virtualinvoke $r76.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String toJavaType(com.google.gxp.compiler.base.Type)>($r77);

        $r75[0] = $r78;

        $r80 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $r79 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r81 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$2000(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)>($r79);

        $r82 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: java.lang.String getVar()>();

        $r83 = virtualinvoke $r80.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String validateName(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Node,java.lang.String)>($r81, r2, $r82);

        $r75[1] = $r83;

        $r75[2] = $r71;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$2100(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r72, $r74, "final %s %s = %s;", $r75);

        specialinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: void writeConditionalDelim(com.google.gxp.compiler.base.Expression,java.lang.String)>($r3, $r5);

        if r99 == null goto label3;

        $r87 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r86 = newarray (java.lang.Object)[2];

        $r86[0] = r99;

        $r86[1] = r98;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$2200(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.String,java.lang.Object[])>($r87, "final int %s = %s++;", $r86);

     label3:
        $r84 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getSubexpression()>();

        virtualinvoke $r84.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r0);

        $r85 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$2300(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r85, "}");

        goto label9;

     label4:
        $r8 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterable()>();

        if $r8 == null goto label6;

        $r27 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterable()>();

        $r28 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $z1 = virtualinvoke $r27.<com.google.gxp.compiler.base.Expression: boolean canEvaluateAs(com.google.gxp.compiler.base.OutputLanguage)>($r28);

        if $z1 == 0 goto label6;

        $r29 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r30 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r31 = newarray (java.lang.Object)[3];

        $r32 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r33 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Type getType()>();

        $r34 = virtualinvoke $r32.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String toJavaType(com.google.gxp.compiler.base.Type)>($r33);

        $r31[0] = $r34;

        $r36 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $r35 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r37 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$2400(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)>($r35);

        $r38 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: java.lang.String getVar()>();

        $r39 = virtualinvoke $r36.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String validateName(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Node,java.lang.String)>($r37, r2, $r38);

        $r31[1] = $r39;

        $r40 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r41 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterable()>();

        $r42 = virtualinvoke $r40.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String getJavaExpression(com.google.gxp.compiler.base.Expression)>($r41);

        $r31[2] = $r42;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$2500(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r29, $r30, "for (final %s %s : %s) {", $r31);

        specialinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: void writeConditionalDelim(com.google.gxp.compiler.base.Expression,java.lang.String)>($r3, $r5);

        if r99 == null goto label5;

        $r46 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r45 = newarray (java.lang.Object)[2];

        $r45[0] = r99;

        $r45[1] = r98;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$2600(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.String,java.lang.Object[])>($r46, "final int %s = %s++;", $r45);

     label5:
        $r43 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getSubexpression()>();

        virtualinvoke $r43.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r0);

        $r44 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$2700(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r44, "}");

        goto label9;

     label6:
        $r9 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterable()>();

        if $r9 != null goto label7;

        $r21 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterator()>();

        if $r21 == null goto label7;

        $r22 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r23 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$2800(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)>($r22);

        $r24 = new com.google.gxp.compiler.codegen.MissingExpressionError;

        $r25 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterator()>();

        $r26 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        specialinvoke $r24.<com.google.gxp.compiler.codegen.MissingExpressionError: void <init>(com.google.gxp.compiler.base.Expression,com.google.gxp.compiler.base.OutputLanguage)>($r25, $r26);

        interfaceinvoke $r23.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r24);

        goto label9;

     label7:
        $r10 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterator()>();

        if $r10 != null goto label8;

        $r15 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterable()>();

        if $r15 == null goto label8;

        $r16 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r17 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$2900(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)>($r16);

        $r18 = new com.google.gxp.compiler.codegen.MissingExpressionError;

        $r19 = virtualinvoke r2.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterable()>();

        $r20 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        specialinvoke $r18.<com.google.gxp.compiler.codegen.MissingExpressionError: void <init>(com.google.gxp.compiler.base.Expression,com.google.gxp.compiler.base.OutputLanguage)>($r19, $r20);

        interfaceinvoke $r17.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r18);

        goto label9;

     label8:
        $r11 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r12 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$3000(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)>($r11);

        $r13 = new com.google.gxp.compiler.codegen.LoopMissingBothIterableAndIteratorError;

        $r14 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        specialinvoke $r13.<com.google.gxp.compiler.codegen.LoopMissingBothIterableAndIteratorError: void <init>(com.google.gxp.compiler.base.LoopExpression,com.google.gxp.compiler.base.OutputLanguage)>(r2, $r14);

        interfaceinvoke $r12.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r13);

     label9:
        $r100 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$3100(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r100, "}");

        return null;
    }

    public java.lang.Void visitAbbrExpression(com.google.gxp.compiler.base.AbbrExpression)
    {
        com.google.gxp.compiler.base.Expression $r15, $r17;
        java.lang.Object[] $r5;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.alerts.AlertSink $r11;
        java.lang.String $r8, $r12, $r13, $r16;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker $r1, $r3, $r6, $r9, $r14, $r18;
        com.google.gxp.compiler.alerts.SourcePosition $r4;
        com.google.gxp.compiler.base.AbbrExpression r2;
        com.google.gxp.compiler.base.Type $r7;
        com.google.gxp.compiler.base.OutputLanguage $r10;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r2 := @parameter0: com.google.gxp.compiler.base.AbbrExpression;

        $r1 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$3200(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r1, "{");

        $r3 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r4 = virtualinvoke r2.<com.google.gxp.compiler.base.AbbrExpression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r5 = newarray (java.lang.Object)[3];

        $r6 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r7 = virtualinvoke r2.<com.google.gxp.compiler.base.AbbrExpression: com.google.gxp.compiler.base.Type getType()>();

        $r8 = virtualinvoke $r6.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String toJavaType(com.google.gxp.compiler.base.Type)>($r7);

        $r5[0] = $r8;

        $r10 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $r9 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r11 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$3300(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)>($r9);

        $r12 = virtualinvoke r2.<com.google.gxp.compiler.base.AbbrExpression: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String validateName(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Node,java.lang.String)>($r11, r2, $r12);

        $r5[1] = $r13;

        $r14 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r15 = virtualinvoke r2.<com.google.gxp.compiler.base.AbbrExpression: com.google.gxp.compiler.base.Expression getValue()>();

        $r16 = virtualinvoke $r14.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String getJavaExpression(com.google.gxp.compiler.base.Expression)>($r15);

        $r5[2] = $r16;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$3400(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r3, $r4, "final %s %s = %s;", $r5);

        $r17 = virtualinvoke r2.<com.google.gxp.compiler.base.AbbrExpression: com.google.gxp.compiler.base.Expression getContent()>();

        virtualinvoke $r17.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r0);

        $r18 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$3500(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r18, "}");

        return null;
    }

    public java.lang.Void visitCall(com.google.gxp.compiler.base.Call)
    {
        java.lang.Void $r3;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r1;
        java.lang.Object $r2;
        com.google.gxp.compiler.base.Call r0;

        r1 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.Call;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.Call: java.lang.Object acceptCallVisitor(com.google.gxp.compiler.base.CallVisitor)>(r1);

        $r3 = (java.lang.Void) $r2;

        return $r3;
    }

    public java.lang.Void visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)
    {
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.base.UnboundCall r1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r2;

        r2 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.UnboundCall;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.Void visitBoundCall(com.google.gxp.compiler.base.BoundCall)
    {
        com.google.gxp.compiler.base.BoundCall r1;
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r2;

        r2 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BoundCall;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.Void visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)
    {
        java.util.Deque $r16;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r5;
        java.util.Map $r2;
        java.lang.Boolean $r7;
        java.lang.String $r9, r19;
        com.google.gxp.compiler.base.Callable $r1;
        boolean $z0, $z1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker $r8, $r10, $r13, $r15, $r17;
        com.google.gxp.compiler.alerts.SourcePosition $r14;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor$1 $r4;
        java.util.Iterator $r12;
        java.util.List $r11;
        com.google.gxp.compiler.base.ValidatedCall r0;
        java.lang.StringBuilder $r3;
        java.lang.Object $r6, $r18;

        r5 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.ValidatedCall;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.ValidatedCall: com.google.gxp.compiler.base.Callable getCallee()>();

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.ValidatedCall: java.util.Map getAttributes()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = new com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor$1;

        specialinvoke $r4.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor$1: void <init>(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor,java.util.Map,com.google.gxp.compiler.base.ValidatedCall)>(r5, $r2, r0);

        $r6 = interfaceinvoke $r1.<com.google.gxp.compiler.base.Callable: java.lang.Object acceptCallableVisitor(com.google.gxp.compiler.base.CallableVisitor)>($r4);

        $r7 = (java.lang.Boolean) $r6;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        $r8 = r5.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r9 = virtualinvoke $r8.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String getCalleeName(com.google.gxp.compiler.base.Callable)>($r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".write(");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gxp$out");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gxp_context");

        $r10 = r5.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r11 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.util.List access$3900(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,com.google.gxp.compiler.base.Callable,java.util.Map)>($r10, $r1, $r2);

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r18 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.String) $r18;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        goto label1;

     label2:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        $r13 = r5.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r14 = virtualinvoke r0.<com.google.gxp.compiler.base.ValidatedCall: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$4000(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r13, $r14, $r3);

        if $z0 == 0 goto label3;

        $r15 = r5.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r16 = $r15.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.util.Deque instantiatedGxps>;

        interfaceinvoke $r16.<java.util.Deque: java.lang.Object pop()>();

        $r17 = r5.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$4100(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r17, "}");

     label3:
        return null;
    }

    public java.lang.Void visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)
    {
        com.google.transconsole.common.messages.Message $r4;
        com.google.gxp.compiler.base.Expression r20;
        java.lang.Object[] $r5;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.alerts.AlertSink $r24;
        java.lang.String $r2, $r7, $r9, $r10, $r11, $r13, $r16, $r22;
        boolean $z0;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker $r1, $r6, $r17, $r21, $r23;
        com.google.gxp.com.google.common.base.CharEscaper $r8;
        com.google.gxp.compiler.alerts.SourcePosition $r18;
        java.util.Iterator $r15;
        com.google.gxp.compiler.java.NoMessageSourceError $r25;
        java.util.List $r14;
        com.google.gxp.compiler.base.ExtractedMessage r3;
        java.lang.StringBuilder $r12;
        java.lang.Object $r19;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r3 := @parameter0: com.google.gxp.compiler.base.ExtractedMessage;

        $r1 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r2 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String access$4200(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)>($r1);

        if $r2 != null goto label1;

        $r23 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r24 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$4300(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)>($r23);

        $r25 = new com.google.gxp.compiler.java.NoMessageSourceError;

        specialinvoke $r25.<com.google.gxp.compiler.java.NoMessageSourceError: void <init>(com.google.gxp.compiler.base.Node)>(r3);

        interfaceinvoke $r24.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r25);

     label1:
        $r4 = virtualinvoke r3.<com.google.gxp.compiler.base.ExtractedMessage: com.google.transconsole.common.messages.Message getTcMessage()>();

        $r6 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r5 = newarray (java.lang.Object)[2];

        $r7 = virtualinvoke $r4.<com.google.transconsole.common.messages.Message: java.lang.String getId()>();

        $r5[0] = $r7;

        $r8 = staticinvoke <com.google.gxp.com.google.common.base.CharEscapers: com.google.gxp.com.google.common.base.CharEscaper javaStringUnicodeEscaper()>();

        $r9 = virtualinvoke $r4.<com.google.transconsole.common.messages.Message: java.lang.String getOriginal()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", " ");

        $r11 = virtualinvoke $r8.<com.google.gxp.com.google.common.base.CharEscaper: java.lang.String escape(java.lang.String)>($r10);

        $r5[1] = $r11;

        staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void access$4400(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,java.lang.String,java.lang.Object[])>($r6, "// MSG %s=%s", $r5);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("GxpTemplate.getMessage(GXP$MESSAGE_SOURCE, ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gxp_context.getLocale(), ");

        $r13 = virtualinvoke $r4.<com.google.transconsole.common.messages.Message: java.lang.String getId()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("L");

        $r14 = virtualinvoke r3.<com.google.gxp.compiler.base.ExtractedMessage: java.util.List getParameters()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r19 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r20 = (com.google.gxp.compiler.base.Expression) $r19;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r21 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r22 = virtualinvoke $r21.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String getEscapedString(com.google.gxp.compiler.base.Expression)>(r20);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        goto label2;

     label3:
        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r18 = virtualinvoke r3.<com.google.gxp.compiler.base.ExtractedMessage: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        virtualinvoke $r17.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: void writeExpression(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String)>($r18, $r16);

        return null;
    }

    public volatile java.lang.Object visitStringConstant(com.google.gxp.compiler.base.StringConstant)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.StringConstant r1;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.StringConstant;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitStringConstant(com.google.gxp.compiler.base.StringConstant)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitLoopExpression(com.google.gxp.compiler.base.LoopExpression)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.LoopExpression r1;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.LoopExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitLoopExpression(com.google.gxp.compiler.base.LoopExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.ExtractedMessage r1;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExtractedMessage;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitExceptionExpression(com.google.gxp.compiler.base.ExceptionExpression)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.ExceptionExpression r1;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExceptionExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitExceptionExpression(com.google.gxp.compiler.base.ExceptionExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitExampleExpression(com.google.gxp.compiler.base.ExampleExpression)
    {
        com.google.gxp.compiler.base.ExampleExpression r1;
        java.lang.Void $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExampleExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitExampleExpression(com.google.gxp.compiler.base.ExampleExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.EscapeExpression r1;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.EscapeExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitConvertibleToContent(com.google.gxp.compiler.base.ConvertibleToContent)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.ConvertibleToContent r1;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ConvertibleToContent;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitConvertibleToContent(com.google.gxp.compiler.base.ConvertibleToContent)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitConditional(com.google.gxp.compiler.base.Conditional)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.Conditional r1;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Conditional;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitConditional(com.google.gxp.compiler.base.Conditional)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitConcatenation(com.google.gxp.compiler.base.Concatenation)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.Concatenation r1;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Concatenation;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitConcatenation(com.google.gxp.compiler.base.Concatenation)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitCall(com.google.gxp.compiler.base.Call)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.Call r1;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Call;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitCall(com.google.gxp.compiler.base.Call)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitAbbrExpression(com.google.gxp.compiler.base.AbbrExpression)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.AbbrExpression r1;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.AbbrExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitAbbrExpression(com.google.gxp.compiler.base.AbbrExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object defaultVisitExpression(com.google.gxp.compiler.base.Expression)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.base.Expression r1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void defaultVisitExpression(com.google.gxp.compiler.base.Expression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.base.ValidatedCall r1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ValidatedCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitBoundCall(com.google.gxp.compiler.base.BoundCall)
    {
        com.google.gxp.compiler.base.BoundCall r1;
        java.lang.Void $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BoundCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitBoundCall(com.google.gxp.compiler.base.BoundCall)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.UnboundCall r1;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.UnboundCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)>(r1);

        return $r2;
    }
}
