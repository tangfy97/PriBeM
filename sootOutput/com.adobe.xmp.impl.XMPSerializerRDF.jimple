public class com.adobe.xmp.impl.XMPSerializerRDF extends java.lang.Object
{
    private static final int DEFAULT_PAD;
    private static final java.lang.String PACKET_HEADER;
    private static final java.lang.String PACKET_TRAILER;
    private static final java.lang.String PACKET_TRAILER2;
    private static final java.lang.String RDF_XMPMETA_START;
    private static final java.lang.String RDF_XMPMETA_END;
    private static final java.lang.String RDF_RDF_START;
    private static final java.lang.String RDF_RDF_END;
    private static final java.lang.String RDF_SCHEMA_START;
    private static final java.lang.String RDF_SCHEMA_END;
    private static final java.lang.String RDF_STRUCT_START;
    private static final java.lang.String RDF_STRUCT_END;
    private static final java.lang.String RDF_EMPTY_STRUCT;
    static final java.util.Set RDF_ATTR_QUALIFIER;
    private com.adobe.xmp.impl.XMPMetaImpl xmp;
    private com.adobe.xmp.impl.CountOutputStream outputStream;
    private java.io.OutputStreamWriter writer;
    private com.adobe.xmp.options.SerializeOptions options;
    private int unicodeSize;
    private int padding;

    public void <init>()
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int unicodeSize> = 1;

        return;
    }

    public void serialize(com.adobe.xmp.XMPMeta, java.io.OutputStream, com.adobe.xmp.options.SerializeOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.CountOutputStream $r1, $r5, $r10, $r15;
        com.adobe.xmp.XMPException $r17;
        com.adobe.xmp.impl.XMPMetaImpl $r8;
        int $i0, $i1;
        java.io.OutputStreamWriter $r3, $r9, $r13, $r14;
        java.lang.String $r6, $r11, $r12;
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        java.io.OutputStream r2;
        com.adobe.xmp.options.SerializeOptions r4;
        com.adobe.xmp.XMPMeta r7;
        java.io.IOException $r16;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r7 := @parameter0: com.adobe.xmp.XMPMeta;

        r2 := @parameter1: java.io.OutputStream;

        r4 := @parameter2: com.adobe.xmp.options.SerializeOptions;

     label1:
        $r1 = new com.adobe.xmp.impl.CountOutputStream;

        specialinvoke $r1.<com.adobe.xmp.impl.CountOutputStream: void <init>(java.io.OutputStream)>(r2);

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.CountOutputStream outputStream> = $r1;

        $r3 = new java.io.OutputStreamWriter;

        $r5 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.CountOutputStream outputStream>;

        $r6 = virtualinvoke r4.<com.adobe.xmp.options.SerializeOptions: java.lang.String getEncoding()>();

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r5, $r6);

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer> = $r3;

        $r8 = (com.adobe.xmp.impl.XMPMetaImpl) r7;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp> = $r8;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options> = r4;

        $i0 = virtualinvoke r4.<com.adobe.xmp.options.SerializeOptions: int getPadding()>();

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = $i0;

        $r9 = new java.io.OutputStreamWriter;

        $r10 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.CountOutputStream outputStream>;

        $r11 = virtualinvoke r4.<com.adobe.xmp.options.SerializeOptions: java.lang.String getEncoding()>();

        specialinvoke $r9.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r10, $r11);

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer> = $r9;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void checkOptionsConsistence()>();

        $r12 = specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String serializeAsRDF()>();

        $r13 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer>;

        virtualinvoke $r13.<java.io.OutputStreamWriter: void flush()>();

        $i1 = virtualinvoke $r12.<java.lang.String: int length()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void addPadding(int)>($i1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r12);

        $r14 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer>;

        virtualinvoke $r14.<java.io.OutputStreamWriter: void flush()>();

        $r15 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.CountOutputStream outputStream>;

        virtualinvoke $r15.<com.adobe.xmp.impl.CountOutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        $r17 = new com.adobe.xmp.XMPException;

        specialinvoke $r17.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Error writing to the OutputStream", 0);

        throw $r17;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void addPadding(int) throws com.adobe.xmp.XMPException, java.io.IOException
    {
        com.adobe.xmp.impl.CountOutputStream $r4;
        com.adobe.xmp.XMPException $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, $i20, i21;
        java.lang.String $r3;
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        boolean $z0;
        com.adobe.xmp.options.SerializeOptions $r1, $r2;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        i15 := @parameter0: int;

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.SerializeOptions: boolean getExactPacketLength()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.CountOutputStream outputStream>;

        $i14 = virtualinvoke $r4.<com.adobe.xmp.impl.CountOutputStream: int getBytesWritten()>();

        $i16 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int unicodeSize>;

        $i17 = i15 * $i16;

        i21 = $i14 + $i17;

        $i18 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        if i21 <= $i18 goto label1;

        $r5 = new com.adobe.xmp.XMPException;

        specialinvoke $r5.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Can\'t fit into specified packet size", 107);

        throw $r5;

     label1:
        $i19 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        $i20 = $i19 - i21;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = $i20;

     label2:
        $i1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        $i0 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int unicodeSize>;

        $i2 = $i1 / $i0;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = $i2;

        $r2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $r3 = virtualinvoke $r2.<com.adobe.xmp.options.SerializeOptions: java.lang.String getNewline()>();

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i4 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        if $i4 < $i3 goto label5;

        $i6 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        $i7 = $i6 - $i3;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = $i7;

     label3:
        $i9 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        $i8 = 100 + $i3;

        if $i9 < $i8 goto label4;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeChars(int,char)>(100, 32);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i12 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        $i11 = 100 + $i3;

        $i13 = $i12 - $i11;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = $i13;

        goto label3;

     label4:
        $i10 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeChars(int,char)>($i10, 32);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        goto label6;

     label5:
        $i5 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeChars(int,char)>($i5, 32);

     label6:
        return;
    }

    protected void checkOptionsConsistence() throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        com.adobe.xmp.XMPException $r9, $r12, $r16, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        com.adobe.xmp.impl.XMPMetaImpl $r7;
        com.adobe.xmp.options.SerializeOptions $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r10, $r11, $r13, $r14, $r15;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.SerializeOptions: boolean getEncodeUTF16BE()>();

        $r2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z1 = virtualinvoke $r2.<com.adobe.xmp.options.SerializeOptions: boolean getEncodeUTF16LE()>();

        $z2 = $z0 | $z1;

        if $z2 == 0 goto label1;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int unicodeSize> = 2;

     label1:
        $r3 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z3 = virtualinvoke $r3.<com.adobe.xmp.options.SerializeOptions: boolean getExactPacketLength()>();

        if $z3 == 0 goto label3;

        $r13 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z12 = virtualinvoke $r13.<com.adobe.xmp.options.SerializeOptions: boolean getOmitPacketWrapper()>();

        $r14 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z13 = virtualinvoke $r14.<com.adobe.xmp.options.SerializeOptions: boolean getIncludeThumbnailPad()>();

        $z14 = $z12 | $z13;

        if $z14 == 0 goto label2;

        $r17 = new com.adobe.xmp.XMPException;

        specialinvoke $r17.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Inconsistent options for exact size serialize", 103);

        throw $r17;

     label2:
        $r15 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $i7 = virtualinvoke $r15.<com.adobe.xmp.options.SerializeOptions: int getPadding()>();

        $i8 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int unicodeSize>;

        $i9 = $i8 - 1;

        $i10 = $i7 & $i9;

        if $i10 == 0 goto label9;

        $r16 = new com.adobe.xmp.XMPException;

        specialinvoke $r16.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Exact size must be a multiple of the Unicode element", 103);

        throw $r16;

     label3:
        $r4 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z4 = virtualinvoke $r4.<com.adobe.xmp.options.SerializeOptions: boolean getReadOnlyPacket()>();

        if $z4 == 0 goto label5;

        $r10 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z9 = virtualinvoke $r10.<com.adobe.xmp.options.SerializeOptions: boolean getOmitPacketWrapper()>();

        $r11 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z10 = virtualinvoke $r11.<com.adobe.xmp.options.SerializeOptions: boolean getIncludeThumbnailPad()>();

        $z11 = $z9 | $z10;

        if $z11 == 0 goto label4;

        $r12 = new com.adobe.xmp.XMPException;

        specialinvoke $r12.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Inconsistent options for read-only packet", 103);

        throw $r12;

     label4:
        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = 0;

        goto label9;

     label5:
        $r5 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z5 = virtualinvoke $r5.<com.adobe.xmp.options.SerializeOptions: boolean getOmitPacketWrapper()>();

        if $z5 == 0 goto label7;

        $r8 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z8 = virtualinvoke $r8.<com.adobe.xmp.options.SerializeOptions: boolean getIncludeThumbnailPad()>();

        if $z8 == 0 goto label6;

        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Inconsistent options for non-packet serialize", 103);

        throw $r9;

     label6:
        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = 0;

        goto label9;

     label7:
        $i0 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        if $i0 != 0 goto label8;

        $i5 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int unicodeSize>;

        $i6 = 2048 * $i5;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = $i6;

     label8:
        $r6 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z6 = virtualinvoke $r6.<com.adobe.xmp.options.SerializeOptions: boolean getIncludeThumbnailPad()>();

        if $z6 == 0 goto label9;

        $r7 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $z7 = virtualinvoke $r7.<com.adobe.xmp.impl.XMPMetaImpl: boolean doesPropertyExist(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/", "Thumbnails");

        if $z7 != 0 goto label9;

        $i3 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        $i1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int unicodeSize>;

        $i2 = 10000 * $i1;

        $i4 = $i3 + $i2;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = $i4;

     label9:
        return;
    }

    private java.lang.String serializeAsRDF() throws java.io.IOException, com.adobe.xmp.XMPException
    {
        byte b3, b4, b5, b6;
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, z8;
        com.adobe.xmp.XMPVersionInfo $r24;
        java.lang.StringBuilder $r7, $r8, $r11, $r13, $r16, $r17, $r19, $r22, $r28, $r29, $r30, $r31;
        int i0, i1, $i8, $i10;
        java.lang.String $r9, $r14, $r21, $r25, r27;
        com.adobe.xmp.options.SerializeOptions $r1, $r2, $r3, $r4, $r5, $r12, $r20, $r23, $r26;
        char $c2;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        z6 = 0;

        b6 = 0;

        b5 = 0;

        b4 = 0;

        z8 = 0;

        b3 = 0;

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.SerializeOptions: boolean getOmitPacketWrapper()>();

        if $z0 != 0 goto label01;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(0);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<?xpacket begin=\"\ufeff\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

     label01:
        $r2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z1 = virtualinvoke $r2.<com.adobe.xmp.options.SerializeOptions: boolean getOmitXmpMetaElement()>();

        if $z1 != 0 goto label03;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(0);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"");

        $r23 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z5 = virtualinvoke $r23.<com.adobe.xmp.options.SerializeOptions: boolean getOmitVersionAttribute()>();

        if $z5 != 0 goto label02;

        $r24 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPVersionInfo getVersionInfo()>();

        $r25 = interfaceinvoke $r24.<com.adobe.xmp.XMPVersionInfo: java.lang.String getMessage()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r25);

     label02:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("\">");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        z6 = 1;

        b6 = 1;

        b5 = 1;

        b4 = 1;

        z8 = 1;

        b3 = 1;

     label03:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(b3);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $r26 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z7 = virtualinvoke $r26.<com.adobe.xmp.options.SerializeOptions: boolean getUseCanonicalFormat()>();

        if $z7 == 0 goto label04;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCanonicalRDFSchemas(int)>(b6);

        goto label05;

     label04:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCompactRDFSchemas(int)>(b4);

     label05:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(b5);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</rdf:RDF>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $r3 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z2 = virtualinvoke $r3.<com.adobe.xmp.options.SerializeOptions: boolean getOmitXmpMetaElement()>();

        if $z2 != 0 goto label06;

        $i8 = (int) -1;

        i0 = z8 + $i8;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i0);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</x:xmpmeta>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

     label06:
        r27 = "";

        $r4 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z3 = virtualinvoke $r4.<com.adobe.xmp.options.SerializeOptions: boolean getOmitPacketWrapper()>();

        if $z3 != 0 goto label11;

        $r5 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        i1 = virtualinvoke $r5.<com.adobe.xmp.options.SerializeOptions: int getBaseIndent()>();

     label07:
        if i1 <= 0 goto label08;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r20 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $r21 = virtualinvoke $r20.<com.adobe.xmp.options.SerializeOptions: java.lang.String getIndent()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $i10 = (int) -1;

        i1 = i1 + $i10;

        goto label07;

     label08:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<?xpacket end=\"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r12 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z4 = virtualinvoke $r12.<com.adobe.xmp.options.SerializeOptions: boolean getReadOnlyPacket()>();

        if $z4 == 0 goto label09;

        $c2 = 114;

        goto label10;

     label09:
        $c2 = 119;

     label10:
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"?>");

        r27 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        return r27;
    }

    private void serializeCanonicalRDFSchemas(int) throws java.io.IOException, com.adobe.xmp.XMPException
    {
        java.util.Iterator $r7;
        com.adobe.xmp.impl.XMPNode $r2, $r4, $r6, r9;
        com.adobe.xmp.impl.XMPMetaImpl $r1, $r3, $r5;
        int $i0, i1, $i2;
        java.lang.Object $r8;
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        i1 := @parameter0: int;

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $r2 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $i0 = virtualinvoke $r2.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if $i0 <= 0 goto label3;

        $r3 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $r4 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void startOuterRDFDescription(com.adobe.xmp.impl.XMPNode,int)>($r4, i1);

        $r5 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $r6 = virtualinvoke $r5.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r7 = virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.adobe.xmp.impl.XMPNode) $r8;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCanonicalRDFSchema(com.adobe.xmp.impl.XMPNode,int)>(r9, i1);

        goto label1;

     label2:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void endOuterRDFDescription(int)>(i1);

        goto label4;

     label3:
        $i2 = i1 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>($i2);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<rdf:Description rdf:about=");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeTreeName()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("/>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

     label4:
        return;
    }

    private void writeTreeName() throws java.io.IOException
    {
        com.adobe.xmp.impl.XMPNode $r2;
        com.adobe.xmp.impl.XMPMetaImpl $r1;
        java.lang.String $r3;
        com.adobe.xmp.impl.XMPSerializerRDF r0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(34);

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $r2 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r3 = virtualinvoke $r2.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        if $r3 == null goto label1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r3, 1);

     label1:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(34);

        return;
    }

    private void serializeCompactRDFSchemas(int) throws java.io.IOException, com.adobe.xmp.XMPException
    {
        java.util.HashSet $r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        com.adobe.xmp.impl.XMPMetaImpl $r2, $r5, $r8;
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        boolean $z0, $z1, $z2, $z3, z4;
        java.util.Iterator $r4, $r7, $r10;
        com.adobe.xmp.impl.XMPNode $r3, $r6, $r9, r14, r15, r16;
        java.lang.Object $r11, $r12, $r13;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>($i1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<rdf:Description rdf:about=");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeTreeName()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>("xml");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>("rdf");

        $r2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $r3 = virtualinvoke $r2.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r4 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.adobe.xmp.impl.XMPNode) $r13;

        $i5 = i0 + 3;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void declareUsedNamespaces(com.adobe.xmp.impl.XMPNode,java.util.Set,int)>(r14, $r1, $i5);

        goto label1;

     label2:
        z4 = 1;

        $r5 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $r6 = virtualinvoke $r5.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r7 = virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label3:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r12 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r15 = (com.adobe.xmp.impl.XMPNode) $r12;

        $i4 = i0 + 2;

        $z3 = specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: boolean serializeCompactRDFAttrProps(com.adobe.xmp.impl.XMPNode,int)>(r15, $i4);

        z4 = z4 & $z3;

        goto label3;

     label4:
        if z4 != 0 goto label5;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        goto label6;

     label5:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("/>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        return;

     label6:
        $r8 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $r9 = virtualinvoke $r8.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r10 = virtualinvoke $r9.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label7:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.adobe.xmp.impl.XMPNode) $r11;

        $i3 = i0 + 2;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCompactRDFElementProps(com.adobe.xmp.impl.XMPNode,int)>(r16, $i3);

        goto label7;

     label8:
        $i2 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>($i2);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</rdf:Description>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        return;
    }

    private boolean serializeCompactRDFAttrProps(com.adobe.xmp.impl.XMPNode, int) throws java.io.IOException
    {
        java.util.Iterator $r1;
        com.adobe.xmp.impl.XMPNode r0, r3;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r5, $r6;
        com.adobe.xmp.impl.XMPSerializerRDF r4;
        boolean $z0, $z1, z2;

        r4 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter1: int;

        z2 = 1;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.adobe.xmp.impl.XMPNode) $r2;

        $z1 = specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: boolean canBeRDFAttrProp(com.adobe.xmp.impl.XMPNode)>(r3);

        if $z1 == 0 goto label2;

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i0);

        $r5 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r5);

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("=\"");

        $r6 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r6, 1);

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(34);

        goto label3;

     label2:
        z2 = 0;

     label3:
        goto label1;

     label4:
        return z2;
    }

    private void serializeCompactRDFElementProps(com.adobe.xmp.impl.XMPNode, int) throws java.io.IOException, com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7, z8, z9, $z10;
        com.adobe.xmp.options.PropertyOptions $r8, $r9;
        java.util.Set $r17;
        java.lang.Object[] $r10;
        int i0;
        java.lang.Boolean $r12, $r14;
        java.lang.String $r5, $r6, $r18, $r19, $r20, $r21, $r22, r23;
        java.util.Iterator $r1, $r7;
        com.adobe.xmp.impl.XMPNode r0, r3, r16;
        java.lang.Object $r2, $r11, $r13, $r15;

        r4 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label01:
        $z5 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label14;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.adobe.xmp.impl.XMPNode) $r2;

        $z0 = specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: boolean canBeRDFAttrProp(com.adobe.xmp.impl.XMPNode)>(r3);

        if $z0 == 0 goto label02;

        goto label01;

     label02:
        z6 = 1;

        z7 = 1;

        $r5 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        r23 = $r5;

        $r6 = "[]";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label03;

        r23 = "rdf:li";

     label03:
        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i0);

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(60);

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(r23);

        z8 = 0;

        z9 = 0;

        $r7 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

     label04:
        $z10 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label07;

        $r15 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.adobe.xmp.impl.XMPNode) $r15;

        $r17 = <com.adobe.xmp.impl.XMPSerializerRDF: java.util.Set RDF_ATTR_QUALIFIER>;

        $r18 = virtualinvoke r16.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z4 = interfaceinvoke $r17.<java.util.Set: boolean contains(java.lang.Object)>($r18);

        if $z4 != 0 goto label05;

        z8 = 1;

        goto label06;

     label05:
        $r19 = "rdf:resource";

        $r20 = virtualinvoke r16.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        z9 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(32);

        $r21 = virtualinvoke r16.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r21);

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("=\"");

        $r22 = virtualinvoke r16.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r22, 1);

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(34);

     label06:
        goto label04;

     label07:
        if z8 == 0 goto label08;

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCompactRDFGeneralQualifier(int,com.adobe.xmp.impl.XMPNode)>(i0, r3);

        goto label11;

     label08:
        $r8 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z2 != 0 goto label09;

        $r10 = specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: java.lang.Object[] serializeCompactRDFSimpleProp(com.adobe.xmp.impl.XMPNode)>(r3);

        $r11 = $r10[0];

        $r12 = (java.lang.Boolean) $r11;

        z6 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        $r13 = $r10[1];

        $r14 = (java.lang.Boolean) $r13;

        z7 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

        goto label11;

     label09:
        $r9 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z3 = virtualinvoke $r9.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z3 == 0 goto label10;

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCompactRDFArrayProp(com.adobe.xmp.impl.XMPNode,int)>(r3, i0);

        goto label11;

     label10:
        z6 = specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: boolean serializeCompactRDFStructProp(com.adobe.xmp.impl.XMPNode,int,boolean)>(r3, i0, z9);

     label11:
        if z6 == 0 goto label13;

        if z7 == 0 goto label12;

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i0);

     label12:
        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</");

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(r23);

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

     label13:
        goto label01;

     label14:
        return;
    }

    private java.lang.Object[] serializeCompactRDFSimpleProp(com.adobe.xmp.impl.XMPNode) throws java.io.IOException
    {
        com.adobe.xmp.options.PropertyOptions $r1;
        java.lang.Object[] $r9;
        com.adobe.xmp.impl.XMPNode r0;
        int $i0;
        java.lang.Boolean r7, r8;
        java.lang.String $r2, $r4, $r5, $r6;
        com.adobe.xmp.impl.XMPSerializerRDF r3;
        boolean $z0;

        r3 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean isURI()>();

        if $z0 == 0 goto label1;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:resource=\"");

        $r6 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r6, 1);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("\"/>");

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label4;

     label1:
        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        if $r2 == null goto label2;

        $r4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("/>");

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label4;

     label3:
        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        $r5 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r5, 0);

        r8 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label4:
        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r7;

        $r9[1] = r8;

        return $r9;
    }

    private void serializeCompactRDFArrayProp(com.adobe.xmp.impl.XMPNode, int) throws java.io.IOException, com.adobe.xmp.XMPException
    {
        com.adobe.xmp.options.PropertyOptions $r2;
        com.adobe.xmp.impl.XMPNode r1;
        int i0, $i1, $i2, $i3;
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter1: int;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i1 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void emitRDFArrayTag(com.adobe.xmp.impl.XMPNode,boolean,int)>(r1, 1, $i1);

        $r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z0 == 0 goto label1;

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void normalizeLangArray(com.adobe.xmp.impl.XMPNode)>(r1);

     label1:
        $i2 = i0 + 2;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCompactRDFElementProps(com.adobe.xmp.impl.XMPNode,int)>(r1, $i2);

        $i3 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void emitRDFArrayTag(com.adobe.xmp.impl.XMPNode,boolean,int)>(r1, 0, $i3);

        return;
    }

    private boolean serializeCompactRDFStructProp(com.adobe.xmp.impl.XMPNode, int, boolean) throws com.adobe.xmp.XMPException, java.io.IOException
    {
        com.adobe.xmp.XMPException $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        com.adobe.xmp.impl.XMPSerializerRDF r2;
        boolean $z0, z1, $z2, $z3, z4, z5, z6, z7, z8, z9, z10, z11;
        java.util.Iterator $r1;
        com.adobe.xmp.impl.XMPNode r0, r5;
        java.lang.Object $r4;

        r2 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter1: int;

        z1 := @parameter2: boolean;

        z4 = 0;

        z11 = 0;

        z10 = 0;

        z5 = 0;

        z9 = 0;

        z8 = 0;

        z7 = 0;

        z6 = 1;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label01:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.adobe.xmp.impl.XMPNode) $r4;

        $z3 = specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: boolean canBeRDFAttrProp(com.adobe.xmp.impl.XMPNode)>(r5);

        if $z3 == 0 goto label02;

        z4 = 1;

        z11 = 1;

        z10 = 1;

        goto label03;

     label02:
        z5 = 1;

        z9 = 1;

        z8 = 1;

        z7 = 1;

     label03:
        if z10 == 0 goto label04;

        if z9 == 0 goto label04;

        goto label05;

     label04:
        goto label01;

     label05:
        if z1 == 0 goto label06;

        if z8 == 0 goto label06;

        $r3 = new com.adobe.xmp.XMPException;

        specialinvoke $r3.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Can\'t mix rdf:resource qualifier and element fields", 202);

        throw $r3;

     label06:
        $z2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z2 != 0 goto label07;

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:parseType=\"Resource\"/>");

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        z6 = 0;

        goto label10;

     label07:
        if z7 != 0 goto label08;

        $i6 = i0 + 1;

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: boolean serializeCompactRDFAttrProps(com.adobe.xmp.impl.XMPNode,int)>(r0, $i6);

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("/>");

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        z6 = 0;

        goto label10;

     label08:
        if z11 != 0 goto label09;

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:parseType=\"Resource\">");

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i5 = i0 + 1;

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCompactRDFElementProps(com.adobe.xmp.impl.XMPNode,int)>(r0, $i5);

        goto label10;

     label09:
        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i1 = i0 + 1;

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>($i1);

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<rdf:Description");

        $i2 = i0 + 2;

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: boolean serializeCompactRDFAttrProps(com.adobe.xmp.impl.XMPNode,int)>(r0, $i2);

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(">");

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i3 = i0 + 1;

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCompactRDFElementProps(com.adobe.xmp.impl.XMPNode,int)>(r0, $i3);

        $i4 = i0 + 1;

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>($i4);

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</rdf:Description>");

        specialinvoke r2.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

     label10:
        return z6;
    }

    private void serializeCompactRDFGeneralQualifier(int, com.adobe.xmp.impl.XMPNode) throws java.io.IOException, com.adobe.xmp.XMPException
    {
        java.util.Iterator $r2;
        com.adobe.xmp.impl.XMPNode r1, r4;
        int i0, $i1, $i2;
        java.lang.Object $r3;
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        i0 := @parameter0: int;

        r1 := @parameter1: com.adobe.xmp.impl.XMPNode;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:parseType=\"Resource\">");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i1 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCanonicalRDFProperty(com.adobe.xmp.impl.XMPNode,boolean,boolean,int)>(r1, 0, 1, $i1);

        $r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.adobe.xmp.impl.XMPNode) $r3;

        $i2 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCanonicalRDFProperty(com.adobe.xmp.impl.XMPNode,boolean,boolean,int)>(r4, 0, 0, $i2);

        goto label1;

     label2:
        return;
    }

    private void serializeCanonicalRDFSchema(com.adobe.xmp.impl.XMPNode, int) throws java.io.IOException, com.adobe.xmp.XMPException
    {
        java.util.Iterator $r1;
        com.adobe.xmp.options.SerializeOptions $r5;
        com.adobe.xmp.impl.XMPNode r0, r3;
        int i0, $i1;
        java.lang.Object $r2;
        com.adobe.xmp.impl.XMPSerializerRDF r4;
        boolean $z0, $z1;

        r4 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.adobe.xmp.impl.XMPNode) $r2;

        $r5 = r4.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z1 = virtualinvoke $r5.<com.adobe.xmp.options.SerializeOptions: boolean getUseCanonicalFormat()>();

        $i1 = i0 + 2;

        specialinvoke r4.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCanonicalRDFProperty(com.adobe.xmp.impl.XMPNode,boolean,boolean,int)>(r3, $z1, 0, $i1);

        goto label1;

     label2:
        return;
    }

    private void declareUsedNamespaces(com.adobe.xmp.impl.XMPNode, java.util.Set, int) throws java.io.IOException
    {
        int i0, $i1, $i2;
        java.lang.String $r6, $r11, $r12, $r13, $r14, $r15;
        com.adobe.xmp.impl.XMPSerializerRDF r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.adobe.xmp.options.PropertyOptions $r1, $r2;
        java.util.Iterator $r3, $r9, $r17;
        java.util.Set r7;
        com.adobe.xmp.impl.XMPNode r0, r16, r18, r19;
        java.lang.Object $r4, $r8, $r10;

        r5 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r7 := @parameter1: java.util.Set;

        i0 := @parameter2: int;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z0 == 0 goto label1;

        $r12 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r13 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $i1 = virtualinvoke $r13.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r14 = virtualinvoke $r12.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r15 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r5.<com.adobe.xmp.impl.XMPSerializerRDF: void declareNamespace(java.lang.String,java.lang.String,java.util.Set,int)>($r14, $r15, r7, i0);

        goto label3;

     label1:
        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: boolean isStruct()>();

        if $z1 == 0 goto label3;

        $r9 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label2:
        $z3 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.adobe.xmp.impl.XMPNode) $r10;

        $r11 = virtualinvoke r16.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r5.<com.adobe.xmp.impl.XMPSerializerRDF: void declareNamespace(java.lang.String,java.lang.String,java.util.Set,int)>($r11, null, r7, i0);

        goto label2;

     label3:
        $r17 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label4:
        $z4 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $r8 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (com.adobe.xmp.impl.XMPNode) $r8;

        specialinvoke r5.<com.adobe.xmp.impl.XMPSerializerRDF: void declareUsedNamespaces(com.adobe.xmp.impl.XMPNode,java.util.Set,int)>(r18, r7, i0);

        goto label4;

     label5:
        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

     label6:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r19 = (com.adobe.xmp.impl.XMPNode) $r4;

        $r6 = virtualinvoke r19.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r5.<com.adobe.xmp.impl.XMPSerializerRDF: void declareNamespace(java.lang.String,java.lang.String,java.util.Set,int)>($r6, null, r7, i0);

        specialinvoke r5.<com.adobe.xmp.impl.XMPSerializerRDF: void declareUsedNamespaces(com.adobe.xmp.impl.XMPNode,java.util.Set,int)>(r19, r7, i0);

        goto label6;

     label7:
        return;
    }

    private void declareNamespace(java.lang.String, java.lang.String, java.util.Set, int) throws java.io.IOException
    {
        java.util.Set r0;
        com.adobe.xmp.XMPSchemaRegistry $r4;
        com.adobe.xmp.impl.QName $r2;
        int i0;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r3, $r8, $r9, r10, r11;
        com.adobe.xmp.impl.XMPSerializerRDF r1;
        boolean $z0, $z1;

        r1 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r10 := @parameter0: java.lang.String;

        r11 := @parameter1: java.lang.String;

        r0 := @parameter2: java.util.Set;

        i0 := @parameter3: int;

        if r11 != null goto label2;

        $r2 = new com.adobe.xmp.impl.QName;

        specialinvoke $r2.<com.adobe.xmp.impl.QName: void <init>(java.lang.String)>(r10);

        $z1 = virtualinvoke $r2.<com.adobe.xmp.impl.QName: boolean hasPrefix()>();

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke $r2.<com.adobe.xmp.impl.QName: java.lang.String getPrefix()>();

        r10 = $r3;

        $r4 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = interfaceinvoke $r4.<com.adobe.xmp.XMPSchemaRegistry: java.lang.String getNamespaceURI(java.lang.String)>($r8);

        r11 = $r9;

        specialinvoke r1.<com.adobe.xmp.impl.XMPSerializerRDF: void declareNamespace(java.lang.String,java.lang.String,java.util.Set,int)>($r3, $r9, r0, i0);

        goto label2;

     label1:
        return;

     label2:
        $z0 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>(r10);

        if $z0 != 0 goto label3;

        specialinvoke r1.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        specialinvoke r1.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i0);

        specialinvoke r1.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("xmlns:");

        specialinvoke r1.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(r10);

        specialinvoke r1.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("=\"");

        specialinvoke r1.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(r11);

        specialinvoke r1.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(34);

        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r10);

     label3:
        return;
    }

    private void startOuterRDFDescription(com.adobe.xmp.impl.XMPNode, int) throws java.io.IOException
    {
        java.util.HashSet $r1;
        com.adobe.xmp.impl.XMPNode r2;
        int i0, $i1, $i2;
        com.adobe.xmp.impl.XMPSerializerRDF r0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r2 := @parameter0: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter1: int;

        $i1 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>($i1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<rdf:Description rdf:about=");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeTreeName()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>("xml");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>("rdf");

        $i2 = i0 + 3;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void declareUsedNamespaces(com.adobe.xmp.impl.XMPNode,java.util.Set,int)>(r2, $r1, $i2);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        return;
    }

    private void endOuterRDFDescription(int) throws java.io.IOException
    {
        int i0, $i1;
        com.adobe.xmp.impl.XMPSerializerRDF r0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>($i1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</rdf:Description>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        return;
    }

    private void serializeCanonicalRDFProperty(com.adobe.xmp.impl.XMPNode, boolean, boolean, int) throws java.io.IOException, com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r3;
        java.util.Set $r24, $r28;
        java.lang.String $r1, $r2, $r8, $r9, $r17, $r18, $r19, $r20, $r21, $r25, $r29, $r30, $r31, $r32, $r33, r34;
        com.adobe.xmp.impl.XMPNode r0, r36, r37, r38, r39, r40;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, $z8, $z9, $z10, $z11, $z12, z13, z14, z15, z16, $z17, $z18, $z19, $z20;
        com.adobe.xmp.options.PropertyOptions $r4, $r5, $r13, $r16;
        com.adobe.xmp.XMPException $r41, $r42;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i10, $i12;
        java.util.Iterator $r6, $r11, $r14, $r22, $r35;
        java.lang.Object $r7, $r12, $r15, $r23, $r27;

        r3 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        z7 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        i8 := @parameter3: int;

        z13 = 1;

        z14 = 1;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        r34 = $r1;

        if z0 == 0 goto label01;

        r34 = "rdf:value";

        goto label02;

     label01:
        $r2 = "[]";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label02;

        r34 = "rdf:li";

     label02:
        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i8);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(60);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(r34);

        z15 = 0;

        z16 = 0;

        $r35 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

     label03:
        $z17 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z17 == 0 goto label06;

        $r27 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (com.adobe.xmp.impl.XMPNode) $r27;

        $r28 = <com.adobe.xmp.impl.XMPSerializerRDF: java.util.Set RDF_ATTR_QUALIFIER>;

        $r29 = virtualinvoke r36.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z12 = interfaceinvoke $r28.<java.util.Set: boolean contains(java.lang.Object)>($r29);

        if $z12 != 0 goto label04;

        z15 = 1;

        goto label05;

     label04:
        $r30 = "rdf:resource";

        $r31 = virtualinvoke r36.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        z16 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r31);

        if z0 != 0 goto label05;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(32);

        $r32 = virtualinvoke r36.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r32);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("=\"");

        $r33 = virtualinvoke r36.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r33, 1);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(34);

     label05:
        goto label03;

     label06:
        if z15 == 0 goto label13;

        if z0 != 0 goto label13;

        if z16 == 0 goto label07;

        $r41 = new com.adobe.xmp.XMPException;

        specialinvoke $r41.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Can\'t mix rdf:resource and general qualifiers", 202);

        throw $r41;

     label07:
        if z7 == 0 goto label08;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(">");

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        i8 = i8 + 1;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i8);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<rdf:Description");

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(">");

        goto label09;

     label08:
        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:parseType=\"Resource\">");

     label09:
        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i6 = i8 + 1;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCanonicalRDFProperty(com.adobe.xmp.impl.XMPNode,boolean,boolean,int)>(r0, z7, 1, $i6);

        $r22 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

     label10:
        $z18 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z18 == 0 goto label12;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r37 = (com.adobe.xmp.impl.XMPNode) $r23;

        $r24 = <com.adobe.xmp.impl.XMPSerializerRDF: java.util.Set RDF_ATTR_QUALIFIER>;

        $r25 = virtualinvoke r37.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z11 = interfaceinvoke $r24.<java.util.Set: boolean contains(java.lang.Object)>($r25);

        if $z11 != 0 goto label11;

        $i7 = i8 + 1;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCanonicalRDFProperty(com.adobe.xmp.impl.XMPNode,boolean,boolean,int)>(r37, z7, 0, $i7);

     label11:
        goto label10;

     label12:
        if z7 == 0 goto label33;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i8);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</rdf:Description>");

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i10 = (int) -1;

        i8 = i8 + $i10;

        goto label33;

     label13:
        $r4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z2 != 0 goto label17;

        $r16 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z9 = virtualinvoke $r16.<com.adobe.xmp.options.PropertyOptions: boolean isURI()>();

        if $z9 == 0 goto label14;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:resource=\"");

        $r21 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r21, 1);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("\"/>");

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        z13 = 0;

        goto label33;

     label14:
        $r17 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        if $r17 == null goto label15;

        $r18 = "";

        $r19 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z10 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z10 == 0 goto label16;

     label15:
        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("/>");

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        z13 = 0;

        goto label33;

     label16:
        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        $r20 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r20, 0);

        z14 = 0;

        goto label33;

     label17:
        $r5 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z3 = virtualinvoke $r5.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z3 == 0 goto label21;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i3 = i8 + 1;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void emitRDFArrayTag(com.adobe.xmp.impl.XMPNode,boolean,int)>(r0, 1, $i3);

        $r13 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z8 = virtualinvoke $r13.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z8 == 0 goto label18;

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void normalizeLangArray(com.adobe.xmp.impl.XMPNode)>(r0);

     label18:
        $r14 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label19:
        $z19 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z19 == 0 goto label20;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r38 = (com.adobe.xmp.impl.XMPNode) $r15;

        $i5 = i8 + 2;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCanonicalRDFProperty(com.adobe.xmp.impl.XMPNode,boolean,boolean,int)>(r38, z7, 0, $i5);

        goto label19;

     label20:
        $i4 = i8 + 1;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void emitRDFArrayTag(com.adobe.xmp.impl.XMPNode,boolean,int)>(r0, 0, $i4);

        goto label33;

     label21:
        if z16 != 0 goto label29;

        $z6 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z6 != 0 goto label24;

        if z7 == 0 goto label22;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(">");

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i2 = i8 + 1;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>($i2);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<rdf:Description/>");

        goto label23;

     label22:
        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:parseType=\"Resource\"/>");

        z13 = 0;

     label23:
        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        goto label33;

     label24:
        if z7 == 0 goto label25;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(">");

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        i8 = i8 + 1;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i8);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<rdf:Description");

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(">");

        goto label26;

     label25:
        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:parseType=\"Resource\">");

     label26:
        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $r11 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label27:
        $z20 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z20 == 0 goto label28;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r39 = (com.adobe.xmp.impl.XMPNode) $r12;

        $i1 = i8 + 1;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCanonicalRDFProperty(com.adobe.xmp.impl.XMPNode,boolean,boolean,int)>(r39, z7, 0, $i1);

        goto label27;

     label28:
        if z7 == 0 goto label33;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i8);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</rdf:Description>");

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i12 = (int) -1;

        i8 = i8 + $i12;

        goto label33;

     label29:
        $r6 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label30:
        $z4 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label32;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r40 = (com.adobe.xmp.impl.XMPNode) $r7;

        $z5 = specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: boolean canBeRDFAttrProp(com.adobe.xmp.impl.XMPNode)>(r40);

        if $z5 != 0 goto label31;

        $r42 = new com.adobe.xmp.XMPException;

        specialinvoke $r42.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Can\'t mix rdf:resource and complex fields", 202);

        throw $r42;

     label31:
        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i0 = i8 + 1;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>($i0);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(32);

        $r8 = virtualinvoke r40.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r8);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("=\"");

        $r9 = virtualinvoke r40.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r9, 1);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(34);

        goto label30;

     label32:
        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("/>");

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        z13 = 0;

     label33:
        if z13 == 0 goto label35;

        if z14 == 0 goto label34;

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i8);

     label34:
        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</");

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(r34);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        specialinvoke r3.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

     label35:
        return;
    }

    private void emitRDFArrayTag(com.adobe.xmp.impl.XMPNode, boolean, int) throws java.io.IOException
    {
        com.adobe.xmp.options.PropertyOptions $r2, $r3;
        com.adobe.xmp.impl.XMPNode r1;
        int i0;
        java.lang.String $r4;
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        boolean z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        if z0 != 0 goto label1;

        $z4 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z4 == 0 goto label9;

     label1:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i0);

        if z0 == 0 goto label2;

        $r4 = "<rdf:";

        goto label3;

     label2:
        $r4 = "</rdf:";

     label3:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r4);

        $r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAlternate()>();

        if $z1 == 0 goto label4;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("Alt");

        goto label6;

     label4:
        $r3 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r3.<com.adobe.xmp.options.PropertyOptions: boolean isArrayOrdered()>();

        if $z2 == 0 goto label5;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("Seq");

        goto label6;

     label5:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("Bag");

     label6:
        if z0 == 0 goto label7;

        $z3 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z3 != 0 goto label7;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("/>");

        goto label8;

     label7:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(">");

     label8:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

     label9:
        return;
    }

    private void appendNodeValue(java.lang.String, boolean) throws java.io.IOException
    {
        java.lang.String $r1, r2;
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r2 != null goto label1;

        r2 = "";

     label1:
        $r1 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String escapeXML(java.lang.String,boolean,boolean)>(r2, z0, 1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r1);

        return;
    }

    private boolean canBeRDFAttrProp(com.adobe.xmp.impl.XMPNode)
    {
        com.adobe.xmp.options.PropertyOptions $r1, $r2;
        com.adobe.xmp.impl.XMPNode r0;
        java.lang.String $r3, $r4;
        com.adobe.xmp.impl.XMPSerializerRDF r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r5 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $z0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean hasQualifier()>();

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean isURI()>();

        if $z1 != 0 goto label1;

        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z2 != 0 goto label1;

        $r3 = "[]";

        $r4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    private void writeIndent(int) throws java.io.IOException
    {
        com.adobe.xmp.options.SerializeOptions $r1, $r2;
        int $i0, i1, i2, $i4;
        java.io.OutputStreamWriter $r3;
        java.lang.String $r4;
        com.adobe.xmp.impl.XMPSerializerRDF r0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        i1 := @parameter0: int;

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $i0 = virtualinvoke $r1.<com.adobe.xmp.options.SerializeOptions: int getBaseIndent()>();

        i2 = $i0 + i1;

     label1:
        if i2 <= 0 goto label2;

        $r3 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer>;

        $r2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $r4 = virtualinvoke $r2.<com.adobe.xmp.options.SerializeOptions: java.lang.String getIndent()>();

        virtualinvoke $r3.<java.io.OutputStreamWriter: void write(java.lang.String)>($r4);

        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label2:
        return;
    }

    private void write(int) throws java.io.IOException
    {
        int i0;
        java.io.OutputStreamWriter $r1;
        com.adobe.xmp.impl.XMPSerializerRDF r0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        i0 := @parameter0: int;

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer>;

        virtualinvoke $r1.<java.io.OutputStreamWriter: void write(int)>(i0);

        return;
    }

    private void write(java.lang.String) throws java.io.IOException
    {
        java.io.OutputStreamWriter $r2;
        java.lang.String r1;
        com.adobe.xmp.impl.XMPSerializerRDF r0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer>;

        virtualinvoke $r2.<java.io.OutputStreamWriter: void write(java.lang.String)>(r1);

        return;
    }

    private void writeChars(int, char) throws java.io.IOException
    {
        int i1, $i2, $i4;
        java.io.OutputStreamWriter $r1;
        char c0;
        com.adobe.xmp.impl.XMPSerializerRDF r0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        i1 := @parameter0: int;

        c0 := @parameter1: char;

     label1:
        if i1 <= 0 goto label2;

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer>;

        $i2 = (int) c0;

        virtualinvoke $r1.<java.io.OutputStreamWriter: void write(int)>($i2);

        $i4 = (int) -1;

        i1 = i1 + $i4;

        goto label1;

     label2:
        return;
    }

    private void writeNewline() throws java.io.IOException
    {
        com.adobe.xmp.options.SerializeOptions $r1;
        java.io.OutputStreamWriter $r2;
        java.lang.String $r3;
        com.adobe.xmp.impl.XMPSerializerRDF r0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        $r2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer>;

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $r3 = virtualinvoke $r1.<com.adobe.xmp.options.SerializeOptions: java.lang.String getNewline()>();

        virtualinvoke $r2.<java.io.OutputStreamWriter: void write(java.lang.String)>($r3);

        return;
    }

    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.lang.String[] $r1;
        java.util.List $r2;

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_EMPTY_STRUCT> = "<rdf:Description/>";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_STRUCT_END> = "</rdf:Description>";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_STRUCT_START> = "<rdf:Description";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_SCHEMA_END> = "</rdf:Description>";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_SCHEMA_START> = "<rdf:Description rdf:about=";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_RDF_END> = "</rdf:RDF>";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_RDF_START> = "<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_XMPMETA_END> = "</x:xmpmeta>";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_XMPMETA_START> = "<x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String PACKET_TRAILER2> = "\"?>";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String PACKET_TRAILER> = "<?xpacket end=\"";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String PACKET_HEADER> = "<?xpacket begin=\"\ufeff\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>";

        <com.adobe.xmp.impl.XMPSerializerRDF: int DEFAULT_PAD> = 2048;

        $r0 = new java.util.HashSet;

        $r1 = newarray (java.lang.String)[5];

        $r1[0] = "xml:lang";

        $r1[1] = "rdf:resource";

        $r1[2] = "rdf:ID";

        $r1[3] = "rdf:bagID";

        $r1[4] = "rdf:nodeID";

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        <com.adobe.xmp.impl.XMPSerializerRDF: java.util.Set RDF_ATTR_QUALIFIER> = $r0;

        return;
    }
}
