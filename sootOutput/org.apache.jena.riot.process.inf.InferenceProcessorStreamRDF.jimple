public class org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF extends org.apache.jena.riot.system.StreamRDFWrapper
{
    private final org.apache.jena.riot.process.inf.InferenceSetupRDFS rdfsSetup;
    private final org.apache.jena.riot.process.inf.InferenceProcessorRDFS rdfs;
    private boolean isTriple;
    private com.hp.hpl.jena.graph.Node g;

    public void <init>(org.apache.jena.riot.system.StreamRDF, org.apache.jena.riot.process.inf.InferenceSetupRDFS)
    {
        org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF r0;
        org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF$1 $r3;
        org.apache.jena.riot.system.StreamRDF r1;
        org.apache.jena.riot.process.inf.InferenceSetupRDFS r2;

        r0 := @this: org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF;

        r1 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r2 := @parameter1: org.apache.jena.riot.process.inf.InferenceSetupRDFS;

        specialinvoke r0.<org.apache.jena.riot.system.StreamRDFWrapper: void <init>(org.apache.jena.riot.system.StreamRDF)>(r1);

        r0.<org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF: boolean isTriple> = 1;

        r0.<org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF: org.apache.jena.riot.process.inf.InferenceSetupRDFS rdfsSetup> = r2;

        $r3 = new org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF$1;

        specialinvoke $r3.<org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF$1: void <init>(org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF,org.apache.jena.riot.process.inf.InferenceSetupRDFS,org.apache.jena.riot.system.StreamRDF)>(r0, r2, r1);

        r0.<org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF: org.apache.jena.riot.process.inf.InferenceProcessorRDFS rdfs> = $r3;

        return;
    }

    public void triple(com.hp.hpl.jena.graph.Triple)
    {
        org.apache.jena.riot.process.inf.InferenceProcessorRDFS $r2;
        org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF r0;
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        specialinvoke r0.<org.apache.jena.riot.system.StreamRDFWrapper: void triple(com.hp.hpl.jena.graph.Triple)>(r1);

        r0.<org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF: boolean isTriple> = 1;

        r0.<org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF: com.hp.hpl.jena.graph.Node g> = null;

        $r2 = r0.<org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF: org.apache.jena.riot.process.inf.InferenceProcessorRDFS rdfs>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        virtualinvoke $r2.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: void process(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r4, $r5);

        return;
    }

    public void quad(com.hp.hpl.jena.sparql.core.Quad)
    {
        org.apache.jena.riot.process.inf.InferenceProcessorRDFS $r3;
        org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF r0;
        com.hp.hpl.jena.graph.Node $r2, $r4, $r5, $r6;
        com.hp.hpl.jena.sparql.core.Quad r1;

        r0 := @this: org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke r0.<org.apache.jena.riot.system.StreamRDFWrapper: void quad(com.hp.hpl.jena.sparql.core.Quad)>(r1);

        r0.<org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF: boolean isTriple> = 0;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        r0.<org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF: com.hp.hpl.jena.graph.Node g> = $r2;

        $r3 = r0.<org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF: org.apache.jena.riot.process.inf.InferenceProcessorRDFS rdfs>;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        virtualinvoke $r3.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: void process(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r5, $r6);

        return;
    }

    static boolean access$000(org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF)
    {
        org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF r0;
        boolean $z0;

        r0 := @parameter0: org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF;

        $z0 = r0.<org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF: boolean isTriple>;

        return $z0;
    }

    static com.hp.hpl.jena.graph.Node access$100(org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF)
    {
        org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @parameter0: org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF;

        $r1 = r0.<org.apache.jena.riot.process.inf.InferenceProcessorStreamRDF: com.hp.hpl.jena.graph.Node g>;

        return $r1;
    }
}
