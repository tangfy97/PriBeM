public class org.apache.commons.codec.binary.StringUtils extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.codec.binary.StringUtils r0;

        r0 := @this: org.apache.commons.codec.binary.StringUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] getBytesIso8859_1(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUnchecked(java.lang.String,java.lang.String)>(r0, "ISO-8859-1");

        return $r1;
    }

    public static byte[] getBytesUsAscii(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUnchecked(java.lang.String,java.lang.String)>(r0, "US-ASCII");

        return $r1;
    }

    public static byte[] getBytesUtf16(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUnchecked(java.lang.String,java.lang.String)>(r0, "UTF-16");

        return $r1;
    }

    public static byte[] getBytesUtf16Be(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUnchecked(java.lang.String,java.lang.String)>(r0, "UTF-16BE");

        return $r1;
    }

    public static byte[] getBytesUtf16Le(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUnchecked(java.lang.String,java.lang.String)>(r0, "UTF-16LE");

        return $r1;
    }

    public static byte[] getBytesUtf8(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUnchecked(java.lang.String,java.lang.String)>(r0, "UTF-8");

        return $r1;
    }

    public static byte[] getBytesUnchecked(java.lang.String, java.lang.String)
    {
        byte[] $r2;
        java.lang.IllegalStateException $r4;
        java.lang.String r0, r1;
        java.io.UnsupportedEncodingException $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.IllegalStateException newIllegalStateException(java.lang.String,java.io.UnsupportedEncodingException)>(r1, $r3);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private static java.lang.IllegalStateException newIllegalStateException(java.lang.String, java.io.UnsupportedEncodingException)
    {
        java.lang.IllegalStateException $r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;
        java.lang.String r2, $r7;
        java.io.UnsupportedEncodingException r5;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.io.UnsupportedEncodingException;

        $r0 = new java.lang.IllegalStateException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        return $r0;
    }

    public static java.lang.String newString(byte[], java.lang.String)
    {
        byte[] r0;
        java.lang.IllegalStateException $r4;
        java.lang.String $r1, r2;
        java.io.UnsupportedEncodingException $r3;

        r0 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>(r0, r2);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.IllegalStateException newIllegalStateException(java.lang.String,java.io.UnsupportedEncodingException)>(r2, $r3);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String newStringIso8859_1(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newString(byte[],java.lang.String)>(r0, "ISO-8859-1");

        return $r1;
    }

    public static java.lang.String newStringUsAscii(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newString(byte[],java.lang.String)>(r0, "US-ASCII");

        return $r1;
    }

    public static java.lang.String newStringUtf16(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newString(byte[],java.lang.String)>(r0, "UTF-16");

        return $r1;
    }

    public static java.lang.String newStringUtf16Be(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newString(byte[],java.lang.String)>(r0, "UTF-16BE");

        return $r1;
    }

    public static java.lang.String newStringUtf16Le(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newString(byte[],java.lang.String)>(r0, "UTF-16LE");

        return $r1;
    }

    public static java.lang.String newStringUtf8(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newString(byte[],java.lang.String)>(r0, "UTF-8");

        return $r1;
    }
}
