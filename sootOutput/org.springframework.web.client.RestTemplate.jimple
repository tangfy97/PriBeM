public class org.springframework.web.client.RestTemplate extends org.springframework.http.client.support.HttpAccessor implements org.springframework.web.client.RestOperations
{
    private static final boolean jaxb2Present;
    private static final boolean jacksonPresent;
    private static boolean romePresent;
    private final org.springframework.web.client.ResponseExtractor headersExtractor;
    private java.util.List messageConverters;
    private org.springframework.web.client.ResponseErrorHandler errorHandler;

    static void <clinit>()
    {
        java.lang.Class $r0, $r2, $r4, $r6;
        java.lang.ClassLoader $r1, $r3, $r5, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;

        $r0 = class "Lorg/springframework/web/client/RestTemplate;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>("javax.xml.bind.Binder", $r1);

        <org.springframework.web.client.RestTemplate: boolean jaxb2Present> = $z0;

        $r2 = class "Lorg/springframework/web/client/RestTemplate;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z1 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>("org.codehaus.jackson.map.ObjectMapper", $r3);

        if $z1 == 0 goto label1;

        $r4 = class "Lorg/springframework/web/client/RestTemplate;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z2 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>("org.codehaus.jackson.JsonGenerator", $r5);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        <org.springframework.web.client.RestTemplate: boolean jacksonPresent> = $z3;

        $r6 = class "Lorg/springframework/web/client/RestTemplate;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z4 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>("com.sun.syndication.feed.WireFeed", $r7);

        <org.springframework.web.client.RestTemplate: boolean romePresent> = $z4;

        return;
    }

    public void <init>()
    {
        org.springframework.http.converter.feed.RssChannelHttpMessageConverter $r16;
        org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter $r12;
        org.springframework.http.converter.json.MappingJacksonHttpMessageConverter $r18;
        org.springframework.web.client.DefaultResponseErrorHandler $r3;
        java.util.ArrayList $r2;
        org.springframework.http.converter.ResourceHttpMessageConverter $r8;
        org.springframework.http.converter.feed.AtomFeedHttpMessageConverter $r14;
        org.springframework.web.client.RestTemplate r0;
        boolean $z0, $z1, $z2;
        org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter $r20;
        org.springframework.http.converter.ByteArrayHttpMessageConverter $r4;
        org.springframework.http.converter.StringHttpMessageConverter $r6;
        org.springframework.http.converter.xml.SourceHttpMessageConverter $r10;
        java.util.List $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21;
        org.springframework.web.client.RestTemplate$HeadersExtractor $r1;

        r0 := @this: org.springframework.web.client.RestTemplate;

        specialinvoke r0.<org.springframework.http.client.support.HttpAccessor: void <init>()>();

        $r1 = new org.springframework.web.client.RestTemplate$HeadersExtractor;

        specialinvoke $r1.<org.springframework.web.client.RestTemplate$HeadersExtractor: void <init>(org.springframework.web.client.RestTemplate$HeadersExtractor)>(null);

        r0.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseExtractor headersExtractor> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.springframework.web.client.RestTemplate: java.util.List messageConverters> = $r2;

        $r3 = new org.springframework.web.client.DefaultResponseErrorHandler;

        specialinvoke $r3.<org.springframework.web.client.DefaultResponseErrorHandler: void <init>()>();

        r0.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseErrorHandler errorHandler> = $r3;

        $r5 = r0.<org.springframework.web.client.RestTemplate: java.util.List messageConverters>;

        $r4 = new org.springframework.http.converter.ByteArrayHttpMessageConverter;

        specialinvoke $r4.<org.springframework.http.converter.ByteArrayHttpMessageConverter: void <init>()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r7 = r0.<org.springframework.web.client.RestTemplate: java.util.List messageConverters>;

        $r6 = new org.springframework.http.converter.StringHttpMessageConverter;

        specialinvoke $r6.<org.springframework.http.converter.StringHttpMessageConverter: void <init>()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r9 = r0.<org.springframework.web.client.RestTemplate: java.util.List messageConverters>;

        $r8 = new org.springframework.http.converter.ResourceHttpMessageConverter;

        specialinvoke $r8.<org.springframework.http.converter.ResourceHttpMessageConverter: void <init>()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r11 = r0.<org.springframework.web.client.RestTemplate: java.util.List messageConverters>;

        $r10 = new org.springframework.http.converter.xml.SourceHttpMessageConverter;

        specialinvoke $r10.<org.springframework.http.converter.xml.SourceHttpMessageConverter: void <init>()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r13 = r0.<org.springframework.web.client.RestTemplate: java.util.List messageConverters>;

        $r12 = new org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter;

        specialinvoke $r12.<org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter: void <init>()>();

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r12);

        $z0 = <org.springframework.web.client.RestTemplate: boolean jaxb2Present>;

        if $z0 == 0 goto label1;

        $r21 = r0.<org.springframework.web.client.RestTemplate: java.util.List messageConverters>;

        $r20 = new org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;

        specialinvoke $r20.<org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter: void <init>()>();

        interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>($r20);

     label1:
        $z1 = <org.springframework.web.client.RestTemplate: boolean jacksonPresent>;

        if $z1 == 0 goto label2;

        $r19 = r0.<org.springframework.web.client.RestTemplate: java.util.List messageConverters>;

        $r18 = new org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;

        specialinvoke $r18.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: void <init>()>();

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r18);

     label2:
        $z2 = <org.springframework.web.client.RestTemplate: boolean romePresent>;

        if $z2 == 0 goto label3;

        $r15 = r0.<org.springframework.web.client.RestTemplate: java.util.List messageConverters>;

        $r14 = new org.springframework.http.converter.feed.AtomFeedHttpMessageConverter;

        specialinvoke $r14.<org.springframework.http.converter.feed.AtomFeedHttpMessageConverter: void <init>()>();

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r14);

        $r17 = r0.<org.springframework.web.client.RestTemplate: java.util.List messageConverters>;

        $r16 = new org.springframework.http.converter.feed.RssChannelHttpMessageConverter;

        specialinvoke $r16.<org.springframework.http.converter.feed.RssChannelHttpMessageConverter: void <init>()>();

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r16);

     label3:
        return;
    }

    public void <init>(org.springframework.http.client.ClientHttpRequestFactory)
    {
        org.springframework.web.client.RestTemplate r0;
        org.springframework.http.client.ClientHttpRequestFactory r1;

        r0 := @this: org.springframework.web.client.RestTemplate;

        r1 := @parameter0: org.springframework.http.client.ClientHttpRequestFactory;

        specialinvoke r0.<org.springframework.web.client.RestTemplate: void <init>()>();

        virtualinvoke r0.<org.springframework.web.client.RestTemplate: void setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)>(r1);

        return;
    }

    public void setMessageConverters(java.util.List)
    {
        java.util.List r0;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r0 := @parameter0: java.util.List;

        staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r0, "\'messageConverters\' must not be empty");

        r1.<org.springframework.web.client.RestTemplate: java.util.List messageConverters> = r0;

        return;
    }

    public java.util.List getMessageConverters()
    {
        java.util.List $r1;
        org.springframework.web.client.RestTemplate r0;

        r0 := @this: org.springframework.web.client.RestTemplate;

        $r1 = r0.<org.springframework.web.client.RestTemplate: java.util.List messageConverters>;

        return $r1;
    }

    public void setErrorHandler(org.springframework.web.client.ResponseErrorHandler)
    {
        org.springframework.web.client.ResponseErrorHandler r0;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r0 := @parameter0: org.springframework.web.client.ResponseErrorHandler;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'errorHandler\' must not be null");

        r1.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseErrorHandler errorHandler> = r0;

        return;
    }

    public org.springframework.web.client.ResponseErrorHandler getErrorHandler()
    {
        org.springframework.web.client.ResponseErrorHandler $r1;
        org.springframework.web.client.RestTemplate r0;

        r0 := @this: org.springframework.web.client.RestTemplate;

        $r1 = r0.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseErrorHandler errorHandler>;

        return $r1;
    }

    public transient java.lang.Object getForObject(java.lang.String, java.lang.Class, java.lang.Object[]) throws org.springframework.web.client.RestClientException
    {
        java.lang.Object[] r7;
        org.springframework.http.HttpMethod $r8;
        java.util.List $r4;
        org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback $r0;
        org.springframework.web.client.HttpMessageConverterExtractor $r3;
        java.lang.Class r2;
        org.apache.commons.logging.Log $r5;
        java.lang.Object $r9;
        java.lang.String r6;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r6 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r7 := @parameter2: java.lang.Object[];

        $r0 = new org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class,org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback,org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback)>(r1, r2, null, null);

        $r3 = new org.springframework.web.client.HttpMessageConverterExtractor;

        $r4 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.util.List getMessageConverters()>();

        $r5 = r1.<org.springframework.web.client.RestTemplate: org.apache.commons.logging.Log logger>;

        specialinvoke $r3.<org.springframework.web.client.HttpMessageConverterExtractor: void <init>(java.lang.Class,java.util.List,org.apache.commons.logging.Log)>(r2, $r4, $r5);

        $r8 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>;

        $r9 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])>(r6, $r8, $r0, $r3, r7);

        return $r9;
    }

    public java.lang.Object getForObject(java.lang.String, java.lang.Class, java.util.Map) throws org.springframework.web.client.RestClientException
    {
        org.springframework.http.HttpMethod $r8;
        java.util.List $r4;
        org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback $r0;
        java.util.Map r7;
        org.springframework.web.client.HttpMessageConverterExtractor $r3;
        java.lang.Class r2;
        org.apache.commons.logging.Log $r5;
        java.lang.Object $r9;
        java.lang.String r6;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r6 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r7 := @parameter2: java.util.Map;

        $r0 = new org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class,org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback,org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback)>(r1, r2, null, null);

        $r3 = new org.springframework.web.client.HttpMessageConverterExtractor;

        $r4 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.util.List getMessageConverters()>();

        $r5 = r1.<org.springframework.web.client.RestTemplate: org.apache.commons.logging.Log logger>;

        specialinvoke $r3.<org.springframework.web.client.HttpMessageConverterExtractor: void <init>(java.lang.Class,java.util.List,org.apache.commons.logging.Log)>(r2, $r4, $r5);

        $r8 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>;

        $r9 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)>(r6, $r8, $r0, $r3, r7);

        return $r9;
    }

    public java.lang.Object getForObject(java.net.URI, java.lang.Class) throws org.springframework.web.client.RestClientException
    {
        org.springframework.http.HttpMethod $r7;
        java.util.List $r4;
        org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback $r0;
        org.springframework.web.client.HttpMessageConverterExtractor $r3;
        java.lang.Class r2;
        org.apache.commons.logging.Log $r5;
        java.lang.Object $r8;
        java.net.URI r6;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r6 := @parameter0: java.net.URI;

        r2 := @parameter1: java.lang.Class;

        $r0 = new org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class,org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback,org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback)>(r1, r2, null, null);

        $r3 = new org.springframework.web.client.HttpMessageConverterExtractor;

        $r4 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.util.List getMessageConverters()>();

        $r5 = r1.<org.springframework.web.client.RestTemplate: org.apache.commons.logging.Log logger>;

        specialinvoke $r3.<org.springframework.web.client.HttpMessageConverterExtractor: void <init>(java.lang.Class,java.util.List,org.apache.commons.logging.Log)>(r2, $r4, $r5);

        $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>;

        $r8 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)>(r6, $r7, $r0, $r3);

        return $r8;
    }

    public transient org.springframework.http.ResponseEntity getForEntity(java.lang.String, java.lang.Class, java.lang.Object[]) throws org.springframework.web.client.RestClientException
    {
        java.lang.Object[] r5;
        org.springframework.http.HttpMethod $r6;
        org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback $r0;
        org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor $r3;
        java.lang.Class r2;
        java.lang.Object $r7;
        org.springframework.http.ResponseEntity $r8;
        java.lang.String r4;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r4 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r5 := @parameter2: java.lang.Object[];

        $r0 = new org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class,org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback,org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback)>(r1, r2, null, null);

        $r3 = new org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor;

        specialinvoke $r3.<org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class)>(r1, r2);

        $r6 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>;

        $r7 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])>(r4, $r6, $r0, $r3, r5);

        $r8 = (org.springframework.http.ResponseEntity) $r7;

        return $r8;
    }

    public org.springframework.http.ResponseEntity getForEntity(java.lang.String, java.lang.Class, java.util.Map) throws org.springframework.web.client.RestClientException
    {
        org.springframework.http.HttpMethod $r6;
        org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback $r0;
        org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor $r3;
        java.util.Map r5;
        java.lang.Class r2;
        java.lang.Object $r7;
        org.springframework.http.ResponseEntity $r8;
        java.lang.String r4;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r4 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r5 := @parameter2: java.util.Map;

        $r0 = new org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class,org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback,org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback)>(r1, r2, null, null);

        $r3 = new org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor;

        specialinvoke $r3.<org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class)>(r1, r2);

        $r6 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>;

        $r7 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)>(r4, $r6, $r0, $r3, r5);

        $r8 = (org.springframework.http.ResponseEntity) $r7;

        return $r8;
    }

    public org.springframework.http.ResponseEntity getForEntity(java.net.URI, java.lang.Class) throws org.springframework.web.client.RestClientException
    {
        org.springframework.http.HttpMethod $r5;
        org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback $r0;
        org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor $r3;
        java.lang.Class r2;
        java.lang.Object $r6;
        org.springframework.http.ResponseEntity $r7;
        java.net.URI r4;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r4 := @parameter0: java.net.URI;

        r2 := @parameter1: java.lang.Class;

        $r0 = new org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class,org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback,org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback)>(r1, r2, null, null);

        $r3 = new org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor;

        specialinvoke $r3.<org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class)>(r1, r2);

        $r5 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>;

        $r6 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)>(r4, $r5, $r0, $r3);

        $r7 = (org.springframework.http.ResponseEntity) $r6;

        return $r7;
    }

    public transient org.springframework.http.HttpHeaders headForHeaders(java.lang.String, java.lang.Object[]) throws org.springframework.web.client.RestClientException
    {
        java.lang.Object[] r2;
        org.springframework.web.client.ResponseExtractor $r3;
        org.springframework.http.HttpHeaders $r6;
        org.springframework.http.HttpMethod $r4;
        java.lang.Object $r5;
        java.lang.String r1;
        org.springframework.web.client.RestTemplate r0;

        r0 := @this: org.springframework.web.client.RestTemplate;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>;

        $r3 = r0.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseExtractor headersExtractor>;

        $r5 = virtualinvoke r0.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])>(r1, $r4, null, $r3, r2);

        $r6 = (org.springframework.http.HttpHeaders) $r5;

        return $r6;
    }

    public org.springframework.http.HttpHeaders headForHeaders(java.lang.String, java.util.Map) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.ResponseExtractor $r3;
        org.springframework.http.HttpHeaders $r6;
        java.util.Map r2;
        org.springframework.http.HttpMethod $r4;
        java.lang.Object $r5;
        java.lang.String r1;
        org.springframework.web.client.RestTemplate r0;

        r0 := @this: org.springframework.web.client.RestTemplate;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>;

        $r3 = r0.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseExtractor headersExtractor>;

        $r5 = virtualinvoke r0.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)>(r1, $r4, null, $r3, r2);

        $r6 = (org.springframework.http.HttpHeaders) $r5;

        return $r6;
    }

    public org.springframework.http.HttpHeaders headForHeaders(java.net.URI) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.ResponseExtractor $r2;
        org.springframework.http.HttpHeaders $r5;
        org.springframework.http.HttpMethod $r3;
        java.lang.Object $r4;
        java.net.URI r1;
        org.springframework.web.client.RestTemplate r0;

        r0 := @this: org.springframework.web.client.RestTemplate;

        r1 := @parameter0: java.net.URI;

        $r3 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>;

        $r2 = r0.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseExtractor headersExtractor>;

        $r4 = virtualinvoke r0.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)>(r1, $r3, null, $r2);

        $r5 = (org.springframework.http.HttpHeaders) $r4;

        return $r5;
    }

    public transient java.net.URI postForLocation(java.lang.String, java.lang.Object, java.lang.Object[]) throws org.springframework.web.client.RestClientException
    {
        java.lang.Object[] r4;
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        org.springframework.web.client.ResponseExtractor $r5;
        org.springframework.http.HttpHeaders r8;
        org.springframework.http.HttpMethod $r6;
        java.lang.Object r2, $r7;
        java.lang.String r3;
        java.net.URI $r9;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object[];

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, null);

        $r6 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod POST>;

        $r5 = r1.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseExtractor headersExtractor>;

        $r7 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])>(r3, $r6, $r0, $r5, r4);

        r8 = (org.springframework.http.HttpHeaders) $r7;

        $r9 = virtualinvoke r8.<org.springframework.http.HttpHeaders: java.net.URI getLocation()>();

        return $r9;
    }

    public java.net.URI postForLocation(java.lang.String, java.lang.Object, java.util.Map) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        org.springframework.web.client.ResponseExtractor $r5;
        org.springframework.http.HttpHeaders r8;
        org.springframework.http.HttpMethod $r6;
        java.util.Map r4;
        java.lang.Object r2, $r7;
        java.lang.String r3;
        java.net.URI $r9;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.util.Map;

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, null);

        $r6 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod POST>;

        $r5 = r1.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseExtractor headersExtractor>;

        $r7 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)>(r3, $r6, $r0, $r5, r4);

        r8 = (org.springframework.http.HttpHeaders) $r7;

        $r9 = virtualinvoke r8.<org.springframework.http.HttpHeaders: java.net.URI getLocation()>();

        return $r9;
    }

    public java.net.URI postForLocation(java.net.URI, java.lang.Object) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        org.springframework.web.client.ResponseExtractor $r4;
        org.springframework.http.HttpHeaders r7;
        org.springframework.http.HttpMethod $r5;
        java.lang.Object r2, $r6;
        java.net.URI r3, $r8;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r3 := @parameter0: java.net.URI;

        r2 := @parameter1: java.lang.Object;

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, null);

        $r5 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod POST>;

        $r4 = r1.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseExtractor headersExtractor>;

        $r6 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)>(r3, $r5, $r0, $r4);

        r7 = (org.springframework.http.HttpHeaders) $r6;

        $r8 = virtualinvoke r7.<org.springframework.http.HttpHeaders: java.net.URI getLocation()>();

        return $r8;
    }

    public transient java.lang.Object postForObject(java.lang.String, java.lang.Object, java.lang.Class, java.lang.Object[]) throws org.springframework.web.client.RestClientException
    {
        java.lang.Object[] r8;
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        org.springframework.http.HttpMethod $r9;
        java.util.List $r5;
        org.springframework.web.client.HttpMessageConverterExtractor $r4;
        java.lang.Object r2, $r10;
        java.lang.Class r3;
        org.apache.commons.logging.Log $r6;
        java.lang.String r7;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r7 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Class;

        r8 := @parameter3: java.lang.Object[];

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,java.lang.Class,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, r3, null);

        $r4 = new org.springframework.web.client.HttpMessageConverterExtractor;

        $r5 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.util.List getMessageConverters()>();

        $r6 = r1.<org.springframework.web.client.RestTemplate: org.apache.commons.logging.Log logger>;

        specialinvoke $r4.<org.springframework.web.client.HttpMessageConverterExtractor: void <init>(java.lang.Class,java.util.List,org.apache.commons.logging.Log)>(r3, $r5, $r6);

        $r9 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod POST>;

        $r10 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])>(r7, $r9, $r0, $r4, r8);

        return $r10;
    }

    public java.lang.Object postForObject(java.lang.String, java.lang.Object, java.lang.Class, java.util.Map) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        org.springframework.http.HttpMethod $r9;
        java.util.List $r5;
        java.util.Map r8;
        org.springframework.web.client.HttpMessageConverterExtractor $r4;
        java.lang.Object r2, $r10;
        java.lang.Class r3;
        org.apache.commons.logging.Log $r6;
        java.lang.String r7;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r7 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Class;

        r8 := @parameter3: java.util.Map;

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,java.lang.Class,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, r3, null);

        $r4 = new org.springframework.web.client.HttpMessageConverterExtractor;

        $r5 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.util.List getMessageConverters()>();

        $r6 = r1.<org.springframework.web.client.RestTemplate: org.apache.commons.logging.Log logger>;

        specialinvoke $r4.<org.springframework.web.client.HttpMessageConverterExtractor: void <init>(java.lang.Class,java.util.List,org.apache.commons.logging.Log)>(r3, $r5, $r6);

        $r9 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod POST>;

        $r10 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)>(r7, $r9, $r0, $r4, r8);

        return $r10;
    }

    public java.lang.Object postForObject(java.net.URI, java.lang.Object, java.lang.Class) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        org.springframework.http.HttpMethod $r7;
        java.util.List $r5;
        org.springframework.web.client.HttpMessageConverterExtractor $r4;
        java.lang.Object r2, $r8;
        java.lang.Class r3;
        java.net.URI r6;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r6 := @parameter0: java.net.URI;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Class;

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,java.lang.Class,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, r3, null);

        $r4 = new org.springframework.web.client.HttpMessageConverterExtractor;

        $r5 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.util.List getMessageConverters()>();

        specialinvoke $r4.<org.springframework.web.client.HttpMessageConverterExtractor: void <init>(java.lang.Class,java.util.List)>(r3, $r5);

        $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod POST>;

        $r8 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)>(r6, $r7, $r0, $r4);

        return $r8;
    }

    public transient org.springframework.http.ResponseEntity postForEntity(java.lang.String, java.lang.Object, java.lang.Class, java.lang.Object[]) throws org.springframework.web.client.RestClientException
    {
        java.lang.Object[] r6;
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        org.springframework.http.HttpMethod $r7;
        org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor $r4;
        java.lang.Object r2, $r8;
        java.lang.Class r3;
        org.springframework.http.ResponseEntity $r9;
        java.lang.String r5;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r5 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Class;

        r6 := @parameter3: java.lang.Object[];

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,java.lang.Class,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, r3, null);

        $r4 = new org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor;

        specialinvoke $r4.<org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class)>(r1, r3);

        $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod POST>;

        $r8 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])>(r5, $r7, $r0, $r4, r6);

        $r9 = (org.springframework.http.ResponseEntity) $r8;

        return $r9;
    }

    public org.springframework.http.ResponseEntity postForEntity(java.lang.String, java.lang.Object, java.lang.Class, java.util.Map) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        org.springframework.http.HttpMethod $r7;
        org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor $r4;
        java.util.Map r6;
        java.lang.Object r2, $r8;
        java.lang.Class r3;
        org.springframework.http.ResponseEntity $r9;
        java.lang.String r5;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r5 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Class;

        r6 := @parameter3: java.util.Map;

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,java.lang.Class,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, r3, null);

        $r4 = new org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor;

        specialinvoke $r4.<org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class)>(r1, r3);

        $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod POST>;

        $r8 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)>(r5, $r7, $r0, $r4, r6);

        $r9 = (org.springframework.http.ResponseEntity) $r8;

        return $r9;
    }

    public org.springframework.http.ResponseEntity postForEntity(java.net.URI, java.lang.Object, java.lang.Class) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        org.springframework.http.HttpMethod $r6;
        org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor $r4;
        java.lang.Object r2, $r7;
        java.lang.Class r3;
        org.springframework.http.ResponseEntity $r8;
        java.net.URI r5;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r5 := @parameter0: java.net.URI;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Class;

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,java.lang.Class,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, r3, null);

        $r4 = new org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor;

        specialinvoke $r4.<org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class)>(r1, r3);

        $r6 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod POST>;

        $r7 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)>(r5, $r6, $r0, $r4);

        $r8 = (org.springframework.http.ResponseEntity) $r7;

        return $r8;
    }

    public transient void put(java.lang.String, java.lang.Object, java.lang.Object[]) throws org.springframework.web.client.RestClientException
    {
        java.lang.Object[] r4;
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        org.springframework.http.HttpMethod $r5;
        java.lang.Object r2;
        java.lang.String r3;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object[];

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, null);

        $r5 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod PUT>;

        virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])>(r3, $r5, $r0, null, r4);

        return;
    }

    public void put(java.lang.String, java.lang.Object, java.util.Map) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        java.util.Map r4;
        org.springframework.http.HttpMethod $r5;
        java.lang.Object r2;
        java.lang.String r3;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.util.Map;

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, null);

        $r5 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod PUT>;

        virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)>(r3, $r5, $r0, null, r4);

        return;
    }

    public void put(java.net.URI, java.lang.Object) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        org.springframework.http.HttpMethod $r4;
        java.lang.Object r2;
        java.net.URI r3;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r3 := @parameter0: java.net.URI;

        r2 := @parameter1: java.lang.Object;

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, null);

        $r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod PUT>;

        virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)>(r3, $r4, $r0, null);

        return;
    }

    public transient void delete(java.lang.String, java.lang.Object[]) throws org.springframework.web.client.RestClientException
    {
        java.lang.Object[] r2;
        org.springframework.http.HttpMethod $r3;
        java.lang.String r1;
        org.springframework.web.client.RestTemplate r0;

        r0 := @this: org.springframework.web.client.RestTemplate;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod DELETE>;

        virtualinvoke r0.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])>(r1, $r3, null, null, r2);

        return;
    }

    public void delete(java.lang.String, java.util.Map) throws org.springframework.web.client.RestClientException
    {
        java.util.Map r2;
        org.springframework.http.HttpMethod $r3;
        java.lang.String r1;
        org.springframework.web.client.RestTemplate r0;

        r0 := @this: org.springframework.web.client.RestTemplate;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r3 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod DELETE>;

        virtualinvoke r0.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)>(r1, $r3, null, null, r2);

        return;
    }

    public void delete(java.net.URI) throws org.springframework.web.client.RestClientException
    {
        org.springframework.http.HttpMethod $r2;
        java.net.URI r1;
        org.springframework.web.client.RestTemplate r0;

        r0 := @this: org.springframework.web.client.RestTemplate;

        r1 := @parameter0: java.net.URI;

        $r2 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod DELETE>;

        virtualinvoke r0.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)>(r1, $r2, null, null);

        return;
    }

    public transient java.util.Set optionsForAllow(java.lang.String, java.lang.Object[]) throws org.springframework.web.client.RestClientException
    {
        java.lang.Object[] r2;
        org.springframework.web.client.ResponseExtractor $r3;
        org.springframework.http.HttpHeaders r6;
        org.springframework.http.HttpMethod $r4;
        java.util.Set $r7;
        java.lang.Object $r5;
        java.lang.String r1;
        org.springframework.web.client.RestTemplate r0;

        r0 := @this: org.springframework.web.client.RestTemplate;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>;

        $r3 = r0.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseExtractor headersExtractor>;

        $r5 = virtualinvoke r0.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])>(r1, $r4, null, $r3, r2);

        r6 = (org.springframework.http.HttpHeaders) $r5;

        $r7 = virtualinvoke r6.<org.springframework.http.HttpHeaders: java.util.Set getAllow()>();

        return $r7;
    }

    public java.util.Set optionsForAllow(java.lang.String, java.util.Map) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.ResponseExtractor $r3;
        org.springframework.http.HttpHeaders r6;
        org.springframework.http.HttpMethod $r4;
        java.util.Set $r7;
        java.util.Map r2;
        java.lang.Object $r5;
        java.lang.String r1;
        org.springframework.web.client.RestTemplate r0;

        r0 := @this: org.springframework.web.client.RestTemplate;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>;

        $r3 = r0.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseExtractor headersExtractor>;

        $r5 = virtualinvoke r0.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)>(r1, $r4, null, $r3, r2);

        r6 = (org.springframework.http.HttpHeaders) $r5;

        $r7 = virtualinvoke r6.<org.springframework.http.HttpHeaders: java.util.Set getAllow()>();

        return $r7;
    }

    public java.util.Set optionsForAllow(java.net.URI) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.ResponseExtractor $r2;
        org.springframework.http.HttpHeaders r5;
        org.springframework.http.HttpMethod $r3;
        java.util.Set $r6;
        java.lang.Object $r4;
        java.net.URI r1;
        org.springframework.web.client.RestTemplate r0;

        r0 := @this: org.springframework.web.client.RestTemplate;

        r1 := @parameter0: java.net.URI;

        $r3 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>;

        $r2 = r0.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseExtractor headersExtractor>;

        $r4 = virtualinvoke r0.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)>(r1, $r3, null, $r2);

        r5 = (org.springframework.http.HttpHeaders) $r4;

        $r6 = virtualinvoke r5.<org.springframework.http.HttpHeaders: java.util.Set getAllow()>();

        return $r6;
    }

    public transient org.springframework.http.ResponseEntity exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object[]) throws org.springframework.web.client.RestClientException
    {
        java.lang.Object[] r7;
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        org.springframework.http.HttpMethod r6;
        org.springframework.http.HttpEntity r2;
        org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor $r4;
        java.lang.Class r3;
        java.lang.Object $r8;
        org.springframework.http.ResponseEntity $r9;
        java.lang.String r5;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: org.springframework.http.HttpMethod;

        r2 := @parameter2: org.springframework.http.HttpEntity;

        r3 := @parameter3: java.lang.Class;

        r7 := @parameter4: java.lang.Object[];

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,java.lang.Class,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, r3, null);

        $r4 = new org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor;

        specialinvoke $r4.<org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class)>(r1, r3);

        $r8 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])>(r5, r6, $r0, $r4, r7);

        $r9 = (org.springframework.http.ResponseEntity) $r8;

        return $r9;
    }

    public org.springframework.http.ResponseEntity exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity, java.lang.Class, java.util.Map) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        org.springframework.http.HttpMethod r6;
        org.springframework.http.HttpEntity r2;
        org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor $r4;
        java.util.Map r7;
        java.lang.Class r3;
        java.lang.Object $r8;
        org.springframework.http.ResponseEntity $r9;
        java.lang.String r5;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: org.springframework.http.HttpMethod;

        r2 := @parameter2: org.springframework.http.HttpEntity;

        r3 := @parameter3: java.lang.Class;

        r7 := @parameter4: java.util.Map;

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,java.lang.Class,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, r3, null);

        $r4 = new org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor;

        specialinvoke $r4.<org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class)>(r1, r3);

        $r8 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)>(r5, r6, $r0, $r4, r7);

        $r9 = (org.springframework.http.ResponseEntity) $r8;

        return $r9;
    }

    public org.springframework.http.ResponseEntity exchange(java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity, java.lang.Class) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.RestTemplate$HttpEntityRequestCallback $r0;
        org.springframework.http.HttpMethod r6;
        org.springframework.http.HttpEntity r2;
        org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor $r4;
        java.lang.Class r3;
        java.lang.Object $r7;
        org.springframework.http.ResponseEntity $r8;
        java.net.URI r5;
        org.springframework.web.client.RestTemplate r1;

        r1 := @this: org.springframework.web.client.RestTemplate;

        r5 := @parameter0: java.net.URI;

        r6 := @parameter1: org.springframework.http.HttpMethod;

        r2 := @parameter2: org.springframework.http.HttpEntity;

        r3 := @parameter3: java.lang.Class;

        $r0 = new org.springframework.web.client.RestTemplate$HttpEntityRequestCallback;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpEntityRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Object,java.lang.Class,org.springframework.web.client.RestTemplate$HttpEntityRequestCallback)>(r1, r2, r3, null);

        $r4 = new org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor;

        specialinvoke $r4.<org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class)>(r1, r3);

        $r7 = virtualinvoke r1.<org.springframework.web.client.RestTemplate: java.lang.Object execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)>(r5, r6, $r0, $r4);

        $r8 = (org.springframework.http.ResponseEntity) $r7;

        return $r8;
    }

    public transient java.lang.Object execute(java.lang.String, org.springframework.http.HttpMethod, org.springframework.web.client.RequestCallback, org.springframework.web.client.ResponseExtractor, java.lang.Object[]) throws org.springframework.web.client.RestClientException
    {
        java.lang.Object[] r2;
        org.springframework.web.client.ResponseExtractor r7;
        org.springframework.http.HttpMethod r5;
        org.springframework.web.client.RequestCallback r6;
        org.springframework.web.client.RestTemplate$HttpUrlTemplate $r0;
        java.lang.Object $r8;
        java.lang.String r1;
        java.net.URI $r3;
        org.springframework.web.client.RestTemplate r4;

        r4 := @this: org.springframework.web.client.RestTemplate;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: org.springframework.http.HttpMethod;

        r6 := @parameter2: org.springframework.web.client.RequestCallback;

        r7 := @parameter3: org.springframework.web.client.ResponseExtractor;

        r2 := @parameter4: java.lang.Object[];

        $r0 = new org.springframework.web.client.RestTemplate$HttpUrlTemplate;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpUrlTemplate: void <init>(java.lang.String)>(r1);

        $r3 = virtualinvoke $r0.<org.springframework.web.util.UriTemplate: java.net.URI expand(java.lang.Object[])>(r2);

        $r8 = virtualinvoke r4.<org.springframework.web.client.RestTemplate: java.lang.Object doExecute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)>($r3, r5, r6, r7);

        return $r8;
    }

    public java.lang.Object execute(java.lang.String, org.springframework.http.HttpMethod, org.springframework.web.client.RequestCallback, org.springframework.web.client.ResponseExtractor, java.util.Map) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.ResponseExtractor r7;
        org.springframework.http.HttpMethod r5;
        org.springframework.web.client.RequestCallback r6;
        org.springframework.web.client.RestTemplate$HttpUrlTemplate $r0;
        java.util.Map r2;
        java.lang.Object $r8;
        java.lang.String r1;
        java.net.URI $r3;
        org.springframework.web.client.RestTemplate r4;

        r4 := @this: org.springframework.web.client.RestTemplate;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: org.springframework.http.HttpMethod;

        r6 := @parameter2: org.springframework.web.client.RequestCallback;

        r7 := @parameter3: org.springframework.web.client.ResponseExtractor;

        r2 := @parameter4: java.util.Map;

        $r0 = new org.springframework.web.client.RestTemplate$HttpUrlTemplate;

        specialinvoke $r0.<org.springframework.web.client.RestTemplate$HttpUrlTemplate: void <init>(java.lang.String)>(r1);

        $r3 = virtualinvoke $r0.<org.springframework.web.util.UriTemplate: java.net.URI expand(java.util.Map)>(r2);

        $r8 = virtualinvoke r4.<org.springframework.web.client.RestTemplate: java.lang.Object doExecute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)>($r3, r5, r6, r7);

        return $r8;
    }

    public java.lang.Object execute(java.net.URI, org.springframework.http.HttpMethod, org.springframework.web.client.RequestCallback, org.springframework.web.client.ResponseExtractor) throws org.springframework.web.client.RestClientException
    {
        org.springframework.web.client.ResponseExtractor r4;
        org.springframework.http.HttpMethod r2;
        java.lang.Object $r5;
        java.net.URI r1;
        org.springframework.web.client.RestTemplate r0;
        org.springframework.web.client.RequestCallback r3;

        r0 := @this: org.springframework.web.client.RestTemplate;

        r1 := @parameter0: java.net.URI;

        r2 := @parameter1: org.springframework.http.HttpMethod;

        r3 := @parameter2: org.springframework.web.client.RequestCallback;

        r4 := @parameter3: org.springframework.web.client.ResponseExtractor;

        $r5 = virtualinvoke r0.<org.springframework.web.client.RestTemplate: java.lang.Object doExecute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)>(r1, r2, r3, r4);

        return $r5;
    }

    protected java.lang.Object doExecute(java.net.URI, org.springframework.http.HttpMethod, org.springframework.web.client.RequestCallback, org.springframework.web.client.ResponseExtractor) throws org.springframework.web.client.RestClientException
    {
        java.lang.Throwable $r9;
        org.springframework.http.client.ClientHttpRequest $r3;
        org.springframework.web.client.ResponseErrorHandler $r6;
        java.net.URI r0;
        java.lang.String $r13, $r15;
        org.springframework.web.client.RestTemplate r2;
        org.springframework.http.client.ClientHttpResponse $r5, r16;
        boolean $z0;
        org.springframework.web.client.ResponseExtractor r7;
        org.springframework.http.HttpMethod r1;
        java.io.IOException $r10;
        org.springframework.web.client.ResourceAccessException $r11;
        org.springframework.web.client.RequestCallback r4;
        java.lang.Object $r8;
        java.lang.StringBuilder $r12, $r14;

        r2 := @this: org.springframework.web.client.RestTemplate;

        r0 := @parameter0: java.net.URI;

        r1 := @parameter1: org.springframework.http.HttpMethod;

        r4 := @parameter2: org.springframework.web.client.RequestCallback;

        r7 := @parameter3: org.springframework.web.client.ResponseExtractor;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'url\' must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "\'method\' must not be null");

        r16 = null;

     label01:
        $r3 = virtualinvoke r2.<org.springframework.web.client.RestTemplate: org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI,org.springframework.http.HttpMethod)>(r0, r1);

        if r4 == null goto label02;

        interfaceinvoke r4.<org.springframework.web.client.RequestCallback: void doWithRequest(org.springframework.http.client.ClientHttpRequest)>($r3);

     label02:
        $r5 = interfaceinvoke $r3.<org.springframework.http.client.ClientHttpRequest: org.springframework.http.client.ClientHttpResponse execute()>();

        r16 = $r5;

        $r6 = virtualinvoke r2.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseErrorHandler getErrorHandler()>();

        $z0 = interfaceinvoke $r6.<org.springframework.web.client.ResponseErrorHandler: boolean hasError(org.springframework.http.client.ClientHttpResponse)>($r5);

        if $z0 != 0 goto label03;

        specialinvoke r2.<org.springframework.web.client.RestTemplate: void logResponseStatus(org.springframework.http.HttpMethod,java.net.URI,org.springframework.http.client.ClientHttpResponse)>(r1, r0, $r5);

        goto label04;

     label03:
        specialinvoke r2.<org.springframework.web.client.RestTemplate: void handleResponseError(org.springframework.http.HttpMethod,java.net.URI,org.springframework.http.client.ClientHttpResponse)>(r1, r0, $r5);

     label04:
        if r7 == null goto label07;

        $r8 = interfaceinvoke r7.<org.springframework.web.client.ResponseExtractor: java.lang.Object extractData(org.springframework.http.client.ClientHttpResponse)>($r5);

     label05:
        if $r5 == null goto label06;

        interfaceinvoke $r5.<org.springframework.http.client.ClientHttpResponse: void close()>();

     label06:
        return $r8;

     label07:
        if $r5 == null goto label08;

        interfaceinvoke $r5.<org.springframework.http.client.ClientHttpResponse: void close()>();

     label08:
        return null;

     label09:
        $r10 := @caughtexception;

        $r11 = new org.springframework.web.client.ResourceAccessException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("I/O error: ");

        $r13 = virtualinvoke $r10.<java.io.IOException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.springframework.web.client.ResourceAccessException: void <init>(java.lang.String,java.io.IOException)>($r15, $r10);

        throw $r11;

     label10:
        $r9 := @caughtexception;

        if r16 == null goto label11;

        interfaceinvoke r16.<org.springframework.http.client.ClientHttpResponse: void close()>();

     label11:
        throw $r9;

        catch java.io.IOException from label01 to label05 with label09;
        catch java.lang.Throwable from label01 to label05 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    private void logResponseStatus(org.springframework.http.HttpMethod, java.net.URI, org.springframework.http.client.ClientHttpResponse)
    {
        java.lang.String $r5, $r6, $r15, $r18;
        java.net.URI r8;
        org.springframework.web.client.RestTemplate r0;
        org.springframework.http.client.ClientHttpResponse r11;
        boolean $z0;
        org.springframework.http.HttpMethod r3;
        java.io.IOException $r19;
        org.springframework.http.HttpStatus $r12;
        org.apache.commons.logging.Log $r1, $r4;
        java.lang.StringBuilder $r2, $r7, $r9, $r10, $r13, $r14, $r16, $r17;

        r0 := @this: org.springframework.web.client.RestTemplate;

        r3 := @parameter0: org.springframework.http.HttpMethod;

        r8 := @parameter1: java.net.URI;

        r11 := @parameter2: org.springframework.http.client.ClientHttpResponse;

        $r1 = r0.<org.springframework.web.client.RestTemplate: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label4;

     label1:
        $r4 = r0.<org.springframework.web.client.RestTemplate: org.apache.commons.logging.Log logger>;

        $r2 = new java.lang.StringBuilder;

        $r5 = virtualinvoke r3.<org.springframework.http.HttpMethod: java.lang.String name()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" request for \"");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" resulted in ");

        $r12 = interfaceinvoke r11.<org.springframework.http.client.ClientHttpResponse: org.springframework.http.HttpStatus getStatusCode()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r15 = interfaceinvoke r11.<org.springframework.http.client.ClientHttpResponse: java.lang.String getStatusText()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r18);

     label2:
        goto label4;

     label3:
        $r19 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void handleResponseError(org.springframework.http.HttpMethod, java.net.URI, org.springframework.http.client.ClientHttpResponse) throws java.io.IOException
    {
        org.springframework.web.client.ResponseErrorHandler $r20;
        java.lang.String $r6, $r7, $r15, $r18;
        java.net.URI r9;
        org.springframework.web.client.RestTemplate r0;
        org.springframework.http.client.ClientHttpResponse r2;
        boolean $z0;
        org.springframework.http.HttpMethod r4;
        java.io.IOException $r19;
        org.springframework.http.HttpStatus $r12;
        org.apache.commons.logging.Log $r1, $r5;
        java.lang.StringBuilder $r3, $r8, $r10, $r11, $r13, $r14, $r16, $r17;

        r0 := @this: org.springframework.web.client.RestTemplate;

        r4 := @parameter0: org.springframework.http.HttpMethod;

        r9 := @parameter1: java.net.URI;

        r2 := @parameter2: org.springframework.http.client.ClientHttpResponse;

        $r1 = r0.<org.springframework.web.client.RestTemplate: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label4;

     label1:
        $r5 = r0.<org.springframework.web.client.RestTemplate: org.apache.commons.logging.Log logger>;

        $r3 = new java.lang.StringBuilder;

        $r6 = virtualinvoke r4.<org.springframework.http.HttpMethod: java.lang.String name()>();

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" request for \"");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" resulted in ");

        $r12 = interfaceinvoke r2.<org.springframework.http.client.ClientHttpResponse: org.springframework.http.HttpStatus getStatusCode()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r15 = interfaceinvoke r2.<org.springframework.http.client.ClientHttpResponse: java.lang.String getStatusText()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("); invoking error handler");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r18);

     label2:
        goto label4;

     label3:
        $r19 := @caughtexception;

     label4:
        $r20 = virtualinvoke r0.<org.springframework.web.client.RestTemplate: org.springframework.web.client.ResponseErrorHandler getErrorHandler()>();

        interfaceinvoke $r20.<org.springframework.web.client.ResponseErrorHandler: void handleError(org.springframework.http.client.ClientHttpResponse)>(r2);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static org.apache.commons.logging.Log access$0(org.springframework.web.client.RestTemplate)
    {
        org.apache.commons.logging.Log $r1;
        org.springframework.web.client.RestTemplate r0;

        r0 := @parameter0: org.springframework.web.client.RestTemplate;

        $r1 = r0.<org.springframework.http.client.support.HttpAccessor: org.apache.commons.logging.Log logger>;

        return $r1;
    }
}
