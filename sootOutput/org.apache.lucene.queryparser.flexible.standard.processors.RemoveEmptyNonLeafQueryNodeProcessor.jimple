public class org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor extends org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl
{
    private java.util.LinkedList childrenBuffer;

    public void <init>()
    {
        java.util.LinkedList $r1;
        org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor: java.util.LinkedList childrenBuffer> = $r1;

        return;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode process(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.util.List $r2;
        org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor r0;
        org.apache.lucene.queryparser.flexible.core.nodes.MatchNoDocsQueryNode $r3;
        int $i0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1, r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor;

        r4 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r1 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode process(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r4);

        $z0 = interfaceinvoke $r1.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: boolean isLeaf()>();

        if $z0 != 0 goto label2;

        $r2 = interfaceinvoke $r1.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.util.List getChildren()>();

        if $r2 == null goto label1;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r3 = new org.apache.lucene.queryparser.flexible.core.nodes.MatchNoDocsQueryNode;

        specialinvoke $r3.<org.apache.lucene.queryparser.flexible.core.nodes.MatchNoDocsQueryNode: void <init>()>();

        return $r3;

     label2:
        return $r1;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        return r0;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        return r0;
    }

    protected java.util.List setChildrenOrder(java.util.List) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.lang.Throwable $r10;
        java.util.Iterator $r1;
        org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor r2;
        java.util.List r0, $r8;
        int $i0;
        java.lang.Object $r5;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r6;
        java.util.LinkedList $r3, $r4, $r7, $r9, $r11;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor;

        r0 := @parameter0: java.util.List;

     label01:
        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r5 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r5;

        $z1 = interfaceinvoke r6.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: boolean isLeaf()>();

        if $z1 != 0 goto label04;

        $r8 = interfaceinvoke r6.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.util.List getChildren()>();

        if $r8 == null goto label03;

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i0 <= 0 goto label03;

        $r9 = r2.<org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor: java.util.LinkedList childrenBuffer>;

        virtualinvoke $r9.<java.util.LinkedList: boolean add(java.lang.Object)>(r6);

     label03:
        goto label05;

     label04:
        $r7 = r2.<org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor: java.util.LinkedList childrenBuffer>;

        virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>(r6);

     label05:
        goto label02;

     label06:
        interfaceinvoke r0.<java.util.List: void clear()>();

        $r3 = r2.<org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor: java.util.LinkedList childrenBuffer>;

        interfaceinvoke r0.<java.util.List: boolean addAll(java.util.Collection)>($r3);

     label07:
        $r4 = r2.<org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor: java.util.LinkedList childrenBuffer>;

        virtualinvoke $r4.<java.util.LinkedList: void clear()>();

        goto label10;

     label08:
        $r10 := @caughtexception;

     label09:
        $r11 = r2.<org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor: java.util.LinkedList childrenBuffer>;

        virtualinvoke $r11.<java.util.LinkedList: void clear()>();

        throw $r10;

     label10:
        return r0;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }
}
