public class com.jhlabs.image.GradientFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    public static final int LINEAR;
    public static final int BILINEAR;
    public static final int RADIAL;
    public static final int CONICAL;
    public static final int BICONICAL;
    public static final int SQUARE;
    public static final int INT_LINEAR;
    public static final int INT_CIRCLE_UP;
    public static final int INT_CIRCLE_DOWN;
    public static final int INT_SMOOTH;
    private float angle;
    private int color1;
    private int color2;
    private java.awt.Point p1;
    private java.awt.Point p2;
    private boolean repeat;
    private float x1;
    private float y1;
    private float dx;
    private float dy;
    private com.jhlabs.image.Colormap colormap;
    private int type;
    private int interpolation;
    private int paintMode;

    public void <init>()
    {
        com.jhlabs.image.GradientFilter r0;
        int $i1;
        java.awt.Point $r3, $r4;

        r0 := @this: com.jhlabs.image.GradientFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.GradientFilter: float angle> = 0.0F;

        r0.<com.jhlabs.image.GradientFilter: int color1> = -16777216;

        $i1 = (int) -1;

        r0.<com.jhlabs.image.GradientFilter: int color2> = $i1;

        $r3 = new java.awt.Point;

        specialinvoke $r3.<java.awt.Point: void <init>(int,int)>(0, 0);

        r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1> = $r3;

        $r4 = new java.awt.Point;

        specialinvoke $r4.<java.awt.Point: void <init>(int,int)>(64, 64);

        r0.<com.jhlabs.image.GradientFilter: java.awt.Point p2> = $r4;

        r0.<com.jhlabs.image.GradientFilter: boolean repeat> = 0;

        r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap> = null;

        r0.<com.jhlabs.image.GradientFilter: int interpolation> = 0;

        r0.<com.jhlabs.image.GradientFilter: int paintMode> = 1;

        return;
    }

    public void <init>(java.awt.Point, java.awt.Point, int, int, boolean, int, int)
    {
        com.jhlabs.image.LinearColormap $r8;
        com.jhlabs.image.GradientFilter r0;
        java.awt.Point r3, r4, $r6, $r7;
        int i0, i1, i2, i3, $i5;
        boolean z0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        r3 := @parameter0: java.awt.Point;

        r4 := @parameter1: java.awt.Point;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.GradientFilter: float angle> = 0.0F;

        r0.<com.jhlabs.image.GradientFilter: int color1> = -16777216;

        $i5 = (int) -1;

        r0.<com.jhlabs.image.GradientFilter: int color2> = $i5;

        $r6 = new java.awt.Point;

        specialinvoke $r6.<java.awt.Point: void <init>(int,int)>(0, 0);

        r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1> = $r6;

        $r7 = new java.awt.Point;

        specialinvoke $r7.<java.awt.Point: void <init>(int,int)>(64, 64);

        r0.<com.jhlabs.image.GradientFilter: java.awt.Point p2> = $r7;

        r0.<com.jhlabs.image.GradientFilter: boolean repeat> = 0;

        r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap> = null;

        r0.<com.jhlabs.image.GradientFilter: int interpolation> = 0;

        r0.<com.jhlabs.image.GradientFilter: int paintMode> = 1;

        r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1> = r3;

        r0.<com.jhlabs.image.GradientFilter: java.awt.Point p2> = r4;

        r0.<com.jhlabs.image.GradientFilter: int color1> = i0;

        r0.<com.jhlabs.image.GradientFilter: int color2> = i1;

        r0.<com.jhlabs.image.GradientFilter: boolean repeat> = z0;

        r0.<com.jhlabs.image.GradientFilter: int type> = i2;

        r0.<com.jhlabs.image.GradientFilter: int interpolation> = i3;

        $r8 = new com.jhlabs.image.LinearColormap;

        specialinvoke $r8.<com.jhlabs.image.LinearColormap: void <init>(int,int)>(i0, i1);

        r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap> = $r8;

        return;
    }

    public void setPoint1(java.awt.Point)
    {
        java.awt.Point r1;
        com.jhlabs.image.GradientFilter r0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        r1 := @parameter0: java.awt.Point;

        r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1> = r1;

        return;
    }

    public java.awt.Point getPoint1()
    {
        java.awt.Point $r1;
        com.jhlabs.image.GradientFilter r0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        $r1 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        return $r1;
    }

    public void setPoint2(java.awt.Point)
    {
        java.awt.Point r1;
        com.jhlabs.image.GradientFilter r0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        r1 := @parameter0: java.awt.Point;

        r0.<com.jhlabs.image.GradientFilter: java.awt.Point p2> = r1;

        return;
    }

    public java.awt.Point getPoint2()
    {
        java.awt.Point $r1;
        com.jhlabs.image.GradientFilter r0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        $r1 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p2>;

        return $r1;
    }

    public void setType(int)
    {
        int i0;
        com.jhlabs.image.GradientFilter r0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.GradientFilter: int type> = i0;

        return;
    }

    public int getType()
    {
        int $i0;
        com.jhlabs.image.GradientFilter r0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        $i0 = r0.<com.jhlabs.image.GradientFilter: int type>;

        return $i0;
    }

    public void setInterpolation(int)
    {
        int i0;
        com.jhlabs.image.GradientFilter r0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.GradientFilter: int interpolation> = i0;

        return;
    }

    public int getInterpolation()
    {
        int $i0;
        com.jhlabs.image.GradientFilter r0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        $i0 = r0.<com.jhlabs.image.GradientFilter: int interpolation>;

        return $i0;
    }

    public void setAngle(float)
    {
        com.jhlabs.image.GradientFilter r0;
        java.awt.Point $r1;
        int $i0, $i1;
        float f0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: com.jhlabs.image.GradientFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.GradientFilter: float angle> = f0;

        $r1 = new java.awt.Point;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        $d2 = 64.0 * $d1;

        $i0 = (int) $d2;

        $d3 = (double) f0;

        $d4 = staticinvoke <java.lang.Math: double sin(double)>($d3);

        $d5 = 64.0 * $d4;

        $i1 = (int) $d5;

        specialinvoke $r1.<java.awt.Point: void <init>(int,int)>($i0, $i1);

        r0.<com.jhlabs.image.GradientFilter: java.awt.Point p2> = $r1;

        return;
    }

    public float getAngle()
    {
        float $f0;
        com.jhlabs.image.GradientFilter r0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        $f0 = r0.<com.jhlabs.image.GradientFilter: float angle>;

        return $f0;
    }

    public void setColormap(com.jhlabs.image.Colormap)
    {
        com.jhlabs.image.Colormap r1;
        com.jhlabs.image.GradientFilter r0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        r1 := @parameter0: com.jhlabs.image.Colormap;

        r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap> = r1;

        return;
    }

    public com.jhlabs.image.Colormap getColormap()
    {
        com.jhlabs.image.Colormap $r1;
        com.jhlabs.image.GradientFilter r0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        $r1 = r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap>;

        return $r1;
    }

    public void setPaintMode(int)
    {
        int i0;
        com.jhlabs.image.GradientFilter r0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.GradientFilter: int paintMode> = i0;

        return;
    }

    public int getPaintMode()
    {
        int $i0;
        com.jhlabs.image.GradientFilter r0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        $i0 = r0.<com.jhlabs.image.GradientFilter: int paintMode>;

        return $i0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.Point $r2, $r3, $r4, $r5, $r6, $r7;
        byte $b4, $b11;
        int[] $r9;
        boolean $z0;
        com.jhlabs.image.GradientFilter r1;
        java.awt.image.BufferedImage r0, r8;
        float $f0, $f1, f2, f3, f4, f5, $f6, f7, $f8, f9, $f10, $f11, $f12;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, i12, $i13, $i14;

        r1 := @this: com.jhlabs.image.GradientFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r8 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r8 != null goto label01;

        r8 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label01:
        $r2 = r1.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i2 = $r2.<java.awt.Point: int x>;

        $f0 = (float) $i2;

        f2 = $f0;

        $r3 = r1.<com.jhlabs.image.GradientFilter: java.awt.Point p2>;

        $i3 = $r3.<java.awt.Point: int x>;

        $f1 = (float) $i3;

        f3 = $f1;

        $b4 = $f0 cmpl $f1;

        $i13 = (int) $b4;

        if $i13 <= 0 goto label02;

        $i8 = r1.<com.jhlabs.image.GradientFilter: int type>;

        if $i8 == 2 goto label02;

        f2 = $f1;

        f3 = $f0;

        $r6 = r1.<com.jhlabs.image.GradientFilter: java.awt.Point p2>;

        $i9 = $r6.<java.awt.Point: int y>;

        f4 = (float) $i9;

        $r7 = r1.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i10 = $r7.<java.awt.Point: int y>;

        f5 = (float) $i10;

        goto label03;

     label02:
        $r4 = r1.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i5 = $r4.<java.awt.Point: int y>;

        f4 = (float) $i5;

        $r5 = r1.<com.jhlabs.image.GradientFilter: java.awt.Point p2>;

        $i6 = $r5.<java.awt.Point: int y>;

        f5 = (float) $i6;

     label03:
        $f6 = f3 - f2;

        f7 = $f6;

        $f8 = f5 - f4;

        f9 = $f8;

        $f10 = $f6 * $f6;

        $f11 = $f8 * $f8;

        $f12 = $f10 + $f11;

        r1.<com.jhlabs.image.GradientFilter: float x1> = f2;

        r1.<com.jhlabs.image.GradientFilter: float y1> = f4;

        $b11 = $f12 cmpl 1.4E-45F;

        $i14 = (int) $b11;

        if $i14 < 0 goto label04;

        f7 = $f6 / $f12;

        f9 = $f8 / $f12;

        $z0 = r1.<com.jhlabs.image.GradientFilter: boolean repeat>;

        if $z0 == 0 goto label04;

        f7 = f7 % 1.0F;

        f9 = f9 % 1.0F;

     label04:
        r1.<com.jhlabs.image.GradientFilter: float dx> = f7;

        r1.<com.jhlabs.image.GradientFilter: float dy> = f9;

        $r9 = newarray (int)[$i0];

        i12 = 0;

     label05:
        if i12 >= $i1 goto label11;

        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, i12, $i0, 1, $r9);

        $i7 = r1.<com.jhlabs.image.GradientFilter: int type>;

        tableswitch($i7)
        {
            case 0: goto label06;
            case 1: goto label06;
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label08;
            case 5: goto label09;
            default: goto label10;
        };

     label06:
        specialinvoke r1.<com.jhlabs.image.GradientFilter: void linearGradient(int[],int,int,int)>($r9, i12, $i0, 1);

        goto label10;

     label07:
        specialinvoke r1.<com.jhlabs.image.GradientFilter: void radialGradient(int[],int,int,int)>($r9, i12, $i0, 1);

        goto label10;

     label08:
        specialinvoke r1.<com.jhlabs.image.GradientFilter: void conicalGradient(int[],int,int,int)>($r9, i12, $i0, 1);

        goto label10;

     label09:
        specialinvoke r1.<com.jhlabs.image.GradientFilter: void squareGradient(int[],int,int,int)>($r9, i12, $i0, 1);

     label10:
        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r8, 0, i12, $i0, 1, $r9);

        i12 = i12 + 1;

        goto label05;

     label11:
        return r8;
    }

    private void repeatGradient(int[], int, int, float, float, float)
    {
        int[] r2;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, $i11;
        com.jhlabs.image.Colormap $r1, $r3;
        com.jhlabs.image.GradientFilter r0;
        float f0, $f1, $f2, f3, $f4, $f5, f6, f7;

        r0 := @this: com.jhlabs.image.GradientFilter;

        r2 := @parameter0: int[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        f6 := @parameter3: float;

        f3 := @parameter4: float;

        f0 := @parameter5: float;

        i6 = 0;

        i7 = 0;

     label1:
        if i7 >= i0 goto label6;

        f7 = f6;

        i8 = i1;

     label2:
        $i11 = (int) -1;

        i8 = i8 + $i11;

        if i8 < 0 goto label5;

        $i2 = r0.<com.jhlabs.image.GradientFilter: int type>;

        if $i2 != 1 goto label3;

        $r3 = r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap>;

        $f4 = staticinvoke <com.jhlabs.image.ImageMath: float triangle(float)>(f7);

        $f5 = specialinvoke r0.<com.jhlabs.image.GradientFilter: float map(float)>($f4);

        i9 = interfaceinvoke $r3.<com.jhlabs.image.Colormap: int getColor(float)>($f5);

        goto label4;

     label3:
        $r1 = r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap>;

        $f1 = staticinvoke <com.jhlabs.image.ImageMath: float mod(float,float)>(f7, 1.0F);

        $f2 = specialinvoke r0.<com.jhlabs.image.GradientFilter: float map(float)>($f1);

        i9 = interfaceinvoke $r1.<com.jhlabs.image.Colormap: int getColor(float)>($f2);

     label4:
        $i4 = r2[i6];

        $i3 = r0.<com.jhlabs.image.GradientFilter: int paintMode>;

        $i5 = staticinvoke <com.jhlabs.image.PixelUtils: int combinePixels(int,int,int)>(i9, $i4, $i3);

        r2[i6] = $i5;

        i6 = i6 + 1;

        f7 = f7 + f3;

        goto label2;

     label5:
        f6 = f6 + f0;

        i7 = i7 + 1;

        goto label1;

     label6:
        return;
    }

    private void singleGradient(int[], int, int, float, float, float)
    {
        byte $b2, $b12, $b16;
        int[] r2;
        com.jhlabs.image.GradientFilter r0;
        float f0, $f1, f2, $f3, $f4, $f5, f6, f7;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i13, i14, i15, i17, i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i28, $i30;
        com.jhlabs.image.Colormap $r1, $r3, $r4, $r5, $r6;
        double $d0, $d1, $d2;

        r0 := @this: com.jhlabs.image.GradientFilter;

        r2 := @parameter0: int[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        f6 := @parameter3: float;

        f2 := @parameter4: float;

        f0 := @parameter5: float;

        i13 = 0;

        i14 = 0;

     label01:
        if i14 >= i0 goto label10;

        f7 = f6;

        i15 = i1;

        $d0 = (double) f6;

        $b2 = $d0 cmpg 0.0;

        $i22 = (int) $b2;

        if $i22 > 0 goto label03;

        $r6 = r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap>;

        $i8 = interfaceinvoke $r6.<com.jhlabs.image.Colormap: int getColor(float)>(0.0F);

     label02:
        $i10 = r2[i13];

        $i9 = r0.<com.jhlabs.image.GradientFilter: int paintMode>;

        $i11 = staticinvoke <com.jhlabs.image.PixelUtils: int combinePixels(int,int,int)>($i8, $i10, $i9);

        r2[i13] = $i11;

        i13 = i13 + 1;

        $f5 = f7 + f2;

        f7 = $f5;

        $i24 = (int) -1;

        i15 = i15 + $i24;

        if i15 <= 0 goto label03;

        $d1 = (double) $f5;

        $b12 = $d1 cmpg 0.0;

        $i25 = (int) $b12;

        if $i25 <= 0 goto label02;

     label03:
        $d2 = (double) f7;

        $b16 = $d2 cmpg 1.0;

        $i26 = (int) $b16;

        if $i26 >= 0 goto label06;

        $i28 = (int) -1;

        i15 = i15 + $i28;

        if i15 < 0 goto label06;

        $i4 = r0.<com.jhlabs.image.GradientFilter: int type>;

        if $i4 != 1 goto label04;

        $r5 = r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap>;

        $f3 = staticinvoke <com.jhlabs.image.ImageMath: float triangle(float)>(f7);

        $f4 = specialinvoke r0.<com.jhlabs.image.GradientFilter: float map(float)>($f3);

        i17 = interfaceinvoke $r5.<com.jhlabs.image.Colormap: int getColor(float)>($f4);

        goto label05;

     label04:
        $r4 = r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap>;

        $f1 = specialinvoke r0.<com.jhlabs.image.GradientFilter: float map(float)>(f7);

        i17 = interfaceinvoke $r4.<com.jhlabs.image.Colormap: int getColor(float)>($f1);

     label05:
        $i6 = r2[i13];

        $i5 = r0.<com.jhlabs.image.GradientFilter: int paintMode>;

        $i7 = staticinvoke <com.jhlabs.image.PixelUtils: int combinePixels(int,int,int)>(i17, $i6, $i5);

        r2[i13] = $i7;

        i13 = i13 + 1;

        f7 = f7 + f2;

        goto label03;

     label06:
        if i15 <= 0 goto label09;

        $i3 = r0.<com.jhlabs.image.GradientFilter: int type>;

        if $i3 != 1 goto label07;

        $r3 = r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap>;

        i18 = interfaceinvoke $r3.<com.jhlabs.image.Colormap: int getColor(float)>(0.0F);

        goto label08;

     label07:
        $r1 = r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap>;

        i18 = interfaceinvoke $r1.<com.jhlabs.image.Colormap: int getColor(float)>(1.0F);

     label08:
        $i19 = r2[i13];

        $i20 = r0.<com.jhlabs.image.GradientFilter: int paintMode>;

        $i21 = staticinvoke <com.jhlabs.image.PixelUtils: int combinePixels(int,int,int)>(i18, $i19, $i20);

        r2[i13] = $i21;

        i13 = i13 + 1;

        $i30 = (int) -1;

        i15 = i15 + $i30;

        if i15 > 0 goto label08;

     label09:
        f6 = f6 + f0;

        i14 = i14 + 1;

        goto label01;

     label10:
        return;
    }

    private void linearGradient(int[], int, int, int)
    {
        int[] r1;
        int i0, i1, i2;
        boolean $z0;
        com.jhlabs.image.GradientFilter r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, f10, $f11, $f12, $f13, $f14;

        r0 := @this: com.jhlabs.image.GradientFilter;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $f1 = (float) 0;

        $f0 = r0.<com.jhlabs.image.GradientFilter: float x1>;

        $f3 = $f1 - $f0;

        $f2 = r0.<com.jhlabs.image.GradientFilter: float dx>;

        $f9 = $f3 * $f2;

        $f5 = (float) i0;

        $f4 = r0.<com.jhlabs.image.GradientFilter: float y1>;

        $f7 = $f5 - $f4;

        $f6 = r0.<com.jhlabs.image.GradientFilter: float dy>;

        $f8 = $f7 * $f6;

        f10 = $f9 + $f8;

        $z0 = r0.<com.jhlabs.image.GradientFilter: boolean repeat>;

        if $z0 == 0 goto label1;

        $f14 = r0.<com.jhlabs.image.GradientFilter: float dx>;

        $f13 = r0.<com.jhlabs.image.GradientFilter: float dy>;

        specialinvoke r0.<com.jhlabs.image.GradientFilter: void repeatGradient(int[],int,int,float,float,float)>(r1, i1, i2, f10, $f14, $f13);

        goto label2;

     label1:
        $f12 = r0.<com.jhlabs.image.GradientFilter: float dx>;

        $f11 = r0.<com.jhlabs.image.GradientFilter: float dy>;

        specialinvoke r0.<com.jhlabs.image.GradientFilter: void singleGradient(int[],int,int,float,float,float)>(r1, i1, i2, f10, $f12, $f11);

     label2:
        return;
    }

    private void radialGradient(int[], int, int, int)
    {
        java.awt.Point $r1, $r2, $r3, $r4, $r5, $r6;
        byte $b12;
        int[] r7;
        boolean $z0;
        com.jhlabs.image.GradientFilter r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, f6, $f7;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, i9, $i10, $i11, i13, i14, i15, $i16, $i17, $i18, $i19, $i20;
        com.jhlabs.image.Colormap $r8;
        double $d0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        r7 := @parameter0: int[];

        i9 := @parameter1: int;

        i6 := @parameter2: int;

        i13 := @parameter3: int;

        i14 = 0;

        $r1 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p2>;

        $i1 = $r1.<java.awt.Point: int x>;

        $r2 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i0 = $r2.<java.awt.Point: int x>;

        $i2 = $i1 - $i0;

        $f1 = (float) $i2;

        $r3 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p2>;

        $i4 = $r3.<java.awt.Point: int y>;

        $r4 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i3 = $r4.<java.awt.Point: int y>;

        $i5 = $i4 - $i3;

        $f0 = (float) $i5;

        $f2 = specialinvoke r0.<com.jhlabs.image.GradientFilter: float distance(float,float)>($f1, $f0);

        i15 = 0;

     label1:
        if i15 >= i6 goto label4;

        $r5 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i7 = $r5.<java.awt.Point: int x>;

        $i8 = i15 - $i7;

        $f4 = (float) $i8;

        $r6 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i10 = $r6.<java.awt.Point: int y>;

        $i11 = i9 - $i10;

        $f3 = (float) $i11;

        $f5 = specialinvoke r0.<com.jhlabs.image.GradientFilter: float distance(float,float)>($f4, $f3);

        f6 = $f5 / $f2;

        $z0 = r0.<com.jhlabs.image.GradientFilter: boolean repeat>;

        if $z0 == 0 goto label2;

        f6 = f6 % 2.0F;

        goto label3;

     label2:
        $d0 = (double) f6;

        $b12 = $d0 cmpl 1.0;

        $i20 = (int) $b12;

        if $i20 <= 0 goto label3;

        f6 = 1.0F;

     label3:
        $r8 = r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap>;

        $f7 = specialinvoke r0.<com.jhlabs.image.GradientFilter: float map(float)>(f6);

        $i16 = interfaceinvoke $r8.<com.jhlabs.image.Colormap: int getColor(float)>($f7);

        $i17 = r7[i14];

        $i18 = r0.<com.jhlabs.image.GradientFilter: int paintMode>;

        $i19 = staticinvoke <com.jhlabs.image.PixelUtils: int combinePixels(int,int,int)>($i16, $i17, $i18);

        r7[i14] = $i19;

        i14 = i14 + 1;

        i15 = i15 + 1;

        goto label1;

     label4:
        return;
    }

    private void squareGradient(int[], int, int, int)
    {
        java.awt.Point $r1, $r2, $r3, $r4, $r5, $r6;
        byte $b18;
        int[] r7;
        boolean $z0;
        com.jhlabs.image.GradientFilter r0;
        float f0, f1, f2, $f3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, i13, $i14, $i15, $i16, $i17, i19, i20, i21, $i22, $i23, $i24, $i25, $i26;
        com.jhlabs.image.Colormap $r8;
        double $d0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        r7 := @parameter0: int[];

        i13 := @parameter1: int;

        i9 := @parameter2: int;

        i19 := @parameter3: int;

        i20 = 0;

        $r1 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p2>;

        $i1 = $r1.<java.awt.Point: int x>;

        $r2 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i0 = $r2.<java.awt.Point: int x>;

        $i2 = $i1 - $i0;

        $i3 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        $r3 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p2>;

        $i5 = $r3.<java.awt.Point: int y>;

        $r4 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i4 = $r4.<java.awt.Point: int y>;

        $i6 = $i5 - $i4;

        $i7 = staticinvoke <java.lang.Math: int abs(int)>($i6);

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i7);

        f0 = (float) $i8;

        i21 = 0;

     label1:
        if i21 >= i9 goto label4;

        $r5 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i10 = $r5.<java.awt.Point: int x>;

        $i11 = i21 - $i10;

        $i12 = staticinvoke <java.lang.Math: int abs(int)>($i11);

        $r6 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i14 = $r6.<java.awt.Point: int y>;

        $i15 = i13 - $i14;

        $i16 = staticinvoke <java.lang.Math: int abs(int)>($i15);

        $i17 = staticinvoke <java.lang.Math: int max(int,int)>($i12, $i16);

        f1 = (float) $i17;

        f2 = f1 / f0;

        $z0 = r0.<com.jhlabs.image.GradientFilter: boolean repeat>;

        if $z0 == 0 goto label2;

        f2 = f2 % 2.0F;

        goto label3;

     label2:
        $d0 = (double) f2;

        $b18 = $d0 cmpl 1.0;

        $i26 = (int) $b18;

        if $i26 <= 0 goto label3;

        f2 = 1.0F;

     label3:
        $r8 = r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap>;

        $f3 = specialinvoke r0.<com.jhlabs.image.GradientFilter: float map(float)>(f2);

        $i22 = interfaceinvoke $r8.<com.jhlabs.image.Colormap: int getColor(float)>($f3);

        $i23 = r7[i20];

        $i24 = r0.<com.jhlabs.image.GradientFilter: int paintMode>;

        $i25 = staticinvoke <com.jhlabs.image.PixelUtils: int combinePixels(int,int,int)>($i22, $i23, $i24);

        r7[i20] = $i25;

        i20 = i20 + 1;

        i21 = i21 + 1;

        goto label1;

     label4:
        return;
    }

    private void conicalGradient(int[], int, int, int)
    {
        java.awt.Point $r1, $r2, $r3, $r4, $r5, $r6;
        int[] r8;
        com.jhlabs.image.GradientFilter r0;
        float f0, $f1, $f2, f3, f4, f5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19;
        com.jhlabs.image.Colormap $r7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: com.jhlabs.image.GradientFilter;

        r8 := @parameter0: int[];

        i9 := @parameter1: int;

        i6 := @parameter2: int;

        i17 := @parameter3: int;

        i18 = 0;

        $r1 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p2>;

        $i1 = $r1.<java.awt.Point: int x>;

        $r2 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i0 = $r2.<java.awt.Point: int x>;

        $i2 = $i1 - $i0;

        $d1 = (double) $i2;

        $r3 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p2>;

        $i4 = $r3.<java.awt.Point: int y>;

        $r4 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i3 = $r4.<java.awt.Point: int y>;

        $i5 = $i4 - $i3;

        $d0 = (double) $i5;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d1, $d0);

        f0 = (float) $d2;

        i19 = 0;

     label1:
        if i19 >= i6 goto label3;

        $r5 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i7 = $r5.<java.awt.Point: int x>;

        $i8 = i19 - $i7;

        $d4 = (double) $i8;

        $r6 = r0.<com.jhlabs.image.GradientFilter: java.awt.Point p1>;

        $i10 = $r6.<java.awt.Point: int y>;

        $i11 = i9 - $i10;

        $d3 = (double) $i11;

        $d5 = staticinvoke <java.lang.Math: double atan2(double,double)>($d4, $d3);

        $d6 = (double) f0;

        $d7 = $d5 - $d6;

        $f1 = (float) $d7;

        f3 = $f1 / 6.2831855F;

        f4 = f3 + 1.0F;

        f5 = f4 % 1.0F;

        $i12 = r0.<com.jhlabs.image.GradientFilter: int type>;

        if $i12 != 4 goto label2;

        f5 = staticinvoke <com.jhlabs.image.ImageMath: float triangle(float)>(f5);

     label2:
        $r7 = r0.<com.jhlabs.image.GradientFilter: com.jhlabs.image.Colormap colormap>;

        $f2 = specialinvoke r0.<com.jhlabs.image.GradientFilter: float map(float)>(f5);

        $i13 = interfaceinvoke $r7.<com.jhlabs.image.Colormap: int getColor(float)>($f2);

        $i15 = r8[i18];

        $i14 = r0.<com.jhlabs.image.GradientFilter: int paintMode>;

        $i16 = staticinvoke <com.jhlabs.image.PixelUtils: int combinePixels(int,int,int)>($i13, $i15, $i14);

        r8[i18] = $i16;

        i18 = i18 + 1;

        i19 = i19 + 1;

        goto label1;

     label3:
        return;
    }

    private float map(float)
    {
        com.jhlabs.image.GradientFilter r0;
        byte $b0;
        int $i1, $i2;
        float $f0, $f1, f2, $f3;
        boolean $z0;
        double $d0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        f2 := @parameter0: float;

        $z0 = r0.<com.jhlabs.image.GradientFilter: boolean repeat>;

        if $z0 == 0 goto label3;

        $d0 = (double) f2;

        $b0 = $d0 cmpl 1.0;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label1;

        $f3 = 2.0F - f2;

        goto label2;

     label1:
        $f3 = f2;

     label2:
        f2 = $f3;

     label3:
        $i1 = r0.<com.jhlabs.image.GradientFilter: int interpolation>;

        tableswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            default: goto label7;
        };

     label4:
        $f1 = staticinvoke <com.jhlabs.image.ImageMath: float clamp(float,float,float)>(f2, 0.0F, 1.0F);

        f2 = staticinvoke <com.jhlabs.image.ImageMath: float circleUp(float)>($f1);

        goto label7;

     label5:
        $f0 = staticinvoke <com.jhlabs.image.ImageMath: float clamp(float,float,float)>(f2, 0.0F, 1.0F);

        f2 = staticinvoke <com.jhlabs.image.ImageMath: float circleDown(float)>($f0);

        goto label7;

     label6:
        f2 = staticinvoke <com.jhlabs.image.ImageMath: float smoothStep(float,float,float)>(0.0F, 1.0F, f2);

     label7:
        return f2;
    }

    private float distance(float, float)
    {
        com.jhlabs.image.GradientFilter r0;
        float f0, f1, $f2, $f3, $f4, $f5;
        double $d0, $d1;

        r0 := @this: com.jhlabs.image.GradientFilter;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f3 = f0 * f0;

        $f2 = f1 * f1;

        $f4 = $f3 + $f2;

        $d0 = (double) $f4;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f5 = (float) $d1;

        return $f5;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.GradientFilter r0;

        r0 := @this: com.jhlabs.image.GradientFilter;

        return "Other/Gradient Fill...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.GradientFilter: int INT_SMOOTH> = 3;

        <com.jhlabs.image.GradientFilter: int INT_CIRCLE_DOWN> = 2;

        <com.jhlabs.image.GradientFilter: int INT_CIRCLE_UP> = 1;

        <com.jhlabs.image.GradientFilter: int INT_LINEAR> = 0;

        <com.jhlabs.image.GradientFilter: int SQUARE> = 5;

        <com.jhlabs.image.GradientFilter: int BICONICAL> = 4;

        <com.jhlabs.image.GradientFilter: int CONICAL> = 3;

        <com.jhlabs.image.GradientFilter: int RADIAL> = 2;

        <com.jhlabs.image.GradientFilter: int BILINEAR> = 1;

        <com.jhlabs.image.GradientFilter: int LINEAR> = 0;

        return;
    }
}
