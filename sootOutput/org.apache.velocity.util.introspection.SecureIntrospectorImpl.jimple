public class org.apache.velocity.util.introspection.SecureIntrospectorImpl extends org.apache.velocity.util.introspection.Introspector implements org.apache.velocity.util.introspection.SecureIntrospectorControl
{
    private java.lang.String[] badClasses;
    private java.lang.String[] badPackages;
    static java.lang.Class class$java$lang$Number;
    static java.lang.Class class$java$lang$Boolean;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$java$lang$Class;

    public void <init>(java.lang.String[], java.lang.String[], org.apache.velocity.runtime.log.Log)
    {
        org.apache.velocity.runtime.log.Log r1;
        org.apache.velocity.util.introspection.SecureIntrospectorImpl r0;
        java.lang.String[] r2, r3;

        r0 := @this: org.apache.velocity.util.introspection.SecureIntrospectorImpl;

        r2 := @parameter0: java.lang.String[];

        r3 := @parameter1: java.lang.String[];

        r1 := @parameter2: org.apache.velocity.runtime.log.Log;

        specialinvoke r0.<org.apache.velocity.util.introspection.Introspector: void <init>(org.apache.velocity.runtime.log.Log)>(r1);

        r0.<org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.String[] badClasses> = r2;

        r0.<org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.String[] badPackages> = r3;

        return;
    }

    public java.lang.reflect.Method getMethod(java.lang.Class, java.lang.String, java.lang.Object[]) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] r3;
        org.apache.velocity.runtime.log.Log $r6;
        org.apache.velocity.util.introspection.SecureIntrospectorImpl r0;
        java.lang.StringBuffer $r5, $r7, $r8, $r9, $r11, $r12;
        java.lang.Class r1;
        java.lang.String r2, $r10, $r13;
        java.lang.reflect.Method $r4;
        boolean $z0;

        r0 := @this: org.apache.velocity.util.introspection.SecureIntrospectorImpl;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        $z0 = virtualinvoke r0.<org.apache.velocity.util.introspection.SecureIntrospectorImpl: boolean checkObjectExecutePermission(java.lang.Class,java.lang.String)>(r1, r2);

        if $z0 != 0 goto label1;

        $r6 = r0.<org.apache.velocity.util.introspection.SecureIntrospectorImpl: org.apache.velocity.runtime.log.Log log>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot retrieve method ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from object of class ");

        $r10 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" due to security restrictions.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.velocity.runtime.log.Log: void warn(java.lang.Object)>($r13);

        return null;

     label1:
        $r4 = specialinvoke r0.<org.apache.velocity.util.introspection.Introspector: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Object[])>(r1, r2, r3);

        return $r4;
    }

    public boolean checkObjectExecutePermission(java.lang.Class, java.lang.String)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.String[] $r8, $r9, $r10, $r12;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i8;
        java.lang.String r0, r6, $r11, $r13, $r18, r19, $r20;
        org.apache.velocity.util.introspection.SecureIntrospectorImpl r7;
        java.lang.Class $r1, r2, $r3, $r4, $r5, $r14, $r15, $r16, $r17;

        r7 := @this: org.apache.velocity.util.introspection.SecureIntrospectorImpl;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label02;

        $z8 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("wait");

        if $z8 != 0 goto label01;

        $z9 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("notify");

        if $z9 == 0 goto label02;

     label01:
        return 0;

     label02:
        $r1 = <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$java$lang$Number>;

        if $r1 != null goto label03;

        $r14 = staticinvoke <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$(java.lang.String)>("java.lang.Number");

        <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$java$lang$Number> = $r14;

        goto label04;

     label03:
        $r14 = <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$java$lang$Number>;

     label04:
        $z0 = virtualinvoke $r14.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z0 == 0 goto label05;

        return 1;

     label05:
        $r3 = <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$java$lang$Boolean>;

        if $r3 != null goto label06;

        $r15 = staticinvoke <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$java$lang$Boolean> = $r15;

        goto label07;

     label06:
        $r15 = <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$java$lang$Boolean>;

     label07:
        $z1 = virtualinvoke $r15.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z1 == 0 goto label08;

        return 1;

     label08:
        $r4 = <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$java$lang$String>;

        if $r4 != null goto label09;

        $r16 = staticinvoke <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$java$lang$String> = $r16;

        goto label10;

     label09:
        $r16 = <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$java$lang$String>;

     label10:
        $z2 = virtualinvoke $r16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z2 == 0 goto label11;

        return 1;

     label11:
        $r5 = <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$java$lang$Class>;

        if $r5 != null goto label12;

        $r17 = staticinvoke <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$(java.lang.String)>("java.lang.Class");

        <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$java$lang$Class> = $r17;

        goto label13;

     label12:
        $r17 = <org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.Class class$java$lang$Class>;

     label13:
        $z3 = virtualinvoke $r17.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z3 == 0 goto label14;

        if r0 == null goto label14;

        $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("getName");

        if $z7 == 0 goto label14;

        return 1;

     label14:
        $r18 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        r19 = $r18;

        $z10 = virtualinvoke $r18.<java.lang.String: boolean startsWith(java.lang.String)>("[L");

        if $z10 == 0 goto label15;

        $z6 = virtualinvoke $r18.<java.lang.String: boolean endsWith(java.lang.String)>(";");

        if $z6 == 0 goto label15;

        $i1 = virtualinvoke $r18.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        r19 = virtualinvoke $r18.<java.lang.String: java.lang.String substring(int,int)>(2, $i2);

     label15:
        $i3 = virtualinvoke r19.<java.lang.String: int lastIndexOf(int)>(46);

        $i8 = (int) -1;

        if $i3 != $i8 goto label16;

        $r20 = "";

        goto label17;

     label16:
        $r20 = virtualinvoke r19.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

     label17:
        r6 = $r20;

        i4 = 0;

        $r8 = r7.<org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.String[] badPackages>;

        $i0 = lengthof $r8;

     label18:
        if i4 >= $i0 goto label20;

        $r12 = r7.<org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.String[] badPackages>;

        $r13 = $r12[i4];

        $z5 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z5 == 0 goto label19;

        return 0;

     label19:
        i4 = i4 + 1;

        goto label18;

     label20:
        i5 = 0;

        $r9 = r7.<org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.String[] badClasses>;

        i6 = lengthof $r9;

     label21:
        if i5 >= i6 goto label23;

        $r10 = r7.<org.apache.velocity.util.introspection.SecureIntrospectorImpl: java.lang.String[] badClasses>;

        $r11 = $r10[i5];

        $z4 = virtualinvoke r19.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z4 == 0 goto label22;

        return 0;

     label22:
        i5 = i5 + 1;

        goto label21;

     label23:
        return 1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
