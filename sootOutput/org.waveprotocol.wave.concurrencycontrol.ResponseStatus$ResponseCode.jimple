public final enum class org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode extends java.lang.Enum implements org.waveprotocol.wave.communication.ProtoEnums$HasIntValue
{
    public static final enum org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode OK;
    public static final enum org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode BAD_REQUEST;
    public static final enum org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode INTERNAL_ERROR;
    public static final enum org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode NOT_AUTHORIZED;
    public static final enum org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode VERSION_ERROR;
    public static final enum org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode INVALID_OPERATION;
    public static final enum org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode SCHEMA_VIOLATION;
    public static final enum org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode SIZE_LIMIT_EXCEEDED;
    public static final enum org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode POLICY_VIOLATION;
    public static final enum org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode QUARANTINED;
    public static final enum org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode TOO_OLD;
    public static final enum org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode UNKNOWN;
    private final int value;
    private static final org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode[] $VALUES;

    public static org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode[] values()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode[] $r0, $r2;

        $r0 = <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode[]) $r1;

        return $r2;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/waveprotocol/wave/concurrencycontrol/ResponseStatus$ResponseCode;", r0);

        $r2 = (org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, int)
    {
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: int value> = i1;

        return;
    }

    public int getValue()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        $i0 = r0.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: int value>;

        return $i0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode[] $r12;
        int $i1;

        $r25 = new org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        specialinvoke $r25.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: void <init>(java.lang.String,int,int)>("OK", 0, 0);

        <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode OK> = $r25;

        $r26 = new org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        specialinvoke $r26.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: void <init>(java.lang.String,int,int)>("BAD_REQUEST", 1, 1);

        <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode BAD_REQUEST> = $r26;

        $r27 = new org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        specialinvoke $r27.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: void <init>(java.lang.String,int,int)>("INTERNAL_ERROR", 2, 2);

        <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode INTERNAL_ERROR> = $r27;

        $r28 = new org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        specialinvoke $r28.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: void <init>(java.lang.String,int,int)>("NOT_AUTHORIZED", 3, 3);

        <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode NOT_AUTHORIZED> = $r28;

        $r29 = new org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        specialinvoke $r29.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: void <init>(java.lang.String,int,int)>("VERSION_ERROR", 4, 4);

        <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode VERSION_ERROR> = $r29;

        $r30 = new org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        specialinvoke $r30.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: void <init>(java.lang.String,int,int)>("INVALID_OPERATION", 5, 5);

        <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode INVALID_OPERATION> = $r30;

        $r31 = new org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        specialinvoke $r31.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: void <init>(java.lang.String,int,int)>("SCHEMA_VIOLATION", 6, 6);

        <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode SCHEMA_VIOLATION> = $r31;

        $r32 = new org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        specialinvoke $r32.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: void <init>(java.lang.String,int,int)>("SIZE_LIMIT_EXCEEDED", 7, 7);

        <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode SIZE_LIMIT_EXCEEDED> = $r32;

        $r33 = new org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        specialinvoke $r33.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: void <init>(java.lang.String,int,int)>("POLICY_VIOLATION", 8, 8);

        <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode POLICY_VIOLATION> = $r33;

        $r34 = new org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        specialinvoke $r34.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: void <init>(java.lang.String,int,int)>("QUARANTINED", 9, 9);

        <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode QUARANTINED> = $r34;

        $r35 = new org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        specialinvoke $r35.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: void <init>(java.lang.String,int,int)>("TOO_OLD", 10, 10);

        <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode TOO_OLD> = $r35;

        $r36 = new org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        $i1 = (int) -1;

        specialinvoke $r36.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: void <init>(java.lang.String,int,int)>("UNKNOWN", 11, $i1);

        <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode UNKNOWN> = $r36;

        $r12 = newarray (org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode)[12];

        $r13 = <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode OK>;

        $r12[0] = $r13;

        $r14 = <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode BAD_REQUEST>;

        $r12[1] = $r14;

        $r15 = <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode INTERNAL_ERROR>;

        $r12[2] = $r15;

        $r16 = <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode NOT_AUTHORIZED>;

        $r12[3] = $r16;

        $r17 = <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode VERSION_ERROR>;

        $r12[4] = $r17;

        $r18 = <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode INVALID_OPERATION>;

        $r12[5] = $r18;

        $r19 = <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode SCHEMA_VIOLATION>;

        $r12[6] = $r19;

        $r20 = <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode SIZE_LIMIT_EXCEEDED>;

        $r12[7] = $r20;

        $r21 = <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode POLICY_VIOLATION>;

        $r12[8] = $r21;

        $r22 = <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode QUARANTINED>;

        $r12[9] = $r22;

        $r23 = <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode TOO_OLD>;

        $r12[10] = $r23;

        $r24 = <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode UNKNOWN>;

        $r12[11] = $r24;

        <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode[] $VALUES> = $r12;

        return;
    }
}
