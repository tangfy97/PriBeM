public class org.waveprotocol.wave.model.wave.ReadOnlyWaveView extends java.lang.Object implements org.waveprotocol.wave.model.wave.opbased.ObservableWaveView
{
    private final org.waveprotocol.wave.model.id.WaveId waveId;
    private final java.util.Map wavelets;

    public void <init>(org.waveprotocol.wave.model.id.WaveId)
    {
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;
        java.util.HashMap $r1;
        org.waveprotocol.wave.model.id.WaveId r2;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: java.util.Map wavelets> = $r1;

        r0.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: org.waveprotocol.wave.model.id.WaveId waveId> = r2;

        return;
    }

    public org.waveprotocol.wave.model.id.WaveId getWaveId()
    {
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;
        org.waveprotocol.wave.model.id.WaveId $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        $r1 = r0.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: org.waveprotocol.wave.model.id.WaveId waveId>;

        return $r1;
    }

    public org.waveprotocol.wave.model.wave.ObservableWavelet getRoot()
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        org.waveprotocol.wave.model.id.WaveletId $r6;
        java.util.Map $r1;
        org.waveprotocol.wave.model.wave.ObservableWavelet r5;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        $r1 = r0.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: java.util.Map wavelets>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.wave.ObservableWavelet) $r4;

        $r6 = interfaceinvoke r5.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $z1 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isConversationRootWaveletId(org.waveprotocol.wave.model.id.WaveletId)>($r6);

        if $z1 == 0 goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        return null;
    }

    public org.waveprotocol.wave.model.wave.ObservableWavelet createRoot()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r1;

        r1 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Read only wave views are read-only");

        throw $r0;
    }

    public java.lang.Iterable getWavelets()
    {
        java.util.Map $r1;
        java.util.Collection $r2, $r3;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        $r1 = r0.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: java.util.Map wavelets>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        java.util.Map $r2;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r4;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: java.util.Map wavelets>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.wave.model.wave.ObservableWavelet) $r3;

        return $r4;
    }

    public org.waveprotocol.wave.model.wave.ObservableWavelet createWavelet()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r1;

        r1 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Read only wave views are read-only");

        throw $r0;
    }

    public org.waveprotocol.wave.model.wave.ObservableWavelet getUserData()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r1;

        r1 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Read only wave views don\'t support user data wavelets");

        throw $r0;
    }

    public org.waveprotocol.wave.model.wave.ObservableWavelet createUserData()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r1;

        r1 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Read only wave views don\'t support user data wavelets");

        throw $r0;
    }

    public void addListener(org.waveprotocol.wave.model.wave.WaveViewListener)
    {
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;
        org.waveprotocol.wave.model.wave.WaveViewListener r1;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.WaveViewListener;

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.wave.WaveViewListener)
    {
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;
        org.waveprotocol.wave.model.wave.WaveViewListener r1;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.WaveViewListener;

        return;
    }

    public void addWavelet(org.waveprotocol.wave.model.wave.ObservableWavelet)
    {
        org.waveprotocol.wave.model.id.WaveId $r1, $r3;
        org.waveprotocol.wave.model.id.WaveletId $r5, $r7;
        java.util.Map $r4, $r6;
        org.waveprotocol.wave.model.wave.ObservableWavelet r0;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r2;
        boolean $z0, $z1, $z2;

        r2 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r3 = r2.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: org.waveprotocol.wave.model.id.WaveId waveId>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.id.WaveId: boolean equals(java.lang.Object)>($r3);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Attempted to add wavelet to wrong view");

        $r4 = r2.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: java.util.Map wavelets>;

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Attempted to add duplicate wavelet to view");

        $r6 = r2.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: java.util.Map wavelets>;

        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r0);

        return;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet createUserData()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r1;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: org.waveprotocol.wave.model.wave.ObservableWavelet createUserData()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet getUserData()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r1;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: org.waveprotocol.wave.model.wave.ObservableWavelet getUserData()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet createRoot()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r1;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: org.waveprotocol.wave.model.wave.ObservableWavelet createRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet getRoot()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r1;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: org.waveprotocol.wave.model.wave.ObservableWavelet getRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet createWavelet()
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r1;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: org.waveprotocol.wave.model.wave.ObservableWavelet createWavelet()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $r2;
    }

    public volatile void removeListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.wave.WaveViewListener $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.WaveViewListener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: void removeListener(org.waveprotocol.wave.model.wave.WaveViewListener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.wave.WaveViewListener $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.WaveViewListener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: void addListener(org.waveprotocol.wave.model.wave.WaveViewListener)>($r2);

        return;
    }
}
