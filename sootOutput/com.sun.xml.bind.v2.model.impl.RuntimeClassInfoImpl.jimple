class com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl extends com.sun.xml.bind.v2.model.impl.ClassInfoImpl implements com.sun.xml.bind.v2.model.runtime.RuntimeClassInfo, com.sun.xml.bind.v2.model.runtime.RuntimeElement
{
    private com.sun.xml.bind.v2.runtime.reflect.Accessor xmlLocationAccessor;
    private com.sun.xml.bind.AccessorFactory accessorFactory;
    private boolean supressAccessorWarnings;
    private com.sun.xml.bind.v2.runtime.reflect.Accessor attributeWildcardAccessor;
    private boolean computedTransducer;
    private com.sun.xml.bind.v2.runtime.Transducer xducer;
    static final boolean $assertionsDisabled;

    public void <init>(com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder, com.sun.xml.bind.v2.model.'annotation'.Locatable, java.lang.Class)
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        com.sun.xml.bind.AccessorFactory $r4;
        com.sun.xml.bind.v2.model.'annotation'.Locatable r2;
        java.lang.Class r3;
        com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r1 := @parameter0: com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder;

        r2 := @parameter1: com.sun.xml.bind.v2.model.'annotation'.Locatable;

        r3 := @parameter2: java.lang.Class;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ModelBuilder,com.sun.xml.bind.v2.model.'annotation'.Locatable,java.lang.Object)>(r1, r2, r3);

        r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: boolean supressAccessorWarnings> = 0;

        r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: boolean computedTransducer> = 0;

        r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.runtime.Transducer xducer> = null;

        $r4 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.AccessorFactory createAccessorFactory(java.lang.Class)>(r3);

        r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.AccessorFactory accessorFactory> = $r4;

        return;
    }

    protected com.sun.xml.bind.AccessorFactory createAccessorFactory(java.lang.Class)
    {
        java.lang.Object[] $r10, $r20;
        com.sun.xml.bind.AccessorFactory r28;
        com.sun.xml.bind.XmlAccessorFactory $r5;
        java.lang.InstantiationException $r18;
        java.lang.String $r14, $r16, $r17, $r24, $r26, $r27;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r1, $r11, $r21;
        com.sun.xml.bind.v2.runtime.JAXBContextImpl r3;
        boolean $z0, $z1;
        java.lang.IllegalAccessException $r8;
        com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder $r2;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.Messages $r12, $r22;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r9, $r19;
        java.lang.Class r4, $r6, $r13, $r23;
        java.lang.Object $r7;
        com.sun.xml.bind.v2.model.nav.Navigator $r15, $r25;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r4 := @parameter0: java.lang.Class;

        r28 = null;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r2 = (com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder) $r1;

        r3 = $r2.<com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder: com.sun.xml.bind.v2.runtime.JAXBContextImpl context>;

        if r3 == null goto label5;

        $z0 = r3.<com.sun.xml.bind.v2.runtime.JAXBContextImpl: boolean supressAccessorWarnings>;

        r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: boolean supressAccessorWarnings> = $z0;

        $z1 = r3.<com.sun.xml.bind.v2.runtime.JAXBContextImpl: boolean xmlAccessorFactorySupport>;

        if $z1 == 0 goto label5;

        $r5 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.XmlAccessorFactory findXmlAccessorFactoryAnnotation(java.lang.Class)>(r4);

        if $r5 == null goto label5;

     label1:
        $r6 = interfaceinvoke $r5.<com.sun.xml.bind.XmlAccessorFactory: java.lang.Class value()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>();

        r28 = (com.sun.xml.bind.AccessorFactory) $r7;

     label2:
        goto label5;

     label3:
        $r18 := @caughtexception;

        $r21 = r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r19 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r22 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages ACCESSORFACTORY_INSTANTIATION_EXCEPTION>;

        $r20 = newarray (java.lang.Object)[2];

        $r23 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        $r20[0] = $r24;

        $r25 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r26 = interfaceinvoke $r25.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>(r4);

        $r20[1] = $r26;

        $r27 = virtualinvoke $r22.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r20);

        specialinvoke $r19.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r27, r0);

        virtualinvoke $r21.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r19);

        goto label5;

     label4:
        $r8 := @caughtexception;

        $r11 = r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r9 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r12 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages ACCESSORFACTORY_ACCESS_EXCEPTION>;

        $r10 = newarray (java.lang.Object)[2];

        $r13 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r10[0] = $r14;

        $r15 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r16 = interfaceinvoke $r15.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>(r4);

        $r10[1] = $r16;

        $r17 = virtualinvoke $r12.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r10);

        specialinvoke $r9.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r17, r0);

        virtualinvoke $r11.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r9);

     label5:
        if r28 != null goto label6;

        r28 = staticinvoke <com.sun.xml.bind.AccessorFactoryImpl: com.sun.xml.bind.AccessorFactoryImpl getInstance()>();

     label6:
        return r28;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    protected com.sun.xml.bind.XmlAccessorFactory findXmlAccessorFactoryAnnotation(java.lang.Class)
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r1, $r4;
        com.sun.xml.bind.XmlAccessorFactory r6;
        java.lang.'annotation'.Annotation $r3, $r5;
        java.lang.Class r2;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r2 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r3 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getClassAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(class "Lcom/sun/xml/bind/XmlAccessorFactory;", r2, r0);

        r6 = (com.sun.xml.bind.XmlAccessorFactory) $r3;

        if r6 != null goto label1;

        $r4 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r5 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getPackageAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(class "Lcom/sun/xml/bind/XmlAccessorFactory;", r2, r0);

        r6 = (com.sun.xml.bind.XmlAccessorFactory) $r5;

     label1:
        return r6;
    }

    public java.lang.reflect.Method getFactoryMethod()
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        java.lang.reflect.Method $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        $r1 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.reflect.Method getFactoryMethod()>();

        return $r1;
    }

    public final com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl getBaseClass()
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0, $r2;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        $r1 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl getBaseClass()>();

        $r2 = (com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl) $r1;

        return $r2;
    }

    protected com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl createReferenceProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r1;
        com.sun.xml.bind.v2.model.impl.RuntimeReferencePropertyInfoImpl $r0;
        com.sun.xml.bind.v2.model.impl.PropertySeed r2;

        r1 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r2 := @parameter0: com.sun.xml.bind.v2.model.impl.PropertySeed;

        $r0 = new com.sun.xml.bind.v2.model.impl.RuntimeReferencePropertyInfoImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.RuntimeReferencePropertyInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl,com.sun.xml.bind.v2.model.impl.PropertySeed)>(r1, r2);

        return $r0;
    }

    protected com.sun.xml.bind.v2.model.impl.AttributePropertyInfoImpl createAttributeProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)
    {
        com.sun.xml.bind.v2.model.impl.RuntimeAttributePropertyInfoImpl $r0;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r1;
        com.sun.xml.bind.v2.model.impl.PropertySeed r2;

        r1 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r2 := @parameter0: com.sun.xml.bind.v2.model.impl.PropertySeed;

        $r0 = new com.sun.xml.bind.v2.model.impl.RuntimeAttributePropertyInfoImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.RuntimeAttributePropertyInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl,com.sun.xml.bind.v2.model.impl.PropertySeed)>(r1, r2);

        return $r0;
    }

    protected com.sun.xml.bind.v2.model.impl.ValuePropertyInfoImpl createValueProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r1;
        com.sun.xml.bind.v2.model.impl.PropertySeed r2;
        com.sun.xml.bind.v2.model.impl.RuntimeValuePropertyInfoImpl $r0;

        r1 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r2 := @parameter0: com.sun.xml.bind.v2.model.impl.PropertySeed;

        $r0 = new com.sun.xml.bind.v2.model.impl.RuntimeValuePropertyInfoImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.RuntimeValuePropertyInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl,com.sun.xml.bind.v2.model.impl.PropertySeed)>(r1, r2);

        return $r0;
    }

    protected com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl createElementProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)
    {
        com.sun.xml.bind.v2.model.impl.RuntimeElementPropertyInfoImpl $r0;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r1;
        com.sun.xml.bind.v2.model.impl.PropertySeed r2;

        r1 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r2 := @parameter0: com.sun.xml.bind.v2.model.impl.PropertySeed;

        $r0 = new com.sun.xml.bind.v2.model.impl.RuntimeElementPropertyInfoImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.RuntimeElementPropertyInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl,com.sun.xml.bind.v2.model.impl.PropertySeed)>(r1, r2);

        return $r0;
    }

    protected com.sun.xml.bind.v2.model.impl.MapPropertyInfoImpl createMapProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r1;
        com.sun.xml.bind.v2.model.impl.PropertySeed r2;
        com.sun.xml.bind.v2.model.impl.RuntimeMapPropertyInfoImpl $r0;

        r1 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r2 := @parameter0: com.sun.xml.bind.v2.model.impl.PropertySeed;

        $r0 = new com.sun.xml.bind.v2.model.impl.RuntimeMapPropertyInfoImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.RuntimeMapPropertyInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl,com.sun.xml.bind.v2.model.impl.PropertySeed)>(r1, r2);

        return $r0;
    }

    public java.util.List getProperties()
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        java.util.List $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        $r1 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.util.List getProperties()>();

        return $r1;
    }

    public com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo getProperty(java.lang.String)
    {
        com.sun.xml.bind.v2.model.core.PropertyInfo $r2;
        com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo $r3;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        java.lang.String r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.core.PropertyInfo getProperty(java.lang.String)>(r1);

        $r3 = (com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo) $r2;

        return $r3;
    }

    public void link()
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.runtime.Transducer getTransducer()>();

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void link()>();

        return;
    }

    public com.sun.xml.bind.v2.runtime.reflect.Accessor getAttributeWildcard()
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0, r5;
        com.sun.xml.bind.v2.model.impl.PropertySeed $r1;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r2, $r3, $r4;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r5 = r0;

     label1:
        if r5 == null goto label4;

        $r1 = r5.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed attributeWildcard>;

        if $r1 == null goto label3;

        $r2 = r5.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor attributeWildcardAccessor>;

        if $r2 != null goto label2;

        $r4 = specialinvoke r5.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor createAttributeWildcardAccessor()>();

        r5.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor attributeWildcardAccessor> = $r4;

     label2:
        $r3 = r5.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor attributeWildcardAccessor>;

        return $r3;

     label3:
        r5 = virtualinvoke r5.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl getBaseClass()>();

        goto label1;

     label4:
        return null;
    }

    public com.sun.xml.bind.v2.runtime.Transducer getTransducer()
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        com.sun.xml.bind.v2.runtime.Transducer $r1, $r2;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        $z0 = r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: boolean computedTransducer>;

        if $z0 != 0 goto label1;

        r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: boolean computedTransducer> = 1;

        $r2 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.runtime.Transducer calcTransducer()>();

        r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.runtime.Transducer xducer> = $r2;

     label1:
        $r1 = r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.runtime.Transducer xducer>;

        return $r1;
    }

    private com.sun.xml.bind.v2.runtime.Transducer calcTransducer()
    {
        com.sun.xml.bind.v2.model.runtime.RuntimeValuePropertyInfo r15;
        com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo r12;
        com.sun.xml.bind.v2.model.core.PropertyKind $r13, $r14;
        boolean $z0, $z1, $z2;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r4;
        com.sun.xml.bind.v2.runtime.JAXBContextImpl $r6;
        java.util.Iterator $r10;
        com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder $r5;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0, r16;
        java.util.List $r9;
        com.sun.xml.bind.v2.model.runtime.RuntimeNonElement $r1;
        com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor $r8;
        java.lang.Object $r3, $r11;
        java.lang.Class $r7;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$TransducerImpl $r2;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r15 = null;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: boolean hasAttributeWildcard()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        r16 = r0;

     label2:
        if r16 == null goto label7;

        $r9 = virtualinvoke r16.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: java.util.List getProperties()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo) $r11;

        $r13 = interfaceinvoke r12.<com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo: com.sun.xml.bind.v2.model.core.PropertyKind kind()>();

        $r14 = <com.sun.xml.bind.v2.model.core.PropertyKind: com.sun.xml.bind.v2.model.core.PropertyKind VALUE>;

        if $r13 != $r14 goto label4;

        r15 = (com.sun.xml.bind.v2.model.runtime.RuntimeValuePropertyInfo) r12;

        goto label5;

     label4:
        return null;

     label5:
        goto label3;

     label6:
        r16 = virtualinvoke r16.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl getBaseClass()>();

        goto label2;

     label7:
        if r15 != null goto label8;

        return null;

     label8:
        $r1 = interfaceinvoke r15.<com.sun.xml.bind.v2.model.runtime.RuntimeValuePropertyInfo: com.sun.xml.bind.v2.model.runtime.RuntimeNonElement getTarget()>();

        $z1 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.runtime.RuntimeNonElement: boolean isSimpleType()>();

        if $z1 != 0 goto label9;

        return null;

     label9:
        $r2 = new com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$TransducerImpl;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: java.lang.Object getClazz()>();

        $r7 = (java.lang.Class) $r3;

        $r4 = r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r5 = (com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder) $r4;

        $r6 = $r5.<com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder: com.sun.xml.bind.v2.runtime.JAXBContextImpl context>;

        $r8 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor get(com.sun.xml.bind.v2.runtime.JAXBContextImpl,com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef)>($r6, r15);

        specialinvoke $r2.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$TransducerImpl: void <init>(java.lang.Class,com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor)>($r7, $r8);

        return $r2;
    }

    private com.sun.xml.bind.v2.runtime.reflect.Accessor createAttributeWildcardAccessor()
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.PropertySeed $r1, $r4;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r3;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed $r2;
        java.lang.AssertionError $r5;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        $z0 = <com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed attributeWildcard>;

        if $r4 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r1 = r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed attributeWildcard>;

        $r2 = (com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed) $r1;

        $r3 = virtualinvoke $r2.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed: com.sun.xml.bind.v2.runtime.reflect.Accessor getAccessor()>();

        return $r3;
    }

    protected com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed createFieldSeed(java.lang.reflect.Field)
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed $r6;
        java.lang.Object[] $r13;
        com.sun.xml.bind.AccessorFactory $r4, $r7;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed $r5;
        int $i0;
        java.lang.String $r18, $r19, $r20;
        boolean $z0, $z1, $z2;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r14;
        java.lang.reflect.Field r0;
        javax.xml.bind.JAXBException $r11;
        com.sun.xml.bind.InternalAccessorFactory $r10;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r1;
        com.sun.xml.bind.v2.runtime.reflect.Accessor r21;
        com.sun.xml.bind.v2.model.impl.Messages $r15;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r12;
        java.lang.Object $r2, $r8, $r17;
        java.lang.Class $r3, $r9;
        com.sun.xml.bind.v2.model.nav.Navigator $r16;

        r1 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r0 := @parameter0: java.lang.reflect.Field;

        $i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

     label1:
        $z1 = r1.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: boolean supressAccessorWarnings>;

        if $z1 == 0 goto label2;

        $r7 = r1.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.AccessorFactory accessorFactory>;

        $r10 = (com.sun.xml.bind.InternalAccessorFactory) $r7;

        $r8 = r1.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: java.lang.Object clazz>;

        $r9 = (java.lang.Class) $r8;

        $z2 = r1.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: boolean supressAccessorWarnings>;

        r21 = interfaceinvoke $r10.<com.sun.xml.bind.InternalAccessorFactory: com.sun.xml.bind.v2.runtime.reflect.Accessor createFieldAccessor(java.lang.Class,java.lang.reflect.Field,boolean,boolean)>($r9, r0, $z0, $z2);

        goto label3;

     label2:
        $r4 = r1.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.AccessorFactory accessorFactory>;

        $r2 = r1.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: java.lang.Object clazz>;

        $r3 = (java.lang.Class) $r2;

        r21 = interfaceinvoke $r4.<com.sun.xml.bind.AccessorFactory: com.sun.xml.bind.v2.runtime.reflect.Accessor createFieldAccessor(java.lang.Class,java.lang.reflect.Field,boolean)>($r3, r0, $z0);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r14 = r1.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r12 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r15 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages CUSTOM_ACCESSORFACTORY_FIELD_ERROR>;

        $r13 = newarray (java.lang.Object)[2];

        $r16 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r17 = r1.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: java.lang.Object clazz>;

        $r18 = interfaceinvoke $r16.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>($r17);

        $r13[0] = $r18;

        $r19 = virtualinvoke $r11.<javax.xml.bind.JAXBException: java.lang.String toString()>();

        $r13[1] = $r19;

        $r20 = virtualinvoke $r15.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r13);

        specialinvoke $r12.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r20, r1);

        virtualinvoke $r14.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r12);

        r21 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.Accessor: com.sun.xml.bind.v2.runtime.reflect.Accessor getErrorInstance()>();

     label5:
        $r5 = new com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed;

        $r6 = specialinvoke r1.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed createFieldSeed(java.lang.Object)>(r0);

        specialinvoke $r5.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed: void <init>(com.sun.xml.bind.v2.model.impl.PropertySeed,com.sun.xml.bind.v2.runtime.reflect.Accessor)>($r6, r21);

        return $r5;

        catch javax.xml.bind.JAXBException from label1 to label3 with label4;
    }

    public com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed createAccessorSeed(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed $r7;
        java.lang.Object[] $r10;
        com.sun.xml.bind.AccessorFactory $r5;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed $r6;
        java.lang.String $r15, $r16, $r17;
        java.lang.reflect.Method r2, r3;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r11;
        javax.xml.bind.JAXBException $r8;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        com.sun.xml.bind.v2.runtime.reflect.Accessor r18;
        com.sun.xml.bind.v2.model.impl.Messages $r12;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r9;
        java.lang.Object $r1, $r14;
        java.lang.Class $r4;
        com.sun.xml.bind.v2.model.nav.Navigator $r13;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r2 := @parameter0: java.lang.reflect.Method;

        r3 := @parameter1: java.lang.reflect.Method;

     label1:
        $r5 = r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.AccessorFactory accessorFactory>;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: java.lang.Object clazz>;

        $r4 = (java.lang.Class) $r1;

        r18 = interfaceinvoke $r5.<com.sun.xml.bind.AccessorFactory: com.sun.xml.bind.v2.runtime.reflect.Accessor createPropertyAccessor(java.lang.Class,java.lang.reflect.Method,java.lang.reflect.Method)>($r4, r2, r3);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r11 = r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r9 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r12 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages CUSTOM_ACCESSORFACTORY_PROPERTY_ERROR>;

        $r10 = newarray (java.lang.Object)[2];

        $r13 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r14 = r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: java.lang.Object clazz>;

        $r15 = interfaceinvoke $r13.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>($r14);

        $r10[0] = $r15;

        $r16 = virtualinvoke $r8.<javax.xml.bind.JAXBException: java.lang.String toString()>();

        $r10[1] = $r16;

        $r17 = virtualinvoke $r12.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r10);

        specialinvoke $r9.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r17, r0);

        virtualinvoke $r11.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r9);

        r18 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.Accessor: com.sun.xml.bind.v2.runtime.reflect.Accessor getErrorInstance()>();

     label4:
        $r6 = new com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed;

        $r7 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed createAccessorSeed(java.lang.Object,java.lang.Object)>(r2, r3);

        specialinvoke $r6.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed: void <init>(com.sun.xml.bind.v2.model.impl.PropertySeed,com.sun.xml.bind.v2.runtime.reflect.Accessor)>($r7, r18);

        return $r6;

        catch javax.xml.bind.JAXBException from label1 to label2 with label3;
    }

    protected void checkFieldXmlLocation(java.lang.reflect.Field)
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r1;
        java.lang.reflect.Field r2;
        com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection $r3;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r2 := @parameter0: java.lang.reflect.Field;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $z0 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: boolean hasFieldAnnotation(java.lang.Class,java.lang.Object)>(class "Lcom/sun/xml/bind/annotation/XmlLocation;", r2);

        if $z0 == 0 goto label1;

        $r3 = new com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection;

        specialinvoke $r3.<com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection: void <init>(java.lang.reflect.Field)>(r2);

        r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor xmlLocationAccessor> = $r3;

     label1:
        return;
    }

    public com.sun.xml.bind.v2.runtime.reflect.Accessor getLocatorField()
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor xmlLocationAccessor>;

        return $r1;
    }

    public volatile com.sun.xml.bind.v2.model.impl.PropertySeed createAccessorSeed(java.lang.Object, java.lang.Object)
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed $r5;
        java.lang.Object r1, r2;
        java.lang.reflect.Method $r3, $r4;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.reflect.Method) r1;

        $r3 = (java.lang.reflect.Method) r2;

        $r5 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed createAccessorSeed(java.lang.reflect.Method,java.lang.reflect.Method)>($r4, $r3);

        return $r5;
    }

    protected volatile com.sun.xml.bind.v2.model.impl.PropertySeed createFieldSeed(java.lang.Object)
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed $r3;
        java.lang.Object r1;
        java.lang.reflect.Field $r2;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Field) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed createFieldSeed(java.lang.reflect.Field)>($r2);

        return $r3;
    }

    protected volatile void checkFieldXmlLocation(java.lang.Object)
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        java.lang.Object r1;
        java.lang.reflect.Field $r2;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Field) r1;

        virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: void checkFieldXmlLocation(java.lang.reflect.Field)>($r2);

        return;
    }

    public volatile com.sun.xml.bind.v2.model.core.PropertyInfo getProperty(java.lang.String)
    {
        com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo $r2;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0;
        java.lang.String r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo getProperty(java.lang.String)>(r1);

        return $r2;
    }

    public volatile com.sun.xml.bind.v2.model.impl.ClassInfoImpl getBaseClass()
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0, $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl getBaseClass()>();

        return $r1;
    }

    public volatile com.sun.xml.bind.v2.model.core.ClassInfo getBaseClass()
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0, $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl getBaseClass()>();

        return $r1;
    }

    public volatile com.sun.xml.bind.v2.model.runtime.RuntimeClassInfo getBaseClass()
    {
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl r0, $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl getBaseClass()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/model/impl/RuntimeClassInfoImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
