public abstract enum class kodkod.engine.config.Options$IntEncoding extends java.lang.Enum
{
    public static final enum kodkod.engine.config.Options$IntEncoding TWOSCOMPLEMENT;
    private static final kodkod.engine.config.Options$IntEncoding[] ENUM$VALUES;

    static void <clinit>()
    {
        kodkod.engine.config.Options$IntEncoding$1 $r0;
        kodkod.engine.config.Options$IntEncoding $r2;
        kodkod.engine.config.Options$IntEncoding[] $r1;

        $r0 = new kodkod.engine.config.Options$IntEncoding$1;

        specialinvoke $r0.<kodkod.engine.config.Options$IntEncoding$1: void <init>(java.lang.String,int)>("TWOSCOMPLEMENT", 0);

        <kodkod.engine.config.Options$IntEncoding: kodkod.engine.config.Options$IntEncoding TWOSCOMPLEMENT> = $r0;

        $r1 = newarray (kodkod.engine.config.Options$IntEncoding)[1];

        $r2 = <kodkod.engine.config.Options$IntEncoding: kodkod.engine.config.Options$IntEncoding TWOSCOMPLEMENT>;

        $r1[0] = $r2;

        <kodkod.engine.config.Options$IntEncoding: kodkod.engine.config.Options$IntEncoding[] ENUM$VALUES> = $r1;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        kodkod.engine.config.Options$IntEncoding r0;

        r0 := @this: kodkod.engine.config.Options$IntEncoding;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    abstract int maxAllowedBitwidth();

    abstract kodkod.util.ints.IntRange range(int);

    public static kodkod.engine.config.Options$IntEncoding[] values()
    {
        int $i0;
        kodkod.engine.config.Options$IntEncoding[] $r0, $r1;

        $r0 = <kodkod.engine.config.Options$IntEncoding: kodkod.engine.config.Options$IntEncoding[] ENUM$VALUES>;

        $i0 = lengthof $r0;

        $r1 = newarray (kodkod.engine.config.Options$IntEncoding)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 0, $i0);

        return $r1;
    }

    public static kodkod.engine.config.Options$IntEncoding valueOf(java.lang.String)
    {
        java.lang.IllegalArgumentException $r5;
        kodkod.engine.config.Options$IntEncoding[] $r0;
        int i0, $i2;
        java.lang.String r1, $r3;
        kodkod.engine.config.Options$IntEncoding $r2;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $r0 = <kodkod.engine.config.Options$IntEncoding: kodkod.engine.config.Options$IntEncoding[] ENUM$VALUES>;

        i0 = lengthof $r0;

        goto label2;

     label1:
        $r2 = $r0[i0];

        $r3 = virtualinvoke $r2.<kodkod.engine.config.Options$IntEncoding: java.lang.String name()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return $r2;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r5;
    }

    void <init>(java.lang.String, int, kodkod.engine.config.Options$IntEncoding)
    {
        int i0;
        java.lang.String r1;
        kodkod.engine.config.Options$IntEncoding r0, r2;

        r0 := @this: kodkod.engine.config.Options$IntEncoding;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: kodkod.engine.config.Options$IntEncoding;

        specialinvoke r0.<kodkod.engine.config.Options$IntEncoding: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }
}
