public class org.apache.zookeeper.server.quorum.LeaderZooKeeperServer extends org.apache.zookeeper.server.quorum.QuorumZooKeeperServer
{
    org.apache.zookeeper.server.quorum.CommitProcessor commitProcessor;

    void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog, org.apache.zookeeper.server.quorum.QuorumPeer, org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder, org.apache.zookeeper.server.ZKDatabase) throws java.io.IOException
    {
        org.apache.zookeeper.server.quorum.QuorumPeer r2;
        org.apache.zookeeper.server.ZKDatabase r4;
        org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder r3;
        org.apache.zookeeper.server.quorum.LeaderZooKeeperServer r0;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog r1;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.persistence.FileTxnSnapLog;

        r2 := @parameter1: org.apache.zookeeper.server.quorum.QuorumPeer;

        r3 := @parameter2: org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder;

        r4 := @parameter3: org.apache.zookeeper.server.ZKDatabase;

        $i2 = r2.<org.apache.zookeeper.server.quorum.QuorumPeer: int tickTime>;

        $i1 = r2.<org.apache.zookeeper.server.quorum.QuorumPeer: int minSessionTimeout>;

        $i0 = r2.<org.apache.zookeeper.server.quorum.QuorumPeer: int maxSessionTimeout>;

        specialinvoke r0.<org.apache.zookeeper.server.quorum.QuorumZooKeeperServer: void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog,int,int,int,org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder,org.apache.zookeeper.server.ZKDatabase,org.apache.zookeeper.server.quorum.QuorumPeer)>(r1, $i2, $i1, $i0, r3, r4, r2);

        return;
    }

    public org.apache.zookeeper.server.quorum.Leader getLeader()
    {
        org.apache.zookeeper.server.quorum.QuorumPeer $r1;
        org.apache.zookeeper.server.quorum.LeaderZooKeeperServer r0;
        org.apache.zookeeper.server.quorum.Leader $r2;

        r0 := @this: org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $r2 = $r1.<org.apache.zookeeper.server.quorum.QuorumPeer: org.apache.zookeeper.server.quorum.Leader leader>;

        return $r2;
    }

    protected void setupRequestProcessors()
    {
        long $l0;
        org.apache.zookeeper.server.PrepRequestProcessor $r10, $r12;
        org.apache.zookeeper.server.FinalRequestProcessor $r0;
        org.apache.zookeeper.server.quorum.LeaderZooKeeperServer r1;
        org.apache.zookeeper.server.quorum.Leader $r3;
        org.apache.zookeeper.server.quorum.CommitProcessor $r5, $r7, $r9;
        java.lang.String $r6;
        org.apache.zookeeper.server.RequestProcessor $r11;
        org.apache.zookeeper.server.quorum.ProposalRequestProcessor $r8;
        org.apache.zookeeper.server.quorum.Leader$ToBeAppliedRequestProcessor $r2;
        java.util.concurrent.ConcurrentLinkedQueue $r4;

        r1 := @this: org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;

        $r0 = new org.apache.zookeeper.server.FinalRequestProcessor;

        specialinvoke $r0.<org.apache.zookeeper.server.FinalRequestProcessor: void <init>(org.apache.zookeeper.server.ZooKeeperServer)>(r1);

        $r2 = new org.apache.zookeeper.server.quorum.Leader$ToBeAppliedRequestProcessor;

        $r3 = virtualinvoke r1.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.quorum.Leader getLeader()>();

        $r4 = $r3.<org.apache.zookeeper.server.quorum.Leader: java.util.concurrent.ConcurrentLinkedQueue toBeApplied>;

        specialinvoke $r2.<org.apache.zookeeper.server.quorum.Leader$ToBeAppliedRequestProcessor: void <init>(org.apache.zookeeper.server.RequestProcessor,java.util.concurrent.ConcurrentLinkedQueue)>($r0, $r4);

        $r5 = new org.apache.zookeeper.server.quorum.CommitProcessor;

        $l0 = virtualinvoke r1.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: long getServerId()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        specialinvoke $r5.<org.apache.zookeeper.server.quorum.CommitProcessor: void <init>(org.apache.zookeeper.server.RequestProcessor,java.lang.String,boolean)>($r2, $r6, 0);

        r1.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.quorum.CommitProcessor commitProcessor> = $r5;

        $r7 = r1.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.quorum.CommitProcessor commitProcessor>;

        virtualinvoke $r7.<org.apache.zookeeper.server.quorum.CommitProcessor: void start()>();

        $r8 = new org.apache.zookeeper.server.quorum.ProposalRequestProcessor;

        $r9 = r1.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.quorum.CommitProcessor commitProcessor>;

        specialinvoke $r8.<org.apache.zookeeper.server.quorum.ProposalRequestProcessor: void <init>(org.apache.zookeeper.server.quorum.LeaderZooKeeperServer,org.apache.zookeeper.server.RequestProcessor)>(r1, $r9);

        virtualinvoke $r8.<org.apache.zookeeper.server.quorum.ProposalRequestProcessor: void initialize()>();

        $r10 = new org.apache.zookeeper.server.PrepRequestProcessor;

        specialinvoke $r10.<org.apache.zookeeper.server.PrepRequestProcessor: void <init>(org.apache.zookeeper.server.ZooKeeperServer,org.apache.zookeeper.server.RequestProcessor)>(r1, $r8);

        r1.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.RequestProcessor firstProcessor> = $r10;

        $r11 = r1.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.RequestProcessor firstProcessor>;

        $r12 = (org.apache.zookeeper.server.PrepRequestProcessor) $r11;

        virtualinvoke $r12.<org.apache.zookeeper.server.PrepRequestProcessor: void start()>();

        return;
    }

    public int getGlobalOutstandingLimit()
    {
        org.apache.zookeeper.server.quorum.QuorumPeer $r1;
        org.apache.zookeeper.server.quorum.LeaderZooKeeperServer r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;

        $i0 = specialinvoke r0.<org.apache.zookeeper.server.quorum.QuorumZooKeeperServer: int getGlobalOutstandingLimit()>();

        $r1 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $i1 = virtualinvoke $r1.<org.apache.zookeeper.server.quorum.QuorumPeer: int getQuorumSize()>();

        $i2 = $i1 - 1;

        $i3 = $i0 / $i2;

        return $i3;
    }

    public void createSessionTracker()
    {
        org.apache.zookeeper.server.quorum.QuorumPeer $r4;
        org.apache.zookeeper.server.quorum.LeaderZooKeeperServer r0;
        org.apache.zookeeper.server.ZKDatabase $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        int $i0;
        long $l1;
        org.apache.zookeeper.server.SessionTrackerImpl $r1;

        r0 := @this: org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;

        $r1 = new org.apache.zookeeper.server.SessionTrackerImpl;

        $r2 = virtualinvoke r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.ZKDatabase getZKDatabase()>();

        $r3 = virtualinvoke $r2.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.ConcurrentHashMap getSessionWithTimeOuts()>();

        $i0 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: int tickTime>;

        $r4 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $l1 = virtualinvoke $r4.<org.apache.zookeeper.server.quorum.QuorumPeer: long getId()>();

        specialinvoke $r1.<org.apache.zookeeper.server.SessionTrackerImpl: void <init>(org.apache.zookeeper.server.SessionTracker$SessionExpirer,java.util.concurrent.ConcurrentHashMap,int,long)>(r0, $r3, $i0, $l1);

        r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker> = $r1;

        return;
    }

    protected void startSessionTracker()
    {
        org.apache.zookeeper.server.quorum.LeaderZooKeeperServer r0;
        org.apache.zookeeper.server.SessionTrackerImpl $r2;
        org.apache.zookeeper.server.SessionTracker $r1;

        r0 := @this: org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        $r2 = (org.apache.zookeeper.server.SessionTrackerImpl) $r1;

        virtualinvoke $r2.<org.apache.zookeeper.server.SessionTrackerImpl: void start()>();

        return;
    }

    public boolean touch(long, int)
    {
        org.apache.zookeeper.server.quorum.LeaderZooKeeperServer r0;
        org.apache.zookeeper.server.SessionTracker $r1;
        int i1;
        long l0;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        $z0 = interfaceinvoke $r1.<org.apache.zookeeper.server.SessionTracker: boolean touchSession(long,int)>(l0, i1);

        return $z0;
    }

    protected void registerJMX()
    {
        org.slf4j.Logger $r8;
        org.apache.zookeeper.server.ZKDatabase $r2;
        org.apache.zookeeper.jmx.MBeanRegistry $r4;
        org.apache.zookeeper.server.DataTreeBean $r1, $r6;
        java.lang.Exception $r7;
        org.apache.zookeeper.server.quorum.LeaderZooKeeperServer r0;
        org.apache.zookeeper.server.ZooKeeperServerBean $r5;
        org.apache.zookeeper.server.DataTree $r3;

        r0 := @this: org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;

     label1:
        $r1 = new org.apache.zookeeper.server.DataTreeBean;

        $r2 = virtualinvoke r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.ZKDatabase getZKDatabase()>();

        $r3 = virtualinvoke $r2.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree getDataTree()>();

        specialinvoke $r1.<org.apache.zookeeper.server.DataTreeBean: void <init>(org.apache.zookeeper.server.DataTree)>($r3);

        r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean> = $r1;

        $r4 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r6 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean>;

        $r5 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean>;

        virtualinvoke $r4.<org.apache.zookeeper.jmx.MBeanRegistry: void register(org.apache.zookeeper.jmx.ZKMBeanInfo,org.apache.zookeeper.jmx.ZKMBeanInfo)>($r6, $r5);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = <org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to register with JMX", $r7);

        r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean> = null;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void registerJMX(org.apache.zookeeper.server.quorum.LeaderBean, org.apache.zookeeper.server.quorum.LocalPeerBean)
    {
        org.apache.zookeeper.server.quorum.QuorumPeer $r1, $r6, $r8;
        org.slf4j.Logger $r10, $r12;
        org.apache.zookeeper.jmx.MBeanRegistry $r5, $r13;
        org.apache.zookeeper.server.quorum.LeaderBean r3;
        org.apache.zookeeper.server.quorum.LocalPeerBean r4;
        java.lang.Exception $r9, $r11;
        org.apache.zookeeper.server.quorum.LeaderZooKeeperServer r0;
        org.apache.zookeeper.server.quorum.LeaderElectionBean $r2, $r7;

        r0 := @this: org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;

        r3 := @parameter0: org.apache.zookeeper.server.quorum.LeaderBean;

        r4 := @parameter1: org.apache.zookeeper.server.quorum.LocalPeerBean;

        $r1 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $r2 = $r1.<org.apache.zookeeper.server.quorum.QuorumPeer: org.apache.zookeeper.server.quorum.LeaderElectionBean jmxLeaderElectionBean>;

        if $r2 == null goto label5;

     label1:
        $r5 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r6 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $r7 = $r6.<org.apache.zookeeper.server.quorum.QuorumPeer: org.apache.zookeeper.server.quorum.LeaderElectionBean jmxLeaderElectionBean>;

        virtualinvoke $r5.<org.apache.zookeeper.jmx.MBeanRegistry: void unregister(org.apache.zookeeper.jmx.ZKMBeanInfo)>($r7);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = <org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r12.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to register with JMX", $r11);

     label4:
        $r8 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $r8.<org.apache.zookeeper.server.quorum.QuorumPeer: org.apache.zookeeper.server.quorum.LeaderElectionBean jmxLeaderElectionBean> = null;

     label5:
        r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean> = r3;

        $r13 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        virtualinvoke $r13.<org.apache.zookeeper.jmx.MBeanRegistry: void register(org.apache.zookeeper.jmx.ZKMBeanInfo,org.apache.zookeeper.jmx.ZKMBeanInfo)>(r3, r4);

     label6:
        goto label8;

     label7:
        $r9 := @caughtexception;

        $r10 = <org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to register with JMX", $r9);

        r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean> = null;

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected void unregisterJMX()
    {
        org.apache.zookeeper.server.quorum.LeaderZooKeeperServer r0;
        org.slf4j.Logger $r5;
        org.apache.zookeeper.jmx.MBeanRegistry $r2;
        org.apache.zookeeper.server.DataTreeBean $r1, $r3;
        java.lang.Exception $r4;

        r0 := @this: org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;

     label1:
        $r1 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean>;

        if $r1 == null goto label2;

        $r2 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r3 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean>;

        virtualinvoke $r2.<org.apache.zookeeper.jmx.MBeanRegistry: void unregister(org.apache.zookeeper.jmx.ZKMBeanInfo)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to unregister with JMX", $r4);

     label4:
        r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean> = null;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void unregisterJMX(org.apache.zookeeper.server.quorum.Leader)
    {
        org.apache.zookeeper.server.quorum.LeaderZooKeeperServer r0;
        org.apache.zookeeper.server.ZooKeeperServerBean $r1, $r3;
        org.apache.zookeeper.server.quorum.Leader r6;
        org.slf4j.Logger $r5;
        org.apache.zookeeper.jmx.MBeanRegistry $r2;
        java.lang.Exception $r4;

        r0 := @this: org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;

        r6 := @parameter0: org.apache.zookeeper.server.quorum.Leader;

     label1:
        $r1 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean>;

        if $r1 == null goto label2;

        $r2 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r3 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean>;

        virtualinvoke $r2.<org.apache.zookeeper.jmx.MBeanRegistry: void unregister(org.apache.zookeeper.jmx.ZKMBeanInfo)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to unregister with JMX", $r4);

     label4:
        r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean> = null;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getState()
    {
        org.apache.zookeeper.server.quorum.LeaderZooKeeperServer r0;

        r0 := @this: org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;

        return "leader";
    }

    public long getServerId()
    {
        org.apache.zookeeper.server.quorum.QuorumPeer $r1;
        org.apache.zookeeper.server.quorum.LeaderZooKeeperServer r0;
        long $l0;

        r0 := @this: org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $l0 = virtualinvoke $r1.<org.apache.zookeeper.server.quorum.QuorumPeer: long getId()>();

        return $l0;
    }

    protected void revalidateSession(org.apache.zookeeper.server.ServerCnxn, long, int) throws java.io.IOException
    {
        org.apache.zookeeper.server.quorum.LeaderZooKeeperServer r0;
        int i1;
        org.apache.zookeeper.server.ServerCnxn r1;
        long l0;
        java.lang.Object $r2;
        org.apache.zookeeper.KeeperException$SessionExpiredException $r3;

        r0 := @this: org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.ServerCnxn;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.zookeeper.server.quorum.QuorumZooKeeperServer: void revalidateSession(org.apache.zookeeper.server.ServerCnxn,long,int)>(r1, l0, i1);

     label1:
        $r2 = <org.apache.zookeeper.server.ServerCnxn: java.lang.Object me>;

        virtualinvoke r0.<org.apache.zookeeper.server.quorum.LeaderZooKeeperServer: void setOwner(long,java.lang.Object)>(l0, $r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch org.apache.zookeeper.KeeperException$SessionExpiredException from label1 to label2 with label3;
    }
}
