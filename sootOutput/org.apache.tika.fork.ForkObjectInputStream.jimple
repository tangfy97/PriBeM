class org.apache.tika.fork.ForkObjectInputStream extends java.io.ObjectInputStream
{
    private final java.lang.ClassLoader loader;

    public void <init>(java.io.InputStream, java.lang.ClassLoader) throws java.io.IOException
    {
        java.lang.ClassLoader r2;
        org.apache.tika.fork.ForkObjectInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.tika.fork.ForkObjectInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.ClassLoader;

        specialinvoke r0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<org.apache.tika.fork.ForkObjectInputStream: java.lang.ClassLoader loader> = r2;

        return;
    }

    protected java.lang.Class resolveClass(java.io.ObjectStreamClass) throws java.lang.ClassNotFoundException
    {
        org.apache.tika.fork.ForkObjectInputStream r2;
        java.io.ObjectStreamClass r0;
        java.lang.Class $r4;
        java.lang.String $r1;
        java.lang.ClassLoader $r3;

        r2 := @this: org.apache.tika.fork.ForkObjectInputStream;

        r0 := @parameter0: java.io.ObjectStreamClass;

        $r1 = virtualinvoke r0.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r3 = r2.<org.apache.tika.fork.ForkObjectInputStream: java.lang.ClassLoader loader>;

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r1, 0, $r3);

        return $r4;
    }

    public static void sendObject(java.lang.Object, java.io.DataOutputStream) throws java.io.IOException
    {
        byte[] $r3;
        java.io.ByteArrayOutputStream $r0;
        java.io.DataOutputStream r4;
        int $i0;
        java.io.ObjectOutputStream $r1;
        java.lang.Object r2;

        r2 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.io.DataOutputStream;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.ObjectOutputStream;

        specialinvoke $r1.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r0);

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r2);

        virtualinvoke $r1.<java.io.ObjectOutputStream: void close()>();

        $r3 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i0 = lengthof $r3;

        virtualinvoke r4.<java.io.DataOutputStream: void writeInt(int)>($i0);

        virtualinvoke r4.<java.io.DataOutputStream: void write(byte[])>($r3);

        return;
    }

    public static java.lang.Object readObject(java.io.DataInputStream, java.lang.ClassLoader) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.DataInputStream r0;
        byte[] r1;
        java.io.ByteArrayInputStream $r3;
        org.apache.tika.fork.ForkObjectInputStream $r2;
        int $i0;
        java.lang.Object $r5;
        java.lang.ClassLoader r4;

        r0 := @parameter0: java.io.DataInputStream;

        r4 := @parameter1: java.lang.ClassLoader;

        $i0 = virtualinvoke r0.<java.io.DataInputStream: int readInt()>();

        r1 = newarray (byte)[$i0];

        virtualinvoke r0.<java.io.DataInputStream: void readFully(byte[])>(r1);

        $r2 = new org.apache.tika.fork.ForkObjectInputStream;

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        specialinvoke $r2.<org.apache.tika.fork.ForkObjectInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader)>($r3, r4);

        $r5 = virtualinvoke $r2.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        return $r5;
    }
}
