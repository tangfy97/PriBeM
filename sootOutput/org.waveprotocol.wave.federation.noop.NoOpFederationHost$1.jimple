class org.waveprotocol.wave.federation.noop.NoOpFederationHost$1 extends java.lang.Object implements org.waveprotocol.wave.federation.WaveletFederationListener
{
    final org.waveprotocol.wave.federation.noop.NoOpFederationHost this$0;

    void <init>(org.waveprotocol.wave.federation.noop.NoOpFederationHost)
    {
        org.waveprotocol.wave.federation.noop.NoOpFederationHost r1;
        org.waveprotocol.wave.federation.noop.NoOpFederationHost$1 r0;

        r0 := @this: org.waveprotocol.wave.federation.noop.NoOpFederationHost$1;

        r1 := @parameter0: org.waveprotocol.wave.federation.noop.NoOpFederationHost;

        r0.<org.waveprotocol.wave.federation.noop.NoOpFederationHost$1: org.waveprotocol.wave.federation.noop.NoOpFederationHost this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void waveletDeltaUpdate(org.waveprotocol.wave.model.id.WaveletName, java.util.List, org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)
    {
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback r0;
        org.waveprotocol.wave.model.id.WaveletName r3;
        java.util.List r4;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r1;
        org.waveprotocol.wave.federation.noop.NoOpFederationHost$1 r2;

        r2 := @this: org.waveprotocol.wave.federation.noop.NoOpFederationHost$1;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r4 := @parameter1: java.util.List;

        r0 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback;

        $r1 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Federation is not enabled!");

        interfaceinvoke r0.<org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r1);

        return;
    }

    public void waveletCommitUpdate(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)
    {
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback r0;
        org.waveprotocol.wave.model.id.WaveletName r3;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r1;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r4;
        org.waveprotocol.wave.federation.noop.NoOpFederationHost$1 r2;

        r2 := @this: org.waveprotocol.wave.federation.noop.NoOpFederationHost$1;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r4 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r0 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback;

        $r1 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Federation is not enabled!");

        interfaceinvoke r0.<org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r1);

        return;
    }
}
