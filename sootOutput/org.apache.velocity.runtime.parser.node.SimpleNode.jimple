public class org.apache.velocity.runtime.parser.node.SimpleNode extends java.lang.Object implements org.apache.velocity.runtime.parser.node.Node
{
    protected org.apache.velocity.runtime.RuntimeServices rsvc;
    protected org.apache.velocity.runtime.log.Log log;
    protected org.apache.velocity.runtime.parser.node.Node parent;
    protected org.apache.velocity.runtime.parser.node.Node[] children;
    protected int id;
    protected org.apache.velocity.runtime.parser.Parser parser;
    protected int info;
    public boolean state;
    protected boolean invalid;
    protected org.apache.velocity.runtime.parser.Token first;
    protected org.apache.velocity.runtime.parser.Token last;
    protected java.lang.String templateName;

    public org.apache.velocity.runtime.RuntimeServices getRuntimeServices()
    {
        org.apache.velocity.runtime.RuntimeServices $r1;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.RuntimeServices rsvc>;

        return $r1;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.RuntimeServices rsvc> = null;

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.log.Log log> = null;

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: boolean invalid> = 0;

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: int id> = i0;

        return;
    }

    public void <init>(org.apache.velocity.runtime.parser.Parser, int)
    {
        org.apache.velocity.runtime.parser.Parser r1, $r2;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;
        int i0;
        java.lang.String $r3;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r1 := @parameter0: org.apache.velocity.runtime.parser.Parser;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.SimpleNode: void <init>(int)>(i0);

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Parser parser> = r1;

        $r2 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Parser parser>;

        $r3 = $r2.<org.apache.velocity.runtime.parser.Parser: java.lang.String currentTemplateName>;

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: java.lang.String templateName> = $r3;

        return;
    }

    public void jjtOpen()
    {
        org.apache.velocity.runtime.parser.Parser $r1;
        org.apache.velocity.runtime.parser.Token $r2;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Parser parser>;

        $r2 = virtualinvoke $r1.<org.apache.velocity.runtime.parser.Parser: org.apache.velocity.runtime.parser.Token getToken(int)>(1);

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Token first> = $r2;

        return;
    }

    public void jjtClose()
    {
        org.apache.velocity.runtime.parser.Parser $r1;
        org.apache.velocity.runtime.parser.Token $r2;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Parser parser>;

        $r2 = virtualinvoke $r1.<org.apache.velocity.runtime.parser.Parser: org.apache.velocity.runtime.parser.Token getToken(int)>(0);

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Token last> = $r2;

        return;
    }

    public void setFirstToken(org.apache.velocity.runtime.parser.Token)
    {
        org.apache.velocity.runtime.parser.Token r1;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r1 := @parameter0: org.apache.velocity.runtime.parser.Token;

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Token first> = r1;

        return;
    }

    public org.apache.velocity.runtime.parser.Token getFirstToken()
    {
        org.apache.velocity.runtime.parser.Token $r1;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Token first>;

        return $r1;
    }

    public org.apache.velocity.runtime.parser.Token getLastToken()
    {
        org.apache.velocity.runtime.parser.Token $r1;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Token last>;

        return $r1;
    }

    public void jjtSetParent(org.apache.velocity.runtime.parser.node.Node)
    {
        org.apache.velocity.runtime.parser.node.Node r1;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r1 := @parameter0: org.apache.velocity.runtime.parser.node.Node;

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node parent> = r1;

        return;
    }

    public org.apache.velocity.runtime.parser.node.Node jjtGetParent()
    {
        org.apache.velocity.runtime.parser.node.Node $r1;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node parent>;

        return $r1;
    }

    public void jjtAddChild(org.apache.velocity.runtime.parser.node.Node, int)
    {
        org.apache.velocity.runtime.parser.node.Node[] $r1, $r2, r4, $r5, $r6, $r7, $r8;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.velocity.runtime.parser.node.Node r3;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r3 := @parameter0: org.apache.velocity.runtime.parser.node.Node;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children>;

        if $r1 != null goto label1;

        $i4 = i0 + 1;

        $r7 = newarray (org.apache.velocity.runtime.parser.node.Node)[$i4];

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children> = $r7;

        goto label2;

     label1:
        $r2 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children>;

        $i1 = lengthof $r2;

        if i0 < $i1 goto label2;

        $i2 = i0 + 1;

        r4 = newarray (org.apache.velocity.runtime.parser.node.Node)[$i2];

        $r6 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children>;

        $r5 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children>;

        $i3 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r4, 0, $i3);

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children> = r4;

     label2:
        $r8 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children>;

        $r8[i0] = r3;

        return;
    }

    public org.apache.velocity.runtime.parser.node.Node jjtGetChild(int)
    {
        org.apache.velocity.runtime.parser.node.SimpleNode r0;
        int i0;
        org.apache.velocity.runtime.parser.node.Node[] $r1;
        org.apache.velocity.runtime.parser.node.Node $r2;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int jjtGetNumChildren()
    {
        org.apache.velocity.runtime.parser.node.SimpleNode r0;
        int $i0;
        org.apache.velocity.runtime.parser.node.Node[] $r1, $r2;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children>;

        $i0 = lengthof $r2;

     label2:
        return $i0;
    }

    public java.lang.Object jjtAccept(org.apache.velocity.runtime.parser.node.ParserVisitor, java.lang.Object)
    {
        org.apache.velocity.runtime.parser.node.SimpleNode r1;
        org.apache.velocity.runtime.parser.node.ParserVisitor r0;
        java.lang.Object r2, $r3;

        r1 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r0 := @parameter0: org.apache.velocity.runtime.parser.node.ParserVisitor;

        r2 := @parameter1: java.lang.Object;

        $r3 = interfaceinvoke r0.<org.apache.velocity.runtime.parser.node.ParserVisitor: java.lang.Object visit(org.apache.velocity.runtime.parser.node.SimpleNode,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public java.lang.Object childrenAccept(org.apache.velocity.runtime.parser.node.ParserVisitor, java.lang.Object)
    {
        org.apache.velocity.runtime.parser.node.Node[] $r1, $r3, $r4;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;
        int $i0, i1;
        org.apache.velocity.runtime.parser.node.ParserVisitor r5;
        java.lang.Object r2;
        org.apache.velocity.runtime.parser.node.Node $r6;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r5 := @parameter0: org.apache.velocity.runtime.parser.node.ParserVisitor;

        r2 := @parameter1: java.lang.Object;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children>;

        if $r1 == null goto label2;

        i1 = 0;

     label1:
        $r3 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children>;

        $i0 = lengthof $r3;

        if i1 >= $i0 goto label2;

        $r4 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children>;

        $r6 = $r4[i1];

        interfaceinvoke $r6.<org.apache.velocity.runtime.parser.node.Node: java.lang.Object jjtAccept(org.apache.velocity.runtime.parser.node.ParserVisitor,java.lang.Object)>(r5, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public java.lang.String toString(java.lang.String)
    {
        java.lang.StringBuffer $r0, $r2, $r5;
        org.apache.velocity.runtime.parser.node.SimpleNode r3;
        java.lang.String r1, $r4, $r6;

        r3 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r4 = virtualinvoke r3.<org.apache.velocity.runtime.parser.node.SimpleNode: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public void dump(java.lang.String)
    {
        java.io.PrintStream $r2;
        org.apache.velocity.runtime.parser.node.Node[] $r4, $r5, $r6;
        org.apache.velocity.runtime.parser.node.SimpleNode r0, r8;
        java.lang.StringBuffer $r9, $r10, $r11;
        int $i0, i1;
        java.lang.String r1, $r3, $r12;
        org.apache.velocity.runtime.parser.node.Node $r7;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r3 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.SimpleNode: java.lang.String toString(java.lang.String)>(r1);

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        $r4 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children>;

        if $r4 == null goto label3;

        i1 = 0;

     label1:
        $r5 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children>;

        $i0 = lengthof $r5;

        if i1 >= $i0 goto label3;

        $r6 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node[] children>;

        $r7 = $r6[i1];

        r8 = (org.apache.velocity.runtime.parser.node.SimpleNode) $r7;

        if r8 == null goto label2;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r8.<org.apache.velocity.runtime.parser.node.SimpleNode: void dump(java.lang.String)>($r12);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    protected java.lang.String getLocation(org.apache.velocity.context.InternalContextAdapter)
    {
        org.apache.velocity.context.InternalContextAdapter r2;
        java.lang.String $r1;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r2 := @parameter0: org.apache.velocity.context.InternalContextAdapter;

        $r1 = staticinvoke <org.apache.velocity.runtime.log.Log: java.lang.String formatFileString(org.apache.velocity.runtime.parser.node.Node)>(r0);

        return $r1;
    }

    public java.lang.String literal()
    {
        org.apache.commons.lang.text.StrBuilder $r3;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;
        org.apache.velocity.runtime.parser.Token $r1, $r2, $r5, $r8, r10;
        java.lang.String $r4, $r6, $r7, $r9;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $r2 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Token first>;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Token last>;

        if $r2 != $r1 goto label1;

        $r8 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Token first>;

        $r9 = staticinvoke <org.apache.velocity.runtime.parser.node.NodeUtils: java.lang.String tokenLiteral(org.apache.velocity.runtime.parser.Token)>($r8);

        return $r9;

     label1:
        r10 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Token first>;

        $r3 = new org.apache.commons.lang.text.StrBuilder;

        $r4 = staticinvoke <org.apache.velocity.runtime.parser.node.NodeUtils: java.lang.String tokenLiteral(org.apache.velocity.runtime.parser.Token)>(r10);

        specialinvoke $r3.<org.apache.commons.lang.text.StrBuilder: void <init>(java.lang.String)>($r4);

     label2:
        $r5 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Token last>;

        if r10 == $r5 goto label3;

        r10 = r10.<org.apache.velocity.runtime.parser.Token: org.apache.velocity.runtime.parser.Token next>;

        $r7 = staticinvoke <org.apache.velocity.runtime.parser.node.NodeUtils: java.lang.String tokenLiteral(org.apache.velocity.runtime.parser.Token)>(r10);

        virtualinvoke $r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r7);

        goto label2;

     label3:
        $r6 = virtualinvoke $r3.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.Object init(org.apache.velocity.context.InternalContextAdapter, java.lang.Object) throws org.apache.velocity.exception.TemplateInitException
    {
        org.apache.velocity.context.InternalContextAdapter r6;
        org.apache.velocity.runtime.RuntimeServices $r2, $r3;
        org.apache.velocity.runtime.log.Log $r4;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;
        int $i0, i1;
        java.lang.Object r1;
        org.apache.velocity.runtime.parser.node.Node $r5;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r6 := @parameter0: org.apache.velocity.context.InternalContextAdapter;

        r1 := @parameter1: java.lang.Object;

        $r2 = (org.apache.velocity.runtime.RuntimeServices) r1;

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.RuntimeServices rsvc> = $r2;

        $r3 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $r4 = interfaceinvoke $r3.<org.apache.velocity.runtime.RuntimeServices: org.apache.velocity.runtime.log.Log getLog()>();

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.log.Log log> = $r4;

        $i0 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.SimpleNode: int jjtGetNumChildren()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r5 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node jjtGetChild(int)>(i1);

        interfaceinvoke $r5.<org.apache.velocity.runtime.parser.node.Node: java.lang.Object init(org.apache.velocity.context.InternalContextAdapter,java.lang.Object)>(r6, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public boolean evaluate(org.apache.velocity.context.InternalContextAdapter) throws org.apache.velocity.exception.MethodInvocationException
    {
        org.apache.velocity.context.InternalContextAdapter r1;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r1 := @parameter0: org.apache.velocity.context.InternalContextAdapter;

        return 0;
    }

    public java.lang.Object value(org.apache.velocity.context.InternalContextAdapter) throws org.apache.velocity.exception.MethodInvocationException
    {
        org.apache.velocity.context.InternalContextAdapter r1;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r1 := @parameter0: org.apache.velocity.context.InternalContextAdapter;

        return null;
    }

    public boolean render(org.apache.velocity.context.InternalContextAdapter, java.io.Writer) throws java.io.IOException, org.apache.velocity.exception.MethodInvocationException, org.apache.velocity.exception.ParseErrorException, org.apache.velocity.exception.ResourceNotFoundException
    {
        org.apache.velocity.context.InternalContextAdapter r2;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;
        int $i0, i1;
        java.io.Writer r3;
        org.apache.velocity.runtime.parser.node.Node $r1;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r2 := @parameter0: org.apache.velocity.context.InternalContextAdapter;

        r3 := @parameter1: java.io.Writer;

        $i0 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.SimpleNode: int jjtGetNumChildren()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r1 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.node.Node jjtGetChild(int)>(i1);

        interfaceinvoke $r1.<org.apache.velocity.runtime.parser.node.Node: boolean render(org.apache.velocity.context.InternalContextAdapter,java.io.Writer)>(r2, r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return 1;
    }

    public java.lang.Object execute(java.lang.Object, org.apache.velocity.context.InternalContextAdapter) throws org.apache.velocity.exception.MethodInvocationException
    {
        org.apache.velocity.context.InternalContextAdapter r2;
        java.lang.Object r1;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.velocity.context.InternalContextAdapter;

        return null;
    }

    public int getType()
    {
        int $i0;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $i0 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: int id>;

        return $i0;
    }

    public void setInfo(int)
    {
        int i0;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        i0 := @parameter0: int;

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: int info> = i0;

        return;
    }

    public int getInfo()
    {
        int $i0;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $i0 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: int info>;

        return $i0;
    }

    public void setInvalid()
    {
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        r0.<org.apache.velocity.runtime.parser.node.SimpleNode: boolean invalid> = 1;

        return;
    }

    public boolean isInvalid()
    {
        org.apache.velocity.runtime.parser.node.SimpleNode r0;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $z0 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: boolean invalid>;

        return $z0;
    }

    public int getLine()
    {
        int $i0;
        org.apache.velocity.runtime.parser.Token $r1;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Token first>;

        $i0 = $r1.<org.apache.velocity.runtime.parser.Token: int beginLine>;

        return $i0;
    }

    public int getColumn()
    {
        int $i0;
        org.apache.velocity.runtime.parser.Token $r1;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Token first>;

        $i0 = $r1.<org.apache.velocity.runtime.parser.Token: int beginColumn>;

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.lang.text.StrBuilder $r0, $r9, $r11;
        org.apache.commons.lang.builder.ToStringBuilder $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2;
        org.apache.velocity.runtime.parser.Token $r12, $r13, r14;
        java.lang.String $r8, $r10;
        boolean $z0, $z1;
        org.apache.velocity.runtime.parser.node.SimpleNode r1;

        r1 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $r0 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r0.<org.apache.commons.lang.text.StrBuilder: void <init>()>();

        r14 = virtualinvoke r1.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Token getFirstToken()>();

     label1:
        if r14 == null goto label4;

        $r9 = virtualinvoke $r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>("[");

        $r10 = r14.<org.apache.velocity.runtime.parser.Token: java.lang.String image>;

        $r11 = virtualinvoke $r9.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r10);

        virtualinvoke $r11.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>("]");

        $r12 = r14.<org.apache.velocity.runtime.parser.Token: org.apache.velocity.runtime.parser.Token next>;

        if $r12 == null goto label3;

        $r13 = virtualinvoke r1.<org.apache.velocity.runtime.parser.node.SimpleNode: org.apache.velocity.runtime.parser.Token getLastToken()>();

        $z1 = virtualinvoke r14.<java.lang.Object: boolean equals(java.lang.Object)>($r13);

        if $z1 == 0 goto label2;

        goto label4;

     label2:
        virtualinvoke $r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(", ");

     label3:
        r14 = r14.<org.apache.velocity.runtime.parser.Token: org.apache.velocity.runtime.parser.Token next>;

        goto label1;

     label4:
        $r2 = new org.apache.commons.lang.builder.ToStringBuilder;

        specialinvoke $r2.<org.apache.commons.lang.builder.ToStringBuilder: void <init>(java.lang.Object)>(r1);

        $i0 = virtualinvoke r1.<org.apache.velocity.runtime.parser.node.SimpleNode: int getType()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.lang.builder.ToStringBuilder: org.apache.commons.lang.builder.ToStringBuilder append(java.lang.String,int)>("id", $i0);

        $i1 = virtualinvoke r1.<org.apache.velocity.runtime.parser.node.SimpleNode: int getInfo()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.lang.builder.ToStringBuilder: org.apache.commons.lang.builder.ToStringBuilder append(java.lang.String,int)>("info", $i1);

        $z0 = virtualinvoke r1.<org.apache.velocity.runtime.parser.node.SimpleNode: boolean isInvalid()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.lang.builder.ToStringBuilder: org.apache.commons.lang.builder.ToStringBuilder append(java.lang.String,boolean)>("invalid", $z0);

        $i2 = virtualinvoke r1.<org.apache.velocity.runtime.parser.node.SimpleNode: int jjtGetNumChildren()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.lang.builder.ToStringBuilder: org.apache.commons.lang.builder.ToStringBuilder append(java.lang.String,int)>("children", $i2);

        $r7 = virtualinvoke $r6.<org.apache.commons.lang.builder.ToStringBuilder: org.apache.commons.lang.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("tokens", $r0);

        $r8 = virtualinvoke $r7.<org.apache.commons.lang.builder.ToStringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.String getTemplateName()
    {
        java.lang.String $r1;
        org.apache.velocity.runtime.parser.node.SimpleNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.SimpleNode;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.SimpleNode: java.lang.String templateName>;

        return $r1;
    }
}
