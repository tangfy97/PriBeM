final class com.jidesoft.utils.SwingWorker$6 extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    final java.util.concurrent.atomic.AtomicInteger threadNumber;

    void <init>()
    {
        com.jidesoft.utils.SwingWorker$6 r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: com.jidesoft.utils.SwingWorker$6;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        r0.<com.jidesoft.utils.SwingWorker$6: java.util.concurrent.atomic.AtomicInteger threadNumber> = $r1;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        com.jidesoft.utils.SwingWorker$6 r1;
        java.lang.Runnable r4;
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.lang.Thread $r3;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r0;
        java.lang.String $r5;
        boolean $z0;

        r1 := @this: com.jidesoft.utils.SwingWorker$6;

        r4 := @parameter0: java.lang.Runnable;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("SwingWorker-pool-");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-thread-");

        $r2 = r1.<com.jidesoft.utils.SwingWorker$6: java.util.concurrent.atomic.AtomicInteger threadNumber>;

        $i1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = new java.lang.Thread;

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r4, $r5);

        $z0 = virtualinvoke $r3.<java.lang.Thread: boolean isDaemon()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r3.<java.lang.Thread: void setDaemon(boolean)>(0);

     label1:
        $i2 = virtualinvoke $r3.<java.lang.Thread: int getPriority()>();

        if $i2 == 5 goto label2;

        virtualinvoke $r3.<java.lang.Thread: void setPriority(int)>(5);

     label2:
        return $r3;
    }
}
