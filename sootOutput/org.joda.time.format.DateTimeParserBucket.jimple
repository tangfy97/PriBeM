public class org.joda.time.format.DateTimeParserBucket extends java.lang.Object
{
    private final org.joda.time.Chronology iChrono;
    private final long iMillis;
    private org.joda.time.DateTimeZone iZone;
    private int iOffset;
    private java.util.Locale iLocale;
    private java.lang.Integer iPivotYear;
    private org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields;
    private int iSavedFieldsCount;
    private boolean iSavedFieldsShared;
    private java.lang.Object iSavedState;

    public void <init>(long, org.joda.time.Chronology, java.util.Locale)
    {
        java.util.Locale r2;
        org.joda.time.Chronology r1;
        long l0;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

        r2 := @parameter2: java.util.Locale;

        specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer)>(l0, r1, r2, null);

        return;
    }

    public void <init>(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer)
    {
        org.joda.time.DateTimeZone $r5;
        org.joda.time.format.DateTimeParserBucket$SavedField[] $r1;
        org.joda.time.Chronology $r2, $r3, r7;
        long l0;
        java.lang.Integer r6;
        java.util.Locale r4, $r8;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        l0 := @parameter0: long;

        r7 := @parameter1: org.joda.time.Chronology;

        r4 := @parameter2: java.util.Locale;

        r6 := @parameter3: java.lang.Integer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (org.joda.time.format.DateTimeParserBucket$SavedField)[8];

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = $r1;

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r7);

        r0.<org.joda.time.format.DateTimeParserBucket: long iMillis> = l0;

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono> = $r3;

        if r4 != null goto label1;

        $r8 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        goto label2;

     label1:
        $r8 = r4;

     label2:
        r0.<org.joda.time.format.DateTimeParserBucket: java.util.Locale iLocale> = $r8;

        $r5 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>($r5);

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iPivotYear> = r6;

        return;
    }

    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.Chronology $r1;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>;

        return $r1;
    }

    public java.util.Locale getLocale()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.util.Locale $r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.util.Locale iLocale>;

        return $r1;
    }

    public org.joda.time.DateTimeZone getZone()
    {
        org.joda.time.DateTimeZone $r1;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        return $r1;
    }

    public void setZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r1, $r2, $r3;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null;

        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if r1 != $r2 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = r1;

     label2:
        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = $r3;

        r0.<org.joda.time.format.DateTimeParserBucket: int iOffset> = 0;

        return;
    }

    public int getOffset()
    {
        int $i0;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iOffset>;

        return $i0;
    }

    public void setOffset(int)
    {
        int i0;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        i0 := @parameter0: int;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null;

        r0.<org.joda.time.format.DateTimeParserBucket: int iOffset> = i0;

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = null;

        return;
    }

    public java.lang.Integer getPivotYear()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Integer $r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iPivotYear>;

        return $r1;
    }

    public void setPivotYear(java.lang.Integer)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Integer r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter0: java.lang.Integer;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iPivotYear> = r1;

        return;
    }

    public void saveField(org.joda.time.DateTimeField, int)
    {
        org.joda.time.format.DateTimeParserBucket$SavedField $r1;
        int i0;
        org.joda.time.DateTimeField r2;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r2 := @parameter0: org.joda.time.DateTimeField;

        i0 := @parameter1: int;

        $r1 = new org.joda.time.format.DateTimeParserBucket$SavedField;

        specialinvoke $r1.<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>(org.joda.time.DateTimeField,int)>(r2, i0);

        specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.format.DateTimeParserBucket$SavedField)>($r1);

        return;
    }

    public void saveField(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.format.DateTimeParserBucket$SavedField $r1;
        org.joda.time.Chronology $r3;
        int i0;
        org.joda.time.DateTimeFieldType r2;
        org.joda.time.DateTimeField $r4;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r2 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        $r1 = new org.joda.time.format.DateTimeParserBucket$SavedField;

        $r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>;

        $r4 = virtualinvoke r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3);

        specialinvoke $r1.<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>(org.joda.time.DateTimeField,int)>($r4, i0);

        specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.format.DateTimeParserBucket$SavedField)>($r1);

        return;
    }

    public void saveField(org.joda.time.DateTimeFieldType, java.lang.String, java.util.Locale)
    {
        org.joda.time.format.DateTimeParserBucket$SavedField $r1;
        java.util.Locale r6;
        org.joda.time.Chronology $r3;
        org.joda.time.DateTimeFieldType r2;
        org.joda.time.DateTimeField $r4;
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.String r5;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r2 := @parameter0: org.joda.time.DateTimeFieldType;

        r5 := @parameter1: java.lang.String;

        r6 := @parameter2: java.util.Locale;

        $r1 = new org.joda.time.format.DateTimeParserBucket$SavedField;

        $r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>;

        $r4 = virtualinvoke r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3);

        specialinvoke $r1.<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>(org.joda.time.DateTimeField,java.lang.String,java.util.Locale)>($r4, r5, r6);

        specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.format.DateTimeParserBucket$SavedField)>($r1);

        return;
    }

    private void saveField(org.joda.time.format.DateTimeParserBucket$SavedField)
    {
        org.joda.time.format.DateTimeParserBucket$SavedField[] $r2, r3;
        org.joda.time.format.DateTimeParserBucket$SavedField r1;
        int i0, $i1, $i2, $i3, $i4;
        org.joda.time.format.DateTimeParserBucket r0;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter0: org.joda.time.format.DateTimeParserBucket$SavedField;

        r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>;

        i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>;

        $i1 = lengthof r3;

        if i0 == $i1 goto label1;

        $z0 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>;

        if $z0 == 0 goto label4;

     label1:
        $i2 = lengthof r3;

        if i0 != $i2 goto label2;

        $i3 = i0 * 2;

        goto label3;

     label2:
        $i3 = lengthof r3;

     label3:
        $r2 = newarray (org.joda.time.format.DateTimeParserBucket$SavedField)[$i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r2, 0, i0);

        r3 = $r2;

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = $r2;

        r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0;

     label4:
        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null;

        r3[i0] = r1;

        $i4 = i0 + 1;

        r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = $i4;

        return;
    }

    public java.lang.Object saveState()
    {
        org.joda.time.format.DateTimeParserBucket$SavedState $r3;
        java.lang.Object $r1, $r2;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>;

        if $r1 != null goto label1;

        $r3 = new org.joda.time.format.DateTimeParserBucket$SavedState;

        specialinvoke $r3.<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>(r0);

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = $r3;

     label1:
        $r2 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>;

        return $r2;
    }

    public boolean restoreState(java.lang.Object)
    {
        org.joda.time.format.DateTimeParserBucket$SavedState $r2;
        java.lang.Object r0;
        org.joda.time.format.DateTimeParserBucket r1;
        boolean $z0, $z1;

        r1 := @this: org.joda.time.format.DateTimeParserBucket;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.joda.time.format.DateTimeParserBucket$SavedState;

        if $z0 == 0 goto label1;

        $r2 = (org.joda.time.format.DateTimeParserBucket$SavedState) r0;

        $z1 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>(r1);

        if $z1 == 0 goto label1;

        r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = r0;

        return 1;

     label1:
        return 0;
    }

    public long computeMillis()
    {
        long $l0;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $l0 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(0, null);

        return $l0;
    }

    public long computeMillis(boolean)
    {
        long $l0;
        org.joda.time.format.DateTimeParserBucket r0;
        boolean z0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        z0 := @parameter0: boolean;

        $l0 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(z0, null);

        return $l0;
    }

    public long computeMillis(boolean, java.lang.String)
    {
        org.joda.time.DateTimeZone $r1, $r2, $r3, $r6;
        boolean $z0, z1;
        org.joda.time.IllegalFieldValueException $r21;
        org.joda.time.format.DateTimeParserBucket$SavedField[] $r18, $r20, r27;
        long $l2, $l5, l6, l8;
        java.lang.StringBuffer $r4, $r5, $r7, $r8, $r12, $r13, $r14, $r15, $r16, $r22, $r23, $r24, $r25;
        int i0, $i1, $i3, $i4, i7;
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.String $r9, r10, $r26, r28;
        java.lang.IllegalArgumentException $r11;
        org.joda.time.format.DateTimeParserBucket$SavedField $r17;
        java.lang.Object $r19;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        z1 := @parameter0: boolean;

        r10 := @parameter1: java.lang.String;

        r27 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>;

        i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>;

        $z0 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>;

        if $z0 == 0 goto label01;

        $r18 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>;

        $r19 = virtualinvoke $r18.<java.lang.Object: java.lang.Object clone()>();

        $r20 = (org.joda.time.format.DateTimeParserBucket$SavedField[]) $r19;

        r27 = $r20;

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = $r20;

        r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0;

     label01:
        staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(java.lang.Comparable[],int)>(r27, i0);

        l6 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>;

     label02:
        i7 = 0;

     label03:
        if i7 >= i0 goto label04;

        $r17 = r27[i7];

        l6 = virtualinvoke $r17.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>(l6, z1);

        i7 = i7 + 1;

        goto label03;

     label04:
        goto label07;

     label05:
        $r21 := @caughtexception;

        if r10 == null goto label06;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot parse \"");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r10);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r21.<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>($r26);

     label06:
        throw $r21;

     label07:
        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        if $r1 != null goto label08;

        $i4 = r0.<org.joda.time.format.DateTimeParserBucket: int iOffset>;

        $l5 = (long) $i4;

        l8 = l6 - $l5;

        goto label10;

     label08:
        $r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l6);

        $l2 = (long) $i1;

        l8 = l6 - $l2;

        $r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        $i3 = virtualinvoke $r3.<org.joda.time.DateTimeZone: int getOffset(long)>(l8);

        if $i1 == $i3 goto label10;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal instant due to time zone offset transition (");

        $r6 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        r28 = $r9;

        if r10 == null goto label09;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot parse \"");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r10);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\": ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        r28 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

     label09:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r28);

        throw $r11;

     label10:
        return l8;

        catch org.joda.time.IllegalFieldValueException from label02 to label04 with label05;
    }

    private static void sort(java.lang.Comparable[], int)
    {
        java.lang.Comparable[] r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6, $i8;
        java.lang.Comparable $r1, $r2, r3, $r4;

        r0 := @parameter0: java.lang.Comparable[];

        i0 := @parameter1: int;

        if i0 <= 10 goto label1;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int)>(r0, 0, i0);

        goto label5;

     label1:
        i5 = 0;

     label2:
        if i5 >= i0 goto label5;

        i6 = i5;

     label3:
        if i6 <= 0 goto label4;

        $i1 = i6 - 1;

        $r2 = r0[$i1];

        $r1 = r0[i6];

        $i2 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1);

        if $i2 <= 0 goto label4;

        r3 = r0[i6];

        $i3 = i6 - 1;

        $r4 = r0[$i3];

        r0[i6] = $r4;

        $i4 = i6 - 1;

        r0[$i4] = r3;

        $i8 = (int) -1;

        i6 = i6 + $i8;

        goto label3;

     label4:
        i5 = i5 + 1;

        goto label2;

     label5:
        return;
    }

    static org.joda.time.DateTimeZone access$000(org.joda.time.format.DateTimeParserBucket)
    {
        org.joda.time.DateTimeZone $r1;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        return $r1;
    }

    static int access$100(org.joda.time.format.DateTimeParserBucket)
    {
        int $i0;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iOffset>;

        return $i0;
    }

    static org.joda.time.format.DateTimeParserBucket$SavedField[] access$200(org.joda.time.format.DateTimeParserBucket)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.format.DateTimeParserBucket$SavedField[] $r1;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>;

        return $r1;
    }

    static int access$300(org.joda.time.format.DateTimeParserBucket)
    {
        int $i0;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>;

        return $i0;
    }

    static org.joda.time.DateTimeZone access$002(org.joda.time.format.DateTimeParserBucket, org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r1;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter1: org.joda.time.DateTimeZone;

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = r1;

        return r1;
    }

    static int access$102(org.joda.time.format.DateTimeParserBucket, int)
    {
        int i0;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        i0 := @parameter1: int;

        r0.<org.joda.time.format.DateTimeParserBucket: int iOffset> = i0;

        return i0;
    }

    static org.joda.time.format.DateTimeParserBucket$SavedField[] access$202(org.joda.time.format.DateTimeParserBucket, org.joda.time.format.DateTimeParserBucket$SavedField[])
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.format.DateTimeParserBucket$SavedField[] r1;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter1: org.joda.time.format.DateTimeParserBucket$SavedField[];

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = r1;

        return r1;
    }

    static boolean access$402(org.joda.time.format.DateTimeParserBucket, boolean)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        boolean z0;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        z0 := @parameter1: boolean;

        r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = z0;

        return z0;
    }

    static int access$302(org.joda.time.format.DateTimeParserBucket, int)
    {
        int i0;
        org.joda.time.format.DateTimeParserBucket r0;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        i0 := @parameter1: int;

        r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = i0;

        return i0;
    }
}
