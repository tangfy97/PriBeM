public class org.bson.BSONEncoder extends java.lang.Object
{
    static final boolean DEBUG;
    protected org.bson.io.OutputBuffer _buf;
    private java.nio.CharBuffer _stringC;
    private java.nio.ByteBuffer _stringB;
    private java.nio.charset.CharsetEncoder _encoder;

    public void <init>()
    {
        byte[] $r3;
        java.nio.charset.Charset $r5;
        java.nio.CharBuffer $r2;
        java.nio.charset.CharsetEncoder $r6;
        char[] $r1;
        java.nio.ByteBuffer $r4;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (char)[257];

        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>($r1);

        r0.<org.bson.BSONEncoder: java.nio.CharBuffer _stringC> = $r2;

        $r3 = newarray (byte)[1025];

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r3);

        r0.<org.bson.BSONEncoder: java.nio.ByteBuffer _stringB> = $r4;

        $r5 = <org.bson.BSON: java.nio.charset.Charset _utf8>;

        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        r0.<org.bson.BSONEncoder: java.nio.charset.CharsetEncoder _encoder> = $r6;

        return;
    }

    public byte[] encode(org.bson.BSONObject)
    {
        byte[] $r3;
        org.bson.BSONObject r2;
        org.bson.io.BasicOutputBuffer $r0;
        org.bson.BSONEncoder r1;

        r1 := @this: org.bson.BSONEncoder;

        r2 := @parameter0: org.bson.BSONObject;

        $r0 = new org.bson.io.BasicOutputBuffer;

        specialinvoke $r0.<org.bson.io.BasicOutputBuffer: void <init>()>();

        virtualinvoke r1.<org.bson.BSONEncoder: void set(org.bson.io.OutputBuffer)>($r0);

        virtualinvoke r1.<org.bson.BSONEncoder: int putObject(org.bson.BSONObject)>(r2);

        virtualinvoke r1.<org.bson.BSONEncoder: void done()>();

        $r3 = virtualinvoke $r0.<org.bson.io.BasicOutputBuffer: byte[] toByteArray()>();

        return $r3;
    }

    public void set(org.bson.io.OutputBuffer)
    {
        java.lang.IllegalStateException $r3;
        org.bson.io.OutputBuffer $r1, r2;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r2 := @parameter0: org.bson.io.OutputBuffer;

        $r1 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        if $r1 == null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("in the middle of something");

        throw $r3;

     label1:
        r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf> = r2;

        return;
    }

    public void done()
    {
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf> = null;

        return;
    }

    protected boolean handleSpecialObjects(java.lang.String, org.bson.BSONObject)
    {
        org.bson.BSONObject r2;
        java.lang.String r1;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.bson.BSONObject;

        return 0;
    }

    protected boolean putSpecial(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        return 0;
    }

    public int putObject(org.bson.BSONObject)
    {
        int $i0;
        org.bson.BSONObject r1;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: org.bson.BSONObject;

        $i0 = virtualinvoke r0.<org.bson.BSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>(null, r1);

        return $i0;
    }

    int putObject(java.lang.String, org.bson.BSONObject)
    {
        java.lang.NullPointerException $r15;
        byte b8, b9, b10, b11;
        org.bson.io.OutputBuffer $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r14;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z7, $z8, $z9, $z10;
        java.util.Set $r18;
        org.bson.BSONEncoder r1;
        java.util.List r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r3, r11;
        java.util.Iterator $r19;
        org.bson.BSONObject r0;
        java.lang.Object $r10, $r12, $r13, $r17;

        r1 := @this: org.bson.BSONEncoder;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.bson.BSONObject;

        if r0 != null goto label01;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("can\'t save a null object");

        throw $r15;

     label01:
        $r2 = r1.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i0 = virtualinvoke $r2.<org.bson.io.OutputBuffer: int getPosition()>();

        b8 = 3;

        b11 = 3;

        b10 = 3;

        b9 = 3;

        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label02;

        b8 = 4;

        b11 = 4;

        b10 = 4;

        b9 = 4;

     label02:
        $z1 = virtualinvoke r1.<org.bson.BSONEncoder: boolean handleSpecialObjects(java.lang.String,org.bson.BSONObject)>(r3, r0);

        if $z1 == 0 goto label03;

        $r14 = r1.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i6 = virtualinvoke $r14.<org.bson.io.OutputBuffer: int getPosition()>();

        $i7 = $i6 - $i0;

        return $i7;

     label03:
        if r3 == null goto label04;

        virtualinvoke r1.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(b10, r3);

     label04:
        $r4 = r1.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i1 = virtualinvoke $r4.<org.bson.io.OutputBuffer: int getPosition()>();

        $r5 = r1.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r5.<org.bson.io.OutputBuffer: void writeInt(int)>(0);

        r16 = null;

        if b9 != 3 goto label05;

        if r3 != null goto label05;

        $z10 = 1;

        $z9 = 1;

        goto label06;

     label05:
        $z10 = 0;

        $z9 = 0;

     label06:
        z2 = $z10;

        if b11 != 3 goto label08;

        if $z9 == 0 goto label07;

        $z5 = interfaceinvoke r0.<org.bson.BSONObject: boolean containsField(java.lang.String)>("_id");

        if $z5 == 0 goto label07;

        $r13 = interfaceinvoke r0.<org.bson.BSONObject: java.lang.Object get(java.lang.String)>("_id");

        virtualinvoke r1.<org.bson.BSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>("_id", $r13);

     label07:
        $r17 = interfaceinvoke r0.<org.bson.BSONObject: java.lang.Object get(java.lang.String)>("_transientFields");

        $z7 = $r17 instanceof java.util.List;

        if $z7 == 0 goto label08;

        r16 = (java.util.List) $r17;

     label08:
        $r18 = interfaceinvoke r0.<org.bson.BSONObject: java.util.Set keySet()>();

        $r19 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z8 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label12;

        $r10 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r10;

        if z2 == 0 goto label10;

        $z4 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("_id");

        if $z4 == 0 goto label10;

        goto label09;

     label10:
        if r16 == null goto label11;

        $z3 = interfaceinvoke r16.<java.util.List: boolean contains(java.lang.Object)>(r11);

        if $z3 == 0 goto label11;

        goto label09;

     label11:
        $r12 = interfaceinvoke r0.<org.bson.BSONObject: java.lang.Object get(java.lang.String)>(r11);

        virtualinvoke r1.<org.bson.BSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>(r11, $r12);

        goto label09;

     label12:
        $r6 = r1.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r6.<org.bson.io.OutputBuffer: void write(int)>(0);

        $r8 = r1.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $r7 = r1.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i2 = virtualinvoke $r7.<org.bson.io.OutputBuffer: int getPosition()>();

        $i3 = $i2 - $i1;

        virtualinvoke $r8.<org.bson.io.OutputBuffer: void writeInt(int,int)>($i1, $i3);

        $r9 = r1.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i4 = virtualinvoke $r9.<org.bson.io.OutputBuffer: int getPosition()>();

        $i5 = $i4 - $i0;

        return $i5;
    }

    protected void _putObjectField(java.lang.String, java.lang.Object)
    {
        byte[] $r19, $r20;
        java.util.Date $r29;
        java.util.Map $r22;
        org.bson.types.BSONTimestamp $r12;
        org.bson.types.CodeWScope $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20;
        java.util.UUID $r17;
        org.bson.BSONEncoder r3;
        java.util.List $r16;
        org.bson.types.Code $r10;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.util.regex.Pattern $r23;
        java.lang.Object[] $r14, $r15;
        java.lang.Iterable $r21;
        java.lang.Boolean $r24;
        java.lang.String r0, $r9, $r27, $r30;
        java.lang.Number $r28;
        org.bson.types.Binary $r18;
        org.bson.BSONObject $r25;
        java.lang.IllegalArgumentException $r4;
        org.bson.types.Symbol $r13;
        org.bson.types.ObjectId $r26;
        java.lang.Object $r1, r31;
        java.lang.Class $r2, $r7;

        r3 := @this: org.bson.BSONEncoder;

        r0 := @parameter0: java.lang.String;

        r31 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("_transientFields");

        if $z0 == 0 goto label01;

        return;

     label01:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("$where");

        if $z1 == 0 goto label02;

        $z20 = r31 instanceof java.lang.String;

        if $z20 == 0 goto label02;

        virtualinvoke r3.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(13, r0);

        $r30 = virtualinvoke r31.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r3.<org.bson.BSONEncoder: void _putValueString(java.lang.String)>($r30);

        return;

     label02:
        $r1 = staticinvoke <org.bson.BSON: java.lang.Object applyEncodingHooks(java.lang.Object)>(r31);

        if $r1 != null goto label03;

        virtualinvoke r3.<org.bson.BSONEncoder: void putNull(java.lang.String)>(r0);

        goto label22;

     label03:
        $z2 = $r1 instanceof java.util.Date;

        if $z2 == 0 goto label04;

        $r29 = (java.util.Date) $r1;

        virtualinvoke r3.<org.bson.BSONEncoder: void putDate(java.lang.String,java.util.Date)>(r0, $r29);

        goto label22;

     label04:
        $z3 = $r1 instanceof java.lang.Number;

        if $z3 == 0 goto label05;

        $r28 = (java.lang.Number) $r1;

        virtualinvoke r3.<org.bson.BSONEncoder: void putNumber(java.lang.String,java.lang.Number)>(r0, $r28);

        goto label22;

     label05:
        $z4 = $r1 instanceof java.lang.String;

        if $z4 == 0 goto label06;

        $r27 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r3.<org.bson.BSONEncoder: void putString(java.lang.String,java.lang.String)>(r0, $r27);

        goto label22;

     label06:
        $z5 = $r1 instanceof org.bson.types.ObjectId;

        if $z5 == 0 goto label07;

        $r26 = (org.bson.types.ObjectId) $r1;

        virtualinvoke r3.<org.bson.BSONEncoder: void putObjectId(java.lang.String,org.bson.types.ObjectId)>(r0, $r26);

        goto label22;

     label07:
        $z6 = $r1 instanceof org.bson.BSONObject;

        if $z6 == 0 goto label08;

        $r25 = (org.bson.BSONObject) $r1;

        virtualinvoke r3.<org.bson.BSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>(r0, $r25);

        goto label22;

     label08:
        $z7 = $r1 instanceof java.lang.Boolean;

        if $z7 == 0 goto label09;

        $r24 = (java.lang.Boolean) $r1;

        virtualinvoke r3.<org.bson.BSONEncoder: void putBoolean(java.lang.String,java.lang.Boolean)>(r0, $r24);

        goto label22;

     label09:
        $z8 = $r1 instanceof java.util.regex.Pattern;

        if $z8 == 0 goto label10;

        $r23 = (java.util.regex.Pattern) $r1;

        specialinvoke r3.<org.bson.BSONEncoder: void putPattern(java.lang.String,java.util.regex.Pattern)>(r0, $r23);

        goto label22;

     label10:
        $z9 = $r1 instanceof java.util.Map;

        if $z9 == 0 goto label11;

        $r22 = (java.util.Map) $r1;

        specialinvoke r3.<org.bson.BSONEncoder: void putMap(java.lang.String,java.util.Map)>(r0, $r22);

        goto label22;

     label11:
        $z10 = $r1 instanceof java.lang.Iterable;

        if $z10 == 0 goto label12;

        $r21 = (java.lang.Iterable) $r1;

        specialinvoke r3.<org.bson.BSONEncoder: void putIterable(java.lang.String,java.lang.Iterable)>(r0, $r21);

        goto label22;

     label12:
        $z11 = $r1 instanceof byte[];

        if $z11 == 0 goto label13;

        $r19 = (byte[]) $r1;

        $r20 = (byte[]) $r19;

        virtualinvoke r3.<org.bson.BSONEncoder: void putBinary(java.lang.String,byte[])>(r0, $r20);

        goto label22;

     label13:
        $z12 = $r1 instanceof org.bson.types.Binary;

        if $z12 == 0 goto label14;

        $r18 = (org.bson.types.Binary) $r1;

        virtualinvoke r3.<org.bson.BSONEncoder: void putBinary(java.lang.String,org.bson.types.Binary)>(r0, $r18);

        goto label22;

     label14:
        $z13 = $r1 instanceof java.util.UUID;

        if $z13 == 0 goto label15;

        $r17 = (java.util.UUID) $r1;

        virtualinvoke r3.<org.bson.BSONEncoder: void putUUID(java.lang.String,java.util.UUID)>(r0, $r17);

        goto label22;

     label15:
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $z14 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>();

        if $z14 == 0 goto label16;

        $r14 = (java.lang.Object[]) $r1;

        $r15 = (java.lang.Object[]) $r14;

        $r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r15);

        specialinvoke r3.<org.bson.BSONEncoder: void putIterable(java.lang.String,java.lang.Iterable)>(r0, $r16);

        goto label22;

     label16:
        $z15 = $r1 instanceof org.bson.types.Symbol;

        if $z15 == 0 goto label17;

        $r13 = (org.bson.types.Symbol) $r1;

        virtualinvoke r3.<org.bson.BSONEncoder: void putSymbol(java.lang.String,org.bson.types.Symbol)>(r0, $r13);

        goto label22;

     label17:
        $z16 = $r1 instanceof org.bson.types.BSONTimestamp;

        if $z16 == 0 goto label18;

        $r12 = (org.bson.types.BSONTimestamp) $r1;

        virtualinvoke r3.<org.bson.BSONEncoder: void putTimestamp(java.lang.String,org.bson.types.BSONTimestamp)>(r0, $r12);

        goto label22;

     label18:
        $z17 = $r1 instanceof org.bson.types.CodeWScope;

        if $z17 == 0 goto label19;

        $r11 = (org.bson.types.CodeWScope) $r1;

        virtualinvoke r3.<org.bson.BSONEncoder: void putCodeWScope(java.lang.String,org.bson.types.CodeWScope)>(r0, $r11);

        goto label22;

     label19:
        $z18 = $r1 instanceof org.bson.types.Code;

        if $z18 == 0 goto label20;

        $r10 = (org.bson.types.Code) $r1;

        virtualinvoke r3.<org.bson.BSONEncoder: void putCode(java.lang.String,org.bson.types.Code)>(r0, $r10);

        goto label22;

     label20:
        $z19 = virtualinvoke r3.<org.bson.BSONEncoder: boolean putSpecial(java.lang.String,java.lang.Object)>(r0, $r1);

        if $z19 == 0 goto label21;

        goto label22;

     label21:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t serialize ");

        $r7 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label22:
        return;
    }

    private void putIterable(java.lang.String, java.lang.Iterable)
    {
        java.lang.Iterable r4;
        org.bson.io.OutputBuffer $r2, $r3, $r6, $r7, $r8;
        int $i0, $i1, $i2, i3;
        java.lang.String r1, $r10;
        boolean $z0;
        java.util.Iterator $r5;
        org.bson.BSONEncoder r0;
        java.lang.Object $r9;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Iterable;

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(4, r1);

        $r2 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i0 = virtualinvoke $r2.<org.bson.io.OutputBuffer: int getPosition()>();

        $r3 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r3.<org.bson.io.OutputBuffer: void writeInt(int)>(0);

        i3 = 0;

        $r5 = interfaceinvoke r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i3);

        virtualinvoke r0.<org.bson.BSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>($r10, $r9);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r6 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r6.<org.bson.io.OutputBuffer: void write(int)>(0);

        $r8 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $r7 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i1 = virtualinvoke $r7.<org.bson.io.OutputBuffer: int getPosition()>();

        $i2 = $i1 - $i0;

        virtualinvoke $r8.<org.bson.io.OutputBuffer: void writeInt(int,int)>($i0, $i2);

        return;
    }

    private void putMap(java.lang.String, java.util.Map)
    {
        org.bson.io.OutputBuffer $r2, $r3, $r7, $r8, $r9;
        java.util.Map r4;
        int $i0, $i1, $i2;
        java.lang.String r1, $r13;
        boolean $z0;
        java.util.Map$Entry r11;
        java.util.Iterator $r6;
        java.util.Set $r5;
        org.bson.BSONEncoder r0;
        java.lang.Object $r10, $r12, $r14;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.util.Map;

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(3, r1);

        $r2 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i0 = virtualinvoke $r2.<org.bson.io.OutputBuffer: int getPosition()>();

        $r3 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r3.<org.bson.io.OutputBuffer: void writeInt(int)>(0);

        $r5 = interfaceinvoke r4.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) $r10;

        $r12 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        $r14 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<org.bson.BSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>($r13, $r14);

        goto label1;

     label2:
        $r7 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r7.<org.bson.io.OutputBuffer: void write(int)>(0);

        $r9 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $r8 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i1 = virtualinvoke $r8.<org.bson.io.OutputBuffer: int getPosition()>();

        $i2 = $i1 - $i0;

        virtualinvoke $r9.<org.bson.io.OutputBuffer: void writeInt(int,int)>($i0, $i2);

        return;
    }

    protected void putNull(java.lang.String)
    {
        java.lang.String r1;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(10, r1);

        return;
    }

    protected void putUndefined(java.lang.String)
    {
        java.lang.String r1;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(6, r1);

        return;
    }

    protected void putTimestamp(java.lang.String, org.bson.types.BSONTimestamp)
    {
        org.bson.io.OutputBuffer $r3, $r4;
        int $i0, $i1;
        org.bson.types.BSONTimestamp r2;
        java.lang.String r1;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.bson.types.BSONTimestamp;

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(17, r1);

        $r3 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i0 = virtualinvoke r2.<org.bson.types.BSONTimestamp: int getInc()>();

        virtualinvoke $r3.<org.bson.io.OutputBuffer: void writeInt(int)>($i0);

        $r4 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i1 = virtualinvoke r2.<org.bson.types.BSONTimestamp: int getTime()>();

        virtualinvoke $r4.<org.bson.io.OutputBuffer: void writeInt(int)>($i1);

        return;
    }

    protected void putCodeWScope(java.lang.String, org.bson.types.CodeWScope)
    {
        org.bson.BSONObject $r6;
        org.bson.BSONEncoder r0;
        org.bson.io.OutputBuffer $r2, $r3, $r7, $r8;
        int $i0, $i1, $i2;
        java.lang.String r1, $r5;
        org.bson.types.CodeWScope r4;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.bson.types.CodeWScope;

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(15, r1);

        $r2 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i0 = virtualinvoke $r2.<org.bson.io.OutputBuffer: int getPosition()>();

        $r3 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r3.<org.bson.io.OutputBuffer: void writeInt(int)>(0);

        $r5 = virtualinvoke r4.<org.bson.types.CodeWScope: java.lang.String getCode()>();

        virtualinvoke r0.<org.bson.BSONEncoder: void _putValueString(java.lang.String)>($r5);

        $r6 = virtualinvoke r4.<org.bson.types.CodeWScope: org.bson.BSONObject getScope()>();

        virtualinvoke r0.<org.bson.BSONEncoder: int putObject(org.bson.BSONObject)>($r6);

        $r8 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $r7 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i1 = virtualinvoke $r7.<org.bson.io.OutputBuffer: int getPosition()>();

        $i2 = $i1 - $i0;

        virtualinvoke $r8.<org.bson.io.OutputBuffer: void writeInt(int,int)>($i0, $i2);

        return;
    }

    protected void putCode(java.lang.String, org.bson.types.Code)
    {
        org.bson.io.OutputBuffer $r2;
        org.bson.types.Code r3;
        java.lang.String r1, $r4;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.bson.types.Code;

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(13, r1);

        $r2 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r2.<org.bson.io.OutputBuffer: int getPosition()>();

        $r4 = virtualinvoke r3.<org.bson.types.Code: java.lang.String getCode()>();

        virtualinvoke r0.<org.bson.BSONEncoder: void _putValueString(java.lang.String)>($r4);

        return;
    }

    protected void putBoolean(java.lang.String, java.lang.Boolean)
    {
        byte $b0;
        org.bson.io.OutputBuffer $r3;
        java.lang.Boolean r2;
        java.lang.String r1;
        org.bson.BSONEncoder r0;
        boolean $z0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Boolean;

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(8, r1);

        $r3 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        virtualinvoke $r3.<org.bson.io.OutputBuffer: void write(int)>($b0);

        return;
    }

    protected void putDate(java.lang.String, java.util.Date)
    {
        org.bson.io.OutputBuffer $r3;
        java.util.Date r2;
        long $l0;
        java.lang.String r1;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Date;

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(9, r1);

        $r3 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $l0 = virtualinvoke r2.<java.util.Date: long getTime()>();

        virtualinvoke $r3.<org.bson.io.OutputBuffer: void writeLong(long)>($l0);

        return;
    }

    protected void putNumber(java.lang.String, java.lang.Number)
    {
        long $l0;
        org.bson.io.OutputBuffer $r3, $r4, $r11;
        int $i1;
        java.lang.String r2, $r10;
        java.lang.Number r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        double $d0;
        java.lang.IllegalArgumentException $r5;
        org.bson.BSONEncoder r1;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.Class $r8;

        r1 := @this: org.bson.BSONEncoder;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Number;

        $z0 = r0 instanceof java.lang.Integer;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.Short;

        if $z1 != 0 goto label1;

        $z2 = r0 instanceof java.lang.Byte;

        if $z2 != 0 goto label1;

        $z3 = r0 instanceof java.util.concurrent.atomic.AtomicInteger;

        if $z3 == 0 goto label2;

     label1:
        virtualinvoke r1.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(16, r2);

        $r11 = r1.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i1 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        virtualinvoke $r11.<org.bson.io.OutputBuffer: void writeInt(int)>($i1);

        goto label7;

     label2:
        $z4 = r0 instanceof java.lang.Long;

        if $z4 != 0 goto label3;

        $z5 = r0 instanceof java.util.concurrent.atomic.AtomicLong;

        if $z5 == 0 goto label4;

     label3:
        virtualinvoke r1.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(18, r2);

        $r3 = r1.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        virtualinvoke $r3.<org.bson.io.OutputBuffer: void writeLong(long)>($l0);

        goto label7;

     label4:
        $z6 = r0 instanceof java.lang.Float;

        if $z6 != 0 goto label5;

        $z7 = r0 instanceof java.lang.Double;

        if $z7 == 0 goto label6;

     label5:
        virtualinvoke r1.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(1, r2);

        $r4 = r1.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        virtualinvoke $r4.<org.bson.io.OutputBuffer: void writeDouble(double)>($d0);

        goto label7;

     label6:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t serialize ");

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label7:
        return;
    }

    protected void putBinary(java.lang.String, byte[])
    {
        byte[] r2;
        org.bson.io.OutputBuffer $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r1;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(5, r1);

        $r3 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i0 = lengthof r2;

        $i1 = 4 + $i0;

        virtualinvoke $r3.<org.bson.io.OutputBuffer: void writeInt(int)>($i1);

        $r4 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r4.<org.bson.io.OutputBuffer: void write(int)>(2);

        $r5 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i2 = lengthof r2;

        virtualinvoke $r5.<org.bson.io.OutputBuffer: void writeInt(int)>($i2);

        $r6 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i3 = virtualinvoke $r6.<org.bson.io.OutputBuffer: int getPosition()>();

        $r7 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r7.<org.bson.io.OutputBuffer: void write(byte[])>(r2);

        $r8 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i4 = virtualinvoke $r8.<org.bson.io.OutputBuffer: int getPosition()>();

        $i6 = $i4 - $i3;

        $i5 = lengthof r2;

        staticinvoke <com.mongodb.util.MyAsserts: void assertEquals(int,int)>($i6, $i5);

        return;
    }

    protected void putBinary(java.lang.String, org.bson.types.Binary)
    {
        byte[] $r6;
        org.bson.types.Binary r2;
        org.bson.BSONEncoder r0;
        byte $b1;
        org.bson.io.OutputBuffer $r3, $r4, $r5;
        int $i0, $i2;
        java.lang.String r1;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.bson.types.Binary;

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(5, r1);

        $r3 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i0 = virtualinvoke r2.<org.bson.types.Binary: int length()>();

        virtualinvoke $r3.<org.bson.io.OutputBuffer: void writeInt(int)>($i0);

        $r4 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $b1 = virtualinvoke r2.<org.bson.types.Binary: byte getType()>();

        $i2 = (int) $b1;

        virtualinvoke $r4.<org.bson.io.OutputBuffer: void write(int)>($i2);

        $r5 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $r6 = virtualinvoke r2.<org.bson.types.Binary: byte[] getData()>();

        virtualinvoke $r5.<org.bson.io.OutputBuffer: void write(byte[])>($r6);

        return;
    }

    protected void putUUID(java.lang.String, java.util.UUID)
    {
        long $l0, $l1;
        java.util.UUID r4;
        org.bson.BSONEncoder r0;
        org.bson.io.OutputBuffer $r2, $r3, $r5, $r6;
        java.lang.String r1;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.util.UUID;

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(5, r1);

        $r2 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r2.<org.bson.io.OutputBuffer: void writeInt(int)>(16);

        $r3 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r3.<org.bson.io.OutputBuffer: void write(int)>(3);

        $r5 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $l0 = virtualinvoke r4.<java.util.UUID: long getMostSignificantBits()>();

        virtualinvoke $r5.<org.bson.io.OutputBuffer: void writeLong(long)>($l0);

        $r6 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $l1 = virtualinvoke r4.<java.util.UUID: long getLeastSignificantBits()>();

        virtualinvoke $r6.<org.bson.io.OutputBuffer: void writeLong(long)>($l1);

        return;
    }

    protected void putSymbol(java.lang.String, org.bson.types.Symbol)
    {
        java.lang.String r1, $r3;
        org.bson.types.Symbol r2;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.bson.types.Symbol;

        $r3 = virtualinvoke r2.<org.bson.types.Symbol: java.lang.String getSymbol()>();

        specialinvoke r0.<org.bson.BSONEncoder: void _putString(java.lang.String,java.lang.String,byte)>(r1, $r3, 14);

        return;
    }

    protected void putString(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.bson.BSONEncoder: void _putString(java.lang.String,java.lang.String,byte)>(r1, r2, 2);

        return;
    }

    private void _putString(java.lang.String, java.lang.String, byte)
    {
        byte b0;
        java.lang.String r1, r2;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        b0 := @parameter2: byte;

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(b0, r1);

        virtualinvoke r0.<org.bson.BSONEncoder: void _putValueString(java.lang.String)>(r2);

        return;
    }

    protected void putObjectId(java.lang.String, org.bson.types.ObjectId)
    {
        org.bson.BSONEncoder r0;
        org.bson.io.OutputBuffer $r3, $r4, $r5;
        int $i0, $i1, $i2;
        org.bson.types.ObjectId r2;
        java.lang.String r1;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.bson.types.ObjectId;

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(7, r1);

        $r3 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i0 = virtualinvoke r2.<org.bson.types.ObjectId: int _time()>();

        virtualinvoke $r3.<org.bson.io.OutputBuffer: void writeInt(int)>($i0);

        $r4 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i1 = virtualinvoke r2.<org.bson.types.ObjectId: int _machine()>();

        virtualinvoke $r4.<org.bson.io.OutputBuffer: void writeInt(int)>($i1);

        $r5 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i2 = virtualinvoke r2.<org.bson.types.ObjectId: int _inc()>();

        virtualinvoke $r5.<org.bson.io.OutputBuffer: void writeInt(int)>($i2);

        return;
    }

    private void putPattern(java.lang.String, java.util.regex.Pattern)
    {
        int $i0;
        java.lang.String r1, $r3, $r4;
        java.util.regex.Pattern r2;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.regex.Pattern;

        virtualinvoke r0.<org.bson.BSONEncoder: void _put(byte,java.lang.String)>(11, r1);

        $r3 = virtualinvoke r2.<java.util.regex.Pattern: java.lang.String pattern()>();

        virtualinvoke r0.<org.bson.BSONEncoder: int _put(java.lang.String)>($r3);

        $i0 = virtualinvoke r2.<java.util.regex.Pattern: int flags()>();

        $r4 = staticinvoke <org.bson.BSON: java.lang.String regexFlags(int)>($i0);

        virtualinvoke r0.<org.bson.BSONEncoder: int _put(java.lang.String)>($r4);

        return;
    }

    protected void _put(byte, java.lang.String)
    {
        byte b0;
        org.bson.io.OutputBuffer $r1;
        int $i1;
        java.lang.String r2;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        b0 := @parameter0: byte;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i1 = (int) b0;

        virtualinvoke $r1.<org.bson.io.OutputBuffer: void write(int)>($i1);

        virtualinvoke r0.<org.bson.BSONEncoder: int _put(java.lang.String)>(r2);

        return;
    }

    protected void _putValueString(java.lang.String)
    {
        org.bson.io.OutputBuffer $r1, $r2, $r4;
        int $i0, $i1;
        java.lang.String r3;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $i0 = virtualinvoke $r1.<org.bson.io.OutputBuffer: int getPosition()>();

        $r2 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r2.<org.bson.io.OutputBuffer: void writeInt(int)>(0);

        $i1 = virtualinvoke r0.<org.bson.BSONEncoder: int _put(java.lang.String)>(r3);

        $r4 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r4.<org.bson.io.OutputBuffer: void writeInt(int,int)>($i0, $i1);

        return;
    }

    void _reset(java.nio.Buffer)
    {
        int $i0;
        java.nio.Buffer r0;
        org.bson.BSONEncoder r1;

        r1 := @this: org.bson.BSONEncoder;

        r0 := @parameter0: java.nio.Buffer;

        virtualinvoke r0.<java.nio.Buffer: java.nio.Buffer position(int)>(0);

        $i0 = virtualinvoke r0.<java.nio.Buffer: int capacity()>();

        virtualinvoke r0.<java.nio.Buffer: java.nio.Buffer limit(int)>($i0);

        return;
    }

    protected int _put(java.lang.String)
    {
        byte[] $r16;
        java.nio.ByteBuffer $r4, $r8, $r13, $r14, $r17;
        org.bson.io.OutputBuffer $r2, $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.nio.CharBuffer $r3, $r5, $r6, $r7, $r9;
        org.bson.BSONEncoder r1;
        java.nio.charset.CharsetEncoder $r10;
        java.nio.charset.CoderResult $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        java.lang.String r0;
        java.lang.RuntimeException $r18, $r19, $r20;
        java.lang.IllegalArgumentException $r12;

        r1 := @this: org.bson.BSONEncoder;

        r0 := @parameter0: java.lang.String;

        i8 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i9 = 0;

     label1:
        if i9 >= $i0 goto label7;

        $r3 = r1.<org.bson.BSONEncoder: java.nio.CharBuffer _stringC>;

        virtualinvoke r1.<org.bson.BSONEncoder: void _reset(java.nio.Buffer)>($r3);

        $r4 = r1.<org.bson.BSONEncoder: java.nio.ByteBuffer _stringB>;

        virtualinvoke r1.<org.bson.BSONEncoder: void _reset(java.nio.Buffer)>($r4);

        $r5 = r1.<org.bson.BSONEncoder: java.nio.CharBuffer _stringC>;

        $i1 = virtualinvoke $r5.<java.nio.CharBuffer: int capacity()>();

        $i3 = $i1 - 1;

        $i2 = $i0 - i9;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i2);

        $r6 = r1.<org.bson.BSONEncoder: java.nio.CharBuffer _stringC>;

        $i5 = i9 + $i4;

        virtualinvoke $r6.<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>(r0, i9, $i5);

        $r7 = r1.<org.bson.BSONEncoder: java.nio.CharBuffer _stringC>;

        virtualinvoke $r7.<java.nio.CharBuffer: java.nio.Buffer flip()>();

        $r10 = r1.<org.bson.BSONEncoder: java.nio.charset.CharsetEncoder _encoder>;

        $r9 = r1.<org.bson.BSONEncoder: java.nio.CharBuffer _stringC>;

        $r8 = r1.<org.bson.BSONEncoder: java.nio.ByteBuffer _stringB>;

        $r11 = virtualinvoke $r10.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>($r9, $r8, 0);

        $z0 = virtualinvoke $r11.<java.nio.charset.CoderResult: boolean isMalformed()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke $r11.<java.nio.charset.CoderResult: boolean isUnmappable()>();

        if $z1 == 0 goto label3;

     label2:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("malforumed string");

        throw $r12;

     label3:
        $z2 = virtualinvoke $r11.<java.nio.charset.CoderResult: boolean isOverflow()>();

        if $z2 == 0 goto label4;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>("overflor should be impossible");

        throw $r20;

     label4:
        $z3 = virtualinvoke $r11.<java.nio.charset.CoderResult: boolean isError()>();

        if $z3 == 0 goto label5;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>("should never get here");

        throw $r19;

     label5:
        $z4 = virtualinvoke $r11.<java.nio.charset.CoderResult: boolean isUnderflow()>();

        if $z4 != 0 goto label6;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String)>("this should always be true");

        throw $r18;

     label6:
        $r13 = r1.<org.bson.BSONEncoder: java.nio.ByteBuffer _stringB>;

        $i6 = virtualinvoke $r13.<java.nio.ByteBuffer: int position()>();

        i8 = i8 + $i6;

        $r15 = r1.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        $r14 = r1.<org.bson.BSONEncoder: java.nio.ByteBuffer _stringB>;

        $r16 = virtualinvoke $r14.<java.nio.ByteBuffer: byte[] array()>();

        $r17 = r1.<org.bson.BSONEncoder: java.nio.ByteBuffer _stringB>;

        $i7 = virtualinvoke $r17.<java.nio.ByteBuffer: int position()>();

        virtualinvoke $r15.<org.bson.io.OutputBuffer: void write(byte[],int,int)>($r16, 0, $i7);

        i9 = i9 + $i4;

        goto label1;

     label7:
        $r2 = r1.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r2.<org.bson.io.OutputBuffer: void write(int)>(0);

        i10 = i8 + 1;

        return i10;
    }

    public void writeInt(int)
    {
        int i0;
        org.bson.io.OutputBuffer $r1;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        i0 := @parameter0: int;

        $r1 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r1.<org.bson.io.OutputBuffer: void writeInt(int)>(i0);

        return;
    }

    public void writeLong(long)
    {
        long l0;
        org.bson.io.OutputBuffer $r1;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        l0 := @parameter0: long;

        $r1 = r0.<org.bson.BSONEncoder: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r1.<org.bson.io.OutputBuffer: void writeLong(long)>(l0);

        return;
    }

    public void writeCString(java.lang.String)
    {
        java.lang.String r1;
        org.bson.BSONEncoder r0;

        r0 := @this: org.bson.BSONEncoder;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.bson.BSONEncoder: int _put(java.lang.String)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <org.bson.BSONEncoder: boolean DEBUG> = 0;

        return;
    }
}
