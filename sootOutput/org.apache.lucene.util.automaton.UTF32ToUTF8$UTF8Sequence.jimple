class org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence extends java.lang.Object
{
    private final org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes;
    private int len;

    public void <init>()
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence r0;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte $r2;
        int i0;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] $r1, $r3;

        r0 := @this: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte)[4];

        r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes> = $r1;

        i0 = 0;

     label1:
        if i0 >= 4 goto label2;

        $r3 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes>;

        $r2 = new org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte;

        specialinvoke $r2.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte: void <init>(org.apache.lucene.util.automaton.UTF32ToUTF8$1)>(null);

        $r3[i0] = $r2;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public int byteAt(int)
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence r0;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte $r2;
        int i0, $i1;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] $r1;

        r0 := @this: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes>;

        $r2 = $r1[i0];

        $i1 = $r2.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte: int value>;

        return $i1;
    }

    public int numBits(int)
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence r0;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte $r2;
        byte $b1;
        int i0, $i2;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] $r1;

        r0 := @this: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes>;

        $r2 = $r1[i0];

        $b1 = $r2.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte: byte bits>;

        $i2 = (int) $b1;

        return $i2;
    }

    private void set(int)
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence r0;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16;

        r0 := @this: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        i0 := @parameter0: int;

        if i0 >= 128 goto label1;

        $r13 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes>;

        $r14 = $r13[0];

        $r14.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte: int value> = i0;

        $r15 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes>;

        $r16 = $r15[0];

        $r16.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte: byte bits> = 7;

        r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int len> = 1;

        goto label4;

     label1:
        if i0 >= 2048 goto label2;

        $r9 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes>;

        $r10 = $r9[0];

        $i5 = i0 >> 6;

        $i6 = 192 | $i5;

        $r10.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte: int value> = $i6;

        $r11 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes>;

        $r12 = $r11[0];

        $r12.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte: byte bits> = 5;

        specialinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: void setRest(int,int)>(i0, 1);

        r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int len> = 2;

        goto label4;

     label2:
        if i0 >= 65536 goto label3;

        $r5 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes>;

        $r6 = $r5[0];

        $i3 = i0 >> 12;

        $i4 = 224 | $i3;

        $r6.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte: int value> = $i4;

        $r7 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes>;

        $r8 = $r7[0];

        $r8.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte: byte bits> = 4;

        specialinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: void setRest(int,int)>(i0, 2);

        r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int len> = 3;

        goto label4;

     label3:
        $r1 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes>;

        $r2 = $r1[0];

        $i1 = i0 >> 18;

        $i2 = 240 | $i1;

        $r2.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte: int value> = $i2;

        $r3 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes>;

        $r4 = $r3[0];

        $r4.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte: byte bits> = 3;

        specialinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: void setRest(int,int)>(i0, 3);

        r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int len> = 4;

     label4:
        return;
    }

    private void setRest(int, int)
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence r0;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte $r3, $r5;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] $r1, $r4;
        int[] $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;

        r0 := @this: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        i7 = 0;

     label1:
        if i7 >= i0 goto label2;

        $r1 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes>;

        $i1 = i0 - i7;

        $r3 = $r1[$i1];

        $r2 = <org.apache.lucene.util.automaton.UTF32ToUTF8: int[] MASKS>;

        $i2 = $r2[5];

        $i3 = i6 & $i2;

        $i4 = 128 | $i3;

        $r3.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte: int value> = $i4;

        $r4 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes>;

        $i5 = i0 - i7;

        $r5 = $r4[$i5];

        $r5.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte: byte bits> = 6;

        i6 = i6 >> 6;

        i7 = i7 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence r1;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte $r4;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] $r3;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r0;
        java.lang.String $r2, $r5;

        r1 := @this: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        $i0 = r1.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int len>;

        if i2 >= $i0 goto label3;

        if i2 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label2:
        $r3 = r1.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte[] bytes>;

        $r4 = $r3[i2];

        $i1 = $r4.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Byte: int value>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i2 = i2 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    static void access$100(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence, int)
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence r0;
        int i0;

        r0 := @parameter0: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: void set(int)>(i0);

        return;
    }

    static int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence r0;
        int $i0;

        r0 := @parameter0: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        $i0 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int len>;

        return $i0;
    }
}
