public class org.apache.batik.parser.PathParser extends org.apache.batik.parser.NumberParser
{
    protected org.apache.batik.parser.PathHandler pathHandler;

    public void <init>()
    {
        org.apache.batik.parser.PathParser r0;
        org.apache.batik.parser.PathHandler $r1;

        r0 := @this: org.apache.batik.parser.PathParser;

        specialinvoke r0.<org.apache.batik.parser.NumberParser: void <init>()>();

        $r1 = <org.apache.batik.parser.DefaultPathHandler: org.apache.batik.parser.PathHandler INSTANCE>;

        r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler> = $r1;

        return;
    }

    public void setPathHandler(org.apache.batik.parser.PathHandler)
    {
        org.apache.batik.parser.PathParser r0;
        org.apache.batik.parser.PathHandler r1;

        r0 := @this: org.apache.batik.parser.PathParser;

        r1 := @parameter0: org.apache.batik.parser.PathHandler;

        r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler> = r1;

        return;
    }

    public org.apache.batik.parser.PathHandler getPathHandler()
    {
        org.apache.batik.parser.PathParser r0;
        org.apache.batik.parser.PathHandler $r1;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        return $r1;
    }

    protected void doParse() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        java.lang.Object[] $r7;
        org.apache.batik.util.io.NormalizingReader $r2, $r3, $r5;
        java.lang.Integer $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;
        org.apache.batik.parser.PathParser r0;
        org.apache.batik.parser.PathHandler $r1, $r4, $r6;
        org.apache.batik.parser.ErrorHandler $r10;
        org.apache.batik.parser.ParseException $r9;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r1.<org.apache.batik.parser.PathHandler: void startPath()>();

        $r2 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r2.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        goto label01;

     label01:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i1)
        {
            case -1: goto label22;
            case 9: goto label02;
            case 10: goto label02;
            case 13: goto label02;
            case 32: goto label02;
            case 65: goto label21;
            case 67: goto label13;
            case 72: goto label09;
            case 76: goto label07;
            case 77: goto label05;
            case 81: goto label15;
            case 83: goto label17;
            case 84: goto label19;
            case 86: goto label11;
            case 90: goto label03;
            case 97: goto label20;
            case 99: goto label12;
            case 104: goto label08;
            case 108: goto label06;
            case 109: goto label04;
            case 113: goto label14;
            case 115: goto label16;
            case 116: goto label18;
            case 118: goto label10;
            case 122: goto label03;
            default: goto label23;
        };

     label02:
        $r5 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i3 = virtualinvoke $r5.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i3;

        goto label24;

     label03:
        $r3 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i2 = virtualinvoke $r3.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i2;

        $r4 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r4.<org.apache.batik.parser.PathHandler: void closePath()>();

        goto label24;

     label04:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parsem()>();

        goto label24;

     label05:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parseM()>();

        goto label24;

     label06:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parsel()>();

        goto label24;

     label07:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parseL()>();

        goto label24;

     label08:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parseh()>();

        goto label24;

     label09:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parseH()>();

        goto label24;

     label10:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parsev()>();

        goto label24;

     label11:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parseV()>();

        goto label24;

     label12:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parsec()>();

        goto label24;

     label13:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parseC()>();

        goto label24;

     label14:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parseq()>();

        goto label24;

     label15:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parseQ()>();

        goto label24;

     label16:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parses()>();

        goto label24;

     label17:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parseS()>();

        goto label24;

     label18:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parset()>();

        goto label24;

     label19:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parseT()>();

        goto label24;

     label20:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parsea()>();

        goto label24;

     label21:
        virtualinvoke r0.<org.apache.batik.parser.PathParser: void parseA()>();

        goto label24;

     label22:
        goto label27;

     label23:
        $i6 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i6);

     label24:
        goto label26;

     label25:
        $r9 := @caughtexception;

        $r10 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.parser.ErrorHandler errorHandler>;

        interfaceinvoke $r10.<org.apache.batik.parser.ErrorHandler: void error(org.apache.batik.parser.ParseException)>($r9);

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void skipSubPath()>();

     label26:
        goto label01;

     label27:
        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i4 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        $i8 = (int) -1;

        if $i4 == $i8 goto label28;

        $r7 = newarray (java.lang.Object)[1];

        $r11 = new java.lang.Integer;

        $i5 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>($i5);

        $r7[0] = $r11;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportError(java.lang.String,java.lang.Object[])>("end.of.stream.expected", $r7);

     label28:
        $r6 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r6.<org.apache.batik.parser.PathHandler: void endPath()>();

        return;

        catch org.apache.batik.parser.ParseException from label01 to label24 with label25;
    }

    protected void parsem() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        int $i0;
        org.apache.batik.util.io.NormalizingReader $r1;
        float $f0, $f1;
        org.apache.batik.parser.PathParser r0;
        org.apache.batik.parser.PathHandler $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r2 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r2.<org.apache.batik.parser.PathHandler: void movetoRel(float,float)>($f0, $f1);

        $z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void _parsel(boolean)>($z0);

        return;
    }

    protected void parseM() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        int $i0;
        org.apache.batik.util.io.NormalizingReader $r1;
        float $f0, $f1;
        org.apache.batik.parser.PathParser r0;
        org.apache.batik.parser.PathHandler $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r2 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r2.<org.apache.batik.parser.PathHandler: void movetoAbs(float,float)>($f0, $f1);

        $z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void _parseL(boolean)>($z0);

        return;
    }

    protected void parsel() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        int $i0;
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathParser r0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void _parsel(boolean)>(1);

        return;
    }

    protected void _parsel(boolean) throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        int $i0, $i1;
        float $f0, $f1;
        org.apache.batik.parser.PathParser r0;
        org.apache.batik.parser.PathHandler $r1;
        boolean z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        z0 := @parameter0: boolean;

        goto label1;

     label1:
        $i0 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i0)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label2;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            default: goto label2;
        };

     label2:
        if z0 == 0 goto label3;

        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i1);

     label3:
        return;

     label4:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r1 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r1.<org.apache.batik.parser.PathHandler: void linetoRel(float,float)>($f0, $f1);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label1;
    }

    protected void parseL() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        int $i0;
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathParser r0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void _parseL(boolean)>(1);

        return;
    }

    protected void _parseL(boolean) throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        int $i0, $i1;
        float $f0, $f1;
        org.apache.batik.parser.PathParser r0;
        org.apache.batik.parser.PathHandler $r1;
        boolean z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        z0 := @parameter0: boolean;

        goto label1;

     label1:
        $i0 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i0)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label2;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            default: goto label2;
        };

     label2:
        if z0 == 0 goto label3;

        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i1);

     label3:
        return;

     label4:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r1 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r1.<org.apache.batik.parser.PathHandler: void linetoAbs(float,float)>($f0, $f1);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label1;
    }

    protected void parseh() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathHandler $r2;
        int $i0, $i1, $i2;
        float $f0;
        org.apache.batik.parser.PathParser r0;
        boolean z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        z0 = 1;

        goto label1;

     label1:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i1)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label2;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            default: goto label2;
        };

     label2:
        if z0 == 0 goto label3;

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i2);

     label3:
        return;

     label4:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r2 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r2.<org.apache.batik.parser.PathHandler: void linetoHorizontalRel(float)>($f0);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label1;
    }

    protected void parseH() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathHandler $r2;
        int $i0, $i1, $i2;
        float $f0;
        org.apache.batik.parser.PathParser r0;
        boolean z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        z0 = 1;

        goto label1;

     label1:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i1)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label2;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            default: goto label2;
        };

     label2:
        if z0 == 0 goto label3;

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i2);

     label3:
        return;

     label4:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r2 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r2.<org.apache.batik.parser.PathHandler: void linetoHorizontalAbs(float)>($f0);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label1;
    }

    protected void parsev() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathHandler $r2;
        int $i0, $i1, $i2;
        float $f0;
        org.apache.batik.parser.PathParser r0;
        boolean z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        z0 = 1;

        goto label1;

     label1:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i1)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label2;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            default: goto label2;
        };

     label2:
        if z0 == 0 goto label3;

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i2);

     label3:
        return;

     label4:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r2 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r2.<org.apache.batik.parser.PathHandler: void linetoVerticalRel(float)>($f0);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label1;
    }

    protected void parseV() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathHandler $r2;
        int $i0, $i1, $i2;
        float $f0;
        org.apache.batik.parser.PathParser r0;
        boolean z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        z0 = 1;

        goto label1;

     label1:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i1)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label2;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            default: goto label2;
        };

     label2:
        if z0 == 0 goto label3;

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i2);

     label3:
        return;

     label4:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r2 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r2.<org.apache.batik.parser.PathHandler: void linetoVerticalAbs(float)>($f0);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label1;
    }

    protected void parsec() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathHandler $r2;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        org.apache.batik.parser.PathParser r0;
        boolean z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        z0 = 1;

        goto label1;

     label1:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i1)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label2;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            default: goto label2;
        };

     label2:
        if z0 == 0 goto label3;

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i2);

     label3:
        return;

     label4:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f2 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f3 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f4 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f5 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r2 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r2.<org.apache.batik.parser.PathHandler: void curvetoCubicRel(float,float,float,float,float,float)>($f0, $f1, $f2, $f3, $f4, $f5);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label1;
    }

    protected void parseC() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathHandler $r2;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        org.apache.batik.parser.PathParser r0;
        boolean z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        z0 = 1;

        goto label1;

     label1:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i1)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label2;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            default: goto label2;
        };

     label2:
        if z0 == 0 goto label3;

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i2);

     label3:
        return;

     label4:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f2 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f3 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f4 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f5 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r2 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r2.<org.apache.batik.parser.PathHandler: void curvetoCubicAbs(float,float,float,float,float,float)>($f0, $f1, $f2, $f3, $f4, $f5);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label1;
    }

    protected void parseq() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathHandler $r2;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3;
        org.apache.batik.parser.PathParser r0;
        boolean z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        z0 = 1;

        goto label1;

     label1:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i1)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label2;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            default: goto label2;
        };

     label2:
        if z0 == 0 goto label3;

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i2);

     label3:
        return;

     label4:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f2 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f3 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r2 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r2.<org.apache.batik.parser.PathHandler: void curvetoQuadraticRel(float,float,float,float)>($f0, $f1, $f2, $f3);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label1;
    }

    protected void parseQ() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathHandler $r2;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3;
        org.apache.batik.parser.PathParser r0;
        boolean z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        z0 = 1;

        goto label1;

     label1:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i1)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label2;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            default: goto label2;
        };

     label2:
        if z0 == 0 goto label3;

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i2);

     label3:
        return;

     label4:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f2 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f3 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r2 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r2.<org.apache.batik.parser.PathHandler: void curvetoQuadraticAbs(float,float,float,float)>($f0, $f1, $f2, $f3);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label1;
    }

    protected void parses() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathHandler $r2;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3;
        org.apache.batik.parser.PathParser r0;
        boolean z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        z0 = 1;

        goto label1;

     label1:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i1)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label2;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            default: goto label2;
        };

     label2:
        if z0 == 0 goto label3;

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i2);

     label3:
        return;

     label4:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f2 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f3 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r2 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r2.<org.apache.batik.parser.PathHandler: void curvetoCubicSmoothRel(float,float,float,float)>($f0, $f1, $f2, $f3);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label1;
    }

    protected void parseS() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathHandler $r2;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3;
        org.apache.batik.parser.PathParser r0;
        boolean z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        z0 = 1;

        goto label1;

     label1:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i1)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label2;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            default: goto label2;
        };

     label2:
        if z0 == 0 goto label3;

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i2);

     label3:
        return;

     label4:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f2 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f3 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r2 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r2.<org.apache.batik.parser.PathHandler: void curvetoCubicSmoothAbs(float,float,float,float)>($f0, $f1, $f2, $f3);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label1;
    }

    protected void parset() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathHandler $r2;
        int $i0, $i1, $i2;
        float $f0, $f1;
        org.apache.batik.parser.PathParser r0;
        boolean z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        z0 = 1;

        goto label1;

     label1:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i1)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label2;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            default: goto label2;
        };

     label2:
        if z0 == 0 goto label3;

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i2);

     label3:
        return;

     label4:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r2 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r2.<org.apache.batik.parser.PathHandler: void curvetoQuadraticSmoothRel(float,float)>($f0, $f1);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label1;
    }

    protected void parseT() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathHandler $r2;
        int $i0, $i1, $i2;
        float $f0, $f1;
        org.apache.batik.parser.PathParser r0;
        boolean z0;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        z0 = 1;

        goto label1;

     label1:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i1)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label2;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            default: goto label2;
        };

     label2:
        if z0 == 0 goto label3;

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i2);

     label3:
        return;

     label4:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r2 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r2.<org.apache.batik.parser.PathHandler: void curvetoQuadraticSmoothAbs(float,float)>($f0, $f1);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label1;
    }

    protected void parsea() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.batik.parser.PathParser r0;
        boolean z0, z1, z2;
        org.apache.batik.parser.PathHandler $r4;
        float $f0, $f1, $f2, $f3, $f4;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        z0 = 1;

        goto label01;

     label01:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i1)
        {
            case 43: goto label04;
            case 44: goto label02;
            case 45: goto label04;
            case 46: goto label04;
            case 47: goto label02;
            case 48: goto label04;
            case 49: goto label04;
            case 50: goto label04;
            case 51: goto label04;
            case 52: goto label04;
            case 53: goto label04;
            case 54: goto label04;
            case 55: goto label04;
            case 56: goto label04;
            case 57: goto label04;
            default: goto label02;
        };

     label02:
        if z0 == 0 goto label03;

        $i8 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i8);

     label03:
        return;

     label04:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f2 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i2)
        {
            case 48: goto label06;
            case 49: goto label07;
            default: goto label05;
        };

     label05:
        $i7 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i7);

        return;

     label06:
        z1 = 0;

        goto label08;

     label07:
        z1 = 1;

     label08:
        $r2 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i3 = virtualinvoke $r2.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i3;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $i4 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i4)
        {
            case 48: goto label10;
            case 49: goto label11;
            default: goto label09;
        };

     label09:
        $i6 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i6);

        return;

     label10:
        z2 = 0;

        goto label12;

     label11:
        z2 = 1;

     label12:
        $r3 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i5 = virtualinvoke $r3.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i5;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f3 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f4 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r4 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r4.<org.apache.batik.parser.PathHandler: void arcRel(float,float,float,boolean,boolean,float,float)>($f0, $f1, $f2, z1, z2, $f3, $f4);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label01;
    }

    protected void parseA() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.batik.parser.PathParser r0;
        boolean z0, z1, z2;
        org.apache.batik.parser.PathHandler $r4;
        float $f0, $f1, $f2, $f3, $f4;

        r0 := @this: org.apache.batik.parser.PathParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        z0 = 1;

        goto label01;

     label01:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        tableswitch($i1)
        {
            case 43: goto label04;
            case 44: goto label02;
            case 45: goto label04;
            case 46: goto label04;
            case 47: goto label02;
            case 48: goto label04;
            case 49: goto label04;
            case 50: goto label04;
            case 51: goto label04;
            case 52: goto label04;
            case 53: goto label04;
            case 54: goto label04;
            case 55: goto label04;
            case 56: goto label04;
            case 57: goto label04;
            default: goto label02;
        };

     label02:
        if z0 == 0 goto label03;

        $i8 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i8);

     label03:
        return;

     label04:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f2 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i2)
        {
            case 48: goto label06;
            case 49: goto label07;
            default: goto label05;
        };

     label05:
        $i7 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i7);

        return;

     label06:
        z1 = 0;

        goto label08;

     label07:
        z1 = 1;

     label08:
        $r2 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i3 = virtualinvoke $r2.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i3;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $i4 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i4)
        {
            case 48: goto label10;
            case 49: goto label11;
            default: goto label09;
        };

     label09:
        $i6 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void reportUnexpected(int)>($i6);

        return;

     label10:
        z2 = 0;

        goto label12;

     label11:
        z2 = 1;

     label12:
        $r3 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i5 = virtualinvoke $r3.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i5;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f3 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f4 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r4 = r0.<org.apache.batik.parser.PathParser: org.apache.batik.parser.PathHandler pathHandler>;

        interfaceinvoke $r4.<org.apache.batik.parser.PathHandler: void arcAbs(float,float,float,boolean,boolean,float,float)>($f0, $f1, $f2, z1, z2, $f3, $f4);

        z0 = virtualinvoke r0.<org.apache.batik.parser.PathParser: boolean skipCommaSpaces2()>();

        goto label01;
    }

    protected void skipSubPath() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        int $i0, $i1;
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.parser.PathParser r0;

        r0 := @this: org.apache.batik.parser.PathParser;

        goto label1;

     label1:
        $i0 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i0)
        {
            case -1: goto label2;
            case 77: goto label2;
            case 109: goto label2;
            default: goto label3;
        };

     label2:
        return;

     label3:
        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i1 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i1;

        goto label1;
    }

    protected void reportUnexpected(int) throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        int $i0, i1;
        org.apache.batik.parser.PathParser r0;

        r0 := @this: org.apache.batik.parser.PathParser;

        i1 := @parameter0: int;

        $i0 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportUnexpectedCharacterError(int)>($i0);

        virtualinvoke r0.<org.apache.batik.parser.PathParser: void skipSubPath()>();

        return;
    }

    protected boolean skipCommaSpaces2() throws java.io.IOException
    {
        int $i0, $i1, $i2, $i3;
        org.apache.batik.util.io.NormalizingReader $r1, $r2;
        org.apache.batik.parser.PathParser r0;

        r0 := @this: org.apache.batik.parser.PathParser;

        goto label1;

     label1:
        $i0 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i0)
        {
            case 9: goto label3;
            case 10: goto label3;
            case 13: goto label3;
            case 32: goto label3;
            default: goto label2;
        };

     label2:
        goto label4;

     label3:
        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i1 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i1;

        goto label1;

     label4:
        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i2 == 44 goto label5;

        return 0;

     label5:
        $r2 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i3 = virtualinvoke $r2.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i3;

        lookupswitch($i3)
        {
            case 9: goto label7;
            case 10: goto label7;
            case 13: goto label7;
            case 32: goto label7;
            default: goto label6;
        };

     label6:
        goto label8;

     label7:
        goto label5;

     label8:
        return 1;
    }
}
