public final class org.waveprotocol.wave.model.operation.wave.BlipContentOperation extends org.waveprotocol.wave.model.operation.wave.BlipOperation
{
    private final org.waveprotocol.wave.model.document.operation.DocOp contentOp;
    private final org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod method;

    public void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext, org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod $r3;
        org.waveprotocol.wave.model.document.operation.DocOp r2;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOp;

        $r3 = <org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod: org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod ADD>;

        specialinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp,org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod)>(r1, r2, $r3);

        return;
    }

    void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext, org.waveprotocol.wave.model.document.operation.DocOp, org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod)
    {
        org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod r3;
        org.waveprotocol.wave.model.document.operation.DocOp r2;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOp;

        r3 := @parameter2: org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod;

        $z0 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: boolean isWorthy(org.waveprotocol.wave.model.document.operation.DocOp)>(r2);

        specialinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,boolean)>(r1, $z0);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "Null document mutation");

        r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp contentOp> = r2;

        r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod method> = r3;

        return;
    }

    protected void doApply(org.waveprotocol.wave.model.wave.data.BlipData) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.wave.data.BlipData r0;
        org.waveprotocol.wave.model.wave.data.DocumentOperationSink $r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r3;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r2;
        java.lang.String $r4;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.BlipData;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.BlipData: org.waveprotocol.wave.model.wave.data.DocumentOperationSink getContent()>();

        $r3 = r2.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp contentOp>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.DocumentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>($r3);

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.BlipData: java.lang.String getId()>();

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: boolean isWorthyOfAttribution(java.lang.String)>($r4);

        if $z0 == 0 goto label1;

        interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.BlipData: void onRemoteContentModified()>();

     label1:
        return;
    }

    protected void doUpdate(org.waveprotocol.wave.model.wave.data.BlipData)
    {
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r0;
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod $r2;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.BlipData;

        $r2 = r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod method>;

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod update(org.waveprotocol.wave.model.wave.data.BlipData,org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod)>(r1, $r2);

        return;
    }

    public java.util.List applyAndReturnReverse(org.waveprotocol.wave.model.wave.data.BlipData) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r6, $r7, $r8;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r2;
        java.util.List $r10;
        org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod $r3, $r4;
        org.waveprotocol.wave.model.wave.data.DocumentOperationSink $r5;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r0, $r9;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.BlipData;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createReverseContext(org.waveprotocol.wave.model.wave.data.BlipData)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod method>;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod update(org.waveprotocol.wave.model.wave.data.BlipData,org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod)>(r1, $r3);

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.BlipData: org.waveprotocol.wave.model.wave.data.DocumentOperationSink getContent()>();

        $r6 = r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp contentOp>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.wave.data.DocumentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>($r6);

        $r7 = r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp contentOp>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.DocOpInverter: org.waveprotocol.wave.model.document.operation.DocOp invert(org.waveprotocol.wave.model.document.operation.DocOp)>($r7);

        $r9 = new org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        specialinvoke $r9.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp,org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod)>($r2, $r8, $r4);

        $r10 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r9);

        return $r10;
    }

    public void acceptVisitor(org.waveprotocol.wave.model.operation.wave.BlipOperationVisitor)
    {
        org.waveprotocol.wave.model.operation.wave.BlipOperationVisitor r0;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r1;

        r1 := @this: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.BlipOperationVisitor;

        interfaceinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipOperationVisitor: void visitBlipContentOperation(org.waveprotocol.wave.model.operation.wave.BlipContentOperation)>(r1);

        return;
    }

    public void update(org.waveprotocol.wave.model.wave.data.BlipData)
    {
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r0;
        org.waveprotocol.wave.model.wave.data.BlipData r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.BlipData;

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void doUpdate(org.waveprotocol.wave.model.wave.data.BlipData)>(r1);

        return;
    }

    public org.waveprotocol.wave.model.document.operation.DocOp getContentOp()
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r1;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp contentOp>;

        return $r1;
    }

    public boolean updatesBlipMetadata(java.lang.String)
    {
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: boolean isWorthyOfAttribution(java.lang.String)>(r1);

        return $z0;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r3;
        java.lang.StringBuilder $r0, $r1, $r4;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r2;
        java.lang.String $r5;

        r2 := @this: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("document op: ");

        $r3 = r2.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp contentOp>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public int hashCode()
    {
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r3, $r4;
        java.lang.Object r0;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r1, r2;
        org.waveprotocol.wave.model.operation.OpComparators$OpEquator $r5;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.waveprotocol.wave.model.operation.wave.BlipContentOperation) r0;

        $r5 = <org.waveprotocol.wave.model.operation.OpComparators: org.waveprotocol.wave.model.operation.OpComparators$OpEquator SYNTACTIC_IDENTITY>;

        $r4 = r2.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp contentOp>;

        $r3 = r1.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp contentOp>;

        $z1 = interfaceinvoke $r5.<org.waveprotocol.wave.model.operation.OpComparators$OpEquator: boolean equal(org.waveprotocol.wave.model.document.operation.DocOp,org.waveprotocol.wave.model.document.operation.DocOp)>($r4, $r3);

        return $z1;
    }

    public volatile java.util.List applyAndReturnReverse(java.lang.Object) throws org.waveprotocol.wave.model.operation.OperationException
    {
        java.util.List $r3;
        org.waveprotocol.wave.model.wave.data.BlipData $r2;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.data.BlipData) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: java.util.List applyAndReturnReverse(org.waveprotocol.wave.model.wave.data.BlipData)>($r2);

        return $r3;
    }

    public volatile void acceptVisitor(org.waveprotocol.wave.model.operation.Visitor)
    {
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r0;
        org.waveprotocol.wave.model.operation.wave.BlipOperationVisitor $r2;
        org.waveprotocol.wave.model.operation.Visitor r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.Visitor;

        $r2 = (org.waveprotocol.wave.model.operation.wave.BlipOperationVisitor) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void acceptVisitor(org.waveprotocol.wave.model.operation.wave.BlipOperationVisitor)>($r2);

        return;
    }
}
