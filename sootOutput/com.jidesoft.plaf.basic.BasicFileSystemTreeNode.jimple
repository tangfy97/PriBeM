class com.jidesoft.plaf.basic.BasicFileSystemTreeNode extends com.jidesoft.plaf.basic.LazyMutableTreeNode implements java.lang.Comparable
{
    private com.jidesoft.swing.FolderChooser _folderChooser;
    private java.io.File _file;
    static java.util.HashMap _icons;
    static java.util.HashMap _nodes;

    protected void <init>(java.io.File)
    {
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0;
        java.io.File r1;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: void <init>(java.io.File,com.jidesoft.swing.FolderChooser)>(r1, null);

        return;
    }

    protected void <init>(java.io.File, com.jidesoft.swing.FolderChooser)
    {
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0;
        com.jidesoft.swing.FolderChooser r2;
        java.io.File r1;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: com.jidesoft.swing.FolderChooser;

        specialinvoke r0.<com.jidesoft.plaf.basic.LazyMutableTreeNode: void <init>()>();

        r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file> = r1;

        r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: com.jidesoft.swing.FolderChooser _folderChooser> = r2;

        return;
    }

    public boolean isLeaf()
    {
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        $z0 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: boolean isLoaded()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = specialinvoke r0.<com.jidesoft.plaf.basic.LazyMutableTreeNode: boolean isLeaf()>();

        return $z1;
    }

    public boolean hasChildren()
    {
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0;
        javax.swing.filechooser.FileSystemView $r4;
        int $i0, i1, i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.jidesoft.swing.FolderChooser $r3, $r5;
        java.io.File $r1, $r2, $r6, r8;
        java.io.File[] $r7;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        $z0 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: boolean _loaded>;

        if $z0 != 0 goto label5;

        $r1 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file>;

        $z1 = staticinvoke <com.jidesoft.plaf.basic.BasicFolderChooserUI: boolean isFileSystem(java.io.File)>($r1);

        if $z1 == 0 goto label4;

        $r2 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file>;

        $z2 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label4;

        $r3 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: com.jidesoft.swing.FolderChooser _folderChooser>;

        $r4 = virtualinvoke $r3.<com.jidesoft.swing.FolderChooser: javax.swing.filechooser.FileSystemView getFileSystemView()>();

        $r6 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file>;

        $r5 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: com.jidesoft.swing.FolderChooser _folderChooser>;

        $z3 = virtualinvoke $r5.<com.jidesoft.swing.FolderChooser: boolean isFileHidingEnabled()>();

        $r7 = virtualinvoke $r4.<javax.swing.filechooser.FileSystemView: java.io.File[] getFiles(java.io.File,boolean)>($r6, $z3);

        i1 = lengthof $r7;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r8 = $r7[i2];

        $z4 = virtualinvoke r8.<java.io.File: boolean isDirectory()>();

        if $z4 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: boolean _loaded> = 1;

     label4:
        return 0;

     label5:
        $i0 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: int getChildCount()>();

        if $i0 == 0 goto label6;

        $z5 = 1;

        goto label7;

     label6:
        $z5 = 0;

     label7:
        return $z5;
    }

    protected void initChildren()
    {
        java.lang.Object[] $r10;
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0, $r14;
        java.lang.Error $r16;
        java.util.ArrayList $r8;
        javax.swing.filechooser.FileSystemView $r4;
        int $i0, i1, i2, $i3, i4;
        boolean $z0, $z1, $z2;
        com.jidesoft.swing.FolderChooser $r1, $r3, $r5, $r11, $r13;
        java.io.File $r2, $r6, r18, r20;
        java.lang.Exception $r15;
        java.util.Comparator $r12;
        java.io.File[] $r7, $r9, r17, r19;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        $r1 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: com.jidesoft.swing.FolderChooser _folderChooser>;

        if $r1 != null goto label01;

        return;

     label01:
        $r2 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label12;

        r17 = newarray (java.io.File)[0];

     label02:
        $r3 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: com.jidesoft.swing.FolderChooser _folderChooser>;

        $r4 = virtualinvoke $r3.<com.jidesoft.swing.FolderChooser: javax.swing.filechooser.FileSystemView getFileSystemView()>();

        $r6 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file>;

        $r5 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: com.jidesoft.swing.FolderChooser _folderChooser>;

        $z1 = virtualinvoke $r5.<com.jidesoft.swing.FolderChooser: boolean isFileHidingEnabled()>();

        $r7 = virtualinvoke $r4.<javax.swing.filechooser.FileSystemView: java.io.File[] getFiles(java.io.File,boolean)>($r6, $z1);

        r17 = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        i1 = lengthof $r7;

        i2 = 0;

     label03:
        if i2 >= i1 goto label05;

        r18 = $r7[i2];

        $z2 = virtualinvoke r18.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label04;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r18);

     label04:
        i2 = i2 + 1;

        goto label03;

     label05:
        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $r9 = newarray (java.io.File)[$i0];

        $r10 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        r17 = (java.io.File[]) $r10;

        $r11 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: com.jidesoft.swing.FolderChooser _folderChooser>;

        $r12 = virtualinvoke $r11.<com.jidesoft.swing.FolderChooser: java.util.Comparator getFileComparator()>();

        if $r12 == null goto label06;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r17, $r12);

        goto label07;

     label06:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r17);

     label07:
        goto label10;

     label08:
        $r16 := @caughtexception;

        goto label10;

     label09:
        $r15 := @caughtexception;

     label10:
        r19 = r17;

        $i3 = lengthof r17;

        i4 = 0;

     label11:
        if i4 >= $i3 goto label12;

        r20 = r19[i4];

        $r13 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: com.jidesoft.swing.FolderChooser _folderChooser>;

        $r14 = staticinvoke <com.jidesoft.plaf.basic.BasicFileSystemTreeNode: com.jidesoft.plaf.basic.BasicFileSystemTreeNode createFileSystemTreeNode(java.io.File,com.jidesoft.swing.FolderChooser)>(r20, $r13);

        virtualinvoke r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: void add(javax.swing.tree.MutableTreeNode)>($r14);

        i4 = i4 + 1;

        goto label11;

     label12:
        return;

        catch java.lang.Error from label02 to label07 with label08;
        catch java.lang.Exception from label02 to label07 with label09;
    }

    public java.io.File getFile()
    {
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0;
        java.io.File $r1;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        $r1 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file>;

        return $r1;
    }

    public java.lang.String getName()
    {
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0;
        java.lang.String $r2;
        java.io.File $r1;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        $r1 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File getFile()>();

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.lang.String getName(java.io.File)>($r1);

        return $r2;
    }

    public javax.swing.Icon getIcon()
    {
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0;
        java.util.HashMap $r1, $r5;
        java.lang.Object $r2;
        javax.swing.Icon $r4, r6;
        java.io.File $r3;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        $r1 = <com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.util.HashMap _icons>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r6 = (javax.swing.Icon) $r2;

        if r6 != null goto label1;

        $r3 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File getFile()>();

        $r4 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: javax.swing.Icon getIcon(java.io.File)>($r3);

        $r5 = <com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.util.HashMap _icons>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r4);

        return $r4;

     label1:
        return r6;
    }

    public java.lang.String getTypeDescription()
    {
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0;
        java.lang.String $r2, $r3;
        java.io.File $r1;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        $r1 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File getFile()>();

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.lang.String getTypeDescription(java.io.File)>($r1);

        if $r2 != null goto label1;

        $r3 = "";

        goto label2;

     label1:
        $r3 = $r2;

     label2:
        return $r3;
    }

    public javax.swing.Icon getIcon(java.io.File)
    {
        javax.swing.filechooser.FileSystemView $r2;
        com.jidesoft.swing.FolderChooser $r1;
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0;
        javax.swing.Icon $r4;
        java.io.File r3;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        r3 := @parameter0: java.io.File;

        $r1 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: com.jidesoft.swing.FolderChooser _folderChooser>;

        $r2 = virtualinvoke $r1.<com.jidesoft.swing.FolderChooser: javax.swing.filechooser.FileSystemView getFileSystemView()>();

        $r4 = virtualinvoke $r2.<javax.swing.filechooser.FileSystemView: javax.swing.Icon getSystemIcon(java.io.File)>(r3);

        return $r4;
    }

    public java.lang.String getTypeDescription(java.io.File)
    {
        javax.swing.filechooser.FileSystemView $r2;
        com.jidesoft.swing.FolderChooser $r1;
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0;
        java.lang.String $r4;
        java.io.File r3;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        r3 := @parameter0: java.io.File;

        $r1 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: com.jidesoft.swing.FolderChooser _folderChooser>;

        $r2 = virtualinvoke $r1.<com.jidesoft.swing.FolderChooser: javax.swing.filechooser.FileSystemView getFileSystemView()>();

        $r4 = virtualinvoke $r2.<javax.swing.filechooser.FileSystemView: java.lang.String getSystemTypeDescription(java.io.File)>(r3);

        return $r4;
    }

    public java.lang.String getName(java.io.File)
    {
        javax.swing.filechooser.FileSystemView $r2;
        com.jidesoft.swing.FolderChooser $r1;
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0;
        java.lang.String $r4;
        java.io.File r3;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        r3 := @parameter0: java.io.File;

        $r1 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: com.jidesoft.swing.FolderChooser _folderChooser>;

        $r2 = virtualinvoke $r1.<com.jidesoft.swing.FolderChooser: javax.swing.filechooser.FileSystemView getFileSystemView()>();

        $r4 = virtualinvoke $r2.<javax.swing.filechooser.FileSystemView: java.lang.String getSystemDisplayName(java.io.File)>(r3);

        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0, r4;
        java.io.File $r5, $r6, $r7, $r8;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

     label2:
        return 0;

     label3:
        r4 = (com.jidesoft.plaf.basic.BasicFileSystemTreeNode) r1;

        $r5 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file>;

        if $r5 == null goto label4;

        $r8 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file>;

        $r7 = r4.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file>;

        $z0 = virtualinvoke $r8.<java.io.File: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label5;

        goto label6;

     label4:
        $r6 = r4.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file>;

        if $r6 != null goto label6;

     label5:
        $z1 = 1;

        goto label7;

     label6:
        $z1 = 0;

     label7:
        return $z1;
    }

    public int compareTo(java.lang.Object)
    {
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r1, $r3;
        int $i0;
        java.lang.Object r0;
        java.io.File $r2, $r4;
        boolean $z0;

        r1 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File getFile()>();

        $r3 = (com.jidesoft.plaf.basic.BasicFileSystemTreeNode) r0;

        $r4 = virtualinvoke $r3.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File getFile()>();

        $i0 = virtualinvoke $r2.<java.io.File: int compareTo(java.io.File)>($r4);

        return $i0;
    }

    public int hashCode()
    {
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0;
        int $i0;
        java.io.File $r1, $r2;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        $r1 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file>;

        if $r1 == null goto label1;

        $r2 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file>;

        $i0 = virtualinvoke $r2.<java.io.File: int hashCode()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public boolean canEnqueue()
    {
        com.jidesoft.swing.FolderChooser $r1, $r4;
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0;
        java.io.File $r3, $r6;
        javax.swing.filechooser.FileSystemView $r2, $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        $z0 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: boolean isLoaded()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: com.jidesoft.swing.FolderChooser _folderChooser>;

        $r2 = virtualinvoke $r1.<com.jidesoft.swing.FolderChooser: javax.swing.filechooser.FileSystemView getFileSystemView()>();

        $r3 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File getFile()>();

        $z1 = virtualinvoke $r2.<javax.swing.filechooser.FileSystemView: boolean isFloppyDrive(java.io.File)>($r3);

        if $z1 != 0 goto label1;

        $r4 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: com.jidesoft.swing.FolderChooser _folderChooser>;

        $r5 = virtualinvoke $r4.<com.jidesoft.swing.FolderChooser: javax.swing.filechooser.FileSystemView getFileSystemView()>();

        $r6 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File getFile()>();

        $z2 = virtualinvoke $r5.<javax.swing.filechooser.FileSystemView: boolean isFileSystemRoot(java.io.File)>($r6);

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public java.lang.String toString()
    {
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode r0;
        java.lang.String $r3;
        java.io.File $r1, $r2;

        r0 := @this: com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        $r1 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file>;

        if $r1 == null goto label1;

        $r2 = r0.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.io.File _file>;

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String toString()>();

        goto label2;

     label1:
        $r3 = "null";

     label2:
        return $r3;
    }

    public static com.jidesoft.plaf.basic.BasicFileSystemTreeNode createFileSystemTreeNode(java.io.File, com.jidesoft.swing.FolderChooser)
    {
        com.jidesoft.swing.FolderChooser r4;
        com.jidesoft.plaf.basic.BasicFileSystemTreeNode $r3, r6;
        java.util.HashMap $r1, $r5;
        java.lang.Object $r2;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r4 := @parameter1: com.jidesoft.swing.FolderChooser;

        $r1 = <com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.util.HashMap _nodes>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r6 = (com.jidesoft.plaf.basic.BasicFileSystemTreeNode) $r2;

        if r6 != null goto label1;

        $r3 = new com.jidesoft.plaf.basic.BasicFileSystemTreeNode;

        specialinvoke $r3.<com.jidesoft.plaf.basic.BasicFileSystemTreeNode: void <init>(java.io.File,com.jidesoft.swing.FolderChooser)>(r0, r4);

        r6 = $r3;

        $r5 = <com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.util.HashMap _nodes>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r3);

     label1:
        return r6;
    }

    public static void clearCache()
    {
        java.util.HashMap $r0;

        $r0 = <com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.util.HashMap _nodes>;

        virtualinvoke $r0.<java.util.HashMap: void clear()>();

        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r1;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.util.HashMap _icons> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <com.jidesoft.plaf.basic.BasicFileSystemTreeNode: java.util.HashMap _nodes> = $r1;

        return;
    }
}
