public final class org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder extends java.lang.Object implements org.apache.xmlbeans.impl.piccolo.xml.XMLDecoder
{
    private boolean sawCR;

    public void <init>()
    {
        org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder r0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder: boolean sawCR> = 0;

        return;
    }

    public org.apache.xmlbeans.impl.piccolo.io.CharsetDecoder newCharsetDecoder()
    {
        org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder r0;
        org.apache.xmlbeans.impl.piccolo.xml.XMLDecoder $r1;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder: org.apache.xmlbeans.impl.piccolo.xml.XMLDecoder newXMLDecoder()>();

        return $r1;
    }

    public org.apache.xmlbeans.impl.piccolo.xml.XMLDecoder newXMLDecoder()
    {
        org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder $r0, r1;

        r1 := @this: org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder;

        $r0 = new org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder;

        specialinvoke $r0.<org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder: void <init>()>();

        return $r0;
    }

    public int minBytesPerChar()
    {
        org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder r0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder;

        return 1;
    }

    public int maxBytesPerChar()
    {
        org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder r0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder;

        return 3;
    }

    public void reset()
    {
        org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder r0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder;

        r0.<org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder: boolean sawCR> = 0;

        return;
    }

    public void decode(byte[], int, int, char[], int, int, int[]) throws java.io.CharConversionException
    {
        byte[] r1;
        byte b7, b16, $b21, $b24, $b27, $b46, $b49, $b63, $b69, $b74, b82, b84;
        org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder r16;
        short $s17, $s18, $s19, $s40, $s42, $s43, $s44, $s64, $s65, $s66, $s67, $s75, $s76, $s78, $s86, $s87, $s88, $s92, $s94, $s97, $s99, $s101, $s103, $s105, $s107, $s113, $s115, $s117, $s119, $s121, $s123, $s125, $s127, $s129;
        java.lang.StringBuffer $r4, $r6, $r7, $r11, $r13, $r19, $r21, $r22, $r24, $r25, $r27, $r31, $r33, $r37, $r39, $r40, $r42, $r43, $r45, $r49, $r51, $r52, $r54, $r58, $r60, $r61, $r63, $r67, $r69, $r70, $r72, $r73, $r75, $r76, $r78, $r82, $r84, $r86, $r88, $r90, $r92, $r94, $r96, $r98, $r100, $r102;
        int[] r0;
        java.io.CharConversionException $r87, $r89, $r91, $r93, $r95, $r99;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i20, $i22, $i23, $i25, $i26, $i28, i29, $i30, $i31, $i33, $i34, $i35, $i37, $i38, $i39, $i41, $i45, $i47, $i48, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i60, $i61, $i62, $i68, $i70, $i71, $i72, $i73, $i77, i79, i80, i81, i83, $i85, i89, i90, i91, $i93, $i95, $i96, $i98, $i100, $i102, $i104, $i106, $i108, $i109, $i110, $i112, $i114, $i116, $i118, $i120, $i122, $i124, $i126, $i128, $i130, $i131, $i132, $i133, $i135, $i137, $i139, $i141, $i143, $i145;
        java.lang.String $r5, $r8, $r12, $r14, $r20, $r23, $r26, $r28, $r32, $r34, $r38, $r41, $r44, $r46, $r50, $r53, $r55, $r59, $r62, $r64, $r68, $r71, $r74, $r77, $r79, $r83, $r85;
        org.apache.xmlbeans.impl.piccolo.io.IllegalCharException $r97, $r101, $r103;
        char[] r15;
        boolean $z0;
        char $c32, $c36, $c59;

        r16 := @this: org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder;

        r1 := @parameter0: byte[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r15 := @parameter3: char[];

        i29 := @parameter4: int;

        i1 := @parameter5: int;

        r0 := @parameter6: int[];

        i79 = 0;

        i80 = 0;

     label01:
        if i80 >= i0 goto label30;

        if i79 >= i1 goto label30;

        $i3 = i2 + i80;

        i81 = r1[$i3];

        $i4 = i81 & 128;

        if $i4 != 0 goto label02;

        goto label22;

     label02:
        i80 = i80 + 1;

        if i80 >= i0 goto label03;

        $i6 = i2 + i80;

        b7 = r1[$i6];

        goto label04;

     label03:
        $i5 = i80 - 1;

        r0[0] = $i5;

        r0[1] = i79;

        return;

     label04:
        $i8 = i81 & 224;

        if $i8 != 192 goto label06;

        $s92 = (short) b7;

        $s67 = $s92 & 128;

        $i93 = (int) $s67;

        if $i93 == 128 goto label05;

        $r87 = new java.io.CharConversionException;

        $r86 = new java.lang.StringBuffer;

        specialinvoke $r86.<java.lang.StringBuffer: void <init>()>();

        $r58 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Malformed UTF-8 character: 0x");

        $i77 = i81 & 255;

        $r59 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i77);

        $r60 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" 0x");

        $s94 = (short) b7;

        $s78 = $s94 & 255;

        $i95 = (int) $s78;

        $r62 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i95);

        $r63 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r87.<java.io.CharConversionException: void <init>(java.lang.String)>($r64);

        throw $r87;

     label05:
        $i68 = i81 & 31;

        $i70 = $i68 << 6;

        $b69 = b7 & 63;

        $i96 = (int) $b69;

        i81 = $i70 | $i96;

        $i71 = i81 & 1920;

        if $i71 != 0 goto label19;

        $r89 = new java.io.CharConversionException;

        $r88 = new java.lang.StringBuffer;

        specialinvoke $r88.<java.lang.StringBuffer: void <init>()>();

        $r49 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("2-byte UTF-8 character is overlong: 0x");

        $i72 = i2 + i80;

        $i73 = $i72 - 1;

        $b74 = r1[$i73];

        $s97 = (short) $b74;

        $s75 = $s97 & 255;

        $i98 = (int) $s75;

        $r50 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i98);

        $r51 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" 0x");

        $s99 = (short) b7;

        $s76 = $s99 & 255;

        $i100 = (int) $s76;

        $r53 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i100);

        $r54 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r89.<java.io.CharConversionException: void <init>(java.lang.String)>($r55);

        throw $r89;

     label06:
        $i9 = i81 & 240;

        if $i9 != 224 goto label11;

        i80 = i80 + 1;

        if i80 >= i0 goto label07;

        $i39 = i2 + i80;

        b82 = r1[$i39];

        goto label08;

     label07:
        $i38 = i80 - 2;

        r0[0] = $i38;

        r0[1] = i79;

        return;

     label08:
        $s101 = (short) b7;

        $s40 = $s101 & 128;

        $i102 = (int) $s40;

        if $i102 != 128 goto label09;

        $s103 = (short) b82;

        $s44 = $s103 & 128;

        $i104 = (int) $s44;

        if $i104 == 128 goto label10;

     label09:
        $r91 = new java.io.CharConversionException;

        $r90 = new java.lang.StringBuffer;

        specialinvoke $r90.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Malformed UTF-8 character: 0x");

        $i41 = i81 & 255;

        $r20 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i41);

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" 0x");

        $s105 = (short) b7;

        $s42 = $s105 & 255;

        $i106 = (int) $s42;

        $r23 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i106);

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" 0x");

        $s107 = (short) b82;

        $s43 = $s107 & 255;

        $i108 = (int) $s43;

        $r26 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i108);

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r91.<java.io.CharConversionException: void <init>(java.lang.String)>($r28);

        throw $r91;

     label10:
        $i45 = i81 & 15;

        $i48 = $i45 << 12;

        $b46 = b7 & 63;

        $i109 = (int) $b46;

        $i47 = $i109 << 6;

        $i50 = $i48 | $i47;

        $b49 = b82 & 63;

        $i110 = (int) $b49;

        i81 = $i50 | $i110;

        $i112 = (int) 63488;

        $i51 = i81 & $i112;

        if $i51 != 0 goto label19;

        $r93 = new java.io.CharConversionException;

        $r92 = new java.lang.StringBuffer;

        specialinvoke $r92.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("3-byte UTF-8 character is overlong: 0x");

        $i61 = i2 + i80;

        $i62 = $i61 - 2;

        $b63 = r1[$i62];

        $s113 = (short) $b63;

        $s64 = $s113 & 255;

        $i114 = (int) $s64;

        $r38 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i114);

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" 0x");

        $s115 = (short) b7;

        $s65 = $s115 & 255;

        $i116 = (int) $s65;

        $r41 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i116);

        $r42 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" 0x");

        $s117 = (short) b82;

        $s66 = $s117 & 255;

        $i118 = (int) $s66;

        $r44 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i118);

        $r45 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r93.<java.io.CharConversionException: void <init>(java.lang.String)>($r46);

        throw $r93;

     label11:
        $i10 = i81 & 240;

        if $i10 != 240 goto label18;

        $i12 = i80 + 2;

        if $i12 >= i0 goto label12;

        i83 = i80 + 1;

        $i14 = i2 + i83;

        b84 = r1[$i14];

        i80 = i83 + 1;

        $i15 = i2 + i80;

        b16 = r1[$i15];

        goto label13;

     label12:
        $i13 = i80 - 2;

        r0[0] = $i13;

        r0[1] = i79;

        return;

     label13:
        $s119 = (short) b7;

        $s17 = $s119 & 128;

        $i120 = (int) $s17;

        if $i120 != 128 goto label14;

        $s121 = (short) b84;

        $s18 = $s121 & 128;

        $i122 = (int) $s18;

        if $i122 != 128 goto label14;

        $s123 = (short) b16;

        $s19 = $s123 & 128;

        $i124 = (int) $s19;

        if $i124 == 128 goto label15;

     label14:
        $r95 = new java.io.CharConversionException;

        $r94 = new java.lang.StringBuffer;

        specialinvoke $r94.<java.lang.StringBuffer: void <init>()>();

        $r67 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Malformed UTF-8 character: 0x");

        $i85 = i81 & 255;

        $r68 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i85);

        $r69 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r68);

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" 0x");

        $s125 = (short) b7;

        $s86 = $s125 & 255;

        $i126 = (int) $s86;

        $r71 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i126);

        $r72 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r71);

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" 0x");

        $s127 = (short) b84;

        $s87 = $s127 & 255;

        $i128 = (int) $s87;

        $r74 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i128);

        $r75 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r74);

        $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" 0x");

        $s129 = (short) b16;

        $s88 = $s129 & 255;

        $i130 = (int) $s88;

        $r77 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i130);

        $r78 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r77);

        $r79 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r95.<java.io.CharConversionException: void <init>(java.lang.String)>($r79);

        throw $r95;

     label15:
        $i20 = i81 & 7;

        $i23 = $i20 << 18;

        $b21 = b7 & 63;

        $i131 = (int) $b21;

        $i22 = $i131 << 12;

        $i26 = $i23 | $i22;

        $b24 = b84 & 63;

        $i132 = (int) $b24;

        $i25 = $i132 << 6;

        $i28 = $i26 | $i25;

        $b27 = b16 & 63;

        $i133 = (int) $b27;

        i89 = $i28 | $i133;

        if i89 < 65536 goto label16;

        if i89 <= 1114111 goto label17;

     label16:
        $r97 = new org.apache.xmlbeans.impl.piccolo.io.IllegalCharException;

        $r96 = new java.lang.StringBuffer;

        specialinvoke $r96.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r96.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal XML character: 0x");

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i89);

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r97.<org.apache.xmlbeans.impl.piccolo.io.IllegalCharException: void <init>(java.lang.String)>($r14);

        throw $r97;

     label17:
        i90 = i89 - 65536;

        i91 = i79 + 1;

        $i33 = i29 + i79;

        $i30 = i90 >> 10;

        $i135 = (int) 55296;

        $i31 = $i30 | $i135;

        $c32 = (char) $i31;

        r15[$i33] = $c32;

        i79 = i91 + 1;

        $i37 = i29 + i91;

        $i34 = i90 & 1023;

        $i137 = (int) 56320;

        $i35 = $i34 | $i137;

        $c36 = (char) $i35;

        r15[$i37] = $c36;

        r16.<org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder: boolean sawCR> = 0;

        goto label29;

     label18:
        $r99 = new java.io.CharConversionException;

        $r98 = new java.lang.StringBuffer;

        specialinvoke $r98.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Characters larger than 4 bytes are not supported: byte 0x");

        $i11 = i81 & 255;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i11);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" implies a length of more than 4 bytes");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r99.<java.io.CharConversionException: void <init>(java.lang.String)>($r8);

        throw $r99;

     label19:
        $i139 = (int) 55296;

        if i81 < $i139 goto label20;

        $i141 = (int) 57344;

        if i81 < $i141 goto label21;

     label20:
        $i143 = (int) 65534;

        if i81 == $i143 goto label21;

        $i145 = (int) 65535;

        if i81 != $i145 goto label22;

     label21:
        $r101 = new org.apache.xmlbeans.impl.piccolo.io.IllegalCharException;

        $r100 = new java.lang.StringBuffer;

        specialinvoke $r100.<java.lang.StringBuffer: void <init>()>();

        $r82 = virtualinvoke $r100.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal XML character: 0x");

        $r83 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i81);

        $r84 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r83);

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r101.<org.apache.xmlbeans.impl.piccolo.io.IllegalCharException: void <init>(java.lang.String)>($r85);

        throw $r101;

     label22:
        if i81 < 32 goto label23;

        r16.<org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder: boolean sawCR> = 0;

        $i58 = i79;

        i79 = i79 + 1;

        $i60 = i29 + $i58;

        $c59 = (char) i81;

        r15[$i60] = $c59;

        goto label29;

     label23:
        tableswitch(i81)
        {
            case 9: goto label27;
            case 10: goto label24;
            case 11: goto label28;
            case 12: goto label28;
            case 13: goto label26;
            default: goto label28;
        };

     label24:
        $z0 = r16.<org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder: boolean sawCR>;

        if $z0 == 0 goto label25;

        r16.<org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder: boolean sawCR> = 0;

        goto label29;

     label25:
        $i54 = i79;

        i79 = i79 + 1;

        $i55 = i29 + $i54;

        r15[$i55] = 10;

        goto label29;

     label26:
        r16.<org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder: boolean sawCR> = 1;

        $i52 = i79;

        i79 = i79 + 1;

        $i53 = i29 + $i52;

        r15[$i53] = 10;

        goto label29;

     label27:
        $i56 = i79;

        i79 = i79 + 1;

        $i57 = i29 + $i56;

        r15[$i57] = 9;

        goto label29;

     label28:
        $r103 = new org.apache.xmlbeans.impl.piccolo.io.IllegalCharException;

        $r102 = new java.lang.StringBuffer;

        specialinvoke $r102.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r102.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal XML character: 0x");

        $r32 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i81);

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r103.<org.apache.xmlbeans.impl.piccolo.io.IllegalCharException: void <init>(java.lang.String)>($r34);

        throw $r103;

     label29:
        i80 = i80 + 1;

        goto label01;

     label30:
        r0[0] = i80;

        r0[1] = i79;

        return;
    }

    public void decodeXMLDecl(byte[], int, int, char[], int, int, int[]) throws java.io.CharConversionException
    {
        byte[] r1;
        short $s5, $s18;
        byte b4;
        int[] r0;
        int i0, i1, i2, $i3, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, i16, i17, $i19, $i20, $i21;
        boolean $z0;
        char $c14;
        org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder r2;
        char[] r3;

        r2 := @this: org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder;

        r1 := @parameter0: byte[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r3 := @parameter3: char[];

        i6 := @parameter4: int;

        i1 := @parameter5: int;

        r0 := @parameter6: int[];

        i16 = 0;

        i17 = 0;

     label01:
        if i17 >= i0 goto label10;

        if i16 >= i1 goto label10;

        $i3 = i2 + i17;

        b4 = r1[$i3];

        $s18 = (short) b4;

        $s5 = $s18 & 128;

        if $s5 == 0 goto label02;

        goto label10;

     label02:
        $i19 = (int) b4;

        if $i19 < 32 goto label03;

        r2.<org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder: boolean sawCR> = 0;

        $i13 = i16;

        i16 = i16 + 1;

        $i15 = i6 + $i13;

        $c14 = (char) b4;

        r3[$i15] = $c14;

        $i20 = (int) b4;

        if $i20 != 62 goto label09;

        i17 = i17 + 1;

        goto label10;

     label03:
        $i21 = (int) b4;

        tableswitch($i21)
        {
            case 9: goto label07;
            case 10: goto label04;
            case 11: goto label08;
            case 12: goto label08;
            case 13: goto label06;
            default: goto label08;
        };

     label04:
        $z0 = r2.<org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder: boolean sawCR>;

        if $z0 == 0 goto label05;

        r2.<org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder: boolean sawCR> = 0;

        goto label09;

     label05:
        $i9 = i16;

        i16 = i16 + 1;

        $i10 = i6 + $i9;

        r3[$i10] = 10;

        goto label09;

     label06:
        r2.<org.apache.xmlbeans.impl.piccolo.xml.UTF8XMLDecoder: boolean sawCR> = 1;

        $i7 = i16;

        i16 = i16 + 1;

        $i8 = i6 + $i7;

        r3[$i8] = 10;

        goto label09;

     label07:
        $i11 = i16;

        i16 = i16 + 1;

        $i12 = i6 + $i11;

        r3[$i12] = 9;

        goto label09;

     label08:
        goto label10;

     label09:
        i17 = i17 + 1;

        goto label01;

     label10:
        r0[0] = i17;

        r0[1] = i16;

        return;
    }
}
