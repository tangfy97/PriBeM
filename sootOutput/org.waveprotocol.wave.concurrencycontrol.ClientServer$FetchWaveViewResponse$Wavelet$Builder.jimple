public final class org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder extends com.google.protobuf.GeneratedMessage$Builder
{
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result;

    private void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        specialinvoke r0.<com.google.protobuf.GeneratedMessage$Builder: void <init>()>();

        return;
    }

    private static org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder create()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder $r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: void <init>()>();

        $r1 = new org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$1)>(null);

        $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result> = $r1;

        return $r0;
    }

    protected org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet internalGetResult()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        return $r1;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder clear()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1, $r2;
        java.lang.IllegalStateException $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot call clear() after build().");

        throw $r3;

     label1:
        $r2 = new org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet;

        specialinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$1)>(null);

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result> = $r2;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder clone()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder $r0, r1, $r3;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder create()>();

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder mergeFrom(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet)>($r2);

        return $r3;
    }

    public com.google.protobuf.Descriptors$Descriptor getDescriptorForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r1;
        com.google.protobuf.Descriptors$Descriptor $r0;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: com.google.protobuf.Descriptors$Descriptor getDescriptor()>();

        return $r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r0;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet getDefaultInstance()>();

        return $r0;
    }

    public boolean isInitialized()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: boolean isInitialized()>();

        return $z0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet build()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1, $r2, $r3;
        com.google.protobuf.UninitializedMessageException $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: boolean isInitialized()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: com.google.protobuf.UninitializedMessageException newUninitializedMessageException(com.google.protobuf.Message)>($r3);

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet buildPartial()>();

        return $r2;
    }

    private org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet buildParsed() throws com.google.protobuf.InvalidProtocolBufferException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1, $r2;
        com.google.protobuf.InvalidProtocolBufferException $r4;
        com.google.protobuf.UninitializedMessageException $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: boolean isInitialized()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: com.google.protobuf.UninitializedMessageException newUninitializedMessageException(com.google.protobuf.Message)>($r2);

        $r4 = virtualinvoke $r3.<com.google.protobuf.UninitializedMessageException: com.google.protobuf.InvalidProtocolBufferException asInvalidProtocolBufferException()>();

        throw $r4;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet buildPartial()>();

        return $r1;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet buildPartial()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1, r2;
        java.lang.IllegalStateException $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("build() has already been called on this Builder.");

        throw $r3;

     label1:
        r2 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result> = null;

        return r2;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder mergeFrom(com.google.protobuf.Message)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r2;
        com.google.protobuf.Message r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r1, $r3;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        r0 := @parameter0: com.google.protobuf.Message;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet) r0;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder mergeFrom(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet)>($r2);

        return $r3;

     label1:
        specialinvoke r1.<com.google.protobuf.GeneratedMessage$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.Message)>(r0);

        return r1;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder mergeFrom(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet)
    {
        com.google.protobuf.UnknownFieldSet $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet r0, $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot $r4;
        java.lang.String $r5;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet getDefaultInstance()>();

        if r0 != $r1 goto label1;

        return r2;

     label1:
        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: boolean hasWaveletId()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: java.lang.String getWaveletId()>();

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder setWaveletId(java.lang.String)>($r5);

     label2:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: boolean hasSnapshot()>();

        if $z1 == 0 goto label3;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot getSnapshot()>();

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder mergeSnapshot(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot)>($r4);

     label3:
        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: com.google.protobuf.UnknownFieldSet getUnknownFields()>();

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: com.google.protobuf.GeneratedMessage$Builder mergeUnknownFields(com.google.protobuf.UnknownFieldSet)>($r3);

        return r2;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.UnknownFieldSet $r1, $r9, $r10;
        com.google.protobuf.UnknownFieldSet$Builder $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot$Builder $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot $r6, $r7;
        com.google.protobuf.CodedInputStream r3;
        com.google.protobuf.ExtensionRegistryLite r5;
        int $i0;
        java.lang.String $r8;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        r3 := @parameter0: com.google.protobuf.CodedInputStream;

        r5 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: com.google.protobuf.UnknownFieldSet getUnknownFields()>();

        $r2 = staticinvoke <com.google.protobuf.UnknownFieldSet: com.google.protobuf.UnknownFieldSet$Builder newBuilder(com.google.protobuf.UnknownFieldSet)>($r1);

     label1:
        $i0 = virtualinvoke r3.<com.google.protobuf.CodedInputStream: int readTag()>();

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 10: goto label4;
            case 18: goto label5;
            default: goto label3;
        };

     label2:
        $r9 = virtualinvoke $r2.<com.google.protobuf.UnknownFieldSet$Builder: com.google.protobuf.UnknownFieldSet build()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: com.google.protobuf.GeneratedMessage$Builder setUnknownFields(com.google.protobuf.UnknownFieldSet)>($r9);

        return r0;

     label3:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: boolean parseUnknownField(com.google.protobuf.CodedInputStream,com.google.protobuf.UnknownFieldSet$Builder,com.google.protobuf.ExtensionRegistryLite,int)>(r3, $r2, r5, $i0);

        if $z1 != 0 goto label7;

        $r10 = virtualinvoke $r2.<com.google.protobuf.UnknownFieldSet$Builder: com.google.protobuf.UnknownFieldSet build()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: com.google.protobuf.GeneratedMessage$Builder setUnknownFields(com.google.protobuf.UnknownFieldSet)>($r10);

        return r0;

     label4:
        $r8 = virtualinvoke r3.<com.google.protobuf.CodedInputStream: java.lang.String readString()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder setWaveletId(java.lang.String)>($r8);

        goto label7;

     label5:
        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot$Builder newBuilder()>();

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: boolean hasSnapshot()>();

        if $z0 == 0 goto label6;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot getSnapshot()>();

        virtualinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot$Builder mergeFrom(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot)>($r7);

     label6:
        virtualinvoke r3.<com.google.protobuf.CodedInputStream: void readMessage(com.google.protobuf.MessageLite$Builder,com.google.protobuf.ExtensionRegistryLite)>($r4, r5);

        $r6 = virtualinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot buildPartial()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder setSnapshot(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot)>($r6);

        goto label7;

     label7:
        goto label1;
    }

    public boolean hasWaveletId()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: boolean hasWaveletId()>();

        return $z0;
    }

    public java.lang.String getWaveletId()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: java.lang.String getWaveletId()>();

        return $r2;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder setWaveletId(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r1;
        java.lang.String r0;
        java.lang.NullPointerException $r4;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: boolean access$1502(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet,boolean)>($r2, 1);

        $r3 = r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: java.lang.String access$1602(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet,java.lang.String)>($r3, r0);

        return r1;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder clearWaveletId()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1, $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: boolean access$1502(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet,boolean)>($r1, 0);

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet getDefaultInstance()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: java.lang.String getWaveletId()>();

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: java.lang.String access$1602(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet,java.lang.String)>($r2, $r4);

        return r0;
    }

    public boolean hasSnapshot()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: boolean hasSnapshot()>();

        return $z0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot getSnapshot()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot getSnapshot()>();

        return $r2;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder setSnapshot(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r1;
        java.lang.NullPointerException $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot r0;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: boolean access$1702(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet,boolean)>($r2, 1);

        $r3 = r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot access$1802(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet,org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot)>($r3, r0);

        return r1;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder setSnapshot(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot$Builder)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot$Builder r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: boolean access$1702(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet,boolean)>($r1, 1);

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot build()>();

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot access$1802(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet,org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot)>($r3, $r4);

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder mergeSnapshot(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1, $r3, $r4, $r7, $r8, $r13;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot$Builder $r10, $r11;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot r2, $r5, $r6, $r9, $r12;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: boolean hasSnapshot()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot access$1800(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet)>($r4);

        $r6 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot getDefaultInstance()>();

        if $r5 == $r6 goto label1;

        $r8 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $r9 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot access$1800(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet)>($r7);

        $r10 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot)>($r9);

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot$Builder mergeFrom(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot)>(r2);

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot buildPartial()>();

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot access$1802(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet,org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot)>($r8, $r12);

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot access$1802(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet,org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot)>($r3, r2);

     label2:
        $r13 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: boolean access$1702(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet,boolean)>($r13, 1);

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder clearSnapshot()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: boolean access$1702(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet,boolean)>($r1, 0);

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet result>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot getDefaultInstance()>();

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot access$1802(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet,org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletSnapshot)>($r2, $r3);

        return r0;
    }

    protected volatile com.google.protobuf.GeneratedMessage internalGetResult()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet internalGetResult()>();

        return $r1;
    }

    public volatile com.google.protobuf.GeneratedMessage$Builder clone()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder clone()>();

        return $r1;
    }

    public volatile com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.CodedInputStream r1;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        return $r3;
    }

    public volatile com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.Message)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r2;
        com.google.protobuf.Message r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        r1 := @parameter0: com.google.protobuf.Message;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder mergeFrom(com.google.protobuf.Message)>(r1);

        return $r2;
    }

    public volatile com.google.protobuf.AbstractMessage$Builder clear()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder clear()>();

        return $r1;
    }

    public volatile com.google.protobuf.AbstractMessage$Builder clone()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder clone()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet getDefaultInstanceForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.CodedInputStream r1;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        return $r3;
    }

    public volatile com.google.protobuf.Message$Builder clone()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder clone()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message buildPartial()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet buildPartial()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message build()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet build()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.Message)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r2;
        com.google.protobuf.Message r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        r1 := @parameter0: com.google.protobuf.Message;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder mergeFrom(com.google.protobuf.Message)>(r1);

        return $r2;
    }

    public volatile com.google.protobuf.Message$Builder clear()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder clear()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet getDefaultInstanceForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.CodedInputStream r1;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        return $r3;
    }

    public volatile com.google.protobuf.MessageLite$Builder clone()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder clone()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite buildPartial()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet buildPartial()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite build()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet build()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite$Builder clear()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder clear()>();

        return $r1;
    }

    public volatile com.google.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.CodedInputStream r1;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        return $r3;
    }

    public volatile com.google.protobuf.AbstractMessageLite$Builder clone()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder clone()>();

        return $r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder clone()>();

        return $r1;
    }

    static org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet access$1200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder) throws com.google.protobuf.InvalidProtocolBufferException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet buildParsed()>();

        return $r1;
    }

    static org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder access$1300()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder create()>();

        return $r0;
    }
}
