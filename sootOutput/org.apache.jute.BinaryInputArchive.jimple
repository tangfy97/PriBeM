public class org.apache.jute.BinaryInputArchive extends java.lang.Object implements org.apache.jute.InputArchive
{
    private java.io.DataInput in;
    public static final int maxBuffer;

    public static org.apache.jute.BinaryInputArchive getArchive(java.io.InputStream)
    {
        java.io.DataInputStream $r1;
        org.apache.jute.BinaryInputArchive $r0;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        $r0 = new org.apache.jute.BinaryInputArchive;

        $r1 = new java.io.DataInputStream;

        specialinvoke $r1.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r2);

        specialinvoke $r0.<org.apache.jute.BinaryInputArchive: void <init>(java.io.DataInput)>($r1);

        return $r0;
    }

    public void <init>(java.io.DataInput)
    {
        java.io.DataInput r1;
        org.apache.jute.BinaryInputArchive r0;

        r0 := @this: org.apache.jute.BinaryInputArchive;

        r1 := @parameter0: java.io.DataInput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jute.BinaryInputArchive: java.io.DataInput in> = r1;

        return;
    }

    public byte readByte(java.lang.String) throws java.io.IOException
    {
        byte $b0;
        java.io.DataInput $r1;
        java.lang.String r2;
        org.apache.jute.BinaryInputArchive r0;

        r0 := @this: org.apache.jute.BinaryInputArchive;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.jute.BinaryInputArchive: java.io.DataInput in>;

        $b0 = interfaceinvoke $r1.<java.io.DataInput: byte readByte()>();

        return $b0;
    }

    public boolean readBool(java.lang.String) throws java.io.IOException
    {
        java.io.DataInput $r1;
        java.lang.String r2;
        org.apache.jute.BinaryInputArchive r0;
        boolean $z0;

        r0 := @this: org.apache.jute.BinaryInputArchive;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.jute.BinaryInputArchive: java.io.DataInput in>;

        $z0 = interfaceinvoke $r1.<java.io.DataInput: boolean readBoolean()>();

        return $z0;
    }

    public int readInt(java.lang.String) throws java.io.IOException
    {
        java.io.DataInput $r1;
        int $i0;
        java.lang.String r2;
        org.apache.jute.BinaryInputArchive r0;

        r0 := @this: org.apache.jute.BinaryInputArchive;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.jute.BinaryInputArchive: java.io.DataInput in>;

        $i0 = interfaceinvoke $r1.<java.io.DataInput: int readInt()>();

        return $i0;
    }

    public long readLong(java.lang.String) throws java.io.IOException
    {
        java.io.DataInput $r1;
        long $l0;
        java.lang.String r2;
        org.apache.jute.BinaryInputArchive r0;

        r0 := @this: org.apache.jute.BinaryInputArchive;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.jute.BinaryInputArchive: java.io.DataInput in>;

        $l0 = interfaceinvoke $r1.<java.io.DataInput: long readLong()>();

        return $l0;
    }

    public float readFloat(java.lang.String) throws java.io.IOException
    {
        java.io.DataInput $r1;
        float $f0;
        java.lang.String r2;
        org.apache.jute.BinaryInputArchive r0;

        r0 := @this: org.apache.jute.BinaryInputArchive;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.jute.BinaryInputArchive: java.io.DataInput in>;

        $f0 = interfaceinvoke $r1.<java.io.DataInput: float readFloat()>();

        return $f0;
    }

    public double readDouble(java.lang.String) throws java.io.IOException
    {
        java.io.DataInput $r1;
        java.lang.String r2;
        org.apache.jute.BinaryInputArchive r0;
        double $d0;

        r0 := @this: org.apache.jute.BinaryInputArchive;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.jute.BinaryInputArchive: java.io.DataInput in>;

        $d0 = interfaceinvoke $r1.<java.io.DataInput: double readDouble()>();

        return $d0;
    }

    public java.lang.String readString(java.lang.String) throws java.io.IOException
    {
        byte[] r2;
        org.apache.jute.BinaryInputArchive r0;
        java.io.DataInput $r1, $r3;
        int $i0, $i2;
        java.lang.String r5, $r6;

        r0 := @this: org.apache.jute.BinaryInputArchive;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.jute.BinaryInputArchive: java.io.DataInput in>;

        $i0 = interfaceinvoke $r1.<java.io.DataInput: int readInt()>();

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        return null;

     label1:
        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.apache.jute.BinaryInputArchive: java.io.DataInput in>;

        interfaceinvoke $r3.<java.io.DataInput: void readFully(byte[])>(r2);

        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(byte[],java.lang.String)>(r2, "UTF8");

        return $r6;
    }

    private static int determineMaxBuffer()
    {
        int $i0;
        java.lang.String $r0;
        java.lang.Exception $r1;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("jute.maxbuffer");

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

     label2:
        return $i0;

     label3:
        $r1 := @caughtexception;

        return 1048575;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public byte[] readBuffer(java.lang.String) throws java.io.IOException
    {
        byte[] r7;
        java.io.IOException $r10;
        org.apache.jute.BinaryInputArchive r0;
        int $i0, $i1, $i3;
        java.io.DataInput $r8;
        java.lang.StringBuilder $r4, $r5, $r9;
        java.lang.String r1, $r6;

        r0 := @this: org.apache.jute.BinaryInputArchive;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.jute.BinaryInputArchive: int readInt(java.lang.String)>(r1);

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        return null;

     label1:
        if $i0 < 0 goto label2;

        $i1 = <org.apache.jute.BinaryInputArchive: int maxBuffer>;

        if $i0 <= $i1 goto label3;

     label2:
        $r10 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unreasonable length = ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r10;

     label3:
        r7 = newarray (byte)[$i0];

        $r8 = r0.<org.apache.jute.BinaryInputArchive: java.io.DataInput in>;

        interfaceinvoke $r8.<java.io.DataInput: void readFully(byte[])>(r7);

        return r7;
    }

    public void readRecord(org.apache.jute.Record, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.Record r0;
        java.lang.String r2;
        org.apache.jute.BinaryInputArchive r1;

        r1 := @this: org.apache.jute.BinaryInputArchive;

        r0 := @parameter0: org.apache.jute.Record;

        r2 := @parameter1: java.lang.String;

        interfaceinvoke r0.<org.apache.jute.Record: void deserialize(org.apache.jute.InputArchive,java.lang.String)>(r1, r2);

        return;
    }

    public void startRecord(java.lang.String) throws java.io.IOException
    {
        java.lang.String r1;
        org.apache.jute.BinaryInputArchive r0;

        r0 := @this: org.apache.jute.BinaryInputArchive;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void endRecord(java.lang.String) throws java.io.IOException
    {
        java.lang.String r1;
        org.apache.jute.BinaryInputArchive r0;

        r0 := @this: org.apache.jute.BinaryInputArchive;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public org.apache.jute.Index startVector(java.lang.String) throws java.io.IOException
    {
        int $i0, $i2;
        java.lang.String r1;
        org.apache.jute.BinaryInputArchive$BinaryIndex $r3;
        org.apache.jute.BinaryInputArchive r0;

        r0 := @this: org.apache.jute.BinaryInputArchive;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.jute.BinaryInputArchive: int readInt(java.lang.String)>(r1);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        return null;

     label1:
        $r3 = new org.apache.jute.BinaryInputArchive$BinaryIndex;

        specialinvoke $r3.<org.apache.jute.BinaryInputArchive$BinaryIndex: void <init>(int)>($i0);

        return $r3;
    }

    public void endVector(java.lang.String) throws java.io.IOException
    {
        java.lang.String r1;
        org.apache.jute.BinaryInputArchive r0;

        r0 := @this: org.apache.jute.BinaryInputArchive;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public org.apache.jute.Index startMap(java.lang.String) throws java.io.IOException
    {
        int $i0;
        java.lang.String r2;
        org.apache.jute.BinaryInputArchive$BinaryIndex $r0;
        org.apache.jute.BinaryInputArchive r1;

        r1 := @this: org.apache.jute.BinaryInputArchive;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.jute.BinaryInputArchive$BinaryIndex;

        $i0 = virtualinvoke r1.<org.apache.jute.BinaryInputArchive: int readInt(java.lang.String)>(r2);

        specialinvoke $r0.<org.apache.jute.BinaryInputArchive$BinaryIndex: void <init>(int)>($i0);

        return $r0;
    }

    public void endMap(java.lang.String) throws java.io.IOException
    {
        java.lang.String r1;
        org.apache.jute.BinaryInputArchive r0;

        r0 := @this: org.apache.jute.BinaryInputArchive;

        r1 := @parameter0: java.lang.String;

        return;
    }

    static void <clinit>()
    {
        int $i0;

        $i0 = staticinvoke <org.apache.jute.BinaryInputArchive: int determineMaxBuffer()>();

        <org.apache.jute.BinaryInputArchive: int maxBuffer> = $i0;

        return;
    }
}
