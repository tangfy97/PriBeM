public class org.fife.ui.rsyntaxtextarea.RSyntaxDocument extends org.fife.ui.rtextarea.RDocument implements org.fife.ui.rsyntaxtextarea.SyntaxConstants
{
    private transient org.fife.ui.rsyntaxtextarea.TokenMakerFactory tokenMakerFactory;
    private transient org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker;
    private java.lang.String syntaxStyle;
    protected transient org.fife.util.DynamicIntArray lastTokensOnLines;
    private transient javax.swing.text.Segment s;

    public void <init>(java.lang.String)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        java.lang.String r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void <init>(org.fife.ui.rsyntaxtextarea.TokenMakerFactory,java.lang.String)>(null, r1);

        return;
    }

    public void <init>(org.fife.ui.rsyntaxtextarea.TokenMakerFactory, java.lang.String)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        org.fife.ui.rsyntaxtextarea.TokenMakerFactory r5;
        org.fife.util.DynamicIntArray $r2, $r3;
        javax.swing.text.Segment $r4;
        java.lang.String r6;
        java.lang.Integer $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        r5 := @parameter0: org.fife.ui.rsyntaxtextarea.TokenMakerFactory;

        r6 := @parameter1: java.lang.String;

        specialinvoke r0.<org.fife.ui.rtextarea.RDocument: void <init>()>();

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(5);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void putProperty(java.lang.Object,java.lang.Object)>("tabSize", $r1);

        $r2 = new org.fife.util.DynamicIntArray;

        specialinvoke $r2.<org.fife.util.DynamicIntArray: void <init>(int)>(400);

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.util.DynamicIntArray lastTokensOnLines> = $r2;

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.util.DynamicIntArray lastTokensOnLines>;

        virtualinvoke $r3.<org.fife.util.DynamicIntArray: void add(int)>(0);

        $r4 = new javax.swing.text.Segment;

        specialinvoke $r4.<javax.swing.text.Segment: void <init>()>();

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Segment s> = $r4;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void setTokenMakerFactory(org.fife.ui.rsyntaxtextarea.TokenMakerFactory)>(r5);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void setSyntaxStyle(java.lang.String)>(r6);

        return;
    }

    protected void fireInsertUpdate(javax.swing.event.DocumentEvent)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, i12, $i14;
        javax.swing.event.DocumentEvent r2;
        org.fife.ui.rsyntaxtextarea.TokenMaker $r7;
        javax.swing.text.Element[] r4, $r5, $r10;
        org.fife.util.DynamicIntArray $r8, $r9;
        javax.swing.event.DocumentEvent$ElementChange $r3;
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        javax.swing.text.Segment $r6;
        javax.swing.text.Element $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        r2 := @parameter0: javax.swing.event.DocumentEvent;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Element getDefaultRootElement()>();

        $r3 = interfaceinvoke r2.<javax.swing.event.DocumentEvent: javax.swing.event.DocumentEvent$ElementChange getChange(javax.swing.text.Element)>($r1);

        if $r3 != null goto label01;

        $r10 = null;

        goto label02;

     label01:
        $r10 = interfaceinvoke $r3.<javax.swing.event.DocumentEvent$ElementChange: javax.swing.text.Element[] getChildrenAdded()>();

     label02:
        r4 = $r10;

        $i0 = interfaceinvoke $r1.<javax.swing.text.Element: int getElementCount()>();

        $i1 = interfaceinvoke r2.<javax.swing.event.DocumentEvent: int getOffset()>();

        $i2 = interfaceinvoke $r1.<javax.swing.text.Element: int getElementIndex(int)>($i1);

        $i8 = $i2 - 1;

        $i14 = (int) -1;

        if $i8 <= $i14 goto label03;

        $r9 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.util.DynamicIntArray lastTokensOnLines>;

        $i9 = virtualinvoke $r9.<org.fife.util.DynamicIntArray: int get(int)>($i8);

        goto label04;

     label03:
        $i9 = 0;

     label04:
        i10 = $i9;

        if r4 == null goto label09;

        $i3 = lengthof r4;

        if $i3 <= 0 goto label09;

        $r5 = interfaceinvoke $r3.<javax.swing.event.DocumentEvent$ElementChange: javax.swing.text.Element[] getChildrenRemoved()>();

        if $r5 == null goto label05;

        $i11 = lengthof $r5;

        goto label06;

     label05:
        $i11 = 0;

     label06:
        $i4 = lengthof r4;

        $i5 = $i2 + $i4;

        $i7 = $i5 - $i11;

        i12 = $i2;

     label07:
        if i12 >= $i7 goto label08;

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void setSharedSegment(int)>(i12);

        $r7 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        $r6 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Segment s>;

        $i6 = interfaceinvoke $r7.<org.fife.ui.rsyntaxtextarea.TokenMaker: int getLastTokenTypeOnLine(javax.swing.text.Segment,int)>($r6, i10);

        $r8 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.util.DynamicIntArray lastTokensOnLines>;

        virtualinvoke $r8.<org.fife.util.DynamicIntArray: void add(int,int)>(i12, $i6);

        i10 = $i6;

        i12 = i12 + 1;

        goto label07;

     label08:
        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: int updateLastTokensBelow(int,int,int)>($i7, $i0, i10);

        goto label10;

     label09:
        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: int updateLastTokensBelow(int,int,int)>($i2, $i0, i10);

     label10:
        specialinvoke r0.<org.fife.ui.rtextarea.RDocument: void fireInsertUpdate(javax.swing.event.DocumentEvent)>(r2);

        return;
    }

    protected void fireRemoveUpdate(javax.swing.event.DocumentEvent)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, i11, $i12, i13, $i14, $i16, $i18;
        javax.swing.event.DocumentEvent r2;
        javax.swing.text.Element[] r4, $r7, $r10;
        org.fife.util.DynamicIntArray $r5, $r6, $r8, $r9;
        javax.swing.event.DocumentEvent$ElementChange $r3;
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        javax.swing.text.Element $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        r2 := @parameter0: javax.swing.event.DocumentEvent;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Element getDefaultRootElement()>();

        $i0 = interfaceinvoke $r1.<javax.swing.text.Element: int getElementCount()>();

        $r3 = interfaceinvoke r2.<javax.swing.event.DocumentEvent: javax.swing.event.DocumentEvent$ElementChange getChange(javax.swing.text.Element)>($r1);

        if $r3 != null goto label01;

        $r10 = null;

        goto label02;

     label01:
        $r10 = interfaceinvoke $r3.<javax.swing.event.DocumentEvent$ElementChange: javax.swing.text.Element[] getChildrenRemoved()>();

     label02:
        r4 = $r10;

        if $r10 == null goto label07;

        $i4 = lengthof $r10;

        if $i4 <= 0 goto label07;

        $i5 = interfaceinvoke $r3.<javax.swing.event.DocumentEvent$ElementChange: int getIndex()>();

        i9 = $i5 - 1;

        $i16 = (int) -1;

        if i9 <= $i16 goto label03;

        $r9 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.util.DynamicIntArray lastTokensOnLines>;

        $i10 = virtualinvoke $r9.<org.fife.util.DynamicIntArray: int get(int)>(i9);

        goto label04;

     label03:
        $i10 = 0;

     label04:
        i11 = $i10;

        $r7 = interfaceinvoke $r3.<javax.swing.event.DocumentEvent$ElementChange: javax.swing.text.Element[] getChildrenAdded()>();

        if $r7 != null goto label05;

        $i12 = 0;

        goto label06;

     label05:
        $i12 = lengthof $r7;

     label06:
        $i6 = lengthof r4;

        $i7 = $i5 + $i6;

        $i8 = $i7 - $i12;

        $r8 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.util.DynamicIntArray lastTokensOnLines>;

        virtualinvoke $r8.<org.fife.util.DynamicIntArray: void removeRange(int,int)>($i5, $i8);

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: int updateLastTokensBelow(int,int,int)>($i5, $i0, i11);

        goto label11;

     label07:
        $i1 = interfaceinvoke r2.<javax.swing.event.DocumentEvent: int getOffset()>();

        $i2 = interfaceinvoke $r1.<javax.swing.text.Element: int getElementIndex(int)>($i1);

        $r5 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.util.DynamicIntArray lastTokensOnLines>;

        $i3 = virtualinvoke $r5.<org.fife.util.DynamicIntArray: int getSize()>();

        if $i2 < $i3 goto label08;

        return;

     label08:
        i13 = $i2 - 1;

        $i18 = (int) -1;

        if i13 <= $i18 goto label09;

        $r6 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.util.DynamicIntArray lastTokensOnLines>;

        $i14 = virtualinvoke $r6.<org.fife.util.DynamicIntArray: int get(int)>(i13);

        goto label10;

     label09:
        $i14 = 0;

     label10:
        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: int updateLastTokensBelow(int,int,int)>($i2, $i0, $i14);

     label11:
        specialinvoke r0.<org.fife.ui.rtextarea.RDocument: void fireRemoveUpdate(javax.swing.event.DocumentEvent)>(r2);

        return;
    }

    public boolean getCompleteMarkupCloseTags()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        org.fife.ui.rsyntaxtextarea.TokenMaker $r1;
        org.fife.ui.rsyntaxtextarea.modes.AbstractMarkupTokenMaker $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: boolean getLanguageIsMarkup()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        $r2 = (org.fife.ui.rsyntaxtextarea.modes.AbstractMarkupTokenMaker) $r1;

        $z1 = virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.modes.AbstractMarkupTokenMaker: boolean getCompleteCloseTags()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean getCurlyBracesDenoteCodeBlocks()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        org.fife.ui.rsyntaxtextarea.TokenMaker $r1;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        $z0 = interfaceinvoke $r1.<org.fife.ui.rsyntaxtextarea.TokenMaker: boolean getCurlyBracesDenoteCodeBlocks()>();

        return $z0;
    }

    public boolean getLanguageIsMarkup()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        org.fife.ui.rsyntaxtextarea.TokenMaker $r1;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        $z0 = interfaceinvoke $r1.<org.fife.ui.rsyntaxtextarea.TokenMaker: boolean isMarkupLanguage()>();

        return $z0;
    }

    public int getLastTokenTypeOnLine(int)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        int i0, $i1;
        org.fife.util.DynamicIntArray $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        i0 := @parameter0: int;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.util.DynamicIntArray lastTokensOnLines>;

        $i1 = virtualinvoke $r1.<org.fife.util.DynamicIntArray: int get(int)>(i0);

        return $i1;
    }

    public java.lang.String[] getLineCommentStartAndEnd()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        org.fife.ui.rsyntaxtextarea.TokenMaker $r1;
        java.lang.String[] $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        $r2 = interfaceinvoke $r1.<org.fife.ui.rsyntaxtextarea.TokenMaker: java.lang.String[] getLineCommentStartAndEnd()>();

        return $r2;
    }

    boolean getMarkOccurrencesOfTokenType(int)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        org.fife.ui.rsyntaxtextarea.TokenMaker $r1;
        int i0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        i0 := @parameter0: int;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        $z0 = interfaceinvoke $r1.<org.fife.ui.rsyntaxtextarea.TokenMaker: boolean getMarkOccurrencesOfTokenType(int)>(i0);

        return $z0;
    }

    public boolean getShouldIndentNextLine(int)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        org.fife.ui.rsyntaxtextarea.TokenMaker $r3;
        int i0;
        org.fife.ui.rsyntaxtextarea.Token $r1, $r2;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.Token getTokenListForLine(int)>(i0);

        $r2 = virtualinvoke $r1.<org.fife.ui.rsyntaxtextarea.Token: org.fife.ui.rsyntaxtextarea.Token getLastNonCommentNonWhitespaceToken()>();

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        $z0 = interfaceinvoke $r3.<org.fife.ui.rsyntaxtextarea.TokenMaker: boolean getShouldIndentNextLineAfter(org.fife.ui.rsyntaxtextarea.Token)>($r2);

        return $z0;
    }

    public final org.fife.ui.rsyntaxtextarea.Token getTokenListForLine(int)
    {
        org.fife.ui.rsyntaxtextarea.TokenMaker $r5;
        javax.swing.text.BadLocationException $r7;
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        int i0, $i1, $i2, i3, $i4, $i5, $i6;
        javax.swing.text.Segment $r3, $r4;
        javax.swing.text.Element $r1, $r2;
        org.fife.ui.rsyntaxtextarea.Token $r6;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Element getDefaultRootElement()>();

        $r2 = interfaceinvoke $r1.<javax.swing.text.Element: javax.swing.text.Element getElement(int)>(i0);

        $i1 = interfaceinvoke $r2.<javax.swing.text.Element: int getStartOffset()>();

        $i2 = interfaceinvoke $r2.<javax.swing.text.Element: int getEndOffset()>();

        i3 = $i2 - 1;

     label1:
        $i4 = i3 - $i1;

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Segment s>;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void getText(int,int,javax.swing.text.Segment)>($i1, $i4, $r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        virtualinvoke $r7.<javax.swing.text.BadLocationException: void printStackTrace()>();

        return null;

     label4:
        if i0 != 0 goto label5;

        $i6 = 0;

        goto label6;

     label5:
        $i5 = i0 - 1;

        $i6 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: int getLastTokenTypeOnLine(int)>($i5);

     label6:
        $r5 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        $r4 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Segment s>;

        $r6 = interfaceinvoke $r5.<org.fife.ui.rsyntaxtextarea.TokenMaker: org.fife.ui.rsyntaxtextarea.Token getTokenList(javax.swing.text.Segment,int,int)>($r4, $i6, $i1);

        return $r6;

        catch javax.swing.text.BadLocationException from label1 to label2 with label3;
    }

    boolean insertBreakSpecialHandling(java.awt.event.ActionEvent)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        org.fife.ui.rsyntaxtextarea.TokenMaker $r1;
        javax.swing.Action $r2;
        java.awt.event.ActionEvent r3;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        r3 := @parameter0: java.awt.event.ActionEvent;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        $r2 = interfaceinvoke $r1.<org.fife.ui.rsyntaxtextarea.TokenMaker: javax.swing.Action getInsertBreakAction()>();

        if $r2 == null goto label1;

        interfaceinvoke $r2.<javax.swing.Action: void actionPerformed(java.awt.event.ActionEvent)>(r3);

        return 1;

     label1:
        return 0;
    }

    public boolean isWhitespaceVisible()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        org.fife.ui.rsyntaxtextarea.TokenMaker $r1, $r2;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        if $r1 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        $z0 = interfaceinvoke $r2.<org.fife.ui.rsyntaxtextarea.TokenMaker: boolean isWhitespaceVisible()>();

     label2:
        return $z0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        org.fife.util.DynamicIntArray $r4;
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r1;
        int $i0;
        javax.swing.text.Segment $r2;
        java.lang.String $r5;
        javax.swing.text.Element $r3;
        boolean $z0;

        r1 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void setTokenMakerFactory(org.fife.ui.rsyntaxtextarea.TokenMakerFactory)>(null);

        $r2 = new javax.swing.text.Segment;

        specialinvoke $r2.<javax.swing.text.Segment: void <init>()>();

        r1.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Segment s> = $r2;

        $r3 = virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Element getDefaultRootElement()>();

        $i0 = interfaceinvoke $r3.<javax.swing.text.Element: int getElementCount()>();

        $r4 = new org.fife.util.DynamicIntArray;

        specialinvoke $r4.<org.fife.util.DynamicIntArray: void <init>(int)>($i0);

        r1.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.util.DynamicIntArray lastTokensOnLines> = $r4;

        $r5 = r1.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: java.lang.String syntaxStyle>;

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void setSyntaxStyle(java.lang.String)>($r5);

        $z0 = virtualinvoke r0.<java.io.ObjectInputStream: boolean readBoolean()>();

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void setWhitespaceVisible(boolean)>($z0);

        return;
    }

    private final void setSharedSegment(int)
    {
        java.lang.StringBuffer $r5, $r6, $r7, $r11, $r12, $r13, $r14, $r15;
        int i0, $i1, $i2, i3, $i4;
        java.lang.InternalError $r4, $r10;
        java.lang.String $r8, $r16;
        javax.swing.text.BadLocationException $r9;
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        javax.swing.text.Segment $r3;
        javax.swing.text.Element $r1, $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Element getDefaultRootElement()>();

        $r2 = interfaceinvoke $r1.<javax.swing.text.Element: javax.swing.text.Element getElement(int)>(i0);

        if $r2 != null goto label1;

        $r4 = new java.lang.InternalError;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid line number: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.InternalError: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $i1 = interfaceinvoke $r2.<javax.swing.text.Element: int getStartOffset()>();

        $i2 = interfaceinvoke $r2.<javax.swing.text.Element: int getEndOffset()>();

        i3 = $i2 - 1;

     label2:
        $i4 = i3 - $i1;

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Segment s>;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void getText(int,int,javax.swing.text.Segment)>($i1, $i4, $r3);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = new java.lang.InternalError;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Text range not in document: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.InternalError: void <init>(java.lang.String)>($r16);

        throw $r10;

     label5:
        return;

        catch javax.swing.text.BadLocationException from label2 to label3 with label4;
    }

    public void setSyntaxStyle(java.lang.String)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        org.fife.ui.rsyntaxtextarea.TokenMaker $r3, $r4;
        org.fife.ui.rsyntaxtextarea.TokenMakerFactory $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: boolean isWhitespaceVisible()>();

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMakerFactory tokenMakerFactory>;

        $r3 = virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.TokenMakerFactory: org.fife.ui.rsyntaxtextarea.TokenMaker getTokenMaker(java.lang.String)>(r1);

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker> = $r3;

        $r4 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        interfaceinvoke $r4.<org.fife.ui.rsyntaxtextarea.TokenMaker: void setWhitespaceVisible(boolean)>($z0);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void updateSyntaxHighlightingInformation()>();

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: java.lang.String syntaxStyle> = r1;

        return;
    }

    public void setSyntaxStyle(org.fife.ui.rsyntaxtextarea.TokenMaker)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r1;
        org.fife.ui.rsyntaxtextarea.TokenMaker r0;
        boolean $z0;

        r1 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.TokenMaker;

        $z0 = virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: boolean isWhitespaceVisible()>();

        interfaceinvoke r0.<org.fife.ui.rsyntaxtextarea.TokenMaker: void setWhitespaceVisible(boolean)>($z0);

        r1.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker> = r0;

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void updateSyntaxHighlightingInformation()>();

        return;
    }

    public void setTokenMakerFactory(org.fife.ui.rsyntaxtextarea.TokenMakerFactory)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        org.fife.ui.rsyntaxtextarea.TokenMakerFactory r1, $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        r1 := @parameter0: org.fife.ui.rsyntaxtextarea.TokenMakerFactory;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = staticinvoke <org.fife.ui.rsyntaxtextarea.TokenMakerFactory: org.fife.ui.rsyntaxtextarea.TokenMakerFactory getDefaultInstance()>();

     label2:
        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMakerFactory tokenMakerFactory> = $r2;

        return;
    }

    public void setWhitespaceVisible(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        org.fife.ui.rsyntaxtextarea.TokenMaker $r1;
        boolean z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        interfaceinvoke $r1.<org.fife.ui.rsyntaxtextarea.TokenMaker: void setWhitespaceVisible(boolean)>(z0);

        return;
    }

    private int updateLastTokensBelow(int, int, int)
    {
        org.fife.ui.rsyntaxtextarea.TokenMaker $r5;
        org.fife.util.DynamicIntArray $r3, $r6;
        javax.swing.text.AbstractDocument$DefaultDocumentEvent $r1, $r7;
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        javax.swing.event.DocumentEvent$EventType $r2, $r8;
        int i0, i1, $i2, $i3, i4, i5;
        javax.swing.text.Segment $r4;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        i4 := @parameter0: int;

        i1 := @parameter1: int;

        i5 := @parameter2: int;

        i0 = i4;

     label1:
        if i4 >= i1 goto label3;

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void setSharedSegment(int)>(i4);

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.util.DynamicIntArray lastTokensOnLines>;

        $i2 = virtualinvoke $r3.<org.fife.util.DynamicIntArray: int get(int)>(i4);

        $r5 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        $r4 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Segment s>;

        $i3 = interfaceinvoke $r5.<org.fife.ui.rsyntaxtextarea.TokenMaker: int getLastTokenTypeOnLine(javax.swing.text.Segment,int)>($r4, i5);

        if $i2 != $i3 goto label2;

        $r7 = new javax.swing.text.AbstractDocument$DefaultDocumentEvent;

        $r8 = <javax.swing.event.DocumentEvent$EventType: javax.swing.event.DocumentEvent$EventType CHANGE>;

        specialinvoke $r7.<javax.swing.text.AbstractDocument$DefaultDocumentEvent: void <init>(javax.swing.text.AbstractDocument,int,int,javax.swing.event.DocumentEvent$EventType)>(r0, i0, i4, $r8);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void fireChangedUpdate(javax.swing.event.DocumentEvent)>($r7);

        return i4;

     label2:
        $r6 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.util.DynamicIntArray lastTokensOnLines>;

        virtualinvoke $r6.<org.fife.util.DynamicIntArray: void setUnsafe(int,int)>(i4, $i3);

        i5 = $i3;

        i4 = i4 + 1;

        goto label1;

     label3:
        if i4 <= i0 goto label4;

        $r1 = new javax.swing.text.AbstractDocument$DefaultDocumentEvent;

        $r2 = <javax.swing.event.DocumentEvent$EventType: javax.swing.event.DocumentEvent$EventType CHANGE>;

        specialinvoke $r1.<javax.swing.text.AbstractDocument$DefaultDocumentEvent: void <init>(javax.swing.text.AbstractDocument,int,int,javax.swing.event.DocumentEvent$EventType)>(r0, i0, i4, $r2);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void fireChangedUpdate(javax.swing.event.DocumentEvent)>($r1);

     label4:
        return i4;
    }

    protected void updateSyntaxHighlightingInformation()
    {
        org.fife.ui.rsyntaxtextarea.TokenMaker $r5;
        org.fife.util.DynamicIntArray $r6;
        javax.swing.text.AbstractDocument$DefaultDocumentEvent $r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r0;
        javax.swing.event.DocumentEvent$EventType $r3;
        int $i0, $i1, $i2, i3, i4;
        javax.swing.text.Segment $r4;
        javax.swing.text.Element $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Element getDefaultRootElement()>();

        $i0 = interfaceinvoke $r1.<javax.swing.text.Element: int getElementCount()>();

        i3 = 0;

        i4 = 0;

     label1:
        if i4 >= $i0 goto label2;

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void setSharedSegment(int)>(i4);

        $r5 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.TokenMaker tokenMaker>;

        $r4 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Segment s>;

        $i2 = interfaceinvoke $r5.<org.fife.ui.rsyntaxtextarea.TokenMaker: int getLastTokenTypeOnLine(javax.swing.text.Segment,int)>($r4, i3);

        i3 = $i2;

        $r6 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.util.DynamicIntArray lastTokensOnLines>;

        virtualinvoke $r6.<org.fife.util.DynamicIntArray: void set(int,int)>(i4, $i2);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r2 = new javax.swing.text.AbstractDocument$DefaultDocumentEvent;

        $i1 = $i0 - 1;

        $r3 = <javax.swing.event.DocumentEvent$EventType: javax.swing.event.DocumentEvent$EventType CHANGE>;

        specialinvoke $r2.<javax.swing.text.AbstractDocument$DefaultDocumentEvent: void <init>(javax.swing.text.AbstractDocument,int,int,javax.swing.event.DocumentEvent$EventType)>(r0, 0, $i1, $r3);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void fireChangedUpdate(javax.swing.event.DocumentEvent)>($r2);

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r1;
        java.io.ObjectOutputStream r0;
        boolean $z0;

        r1 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $z0 = virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: boolean isWhitespaceVisible()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeBoolean(boolean)>($z0);

        return;
    }
}
