public final class kodkod.util.ints.RangeSequence extends kodkod.util.ints.AbstractSparseSequence implements java.lang.Cloneable
{
    private final kodkod.util.ints.IntTree tree;
    private final kodkod.util.ints.EntryView view;
    private int size;

    public void <init>()
    {
        kodkod.util.ints.RangeSequence r0;
        kodkod.util.ints.IntTree $r2;
        kodkod.util.ints.EntryView $r1;

        r0 := @this: kodkod.util.ints.RangeSequence;

        specialinvoke r0.<kodkod.util.ints.AbstractSparseSequence: void <init>()>();

        $r1 = new kodkod.util.ints.EntryView;

        specialinvoke $r1.<kodkod.util.ints.EntryView: void <init>(int,java.lang.Object)>(-2147483648, null);

        r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.EntryView view> = $r1;

        $r2 = new kodkod.util.ints.IntTree;

        specialinvoke $r2.<kodkod.util.ints.IntTree: void <init>()>();

        r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree> = $r2;

        r0.<kodkod.util.ints.RangeSequence: int size> = 0;

        return;
    }

    private void <init>(kodkod.util.ints.RangeSequence)
    {
        kodkod.util.ints.RangeSequence r0, r1;
        java.lang.CloneNotSupportedException $r5;
        kodkod.util.ints.EntryView $r4;
        int $i0;
        java.lang.InternalError $r6;
        kodkod.util.ints.IntTree $r2, $r3;

        r0 := @this: kodkod.util.ints.RangeSequence;

        r1 := @parameter0: kodkod.util.ints.RangeSequence;

        specialinvoke r0.<kodkod.util.ints.AbstractSparseSequence: void <init>()>();

        $i0 = r1.<kodkod.util.ints.RangeSequence: int size>;

        r0.<kodkod.util.ints.RangeSequence: int size> = $i0;

     label1:
        $r2 = r1.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r3 = virtualinvoke $r2.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree clone()>();

        r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree> = $r3;

        goto label3;

     label2:
        $r5 := @caughtexception;

        $r6 = new java.lang.InternalError;

        specialinvoke $r6.<java.lang.InternalError: void <init>()>();

        throw $r6;

     label3:
        $r4 = new kodkod.util.ints.EntryView;

        specialinvoke $r4.<kodkod.util.ints.EntryView: void <init>(int,java.lang.Object)>(-2147483648, null);

        r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.EntryView view> = $r4;

        return;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label2;
    }

    public java.util.Iterator iterator(int, int)
    {
        kodkod.util.ints.RangeSequence$EntryIterator $r1;
        kodkod.util.ints.RangeSequence$AscendingIterator $r2;
        int i0, i1;
        kodkod.util.ints.RangeSequence$DescendingIterator $r3;
        kodkod.util.ints.RangeSequence r0;

        r0 := @this: kodkod.util.ints.RangeSequence;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > i1 goto label1;

        $r2 = new kodkod.util.ints.RangeSequence$AscendingIterator;

        $r1 = $r2;

        specialinvoke $r2.<kodkod.util.ints.RangeSequence$AscendingIterator: void <init>(kodkod.util.ints.RangeSequence,int,int)>(r0, i0, i1);

        goto label2;

     label1:
        $r3 = new kodkod.util.ints.RangeSequence$DescendingIterator;

        $r1 = $r3;

        specialinvoke $r3.<kodkod.util.ints.RangeSequence$DescendingIterator: void <init>(kodkod.util.ints.RangeSequence,int,int)>(r0, i0, i1);

     label2:
        return $r1;
    }

    public int size()
    {
        int $i0;
        kodkod.util.ints.RangeSequence r0;

        r0 := @this: kodkod.util.ints.RangeSequence;

        $i0 = r0.<kodkod.util.ints.RangeSequence: int size>;

        return $i0;
    }

    public void clear()
    {
        kodkod.util.ints.RangeSequence r0;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.RangeSequence;

        $r1 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        virtualinvoke $r1.<kodkod.util.ints.IntTree: void clear()>();

        r0.<kodkod.util.ints.RangeSequence: int size> = 0;

        return;
    }

    private boolean isHeadOf(kodkod.util.ints.RangeSequence$Entry, int, java.lang.Object)
    {
        kodkod.util.ints.RangeSequence$Entry r0;
        kodkod.util.ints.RangeSequence r3;
        int i0, $i1, $i2;
        java.lang.Object r1, $r2;
        boolean $z0;

        r3 := @this: kodkod.util.ints.RangeSequence;

        r0 := @parameter0: kodkod.util.ints.RangeSequence$Entry;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        if r0 == null goto label1;

        $i2 = r0.<kodkod.util.ints.RangeSequence$Entry: int key>;

        $i1 = i0 - 1;

        if $i2 != $i1 goto label1;

        $r2 = r0.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value>;

        $z0 = staticinvoke <kodkod.util.ints.RangeSequence: boolean equal(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isTailOf(kodkod.util.ints.RangeSequence$Entry, int, java.lang.Object)
    {
        kodkod.util.ints.RangeSequence$Entry r0;
        kodkod.util.ints.RangeSequence r3;
        int $i0, i1, $i2;
        java.lang.Object r1, $r2;
        boolean $z0;

        r3 := @this: kodkod.util.ints.RangeSequence;

        r0 := @parameter0: kodkod.util.ints.RangeSequence$Entry;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<kodkod.util.ints.RangeSequence$Entry: int min()>();

        $i2 = i1 + 1;

        if $i0 != $i2 goto label1;

        $r2 = r0.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value>;

        $z0 = staticinvoke <kodkod.util.ints.RangeSequence: boolean equal(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void merge(int, java.lang.Object, kodkod.util.ints.RangeSequence$Entry, kodkod.util.ints.RangeSequence$Entry)
    {
        kodkod.util.ints.RangeSequence$Entry r1, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        kodkod.util.ints.IntTree $r5, $r8, $r9, $r11, $r12, $r14, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        kodkod.util.ints.RangeSequence r0;
        kodkod.util.ints.RangeSequence$Range $r6, $r7, $r10, $r13, $r15;
        java.lang.Object r2;
        kodkod.util.ints.RangeSequence$Point $r4;

        r0 := @this: kodkod.util.ints.RangeSequence;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        r1 := @parameter2: kodkod.util.ints.RangeSequence$Entry;

        r3 := @parameter3: kodkod.util.ints.RangeSequence$Entry;

        $z0 = specialinvoke r0.<kodkod.util.ints.RangeSequence: boolean isHeadOf(kodkod.util.ints.RangeSequence$Entry,int,java.lang.Object)>(r1, i0, r2);

        if $z0 == 0 goto label5;

        $z3 = virtualinvoke r1.<kodkod.util.ints.RangeSequence$Entry: boolean isPoint()>();

        if $z3 == 0 goto label3;

        $z5 = specialinvoke r0.<kodkod.util.ints.RangeSequence: boolean isTailOf(kodkod.util.ints.RangeSequence$Entry,int,java.lang.Object)>(r3, i0, r2);

        if $z5 == 0 goto label2;

        $z6 = virtualinvoke r3.<kodkod.util.ints.RangeSequence$Entry: boolean isPoint()>();

        if $z6 == 0 goto label1;

        $r14 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        virtualinvoke $r14.<kodkod.util.ints.IntTree: void delete(kodkod.util.ints.IntTree$Node)>(r3);

        $r16 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r15 = new kodkod.util.ints.RangeSequence$Range;

        $i6 = r1.<kodkod.util.ints.RangeSequence$Entry: int key>;

        $i5 = r3.<kodkod.util.ints.RangeSequence$Entry: int key>;

        specialinvoke $r15.<kodkod.util.ints.RangeSequence$Range: void <init>(int,int,java.lang.Object)>($i6, $i5, r2);

        virtualinvoke $r16.<kodkod.util.ints.IntTree: void replace(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r1, $r15);

        goto label8;

     label1:
        $r12 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        virtualinvoke $r12.<kodkod.util.ints.IntTree: void delete(kodkod.util.ints.IntTree$Node)>(r1);

        $r13 = (kodkod.util.ints.RangeSequence$Range) r3;

        $i4 = r1.<kodkod.util.ints.RangeSequence$Entry: int key>;

        $r13.<kodkod.util.ints.RangeSequence$Range: int min> = $i4;

        goto label8;

     label2:
        $r11 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r10 = new kodkod.util.ints.RangeSequence$Range;

        $i3 = r1.<kodkod.util.ints.RangeSequence$Entry: int key>;

        specialinvoke $r10.<kodkod.util.ints.RangeSequence$Range: void <init>(int,int,java.lang.Object)>($i3, i0, r2);

        virtualinvoke $r11.<kodkod.util.ints.IntTree: void replace(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r1, $r10);

        goto label8;

     label3:
        $z4 = specialinvoke r0.<kodkod.util.ints.RangeSequence: boolean isTailOf(kodkod.util.ints.RangeSequence$Entry,int,java.lang.Object)>(r3, i0, r2);

        if $z4 == 0 goto label4;

        $r9 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        virtualinvoke $r9.<kodkod.util.ints.IntTree: void delete(kodkod.util.ints.IntTree$Node)>(r3);

        $i2 = r3.<kodkod.util.ints.RangeSequence$Entry: int key>;

        r1.<kodkod.util.ints.RangeSequence$Entry: int key> = $i2;

        goto label8;

     label4:
        r1.<kodkod.util.ints.RangeSequence$Entry: int key> = i0;

        goto label8;

     label5:
        $z1 = specialinvoke r0.<kodkod.util.ints.RangeSequence: boolean isTailOf(kodkod.util.ints.RangeSequence$Entry,int,java.lang.Object)>(r3, i0, r2);

        if $z1 == 0 goto label7;

        $z2 = virtualinvoke r3.<kodkod.util.ints.RangeSequence$Entry: boolean isPoint()>();

        if $z2 == 0 goto label6;

        $r8 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r7 = new kodkod.util.ints.RangeSequence$Range;

        $i1 = r3.<kodkod.util.ints.RangeSequence$Entry: int key>;

        specialinvoke $r7.<kodkod.util.ints.RangeSequence$Range: void <init>(int,int,java.lang.Object)>(i0, $i1, r2);

        virtualinvoke $r8.<kodkod.util.ints.IntTree: void replace(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r3, $r7);

        goto label8;

     label6:
        $r6 = (kodkod.util.ints.RangeSequence$Range) r3;

        $r6.<kodkod.util.ints.RangeSequence$Range: int min> = i0;

        goto label8;

     label7:
        $r5 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r4 = new kodkod.util.ints.RangeSequence$Point;

        specialinvoke $r4.<kodkod.util.ints.RangeSequence$Point: void <init>(int,java.lang.Object)>(i0, r2);

        virtualinvoke $r5.<kodkod.util.ints.IntTree: void insert(kodkod.util.ints.IntTree$Node)>($r4);

     label8:
        return;
    }

    public java.lang.Object put(int, java.lang.Object)
    {
        kodkod.util.ints.RangeSequence$Entry r3, $r7, $r14, $r18;
        int i0, $i1, $i2, $i3;
        kodkod.util.ints.IntTree $r1, $r5, $r11, $r12, $r16;
        boolean $z0, $z1, $z2, $z3;
        kodkod.util.ints.RangeSequence r0;
        kodkod.util.ints.IntTree$Node $r2, $r6, $r13, $r17;
        java.lang.Object r4, $r8, $r9, $r15, $r19;
        kodkod.util.ints.RangeSequence$Point $r10;

        r0 := @this: kodkod.util.ints.RangeSequence;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>(i0);

        r3 = (kodkod.util.ints.RangeSequence$Entry) $r2;

        if r3 == null goto label1;

        $i3 = virtualinvoke r3.<kodkod.util.ints.RangeSequence$Entry: int min()>();

        if $i3 <= i0 goto label2;

     label1:
        $i1 = r0.<kodkod.util.ints.RangeSequence: int size>;

        $i2 = $i1 + 1;

        r0.<kodkod.util.ints.RangeSequence: int size> = $i2;

        $r5 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r6 = virtualinvoke $r5.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchLTE(int)>(i0);

        $r7 = (kodkod.util.ints.RangeSequence$Entry) $r6;

        specialinvoke r0.<kodkod.util.ints.RangeSequence: void merge(int,java.lang.Object,kodkod.util.ints.RangeSequence$Entry,kodkod.util.ints.RangeSequence$Entry)>(i0, r4, $r7, r3);

        return null;

     label2:
        $r8 = r3.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value>;

        $z0 = staticinvoke <kodkod.util.ints.RangeSequence: boolean equal(java.lang.Object,java.lang.Object)>(r4, $r8);

        if $z0 == 0 goto label3;

        return r4;

     label3:
        $z1 = virtualinvoke r3.<kodkod.util.ints.RangeSequence$Entry: boolean isPoint()>();

        if $z1 == 0 goto label6;

        $r12 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r13 = virtualinvoke $r12.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node predecessor(kodkod.util.ints.IntTree$Node)>(r3);

        $r14 = (kodkod.util.ints.RangeSequence$Entry) $r13;

        $z2 = specialinvoke r0.<kodkod.util.ints.RangeSequence: boolean isHeadOf(kodkod.util.ints.RangeSequence$Entry,int,java.lang.Object)>($r14, i0, r4);

        if $z2 != 0 goto label4;

        $r16 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r17 = virtualinvoke $r16.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node successor(kodkod.util.ints.IntTree$Node)>(r3);

        $r18 = (kodkod.util.ints.RangeSequence$Entry) $r17;

        $z3 = specialinvoke r0.<kodkod.util.ints.RangeSequence: boolean isTailOf(kodkod.util.ints.RangeSequence$Entry,int,java.lang.Object)>($r18, i0, r4);

        if $z3 == 0 goto label5;

     label4:
        $r15 = virtualinvoke r0.<kodkod.util.ints.RangeSequence: java.lang.Object remove(int)>(i0);

        virtualinvoke r0.<kodkod.util.ints.RangeSequence: java.lang.Object put(int,java.lang.Object)>(i0, r4);

        return $r15;

     label5:
        $r19 = virtualinvoke r3.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object setValue(java.lang.Object)>(r4);

        return $r19;

     label6:
        $r9 = specialinvoke r0.<kodkod.util.ints.RangeSequence: java.lang.Object split(int,kodkod.util.ints.RangeSequence$Entry)>(i0, r3);

        $r11 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r10 = new kodkod.util.ints.RangeSequence$Point;

        specialinvoke $r10.<kodkod.util.ints.RangeSequence$Point: void <init>(int,java.lang.Object)>(i0, r4);

        virtualinvoke $r11.<kodkod.util.ints.IntTree: void insert(kodkod.util.ints.IntTree$Node)>($r10);

        return $r9;
    }

    public java.lang.Object get(int)
    {
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.RangeSequence$Entry r3;
        int i0, $i1;
        kodkod.util.ints.RangeSequence r0;
        java.lang.Object $r4;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.RangeSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>(i0);

        r3 = (kodkod.util.ints.RangeSequence$Entry) $r2;

        if r3 == null goto label1;

        $i1 = virtualinvoke r3.<kodkod.util.ints.RangeSequence$Entry: int min()>();

        if $i1 <= i0 goto label2;

     label1:
        $r4 = null;

        goto label3;

     label2:
        $r4 = r3.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value>;

     label3:
        return $r4;
    }

    private java.lang.Object split(int, kodkod.util.ints.RangeSequence$Entry)
    {
        kodkod.util.ints.IntTree $r5, $r7, $r9, $r10, $r12, $r14, $r16, $r17;
        boolean $z0;
        kodkod.util.ints.RangeSequence r3;
        kodkod.util.ints.RangeSequence$Point $r6, $r8, $r11, $r13, $r15;
        kodkod.util.ints.RangeSequence$Entry r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        kodkod.util.ints.RangeSequence$Range r2, $r4;
        java.lang.Object r1;

        r3 := @this: kodkod.util.ints.RangeSequence;

        i2 := @parameter0: int;

        r0 := @parameter1: kodkod.util.ints.RangeSequence$Entry;

        r1 = r0.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value>;

        $z0 = virtualinvoke r0.<kodkod.util.ints.RangeSequence$Entry: boolean isPoint()>();

        if $z0 == 0 goto label1;

        $r17 = r3.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        virtualinvoke $r17.<kodkod.util.ints.IntTree: void delete(kodkod.util.ints.IntTree$Node)>(r0);

        goto label9;

     label1:
        r2 = (kodkod.util.ints.RangeSequence$Range) r0;

        i0 = r2.<kodkod.util.ints.RangeSequence$Range: int min>;

        i1 = r2.<kodkod.util.ints.RangeSequence$Range: int key>;

        if i0 != i2 goto label3;

        $i13 = i0 + 1;

        if $i13 >= i1 goto label2;

        $i14 = r2.<kodkod.util.ints.RangeSequence$Range: int min>;

        $i15 = $i14 + 1;

        r2.<kodkod.util.ints.RangeSequence$Range: int min> = $i15;

        goto label9;

     label2:
        $r16 = r3.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r15 = new kodkod.util.ints.RangeSequence$Point;

        specialinvoke $r15.<kodkod.util.ints.RangeSequence$Point: void <init>(int,java.lang.Object)>(i1, r1);

        virtualinvoke $r16.<kodkod.util.ints.IntTree: void replace(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r2, $r15);

        goto label9;

     label3:
        if i1 != i2 goto label5;

        $i10 = i1 - 1;

        if $i10 <= i0 goto label4;

        $i11 = r2.<kodkod.util.ints.RangeSequence$Range: int key>;

        $i12 = $i11 - 1;

        r2.<kodkod.util.ints.RangeSequence$Range: int key> = $i12;

        goto label9;

     label4:
        $r14 = r3.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r13 = new kodkod.util.ints.RangeSequence$Point;

        specialinvoke $r13.<kodkod.util.ints.RangeSequence$Point: void <init>(int,java.lang.Object)>(i0, r1);

        virtualinvoke $r14.<kodkod.util.ints.IntTree: void replace(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r2, $r13);

        goto label9;

     label5:
        $i3 = i2 - 1;

        if i0 != $i3 goto label7;

        $r9 = r3.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r8 = new kodkod.util.ints.RangeSequence$Point;

        $i7 = i2 - 1;

        specialinvoke $r8.<kodkod.util.ints.RangeSequence$Point: void <init>(int,java.lang.Object)>($i7, r1);

        virtualinvoke $r9.<kodkod.util.ints.IntTree: void replace(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r2, $r8);

        $i8 = i2 + 1;

        if i1 != $i8 goto label6;

        $r12 = r3.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r11 = new kodkod.util.ints.RangeSequence$Point;

        specialinvoke $r11.<kodkod.util.ints.RangeSequence$Point: void <init>(int,java.lang.Object)>(i1, r1);

        virtualinvoke $r12.<kodkod.util.ints.IntTree: void insert(kodkod.util.ints.IntTree$Node)>($r11);

        goto label9;

     label6:
        $i9 = i2 + 1;

        r2.<kodkod.util.ints.RangeSequence$Range: int min> = $i9;

        $r10 = r3.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        virtualinvoke $r10.<kodkod.util.ints.IntTree: void insert(kodkod.util.ints.IntTree$Node)>(r2);

        goto label9;

     label7:
        $i4 = i2 - 1;

        r2.<kodkod.util.ints.RangeSequence$Range: int key> = $i4;

        $i5 = i2 + 1;

        if i1 != $i5 goto label8;

        $r7 = r3.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r6 = new kodkod.util.ints.RangeSequence$Point;

        specialinvoke $r6.<kodkod.util.ints.RangeSequence$Point: void <init>(int,java.lang.Object)>(i1, r1);

        virtualinvoke $r7.<kodkod.util.ints.IntTree: void insert(kodkod.util.ints.IntTree$Node)>($r6);

        goto label9;

     label8:
        $r5 = r3.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r4 = new kodkod.util.ints.RangeSequence$Range;

        $i6 = i2 + 1;

        specialinvoke $r4.<kodkod.util.ints.RangeSequence$Range: void <init>(int,int,java.lang.Object)>($i6, i1, r1);

        virtualinvoke $r5.<kodkod.util.ints.IntTree: void insert(kodkod.util.ints.IntTree$Node)>($r4);

     label9:
        return r1;
    }

    public java.lang.Object remove(int)
    {
        kodkod.util.ints.RangeSequence$Entry r3;
        kodkod.util.ints.RangeSequence r0;
        kodkod.util.ints.IntTree$Node $r2;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r4;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.RangeSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>(i0);

        r3 = (kodkod.util.ints.RangeSequence$Entry) $r2;

        if r3 == null goto label1;

        $i1 = virtualinvoke r3.<kodkod.util.ints.RangeSequence$Entry: int min()>();

        if i0 >= $i1 goto label2;

     label1:
        return null;

     label2:
        $i2 = r0.<kodkod.util.ints.RangeSequence: int size>;

        $i3 = $i2 - 1;

        r0.<kodkod.util.ints.RangeSequence: int size> = $i3;

        $r4 = specialinvoke r0.<kodkod.util.ints.RangeSequence: java.lang.Object split(int,kodkod.util.ints.RangeSequence$Entry)>(i0, r3);

        return $r4;
    }

    public boolean containsIndex(int)
    {
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.RangeSequence$Entry r3;
        int i0, $i1;
        kodkod.util.ints.RangeSequence r0;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.RangeSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>(i0);

        r3 = (kodkod.util.ints.RangeSequence$Entry) $r2;

        if r3 == null goto label1;

        $i1 = virtualinvoke r3.<kodkod.util.ints.RangeSequence$Entry: int min()>();

        if $i1 > i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public kodkod.util.ints.IndexedEntry first()
    {
        kodkod.util.ints.RangeSequence$Entry r3;
        kodkod.util.ints.RangeSequence r0;
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.EntryView $r4;
        kodkod.util.ints.IndexedEntry $r6;
        int $i0;
        java.lang.Object $r5;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.RangeSequence;

        $r1 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node min()>();

        r3 = (kodkod.util.ints.RangeSequence$Entry) $r2;

        if r3 != null goto label1;

        $r6 = null;

        goto label2;

     label1:
        $r4 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.EntryView view>;

        $i0 = virtualinvoke r3.<kodkod.util.ints.RangeSequence$Entry: int min()>();

        $r5 = r3.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value>;

        $r6 = virtualinvoke $r4.<kodkod.util.ints.EntryView: kodkod.util.ints.IndexedEntry setView(int,java.lang.Object)>($i0, $r5);

     label2:
        return $r6;
    }

    public kodkod.util.ints.IndexedEntry last()
    {
        kodkod.util.ints.RangeSequence$Entry r3;
        kodkod.util.ints.RangeSequence r0;
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.EntryView $r4;
        kodkod.util.ints.IndexedEntry $r6;
        int $i0;
        java.lang.Object $r5;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.RangeSequence;

        $r1 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node max()>();

        r3 = (kodkod.util.ints.RangeSequence$Entry) $r2;

        if r3 != null goto label1;

        $r6 = null;

        goto label2;

     label1:
        $r4 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.EntryView view>;

        $i0 = virtualinvoke r3.<kodkod.util.ints.RangeSequence$Entry: int max()>();

        $r5 = r3.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value>;

        $r6 = virtualinvoke $r4.<kodkod.util.ints.EntryView: kodkod.util.ints.IndexedEntry setView(int,java.lang.Object)>($i0, $r5);

     label2:
        return $r6;
    }

    public kodkod.util.ints.IndexedEntry ceil(int)
    {
        kodkod.util.ints.RangeSequence$Entry r3;
        kodkod.util.ints.RangeSequence r0;
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.EntryView $r4;
        kodkod.util.ints.IndexedEntry $r6;
        int i0, $i1, $i2;
        java.lang.Object $r5;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.RangeSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>(i0);

        r3 = (kodkod.util.ints.RangeSequence$Entry) $r2;

        if r3 != null goto label1;

        $r6 = null;

        goto label2;

     label1:
        $r4 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.EntryView view>;

        $i1 = virtualinvoke r3.<kodkod.util.ints.RangeSequence$Entry: int min()>();

        $i2 = staticinvoke <java.lang.StrictMath: int max(int,int)>(i0, $i1);

        $r5 = r3.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value>;

        $r6 = virtualinvoke $r4.<kodkod.util.ints.EntryView: kodkod.util.ints.IndexedEntry setView(int,java.lang.Object)>($i2, $r5);

     label2:
        return $r6;
    }

    public kodkod.util.ints.IndexedEntry floor(int)
    {
        kodkod.util.ints.RangeSequence$Entry $r10, r11;
        kodkod.util.ints.EntryView $r5, $r8;
        kodkod.util.ints.IndexedEntry $r9, $r12;
        int i0, $i1, $i2;
        kodkod.util.ints.IntTree $r1, $r3;
        kodkod.util.ints.RangeSequence r0;
        kodkod.util.ints.IntTree$Node $r2, $r4;
        java.lang.Object $r6, $r7;

        r0 := @this: kodkod.util.ints.RangeSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>(i0);

        r11 = (kodkod.util.ints.RangeSequence$Entry) $r2;

        if r11 == null goto label1;

        $i2 = virtualinvoke r11.<kodkod.util.ints.RangeSequence$Entry: int min()>();

        if $i2 <= i0 goto label4;

     label1:
        $r3 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        $r4 = virtualinvoke $r3.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchLTE(int)>(i0);

        $r10 = (kodkod.util.ints.RangeSequence$Entry) $r4;

        if $r10 != null goto label2;

        $r12 = null;

        goto label3;

     label2:
        $r5 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.EntryView view>;

        $i1 = virtualinvoke $r10.<kodkod.util.ints.RangeSequence$Entry: int max()>();

        $r6 = $r10.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value>;

        $r12 = virtualinvoke $r5.<kodkod.util.ints.EntryView: kodkod.util.ints.IndexedEntry setView(int,java.lang.Object)>($i1, $r6);

     label3:
        return $r12;

     label4:
        $r8 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.EntryView view>;

        $r7 = r11.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value>;

        $r9 = virtualinvoke $r8.<kodkod.util.ints.EntryView: kodkod.util.ints.IndexedEntry setView(int,java.lang.Object)>(i0, $r7);

        return $r9;
    }

    public kodkod.util.ints.RangeSequence clone()
    {
        kodkod.util.ints.RangeSequence $r0, r1;

        r1 := @this: kodkod.util.ints.RangeSequence;

        $r0 = new kodkod.util.ints.RangeSequence;

        specialinvoke $r0.<kodkod.util.ints.RangeSequence: void <init>(kodkod.util.ints.RangeSequence)>(r1);

        return $r0;
    }

    public volatile kodkod.util.ints.SparseSequence clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.RangeSequence r0, $r1;
        kodkod.util.ints.SparseSequence $r2;

        r0 := @this: kodkod.util.ints.RangeSequence;

        $r1 = virtualinvoke r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.RangeSequence clone()>();

        $r2 = (kodkod.util.ints.SparseSequence) $r1;

        return $r2;
    }

    static kodkod.util.ints.IntTree access$1(kodkod.util.ints.RangeSequence)
    {
        kodkod.util.ints.RangeSequence r0;
        kodkod.util.ints.IntTree $r1;

        r0 := @parameter0: kodkod.util.ints.RangeSequence;

        $r1 = r0.<kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree tree>;

        return $r1;
    }
}
