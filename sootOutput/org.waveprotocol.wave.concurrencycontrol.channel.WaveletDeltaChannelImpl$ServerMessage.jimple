abstract class org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage extends java.lang.Object implements java.lang.Comparable
{
    private final long startVersion;
    private final long endVersion;

    protected void <init>(long, long)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage r0;
        long l0, l1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long startVersion> = l0;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long endVersion> = l1;

        return;
    }

    final long startVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage r0;
        long $l0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage;

        $l0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long startVersion>;

        return $l0;
    }

    final long endVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage r0;
        long $l0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage;

        $l0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long endVersion>;

        return $l0;
    }

    abstract void deliverTo(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

    public int compareTo(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)
    {
        long $l0, $l1, $l3, $l4, $l6, $l7, $l9, $l10;
        byte $b2, $b5, $b8, $b11, $b12;
        int $i13, $i15, $i16, $i17, $i18;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage r0, r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage;

        $l1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long startVersion>;

        $l0 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long startVersion>;

        $b2 = $l1 cmp $l0;

        $i13 = (int) $b2;

        if $i13 >= 0 goto label1;

        $i15 = (int) -1;

        return $i15;

     label1:
        $l4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long startVersion>;

        $l3 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long startVersion>;

        $b5 = $l4 cmp $l3;

        $i16 = (int) $b5;

        if $i16 <= 0 goto label2;

        return 1;

     label2:
        $l7 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long endVersion>;

        $l6 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long endVersion>;

        $b8 = $l7 cmp $l6;

        $i17 = (int) $b8;

        if $i17 >= 0 goto label3;

        $b12 = -1;

        goto label5;

     label3:
        $l10 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long endVersion>;

        $l9 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long endVersion>;

        $b11 = $l10 cmp $l9;

        $i18 = (int) $b11;

        if $i18 <= 0 goto label4;

        $b12 = 1;

        goto label5;

     label4:
        $b12 = 0;

     label5:
        return $b12;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage) r1;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: int compareTo(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)>($r2);

        return $i0;
    }

    static long access$100(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage r0;
        long $l0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage;

        $l0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long endVersion>;

        return $l0;
    }
}
