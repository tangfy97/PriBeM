final class org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator extends java.lang.Object implements java.util.Iterator
{
    private final org.waveprotocol.wave.model.util.Predicate acceptsBlip;
    private final java.util.Queue threads;
    private java.util.Iterator currentThreadItr;
    private org.waveprotocol.wave.model.conversation.ConversationBlip nextBlip;

    void <init>(org.waveprotocol.wave.model.conversation.ConversationThread, org.waveprotocol.wave.model.util.Predicate)
    {
        org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator r0;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r6;
        java.util.Iterator $r5;
        org.waveprotocol.wave.model.conversation.ConversationThread r3;
        java.util.LinkedList $r1;
        java.lang.Iterable $r4;
        org.waveprotocol.wave.model.util.Predicate r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator;

        r3 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationThread;

        r2 := @parameter1: org.waveprotocol.wave.model.util.Predicate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.LinkedList newLinkedList()>();

        r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: java.util.Queue threads> = $r1;

        r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: org.waveprotocol.wave.model.util.Predicate acceptsBlip> = r2;

        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.model.conversation.ConversationThread: java.lang.Iterable getBlips()>();

        $r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

        r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: java.util.Iterator currentThreadItr> = $r5;

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: org.waveprotocol.wave.model.conversation.ConversationBlip findNextBlip()>();

        r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: org.waveprotocol.wave.model.conversation.ConversationBlip nextBlip> = $r6;

        return;
    }

    public boolean hasNext()
    {
        org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator r0;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: org.waveprotocol.wave.model.conversation.ConversationBlip nextBlip>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.waveprotocol.wave.model.conversation.ConversationBlip next()
    {
        org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator r0;
        org.waveprotocol.wave.model.conversation.ConversationBlip r1, $r2;
        java.util.NoSuchElementException $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        r1 = r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: org.waveprotocol.wave.model.conversation.ConversationBlip nextBlip>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: org.waveprotocol.wave.model.conversation.ConversationBlip findNextBlip()>();

        r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: org.waveprotocol.wave.model.conversation.ConversationBlip nextBlip> = $r2;

        return r1;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator r1;

        r1 := @this: org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    private org.waveprotocol.wave.model.conversation.ConversationBlip findNextBlip()
    {
        java.lang.Iterable $r5, $r13;
        org.waveprotocol.wave.model.util.Predicate $r7;
        org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator r0;
        org.waveprotocol.wave.model.conversation.ConversationBlip r4, r18;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r1, $r2, $r6, $r14, $r19;
        org.waveprotocol.wave.model.conversation.ConversationThread $r12, r16;
        java.lang.Object $r3, $r9, $r11, $r15;
        java.util.Queue $r8, $r10, $r17;

        r0 := @this: org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator;

        r18 = null;

     label1:
        if r18 != null goto label6;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: java.util.Iterator currentThreadItr>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: java.util.Iterator currentThreadItr>;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ConversationBlip) $r3;

        $r5 = interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.lang.Iterable getReplyThreads()>();

        $r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r15 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.waveprotocol.wave.model.conversation.ConversationThread) $r15;

        $r17 = r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: java.util.Queue threads>;

        interfaceinvoke $r17.<java.util.Queue: boolean add(java.lang.Object)>(r16);

        goto label2;

     label3:
        $r7 = r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: org.waveprotocol.wave.model.util.Predicate acceptsBlip>;

        $z2 = interfaceinvoke $r7.<org.waveprotocol.wave.model.util.Predicate: boolean apply(java.lang.Object)>(r4);

        if $z2 == 0 goto label4;

        r18 = r4;

     label4:
        $r19 = r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: java.util.Iterator currentThreadItr>;

        $z3 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label5;

        $r8 = r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: java.util.Queue threads>;

        $r9 = interfaceinvoke $r8.<java.util.Queue: java.lang.Object peek()>();

        if $r9 == null goto label5;

        $r10 = r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: java.util.Queue threads>;

        $r11 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object remove()>();

        $r12 = (org.waveprotocol.wave.model.conversation.ConversationThread) $r11;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.model.conversation.ConversationThread: java.lang.Iterable getBlips()>();

        $r14 = interfaceinvoke $r13.<java.lang.Iterable: java.util.Iterator iterator()>();

        r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: java.util.Iterator currentThreadItr> = $r14;

        goto label4;

     label5:
        goto label1;

     label6:
        return r18;
    }

    public volatile java.lang.Object next()
    {
        org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator r0;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.BlipIterators$BlipIterator: org.waveprotocol.wave.model.conversation.ConversationBlip next()>();

        return $r1;
    }
}
