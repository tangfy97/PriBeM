class kodkod.engine.satlab.LazyTrace$ClauseView extends kodkod.engine.satlab.Clause
{
    private int[] clause;
    private int litOffset;
    private int index;
    final kodkod.engine.satlab.LazyTrace this$0;

    void <init>(kodkod.engine.satlab.LazyTrace, int)
    {
        int[][] $r2;
        kodkod.engine.satlab.LazyTrace$ClauseView r0;
        int[] $r3;
        kodkod.engine.satlab.LazyTrace r1;
        int i0, $i1;

        r0 := @this: kodkod.engine.satlab.LazyTrace$ClauseView;

        r1 := @parameter0: kodkod.engine.satlab.LazyTrace;

        i0 := @parameter1: int;

        r0.<kodkod.engine.satlab.LazyTrace$ClauseView: kodkod.engine.satlab.LazyTrace this$0> = r1;

        specialinvoke r0.<kodkod.engine.satlab.Clause: void <init>()>();

        r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int index> = i0;

        $r2 = staticinvoke <kodkod.engine.satlab.LazyTrace: int[][] access$0(kodkod.engine.satlab.LazyTrace)>(r1);

        $r3 = $r2[i0];

        r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int[] clause> = $r3;

        $i1 = staticinvoke <kodkod.engine.satlab.LazyTrace: int access$1(kodkod.engine.satlab.LazyTrace,int)>(r1, i0);

        r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int litOffset> = $i1;

        return;
    }

    void <init>(kodkod.engine.satlab.LazyTrace)
    {
        kodkod.engine.satlab.LazyTrace$ClauseView r0;
        kodkod.engine.satlab.LazyTrace r1;

        r0 := @this: kodkod.engine.satlab.LazyTrace$ClauseView;

        r1 := @parameter0: kodkod.engine.satlab.LazyTrace;

        specialinvoke r0.<kodkod.engine.satlab.LazyTrace$ClauseView: void <init>(kodkod.engine.satlab.LazyTrace,int)>(r1, 0);

        return;
    }

    kodkod.engine.satlab.LazyTrace$ClauseView set(int)
    {
        int[][] $r2;
        kodkod.engine.satlab.LazyTrace$ClauseView r0;
        int[] $r3;
        kodkod.engine.satlab.LazyTrace $r1, $r4;
        int i0, $i1;

        r0 := @this: kodkod.engine.satlab.LazyTrace$ClauseView;

        i0 := @parameter0: int;

        r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int index> = i0;

        $r1 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: kodkod.engine.satlab.LazyTrace this$0>;

        $r2 = staticinvoke <kodkod.engine.satlab.LazyTrace: int[][] access$0(kodkod.engine.satlab.LazyTrace)>($r1);

        $r3 = $r2[i0];

        r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int[] clause> = $r3;

        $r4 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: kodkod.engine.satlab.LazyTrace this$0>;

        $i1 = staticinvoke <kodkod.engine.satlab.LazyTrace: int access$1(kodkod.engine.satlab.LazyTrace,int)>($r4, i0);

        r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int litOffset> = $i1;

        return r0;
    }

    void ensureLiterals()
    {
        int[][] $r3;
        kodkod.engine.satlab.LazyTrace$ClauseView r0;
        int[] $r4;
        kodkod.engine.satlab.LazyTrace $r1, $r2, $r5;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: kodkod.engine.satlab.LazyTrace$ClauseView;

        $i0 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int litOffset>;

        if $i0 >= 0 goto label1;

        $r1 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: kodkod.engine.satlab.LazyTrace this$0>;

        $i1 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int index>;

        staticinvoke <kodkod.engine.satlab.LazyTrace: int[] access$2(kodkod.engine.satlab.LazyTrace,int)>($r1, $i1);

        $r2 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: kodkod.engine.satlab.LazyTrace this$0>;

        $r3 = staticinvoke <kodkod.engine.satlab.LazyTrace: int[][] access$0(kodkod.engine.satlab.LazyTrace)>($r2);

        $i2 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int index>;

        $r4 = $r3[$i2];

        r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int[] clause> = $r4;

        $r5 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: kodkod.engine.satlab.LazyTrace this$0>;

        $i3 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int index>;

        $i4 = staticinvoke <kodkod.engine.satlab.LazyTrace: int access$1(kodkod.engine.satlab.LazyTrace,int)>($r5, $i3);

        r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int litOffset> = $i4;

     label1:
        return;
    }

    public int maxVariable()
    {
        kodkod.engine.satlab.LazyTrace$ClauseView r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: kodkod.engine.satlab.LazyTrace$ClauseView;

        virtualinvoke r0.<kodkod.engine.satlab.LazyTrace$ClauseView: void ensureLiterals()>();

        $r2 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int[] clause>;

        $r1 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int[] clause>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        $i2 = $r2[$i1];

        $i3 = staticinvoke <java.lang.StrictMath: int abs(int)>($i2);

        return $i3;
    }

    public int numberOfAntecedents()
    {
        kodkod.engine.satlab.LazyTrace$ClauseView r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: kodkod.engine.satlab.LazyTrace$ClauseView;

        $i0 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int litOffset>;

        if $i0 >= 0 goto label1;

        $r1 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int[] clause>;

        $i3 = lengthof $r1;

        goto label2;

     label1:
        $i1 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int litOffset>;

        $i2 = $i1 - 1;

        $i3 = staticinvoke <java.lang.StrictMath: int max(int,int)>(0, $i2);

     label2:
        return $i3;
    }

    public int size()
    {
        kodkod.engine.satlab.LazyTrace$ClauseView r0;
        int[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: kodkod.engine.satlab.LazyTrace$ClauseView;

        virtualinvoke r0.<kodkod.engine.satlab.LazyTrace$ClauseView: void ensureLiterals()>();

        $r1 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int[] clause>;

        $i1 = lengthof $r1;

        $i0 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int litOffset>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public java.util.Iterator antecedents()
    {
        kodkod.engine.satlab.LazyTrace$ClauseView r1;
        kodkod.engine.satlab.LazyTrace$IntArrayIterator $r2;
        int[] $r3;
        kodkod.engine.satlab.LazyTrace $r4;
        int $i0;
        kodkod.engine.satlab.LazyTrace$ClauseIterator $r0;

        r1 := @this: kodkod.engine.satlab.LazyTrace$ClauseView;

        $r0 = new kodkod.engine.satlab.LazyTrace$ClauseIterator;

        $r4 = r1.<kodkod.engine.satlab.LazyTrace$ClauseView: kodkod.engine.satlab.LazyTrace this$0>;

        $r2 = new kodkod.engine.satlab.LazyTrace$IntArrayIterator;

        $r3 = r1.<kodkod.engine.satlab.LazyTrace$ClauseView: int[] clause>;

        $i0 = r1.<kodkod.engine.satlab.LazyTrace$ClauseView: int litOffset>;

        specialinvoke $r2.<kodkod.engine.satlab.LazyTrace$IntArrayIterator: void <init>(int[],int,int)>($r3, 1, $i0);

        specialinvoke $r0.<kodkod.engine.satlab.LazyTrace$ClauseIterator: void <init>(kodkod.engine.satlab.LazyTrace,kodkod.util.ints.IntIterator)>($r4, $r2);

        return $r0;
    }

    public kodkod.util.ints.IntIterator literals()
    {
        kodkod.engine.satlab.LazyTrace$ClauseView r0;
        kodkod.engine.satlab.LazyTrace$IntArrayIterator $r1;
        int[] $r2, $r3;
        int $i0, $i1;

        r0 := @this: kodkod.engine.satlab.LazyTrace$ClauseView;

        virtualinvoke r0.<kodkod.engine.satlab.LazyTrace$ClauseView: void ensureLiterals()>();

        $r1 = new kodkod.engine.satlab.LazyTrace$IntArrayIterator;

        $r3 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int[] clause>;

        $i1 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int litOffset>;

        $r2 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int[] clause>;

        $i0 = lengthof $r2;

        specialinvoke $r1.<kodkod.engine.satlab.LazyTrace$IntArrayIterator: void <init>(int[],int,int)>($r3, $i1, $i0);

        return $r1;
    }

    public int[] toArray(int[])
    {
        kodkod.engine.satlab.LazyTrace$ClauseView r0;
        int[] $r1, r2;
        int $i0, $i1, $i2;

        r0 := @this: kodkod.engine.satlab.LazyTrace$ClauseView;

        r2 := @parameter0: int[];

        $i0 = virtualinvoke r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int size()>();

        $i1 = lengthof r2;

        if $i1 >= $i0 goto label1;

        r2 = newarray (int)[$i0];

     label1:
        $r1 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int[] clause>;

        $i2 = r0.<kodkod.engine.satlab.LazyTrace$ClauseView: int litOffset>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, r2, 0, $i0);

        return r2;
    }
}
