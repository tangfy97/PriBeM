public class com.ctc.wstx.stax.MinimalInputFactory extends java.lang.Object implements com.ctc.wstx.sr.ReaderCreator, com.ctc.wstx.cfg.InputConfigFlags
{
    protected final boolean mIsMinimal;
    protected final com.ctc.wstx.api.ReaderConfig mConfig;
    static final com.ctc.wstx.util.SymbolTable mRootSymbols;
    com.ctc.wstx.util.SymbolTable mSymbols;

    public void <init>()
    {
        com.ctc.wstx.stax.MinimalInputFactory r0;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        specialinvoke r0.<com.ctc.wstx.stax.MinimalInputFactory: void <init>(boolean)>(1);

        return;
    }

    protected void <init>(boolean)
    {
        com.ctc.wstx.util.SymbolTable $r1;
        com.ctc.wstx.stax.MinimalInputFactory r0;
        com.ctc.wstx.api.ReaderConfig $r2;
        boolean z0;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.util.SymbolTable mRootSymbols>;

        r0.<com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.util.SymbolTable mSymbols> = $r1;

        $r2 = staticinvoke <com.ctc.wstx.api.ReaderConfig: com.ctc.wstx.api.ReaderConfig createJ2MEDefaults()>();

        r0.<com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.api.ReaderConfig mConfig> = $r2;

        r0.<com.ctc.wstx.stax.MinimalInputFactory: boolean mIsMinimal> = z0;

        return;
    }

    public static com.ctc.wstx.stax.MinimalInputFactory newMinimalInstance()
    {
        com.ctc.wstx.stax.MinimalInputFactory $r0;

        $r0 = new com.ctc.wstx.stax.MinimalInputFactory;

        specialinvoke $r0.<com.ctc.wstx.stax.MinimalInputFactory: void <init>()>();

        return $r0;
    }

    public com.ctc.wstx.dtd.DTDSubset findCachedDTD(com.ctc.wstx.dtd.DTDId)
    {
        com.ctc.wstx.dtd.DTDId r1;
        com.ctc.wstx.stax.MinimalInputFactory r0;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r1 := @parameter0: com.ctc.wstx.dtd.DTDId;

        return null;
    }

    public synchronized void updateSymbolTable(com.ctc.wstx.util.SymbolTable)
    {
        com.ctc.wstx.util.SymbolTable r0, r1;
        com.ctc.wstx.stax.MinimalInputFactory r2;
        boolean $z0;

        r2 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r1 := @parameter0: com.ctc.wstx.util.SymbolTable;

        r0 = <com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.util.SymbolTable mRootSymbols>;

        $z0 = virtualinvoke r1.<com.ctc.wstx.util.SymbolTable: boolean isDirectChildOf(com.ctc.wstx.util.SymbolTable)>(r0);

        if $z0 == 0 goto label1;

        r2.<com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.util.SymbolTable mSymbols> = r1;

     label1:
        return;
    }

    public synchronized void addCachedDTD(com.ctc.wstx.dtd.DTDId, com.ctc.wstx.dtd.DTDSubset)
    {
        com.ctc.wstx.dtd.DTDId r1;
        com.ctc.wstx.dtd.DTDSubset r2;
        com.ctc.wstx.stax.MinimalInputFactory r0;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r1 := @parameter0: com.ctc.wstx.dtd.DTDId;

        r2 := @parameter1: com.ctc.wstx.dtd.DTDSubset;

        return;
    }

    public javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamReader $r3;
        com.ctc.wstx.io.StreamBootstrapper $r2;
        com.ctc.wstx.stax.MinimalInputFactory r0;
        java.io.InputStream r1;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r1 := @parameter0: java.io.InputStream;

        $r2 = staticinvoke <com.ctc.wstx.io.StreamBootstrapper: com.ctc.wstx.io.StreamBootstrapper getInstance(java.io.InputStream,java.lang.String,java.lang.String)>(r1, null, null);

        $r3 = specialinvoke r0.<com.ctc.wstx.stax.MinimalInputFactory: javax.xml.stream.XMLStreamReader createSR(java.lang.String,com.ctc.wstx.io.InputBootstrapper)>(null, $r2);

        return $r3;
    }

    public javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.io.ReaderBootstrapper $r5;
        com.ctc.wstx.stax.MinimalInputFactory r1;
        java.io.InputStreamReader $r4;
        javax.xml.stream.XMLStreamReader $r3, $r6;
        javax.xml.stream.XMLStreamException $r8;
        int $i0;
        java.lang.String r0;
        java.io.UnsupportedEncodingException $r7;
        java.io.InputStream r2;

        r1 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r2 := @parameter0: java.io.InputStream;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r3 = virtualinvoke r1.<com.ctc.wstx.stax.MinimalInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream)>(r2);

        return $r3;

     label2:
        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r2, r0);

        $r5 = staticinvoke <com.ctc.wstx.io.ReaderBootstrapper: com.ctc.wstx.io.ReaderBootstrapper getInstance(java.io.Reader,java.lang.String,java.lang.String,java.lang.String)>($r4, null, null, r0);

        $r6 = specialinvoke r1.<com.ctc.wstx.stax.MinimalInputFactory: javax.xml.stream.XMLStreamReader createSR(java.lang.String,com.ctc.wstx.io.InputBootstrapper)>(null, $r5);

     label3:
        return $r6;

     label4:
        $r7 := @caughtexception;

        $r8 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r8.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }

    public javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader) throws javax.xml.stream.XMLStreamException
    {
        java.io.Reader r1;
        com.ctc.wstx.stax.MinimalInputFactory r0;
        javax.xml.stream.XMLStreamReader $r2;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r1 := @parameter0: java.io.Reader;

        $r2 = virtualinvoke r0.<com.ctc.wstx.stax.MinimalInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.lang.String,java.io.Reader)>(null, r1);

        return $r2;
    }

    public javax.xml.stream.XMLStreamReader createXMLStreamReader(javax.xml.transform.Source) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.transform.Source r1;
        com.ctc.wstx.stax.MinimalInputFactory r0;
        javax.xml.stream.XMLStreamReader $r2;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r1 := @parameter0: javax.xml.transform.Source;

        $r2 = specialinvoke r0.<com.ctc.wstx.stax.MinimalInputFactory: javax.xml.stream.XMLStreamReader createSR(javax.xml.transform.Source)>(r1);

        return $r2;
    }

    public javax.xml.stream.XMLStreamReader createXMLStreamReader(java.lang.String, java.io.InputStream) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamReader $r4;
        com.ctc.wstx.io.StreamBootstrapper $r3;
        java.lang.String r1;
        com.ctc.wstx.stax.MinimalInputFactory r0;
        java.io.InputStream r2;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.InputStream;

        $r3 = staticinvoke <com.ctc.wstx.io.StreamBootstrapper: com.ctc.wstx.io.StreamBootstrapper getInstance(java.io.InputStream,java.lang.String,java.lang.String)>(r2, null, r1);

        $r4 = specialinvoke r0.<com.ctc.wstx.stax.MinimalInputFactory: javax.xml.stream.XMLStreamReader createSR(java.lang.String,com.ctc.wstx.io.InputBootstrapper)>(r1, $r3);

        return $r4;
    }

    public javax.xml.stream.XMLStreamReader createXMLStreamReader(java.lang.String, java.io.Reader) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamReader $r4;
        com.ctc.wstx.io.ReaderBootstrapper $r3;
        java.lang.String r1;
        java.io.Reader r2;
        com.ctc.wstx.stax.MinimalInputFactory r0;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        $r3 = staticinvoke <com.ctc.wstx.io.ReaderBootstrapper: com.ctc.wstx.io.ReaderBootstrapper getInstance(java.io.Reader,java.lang.String,java.lang.String,java.lang.String)>(r2, null, r1, null);

        $r4 = specialinvoke r0.<com.ctc.wstx.stax.MinimalInputFactory: javax.xml.stream.XMLStreamReader createSR(java.lang.String,com.ctc.wstx.io.InputBootstrapper)>(r1, $r3);

        return $r4;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        java.lang.Object $r3;
        java.lang.String r1;
        com.ctc.wstx.stax.MinimalInputFactory r0;
        java.lang.IllegalArgumentException $r4;
        com.ctc.wstx.api.ReaderConfig $r2;
        boolean $z0;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.api.ReaderConfig mConfig>;

        $r3 = virtualinvoke $r2.<com.ctc.wstx.api.ReaderConfig: java.lang.Object getProperty(java.lang.String)>(r1);

        if $r3 != null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("javax.xml.stream.allocator");

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Event allocator not usable with J2ME subset.");

        throw $r4;

     label1:
        return $r3;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        com.ctc.wstx.stax.MinimalInputFactory r0;
        java.lang.IllegalArgumentException $r5;
        com.ctc.wstx.api.ReaderConfig $r3;
        java.lang.Object r2;
        java.lang.String r1, $r4;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.api.ReaderConfig mConfig>;

        $z0 = virtualinvoke $r3.<com.ctc.wstx.api.ReaderConfig: boolean setProperty(java.lang.String,java.lang.Object)>(r1, r2);

        if $z0 != 0 goto label1;

        $r4 = "javax.xml.stream.allocator";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Event allocator not usable with J2ME subset.");

        throw $r5;

     label1:
        return;
    }

    public javax.xml.stream.XMLReporter getXMLReporter()
    {
        com.ctc.wstx.stax.MinimalInputFactory r0;
        com.ctc.wstx.api.ReaderConfig $r1;
        javax.xml.stream.XMLReporter $r2;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        $r1 = r0.<com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.api.ReaderConfig mConfig>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.api.ReaderConfig: javax.xml.stream.XMLReporter getXMLReporter()>();

        return $r2;
    }

    public javax.xml.stream.XMLResolver getXMLResolver()
    {
        com.ctc.wstx.stax.MinimalInputFactory r0;
        com.ctc.wstx.api.ReaderConfig $r1;
        javax.xml.stream.XMLResolver $r2;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        $r1 = r0.<com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.api.ReaderConfig mConfig>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.api.ReaderConfig: javax.xml.stream.XMLResolver getXMLResolver()>();

        return $r2;
    }

    public boolean isPropertySupported(java.lang.String)
    {
        java.lang.String r1;
        com.ctc.wstx.stax.MinimalInputFactory r0;
        com.ctc.wstx.api.ReaderConfig $r2;
        boolean $z0;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.api.ReaderConfig mConfig>;

        $z0 = virtualinvoke $r2.<com.ctc.wstx.api.ReaderConfig: boolean isPropertySupported(java.lang.String)>(r1);

        return $z0;
    }

    public void setXMLReporter(javax.xml.stream.XMLReporter)
    {
        com.ctc.wstx.stax.MinimalInputFactory r0;
        com.ctc.wstx.api.ReaderConfig $r2;
        javax.xml.stream.XMLReporter r1;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r1 := @parameter0: javax.xml.stream.XMLReporter;

        $r2 = r0.<com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.api.ReaderConfig mConfig>;

        virtualinvoke $r2.<com.ctc.wstx.api.ReaderConfig: void setXMLReporter(javax.xml.stream.XMLReporter)>(r1);

        return;
    }

    public void setXMLResolver(javax.xml.stream.XMLResolver)
    {
        com.ctc.wstx.stax.MinimalInputFactory r0;
        javax.xml.stream.XMLResolver r1;
        com.ctc.wstx.api.ReaderConfig $r2;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r1 := @parameter0: javax.xml.stream.XMLResolver;

        $r2 = r0.<com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.api.ReaderConfig mConfig>;

        virtualinvoke $r2.<com.ctc.wstx.api.ReaderConfig: void setXMLResolver(javax.xml.stream.XMLResolver)>(r1);

        return;
    }

    public com.ctc.wstx.api.ReaderConfig getConfig()
    {
        com.ctc.wstx.stax.MinimalInputFactory r0;
        com.ctc.wstx.api.ReaderConfig $r1;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        $r1 = r0.<com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.api.ReaderConfig mConfig>;

        return $r1;
    }

    protected javax.xml.stream.XMLStreamReader doCreateSR(com.ctc.wstx.io.BranchingReaderSource, com.ctc.wstx.api.ReaderConfig, com.ctc.wstx.io.InputBootstrapper) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.io.BranchingReaderSource r0;
        com.ctc.wstx.stax.MinimalInputFactory r1;
        com.ctc.wstx.sr.BasicStreamReader $r4;
        com.ctc.wstx.api.ReaderConfig r2;
        com.ctc.wstx.io.InputBootstrapper r3;

        r1 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r0 := @parameter0: com.ctc.wstx.io.BranchingReaderSource;

        r2 := @parameter1: com.ctc.wstx.api.ReaderConfig;

        r3 := @parameter2: com.ctc.wstx.io.InputBootstrapper;

        $r4 = staticinvoke <com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.BasicStreamReader createBasicStreamReader(com.ctc.wstx.io.BranchingReaderSource,com.ctc.wstx.sr.ReaderCreator,com.ctc.wstx.api.ReaderConfig,com.ctc.wstx.io.InputBootstrapper,boolean)>(r0, r1, r2, r3, 0);

        return $r4;
    }

    private javax.xml.stream.XMLStreamReader createSR(java.lang.String, com.ctc.wstx.io.InputBootstrapper) throws javax.xml.stream.XMLStreamException
    {
        java.net.URL $r2, r13;
        com.ctc.wstx.stax.MinimalInputFactory r0;
        com.ctc.wstx.api.ReaderConfig $r1, $r14, $r17;
        com.ctc.wstx.io.InputBootstrapper r3;
        javax.xml.stream.XMLStreamReader $r6;
        javax.xml.stream.XMLStreamException $r8;
        int $i0;
        com.ctc.wstx.exc.WstxIOException $r10, $r12;
        java.lang.String r4;
        boolean $z0;
        com.ctc.wstx.io.BranchingReaderSource $r5;
        java.io.IOException $r7, $r9, $r11;
        java.io.Reader $r18;
        com.ctc.wstx.util.SymbolTable $r15, $r16;

        r0 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r4 := @parameter0: java.lang.String;

        r3 := @parameter1: com.ctc.wstx.io.InputBootstrapper;

        $r1 = r0.<com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.api.ReaderConfig mConfig>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.api.ReaderConfig: java.net.URL getBaseURL()>();

        r13 = $r2;

        if $r2 != null goto label04;

        if r4 == null goto label04;

        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i0 <= 0 goto label04;

     label01:
        r13 = staticinvoke <com.ctc.wstx.util.URLUtil: java.net.URL urlFromSystemId(java.lang.String)>(r4);

     label02:
        goto label04;

     label03:
        $r11 := @caughtexception;

        $r12 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r12.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r11);

        throw $r12;

     label04:
        $r14 = r0.<com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.api.ReaderConfig mConfig>;

        $r15 = r0.<com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.util.SymbolTable mSymbols>;

        $r16 = virtualinvoke $r15.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable makeChild()>();

        $r17 = virtualinvoke $r14.<com.ctc.wstx.api.ReaderConfig: com.ctc.wstx.api.ReaderConfig createNonShared(com.ctc.wstx.util.SymbolTable)>($r16);

     label05:
        $r18 = virtualinvoke r3.<com.ctc.wstx.io.InputBootstrapper: java.io.Reader bootstrapInput(com.ctc.wstx.api.ReaderConfig,boolean,int)>($r17, 1, 0);

        $z0 = virtualinvoke r3.<com.ctc.wstx.io.InputBootstrapper: boolean declaredXml11()>();

        if $z0 == 0 goto label06;

        virtualinvoke $r17.<com.ctc.wstx.api.ReaderConfig: void enableXml11(boolean)>(1);

     label06:
        goto label08;

     label07:
        $r9 := @caughtexception;

        $r10 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r10.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r9);

        throw $r10;

     label08:
        $r5 = staticinvoke <com.ctc.wstx.io.InputSourceFactory: com.ctc.wstx.io.BranchingReaderSource constructDocumentSource(com.ctc.wstx.api.ReaderConfig,com.ctc.wstx.io.InputBootstrapper,java.lang.String,java.lang.String,java.net.URL,java.io.Reader,boolean)>($r17, r3, null, r4, r13, $r18, 0);

     label09:
        $r6 = virtualinvoke r0.<com.ctc.wstx.stax.MinimalInputFactory: javax.xml.stream.XMLStreamReader doCreateSR(com.ctc.wstx.io.BranchingReaderSource,com.ctc.wstx.api.ReaderConfig,com.ctc.wstx.io.InputBootstrapper)>($r5, $r17, r3);

     label10:
        return $r6;

     label11:
        $r7 := @caughtexception;

        $r8 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r8.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label09 to label10 with label11;
    }

    private javax.xml.stream.XMLStreamReader createSR(javax.xml.transform.Source) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.transform.stream.StreamSource r10;
        javax.xml.transform.Source r0;
        com.ctc.wstx.stax.MinimalInputFactory r14;
        com.ctc.wstx.io.InputBootstrapper r21;
        javax.xml.stream.XMLStreamReader $r16;
        java.lang.StringBuffer $r2, $r3, $r5, $r6;
        javax.xml.stream.XMLStreamException $r8, $r9, $r20;
        java.lang.String $r7, $r12, $r13, $r15, $r18, $r19;
        boolean $z0, $z1, $z2;
        java.io.Reader $r11;
        java.lang.IllegalArgumentException $r1;
        java.lang.Class $r4;
        java.io.InputStream $r17;

        r14 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r0 := @parameter0: javax.xml.transform.Source;

        $z0 = r0 instanceof javax.xml.transform.stream.StreamSource;

        if $z0 == 0 goto label4;

        r10 = (javax.xml.transform.stream.StreamSource) r0;

        $r11 = virtualinvoke r10.<javax.xml.transform.stream.StreamSource: java.io.Reader getReader()>();

        if $r11 != null goto label2;

        $r17 = virtualinvoke r10.<javax.xml.transform.stream.StreamSource: java.io.InputStream getInputStream()>();

        if $r17 != null goto label1;

        $r20 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r20.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>("Can not create StAX reader for a StreamSource -- neither reader nor input stream was set.");

        throw $r20;

     label1:
        $r18 = virtualinvoke r10.<javax.xml.transform.stream.StreamSource: java.lang.String getPublicId()>();

        $r19 = virtualinvoke r10.<javax.xml.transform.stream.StreamSource: java.lang.String getSystemId()>();

        r21 = staticinvoke <com.ctc.wstx.io.StreamBootstrapper: com.ctc.wstx.io.StreamBootstrapper getInstance(java.io.InputStream,java.lang.String,java.lang.String)>($r17, $r18, $r19);

        goto label3;

     label2:
        $r12 = virtualinvoke r10.<javax.xml.transform.stream.StreamSource: java.lang.String getPublicId()>();

        $r13 = virtualinvoke r10.<javax.xml.transform.stream.StreamSource: java.lang.String getSystemId()>();

        r21 = staticinvoke <com.ctc.wstx.io.ReaderBootstrapper: com.ctc.wstx.io.ReaderBootstrapper getInstance(java.io.Reader,java.lang.String,java.lang.String,java.lang.String)>($r11, $r12, $r13, null);

     label3:
        $r15 = interfaceinvoke r0.<javax.xml.transform.Source: java.lang.String getSystemId()>();

        $r16 = specialinvoke r14.<com.ctc.wstx.stax.MinimalInputFactory: javax.xml.stream.XMLStreamReader createSR(java.lang.String,com.ctc.wstx.io.InputBootstrapper)>($r15, r21);

        return $r16;

     label4:
        $z1 = r0 instanceof javax.xml.transform.sax.SAXSource;

        if $z1 == 0 goto label5;

        $r9 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r9.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>("Can not create a STaX reader for a SAXSource -- not (yet) implemented.");

        throw $r9;

     label5:
        $z2 = r0 instanceof javax.xml.transform.dom.DOMSource;

        if $z2 == 0 goto label6;

        $r8 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r8.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>("Can not create a STaX reader for a DOMSource -- not (yet) implemented.");

        throw $r8;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can not instantiate StAX reader for XML source type ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (unknown type)");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;
    }

    private void throwUnsupported(java.lang.String)
    {
        java.lang.StringBuffer $r1, $r2, $r4;
        java.lang.String r3, $r5;
        java.lang.IllegalArgumentException $r0;
        com.ctc.wstx.stax.MinimalInputFactory r6;

        r6 := @this: com.ctc.wstx.stax.MinimalInputFactory;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("MinimalInputFactory has no DTD support: can not call ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    static void <clinit>()
    {
        com.ctc.wstx.util.SymbolTable $r0, $r1;

        $r0 = staticinvoke <com.ctc.wstx.util.DefaultXmlSymbolTable: com.ctc.wstx.util.SymbolTable getInstance()>();

        <com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.util.SymbolTable mRootSymbols> = $r0;

        $r1 = <com.ctc.wstx.stax.MinimalInputFactory: com.ctc.wstx.util.SymbolTable mRootSymbols>;

        virtualinvoke $r1.<com.ctc.wstx.util.SymbolTable: void setInternStrings(boolean)>(1);

        return;
    }
}
