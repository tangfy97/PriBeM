public class com.jidesoft.swing.JideTabbedPane extends javax.swing.JTabbedPane
{
    private boolean _hideOneTab;
    private boolean _showTabButtons;
    private boolean _showCloseButton;
    private boolean _showCloseButtonOnTab;
    private boolean _showCloseButtonOnMouseOver;
    private boolean _useDefaultShowCloseButtonOnTab;
    private boolean _showTabArea;
    private boolean _showTabContent;
    private boolean _showIconsOnTab;
    private boolean _useDefaultShowIconsOnTab;
    private boolean _rightClickSelect;
    private boolean _dragOverDisabled;
    private boolean _scrollSelectedTabOnWheel;
    private int _tabAlignment;
    public static final java.lang.String SHRINK_TAB_PROPERTY;
    public static final java.lang.String HIDE_IF_ONE_TAB_PROPERTY;
    public static final java.lang.String SHOW_TAB_BUTTONS_PROPERTY;
    public static final java.lang.String BOX_STYLE_PROPERTY;
    public static final java.lang.String SHOW_ICONS_PROPERTY;
    public static final java.lang.String USE_DEFAULT_SHOW_ICONS_PROPERTY;
    public static final java.lang.String SHOW_CLOSE_BUTTON_ON_TAB_PROPERTY;
    public static final java.lang.String SHOW_CLOSE_BUTTON_PROPERTY;
    public static final java.lang.String SHOW_TAB_AREA_PROPERTY;
    public static final java.lang.String SHOW_TAB_CONTENT_PROPERTY;
    public static final java.lang.String TAB_CLOSABLE_PROPERTY;
    public static final java.lang.String USE_DEFAULT_SHOW_CLOSE_BUTTON_ON_TAB_PROPERTY;
    public static final java.lang.String BOLDACTIVETAB_PROPERTY;
    public static final java.lang.String GRIPPER_PROPERTY;
    public static final java.lang.String PROPERTY_TAB_SHAPE;
    public static final java.lang.String PROPERTY_COLOR_THEME;
    public static final java.lang.String PROPERTY_TAB_RESIZE_MODE;
    public static final java.lang.String PROPERTY_TAB_LEADING_COMPONENT;
    public static final java.lang.String PROPERTY_TAB_TRAILING_COMPONENT;
    public static final java.lang.String PROPERTY_TAB_COLOR_PROVIDER;
    public static final java.lang.String PROPERTY_CONTENT_BORDER_INSETS;
    public static final java.lang.String PROPERTY_TAB_AREA_INSETS;
    public static final java.lang.String PROPERTY_TAB_INSETS;
    public static final java.lang.String PROPERTY_DRAG_OVER_DISABLED;
    public static final java.lang.String SCROLL_TAB_ON_WHEEL_PROPERTY;
    public static final java.lang.String PROPERTY_SELECTED_INDEX;
    public static final java.lang.String PROPERTY_SHOW_CLOSE_BUTTON_ON_MOUSE_OVER;
    public static final int BUTTON_CLOSE;
    public static final int BUTTON_EAST;
    public static final int BUTTON_WEST;
    public static final int BUTTON_NORTH;
    public static final int BUTTON_SOUTH;
    public static final int BUTTON_LIST;
    private static final java.lang.String uiClassID;
    private boolean _showGripper;
    private com.jidesoft.swing.StringConverter _stringConverter;
    private boolean _boldActiveTab;
    private java.util.Map _closableMap;
    private java.util.Hashtable _pageLastFocusTrackers;
    private java.awt.Font _selectedTabFont;
    public static final int RESIZE_MODE_DEFAULT;
    public static final int RESIZE_MODE_NONE;
    public static final int RESIZE_MODE_FIT;
    public static final int RESIZE_MODE_FIXED;
    public static final int RESIZE_MODE_COMPRESSED;
    private int _tabResizeMode;
    public static final int COLOR_THEME_DEFAULT;
    public static final int COLOR_THEME_WIN2K;
    public static final int COLOR_THEME_OFFICE2003;
    public static final int COLOR_THEME_VSNET;
    public static final int COLOR_THEME_WINXP;
    private int _colorTheme;
    public static final int SHAPE_DEFAULT;
    public static final int SHAPE_WINDOWS;
    public static final int SHAPE_VSNET;
    public static final int SHAPE_BOX;
    public static final int SHAPE_OFFICE2003;
    public static final int SHAPE_FLAT;
    public static final int SHAPE_ECLIPSE;
    public static final int SHAPE_ECLIPSE3X;
    public static final int SHAPE_EXCEL;
    public static final int SHAPE_ROUNDED_VSNET;
    public static final int SHAPE_ROUNDED_FLAT;
    public static final int SHAPE_WINDOWS_SELECTED;
    private int _tabShape;
    private java.awt.Component _tabLeadingComponent;
    private java.awt.Component _tabTrailingComponent;
    private boolean _hideTrailingWhileNoButtons;
    private boolean _showCloseButtonOnSelectedTab;
    private javax.swing.ListCellRenderer _tabListCellRenderer;
    private java.awt.Insets _contentBorderInsets;
    private java.awt.Insets _tabAreaInsets;
    private java.awt.Insets _tabInsets;
    private static final java.util.logging.Logger LOGGER_EVENT;
    private boolean _closeTabOnMouseMiddleButton;
    private boolean _layoutTrailingComponentBeforeButtons;
    private com.jidesoft.popup.JidePopup _tabListPopup;
    private javax.swing.Action _closeAction;
    boolean _autoFocusonTabHideClose;
    private boolean _suppressStateChangedEvents;
    private boolean _suppressSetSelectedIndex;
    private boolean _autoRequestFocus;
    protected transient boolean _tabEditingAllowed;
    protected transient com.jidesoft.swing.TabEditingValidator _tabEditValidator;
    private com.jidesoft.swing.JideTabbedPane$ColorProvider _tabColorProvider;
    private static java.awt.Color[] ONENOTE_COLORS;
    public static com.jidesoft.swing.JideTabbedPane$ColorProvider ONENOTE_COLOR_PROVIDER;
    protected java.beans.PropertyChangeListener _focusChangeListener;

    public void <init>()
    {
        com.jidesoft.swing.JideTabbedPane r0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        specialinvoke r0.<com.jidesoft.swing.JideTabbedPane: void <init>(int,int)>(1, 1);

        return;
    }

    public void <init>(int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int i0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        specialinvoke r0.<com.jidesoft.swing.JideTabbedPane: void <init>(int,int)>(i0, 1);

        return;
    }

    public void <init>(int, int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        com.jidesoft.swing.JideTabbedPane$IgnoreableSingleSelectionModel $r3;
        int i0, i1;
        java.util.Hashtable $r1, $r2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<javax.swing.JTabbedPane: void <init>(int,int)>(i0, i1);

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _hideOneTab> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabButtons> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButton> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnTab> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnMouseOver> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _useDefaultShowCloseButtonOnTab> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabArea> = 1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabContent> = 1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showIconsOnTab> = 1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _useDefaultShowIconsOnTab> = 1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _scrollSelectedTabOnWheel> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: int _tabAlignment> = 10;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showGripper> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _boldActiveTab> = 0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<com.jidesoft.swing.JideTabbedPane: java.util.Map _closableMap> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<com.jidesoft.swing.JideTabbedPane: java.util.Hashtable _pageLastFocusTrackers> = $r2;

        r0.<com.jidesoft.swing.JideTabbedPane: int _tabResizeMode> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: int _colorTheme> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: int _tabShape> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Component _tabLeadingComponent> = null;

        r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Component _tabTrailingComponent> = null;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _hideTrailingWhileNoButtons> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnSelectedTab> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _closeTabOnMouseMiddleButton> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _layoutTrailingComponentBeforeButtons> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _autoFocusonTabHideClose> = 1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressStateChangedEvents> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressSetSelectedIndex> = 0;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _autoRequestFocus> = 1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _tabEditingAllowed> = 0;

        $r3 = new com.jidesoft.swing.JideTabbedPane$IgnoreableSingleSelectionModel;

        specialinvoke $r3.<com.jidesoft.swing.JideTabbedPane$IgnoreableSingleSelectionModel: void <init>(com.jidesoft.swing.JideTabbedPane)>(r0);

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void setModel(javax.swing.SingleSelectionModel)>($r3);

        return;
    }

    public javax.swing.plaf.TabbedPaneUI getUI()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        javax.swing.plaf.TabbedPaneUI $r2;
        javax.swing.plaf.ComponentUI $r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.ComponentUI ui>;

        $r2 = (javax.swing.plaf.TabbedPaneUI) $r1;

        return $r2;
    }

    public void setUI(javax.swing.plaf.TabbedPaneUI)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        javax.swing.plaf.TabbedPaneUI r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r1 := @parameter0: javax.swing.plaf.TabbedPaneUI;

        specialinvoke r0.<javax.swing.JTabbedPane: void setUI(javax.swing.plaf.TabbedPaneUI)>(r1);

        return;
    }

    public void updateUI()
    {
        com.jidesoft.swing.JideTabbedPane r1;
        javax.swing.plaf.ComponentUI $r2;
        javax.swing.plaf.TabbedPaneUI $r3;
        java.lang.Object $r0;

        r1 := @this: com.jidesoft.swing.JideTabbedPane;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("JideTabbedPaneUI");

        if $r0 != null goto label1;

        staticinvoke <com.jidesoft.plaf.LookAndFeelFactory: void installJideExtension()>();

     label1:
        $r2 = staticinvoke <javax.swing.UIManager: javax.swing.plaf.ComponentUI getUI(javax.swing.JComponent)>(r1);

        $r3 = (javax.swing.plaf.TabbedPaneUI) $r2;

        virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: void setUI(javax.swing.plaf.TabbedPaneUI)>($r3);

        return;
    }

    public java.lang.String getUIClassID()
    {
        com.jidesoft.swing.JideTabbedPane r0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        return "JideTabbedPaneUI";
    }

    public boolean isHideOneTab()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isShowTabButtons()>();

        if $z0 != 0 goto label1;

        $z1 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _hideOneTab>;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void setHideOneTab(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0, z1, $z2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z1 := @parameter0: boolean;

        z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _hideOneTab>;

        if z0 == z1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _hideOneTab> = z1;

        $z2 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _hideOneTab>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("hideIfOneTab", z0, $z2);

     label1:
        return;
    }

    public boolean isTabShown()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int $i0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isShowTabArea()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isHideOneTab()>();

        if $z1 == 0 goto label1;

        $i0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabCount()>();

        if $i0 <= 1 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean isShowTabButtons()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabButtons>;

        return $z0;
    }

    public void setShowTabButtons(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0, z1, $z2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z1 := @parameter0: boolean;

        z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabButtons>;

        if z0 == z1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabButtons> = z1;

        $z2 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabButtons>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("showTabButtons", z0, $z2);

     label1:
        return;
    }

    public void setCloseAction(javax.swing.Action)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        javax.swing.Action r1, r2, $r3;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r2 := @parameter0: javax.swing.Action;

        r1 = r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.Action _closeAction>;

        if r1 == r2 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.Action _closeAction> = r2;

        $r3 = r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.Action _closeAction>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("closeTabAction", r1, $r3);

     label1:
        return;
    }

    public javax.swing.Action getCloseAction()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        javax.swing.Action $r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.Action _closeAction>;

        return $r1;
    }

    public void setAutoFocusOnTabHideClose(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _autoFocusonTabHideClose> = z0;

        return;
    }

    public boolean isAutoFocusOnTabHideClose()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _autoFocusonTabHideClose>;

        return $z0;
    }

    public void resetDefaultCloseAction()
    {
        com.jidesoft.swing.JideTabbedPane r0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void setCloseAction(javax.swing.Action)>(null);

        return;
    }

    public void setSuppressStateChangedEvents(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressStateChangedEvents> = z0;

        return;
    }

    public boolean isSuppressStateChangedEvents()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressStateChangedEvents>;

        return $z0;
    }

    protected void fireStateChanged()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressStateChangedEvents>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isAutoFocusOnTabHideClose()>();

        if $z1 != 0 goto label2;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void clearVisComp()>();

     label2:
        specialinvoke r0.<javax.swing.JTabbedPane: void fireStateChanged()>();

        return;
    }

    public boolean isSuppressSetSelectedIndex()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressSetSelectedIndex>;

        return $z0;
    }

    public void setSuppressSetSelectedIndex(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressSetSelectedIndex> = z0;

        return;
    }

    public void setSelectedIndex(int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.lang.Throwable $r1;
        int $i0, i1;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i1 := @parameter0: int;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressSetSelectedIndex>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isFocusCycleRoot()>();

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void setFocusCycleRoot(boolean)>(1);

     label2:
        $i0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getSelectedIndex()>();

        if $i0 == i1 goto label3;

        specialinvoke r0.<javax.swing.JTabbedPane: void setSelectedIndex(int)>(i1);

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,int,int)>("selectedIndex", $i0, i1);

     label3:
        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void setFocusCycleRoot(boolean)>($z1);

        goto label6;

     label4:
        $r1 := @caughtexception;

     label5:
        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void setFocusCycleRoot(boolean)>($z1);

        throw $r1;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void popupSelectedIndex(int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int i0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void setSelectedIndex(int)>(i0);

        return;
    }

    public void setComponentAt(int, java.awt.Component)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        com.jidesoft.swing.JideTabbedPane$PageLastFocusTracker r5;
        java.awt.Component $r1, r2;
        int i0;
        java.lang.Object $r4;
        java.util.Hashtable $r3, $r6;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        r2 := @parameter1: java.awt.Component;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Component getComponentAt(int)>(i0);

        if $r1 == null goto label1;

        $r3 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Hashtable _pageLastFocusTrackers>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (com.jidesoft.swing.JideTabbedPane$PageLastFocusTracker) $r4;

        $r6 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Hashtable _pageLastFocusTrackers>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r1);

        if r5 == null goto label1;

        virtualinvoke r5.<com.jidesoft.swing.JideTabbedPane$PageLastFocusTracker: void setHeighestComponent(java.awt.Component)>(null);

     label1:
        specialinvoke r0.<javax.swing.JTabbedPane: void setComponentAt(int,java.awt.Component)>(i0, r2);

        $z0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isAutoFocusOnTabHideClose()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void clearVisComp()>();

     label2:
        return;
    }

    public boolean isAutoRequestFocus()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _autoRequestFocus>;

        return $z0;
    }

    public void setAutoRequestFocus(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _autoRequestFocus> = z0;

        return;
    }

    public void moveSelectedTabTo(int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.util.Map $r6, $r7, $r8, $r13, $r14, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9;
        javax.swing.Icon $r5, $r12;
        java.awt.Component $r1, $r2, $r9;
        java.lang.Throwable $r16, $r17, $r18;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i13;
        java.lang.String $r3, $r4, $r10, $r11;
        java.lang.Object r19, r20;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getSelectedIndex()>();

        if $i0 != i1 goto label01;

        return;

     label01:
        $i11 = (int) -1;

        if i1 == $i11 goto label02;

        $i13 = (int) -1;

        if $i0 != $i13 goto label03;

     label02:
        return;

     label03:
        $z0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isTabEditing()>();

        if $z0 == 0 goto label04;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void stopTabEditing()>();

     label04:
        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Component getComponentAt(int)>($i0);

        $z1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isAutoRequestFocus()>();

        z7 = 0;

        z9 = 0;

        z8 = 0;

        if $r1 == null goto label05;

        $z4 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean isAncestorOfFocusOwner(java.awt.Component)>($r1);

        if $z4 == 0 goto label05;

        $z5 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isAutoFocusOnTabHideClose()>();

        if $z5 == 0 goto label05;

        z7 = 1;

        z9 = 1;

        z8 = 1;

     label05:
        r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressStateChangedEvents> = 1;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void setAutoRequestFocus(boolean)>(0);

        $i9 = $i0 - i1;

        if $i9 == 1 goto label06;

        $i7 = i1 - $i0;

        if $i7 != 1 goto label14;

     label06:
        $r2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Component getComponentAt(int)>(i1);

        $r3 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.lang.String getTitleAt(int)>(i1);

        $r4 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.lang.String getToolTipTextAt(int)>(i1);

        $r5 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.Icon getIconAt(int)>(i1);

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressSetSelectedIndex> = 1;

        r19 = null;

        $r6 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Map _closableMap>;

        if $r6 == null goto label07;

        $r8 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Map _closableMap>;

        r19 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

     label07:
        if i1 <= $i0 goto label08;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void insertTab(java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.String,int)>($r3, $r5, $r2, $r4, $i0);

        goto label09;

     label08:
        $i2 = $i0 + 1;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void insertTab(java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.String,int)>($r3, $r5, $r2, $r4, $i2);

     label09:
        if r19 == null goto label10;

        $r7 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Map _closableMap>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r19);

     label10:
        r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressSetSelectedIndex> = 0;

        goto label13;

     label11:
        $r18 := @caughtexception;

     label12:
        r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressSetSelectedIndex> = 0;

        throw $r18;

     label13:
        goto label21;

     label14:
        $r9 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Component getComponentAt(int)>($i0);

        $r10 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.lang.String getTitleAt(int)>($i0);

        $r11 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.lang.String getToolTipTextAt(int)>($i0);

        $r12 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.Icon getIconAt(int)>($i0);

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressSetSelectedIndex> = 1;

        r20 = null;

        $r13 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Map _closableMap>;

        if $r13 == null goto label15;

        $r15 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Map _closableMap>;

        r20 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

     label15:
        if i1 <= $i0 goto label16;

        $i8 = i1 + 1;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void insertTab(java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.String,int)>($r10, $r12, $r9, $r11, $i8);

        goto label17;

     label16:
        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void insertTab(java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.String,int)>($r10, $r12, $r9, $r11, i1);

     label17:
        if r20 == null goto label18;

        $r14 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Map _closableMap>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r20);

     label18:
        r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressSetSelectedIndex> = 0;

        goto label21;

     label19:
        $r17 := @caughtexception;

     label20:
        r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressSetSelectedIndex> = 0;

        throw $r17;

     label21:
        $z2 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk15Above()>();

        if $z2 != 0 goto label22;

        $i3 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabCount()>();

        $i4 = $i3 - 2;

        if i1 != $i4 goto label22;

        $i5 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabCount()>();

        $i6 = $i5 - 1;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void setSelectedIndex(int)>($i6);

     label22:
        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void setAutoRequestFocus(boolean)>($z1);

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void setSelectedIndex(int)>(i1);

     label23:
        r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressStateChangedEvents> = 0;

        if z9 == 0 goto label27;

        $z3 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean requestFocusForVisibleComponent()>();

        if $z3 != 0 goto label27;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean requestFocusInWindow()>();

        goto label27;

     label24:
        $r16 := @caughtexception;

     label25:
        r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressStateChangedEvents> = 0;

        if z8 == 0 goto label26;

        $z6 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean requestFocusForVisibleComponent()>();

        if $z6 != 0 goto label26;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean requestFocusInWindow()>();

     label26:
        throw $r16;

     label27:
        return;

        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label15 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Throwable from label05 to label23 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
    }

    public boolean requestFocusForVisibleComponent()
    {
        com.jidesoft.swing.JideTabbedPane r0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        return 0;
    }

    public boolean isHideTrailingWhileNoButtons()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _hideTrailingWhileNoButtons>;

        return $z0;
    }

    public void setHideTrailingWhileNoButtons(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _hideTrailingWhileNoButtons> = z0;

        return;
    }

    public boolean isLayoutTrailingComponentBeforeButtons()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _layoutTrailingComponentBeforeButtons>;

        return $z0;
    }

    public void setLayoutTrailingComponentBeforeButtons(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _layoutTrailingComponentBeforeButtons> = z0;

        return;
    }

    public void processMouseSelection(int, java.awt.event.MouseEvent)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int i0;
        java.awt.event.MouseEvent r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        r1 := @parameter1: java.awt.event.MouseEvent;

        return;
    }

    public int getTabHeight()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        javax.swing.plaf.TabbedPaneUI $r1, $r4;
        java.awt.Component $r3, $r6;
        int $i0, $i1, $i2, $i3;
        com.jidesoft.plaf.JideTabbedPaneUI $r2, $r5;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $i0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabPlacement()>();

        if $i0 == 1 goto label1;

        $i2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabPlacement()>();

        if $i2 != 3 goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $r2 = (com.jidesoft.plaf.JideTabbedPaneUI) $r1;

        $r3 = virtualinvoke $r2.<com.jidesoft.plaf.JideTabbedPaneUI: java.awt.Component getTabPanel()>();

        $i1 = virtualinvoke $r3.<java.awt.Component: int getHeight()>();

        return $i1;

     label2:
        $r4 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $r5 = (com.jidesoft.plaf.JideTabbedPaneUI) $r4;

        $r6 = virtualinvoke $r5.<com.jidesoft.plaf.JideTabbedPaneUI: java.awt.Component getTabPanel()>();

        $i3 = virtualinvoke $r6.<java.awt.Component: int getWidth()>();

        return $i3;
    }

    public boolean isRightClickSelect()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _rightClickSelect>;

        return $z0;
    }

    public void setRightClickSelect(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _rightClickSelect> = z0;

        return;
    }

    public int getTabAtLocation(int, int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        javax.swing.plaf.TabbedPaneUI $r1;
        int $i0, i1, i2, $i3, $i4, $i6;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $i0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabCount()>();

        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $i3 = virtualinvoke $r1.<javax.swing.plaf.TabbedPaneUI: int tabForCoordinate(javax.swing.JTabbedPane,int,int)>(r0, i1, i2);

        if $i3 < 0 goto label1;

        if $i3 < $i0 goto label2;

     label1:
        $i6 = (int) -1;

        $i4 = $i6;

        goto label3;

     label2:
        $i4 = $i3;

     label3:
        return $i4;
    }

    public boolean isShowGripper()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showGripper>;

        return $z0;
    }

    public void setShowGripper(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0, z1, $z2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z1 := @parameter0: boolean;

        z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showGripper>;

        if z0 == z1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showGripper> = z1;

        $z2 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showGripper>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("gripper", z0, $z2);

     label1:
        return;
    }

    public boolean isShowIconsOnTab()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showIconsOnTab>;

        return $z0;
    }

    public void setShowIconsOnTab(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0, z1, $z2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z1 := @parameter0: boolean;

        z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showIconsOnTab>;

        if z0 == z1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showIconsOnTab> = z1;

        $z2 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showIconsOnTab>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("showIconsOnTab", z0, $z2);

     label1:
        return;
    }

    public boolean isUseDefaultShowIconsOnTab()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _useDefaultShowIconsOnTab>;

        return $z0;
    }

    public void setUseDefaultShowIconsOnTab(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0, z1, $z2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z1 := @parameter0: boolean;

        z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _useDefaultShowIconsOnTab>;

        if z0 == z1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _useDefaultShowIconsOnTab> = z1;

        $z2 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _useDefaultShowIconsOnTab>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("useDefaultShowIconsOnTab", z0, $z2);

     label1:
        return;
    }

    public boolean isShowCloseButtonOnTab()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnTab>;

        return $z0;
    }

    public void setShowCloseButtonOnTab(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0, z1, $z2, $z3;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z1 := @parameter0: boolean;

        z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnTab>;

        if z0 == z1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnTab> = z1;

        $z2 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnTab>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("showCloseButtonOnTab", z0, $z2);

        $z3 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnTab>;

        if $z3 == 0 goto label1;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void setShowCloseButton(boolean)>(1);

     label1:
        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void setUseDefaultShowCloseButtonOnTab(boolean)>(0);

        return;
    }

    public boolean isUseDefaultShowCloseButtonOnTab()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _useDefaultShowCloseButtonOnTab>;

        return $z0;
    }

    public void setUseDefaultShowCloseButtonOnTab(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0, z1, $z2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z1 := @parameter0: boolean;

        z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _useDefaultShowCloseButtonOnTab>;

        if z0 == z1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _useDefaultShowCloseButtonOnTab> = z1;

        $z2 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _useDefaultShowCloseButtonOnTab>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("useDefaultShowCloseButtonOnTab", z0, $z2);

     label1:
        return;
    }

    public void setTabEditingAllowed(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _tabEditingAllowed> = z0;

        return;
    }

    public boolean isTabEditingAllowed()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _tabEditingAllowed>;

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabLayoutPolicy()>();

        if $i0 != 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setTabEditingValidator(com.jidesoft.swing.TabEditingValidator)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        com.jidesoft.swing.TabEditingValidator r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r1 := @parameter0: com.jidesoft.swing.TabEditingValidator;

        r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.swing.TabEditingValidator _tabEditValidator> = r1;

        return;
    }

    public com.jidesoft.swing.TabEditingValidator getTabEditingValidator()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        com.jidesoft.swing.TabEditingValidator $r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.swing.TabEditingValidator _tabEditValidator>;

        return $r1;
    }

    public boolean isShowCloseButton()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButton>;

        return $z0;
    }

    public void setShowCloseButton(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0, z1, $z2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z1 := @parameter0: boolean;

        z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButton>;

        if z0 == z1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButton> = z1;

        $z2 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButton>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("showCloseButton", z0, $z2);

     label1:
        return;
    }

    public boolean isShowTabArea()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabArea>;

        return $z0;
    }

    public void setShowTabArea(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0, z1, $z2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z1 := @parameter0: boolean;

        z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabArea>;

        if z0 == z1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabArea> = z1;

        $z2 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabArea>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("showTabArea", z0, $z2);

     label1:
        return;
    }

    public boolean isShowTabContent()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabContent>;

        return $z0;
    }

    public void setShowTabContent(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0, z1, $z2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z1 := @parameter0: boolean;

        z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabContent>;

        if z0 == z1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabContent> = z1;

        $z2 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showTabContent>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("showTabContent", z0, $z2);

     label1:
        return;
    }

    public com.jidesoft.swing.StringConverter getStringConverter()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        com.jidesoft.swing.StringConverter $r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.swing.StringConverter _stringConverter>;

        return $r1;
    }

    public void setStringConverter(com.jidesoft.swing.StringConverter)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        com.jidesoft.swing.StringConverter r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r1 := @parameter0: com.jidesoft.swing.StringConverter;

        r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.swing.StringConverter _stringConverter> = r1;

        return;
    }

    public java.lang.String getDisplayTitleAt(int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        com.jidesoft.swing.StringConverter $r1, $r3;
        int i0;
        java.lang.String $r2, $r4, $r5;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.swing.StringConverter _stringConverter>;

        if $r1 == null goto label1;

        $r3 = r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.swing.StringConverter _stringConverter>;

        $r4 = specialinvoke r0.<javax.swing.JTabbedPane: java.lang.String getTitleAt(int)>(i0);

        $r5 = interfaceinvoke $r3.<com.jidesoft.swing.StringConverter: java.lang.String convert(java.lang.String)>($r4);

        return $r5;

     label1:
        $r2 = specialinvoke r0.<javax.swing.JTabbedPane: java.lang.String getTitleAt(int)>(i0);

        return $r2;
    }

    public boolean isBoldActiveTab()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _boldActiveTab>;

        return $z0;
    }

    public void setBoldActiveTab(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0, z1, $z2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z1 := @parameter0: boolean;

        z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _boldActiveTab>;

        if z0 == z1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _boldActiveTab> = z1;

        $z2 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _boldActiveTab>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("boldActiveTab", z0, $z2);

     label1:
        return;
    }

    public void removeTabAt(int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.lang.Throwable $r10;
        com.jidesoft.swing.JideTabbedPane$PageLastFocusTracker r13;
        javax.swing.plaf.TabbedPaneUI $r2, $r4, $r14;
        com.jidesoft.plaf.basic.BasicJideTabbedPaneUI $r3, $r5;
        java.util.Map $r9, $r12;
        int $i0, $i1, i2, $i3;
        java.lang.String $r11;
        java.util.Hashtable $r6, $r8;
        boolean $z0, $z1, $z2, z3, $z4, z5, $z6, $z7;
        java.awt.Component $r1;
        java.lang.Object $r7;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i2 := @parameter0: int;

        $i0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabCount()>();

        $i1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getSelectedIndex()>();

        z3 = 0;

        if $i1 != i2 goto label03;

        $i3 = $i0 - 1;

        if $i1 >= $i3 goto label03;

        $z2 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk15Above()>();

        if $z2 != 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        z3 = $z4;

     label03:
        z5 = 0;

        $r11 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.lang.String getTitleAt(int)>(i2);

        $r12 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Map _closableMap>;

        $z6 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);

        if $z6 == 0 goto label04;

        z5 = 1;

     label04:
        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Component getComponentAt(int)>(i2);

        $z0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isAutoFocusOnTabHideClose()>();

        if $z0 != 0 goto label05;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void clearVisComp()>();

     label05:
        specialinvoke r0.<javax.swing.JTabbedPane: void removeTabAt(int)>(i2);

        if z5 == 0 goto label06;

        $r9 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Map _closableMap>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r11);

     label06:
        if $r1 == null goto label07;

        $r6 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Hashtable _pageLastFocusTrackers>;

        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        r13 = (com.jidesoft.swing.JideTabbedPane$PageLastFocusTracker) $r7;

        $r8 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Hashtable _pageLastFocusTrackers>;

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r1);

        if r13 == null goto label07;

        virtualinvoke r13.<com.jidesoft.swing.JideTabbedPane$PageLastFocusTracker: void setHeighestComponent(java.awt.Component)>(null);

     label07:
        if z3 == 0 goto label11;

     label08:
        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void fireStateChanged()>();

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Throwable: void printStackTrace()>();

     label11:
        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void updateUI()>();

        $r14 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $z7 = $r14 instanceof com.jidesoft.plaf.basic.BasicJideTabbedPaneUI;

        if $z7 == 0 goto label12;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $r3 = (com.jidesoft.plaf.basic.BasicJideTabbedPaneUI) $r2;

        virtualinvoke $r3.<com.jidesoft.plaf.basic.BasicJideTabbedPaneUI: void ensureActiveTabIsVisible(boolean)>(1);

        $z1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isAutoFocusOnTabHideClose()>();

        if $z1 == 0 goto label12;

        $r4 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $r5 = (com.jidesoft.plaf.basic.BasicJideTabbedPaneUI) $r4;

        virtualinvoke $r5.<com.jidesoft.plaf.basic.BasicJideTabbedPaneUI: boolean requestFocusForVisibleComponent()>();

     label12:
        return;

        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void setTitleAt(int, java.lang.String)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.util.Map $r1, $r4;
        int i0;
        java.lang.String $r2, r3;
        boolean $z0, z1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        z1 = 0;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Map _closableMap>;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.lang.String getTitleAt(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        z1 = 1;

     label1:
        specialinvoke r0.<javax.swing.JTabbedPane: void setTitleAt(int,java.lang.String)>(i0, r3);

        if z1 == 0 goto label2;

        $r4 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Map _closableMap>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, "");

     label2:
        return;
    }

    public boolean isTabClosableAt(int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.util.Map $r1;
        int i0;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Map _closableMap>;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.lang.String getTitleAt(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setTabClosableAt(int, boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.util.Map $r1, $r4;
        int i0;
        java.lang.Boolean $r3;
        java.lang.String $r2, $r5;
        boolean z0, $z1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r4 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Map _closableMap>;

        $r5 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.lang.String getTitleAt(int)>(i0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        goto label2;

     label1:
        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Map _closableMap>;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.lang.String getTitleAt(int)>(i0);

        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

     label2:
        if z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("tabClosable", $z1, z0);

        return;
    }

    protected java.util.Hashtable getPageLastFocusTrackers()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.util.Hashtable $r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.util.Hashtable _pageLastFocusTrackers>;

        return $r1;
    }

    public java.awt.Component getLastFocusedComponent(java.awt.Component)
    {
        com.jidesoft.swing.JideTabbedPane r1;
        com.jidesoft.swing.JideTabbedPane$PageLastFocusTracker $r4, r5;
        java.lang.Object $r3;
        java.awt.Component r0, $r6;
        java.util.Hashtable $r2;

        r1 := @this: com.jidesoft.swing.JideTabbedPane;

        r0 := @parameter0: java.awt.Component;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: java.util.Hashtable getPageLastFocusTrackers()>();

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (com.jidesoft.swing.JideTabbedPane$PageLastFocusTracker) $r3;

        r5 = (com.jidesoft.swing.JideTabbedPane$PageLastFocusTracker) $r4;

        if r5 == null goto label2;

        $r6 = virtualinvoke r5.<com.jidesoft.swing.JideTabbedPane$PageLastFocusTracker: java.awt.Component getLastFocusedComponent()>();

        goto label3;

     label2:
        $r6 = null;

     label3:
        return $r6;
    }

    protected void clearVisComp()
    {
        com.jidesoft.swing.JideTabbedPane r2;
        java.lang.Class $r0;
        java.lang.reflect.Field $r1;
        java.lang.Exception $r3;

        r2 := @this: com.jidesoft.swing.JideTabbedPane;

     label1:
        $r0 = class "Ljavax/swing/JTabbedPane;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("visComp");

        virtualinvoke $r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke $r1.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r2, null);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void insertTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String, int)
    {
        com.jidesoft.swing.JideTabbedPane r1;
        com.jidesoft.swing.JideTabbedPane$PageLastFocusTracker $r7;
        javax.swing.Icon r5;
        java.awt.Component r0, $r2, $r3;
        int i0;
        java.lang.String r4, r6;
        java.util.Hashtable $r8;
        boolean $z0;

        r1 := @this: com.jidesoft.swing.JideTabbedPane;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: javax.swing.Icon;

        r0 := @parameter2: java.awt.Component;

        r6 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        $r2 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: java.awt.Component getTabLeadingComponent()>();

        if r0 == $r2 goto label1;

        $r3 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: java.awt.Component getTabTrailingComponent()>();

        if r0 != $r3 goto label2;

     label1:
        return;

     label2:
        if r0 == null goto label3;

        $z0 = virtualinvoke r0.<java.awt.Component: boolean isVisible()>();

        if $z0 != 0 goto label3;

        virtualinvoke r0.<java.awt.Component: void setVisible(boolean)>(0);

     label3:
        specialinvoke r1.<javax.swing.JTabbedPane: void insertTab(java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.String,int)>(r4, r5, r0, r6, i0);

        if r0 == null goto label4;

        $r8 = r1.<com.jidesoft.swing.JideTabbedPane: java.util.Hashtable _pageLastFocusTrackers>;

        $r7 = new com.jidesoft.swing.JideTabbedPane$PageLastFocusTracker;

        specialinvoke $r7.<com.jidesoft.swing.JideTabbedPane$PageLastFocusTracker: void <init>(com.jidesoft.swing.JideTabbedPane,java.awt.Component)>(r1, r0);

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r7);

     label4:
        return;
    }

    public java.awt.Font getSelectedTabFont()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.Font $r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Font _selectedTabFont>;

        return $r1;
    }

    public void setSelectedTabFont(java.awt.Font)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.Font r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r1 := @parameter0: java.awt.Font;

        r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Font _selectedTabFont> = r1;

        return;
    }

    public int getColorTheme()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int $i0, $i1, $i2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $i0 = r0.<com.jidesoft.swing.JideTabbedPane: int _colorTheme>;

        if $i0 != 0 goto label1;

        $i2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getDefaultColorTheme()>();

        return $i2;

     label1:
        $i1 = r0.<com.jidesoft.swing.JideTabbedPane: int _colorTheme>;

        return $i1;
    }

    public int getDefaultColorTheme()
    {
        int $i0;
        com.jidesoft.swing.JideTabbedPane r0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $i0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: int getInt(java.lang.Object)>("JideTabbedPane.defaultTabColorTheme");

        return $i0;
    }

    public void setColorTheme(int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int i0, i1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i1 := @parameter0: int;

        i0 = r0.<com.jidesoft.swing.JideTabbedPane: int _colorTheme>;

        if i0 == i1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: int _colorTheme> = i1;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,int,int)>("colorTheme", i0, i1);

     label1:
        return;
    }

    public int getTabResizeMode()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int $i0, $i1, $i2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $i0 = r0.<com.jidesoft.swing.JideTabbedPane: int _tabResizeMode>;

        if $i0 != 0 goto label1;

        $i2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getDefaultTabResizeMode()>();

        return $i2;

     label1:
        $i1 = r0.<com.jidesoft.swing.JideTabbedPane: int _tabResizeMode>;

        return $i1;
    }

    public void setTabResizeMode(int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int i0, i1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i1 := @parameter0: int;

        i0 = r0.<com.jidesoft.swing.JideTabbedPane: int _tabResizeMode>;

        if i0 == i1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: int _tabResizeMode> = i1;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,int,int)>("tabResizeMode", i0, i1);

     label1:
        return;
    }

    public int getDefaultTabResizeMode()
    {
        int $i0;
        com.jidesoft.swing.JideTabbedPane r0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $i0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: int getInt(java.lang.Object)>("JideTabbedPane.defaultResizeMode");

        return $i0;
    }

    public int getTabShape()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int $i0, $i1, $i2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $i0 = r0.<com.jidesoft.swing.JideTabbedPane: int _tabShape>;

        if $i0 != 0 goto label1;

        $i2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getDefaultTabStyle()>();

        return $i2;

     label1:
        $i1 = r0.<com.jidesoft.swing.JideTabbedPane: int _tabShape>;

        return $i1;
    }

    public int getDefaultTabStyle()
    {
        int $i0;
        com.jidesoft.swing.JideTabbedPane r0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $i0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: int getInt(java.lang.Object)>("JideTabbedPane.defaultTabShape");

        return $i0;
    }

    public void setTabShape(int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int i0, i1, $i2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i1 := @parameter0: int;

        i0 = r0.<com.jidesoft.swing.JideTabbedPane: int _tabShape>;

        if i0 == i1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: int _tabShape> = i1;

        $i2 = r0.<com.jidesoft.swing.JideTabbedPane: int _tabShape>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,int,int)>("tabShape", i0, $i2);

     label1:
        return;
    }

    public void setTabLeadingComponent(java.awt.Component)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.Component r1, r2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r2 := @parameter0: java.awt.Component;

        r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Component _tabLeadingComponent>;

        r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Component _tabLeadingComponent> = r2;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("tabLeadingComponent", r1, r2);

        return;
    }

    public java.awt.Component getTabLeadingComponent()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.Component $r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Component _tabLeadingComponent>;

        return $r1;
    }

    public void setTabTrailingComponent(java.awt.Component)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.Component r1, r2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r2 := @parameter0: java.awt.Component;

        r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Component _tabTrailingComponent>;

        r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Component _tabTrailingComponent> = r2;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("tabTrailingComponent", r1, r2);

        return;
    }

    public java.awt.Component add(java.awt.Component)
    {
        com.jidesoft.swing.JideTabbedPane r1;
        int $i1;
        java.lang.String $r4;
        java.awt.Component r0, $r2, $r3;
        boolean $z0;

        r1 := @this: com.jidesoft.swing.JideTabbedPane;

        r0 := @parameter0: java.awt.Component;

        $z0 = r0 instanceof javax.swing.plaf.UIResource;

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: java.awt.Component getTabTrailingComponent()>();

        if r0 == $r2 goto label1;

        $r3 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: java.awt.Component getTabLeadingComponent()>();

        if r0 == $r3 goto label1;

        $r4 = virtualinvoke r0.<java.awt.Component: java.lang.String getName()>();

        virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: void addTab(java.lang.String,java.awt.Component)>($r4, r0);

        goto label2;

     label1:
        $i1 = (int) -1;

        virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: void addImpl(java.awt.Component,java.lang.Object,int)>(r0, null, $i1);

     label2:
        return r0;
    }

    public java.awt.Component getTabTrailingComponent()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.Component $r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Component _tabTrailingComponent>;

        return $r1;
    }

    public boolean isShowCloseButtonOnSelectedTab()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnSelectedTab>;

        return $z0;
    }

    public void setShowCloseButtonOnSelectedTab(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnSelectedTab> = z0;

        return;
    }

    public boolean isShowCloseButtonOnMouseOver()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnMouseOver>;

        return $z0;
    }

    public void setShowCloseButtonOnMouseOver(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0, $z1, z2, $z3;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnMouseOver>;

        if $z1 == z0 goto label1;

        z2 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnMouseOver>;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnMouseOver> = z0;

        $z3 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _showCloseButtonOnMouseOver>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("showCloseButtonOnMouseOver", z2, $z3);

     label1:
        return;
    }

    public com.jidesoft.swing.JideTabbedPane$ColorProvider getTabColorProvider()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        com.jidesoft.swing.JideTabbedPane$ColorProvider $r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.swing.JideTabbedPane$ColorProvider _tabColorProvider>;

        return $r1;
    }

    public void setTabColorProvider(com.jidesoft.swing.JideTabbedPane$ColorProvider)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        com.jidesoft.swing.JideTabbedPane$ColorProvider r1, r2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r2 := @parameter0: com.jidesoft.swing.JideTabbedPane$ColorProvider;

        r1 = r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.swing.JideTabbedPane$ColorProvider _tabColorProvider>;

        if r1 == r2 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.swing.JideTabbedPane$ColorProvider _tabColorProvider> = r2;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("tabColorProvider", r1, r2);

     label1:
        return;
    }

    public void editTabAt(int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int i0;
        javax.swing.plaf.TabbedPaneUI $r1;
        com.jidesoft.plaf.JideTabbedPaneUI $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $r2 = (com.jidesoft.plaf.JideTabbedPaneUI) $r1;

        $z0 = virtualinvoke $r2.<com.jidesoft.plaf.JideTabbedPaneUI: boolean editTabAt(int)>(i0);

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.lang.String getTitleAt(int)>(i0);

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void fireTabEditing(int,int,java.lang.String,java.lang.String)>(3099, i0, $r3, null);

     label1:
        return;
    }

    public boolean isTabEditing()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        javax.swing.plaf.TabbedPaneUI $r1;
        com.jidesoft.plaf.JideTabbedPaneUI $r2;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $r2 = (com.jidesoft.plaf.JideTabbedPaneUI) $r1;

        $z0 = virtualinvoke $r2.<com.jidesoft.plaf.JideTabbedPaneUI: boolean isTabEditing()>();

        return $z0;
    }

    public void stopTabEditing()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        javax.swing.plaf.TabbedPaneUI $r2;
        int $i0, $i1, $i3;
        com.jidesoft.plaf.JideTabbedPaneUI $r3;
        java.lang.String $r1, $r4;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $i0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getEditingTabIndex()>();

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $i1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabCount()>();

        if $i0 >= $i1 goto label1;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.lang.String getTitleAt(int)>($i0);

        $r2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $r3 = (com.jidesoft.plaf.JideTabbedPaneUI) $r2;

        virtualinvoke $r3.<com.jidesoft.plaf.JideTabbedPaneUI: void stopTabEditing()>();

        $r4 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.lang.String getTitleAt(int)>($i0);

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void fireTabEditing(int,int,java.lang.String,java.lang.String)>(3100, $i0, $r1, $r4);

     label1:
        return;
    }

    public void cancelTabEditing()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int $i0, $i2;
        javax.swing.plaf.TabbedPaneUI $r1;
        com.jidesoft.plaf.JideTabbedPaneUI $r2;
        java.lang.String $r3, $r4;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $i0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getEditingTabIndex()>();

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $r2 = (com.jidesoft.plaf.JideTabbedPaneUI) $r1;

        virtualinvoke $r2.<com.jidesoft.plaf.JideTabbedPaneUI: void cancelTabEditing()>();

        $r3 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.lang.String getTitleAt(int)>($i0);

        $r4 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.lang.String getTitleAt(int)>($i0);

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void fireTabEditing(int,int,java.lang.String,java.lang.String)>(3101, $i0, $r3, $r4);

     label1:
        return;
    }

    public int getEditingTabIndex()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int $i0;
        javax.swing.plaf.TabbedPaneUI $r1;
        com.jidesoft.plaf.JideTabbedPaneUI $r2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $r2 = (com.jidesoft.plaf.JideTabbedPaneUI) $r1;

        $i0 = virtualinvoke $r2.<com.jidesoft.plaf.JideTabbedPaneUI: int getEditingTabIndex()>();

        return $i0;
    }

    protected java.beans.PropertyChangeListener createFocusChangeListener()
    {
        com.jidesoft.swing.JideTabbedPane r1;
        com.jidesoft.swing.JideTabbedPane$1 $r0;

        r1 := @this: com.jidesoft.swing.JideTabbedPane;

        $r0 = new com.jidesoft.swing.JideTabbedPane$1;

        specialinvoke $r0.<com.jidesoft.swing.JideTabbedPane$1: void <init>(com.jidesoft.swing.JideTabbedPane)>(r1);

        return $r0;
    }

    public void repaintTabAreaAndContentBorder()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        javax.swing.plaf.TabbedPaneUI $r1;
        java.awt.Component $r3;
        java.awt.Insets $r4, r5, $r6;
        long $l0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        com.jidesoft.plaf.JideTabbedPaneUI $r2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $r2 = (com.jidesoft.plaf.JideTabbedPaneUI) $r1;

        $r3 = virtualinvoke $r2.<com.jidesoft.plaf.JideTabbedPaneUI: java.awt.Component getTabPanel()>();

        $l0 = (long) 200;

        virtualinvoke $r3.<java.awt.Component: void repaint(long)>($l0);

        $r4 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Insets getContentBorderInsets()>();

        r5 = $r4;

        if $r4 != null goto label01;

        staticinvoke <com.jidesoft.plaf.LookAndFeelFactory: void installJideExtension()>();

        r5 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Insets getContentBorderInsets()>();

     label01:
        if r5 == null goto label11;

        $i1 = r5.<java.awt.Insets: int top>;

        if $i1 != 0 goto label02;

        $i31 = r5.<java.awt.Insets: int bottom>;

        if $i31 != 0 goto label02;

        $i32 = r5.<java.awt.Insets: int left>;

        if $i32 != 0 goto label02;

        $i33 = r5.<java.awt.Insets: int right>;

        if $i33 == 0 goto label11;

     label02:
        $r6 = new java.awt.Insets;

        specialinvoke $r6.<java.awt.Insets: void <init>(int,int,int,int)>(0, 0, 0, 0);

        $i34 = r0.<com.jidesoft.swing.JideTabbedPane: int tabPlacement>;

        staticinvoke <com.jidesoft.plaf.basic.BasicJideTabbedPaneUI: void rotateInsets(java.awt.Insets,java.awt.Insets,int)>(r5, $r6, $i34);

        $i35 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabPlacement()>();

        tableswitch($i35)
        {
            case 1: goto label03;
            case 2: goto label05;
            case 3: goto label04;
            case 4: goto label06;
            default: goto label07;
        };

     label03:
        $i28 = $r6.<java.awt.Insets: int top>;

        $i29 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabHeight()>();

        $i30 = $i28 + $i29;

        $r6.<java.awt.Insets: int top> = $i30;

        goto label07;

     label04:
        $i22 = $r6.<java.awt.Insets: int bottom>;

        $i23 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabHeight()>();

        $i24 = $i22 + $i23;

        $r6.<java.awt.Insets: int bottom> = $i24;

        goto label07;

     label05:
        $i25 = $r6.<java.awt.Insets: int left>;

        $i26 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabHeight()>();

        $i27 = $i25 + $i26;

        $r6.<java.awt.Insets: int left> = $i27;

        goto label07;

     label06:
        $i2 = $r6.<java.awt.Insets: int right>;

        $i3 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabHeight()>();

        $i4 = $i2 + $i3;

        $r6.<java.awt.Insets: int right> = $i4;

     label07:
        $i36 = $r6.<java.awt.Insets: int top>;

        if $i36 == 0 goto label08;

        $i20 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getWidth()>();

        $i21 = $r6.<java.awt.Insets: int top>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void repaintContentBorder(int,int,int,int)>(0, 0, $i20, $i21);

     label08:
        $i5 = $r6.<java.awt.Insets: int left>;

        if $i5 == 0 goto label09;

        $i18 = $r6.<java.awt.Insets: int left>;

        $i19 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getHeight()>();

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void repaintContentBorder(int,int,int,int)>(0, 0, $i18, $i19);

     label09:
        $i6 = $r6.<java.awt.Insets: int right>;

        if $i6 == 0 goto label10;

        $i13 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getWidth()>();

        $i14 = $r6.<java.awt.Insets: int right>;

        $i15 = $i13 - $i14;

        $i16 = $r6.<java.awt.Insets: int right>;

        $i17 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getHeight()>();

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void repaintContentBorder(int,int,int,int)>($i15, 0, $i16, $i17);

     label10:
        $i7 = $r6.<java.awt.Insets: int bottom>;

        if $i7 == 0 goto label11;

        $i8 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getHeight()>();

        $i9 = $r6.<java.awt.Insets: int bottom>;

        $i10 = $i8 - $i9;

        $i11 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getWidth()>();

        $i12 = $r6.<java.awt.Insets: int bottom>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void repaintContentBorder(int,int,int,int)>(0, $i10, $i11, $i12);

     label11:
        return;
    }

    protected void repaintContentBorder(int, int, int, int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int i0, i1, i2, i3;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void repaint(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public void addNotify()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.KeyboardFocusManager $r3;
        java.beans.PropertyChangeListener $r1, $r2, $r4;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        specialinvoke r0.<javax.swing.JTabbedPane: void addNotify()>();

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.beans.PropertyChangeListener _focusChangeListener>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.beans.PropertyChangeListener createFocusChangeListener()>();

        r0.<com.jidesoft.swing.JideTabbedPane: java.beans.PropertyChangeListener _focusChangeListener> = $r2;

        $r3 = staticinvoke <java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>();

        $r4 = r0.<com.jidesoft.swing.JideTabbedPane: java.beans.PropertyChangeListener _focusChangeListener>;

        virtualinvoke $r3.<java.awt.KeyboardFocusManager: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>("focusOwner", $r4);

     label1:
        return;
    }

    public void removeNotify()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.KeyboardFocusManager $r2;
        java.beans.PropertyChangeListener $r1, $r3;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        specialinvoke r0.<javax.swing.JTabbedPane: void removeNotify()>();

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.beans.PropertyChangeListener _focusChangeListener>;

        if $r1 == null goto label1;

        $r2 = staticinvoke <java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>();

        $r3 = r0.<com.jidesoft.swing.JideTabbedPane: java.beans.PropertyChangeListener _focusChangeListener>;

        virtualinvoke $r2.<java.awt.KeyboardFocusManager: void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>("focusOwner", $r3);

        r0.<com.jidesoft.swing.JideTabbedPane: java.beans.PropertyChangeListener _focusChangeListener> = null;

     label1:
        return;
    }

    public javax.swing.ListCellRenderer getTabListCellRenderer()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        com.jidesoft.swing.JideTabbedPane$TabListCellRenderer $r2;
        javax.swing.ListCellRenderer $r1, $r3;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.ListCellRenderer _tabListCellRenderer>;

        if $r1 == null goto label1;

        $r3 = r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.ListCellRenderer _tabListCellRenderer>;

        return $r3;

     label1:
        $r2 = new com.jidesoft.swing.JideTabbedPane$TabListCellRenderer;

        specialinvoke $r2.<com.jidesoft.swing.JideTabbedPane$TabListCellRenderer: void <init>()>();

        return $r2;
    }

    public void setTabListCellRenderer(javax.swing.ListCellRenderer)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        javax.swing.ListCellRenderer r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r1 := @parameter0: javax.swing.ListCellRenderer;

        r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.ListCellRenderer _tabListCellRenderer> = r1;

        return;
    }

    public boolean hasFocusComponent()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean isAncestorOfFocusOwner(java.awt.Component)>(r0);

        return $z0;
    }

    public java.awt.Insets getContentBorderInsets()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.Insets $r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Insets _contentBorderInsets>;

        return $r1;
    }

    public void setContentBorderInsets(java.awt.Insets)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.Insets r1, r2, $r3;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r2 := @parameter0: java.awt.Insets;

        r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Insets _contentBorderInsets>;

        r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Insets _contentBorderInsets> = r2;

        $r3 = r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Insets _contentBorderInsets>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("contentBorderInsets", r1, $r3);

        return;
    }

    public java.awt.Insets getTabAreaInsets()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.Insets $r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Insets _tabAreaInsets>;

        return $r1;
    }

    public void setTabAreaInsets(java.awt.Insets)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.Insets r1, r2, $r3;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r2 := @parameter0: java.awt.Insets;

        r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Insets _tabAreaInsets>;

        r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Insets _tabAreaInsets> = r2;

        $r3 = r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Insets _tabAreaInsets>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("tabAreaInsets", r1, $r3);

        return;
    }

    public java.awt.Insets getTabInsets()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.Insets $r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Insets _tabInsets>;

        return $r1;
    }

    public void setTabInsets(java.awt.Insets)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.Insets r1, r2, $r3;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r2 := @parameter0: java.awt.Insets;

        r1 = r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Insets _tabInsets>;

        r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Insets _tabInsets> = r2;

        $r3 = r0.<com.jidesoft.swing.JideTabbedPane: java.awt.Insets _tabInsets>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("tabInsets", r1, $r3);

        return;
    }

    public boolean isDragOverDisabled()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _dragOverDisabled>;

        return $z0;
    }

    public void setDragOverDisabled(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0, z1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z1 := @parameter0: boolean;

        z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _dragOverDisabled>;

        if z0 == z1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _dragOverDisabled> = z1;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("dragOverDisabled", z0, z1);

     label1:
        return;
    }

    public void scrollSelectedTabToVisible(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        javax.swing.plaf.TabbedPaneUI $r1;
        com.jidesoft.plaf.JideTabbedPaneUI $r2;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $r2 = (com.jidesoft.plaf.JideTabbedPaneUI) $r1;

        virtualinvoke $r2.<com.jidesoft.plaf.JideTabbedPaneUI: void ensureActiveTabIsVisible(boolean)>(z0);

        return;
    }

    public void addTabEditingListener(com.jidesoft.swing.TabEditingListener)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        com.jidesoft.swing.TabEditingListener r1;
        javax.swing.event.EventListenerList $r2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r1 := @parameter0: com.jidesoft.swing.TabEditingListener;

        $r2 = r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.event.EventListenerList listenerList>;

        virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "Lcom/jidesoft/swing/TabEditingListener;", r1);

        return;
    }

    public void removeTabEditingListener(com.jidesoft.swing.TabEditingListener)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        com.jidesoft.swing.TabEditingListener r1;
        javax.swing.event.EventListenerList $r2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r1 := @parameter0: com.jidesoft.swing.TabEditingListener;

        $r2 = r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.event.EventListenerList listenerList>;

        virtualinvoke $r2.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>(class "Lcom/jidesoft/swing/TabEditingListener;", r1);

        return;
    }

    public com.jidesoft.swing.TabEditingListener[] getTabEditingListeners()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.util.EventListener[] $r2;
        javax.swing.event.EventListenerList $r1;
        com.jidesoft.swing.TabEditingListener[] $r3;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.event.EventListenerList listenerList>;

        $r2 = virtualinvoke $r1.<javax.swing.event.EventListenerList: java.util.EventListener[] getListeners(java.lang.Class)>(class "Lcom/jidesoft/swing/TabEditingListener;");

        $r3 = (com.jidesoft.swing.TabEditingListener[]) $r2;

        return $r3;
    }

    protected void fireTabEditing(int, int, java.lang.String, java.lang.String)
    {
        com.jidesoft.swing.JideTabbedPane r2;
        javax.swing.event.EventListenerList $r36;
        boolean $z0;
        com.jidesoft.swing.TabEditingEvent $r41;
        com.jidesoft.swing.TabEditingListener $r8, $r10, $r12;
        java.util.logging.Logger $r1, $r14, $r21, $r30;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r22, $r23, $r24, $r25, $r26, $r27, $r31, $r32, $r33, $r34, $r38, $r39, $r40;
        java.lang.Object[] $r37;
        java.util.logging.Level $r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i8;
        java.lang.String r5, r6, $r19, $r28, $r35;
        java.lang.Object $r3, $r7, $r9, $r11;

        r2 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r5 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.String;

        $r1 = <com.jidesoft.swing.JideTabbedPane: java.util.logging.Logger LOGGER_EVENT>;

        $r0 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r0);

        if $z0 == 0 goto label4;

        tableswitch(i0)
        {
            case 3099: goto label1;
            case 3100: goto label2;
            case 3101: goto label3;
            default: goto label4;
        };

     label1:
        $r30 = <com.jidesoft.swing.JideTabbedPane: java.util.logging.Logger LOGGER_EVENT>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TabEditing Started at tab \"");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"; the current title is ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r30.<java.util.logging.Logger: void fine(java.lang.String)>($r35);

        goto label4;

     label2:
        $r21 = <com.jidesoft.swing.JideTabbedPane: java.util.logging.Logger LOGGER_EVENT>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TabEditing Stopped at tab \"");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"; the old title is ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; the new title is ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<java.util.logging.Logger: void fine(java.lang.String)>($r28);

        goto label4;

     label3:
        $r14 = <com.jidesoft.swing.JideTabbedPane: java.util.logging.Logger LOGGER_EVENT>;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TabEditing Cancelled at tab \"");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"; the current title remains ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.util.logging.Logger: void fine(java.lang.String)>($r19);

     label4:
        $r36 = r2.<com.jidesoft.swing.JideTabbedPane: javax.swing.event.EventListenerList listenerList>;

        $r37 = virtualinvoke $r36.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>();

        $i5 = lengthof $r37;

        i6 = $i5 - 2;

     label5:
        if i6 < 0 goto label9;

        $r3 = $r37[i6];

        if $r3 != class "Lcom/jidesoft/swing/TabEditingListener;" goto label8;

        $r41 = new com.jidesoft.swing.TabEditingEvent;

        specialinvoke $r41.<com.jidesoft.swing.TabEditingEvent: void <init>(java.lang.Object,int,int,java.lang.String,java.lang.String)>(r2, i0, i1, r5, r6);

        if i0 != 3099 goto label6;

        $i4 = i6 + 1;

        $r11 = $r37[$i4];

        $r12 = (com.jidesoft.swing.TabEditingListener) $r11;

        interfaceinvoke $r12.<com.jidesoft.swing.TabEditingListener: void editingStarted(com.jidesoft.swing.TabEditingEvent)>($r41);

        goto label8;

     label6:
        if i0 != 3101 goto label7;

        $i3 = i6 + 1;

        $r9 = $r37[$i3];

        $r10 = (com.jidesoft.swing.TabEditingListener) $r9;

        interfaceinvoke $r10.<com.jidesoft.swing.TabEditingListener: void editingCanceled(com.jidesoft.swing.TabEditingEvent)>($r41);

        goto label8;

     label7:
        if i0 != 3100 goto label8;

        $i2 = i6 + 1;

        $r7 = $r37[$i2];

        $r8 = (com.jidesoft.swing.TabEditingListener) $r7;

        interfaceinvoke $r8.<com.jidesoft.swing.TabEditingListener: void editingStopped(com.jidesoft.swing.TabEditingEvent)>($r41);

     label8:
        $i8 = (int) -2;

        i6 = i6 + $i8;

        goto label5;

     label9:
        return;
    }

    public javax.swing.Icon getIconForTab(int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        javax.swing.Icon $r1, $r2;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: boolean getBoolean(java.lang.Object)>("JideTabbedPane.showIconOnTab");

        $z1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isUseDefaultShowIconsOnTab()>();

        if $z1 == 0 goto label5;

        if $z0 == 0 goto label4;

        $z5 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isEnabled()>();

        if $z5 == 0 goto label1;

        $z6 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isEnabledAt(int)>(i0);

        if $z6 != 0 goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.Icon getDisabledIconAt(int)>(i0);

        goto label3;

     label2:
        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.Icon getIconAt(int)>(i0);

     label3:
        return $r1;

     label4:
        return null;

     label5:
        $z2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isShowIconsOnTab()>();

        if $z2 == 0 goto label9;

        $z3 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isEnabled()>();

        if $z3 == 0 goto label6;

        $z4 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isEnabledAt(int)>(i0);

        if $z4 != 0 goto label7;

     label6:
        $r2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.Icon getDisabledIconAt(int)>(i0);

        goto label8;

     label7:
        $r2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: javax.swing.Icon getIconAt(int)>(i0);

     label8:
        return $r2;

     label9:
        return null;
    }

    public boolean isScrollSelectedTabOnWheel()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _scrollSelectedTabOnWheel>;

        return $z0;
    }

    public void setScrollSelectedTabOnWheel(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0, z1, $z2;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: boolean isScrollSelectedTabOnWheel()>();

        if $z0 == z1 goto label1;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _scrollSelectedTabOnWheel> = z1;

        $z2 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _scrollSelectedTabOnWheel>;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,boolean,boolean)>("scrollTabOnWheel", $z0, $z2);

     label1:
        return;
    }

    public boolean isCloseTabOnMouseMiddleButton()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _closeTabOnMouseMiddleButton>;

        return $z0;
    }

    public void setCloseTabOnMouseMiddleButton(boolean)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.JideTabbedPane: boolean _closeTabOnMouseMiddleButton> = z0;

        return;
    }

    public int getTabAlignment()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int $i0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $i0 = r0.<com.jidesoft.swing.JideTabbedPane: int _tabAlignment>;

        return $i0;
    }

    public void setTabAlignment(int)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        int i0, $i1, i2;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        if i0 == 10 goto label1;

        if i0 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("illegal tab alignment: must be LEADING or CENTER");

        throw $r1;

     label1:
        $i1 = r0.<com.jidesoft.swing.JideTabbedPane: int _tabAlignment>;

        if $i1 == i0 goto label2;

        i2 = r0.<com.jidesoft.swing.JideTabbedPane: int _tabAlignment>;

        r0.<com.jidesoft.swing.JideTabbedPane: int _tabAlignment> = i0;

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void firePropertyChange(java.lang.String,int,int)>("tabAlignment", i2, i0);

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void revalidate()>();

        virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: void repaint()>();

     label2:
        return;
    }

    public java.lang.String getResourceString(java.lang.String)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.util.ResourceBundle $r2;
        java.util.Locale $r1;
        java.lang.String r3, $r4;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r3 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.util.Locale getLocale()>();

        $r2 = staticinvoke <com.jidesoft.plaf.basic.Resource: java.util.ResourceBundle getResourceBundle(java.util.Locale)>($r1);

        $r4 = virtualinvoke $r2.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r3);

        return $r4;
    }

    protected com.jidesoft.popup.JidePopup createTabListPopup()
    {
        com.jidesoft.popup.JidePopup $r0;
        com.jidesoft.swing.JideTabbedPane r1;

        r1 := @this: com.jidesoft.swing.JideTabbedPane;

        $r0 = new com.jidesoft.popup.JidePopup;

        specialinvoke $r0.<com.jidesoft.popup.JidePopup: void <init>()>();

        return $r0;
    }

    public boolean isTabListPopupVisible()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        com.jidesoft.popup.JidePopup $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup>;

        if $r1 == null goto label1;

        $r2 = r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup>;

        $z0 = virtualinvoke $r2.<com.jidesoft.popup.JidePopup: boolean isPopupVisible()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void hideTabListPopup()
    {
        com.jidesoft.swing.JideTabbedPane r0;
        com.jidesoft.popup.JidePopup $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup>;

        if $r1 == null goto label2;

        $r2 = r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup>;

        $z0 = virtualinvoke $r2.<com.jidesoft.popup.JidePopup: boolean isPopupVisible()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup>;

        virtualinvoke $r3.<com.jidesoft.popup.JidePopup: void hidePopupImmediately()>();

     label1:
        r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup> = null;

     label2:
        return;
    }

    public void showTabListPopup(javax.swing.JButton)
    {
        java.awt.Color $r2, $r14;
        com.jidesoft.swing.JideTabbedPane r4;
        java.awt.Insets $r5;
        java.awt.Point $r22;
        javax.swing.border.Border $r3, $r8, $r15;
        int $i0, $i1;
        java.awt.BorderLayout $r1;
        javax.swing.JButton r17;
        javax.swing.JList $r6;
        com.jidesoft.popup.JidePopup $r10, $r11, $r13, $r16, $r18, $r19, $r20, $r21, $r23;
        java.awt.ComponentOrientation $r12;
        javax.swing.JScrollPane $r7;
        javax.swing.JPanel $r0;
        javax.swing.JViewport $r9;

        r4 := @this: com.jidesoft.swing.JideTabbedPane;

        r17 := @parameter0: javax.swing.JButton;

        $r0 = new javax.swing.JPanel;

        $r1 = new java.awt.BorderLayout;

        specialinvoke $r1.<java.awt.BorderLayout: void <init>()>();

        specialinvoke $r0.<javax.swing.JPanel: void <init>(java.awt.LayoutManager)>($r1);

        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideTabbedPane.tabListBackground");

        virtualinvoke $r0.<javax.swing.JPanel: void setBackground(java.awt.Color)>($r2);

        virtualinvoke $r0.<javax.swing.JPanel: void setOpaque(boolean)>(1);

        $r3 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(3, 3, 3, 3);

        virtualinvoke $r0.<javax.swing.JPanel: void setBorder(javax.swing.border.Border)>($r3);

        $r5 = virtualinvoke $r0.<javax.swing.JPanel: java.awt.Insets getInsets()>();

        $r6 = virtualinvoke r4.<com.jidesoft.swing.JideTabbedPane: javax.swing.JList createTabList(java.awt.Insets)>($r5);

        $r7 = new javax.swing.JScrollPane;

        specialinvoke $r7.<javax.swing.JScrollPane: void <init>(java.awt.Component)>($r6);

        $r8 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder()>();

        virtualinvoke $r7.<javax.swing.JScrollPane: void setBorder(javax.swing.border.Border)>($r8);

        $r9 = virtualinvoke $r7.<javax.swing.JScrollPane: javax.swing.JViewport getViewport()>();

        virtualinvoke $r9.<javax.swing.JViewport: void setOpaque(boolean)>(0);

        virtualinvoke $r7.<javax.swing.JScrollPane: void setOpaque(boolean)>(0);

        virtualinvoke $r0.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($r7);

        virtualinvoke r4.<com.jidesoft.swing.JideTabbedPane: void hideTabListPopup()>();

        $r10 = virtualinvoke r4.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup createTabListPopup()>();

        r4.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup> = $r10;

        $r11 = r4.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup>;

        $r12 = virtualinvoke r4.<com.jidesoft.swing.JideTabbedPane: java.awt.ComponentOrientation getComponentOrientation()>();

        virtualinvoke $r11.<com.jidesoft.popup.JidePopup: void setComponentOrientation(java.awt.ComponentOrientation)>($r12);

        $r13 = r4.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup>;

        $r14 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideTabbedPane.darkShadow");

        $r15 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createLineBorder(java.awt.Color)>($r14);

        virtualinvoke $r13.<com.jidesoft.popup.JidePopup: void setPopupBorder(javax.swing.border.Border)>($r15);

        $r16 = r4.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup>;

        virtualinvoke $r16.<com.jidesoft.popup.JidePopup: java.awt.Component add(java.awt.Component)>($r0);

        $r18 = r4.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup>;

        virtualinvoke $r18.<com.jidesoft.popup.JidePopup: void addExcludedComponent(java.awt.Component)>(r17);

        $r19 = r4.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup>;

        virtualinvoke $r19.<com.jidesoft.popup.JidePopup: void setDefaultFocusComponent(java.awt.Component)>($r6);

        $r20 = r4.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup>;

        virtualinvoke $r20.<com.jidesoft.popup.JidePopup: void setOwner(java.awt.Component)>(r4);

        $r21 = r4.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup>;

        virtualinvoke $r21.<com.jidesoft.popup.JidePopup: void removeExcludedComponent(java.awt.Component)>(r4);

        $r22 = virtualinvoke r4.<com.jidesoft.swing.JideTabbedPane: java.awt.Point calculateTabListPopupPosition(javax.swing.JButton)>(r17);

        $r23 = r4.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup>;

        $i1 = $r22.<java.awt.Point: int x>;

        $i0 = $r22.<java.awt.Point: int y>;

        virtualinvoke $r23.<com.jidesoft.popup.JidePopup: void showPopup(int,int)>($i1, $i0);

        return;
    }

    protected java.awt.Point calculateTabListPopupPosition(javax.swing.JButton)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        java.awt.Point $r5, $r6;
        boolean $z0, $z1;
        com.jidesoft.popup.JidePopup $r1;
        java.awt.Dimension $r2;
        java.awt.Rectangle $r4, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, i40, i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50;
        javax.swing.JButton r3;
        java.awt.ComponentOrientation $r7, $r8;

        r0 := @this: com.jidesoft.swing.JideTabbedPane;

        r3 := @parameter0: javax.swing.JButton;

        $r1 = r0.<com.jidesoft.swing.JideTabbedPane: com.jidesoft.popup.JidePopup _tabListPopup>;

        $r2 = virtualinvoke $r1.<com.jidesoft.popup.JidePopup: java.awt.Dimension getPreferredSize()>();

        $r4 = virtualinvoke r3.<javax.swing.JButton: java.awt.Rectangle getBounds()>();

        $r5 = virtualinvoke r3.<javax.swing.JButton: java.awt.Point getLocationOnScreen()>();

        $i0 = $r5.<java.awt.Point: int x>;

        $r4.<java.awt.Rectangle: int x> = $i0;

        $i1 = $r5.<java.awt.Point: int y>;

        $r4.<java.awt.Rectangle: int y> = $i1;

        $i2 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: int getTabPlacement()>();

        tableswitch($i2)
        {
            case 1: goto label01;
            case 2: goto label07;
            case 3: goto label04;
            case 4: goto label08;
            default: goto label01;
        };

     label01:
        $r8 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.awt.ComponentOrientation getComponentOrientation()>();

        $z1 = virtualinvoke $r8.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z1 == 0 goto label02;

        $i37 = $r4.<java.awt.Rectangle: int x>;

        $i36 = $r4.<java.awt.Rectangle: int width>;

        $i39 = $i37 + $i36;

        $i38 = $r2.<java.awt.Dimension: int width>;

        i40 = $i39 - $i38;

        goto label03;

     label02:
        i40 = $r4.<java.awt.Rectangle: int x>;

     label03:
        $i34 = $r4.<java.awt.Rectangle: int y>;

        $i33 = $r4.<java.awt.Rectangle: int height>;

        $i35 = $i34 + $i33;

        i41 = $i35 + 2;

        goto label09;

     label04:
        $r7 = virtualinvoke r0.<com.jidesoft.swing.JideTabbedPane: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r7.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z0 == 0 goto label05;

        $i23 = $r4.<java.awt.Rectangle: int x>;

        $i22 = $r4.<java.awt.Rectangle: int width>;

        $i25 = $i23 + $i22;

        $i24 = $r2.<java.awt.Dimension: int width>;

        i40 = $i25 - $i24;

        goto label06;

     label05:
        i40 = $r4.<java.awt.Rectangle: int x>;

     label06:
        $i20 = $r4.<java.awt.Rectangle: int y>;

        $i19 = $r2.<java.awt.Dimension: int height>;

        $i21 = $i20 - $i19;

        i41 = $i21 - 2;

        goto label09;

     label07:
        $i27 = $r4.<java.awt.Rectangle: int x>;

        $i26 = $r4.<java.awt.Rectangle: int width>;

        $i28 = $i27 + $i26;

        i40 = $i28 + 2;

        $i30 = $r4.<java.awt.Rectangle: int y>;

        $i29 = $r4.<java.awt.Rectangle: int height>;

        $i32 = $i30 + $i29;

        $i31 = $r2.<java.awt.Dimension: int height>;

        i41 = $i32 - $i31;

        goto label09;

     label08:
        $i4 = $r4.<java.awt.Rectangle: int x>;

        $i3 = $r2.<java.awt.Dimension: int width>;

        $i5 = $i4 - $i3;

        i40 = $i5 - 2;

        $i7 = $r4.<java.awt.Rectangle: int y>;

        $i6 = $r4.<java.awt.Rectangle: int height>;

        $i9 = $i7 + $i6;

        $i8 = $r2.<java.awt.Dimension: int height>;

        i41 = $i9 - $i8;

     label09:
        $r9 = staticinvoke <com.jidesoft.utils.PortingUtils: java.awt.Rectangle getScreenBounds(java.awt.Component)>(r0);

        $i42 = $r2.<java.awt.Dimension: int width>;

        $i43 = i40 + $i42;

        $i44 = $i43 + 3;

        $i45 = $r2.<java.awt.Dimension: int height>;

        $i46 = i41 + $i45;

        $i47 = $i46 + 3;

        $i48 = $r9.<java.awt.Rectangle: int x>;

        $i49 = $r9.<java.awt.Rectangle: int width>;

        $i50 = $i48 + $i49;

        if $i44 <= $i50 goto label10;

        $i15 = $r9.<java.awt.Rectangle: int x>;

        $i17 = $i44 - $i15;

        $i16 = $r9.<java.awt.Rectangle: int width>;

        $i18 = $i17 - $i16;

        i40 = i40 - $i18;

     label10:
        $i10 = $r9.<java.awt.Rectangle: int x>;

        if i40 >= $i10 goto label11;

        i40 = $r9.<java.awt.Rectangle: int x>;

     label11:
        $i11 = $r9.<java.awt.Rectangle: int height>;

        if $i47 <= $i11 goto label12;

        $i13 = $r9.<java.awt.Rectangle: int height>;

        $i14 = $i47 - $i13;

        i41 = i41 - $i14;

     label12:
        $i12 = $r9.<java.awt.Rectangle: int y>;

        if i41 >= $i12 goto label13;

        i41 = $r9.<java.awt.Rectangle: int y>;

     label13:
        $r6 = new java.awt.Point;

        specialinvoke $r6.<java.awt.Point: void <init>(int,int)>(i40, i41);

        return $r6;
    }

    protected javax.swing.JList createTabList(java.awt.Insets)
    {
        com.jidesoft.swing.JideTabbedPane r1;
        java.awt.Color $r10;
        java.awt.Rectangle $r8;
        java.awt.Insets r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        javax.swing.ListCellRenderer $r3;
        java.awt.Dimension $r6;
        javax.swing.DefaultListModel $r2;
        com.jidesoft.swing.JideTabbedPane$3 $r4;
        com.jidesoft.swing.JideTabbedPane$4 $r5;
        com.jidesoft.swing.Sticky $r9;
        com.jidesoft.swing.JideTabbedPane$2 $r0;

        r1 := @this: com.jidesoft.swing.JideTabbedPane;

        r7 := @parameter0: java.awt.Insets;

        $r0 = new com.jidesoft.swing.JideTabbedPane$2;

        specialinvoke $r0.<com.jidesoft.swing.JideTabbedPane$2: void <init>(com.jidesoft.swing.JideTabbedPane)>(r1);

        $r2 = new javax.swing.DefaultListModel;

        specialinvoke $r2.<javax.swing.DefaultListModel: void <init>()>();

        $i0 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: int getSelectedIndex()>();

        $i1 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: int getTabCount()>();

        i10 = 0;

     label1:
        if i10 >= $i1 goto label2;

        virtualinvoke $r2.<javax.swing.DefaultListModel: void addElement(java.lang.Object)>(r1);

        i10 = i10 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: javax.swing.ListCellRenderer getTabListCellRenderer()>();

        virtualinvoke $r0.<javax.swing.JList: void setCellRenderer(javax.swing.ListCellRenderer)>($r3);

        virtualinvoke $r0.<javax.swing.JList: void setModel(javax.swing.ListModel)>($r2);

        virtualinvoke $r0.<javax.swing.JList: void setSelectedIndex(int)>($i0);

        $r4 = new com.jidesoft.swing.JideTabbedPane$3;

        specialinvoke $r4.<com.jidesoft.swing.JideTabbedPane$3: void <init>(com.jidesoft.swing.JideTabbedPane,javax.swing.JList)>(r1, $r0);

        virtualinvoke $r0.<javax.swing.JList: void addKeyListener(java.awt.event.KeyListener)>($r4);

        $r5 = new com.jidesoft.swing.JideTabbedPane$4;

        specialinvoke $r5.<com.jidesoft.swing.JideTabbedPane$4: void <init>(com.jidesoft.swing.JideTabbedPane,javax.swing.JList)>(r1, $r0);

        virtualinvoke $r0.<javax.swing.JList: void addMouseListener(java.awt.event.MouseListener)>($r5);

        virtualinvoke $r0.<javax.swing.JList: void setSelectionMode(int)>(0);

        $r6 = staticinvoke <com.jidesoft.utils.PortingUtils: java.awt.Dimension getLocalScreenSize(java.awt.Component)>(r1);

        $i3 = $r6.<java.awt.Dimension: int height>;

        $i2 = r7.<java.awt.Insets: int top>;

        $i5 = $i3 - $i2;

        $i4 = r7.<java.awt.Insets: int bottom>;

        $i6 = $i5 - $i4;

        $r8 = virtualinvoke $r0.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>(0, 0);

        $i7 = $r8.<java.awt.Rectangle: int height>;

        i11 = $i6 / $i7;

        $i8 = virtualinvoke $r2.<javax.swing.DefaultListModel: int getSize()>();

        if $i8 <= i11 goto label3;

        virtualinvoke $r0.<javax.swing.JList: void setVisibleRowCount(int)>(i11);

        goto label4;

     label3:
        $i9 = virtualinvoke $r2.<javax.swing.DefaultListModel: int getSize()>();

        virtualinvoke $r0.<javax.swing.JList: void setVisibleRowCount(int)>($i9);

     label4:
        $r9 = new com.jidesoft.swing.Sticky;

        specialinvoke $r9.<com.jidesoft.swing.Sticky: void <init>(javax.swing.JList)>($r0);

        $r10 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideTabbedPane.tabListBackground");

        virtualinvoke $r0.<javax.swing.JList: void setBackground(java.awt.Color)>($r10);

        return $r0;
    }

    private void componentSelected(javax.swing.JList)
    {
        com.jidesoft.swing.JideTabbedPane r1;
        javax.swing.plaf.TabbedPaneUI $r4, $r15;
        com.jidesoft.plaf.basic.BasicJideTabbedPaneUI $r5;
        int $i0, $i1, $i3;
        java.awt.Container $r7, r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.awt.FocusTraversalPolicy $r3;
        javax.swing.JList r0;
        java.awt.Component $r2, $r8, $r12, r14;
        com.jidesoft.swing.JideTabbedPane$7 $r18;
        com.jidesoft.swing.JideTabbedPane$8 $r19;
        com.jidesoft.swing.JideTabbedPane$5 $r16;
        com.jidesoft.swing.JideTabbedPane$6 $r17;

        r1 := @this: com.jidesoft.swing.JideTabbedPane;

        r0 := @parameter0: javax.swing.JList;

        $i0 = virtualinvoke r0.<javax.swing.JList: int getSelectedIndex()>();

        $i3 = (int) -1;

        if $i0 == $i3 goto label11;

        $z0 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: boolean isEnabledAt(int)>($i0);

        if $z0 == 0 goto label11;

        $i1 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: int getSelectedIndex()>();

        if $i0 != $i1 goto label01;

        $z7 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean isAncestorOfFocusOwner(java.awt.Component)>(r1);

        if $z7 == 0 goto label01;

        $z8 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: boolean isAutoFocusOnTabHideClose()>();

        if $z8 == 0 goto label09;

        $z9 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: boolean isRequestFocusEnabled()>();

        if $z9 == 0 goto label09;

        $r16 = new com.jidesoft.swing.JideTabbedPane$5;

        specialinvoke $r16.<com.jidesoft.swing.JideTabbedPane$5: void <init>(com.jidesoft.swing.JideTabbedPane)>(r1);

        staticinvoke <javax.swing.SwingUtilities: void invokeLater(java.lang.Runnable)>($r16);

        goto label09;

     label01:
        virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: void setSelectedIndex(int)>($i0);

        $r2 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: java.awt.Component getComponentAt(int)>($i0);

        $z1 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: boolean isAutoFocusOnTabHideClose()>();

        if $z1 == 0 goto label02;

        $z4 = virtualinvoke $r2.<java.awt.Component: boolean isVisible()>();

        if $z4 != 0 goto label02;

        $z5 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk15Above()>();

        if $z5 == 0 goto label02;

        $z6 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk6Above()>();

        if $z6 != 0 goto label02;

        $r17 = new com.jidesoft.swing.JideTabbedPane$6;

        specialinvoke $r17.<com.jidesoft.swing.JideTabbedPane$6: void <init>(com.jidesoft.swing.JideTabbedPane,java.awt.Component)>(r1, $r2);

        virtualinvoke $r2.<java.awt.Component: void addComponentListener(java.awt.event.ComponentListener)>($r17);

        goto label09;

     label02:
        $r12 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: java.awt.Component getLastFocusedComponent(java.awt.Component)>($r2);

        if $r12 == null goto label03;

        $r18 = new com.jidesoft.swing.JideTabbedPane$7;

        specialinvoke $r18.<com.jidesoft.swing.JideTabbedPane$7: void <init>(com.jidesoft.swing.JideTabbedPane,java.awt.Component)>(r1, $r12);

        staticinvoke <javax.swing.SwingUtilities: void invokeLater(java.lang.Runnable)>($r18);

        goto label09;

     label03:
        $z2 = $r2 instanceof java.awt.Container;

        if $z2 == 0 goto label04;

        r13 = (java.awt.Container) $r2;

        goto label05;

     label04:
        r13 = virtualinvoke $r2.<java.awt.Component: java.awt.Container getFocusCycleRootAncestor()>();

     label05:
        $r3 = virtualinvoke r13.<java.awt.Container: java.awt.FocusTraversalPolicy getFocusTraversalPolicy()>();

        if $r3 == null goto label06;

        $r8 = virtualinvoke $r3.<java.awt.FocusTraversalPolicy: java.awt.Component getDefaultComponent(java.awt.Container)>(r13);

        r14 = $r8;

        if $r8 != null goto label08;

        r14 = virtualinvoke $r3.<java.awt.FocusTraversalPolicy: java.awt.Component getFirstComponent(java.awt.Container)>(r13);

        goto label08;

     label06:
        $z3 = $r2 instanceof java.awt.Container;

        if $z3 == 0 goto label07;

        $r7 = (java.awt.Container) $r2;

        r14 = specialinvoke r1.<com.jidesoft.swing.JideTabbedPane: java.awt.Component findFocusableComponent(java.awt.Container)>($r7);

        goto label08;

     label07:
        r14 = $r2;

     label08:
        if r14 == null goto label09;

        $r19 = new com.jidesoft.swing.JideTabbedPane$8;

        specialinvoke $r19.<com.jidesoft.swing.JideTabbedPane$8: void <init>(com.jidesoft.swing.JideTabbedPane,java.awt.Component)>(r1, r14);

        staticinvoke <javax.swing.SwingUtilities: void invokeLater(java.lang.Runnable)>($r19);

     label09:
        $r15 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $z10 = $r15 instanceof com.jidesoft.plaf.basic.BasicJideTabbedPaneUI;

        if $z10 == 0 goto label10;

        $r4 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: javax.swing.plaf.TabbedPaneUI getUI()>();

        $r5 = (com.jidesoft.plaf.basic.BasicJideTabbedPaneUI) $r4;

        virtualinvoke $r5.<com.jidesoft.plaf.basic.BasicJideTabbedPaneUI: void ensureActiveTabIsVisible(boolean)>(0);

     label10:
        virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: void hideTabListPopup()>();

     label11:
        return;
    }

    private java.awt.Component findFocusableComponent(java.awt.Container)
    {
        com.jidesoft.swing.JideTabbedPane r3;
        java.awt.FocusTraversalPolicy $r1;
        java.awt.Component $r2, $r5, $r6, r7;
        int $i0, i1;
        java.awt.Container r0, $r4;
        boolean $z0, $z1, $z2;

        r3 := @this: com.jidesoft.swing.JideTabbedPane;

        r0 := @parameter0: java.awt.Container;

        $r1 = virtualinvoke r0.<java.awt.Container: java.awt.FocusTraversalPolicy getFocusTraversalPolicy()>();

        r7 = null;

        if $r1 == null goto label1;

        $r6 = virtualinvoke $r1.<java.awt.FocusTraversalPolicy: java.awt.Component getDefaultComponent(java.awt.Container)>(r0);

        r7 = $r6;

        if $r6 != null goto label1;

        r7 = virtualinvoke $r1.<java.awt.FocusTraversalPolicy: java.awt.Component getFirstComponent(java.awt.Container)>(r0);

     label1:
        if r7 == null goto label2;

        return r7;

     label2:
        i1 = 0;

     label3:
        $i0 = virtualinvoke r0.<java.awt.Container: int getComponentCount()>();

        if i1 >= $i0 goto label6;

        $r2 = virtualinvoke r0.<java.awt.Container: java.awt.Component getComponent(int)>(i1);

        $z1 = $r2 instanceof java.awt.Container;

        if $z1 == 0 goto label4;

        $r4 = (java.awt.Container) $r2;

        $r5 = specialinvoke r3.<com.jidesoft.swing.JideTabbedPane: java.awt.Component findFocusableComponent(java.awt.Container)>($r4);

        if $r5 == null goto label5;

        return $r5;

     label4:
        $z2 = virtualinvoke $r2.<java.awt.Component: boolean isFocusable()>();

        if $z2 == 0 goto label5;

        return $r2;

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        $z0 = virtualinvoke r0.<java.awt.Container: boolean isFocusable()>();

        if $z0 == 0 goto label7;

        return r0;

     label7:
        return null;
    }

    public com.jidesoft.swing.JideTabbedPane$NoFocusButton createNoFocusButton(int)
    {
        com.jidesoft.swing.JideTabbedPane r1;
        int i0;
        com.jidesoft.swing.JideTabbedPane$NoFocusButton $r0;

        r1 := @this: com.jidesoft.swing.JideTabbedPane;

        i0 := @parameter0: int;

        $r0 = new com.jidesoft.swing.JideTabbedPane$NoFocusButton;

        specialinvoke $r0.<com.jidesoft.swing.JideTabbedPane$NoFocusButton: void <init>(com.jidesoft.swing.JideTabbedPane,int)>(r1, i0);

        return $r0;
    }

    static boolean access$000(com.jidesoft.swing.JideTabbedPane)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        boolean $z0;

        r0 := @parameter0: com.jidesoft.swing.JideTabbedPane;

        $z0 = r0.<com.jidesoft.swing.JideTabbedPane: boolean _suppressStateChangedEvents>;

        return $z0;
    }

    static java.awt.Color[] access$300()
    {
        java.awt.Color[] $r0;

        $r0 = <com.jidesoft.swing.JideTabbedPane: java.awt.Color[] ONENOTE_COLORS>;

        return $r0;
    }

    static void access$400(com.jidesoft.swing.JideTabbedPane, javax.swing.JList)
    {
        com.jidesoft.swing.JideTabbedPane r0;
        javax.swing.JList r1;

        r0 := @parameter0: com.jidesoft.swing.JideTabbedPane;

        r1 := @parameter1: javax.swing.JList;

        specialinvoke r0.<com.jidesoft.swing.JideTabbedPane: void componentSelected(javax.swing.JList)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.awt.Color $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.util.logging.Logger $r2;
        com.jidesoft.swing.JideTabbedPane$OneNoteColorProvider $r11;
        java.lang.Class $r0;
        java.lang.String $r1;
        java.awt.Color[] $r3;

        <com.jidesoft.swing.JideTabbedPane: int SHAPE_WINDOWS_SELECTED> = 11;

        <com.jidesoft.swing.JideTabbedPane: int SHAPE_ROUNDED_FLAT> = 10;

        <com.jidesoft.swing.JideTabbedPane: int SHAPE_ROUNDED_VSNET> = 9;

        <com.jidesoft.swing.JideTabbedPane: int SHAPE_EXCEL> = 8;

        <com.jidesoft.swing.JideTabbedPane: int SHAPE_ECLIPSE3X> = 7;

        <com.jidesoft.swing.JideTabbedPane: int SHAPE_ECLIPSE> = 6;

        <com.jidesoft.swing.JideTabbedPane: int SHAPE_FLAT> = 5;

        <com.jidesoft.swing.JideTabbedPane: int SHAPE_OFFICE2003> = 4;

        <com.jidesoft.swing.JideTabbedPane: int SHAPE_BOX> = 3;

        <com.jidesoft.swing.JideTabbedPane: int SHAPE_VSNET> = 2;

        <com.jidesoft.swing.JideTabbedPane: int SHAPE_WINDOWS> = 1;

        <com.jidesoft.swing.JideTabbedPane: int SHAPE_DEFAULT> = 0;

        <com.jidesoft.swing.JideTabbedPane: int COLOR_THEME_WINXP> = 4;

        <com.jidesoft.swing.JideTabbedPane: int COLOR_THEME_VSNET> = 3;

        <com.jidesoft.swing.JideTabbedPane: int COLOR_THEME_OFFICE2003> = 2;

        <com.jidesoft.swing.JideTabbedPane: int COLOR_THEME_WIN2K> = 1;

        <com.jidesoft.swing.JideTabbedPane: int COLOR_THEME_DEFAULT> = 0;

        <com.jidesoft.swing.JideTabbedPane: int RESIZE_MODE_COMPRESSED> = 4;

        <com.jidesoft.swing.JideTabbedPane: int RESIZE_MODE_FIXED> = 3;

        <com.jidesoft.swing.JideTabbedPane: int RESIZE_MODE_FIT> = 2;

        <com.jidesoft.swing.JideTabbedPane: int RESIZE_MODE_NONE> = 1;

        <com.jidesoft.swing.JideTabbedPane: int RESIZE_MODE_DEFAULT> = 0;

        <com.jidesoft.swing.JideTabbedPane: java.lang.String uiClassID> = "JideTabbedPaneUI";

        <com.jidesoft.swing.JideTabbedPane: int BUTTON_LIST> = 5;

        <com.jidesoft.swing.JideTabbedPane: int BUTTON_SOUTH> = 4;

        <com.jidesoft.swing.JideTabbedPane: int BUTTON_NORTH> = 3;

        <com.jidesoft.swing.JideTabbedPane: int BUTTON_WEST> = 2;

        <com.jidesoft.swing.JideTabbedPane: int BUTTON_EAST> = 1;

        <com.jidesoft.swing.JideTabbedPane: int BUTTON_CLOSE> = 0;

        <com.jidesoft.swing.JideTabbedPane: java.lang.String PROPERTY_SHOW_CLOSE_BUTTON_ON_MOUSE_OVER> = "showCloseButtonOnMouseOver";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String PROPERTY_SELECTED_INDEX> = "selectedIndex";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String SCROLL_TAB_ON_WHEEL_PROPERTY> = "scrollTabOnWheel";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String PROPERTY_DRAG_OVER_DISABLED> = "dragOverDisabled";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String PROPERTY_TAB_INSETS> = "tabInsets";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String PROPERTY_TAB_AREA_INSETS> = "tabAreaInsets";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String PROPERTY_CONTENT_BORDER_INSETS> = "contentBorderInsets";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String PROPERTY_TAB_COLOR_PROVIDER> = "tabColorProvider";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String PROPERTY_TAB_TRAILING_COMPONENT> = "tabTrailingComponent";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String PROPERTY_TAB_LEADING_COMPONENT> = "tabLeadingComponent";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String PROPERTY_TAB_RESIZE_MODE> = "tabResizeMode";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String PROPERTY_COLOR_THEME> = "colorTheme";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String PROPERTY_TAB_SHAPE> = "tabShape";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String GRIPPER_PROPERTY> = "gripper";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String BOLDACTIVETAB_PROPERTY> = "boldActiveTab";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String USE_DEFAULT_SHOW_CLOSE_BUTTON_ON_TAB_PROPERTY> = "useDefaultShowCloseButtonOnTab";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String TAB_CLOSABLE_PROPERTY> = "tabClosable";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String SHOW_TAB_CONTENT_PROPERTY> = "showTabContent";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String SHOW_TAB_AREA_PROPERTY> = "showTabArea";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String SHOW_CLOSE_BUTTON_PROPERTY> = "showCloseButton";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String SHOW_CLOSE_BUTTON_ON_TAB_PROPERTY> = "showCloseButtonOnTab";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String USE_DEFAULT_SHOW_ICONS_PROPERTY> = "useDefaultShowIconsOnTab";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String SHOW_ICONS_PROPERTY> = "showIconsOnTab";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String BOX_STYLE_PROPERTY> = "boxStyle";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String SHOW_TAB_BUTTONS_PROPERTY> = "showTabButtons";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String HIDE_IF_ONE_TAB_PROPERTY> = "hideIfOneTab";

        <com.jidesoft.swing.JideTabbedPane: java.lang.String SHRINK_TAB_PROPERTY> = "shrinkTab";

        $r0 = class "Lcom/jidesoft/swing/TabEditingEvent;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.jidesoft.swing.JideTabbedPane: java.util.logging.Logger LOGGER_EVENT> = $r2;

        $r3 = newarray (java.awt.Color)[7];

        $r4 = new java.awt.Color;

        specialinvoke $r4.<java.awt.Color: void <init>(int,int,int)>(138, 168, 228);

        $r3[0] = $r4;

        $r5 = new java.awt.Color;

        specialinvoke $r5.<java.awt.Color: void <init>(int,int,int)>(238, 149, 151);

        $r3[1] = $r5;

        $r6 = new java.awt.Color;

        specialinvoke $r6.<java.awt.Color: void <init>(int,int,int)>(180, 158, 222);

        $r3[2] = $r6;

        $r7 = new java.awt.Color;

        specialinvoke $r7.<java.awt.Color: void <init>(int,int,int)>(145, 186, 174);

        $r3[3] = $r7;

        $r8 = new java.awt.Color;

        specialinvoke $r8.<java.awt.Color: void <init>(int,int,int)>(246, 176, 120);

        $r3[4] = $r8;

        $r9 = new java.awt.Color;

        specialinvoke $r9.<java.awt.Color: void <init>(int,int,int)>(255, 216, 105);

        $r3[5] = $r9;

        $r10 = new java.awt.Color;

        specialinvoke $r10.<java.awt.Color: void <init>(int,int,int)>(183, 201, 151);

        $r3[6] = $r10;

        <com.jidesoft.swing.JideTabbedPane: java.awt.Color[] ONENOTE_COLORS> = $r3;

        $r11 = new com.jidesoft.swing.JideTabbedPane$OneNoteColorProvider;

        specialinvoke $r11.<com.jidesoft.swing.JideTabbedPane$OneNoteColorProvider: void <init>(com.jidesoft.swing.JideTabbedPane$1)>(null);

        <com.jidesoft.swing.JideTabbedPane: com.jidesoft.swing.JideTabbedPane$ColorProvider ONENOTE_COLOR_PROVIDER> = $r11;

        return;
    }
}
