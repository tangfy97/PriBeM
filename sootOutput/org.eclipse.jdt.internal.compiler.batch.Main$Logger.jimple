public class org.eclipse.jdt.internal.compiler.batch.Main$Logger extends java.lang.Object
{
    private java.io.PrintWriter err;
    private java.io.PrintWriter log;
    private org.eclipse.jdt.internal.compiler.batch.Main main;
    private java.io.PrintWriter out;
    private java.util.HashMap parameters;
    int tagBits;
    private static final java.lang.String CLASS;
    private static final java.lang.String CLASS_FILE;
    private static final java.lang.String CLASSPATH;
    private static final java.lang.String CLASSPATH_FILE;
    private static final java.lang.String CLASSPATH_FOLDER;
    private static final java.lang.String CLASSPATH_ID;
    private static final java.lang.String CLASSPATH_JAR;
    private static final java.lang.String CLASSPATHS;
    private static final java.lang.String COMMAND_LINE_ARGUMENT;
    private static final java.lang.String COMMAND_LINE_ARGUMENTS;
    private static final java.lang.String COMPILER;
    private static final java.lang.String COMPILER_COPYRIGHT;
    private static final java.lang.String COMPILER_NAME;
    private static final java.lang.String COMPILER_VERSION;
    public static final int EMACS;
    private static final java.lang.String ERROR;
    private static final java.lang.String ERROR_TAG;
    private static final java.lang.String EXCEPTION;
    private static final java.lang.String EXTRA_PROBLEM_TAG;
    private static final java.lang.String EXTRA_PROBLEMS;
    private static final org.eclipse.jdt.internal.compiler.util.HashtableOfInt FIELD_TABLE;
    private static final java.lang.String KEY;
    private static final java.lang.String MESSAGE;
    private static final java.lang.String NUMBER_OF_CLASSFILES;
    private static final java.lang.String NUMBER_OF_ERRORS;
    private static final java.lang.String NUMBER_OF_LINES;
    private static final java.lang.String NUMBER_OF_PROBLEMS;
    private static final java.lang.String NUMBER_OF_TASKS;
    private static final java.lang.String NUMBER_OF_WARNINGS;
    private static final java.lang.String OPTION;
    private static final java.lang.String OPTIONS;
    private static final java.lang.String OUTPUT;
    private static final java.lang.String PACKAGE;
    private static final java.lang.String PATH;
    private static final java.lang.String PROBLEM_ARGUMENT;
    private static final java.lang.String PROBLEM_ARGUMENT_VALUE;
    private static final java.lang.String PROBLEM_ARGUMENTS;
    private static final java.lang.String PROBLEM_CATEGORY_ID;
    private static final java.lang.String ID;
    private static final java.lang.String PROBLEM_ID;
    private static final java.lang.String PROBLEM_LINE;
    private static final java.lang.String PROBLEM_OPTION_KEY;
    private static final java.lang.String PROBLEM_MESSAGE;
    private static final java.lang.String PROBLEM_SEVERITY;
    private static final java.lang.String PROBLEM_SOURCE_END;
    private static final java.lang.String PROBLEM_SOURCE_START;
    private static final java.lang.String PROBLEM_SUMMARY;
    private static final java.lang.String PROBLEM_TAG;
    private static final java.lang.String PROBLEMS;
    private static final java.lang.String SOURCE;
    private static final java.lang.String SOURCE_CONTEXT;
    private static final java.lang.String SOURCE_END;
    private static final java.lang.String SOURCE_START;
    private static final java.lang.String SOURCES;
    private static final java.lang.String STATS;
    private static final java.lang.String TASK;
    private static final java.lang.String TASKS;
    private static final java.lang.String TIME;
    private static final java.lang.String VALUE;
    private static final java.lang.String WARNING;
    public static final int XML;
    private static final java.lang.String XML_DTD_DECLARATION;

    static void <clinit>()
    {
        java.lang.Integer r6;
        int $i0, $i1, $i2, i3;
        java.lang.SecurityException $r11;
        java.lang.String $r8, $r14;
        java.lang.NoClassDefFoundError $r13;
        boolean $z0;
        java.lang.IllegalAccessException $r9;
        org.eclipse.jdt.internal.compiler.util.HashtableOfInt $r0, $r7;
        java.lang.reflect.Field r2;
        java.lang.IllegalArgumentException $r10;
        java.lang.reflect.Field[] $r1;
        java.lang.Class $r3, $r4, $r15;
        java.lang.Object $r5;
        java.lang.ClassNotFoundException $r12;

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String XML_DTD_DECLARATION> = "<!DOCTYPE compiler PUBLIC \"-//Eclipse.org//DTD Eclipse JDT 3.2.003 Compiler//EN\" \"http://www.eclipse.org/jdt/core/compiler_32_003.dtd\">";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: int XML> = 1;

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String WARNING> = "WARNING";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String VALUE> = "value";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String TIME> = "time";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String TASKS> = "tasks";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String TASK> = "task";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String STATS> = "stats";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String SOURCES> = "sources";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String SOURCE_START> = "sourceStart";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String SOURCE_END> = "sourceEnd";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String SOURCE_CONTEXT> = "source_context";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String SOURCE> = "source";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PROBLEMS> = "problems";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PROBLEM_TAG> = "problem";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PROBLEM_SUMMARY> = "problem_summary";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PROBLEM_SOURCE_START> = "charStart";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PROBLEM_SOURCE_END> = "charEnd";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PROBLEM_SEVERITY> = "severity";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PROBLEM_MESSAGE> = "message";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PROBLEM_OPTION_KEY> = "optionKey";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PROBLEM_LINE> = "line";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PROBLEM_ID> = "problemID";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String ID> = "id";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PROBLEM_CATEGORY_ID> = "categoryID";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PROBLEM_ARGUMENTS> = "arguments";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PROBLEM_ARGUMENT_VALUE> = "value";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PROBLEM_ARGUMENT> = "argument";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PATH> = "path";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String PACKAGE> = "package";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String OUTPUT> = "output";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String OPTIONS> = "options";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String OPTION> = "option";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String NUMBER_OF_WARNINGS> = "warnings";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String NUMBER_OF_TASKS> = "tasks";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String NUMBER_OF_PROBLEMS> = "problems";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String NUMBER_OF_LINES> = "number_of_lines";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String NUMBER_OF_ERRORS> = "errors";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String NUMBER_OF_CLASSFILES> = "number_of_classfiles";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String MESSAGE> = "message";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String KEY> = "key";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String EXTRA_PROBLEMS> = "extra_problems";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String EXTRA_PROBLEM_TAG> = "extra_problem";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String EXCEPTION> = "exception";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String ERROR_TAG> = "error";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String ERROR> = "ERROR";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: int EMACS> = 2;

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String COMPILER_VERSION> = "version";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String COMPILER_NAME> = "name";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String COMPILER_COPYRIGHT> = "copyright";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String COMPILER> = "compiler";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String COMMAND_LINE_ARGUMENTS> = "command_line";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String COMMAND_LINE_ARGUMENT> = "argument";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String CLASSPATHS> = "classpaths";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String CLASSPATH_JAR> = "JAR";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String CLASSPATH_ID> = "id";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String CLASSPATH_FOLDER> = "FOLDER";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String CLASSPATH_FILE> = "FILE";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String CLASSPATH> = "classpath";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String CLASS_FILE> = "classfile";

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String CLASS> = "class";

        $r0 = new org.eclipse.jdt.internal.compiler.util.HashtableOfInt;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.util.HashtableOfInt: void <init>()>();

        <org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.util.HashtableOfInt FIELD_TABLE> = $r0;

     label01:
        $r15 = <org.eclipse.jdt.internal.compiler.batch.Main: java.lang.Class class$0>;

        if $r15 != null goto label05;

     label02:
        $r15 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.eclipse.jdt.core.compiler.IProblem");

     label03:
        <org.eclipse.jdt.internal.compiler.batch.Main: java.lang.Class class$0> = $r15;

        goto label05;

     label04:
        $r12 := @caughtexception;

        $r13 = new java.lang.NoClassDefFoundError;

        $r14 = virtualinvoke $r12.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r13.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r14);

        throw $r13;

     label05:
        $r1 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i3 = 0;

        $i2 = lengthof $r1;

        goto label08;

     label06:
        r2 = $r1[i3];

        $r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label07;

        $r5 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        r6 = (java.lang.Integer) $r5;

        $r7 = <org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.util.HashtableOfInt FIELD_TABLE>;

        $i0 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        $i1 = $i0 & 16777215;

        $r8 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.util.HashtableOfInt: java.lang.Object put(int,java.lang.Object)>($i1, $r8);

     label07:
        i3 = i3 + 1;

     label08:
        if i3 < $i2 goto label06;

     label09:
        goto label13;

     label10:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.SecurityException: void printStackTrace()>();

        goto label13;

     label11:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.IllegalArgumentException: void printStackTrace()>();

        goto label13;

     label12:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.IllegalAccessException: void printStackTrace()>();

     label13:
        return;

        catch java.lang.ClassNotFoundException from label02 to label03 with label04;
        catch java.lang.SecurityException from label01 to label09 with label10;
        catch java.lang.IllegalArgumentException from label01 to label09 with label11;
        catch java.lang.IllegalAccessException from label01 to label09 with label12;
    }

    public void <init>(org.eclipse.jdt.internal.compiler.batch.Main, java.io.PrintWriter, java.io.PrintWriter)
    {
        java.io.PrintWriter r1, r2;
        java.util.HashMap $r3;
        org.eclipse.jdt.internal.compiler.batch.Main r4;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r4 := @parameter0: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.io.PrintWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter out> = r1;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter err> = r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters> = $r3;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main> = r4;

        return;
    }

    public java.lang.String buildFileName(java.lang.String, java.lang.String)
    {
        char c0;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r8;
        java.lang.StringBuffer $r2, $r5, $r6;
        java.util.StringTokenizer $r3;
        java.lang.String r0, $r1, r4, $r7, r9, r10;
        boolean $z0, $z1;

        r8 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r9 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        c0 = <java.io.File: char separatorChar>;

        r0 = <java.io.File: java.lang.String separator>;

        $r1 = virtualinvoke r9.<java.lang.String: java.lang.String replace(char,char)>(47, c0);

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>($r1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

     label1:
        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r4, r0);

        r10 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        goto label3;

     label2:
        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r10);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        r10 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label3:
        $z1 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 != 0 goto label2;

        $r6 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r10);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public void close()
    {
        java.io.PrintWriter $r1, $r2;
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        if $r1 == null goto label2;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endTag(java.lang.String)>("compiler");

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void flush()>();

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        virtualinvoke $r2.<java.io.PrintWriter: void close()>();

     label2:
        return;
    }

    public void compiling()
    {
        org.eclipse.jdt.internal.compiler.batch.Main $r1;
        java.lang.String $r2;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r2 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("progress.compiling");

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnOut(java.lang.String)>($r2);

        return;
    }

    private void endLoggingExtraProblems()
    {
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endTag(java.lang.String)>("extra_problems");

        return;
    }

    private void endLoggingProblems()
    {
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endTag(java.lang.String)>("problems");

        return;
    }

    public void endLoggingSource()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endTag(java.lang.String)>("source");

     label1:
        return;
    }

    public void endLoggingSources()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endTag(java.lang.String)>("sources");

     label1:
        return;
    }

    public void endLoggingTasks()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endTag(java.lang.String)>("tasks");

     label1:
        return;
    }

    private void endTag(java.lang.String)
    {
        java.io.PrintWriter $r1, $r2;
        org.eclipse.jdt.internal.compiler.util.GenericXMLWriter $r4;
        java.lang.String r3;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        if $r1 == null goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        $r4 = (org.eclipse.jdt.internal.compiler.util.GenericXMLWriter) $r2;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.util.GenericXMLWriter: void endTag(java.lang.String,boolean,boolean)>(r3, 1, 1);

     label1:
        return;
    }

    private java.lang.String errorReportSource(org.eclipse.jdt.core.compiler.CategorizedProblem, char[], int)
    {
        org.eclipse.jdt.core.compiler.CategorizedProblem r0;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r15;
        java.lang.StringBuffer $r3, $r5, $r20;
        int $i0, $i1, i2, i3, $i4, $i5, $i7, $i8, $i10, $i11, $i13, $i14, $i15, $i16, i17, $i18, i19, i21, i23, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i32, $i33;
        java.lang.String $r2, $r4, $r6, $r7, $r8, $r9, $r17, $r18;
        char $c6, $c9, $c12, $c20, $c22;
        java.io.IOException $r14;
        java.io.File $r19;
        char[] $r10, $r13, r16;

        r15 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r0 := @parameter0: org.eclipse.jdt.core.compiler.CategorizedProblem;

        r16 := @parameter1: char[];

        i3 := @parameter2: int;

        $i0 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceStart()>();

        $i1 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceEnd()>();

        if r16 != null goto label04;

        $r10 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: char[] getOriginatingFileName()>();

        if $r10 == null goto label04;

     label01:
        $r19 = new java.io.File;

        $r18 = new java.lang.String;

        $r13 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: char[] getOriginatingFileName()>();

        specialinvoke $r18.<java.lang.String: void <init>(char[])>($r13);

        specialinvoke $r19.<java.io.File: void <init>(java.lang.String)>($r18);

        r16 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: char[] getFileCharContent(java.io.File,java.lang.String)>($r19, null);

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

     label04:
        if r16 != null goto label05;

        $i15 = 0;

        goto label06;

     label05:
        $i15 = lengthof r16;

     label06:
        i2 = $i15;

        if $i0 > $i1 goto label08;

        if $i0 >= 0 goto label07;

        if $i1 < 0 goto label08;

     label07:
        if i2 != 0 goto label09;

     label08:
        $r17 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String problem_noSourceInformation>;

        return $r17;

     label09:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $i4 = i3 & 2;

        if $i4 != 0 goto label10;

        $r5 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r6 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String problem_atLine>;

        $i14 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceLineNumber()>();

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i14);

        $r8 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String bind(java.lang.String,java.lang.Object)>($r6, $r7);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r9 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String LINE_SEPARATOR>;

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

     label10:
        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(9);

        if $i0 < i2 goto label11;

        $i16 = i2 - 1;

        goto label12;

     label11:
        $i16 = $i0;

     label12:
        i17 = $i16;

        goto label15;

     label13:
        $i5 = i17 - 1;

        $c6 = r16[$i5];

        $i25 = (int) $c6;

        if $i25 == 10 goto label16;

        $i26 = (int) $c6;

        if $i26 != 13 goto label14;

        goto label16;

     label14:
        $i28 = (int) -1;

        i17 = i17 + $i28;

     label15:
        if i17 > 0 goto label13;

     label16:
        if $i1 < i2 goto label17;

        $i18 = i2 - 1;

        goto label18;

     label17:
        $i18 = $i1;

     label18:
        i19 = $i18;

        goto label21;

     label19:
        $i8 = i19 + 1;

        $c9 = r16[$i8];

        $i29 = (int) $c9;

        if $i29 == 13 goto label23;

        $i30 = (int) $c9;

        if $i30 != 10 goto label20;

        goto label23;

     label20:
        i19 = i19 + 1;

     label21:
        $i7 = i19 + 1;

        if $i7 < i2 goto label19;

        goto label23;

     label22:
        i17 = i17 + 1;

     label23:
        $c20 = r16[i17];

        $i31 = (int) $c20;

        if $i31 == 32 goto label22;

        $i32 = (int) $c20;

        if $i32 == 9 goto label22;

        $i10 = i19 - i17;

        $i11 = $i10 + 1;

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r16, i17, $i11);

        $r2 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String LINE_SEPARATOR>;

        $r3 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t");

        i21 = i17;

        goto label27;

     label24:
        $c12 = r16[i21];

        $i33 = (int) $c12;

        if $i33 != 9 goto label25;

        $c22 = 9;

        goto label26;

     label25:
        $c22 = 32;

     label26:
        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c22);

        i21 = i21 + 1;

     label27:
        if i21 < $i0 goto label24;

        i23 = $i0;

        goto label29;

     label28:
        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(94);

        i23 = i23 + 1;

     label29:
        $i13 = i23;

        if $i1 < i2 goto label30;

        $i24 = i2 - 1;

        goto label31;

     label30:
        $i24 = $i1;

     label31:
        if $i13 <= $i24 goto label28;

        $r4 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

        catch java.io.IOException from label01 to label02 with label03;
    }

    private void extractContext(org.eclipse.jdt.core.compiler.CategorizedProblem, char[])
    {
        org.eclipse.jdt.core.compiler.CategorizedProblem r0;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r1;
        java.util.HashMap $r3, $r5, $r7, $r9, $r16, $r18, $r19, $r20;
        java.lang.StringBuffer $r23;
        int $i0, $i1, i2, $i3, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15, i16, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30;
        java.lang.String $r4, $r6, $r8, $r17, $r21;
        char $c4, $c7, $c17, $c18;
        java.io.IOException $r14;
        java.io.File $r22;
        char[] $r10, $r13, r15;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r0 := @parameter0: org.eclipse.jdt.core.compiler.CategorizedProblem;

        r15 := @parameter1: char[];

        $i0 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceStart()>();

        $i1 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceEnd()>();

        if r15 != null goto label04;

        $r10 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: char[] getOriginatingFileName()>();

        if $r10 == null goto label04;

     label01:
        $r22 = new java.io.File;

        $r21 = new java.lang.String;

        $r13 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: char[] getOriginatingFileName()>();

        specialinvoke $r21.<java.lang.String: void <init>(char[])>($r13);

        specialinvoke $r22.<java.io.File: void <init>(java.lang.String)>($r21);

        r15 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: char[] getFileCharContent(java.io.File,java.lang.String)>($r22, null);

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

     label04:
        if r15 != null goto label05;

        $i12 = 0;

        goto label06;

     label05:
        $i12 = lengthof r15;

     label06:
        i2 = $i12;

        if $i0 > $i1 goto label08;

        if $i0 >= 0 goto label07;

        if $i1 < 0 goto label08;

     label07:
        if i2 <= 0 goto label08;

        if $i1 <= i2 goto label09;

     label08:
        $r16 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r17 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String problem_noSourceInformation>;

        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r17);

        $r18 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        virtualinvoke $r18.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("sourceStart", "-1");

        $r19 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("sourceEnd", "-1");

        $r20 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("source_context", $r20, 1, 1);

        return;

     label09:
        if $i0 < i2 goto label10;

        $i13 = i2 - 1;

        goto label11;

     label10:
        $i13 = $i0;

     label11:
        i14 = $i13;

        goto label14;

     label12:
        $i3 = i14 - 1;

        $c4 = r15[$i3];

        $i19 = (int) $c4;

        if $i19 == 10 goto label15;

        $i20 = (int) $c4;

        if $i20 != 13 goto label13;

        goto label15;

     label13:
        $i22 = (int) -1;

        i14 = i14 + $i22;

     label14:
        if i14 > 0 goto label12;

     label15:
        if $i1 < i2 goto label16;

        $i15 = i2 - 1;

        goto label17;

     label16:
        $i15 = $i1;

     label17:
        i16 = $i15;

        goto label20;

     label18:
        $i6 = i16 + 1;

        $c7 = r15[$i6];

        $i23 = (int) $c7;

        if $i23 == 13 goto label22;

        $i24 = (int) $c7;

        if $i24 != 10 goto label19;

        goto label22;

     label19:
        i16 = i16 + 1;

     label20:
        $i5 = i16 + 1;

        if $i5 < i2 goto label18;

        goto label22;

     label21:
        i14 = i14 + 1;

     label22:
        $c17 = r15[i14];

        $i25 = (int) $c17;

        if $i25 == 32 goto label21;

        $i26 = (int) $c17;

        if $i26 == 9 goto label21;

        goto label24;

     label23:
        $i28 = (int) -1;

        i16 = i16 + $i28;

     label24:
        $c18 = r15[i16];

        $i29 = (int) $c18;

        if $i29 == 32 goto label23;

        $i30 = (int) $c18;

        if $i30 == 9 goto label23;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $i8 = i16 - i14;

        $i9 = $i8 + 1;

        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r15, i14, $i9);

        $r3 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r4);

        $r5 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $i10 = $i0 - i14;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i10);

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("sourceStart", $r6);

        $r7 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $i11 = $i1 - i14;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i11);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("sourceEnd", $r8);

        $r9 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("source_context", $r9, 1, 1);

        return;

        catch java.io.IOException from label01 to label02 with label03;
    }

    public void flush()
    {
        java.io.PrintWriter $r1, $r2, $r3, $r4;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter out>;

        virtualinvoke $r1.<java.io.PrintWriter: void flush()>();

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter err>;

        virtualinvoke $r2.<java.io.PrintWriter: void flush()>();

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        if $r3 == null goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        virtualinvoke $r4.<java.io.PrintWriter: void flush()>();

     label1:
        return;
    }

    private java.lang.String getFieldName(int)
    {
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.util.HashtableOfInt $r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r3;

        r3 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        i0 := @parameter0: int;

        $r0 = <org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.util.HashtableOfInt FIELD_TABLE>;

        $i1 = i0 & 16777215;

        $r1 = virtualinvoke $r0.<org.eclipse.jdt.internal.compiler.util.HashtableOfInt: java.lang.Object get(int)>($i1);

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    private java.lang.String getProblemOptionKey(int)
    {
        int i0;
        long $l1;
        java.lang.String $r0;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        i0 := @parameter0: int;

        $l1 = staticinvoke <org.eclipse.jdt.internal.compiler.problem.ProblemReporter: long getIrritant(int)>(i0);

        $r0 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String optionKeyFromIrritant(long)>($l1);

        return $r0;
    }

    public void logAverage()
    {
        long l0, $l3, $l4, $l5, $l6, $l7, $l9, $l11, $l13, l14, $l16, l17, $l19, l20, l28, l29, l30, l31, l32, l34, l35;
        java.lang.String $r11, $r12, $r13, $r14, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        org.eclipse.jdt.internal.compiler.impl.CompilerStats $r5, r27;
        org.eclipse.jdt.internal.compiler.batch.Main $r1, $r3, $r6, $r7, $r10, $r15, $r17;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;
        java.lang.String[] $r9, $r16;
        org.eclipse.jdt.internal.compiler.impl.CompilerStats[] $r2, $r4, $r8;
        int i1, i2, $i8, $i10, $i12, $i15, $i18, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i33;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r2 = $r1.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerStats[] compilerStats>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>($r2);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r4 = $r3.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerStats[] compilerStats>;

        $r5 = $r4[0];

        l0 = $r5.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long lineCount>;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        i1 = $r6.<org.eclipse.jdt.internal.compiler.batch.Main: int maxRepetition>;

        l28 = 0L;

        l29 = 0L;

        l30 = 0L;

        l31 = 0L;

        l32 = 0L;

        i33 = 1;

        i2 = i1 - 1;

        goto label2;

     label1:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r8 = $r7.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerStats[] compilerStats>;

        r27 = $r8[i33];

        $l3 = virtualinvoke r27.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long elapsedTime()>();

        l28 = l28 + $l3;

        $l4 = r27.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long parseTime>;

        l29 = l29 + $l4;

        $l5 = r27.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long resolveTime>;

        l30 = l30 + $l5;

        $l6 = r27.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long analyzeTime>;

        l31 = l31 + $l6;

        $l7 = r27.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long generateTime>;

        l32 = l32 + $l7;

        i33 = i33 + 1;

     label2:
        if i33 < i2 goto label1;

        $i8 = i1 - 2;

        $l9 = (long) $i8;

        l34 = l28 / $l9;

        $i10 = i1 - 2;

        $l11 = (long) $i10;

        l35 = l29 / $l11;

        $i12 = i1 - 2;

        $l13 = (long) $i12;

        l14 = l30 / $l13;

        $i15 = i1 - 2;

        $l16 = (long) $i15;

        l17 = l31 / $l16;

        $i18 = i1 - 2;

        $l19 = (long) $i18;

        l20 = l32 / $l19;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r9 = newarray (java.lang.String)[3];

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r9[0] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l34);

        $r9[1] = $r12;

        $d0 = (double) l0;

        $d2 = $d0 * 10000.0;

        $d1 = (double) l34;

        $d3 = $d2 / $d1;

        $i21 = (int) $d3;

        $d4 = (double) $i21;

        $d5 = $d4 / 10.0;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d5);

        $r9[2] = $r13;

        $r14 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String[])>("compile.averageTime", $r9);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnOut(java.lang.String)>($r14);

        $r15 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $i22 = $r15.<org.eclipse.jdt.internal.compiler.batch.Main: int timing>;

        $i23 = $i22 & 2;

        if $i23 == 0 goto label3;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r16 = newarray (java.lang.String)[8];

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l35);

        $r16[0] = $r18;

        $d6 = (double) l35;

        $d8 = $d6 * 1000.0;

        $d7 = (double) l34;

        $d9 = $d8 / $d7;

        $i24 = (int) $d9;

        $d10 = (double) $i24;

        $d11 = $d10 / 10.0;

        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d11);

        $r16[1] = $r19;

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l14);

        $r16[2] = $r20;

        $d12 = (double) l14;

        $d14 = $d12 * 1000.0;

        $d13 = (double) l34;

        $d15 = $d14 / $d13;

        $i25 = (int) $d15;

        $d16 = (double) $i25;

        $d17 = $d16 / 10.0;

        $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d17);

        $r16[3] = $r21;

        $r22 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l17);

        $r16[4] = $r22;

        $d18 = (double) l17;

        $d20 = $d18 * 1000.0;

        $d19 = (double) l34;

        $d21 = $d20 / $d19;

        $i26 = (int) $d21;

        $d22 = (double) $i26;

        $d23 = $d22 / 10.0;

        $r23 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d23);

        $r16[5] = $r23;

        $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l20);

        $r16[6] = $r24;

        $d24 = (double) l20;

        $d26 = $d24 * 1000.0;

        $d25 = (double) l34;

        $d27 = $d26 / $d25;

        $i27 = (int) $d27;

        $d28 = (double) $i27;

        $d29 = $d28 / 10.0;

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d29);

        $r16[7] = $r25;

        $r26 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String[])>("compile.detailedTime", $r16);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnOut(java.lang.String)>($r26);

     label3:
        return;
    }

    public void logClassFile(boolean, java.lang.String, java.lang.String)
    {
        boolean z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;
        java.util.HashMap $r24, $r26;
        java.lang.StringBuffer $r5, $r7, $r11, $r14, $r15, $r18, $r27, $r28, $r29, $r30;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        java.lang.String $r1, r2, $r4, $r6, $r9, $r10, $r13, $r17, r20, r21, r22, $r25;
        java.io.IOException $r19;
        char c6;
        java.io.File $r31;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        z0 := @parameter0: boolean;

        r20 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label9;

        if z0 == 0 goto label1;

        r21 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String buildFileName(java.lang.String,java.lang.String)>(r20, r2);

        goto label5;

     label1:
        c6 = <java.io.File: char separatorChar>;

        r22 = <java.io.File: java.lang.String separator>;

        $r1 = virtualinvoke r20.<java.lang.String: java.lang.String replace(char,char)>(47, c6);

        r20 = $r1;

        $i7 = (int) c6;

        $i2 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>($i7);

        $i9 = (int) -1;

        if $i2 != $i9 goto label3;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(r22);

        if $z2 == 0 goto label2;

        $r27 = new java.lang.StringBuffer;

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r27.<java.lang.StringBuffer: void <init>(java.lang.String)>($r17);

        $r18 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        r21 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label5;

     label2:
        $r28 = new java.lang.StringBuffer;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r28.<java.lang.StringBuffer: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r22);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        r21 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label5;

     label3:
        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(r22);

        if $z1 == 0 goto label4;

        $r29 = new java.lang.StringBuffer;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r29.<java.lang.StringBuffer: void <init>(java.lang.String)>($r9);

        $i5 = $i2 + 1;

        $r10 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>($i5, $i3);

        $r11 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        r21 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label5;

     label4:
        $r30 = new java.lang.StringBuffer;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r30.<java.lang.StringBuffer: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r22);

        $i4 = $i2 + 1;

        $r6 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>($i4, $i3);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        r21 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

     label5:
        $r31 = new java.io.File;

        specialinvoke $r31.<java.io.File: void <init>(java.lang.String)>(r21);

     label6:
        $r24 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r25 = virtualinvoke $r31.<java.io.File: java.lang.String getCanonicalPath()>();

        virtualinvoke $r24.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r25);

        $r26 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("classfile", $r26, 1, 1);

     label7:
        goto label9;

     label8:
        $r19 := @caughtexception;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logNoClassFileCreated(java.lang.String,java.lang.String,java.io.IOException)>(r20, r2, $r19);

     label9:
        return;

        catch java.io.IOException from label6 to label7 with label8;
    }

    public void logClasspath(org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[])
    {
        java.util.HashMap $r4, $r6, $r7;
        int $i0, $i1, i2, i3;
        java.lang.String $r3, r8, r9, r10;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath $r2;
        boolean $z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] r0;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r1;
        java.io.File $r5;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[];

        if r0 != null goto label1;

        return;

     label1:
        $i0 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label8;

        i2 = lengthof r0;

        if i2 == 0 goto label8;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("classpaths", null, 1, 0);

        i3 = 0;

        goto label7;

     label2:
        $r2 = r0[i3];

        $r3 = interfaceinvoke $r2.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: java.lang.String getPath()>();

        $r4 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r3);

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r3);

        r8 = null;

        r10 = null;

        r9 = null;

        $z0 = virtualinvoke $r5.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label4;

        $z2 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: boolean isPotentialZipArchive(java.lang.String)>($r3);

        if $z2 == 0 goto label3;

        r8 = "JAR";

        r10 = "JAR";

        r9 = "JAR";

        goto label5;

     label3:
        r8 = "FILE";

        r10 = "FILE";

        r9 = "FILE";

        goto label5;

     label4:
        $z1 = virtualinvoke $r5.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label5;

        r8 = "FOLDER";

        r10 = "FOLDER";

        r9 = "FOLDER";

     label5:
        if r9 == null goto label6;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("id", r10);

        $r7 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("classpath", $r7, 1, 1);

     label6:
        i3 = i3 + 1;

     label7:
        if i3 < i2 goto label2;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endTag(java.lang.String)>("classpaths");

     label8:
        return;
    }

    public void logCommandLineArguments(java.lang.String[])
    {
        java.lang.String[] r0;
        java.util.HashMap $r3, $r4;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r1;
        int $i0, $i1, i2, i3;
        java.lang.String $r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r0 := @parameter0: java.lang.String[];

        if r0 != null goto label1;

        return;

     label1:
        $i0 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label4;

        i2 = lengthof r0;

        if i2 == 0 goto label4;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("command_line", null, 1, 0);

        i3 = 0;

        goto label3;

     label2:
        $r3 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r2 = r0[i3];

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r2);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("argument", $r4, 1, 1);

        i3 = i3 + 1;

     label3:
        if i3 < i2 goto label2;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endTag(java.lang.String)>("command_line");

     label4:
        return;
    }

    public void logException(java.lang.Exception)
    {
        java.util.HashMap $r11, $r12, $r14;
        java.lang.StringBuffer $r3, $r8, $r15, $r17;
        int $i0, $i1, i2;
        java.lang.String $r4, $r9, $r10, $r16, $r18, $r20, $r21;
        java.io.PrintWriter $r1;
        java.io.StringWriter $r0;
        java.io.LineNumberReader $r6;
        java.io.IOException $r19;
        java.lang.Exception r2;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r5;
        java.io.StringReader $r7;
        java.lang.Class $r13;

        r5 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r2 := @parameter0: java.lang.Exception;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        $r1 = new java.io.PrintWriter;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.Writer)>($r0);

        virtualinvoke r2.<java.lang.Exception: void printStackTrace(java.io.PrintWriter)>($r1);

        virtualinvoke $r1.<java.io.PrintWriter: void flush()>();

        virtualinvoke $r1.<java.io.PrintWriter: void close()>();

        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $i0 = r5.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label08;

        $r6 = new java.io.LineNumberReader;

        $r7 = new java.io.StringReader;

        specialinvoke $r7.<java.io.StringReader: void <init>(java.lang.String)>($r4);

        specialinvoke $r6.<java.io.LineNumberReader: void <init>(java.io.Reader)>($r7);

        i2 = 0;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        if $r9 == null goto label03;

        $r17 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r18 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String LINE_SEPARATOR>;

        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

     label01:
        goto label03;

     label02:
        $r15 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r16 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String LINE_SEPARATOR>;

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        i2 = i2 + 1;

     label03:
        $r20 = virtualinvoke $r6.<java.io.LineNumberReader: java.lang.String readLine()>();

        if $r20 == null goto label04;

        if i2 < 4 goto label02;

     label04:
        virtualinvoke $r6.<java.io.LineNumberReader: void close()>();

     label05:
        goto label07;

     label06:
        $r19 := @caughtexception;

     label07:
        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r11 = r5.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("message", $r10);

        $r12 = r5.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r13 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("class", $r13);

        $r14 = r5.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r5.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("exception", $r14, 1, 1);

     label08:
        $r21 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        if $r21 != null goto label09;

        specialinvoke r5.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>($r4);

        goto label10;

     label09:
        specialinvoke r5.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>($r21);

     label10:
        return;

        catch java.io.IOException from label01 to label05 with label06;
    }

    private void logExtraProblem(org.eclipse.jdt.core.compiler.CategorizedProblem, int, int)
    {
        boolean $z0, $z1;
        org.eclipse.jdt.core.compiler.CategorizedProblem r0;
        org.eclipse.jdt.internal.compiler.batch.Main $r4, $r9, $r17, $r24, $r25;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r3;
        java.lang.StringBuffer $r12, $r14, $r15, $r16, $r18, $r19, $r21;
        int $i0, $i1, i2, i3, $i4, $i5;
        java.lang.String r2, $r5, $r6, $r7, $r8, $r10, $r11, $r13, $r20, $r22, $r23, $r26, $r27, $r28;
        char[] $r1;

        r3 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r0 := @parameter0: org.eclipse.jdt.core.compiler.CategorizedProblem;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: char[] getOriginatingFileName()>();

        if $r1 != null goto label1;

        $r25 = r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r26 = virtualinvoke $r25.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("requestor.noFileNameSpecified");

        goto label2;

     label1:
        $r26 = new java.lang.String;

        specialinvoke $r26.<java.lang.String: void <init>(char[])>($r1);

     label2:
        r2 = $r26;

        $i0 = r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label5;

        $r12 = new java.lang.StringBuffer;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r26);

        specialinvoke $r12.<java.lang.StringBuffer: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $i4 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceLineNumber()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $z1 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isError()>();

        if $z1 == 0 goto label3;

        $r24 = r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r27 = virtualinvoke $r24.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("output.emacs.error");

        goto label4;

     label3:
        $r17 = r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r27 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("output.emacs.warning");

     label4:
        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r20 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>($r22);

        $i5 = r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $r23 = specialinvoke r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String errorReportSource(org.eclipse.jdt.core.compiler.CategorizedProblem,char[],int)>(r0, null, $i5);

        specialinvoke r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>($r23);

        goto label9;

     label5:
        if i2 != 0 goto label6;

        specialinvoke r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>("----------");

     label6:
        $z0 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isError()>();

        if $z0 == 0 goto label7;

        $r9 = r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i3);

        $r11 = new java.lang.String;

        specialinvoke $r11.<java.lang.String: void <init>(java.lang.String)>(r2);

        $r28 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("requestor.error", $r10, $r11);

        goto label8;

     label7:
        $r4 = r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i3);

        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(java.lang.String)>(r2);

        $r28 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("requestor.warning", $r5, $r6);

     label8:
        specialinvoke r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printErr(java.lang.String)>($r28);

        $r7 = specialinvoke r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String errorReportSource(org.eclipse.jdt.core.compiler.CategorizedProblem,char[],int)>(r0, null, 0);

        specialinvoke r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>($r7);

        $r8 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: java.lang.String getMessage()>();

        specialinvoke r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>($r8);

        specialinvoke r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>("----------");

     label9:
        return;
    }

    public void loggingExtraProblems(org.eclipse.jdt.internal.compiler.batch.Main)
    {
        java.util.ArrayList r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17;
        boolean $z0, $z1;
        org.eclipse.jdt.core.compiler.CategorizedProblem r5, r6;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r3;
        java.lang.Object $r2, $r4;

        r3 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList extraProblems>;

        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i13 = 0;

        if $i0 == 0 goto label8;

        i14 = 0;

        i15 = 0;

        i16 = 0;

        goto label4;

     label1:
        $r2 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i16);

        r5 = (org.eclipse.jdt.core.compiler.CategorizedProblem) $r2;

        if r5 == null goto label3;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int globalProblemsCount>;

        $i2 = $i1 + 1;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: int globalProblemsCount> = $i2;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int globalProblemsCount>;

        specialinvoke r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logExtraProblem(org.eclipse.jdt.core.compiler.CategorizedProblem,int,int)>(r5, i13, $i3);

        i13 = i13 + 1;

        $z0 = virtualinvoke r5.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isError()>();

        if $z0 == 0 goto label2;

        i14 = i14 + 1;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int globalErrorsCount>;

        $i7 = $i6 + 1;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: int globalErrorsCount> = $i7;

        goto label3;

     label2:
        $z1 = virtualinvoke r5.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isWarning()>();

        if $z1 == 0 goto label3;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int globalWarningsCount>;

        $i5 = $i4 + 1;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: int globalWarningsCount> = $i5;

        i15 = i15 + 1;

     label3:
        i16 = i16 + 1;

     label4:
        if i16 < $i0 goto label1;

        $i8 = r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i9 = $i8 & 1;

        if $i9 == 0 goto label8;

        $i10 = i14 + i15;

        if $i10 == 0 goto label8;

        specialinvoke r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void startLoggingExtraProblems(int)>($i0);

        i17 = 0;

        goto label7;

     label5:
        $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i17);

        r6 = (org.eclipse.jdt.core.compiler.CategorizedProblem) $r4;

        if r6 == null goto label6;

        $i11 = virtualinvoke r6.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getID()>();

        if $i11 == 536871362 goto label6;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int globalProblemsCount>;

        specialinvoke r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logXmlExtraProblem(org.eclipse.jdt.core.compiler.CategorizedProblem,int,int)>(r6, i13, $i12);

     label6:
        i17 = i17 + 1;

     label7:
        if i17 < $i0 goto label5;

        specialinvoke r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endLoggingExtraProblems()>();

     label8:
        return;
    }

    public void logIncorrectVMVersionForAnnotationProcessing()
    {
        java.util.HashMap $r4, $r6;
        org.eclipse.jdt.internal.compiler.batch.Main $r1, $r3;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;
        int $i0, $i1;
        java.lang.String $r2, $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r5 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("configure.incorrectVMVersionforAPT");

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("message", $r5);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("error", $r6, 1, 1);

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r2 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("configure.incorrectVMVersionforAPT");

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>($r2);

        return;
    }

    public void logNoClassFileCreated(java.lang.String, java.lang.String, java.io.IOException)
    {
        java.lang.String[] $r1, $r8;
        java.util.HashMap $r9, $r13;
        int $i0, $i1;
        java.lang.String r2, r3, $r6, $r7, $r11, $r12;
        java.io.IOException r4;
        org.eclipse.jdt.internal.compiler.batch.Main $r5, $r10;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.io.IOException;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r8 = newarray (java.lang.String)[3];

        $r8[0] = r2;

        $r8[1] = r3;

        $r11 = virtualinvoke r4.<java.io.IOException: java.lang.String getMessage()>();

        $r8[2] = $r11;

        $r12 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String[])>("output.noClassFileCreated", $r8);

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("message", $r12);

        $r13 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("error", $r13, 1, 1);

     label1:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = r2;

        $r1[1] = r3;

        $r6 = virtualinvoke r4.<java.io.IOException: java.lang.String getMessage()>();

        $r1[2] = $r6;

        $r7 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String[])>("output.noClassFileCreated", $r1);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>($r7);

        return;
    }

    public void logNumberOfClassFilesGenerated(int)
    {
        java.util.HashMap $r7, $r8;
        org.eclipse.jdt.internal.compiler.batch.Main $r1, $r4;
        java.lang.Integer $r6;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;
        int $i0, $i1, i2;
        java.lang.String $r2, $r3, $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        i2 := @parameter0: int;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r6 = new java.lang.Integer;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(i2);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r6);

        $r8 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("number_of_classfiles", $r8, 1, 1);

     label1:
        if i2 != 1 goto label2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compile.oneClassFileGenerated");

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnOut(java.lang.String)>($r5);

        goto label3;

     label2:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i2);

        $r3 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("compile.severalClassFilesGenerated", $r2);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnOut(java.lang.String)>($r3);

     label3:
        return;
    }

    public void logOptions(java.util.Map)
    {
        java.lang.Object[] $r3;
        org.eclipse.jdt.internal.compiler.batch.Main$1 $r4;
        java.util.HashMap $r9, $r10, $r12;
        java.util.Map r1;
        int $i0, $i1, i2, i3;
        java.lang.String r8;
        java.util.Map$Entry r6;
        java.util.Set $r2;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;
        java.lang.Object $r5, $r7, $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r1 := @parameter0: java.util.Map;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label3;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("options", null, 1, 0);

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray()>();

        $r4 = new org.eclipse.jdt.internal.compiler.batch.Main$1;

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.batch.Main$1: void <init>(org.eclipse.jdt.internal.compiler.batch.Main$Logger)>(r0);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r3, $r4);

        i3 = 0;

        i2 = lengthof $r3;

        goto label2;

     label1:
        $r5 = $r3[i3];

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.String) $r7;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("key", r8);

        $r10 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r11 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r11);

        $r12 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("option", $r12, 1, 1);

        i3 = i3 + 1;

     label2:
        if i3 < i2 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endTag(java.lang.String)>("options");

     label3:
        return;
    }

    public void logPendingError(java.lang.String)
    {
        int $i0, $i1;
        java.util.HashMap $r2, $r3;
        java.lang.String r1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("message", r1);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("error", $r3, 1, 1);

     label1:
        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>(r1);

        return;
    }

    private void logProblem(org.eclipse.jdt.core.compiler.CategorizedProblem, int, int, char[])
    {
        boolean $z0, $z1;
        org.eclipse.jdt.core.compiler.CategorizedProblem r1;
        org.eclipse.jdt.internal.compiler.batch.Main $r2, $r9, $r20, $r27, $r29;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;
        java.lang.Exception $r28;
        java.lang.StringBuffer $r13, $r17, $r18, $r19, $r21, $r22, $r24;
        int $i0, $i1, i2, i3, $i4, $i5, $i6;
        java.lang.String $r3, $r4, $r7, $r8, $r10, $r11, $r14, $r16, $r23, $r25, $r26, $r30, $r31, $r32, $r33;
        char[] $r5, r6, $r12, $r15;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r1 := @parameter0: org.eclipse.jdt.core.compiler.CategorizedProblem;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        r6 := @parameter3: char[];

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label03;

        $r13 = new java.lang.StringBuffer;

        $r14 = new java.lang.String;

        $r15 = virtualinvoke r1.<org.eclipse.jdt.core.compiler.CategorizedProblem: char[] getOriginatingFileName()>();

        specialinvoke $r14.<java.lang.String: void <init>(char[])>($r15);

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

        specialinvoke $r13.<java.lang.StringBuffer: void <init>(java.lang.String)>($r16);

        $r17 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $i4 = virtualinvoke r1.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceLineNumber()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $z1 = virtualinvoke r1.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isError()>();

        if $z1 == 0 goto label01;

        $r27 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r32 = virtualinvoke $r27.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("output.emacs.error");

        goto label02;

     label01:
        $r20 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r32 = virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("output.emacs.warning");

     label02:
        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r23 = virtualinvoke r1.<org.eclipse.jdt.core.compiler.CategorizedProblem: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>($r25);

        $i5 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $r26 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String errorReportSource(org.eclipse.jdt.core.compiler.CategorizedProblem,char[],int)>(r1, r6, $i5);

        $i6 = virtualinvoke $r26.<java.lang.String: int length()>();

        if $i6 == 0 goto label11;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>($r26);

        goto label11;

     label03:
        if i2 != 0 goto label04;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>("----------");

     label04:
        $z0 = virtualinvoke r1.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isError()>();

        if $z0 == 0 goto label05;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i3);

        $r11 = new java.lang.String;

        $r12 = virtualinvoke r1.<org.eclipse.jdt.core.compiler.CategorizedProblem: char[] getOriginatingFileName()>();

        specialinvoke $r11.<java.lang.String: void <init>(char[])>($r12);

        $r33 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("requestor.error", $r10, $r11);

        goto label06;

     label05:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i3);

        $r4 = new java.lang.String;

        $r5 = virtualinvoke r1.<org.eclipse.jdt.core.compiler.CategorizedProblem: char[] getOriginatingFileName()>();

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r33 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("requestor.warning", $r3, $r4);

     label06:
        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printErr(java.lang.String)>($r33);

     label07:
        $r7 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String errorReportSource(org.eclipse.jdt.core.compiler.CategorizedProblem,char[],int)>(r1, r6, 0);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>($r7);

        $r8 = virtualinvoke r1.<org.eclipse.jdt.core.compiler.CategorizedProblem: java.lang.String getMessage()>();

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>($r8);

     label08:
        goto label10;

     label09:
        $r28 := @caughtexception;

        $r29 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r30 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r31 = virtualinvoke $r29.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("requestor.notRetrieveErrorMessage", $r30);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>($r31);

     label10:
        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>("----------");

     label11:
        return;

        catch java.lang.Exception from label07 to label08 with label09;
    }

    public int logProblems(org.eclipse.jdt.core.compiler.CategorizedProblem[], char[], org.eclipse.jdt.internal.compiler.batch.Main)
    {
        boolean $z0;
        org.eclipse.jdt.core.compiler.CategorizedProblem r4, r5, r6;
        org.eclipse.jdt.internal.compiler.batch.Main r1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r2;
        org.eclipse.jdt.core.compiler.CategorizedProblem[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, i22, i23;
        char[] r3;

        r2 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r0 := @parameter0: org.eclipse.jdt.core.compiler.CategorizedProblem[];

        r3 := @parameter1: char[];

        r1 := @parameter2: org.eclipse.jdt.internal.compiler.batch.Main;

        i0 = lengthof r0;

        i16 = 0;

        i17 = 0;

        if i0 == 0 goto label13;

        i18 = 0;

        i19 = 0;

        i20 = 0;

        i21 = 0;

        goto label05;

     label01:
        r4 = r0[i21];

        if r4 == null goto label04;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: int globalProblemsCount>;

        $i2 = $i1 + 1;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: int globalProblemsCount> = $i2;

        $i3 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: int globalProblemsCount>;

        specialinvoke r2.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logProblem(org.eclipse.jdt.core.compiler.CategorizedProblem,int,int,char[])>(r4, i17, $i3, r3);

        i17 = i17 + 1;

        $z0 = virtualinvoke r4.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isError()>();

        if $z0 == 0 goto label02;

        i16 = i16 + 1;

        i18 = i18 + 1;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: int globalErrorsCount>;

        $i10 = $i9 + 1;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: int globalErrorsCount> = $i10;

        goto label04;

     label02:
        $i4 = virtualinvoke r4.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getID()>();

        if $i4 != 536871362 goto label03;

        $i7 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: int globalTasksCount>;

        $i8 = $i7 + 1;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: int globalTasksCount> = $i8;

        i20 = i20 + 1;

        goto label04;

     label03:
        $i5 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: int globalWarningsCount>;

        $i6 = $i5 + 1;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: int globalWarningsCount> = $i6;

        i19 = i19 + 1;

     label04:
        i21 = i21 + 1;

     label05:
        if i21 < i0 goto label01;

        $i11 = r2.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i12 = $i11 & 1;

        if $i12 == 0 goto label13;

        $i13 = i18 + i19;

        if $i13 == 0 goto label09;

        specialinvoke r2.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void startLoggingProblems(int,int)>(i18, i19);

        i22 = 0;

        goto label08;

     label06:
        r5 = r0[i22];

        if r5 == null goto label07;

        $i15 = virtualinvoke r5.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getID()>();

        if $i15 == 536871362 goto label07;

        specialinvoke r2.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logXmlProblem(org.eclipse.jdt.core.compiler.CategorizedProblem,char[])>(r5, r3);

     label07:
        i22 = i22 + 1;

     label08:
        if i22 < i0 goto label06;

        specialinvoke r2.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endLoggingProblems()>();

     label09:
        if i20 == 0 goto label13;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void startLoggingTasks(int)>(i20);

        i23 = 0;

        goto label12;

     label10:
        r6 = r0[i23];

        if r6 == null goto label11;

        $i14 = virtualinvoke r6.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getID()>();

        if $i14 != 536871362 goto label11;

        specialinvoke r2.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logXmlTask(org.eclipse.jdt.core.compiler.CategorizedProblem,char[])>(r6, r3);

     label11:
        i23 = i23 + 1;

     label12:
        if i23 < i0 goto label10;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endLoggingTasks()>();

     label13:
        return i16;
    }

    public void logProblemsSummary(int, int, int, int)
    {
        java.lang.Integer $r21, $r23, $r25, $r27;
        org.eclipse.jdt.internal.compiler.batch.Main $r1, $r4, $r8, $r11, $r13, $r14, $r16, $r17, $r18, $r20;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;
        java.lang.String[] $r7;
        java.util.HashMap $r22, $r24, $r26, $r28, $r29;
        int $i0, $i1, i2, i3, i4, i5, $i6, $i7, $i8;
        java.lang.String $r2, $r3, $r5, $r6, $r9, $r10, $r12, $r15, $r19, r30, r31, r32;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        i5 := @parameter3: int;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label01;

        $r22 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r21 = new java.lang.Integer;

        specialinvoke $r21.<java.lang.Integer: void <init>(int)>(i2);

        virtualinvoke $r22.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("problems", $r21);

        $r24 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r23 = new java.lang.Integer;

        specialinvoke $r23.<java.lang.Integer: void <init>(int)>(i3);

        virtualinvoke $r24.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("errors", $r23);

        $r26 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r25 = new java.lang.Integer;

        specialinvoke $r25.<java.lang.Integer: void <init>(int)>(i4);

        virtualinvoke $r26.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("warnings", $r25);

        $r28 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r27 = new java.lang.Integer;

        specialinvoke $r27.<java.lang.Integer: void <init>(int)>(i5);

        virtualinvoke $r28.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("tasks", $r27);

        $r29 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("problem_summary", $r29, 1, 1);

     label01:
        if i2 != 1 goto label04;

        if i3 != 1 goto label02;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        r30 = virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compile.oneError");

        goto label03;

     label02:
        $r17 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        r30 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compile.oneWarning");

     label03:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r19 = virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("compile.oneProblem", r30);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printErr(java.lang.String)>($r19);

        goto label12;

     label04:
        r31 = null;

        r32 = null;

        if i3 <= 0 goto label06;

        if i3 != 1 goto label05;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        r31 = virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compile.oneError");

        goto label06;

     label05:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i3);

        r31 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("compile.severalErrors", $r15);

     label06:
        $i6 = i4 + i5;

        if $i6 <= 0 goto label08;

        if $i6 != 1 goto label07;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        r32 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compile.oneWarning");

        goto label08;

     label07:
        $r11 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i6);

        r32 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("compile.severalWarnings", $r12);

     label08:
        if r31 == null goto label09;

        if r32 != null goto label11;

     label09:
        if r31 != null goto label10;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i2);

        $r6 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("compile.severalProblemsErrorsOrWarnings", $r5, r32);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printErr(java.lang.String)>($r6);

        goto label12;

     label10:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i2);

        $r3 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("compile.severalProblemsErrorsOrWarnings", $r2, r31);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printErr(java.lang.String)>($r3);

        goto label12;

     label11:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r7 = newarray (java.lang.String)[3];

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i2);

        $r7[0] = $r9;

        $r7[1] = r31;

        $r7[2] = r32;

        $r10 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String[])>("compile.severalProblemsErrorsAndWarnings", $r7);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printErr(java.lang.String)>($r10);

     label12:
        $i7 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i8 = $i7 & 2;

        if $i8 == 0 goto label13;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr()>();

     label13:
        return;
    }

    public void logProgress()
    {
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printOut(char)>(46);

        return;
    }

    public void logRepetition(int, int)
    {
        org.eclipse.jdt.internal.compiler.batch.Main $r1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;
        int i0, $i1, i2;
        java.lang.String $r2, $r3, $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $i1 = i0 + 1;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i2);

        $r4 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("compile.repetition", $r2, $r3);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnOut(java.lang.String)>($r4);

        return;
    }

    public void logTiming(org.eclipse.jdt.internal.compiler.impl.CompilerStats)
    {
        byte $b4;
        java.lang.Long $r24, $r27;
        long $l0, l1, $l7, $l8, $l10, $l11, $l13, $l14, $l16, $l17;
        java.lang.String $r4, $r5, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r20, $r21, $r22, $r23;
        org.eclipse.jdt.internal.compiler.impl.CompilerStats r0;
        org.eclipse.jdt.internal.compiler.batch.Main $r3, $r6, $r8, $r19;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r1;
        java.lang.String[] $r2, $r7, $r18;
        java.util.HashMap $r25, $r26, $r28, $r29;
        int $i2, $i3, $i5, $i6, $i9, $i12, $i15, $i18, $i19;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.impl.CompilerStats;

        $l0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long elapsedTime()>();

        l1 = r0.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long lineCount>;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        $r25 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r24 = new java.lang.Long;

        specialinvoke $r24.<java.lang.Long: void <init>(long)>($l0);

        virtualinvoke $r25.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r24);

        $r26 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("time", $r26, 1, 1);

        $r28 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r27 = new java.lang.Long;

        specialinvoke $r27.<java.lang.Long: void <init>(long)>(l1);

        virtualinvoke $r28.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r27);

        $r29 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("number_of_lines", $r29, 1, 1);

     label1:
        $b4 = l1 cmp 0L;

        if $b4 == 0 goto label2;

        $r19 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r18 = newarray (java.lang.String)[3];

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        $r18[0] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $r18[1] = $r21;

        $d24 = (double) l1;

        $d26 = $d24 * 10000.0;

        $d25 = (double) $l0;

        $d27 = $d26 / $d25;

        $i19 = (int) $d27;

        $d28 = (double) $i19;

        $d29 = $d28 / 10.0;

        $r22 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d29);

        $r18[2] = $r22;

        $r23 = virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String[])>("compile.instantTime", $r18);

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnOut(java.lang.String)>($r23);

        goto label3;

     label2:
        $r3 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r2 = newarray (java.lang.String)[1];

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $r2[0] = $r4;

        $r5 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String[])>("compile.totalTime", $r2);

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnOut(java.lang.String)>($r5);

     label3:
        $r6 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $i5 = $r6.<org.eclipse.jdt.internal.compiler.batch.Main: int timing>;

        $i6 = $i5 & 2;

        if $i6 == 0 goto label4;

        $r8 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r7 = newarray (java.lang.String)[8];

        $l7 = r0.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long parseTime>;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l7);

        $r7[0] = $r9;

        $l8 = r0.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long parseTime>;

        $d0 = (double) $l8;

        $d2 = $d0 * 1000.0;

        $d1 = (double) $l0;

        $d3 = $d2 / $d1;

        $i9 = (int) $d3;

        $d4 = (double) $i9;

        $d5 = $d4 / 10.0;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d5);

        $r7[1] = $r10;

        $l10 = r0.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long resolveTime>;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l10);

        $r7[2] = $r11;

        $l11 = r0.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long resolveTime>;

        $d6 = (double) $l11;

        $d8 = $d6 * 1000.0;

        $d7 = (double) $l0;

        $d9 = $d8 / $d7;

        $i12 = (int) $d9;

        $d10 = (double) $i12;

        $d11 = $d10 / 10.0;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d11);

        $r7[3] = $r12;

        $l13 = r0.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long analyzeTime>;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l13);

        $r7[4] = $r13;

        $l14 = r0.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long analyzeTime>;

        $d12 = (double) $l14;

        $d14 = $d12 * 1000.0;

        $d13 = (double) $l0;

        $d15 = $d14 / $d13;

        $i15 = (int) $d15;

        $d16 = (double) $i15;

        $d17 = $d16 / 10.0;

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d17);

        $r7[5] = $r14;

        $l16 = r0.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long generateTime>;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l16);

        $r7[6] = $r15;

        $l17 = r0.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long generateTime>;

        $d18 = (double) $l17;

        $d20 = $d18 * 1000.0;

        $d19 = (double) $l0;

        $d21 = $d20 / $d19;

        $i18 = (int) $d21;

        $d22 = (double) $i18;

        $d23 = $d22 / 10.0;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d23);

        $r7[7] = $r16;

        $r17 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String[])>("compile.detailedTime", $r7);

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnOut(java.lang.String)>($r17);

     label4:
        return;
    }

    public void logUsage(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnOut(java.lang.String)>(r1);

        return;
    }

    public void logVersion(boolean)
    {
        java.lang.String[] $r2, $r13;
        java.lang.StringBuffer $r22, $r24;
        int $i0, $i1;
        java.lang.String $r5, $r7, $r9, $r10, $r16, $r18, $r20, $r21, $r25;
        boolean z0;
        java.io.PrintWriter $r1, $r11, $r12, $r23, $r26, $r27;
        org.eclipse.jdt.internal.compiler.batch.Main $r3, $r4, $r6, $r8, $r14, $r15, $r17, $r19;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        if $r1 == null goto label1;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label1;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r13 = newarray (java.lang.String)[3];

        $r14 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r16 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compiler.name");

        $r13[0] = $r16;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r18 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compiler.version");

        $r13[1] = $r18;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r20 = virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compiler.copyright");

        $r13[2] = $r20;

        $r21 = virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String[])>("misc.version", $r13);

        $r23 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>(java.lang.String)>("# ");

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintWriter: void println(java.lang.String)>($r25);

        if z0 == 0 goto label2;

        $r26 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter out>;

        virtualinvoke $r26.<java.io.PrintWriter: void println(java.lang.String)>($r21);

        $r27 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter out>;

        virtualinvoke $r27.<java.io.PrintWriter: void flush()>();

        goto label2;

     label1:
        if z0 == 0 goto label2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r2 = newarray (java.lang.String)[3];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r5 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compiler.name");

        $r2[0] = $r5;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r7 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compiler.version");

        $r2[1] = $r7;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compiler.copyright");

        $r2[2] = $r9;

        $r10 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String[])>("misc.version", $r2);

        $r11 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter out>;

        virtualinvoke $r11.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        $r12 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter out>;

        virtualinvoke $r12.<java.io.PrintWriter: void flush()>();

     label2:
        return;
    }

    public void logWrongJDK()
    {
        java.util.HashMap $r4, $r6;
        org.eclipse.jdt.internal.compiler.batch.Main $r1, $r3;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;
        int $i0, $i1;
        java.lang.String $r2, $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r5 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("configure.requiresJDK1.2orAbove");

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("message", $r5);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("ERROR", $r6, 1, 1);

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r2 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("configure.requiresJDK1.2orAbove");

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printlnErr(java.lang.String)>($r2);

        return;
    }

    private void logXmlExtraProblem(org.eclipse.jdt.core.compiler.CategorizedProblem, int, int)
    {
        java.util.HashMap $r2, $r4, $r6, $r8, $r9, $r10, $r12;
        java.lang.Integer $r3, $r5, $r7;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r11, $r13;
        boolean $z0;
        org.eclipse.jdt.core.compiler.CategorizedProblem r0;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r0 := @parameter0: org.eclipse.jdt.core.compiler.CategorizedProblem;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        $i0 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceStart()>();

        $i1 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceEnd()>();

        $z0 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isError()>();

        $r2 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        if $z0 == 0 goto label1;

        $r13 = "ERROR";

        goto label2;

     label1:
        $r13 = "WARNING";

     label2:
        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("severity", $r13);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r3 = new java.lang.Integer;

        $i2 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceLineNumber()>();

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i2);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("line", $r3);

        $r6 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r5 = new java.lang.Integer;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i0);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("charStart", $r5);

        $r8 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>($i1);

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("charEnd", $r7);

        $r9 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("extra_problem", $r9, 1, 0);

        $r10 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r11 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: java.lang.String getMessage()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r11);

        $r12 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("message", $r12, 1, 1);

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void extractContext(org.eclipse.jdt.core.compiler.CategorizedProblem,char[])>(r0, null);

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endTag(java.lang.String)>("extra_problem");

        return;
    }

    private void logXmlProblem(org.eclipse.jdt.core.compiler.CategorizedProblem, char[])
    {
        java.lang.Integer $r4, $r7, $r9, $r11, $r14;
        byte b3, $b7;
        boolean $z0;
        org.eclipse.jdt.core.compiler.CategorizedProblem r0;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r1;
        java.util.HashMap $r2, $r5, $r6, $r8, $r10, $r12, $r15, $r16, $r17, $r19, $r23, $r24, $r25;
        java.lang.String[] $r21;
        int $i0, $i1, $i2, $i4, $i5, $i6, i8;
        java.lang.String $r3, $r13, $r18, $r22, $r26;
        char[] r20;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r0 := @parameter0: org.eclipse.jdt.core.compiler.CategorizedProblem;

        r20 := @parameter1: char[];

        $i0 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceStart()>();

        $i1 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceEnd()>();

        $i2 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getID()>();

        $r2 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r3 = specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String getFieldName(int)>($i2);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("id", $r3);

        $r5 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i2);

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("problemID", $r4);

        $z0 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isError()>();

        if $z0 == 0 goto label1;

        $b7 = 1;

        goto label2;

     label1:
        $b7 = 0;

     label2:
        b3 = $b7;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        if $z0 == 0 goto label3;

        $r26 = "ERROR";

        goto label4;

     label3:
        $r26 = "WARNING";

     label4:
        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("severity", $r26);

        $r8 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r7 = new java.lang.Integer;

        $i4 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceLineNumber()>();

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>($i4);

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("line", $r7);

        $r10 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r9 = new java.lang.Integer;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i0);

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("charStart", $r9);

        $r12 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r11 = new java.lang.Integer;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>($i1);

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("charEnd", $r11);

        $r13 = specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String getProblemOptionKey(int)>($i2);

        if $r13 == null goto label5;

        $r25 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        virtualinvoke $r25.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("optionKey", $r13);

     label5:
        $i5 = staticinvoke <org.eclipse.jdt.internal.compiler.problem.ProblemReporter: int getProblemCategory(int,int)>(b3, $i2);

        $r15 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r14 = new java.lang.Integer;

        specialinvoke $r14.<java.lang.Integer: void <init>(int)>($i5);

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("categoryID", $r14);

        $r16 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("problem", $r16, 1, 0);

        $r17 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r18 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: java.lang.String getMessage()>();

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r18);

        $r19 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("message", $r19, 1, 1);

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void extractContext(org.eclipse.jdt.core.compiler.CategorizedProblem,char[])>(r0, r20);

        $r21 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: java.lang.String[] getArguments()>();

        $i6 = lengthof $r21;

        if $i6 == 0 goto label8;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("arguments", null, 1, 0);

        i8 = 0;

        goto label7;

     label6:
        $r23 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r22 = $r21[i8];

        virtualinvoke $r23.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r22);

        $r24 = r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("argument", $r24, 1, 1);

        i8 = i8 + 1;

     label7:
        if i8 < $i6 goto label6;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endTag(java.lang.String)>("arguments");

     label8:
        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endTag(java.lang.String)>("problem");

        return;
    }

    private void logXmlTask(org.eclipse.jdt.core.compiler.CategorizedProblem, char[])
    {
        java.util.HashMap $r3, $r5, $r7, $r9, $r10, $r12, $r14;
        java.lang.Integer $r1, $r4, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r8, $r11;
        org.eclipse.jdt.core.compiler.CategorizedProblem r2;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;
        char[] r13;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r2 := @parameter0: org.eclipse.jdt.core.compiler.CategorizedProblem;

        r13 := @parameter1: char[];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r1 = new java.lang.Integer;

        $i0 = virtualinvoke r2.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceLineNumber()>();

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i0);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("line", $r1);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r4 = new java.lang.Integer;

        $i1 = virtualinvoke r2.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceStart()>();

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("charStart", $r4);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r6 = new java.lang.Integer;

        $i2 = virtualinvoke r2.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceEnd()>();

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i2);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("charEnd", $r6);

        $i3 = virtualinvoke r2.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getID()>();

        $r8 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.lang.String getProblemOptionKey(int)>($i3);

        if $r8 == null goto label1;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("optionKey", $r8);

     label1:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("task", $r9, 1, 0);

        $r10 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r11 = virtualinvoke r2.<org.eclipse.jdt.core.compiler.CategorizedProblem: java.lang.String getMessage()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r11);

        $r12 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("message", $r12, 1, 1);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void extractContext(org.eclipse.jdt.core.compiler.CategorizedProblem,char[])>(r2, r13);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endTag(java.lang.String)>("task");

        return;
    }

    private void printErr(java.lang.String)
    {
        java.io.PrintWriter $r2, $r3, $r4;
        int $i0, $i1;
        java.lang.String r1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter err>;

        virtualinvoke $r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        if $r3 == null goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        virtualinvoke $r4.<java.io.PrintWriter: void print(java.lang.String)>(r1);

     label1:
        return;
    }

    private void printlnErr()
    {
        java.io.PrintWriter $r1, $r2, $r3;
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter err>;

        virtualinvoke $r1.<java.io.PrintWriter: void println()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        if $r2 == null goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        virtualinvoke $r3.<java.io.PrintWriter: void println()>();

     label1:
        return;
    }

    private void printlnErr(java.lang.String)
    {
        java.io.PrintWriter $r2, $r3, $r4;
        int $i0, $i1;
        java.lang.String r1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter err>;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(r1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        if $r3 == null goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        virtualinvoke $r4.<java.io.PrintWriter: void println(java.lang.String)>(r1);

     label1:
        return;
    }

    private void printlnOut(java.lang.String)
    {
        java.io.PrintWriter $r2, $r3, $r4;
        int $i0, $i1;
        java.lang.String r1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter out>;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(r1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        if $r3 == null goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        virtualinvoke $r4.<java.io.PrintWriter: void println(java.lang.String)>(r1);

     label1:
        return;
    }

    public void printNewLine()
    {
        java.io.PrintWriter $r1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter out>;

        virtualinvoke $r1.<java.io.PrintWriter: void println()>();

        return;
    }

    private void printOut(char)
    {
        java.io.PrintWriter $r1;
        char c0;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        c0 := @parameter0: char;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter out>;

        virtualinvoke $r1.<java.io.PrintWriter: void print(char)>(c0);

        return;
    }

    public void printStats()
    {
        boolean z0, $z1, $z2, $z3;
        org.eclipse.jdt.internal.compiler.batch.Main $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;
        long $l10, $l11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i12, $i13, $i14;
        org.eclipse.jdt.internal.compiler.Compiler $r11;
        org.eclipse.jdt.internal.compiler.impl.CompilerStats r12;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.batch.Main: int timing>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label3;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("stats", null, 1, 0);

     label3:
        if z0 == 0 goto label4;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r11 = $r10.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.Compiler batchCompiler>;

        r12 = $r11.<org.eclipse.jdt.internal.compiler.Compiler: org.eclipse.jdt.internal.compiler.impl.CompilerStats stats>;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $l10 = $r13.<org.eclipse.jdt.internal.compiler.batch.Main: long startTime>;

        r12.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long startTime> = $l10;

        $l11 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r12.<org.eclipse.jdt.internal.compiler.impl.CompilerStats: long endTime> = $l11;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logTiming(org.eclipse.jdt.internal.compiler.impl.CompilerStats)>(r12);

     label4:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $i4 = $r2.<org.eclipse.jdt.internal.compiler.batch.Main: int globalProblemsCount>;

        if $i4 <= 0 goto label5;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $i9 = $r6.<org.eclipse.jdt.internal.compiler.batch.Main: int globalProblemsCount>;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $i8 = $r7.<org.eclipse.jdt.internal.compiler.batch.Main: int globalErrorsCount>;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $i7 = $r8.<org.eclipse.jdt.internal.compiler.batch.Main: int globalWarningsCount>;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $i6 = $r9.<org.eclipse.jdt.internal.compiler.batch.Main: int globalTasksCount>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logProblemsSummary(int,int,int,int)>($i9, $i8, $i7, $i6);

     label5:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $i5 = $r3.<org.eclipse.jdt.internal.compiler.batch.Main: int exportedClassFilesCounter>;

        if $i5 == 0 goto label7;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $z1 = $r4.<org.eclipse.jdt.internal.compiler.batch.Main: boolean showProgress>;

        if $z1 != 0 goto label6;

        if z0 != 0 goto label6;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $z2 = $r5.<org.eclipse.jdt.internal.compiler.batch.Main: boolean verbose>;

        if $z2 == 0 goto label7;

     label6:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $i12 = $r14.<org.eclipse.jdt.internal.compiler.batch.Main: int exportedClassFilesCounter>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logNumberOfClassFilesGenerated(int)>($i12);

     label7:
        $i13 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i14 = $i13 & 1;

        if $i14 == 0 goto label8;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endTag(java.lang.String)>("stats");

     label8:
        return;
    }

    private void printTag(java.lang.String, java.util.HashMap, boolean, boolean)
    {
        java.io.PrintWriter $r1, $r3;
        java.util.HashMap $r2, $r5, r7;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;
        org.eclipse.jdt.internal.compiler.util.GenericXMLWriter $r6;
        java.lang.String r4;
        boolean z0, z1;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r4 := @parameter0: java.lang.String;

        r7 := @parameter1: java.util.HashMap;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        if $r1 == null goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        $r6 = (org.eclipse.jdt.internal.compiler.util.GenericXMLWriter) $r3;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.util.GenericXMLWriter: void printTag(java.lang.String,java.util.HashMap,boolean,boolean,boolean)>(r4, $r5, 1, z0, z1);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        virtualinvoke $r2.<java.util.HashMap: void clear()>();

        return;
    }

    public void setEmacs()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 | 2;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits> = $i1;

        return;
    }

    public void setLog(java.lang.String) throws org.eclipse.jdt.core.compiler.InvalidInputException
    {
        byte[] $r29;
        java.util.Date $r53;
        java.util.Locale $r1;
        java.text.DateFormat $r2;
        boolean $z0;
        java.io.PrintWriter $r8, $r17, $r26, $r33, $r60, $r63;
        org.eclipse.jdt.internal.compiler.batch.Main $r34, $r37, $r40, $r46, $r50;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r4;
        java.io.FileNotFoundException $r48;
        org.eclipse.jdt.internal.compiler.util.GenericXMLWriter $r56;
        java.io.UnsupportedEncodingException $r44, $r52;
        java.util.HashMap $r35, $r38, $r41, $r43;
        java.lang.StringBuffer $r10, $r19, $r30, $r31, $r57, $r61, $r64;
        int $i0, $i1, $i2, $i4;
        java.io.OutputStreamWriter $r55;
        java.lang.String r3, $r9, $r11, $r12, $r13, $r18, $r20, $r24, $r28, $r32, $r36, $r39, $r42, $r47, $r51, $r58;
        java.io.FileOutputStream $r54, $r59, $r62;
        org.eclipse.jdt.core.compiler.InvalidInputException $r65, $r66;

        r4 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r3 := @parameter0: java.lang.String;

        $r53 = new java.util.Date;

        specialinvoke $r53.<java.util.Date: void <init>()>();

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r2 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>(3, 1, $r1);

     label01:
        $i0 = virtualinvoke r3.<java.lang.String: int lastIndexOf(int)>(46);

        $i4 = (int) -1;

        if $i0 == $i4 goto label07;

        $r12 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(".xml");

        if $z0 == 0 goto label06;

        $r56 = new org.eclipse.jdt.internal.compiler.util.GenericXMLWriter;

        $r55 = new java.io.OutputStreamWriter;

        $r54 = new java.io.FileOutputStream;

        specialinvoke $r54.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>(r3, 0);

        specialinvoke $r55.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r54, "UTF-8");

        $r24 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String LINE_SEPARATOR>;

        specialinvoke $r56.<org.eclipse.jdt.internal.compiler.util.GenericXMLWriter: void <init>(java.io.Writer,java.lang.String,boolean)>($r55, $r24, 1);

        r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log> = $r56;

        $i1 = r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i2 = $i1 | 1;

        r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits> = $i2;

     label02:
        $r26 = r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        $r57 = new java.lang.StringBuffer;

        specialinvoke $r57.<java.lang.StringBuffer: void <init>(java.lang.String)>("<!-- ");

        $r58 = new java.lang.String;

        $r28 = virtualinvoke $r2.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r53);

        $r29 = virtualinvoke $r28.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r58.<java.lang.String: void <init>(byte[],java.lang.String)>($r29, "UTF-8");

        $r30 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r58);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" -->");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r26.<java.io.PrintWriter: void println(java.lang.String)>($r32);

     label03:
        goto label05;

     label04:
        $r52 := @caughtexception;

        virtualinvoke $r52.<java.io.UnsupportedEncodingException: void printStackTrace()>();

     label05:
        $r33 = r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        virtualinvoke $r33.<java.io.PrintWriter: void println(java.lang.String)>("<!DOCTYPE compiler PUBLIC \"-//Eclipse.org//DTD Eclipse JDT 3.2.003 Compiler//EN\" \"http://www.eclipse.org/jdt/core/compiler_32_003.dtd\">");

        $r35 = r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r34 = r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r36 = virtualinvoke $r34.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compiler.name");

        virtualinvoke $r35.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("name", $r36);

        $r38 = r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r37 = r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r39 = virtualinvoke $r37.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compiler.version");

        virtualinvoke $r38.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r39);

        $r41 = r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r40 = r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r42 = virtualinvoke $r40.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compiler.copyright");

        virtualinvoke $r41.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r42);

        $r43 = r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("compiler", $r43, 1, 0);

        goto label11;

     label06:
        $r60 = new java.io.PrintWriter;

        $r59 = new java.io.FileOutputStream;

        specialinvoke $r59.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>(r3, 0);

        specialinvoke $r60.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r59);

        r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log> = $r60;

        $r17 = r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        $r61 = new java.lang.StringBuffer;

        specialinvoke $r61.<java.lang.StringBuffer: void <init>(java.lang.String)>("# ");

        $r18 = virtualinvoke $r2.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r53);

        $r19 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        goto label11;

     label07:
        $r63 = new java.io.PrintWriter;

        $r62 = new java.io.FileOutputStream;

        specialinvoke $r62.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>(r3, 0);

        specialinvoke $r63.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r62);

        r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log> = $r63;

        $r8 = r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.io.PrintWriter log>;

        $r64 = new java.lang.StringBuffer;

        specialinvoke $r64.<java.lang.StringBuffer: void <init>(java.lang.String)>("# ");

        $r9 = virtualinvoke $r2.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r53);

        $r10 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>($r11);

     label08:
        goto label11;

     label09:
        $r48 := @caughtexception;

        $r65 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r50 = r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r51 = virtualinvoke $r50.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.cannotOpenLog", r3);

        specialinvoke $r65.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r51);

        throw $r65;

     label10:
        $r44 := @caughtexception;

        $r66 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r46 = r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        $r47 = virtualinvoke $r46.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.cannotOpenLogInvalidEncoding", r3);

        specialinvoke $r66.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r47);

        throw $r66;

     label11:
        return;

        catch java.io.UnsupportedEncodingException from label02 to label03 with label04;
        catch java.io.FileNotFoundException from label01 to label08 with label09;
        catch java.io.UnsupportedEncodingException from label01 to label08 with label10;
    }

    private void startLoggingExtraProblems(int)
    {
        int i0;
        java.util.HashMap $r2, $r3;
        java.lang.Integer $r1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        i0 := @parameter0: int;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("problems", $r1);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("extra_problems", $r3, 1, 0);

        return;
    }

    private void startLoggingProblems(int, int)
    {
        java.util.HashMap $r2, $r4, $r6, $r7;
        java.lang.Integer $r1, $r3, $r5;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;
        int i0, i1, $i2;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r1 = new java.lang.Integer;

        $i2 = i0 + i1;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i2);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("problems", $r1);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("errors", $r3);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r5 = new java.lang.Integer;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>(i1);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("warnings", $r5);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("problems", $r7, 1, 0);

        return;
    }

    public void startLoggingSource(org.eclipse.jdt.internal.compiler.CompilationResult)
    {
        java.util.HashMap $r6, $r8, $r11, $r15, $r19;
        char[][] $r17;
        int $i0, $i1, $i5;
        java.lang.String $r7, $r14, $r16, r18, $r20, $r22;
        org.eclipse.jdt.internal.compiler.CompilationResult r1;
        char $c2, $c3, $c4;
        org.eclipse.jdt.internal.compiler.batch.Main $r9;
        org.eclipse.jdt.internal.compiler.batch.CompilationUnit $r13;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;
        java.io.File $r21;
        char[] $r3, $r12;
        org.eclipse.jdt.internal.compiler.env.ICompilationUnit r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.CompilationResult;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label6;

        r2 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.internal.compiler.env.ICompilationUnit compilationUnit>;

        if r2 == null goto label5;

        $r3 = interfaceinvoke r2.<org.eclipse.jdt.internal.compiler.env.ICompilationUnit: char[] getFileName()>();

        $r21 = new java.io.File;

        $r20 = new java.lang.String;

        specialinvoke $r20.<java.lang.String: void <init>(char[])>($r3);

        specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>($r20);

        if $r3 == null goto label1;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r16 = virtualinvoke $r21.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r16);

     label1:
        $r17 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: char[][] packageName>;

        if $r17 == null goto label2;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r22 = new java.lang.String;

        $c4 = <java.io.File: char separatorChar>;

        $r12 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r17, $c4);

        specialinvoke $r22.<java.lang.String: void <init>(char[])>($r12);

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("package", $r22);

     label2:
        $r13 = (org.eclipse.jdt.internal.compiler.batch.CompilationUnit) r2;

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.batch.CompilationUnit: java.lang.String destinationPath>;

        r18 = $r14;

        if $r14 != null goto label3;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: org.eclipse.jdt.internal.compiler.batch.Main main>;

        r18 = $r9.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String destinationPath>;

     label3:
        if r18 == null goto label5;

        if r18 == "none" goto label5;

        $c2 = <java.io.File: char separatorChar>;

        $i5 = (int) $c2;

        if $i5 != 47 goto label4;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("output", r18);

        goto label5;

     label4:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $c3 = <java.io.File: char separatorChar>;

        $r7 = virtualinvoke r18.<java.lang.String: java.lang.String replace(char,char)>(47, $c3);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("output", $r7);

     label5:
        $r19 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("source", $r19, 1, 0);

     label6:
        return;
    }

    public void startLoggingSources()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("sources", null, 1, 0);

     label1:
        return;
    }

    public void startLoggingTasks(int)
    {
        int $i0, $i1, i2;
        java.util.HashMap $r2, $r3;
        java.lang.Integer $r1;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        i2 := @parameter0: int;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i2);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("tasks", $r1);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: java.util.HashMap parameters>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printTag(java.lang.String,java.util.HashMap,boolean,boolean)>("tasks", $r3, 1, 0);

     label1:
        return;
    }
}
