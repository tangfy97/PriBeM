public class ucar.nc2.ft.point.PointIteratorFlatten extends ucar.nc2.ft.point.PointIteratorAbstract
{
    private ucar.nc2.ft.PointFeatureCollectionIterator collectionIter;
    private ucar.nc2.ft.point.PointIteratorAbstract$Filter filter;
    private ucar.nc2.ft.PointFeatureIterator pfiter;
    private ucar.nc2.ft.PointFeature pointFeature;
    private boolean finished;

    void <init>(ucar.nc2.ft.PointFeatureCollectionIterator, ucar.unidata.geoloc.LatLonRect, ucar.nc2.units.DateRange)
    {
        ucar.unidata.geoloc.LatLonRect r2;
        ucar.nc2.units.DateRange r4;
        ucar.nc2.ft.point.PointIteratorFlatten r0;
        ucar.nc2.ft.PointFeatureCollectionIterator r1;
        ucar.nc2.ft.point.PointIteratorAbstract$Filter $r3;

        r0 := @this: ucar.nc2.ft.point.PointIteratorFlatten;

        r1 := @parameter0: ucar.nc2.ft.PointFeatureCollectionIterator;

        r2 := @parameter1: ucar.unidata.geoloc.LatLonRect;

        r4 := @parameter2: ucar.nc2.units.DateRange;

        specialinvoke r0.<ucar.nc2.ft.point.PointIteratorAbstract: void <init>()>();

        r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.point.PointIteratorAbstract$Filter filter> = null;

        r0.<ucar.nc2.ft.point.PointIteratorFlatten: boolean finished> = 0;

        r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeatureCollectionIterator collectionIter> = r1;

        if r2 != null goto label1;

        if r4 == null goto label2;

     label1:
        $r3 = new ucar.nc2.ft.point.PointIteratorAbstract$Filter;

        specialinvoke $r3.<ucar.nc2.ft.point.PointIteratorAbstract$Filter: void <init>(ucar.unidata.geoloc.LatLonRect,ucar.nc2.units.DateRange)>(r2, r4);

        r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.point.PointIteratorAbstract$Filter filter> = $r3;

     label2:
        return;
    }

    public void setBufferSize(int)
    {
        int i0;
        ucar.nc2.ft.PointFeatureCollectionIterator $r1;
        ucar.nc2.ft.point.PointIteratorFlatten r0;

        r0 := @this: ucar.nc2.ft.point.PointIteratorFlatten;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeatureCollectionIterator collectionIter>;

        interfaceinvoke $r1.<ucar.nc2.ft.PointFeatureCollectionIterator: void setBufferSize(int)>(i0);

        return;
    }

    public void finish()
    {
        ucar.nc2.ft.PointFeatureIterator $r1, $r3;
        ucar.nc2.ft.point.PointIteratorFlatten r0;
        ucar.nc2.ft.PointFeatureCollectionIterator $r2;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.point.PointIteratorFlatten;

        $z0 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: boolean finished>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeatureIterator pfiter>;

        if $r1 == null goto label2;

        $r3 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeatureIterator pfiter>;

        interfaceinvoke $r3.<ucar.nc2.ft.PointFeatureIterator: void finish()>();

     label2:
        $r2 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeatureCollectionIterator collectionIter>;

        interfaceinvoke $r2.<ucar.nc2.ft.PointFeatureCollectionIterator: void finish()>();

        virtualinvoke r0.<ucar.nc2.ft.point.PointIteratorFlatten: void finishCalcBounds()>();

        r0.<ucar.nc2.ft.point.PointIteratorFlatten: boolean finished> = 1;

        return;
    }

    public boolean hasNext() throws java.io.IOException
    {
        ucar.nc2.ft.PointFeatureIterator $r4;
        ucar.nc2.ft.PointFeature $r1, $r2;
        ucar.nc2.ft.point.PointIteratorFlatten r0;
        ucar.nc2.ft.PointFeatureCollection $r3;
        int $i1;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.point.PointIteratorFlatten;

        $r1 = specialinvoke r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeature nextFilteredDataPoint()>();

        r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeature pointFeature> = $r1;

        $r2 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeature pointFeature>;

        if $r2 == null goto label1;

        return 1;

     label1:
        $r3 = specialinvoke r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeatureCollection nextCollection()>();

        if $r3 != null goto label2;

        virtualinvoke r0.<ucar.nc2.ft.point.PointIteratorFlatten: void finish()>();

        return 0;

     label2:
        $i1 = (int) -1;

        $r4 = interfaceinvoke $r3.<ucar.nc2.ft.PointFeatureCollection: ucar.nc2.ft.PointFeatureIterator getPointFeatureIterator(int)>($i1);

        r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeatureIterator pfiter> = $r4;

        $z0 = virtualinvoke r0.<ucar.nc2.ft.point.PointIteratorFlatten: boolean hasNext()>();

        return $z0;
    }

    public ucar.nc2.ft.PointFeature next() throws java.io.IOException
    {
        ucar.nc2.ft.PointFeature $r1, $r2, $r3;
        ucar.nc2.ft.point.PointIteratorFlatten r0;

        r0 := @this: ucar.nc2.ft.point.PointIteratorFlatten;

        $r1 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeature pointFeature>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeature pointFeature>;

        virtualinvoke r0.<ucar.nc2.ft.point.PointIteratorFlatten: void calcBounds(ucar.nc2.ft.PointFeature)>($r2);

        $r3 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeature pointFeature>;

        return $r3;
    }

    private ucar.nc2.ft.PointFeatureCollection nextCollection() throws java.io.IOException
    {
        ucar.nc2.ft.point.PointIteratorFlatten r0;
        ucar.nc2.ft.PointFeatureCollection $r3;
        ucar.nc2.ft.PointFeatureCollectionIterator $r1, $r2;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.point.PointIteratorFlatten;

        $r1 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeatureCollectionIterator collectionIter>;

        $z0 = interfaceinvoke $r1.<ucar.nc2.ft.PointFeatureCollectionIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeatureCollectionIterator collectionIter>;

        $r3 = interfaceinvoke $r2.<ucar.nc2.ft.PointFeatureCollectionIterator: ucar.nc2.ft.PointFeatureCollection next()>();

        return $r3;
    }

    private ucar.nc2.ft.PointFeature nextFilteredDataPoint() throws java.io.IOException
    {
        ucar.nc2.ft.point.PointIteratorFlatten r0;
        ucar.nc2.ft.PointFeatureIterator $r1, $r2, $r3, $r7, $r8;
        ucar.nc2.ft.PointFeature $r4, r9;
        ucar.nc2.ft.point.PointIteratorAbstract$Filter $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: ucar.nc2.ft.point.PointIteratorFlatten;

        $r1 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeatureIterator pfiter>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeatureIterator pfiter>;

        $z0 = interfaceinvoke $r2.<ucar.nc2.ft.PointFeatureIterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return null;

     label2:
        $r3 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeatureIterator pfiter>;

        $r4 = interfaceinvoke $r3.<ucar.nc2.ft.PointFeatureIterator: ucar.nc2.ft.PointFeature next()>();

        r9 = $r4;

        $r5 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.point.PointIteratorAbstract$Filter filter>;

        if $r5 != null goto label3;

        return $r4;

     label3:
        $r6 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.point.PointIteratorAbstract$Filter filter>;

        $z1 = virtualinvoke $r6.<ucar.nc2.ft.point.PointIteratorAbstract$Filter: boolean filter(ucar.nc2.ft.PointFeature)>(r9);

        if $z1 != 0 goto label5;

        $r7 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeatureIterator pfiter>;

        $z2 = interfaceinvoke $r7.<ucar.nc2.ft.PointFeatureIterator: boolean hasNext()>();

        if $z2 != 0 goto label4;

        return null;

     label4:
        $r8 = r0.<ucar.nc2.ft.point.PointIteratorFlatten: ucar.nc2.ft.PointFeatureIterator pfiter>;

        r9 = interfaceinvoke $r8.<ucar.nc2.ft.PointFeatureIterator: ucar.nc2.ft.PointFeature next()>();

        goto label3;

     label5:
        return r9;
    }
}
