class org.apache.batik.svggen.XmlWriter extends java.lang.Object implements org.apache.batik.util.SVGConstants
{
    private static java.lang.String EOL;
    private static final java.lang.String TAG_END;
    private static final java.lang.String TAG_START;
    private static final char[] SPACES;
    private static final int SPACES_LEN;

    void <init>()
    {
        org.apache.batik.svggen.XmlWriter r0;

        r0 := @this: org.apache.batik.svggen.XmlWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void writeXml(org.w3c.dom.Attr, org.apache.batik.svggen.XmlWriter$IndentWriter, boolean) throws java.io.IOException
    {
        org.apache.batik.svggen.XmlWriter$IndentWriter r2;
        java.lang.String $r1;
        org.w3c.dom.Attr r0;
        boolean z0;

        r0 := @parameter0: org.w3c.dom.Attr;

        r2 := @parameter1: org.apache.batik.svggen.XmlWriter$IndentWriter;

        z0 := @parameter2: boolean;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Attr: java.lang.String getName()>();

        virtualinvoke r2.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>($r1);

        virtualinvoke r2.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("=\"");

        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeChildrenXml(org.w3c.dom.Attr,org.apache.batik.svggen.XmlWriter$IndentWriter,boolean)>(r0, r2, z0);

        virtualinvoke r2.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(int)>(34);

        return;
    }

    private static void writeChildrenXml(org.w3c.dom.Attr, org.apache.batik.svggen.XmlWriter$IndentWriter, boolean) throws java.io.IOException
    {
        boolean z0;
        org.w3c.dom.Attr r0;
        java.lang.StringBuffer $r5, $r7, $r10, $r12, $r13, $r15, $r16;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13, $i14, $i15;
        java.lang.String $r1, $r6, $r8, $r11, $r14;
        char c1;
        org.apache.batik.svggen.XmlWriter$IndentWriter r3;
        char[] $r2;

        r0 := @parameter0: org.w3c.dom.Attr;

        r3 := @parameter1: org.apache.batik.svggen.XmlWriter$IndentWriter;

        z0 := @parameter2: boolean;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Attr: java.lang.String getValue()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        if $r2 != null goto label01;

        return;

     label01:
        i0 = lengthof $r2;

        i11 = 0;

        i12 = 0;

        goto label10;

     label02:
        c1 = $r2[i12];

        $i13 = (int) c1;

        lookupswitch($i13)
        {
            case 34: goto label07;
            case 38: goto label05;
            case 39: goto label06;
            case 60: goto label03;
            case 62: goto label04;
            default: goto label08;
        };

     label03:
        $i3 = i12 - i11;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i11, $i3);

        i11 = i12 + 1;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("&lt;");

        goto label09;

     label04:
        $i2 = i12 - i11;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i11, $i2);

        i11 = i12 + 1;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("&gt;");

        goto label09;

     label05:
        $i5 = i12 - i11;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i11, $i5);

        i11 = i12 + 1;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("&amp;");

        goto label09;

     label06:
        $i4 = i12 - i11;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i11, $i4);

        i11 = i12 + 1;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("&apos;");

        goto label09;

     label07:
        $i6 = i12 - i11;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i11, $i6);

        i11 = i12 + 1;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("&quot;");

        goto label09;

     label08:
        if z0 == 0 goto label09;

        $i14 = (int) c1;

        if $i14 <= 127 goto label09;

        $i7 = i12 - i11;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i11, $i7);

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0000");

        $i15 = (int) c1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i15);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#x");

        $i8 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i9 = $i8 - 4;

        $r11 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>($i9);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>($r14);

        i11 = i12 + 1;

     label09:
        i12 = i12 + 1;

     label10:
        if i12 < i0 goto label02;

        $i10 = i12 - i11;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i11, $i10);

        return;
    }

    private static void writeXml(org.w3c.dom.Comment, org.apache.batik.svggen.XmlWriter$IndentWriter, boolean) throws java.io.IOException
    {
        org.apache.batik.svggen.XmlWriter$IndentWriter r3;
        char c1;
        org.w3c.dom.Comment r0;
        int i0, $i2, $i3, i4, i5, $i6;
        char[] $r2;
        java.lang.String $r1;
        boolean z0, z1, z2, z3;

        r0 := @parameter0: org.w3c.dom.Comment;

        r3 := @parameter1: org.apache.batik.svggen.XmlWriter$IndentWriter;

        z0 := @parameter2: boolean;

        $r1 = interfaceinvoke r0.<org.w3c.dom.CharacterData: java.lang.String getData()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        if $r2 != null goto label1;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("<!---->");

        return;

     label1:
        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("<!--");

        z1 = 0;

        z3 = 0;

        z2 = 0;

        i0 = lengthof $r2;

        i4 = 0;

        i5 = 0;

        goto label6;

     label2:
        c1 = $r2[i5];

        $i6 = (int) c1;

        if $i6 != 45 goto label4;

        if z2 == 0 goto label3;

        $i2 = i5 - i4;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i4, $i2);

        i4 = i5;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(int)>(32);

     label3:
        z1 = 1;

        z3 = 1;

        z2 = 1;

        goto label5;

     label4:
        z1 = 0;

        z3 = 0;

        z2 = 0;

     label5:
        i5 = i5 + 1;

     label6:
        if i5 < i0 goto label2;

        $i3 = i5 - i4;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i4, $i3);

        if z3 == 0 goto label7;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(int)>(32);

     label7:
        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("-->");

        return;
    }

    private static void writeXml(org.w3c.dom.Text, org.apache.batik.svggen.XmlWriter$IndentWriter, boolean) throws java.io.IOException
    {
        org.w3c.dom.Text r0;
        org.apache.batik.svggen.XmlWriter$IndentWriter r1;
        boolean z0;

        r0 := @parameter0: org.w3c.dom.Text;

        r1 := @parameter1: org.apache.batik.svggen.XmlWriter$IndentWriter;

        z0 := @parameter2: boolean;

        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeXml(org.w3c.dom.Text,org.apache.batik.svggen.XmlWriter$IndentWriter,boolean,boolean)>(r0, r1, 0, z0);

        return;
    }

    private static void writeXml(org.w3c.dom.Text, org.apache.batik.svggen.XmlWriter$IndentWriter, boolean, boolean) throws java.io.IOException
    {
        org.w3c.dom.Text r0;
        boolean z0, z1;
        java.lang.StringBuffer $r5, $r7, $r10, $r12, $r13, $r16, $r17;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, i10, i11, i14, $i15, $i16, $i17, $i18, $i19;
        java.lang.String $r1, $r6, $r8, $r11, $r14;
        java.io.PrintStream $r15;
        org.apache.batik.svggen.XmlWriter$IndentWriter r3;
        char $c4, c12, c13;
        char[] $r2;

        r0 := @parameter0: org.w3c.dom.Text;

        r3 := @parameter1: org.apache.batik.svggen.XmlWriter$IndentWriter;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r1 = interfaceinvoke r0.<org.w3c.dom.CharacterData: java.lang.String getData()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        if $r2 != null goto label01;

        $r15 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>("Null text data??");

        return;

     label01:
        i0 = lengthof $r2;

        i10 = 0;

        i11 = 0;

        if z0 == 0 goto label19;

        goto label05;

     label02:
        c12 = $r2[i11];

        $i15 = (int) c12;

        lookupswitch($i15)
        {
            case 9: goto label03;
            case 10: goto label03;
            case 13: goto label03;
            case 32: goto label03;
            default: goto label04;
        };

     label03:
        i11 = i11 + 1;

        goto label05;

     label04:
        goto label06;

     label05:
        if i11 < i0 goto label02;

     label06:
        i10 = i11;

        goto label19;

     label07:
        c13 = $r2[i11];

        $i16 = (int) c13;

        lookupswitch($i16)
        {
            case 9: goto label08;
            case 10: goto label08;
            case 13: goto label08;
            case 32: goto label08;
            case 38: goto label16;
            case 60: goto label14;
            case 62: goto label15;
            default: goto label17;
        };

     label08:
        if z0 == 0 goto label18;

        i14 = i11;

        i11 = i11 + 1;

        goto label12;

     label09:
        $c4 = $r2[i11];

        $i17 = (int) $c4;

        lookupswitch($i17)
        {
            case 9: goto label10;
            case 10: goto label10;
            case 13: goto label10;
            case 32: goto label10;
            default: goto label11;
        };

     label10:
        i11 = i11 + 1;

        goto label12;

     label11:
        goto label13;

     label12:
        if i11 < i0 goto label09;

     label13:
        if i11 != i0 goto label19;

        $i5 = i14 - i10;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i10, $i5);

        return;

     label14:
        $i2 = i11 - i10;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i10, $i2);

        i10 = i11 + 1;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("&lt;");

        goto label18;

     label15:
        $i1 = i11 - i10;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i10, $i1);

        i10 = i11 + 1;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("&gt;");

        goto label18;

     label16:
        $i3 = i11 - i10;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i10, $i3);

        i10 = i11 + 1;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("&amp;");

        goto label18;

     label17:
        if z1 == 0 goto label18;

        $i18 = (int) c13;

        if $i18 <= 127 goto label18;

        $i6 = i11 - i10;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i10, $i6);

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0000");

        $i19 = (int) c13;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i19);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#x");

        $i7 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i8 = $i7 - 4;

        $r11 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>($i8);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>($r14);

        i10 = i11 + 1;

     label18:
        i11 = i11 + 1;

     label19:
        if i11 < i0 goto label07;

        $i9 = i11 - i10;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i10, $i9);

        return;
    }

    private static void writeXml(org.w3c.dom.CDATASection, org.apache.batik.svggen.XmlWriter$IndentWriter, boolean) throws java.io.IOException
    {
        org.w3c.dom.CDATASection r0;
        int i0, $i2, $i3, $i4, $i6, $i8, $i9, i10, i11, $i12, $i13, $i14;
        java.lang.String $r1;
        boolean z0;
        org.apache.batik.svggen.XmlWriter$IndentWriter r3;
        char c1, $c5, $c7;
        char[] $r2;

        r0 := @parameter0: org.w3c.dom.CDATASection;

        r3 := @parameter1: org.apache.batik.svggen.XmlWriter$IndentWriter;

        z0 := @parameter2: boolean;

        $r1 = interfaceinvoke r0.<org.w3c.dom.CharacterData: java.lang.String getData()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        if $r2 != null goto label1;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("<![CDATA[]]>");

        return;

     label1:
        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("<![CDATA[");

        i0 = lengthof $r2;

        i10 = 0;

        i11 = 0;

        goto label4;

     label2:
        c1 = $r2[i11];

        $i12 = (int) c1;

        if $i12 != 93 goto label3;

        $i3 = i11 + 2;

        $i2 = lengthof $r2;

        if $i3 >= $i2 goto label3;

        $i4 = i11 + 1;

        $c5 = $r2[$i4];

        $i13 = (int) $c5;

        if $i13 != 93 goto label3;

        $i6 = i11 + 2;

        $c7 = $r2[$i6];

        $i14 = (int) $c7;

        if $i14 != 62 goto label3;

        $i8 = i11 - i10;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i10, $i8);

        i10 = i11 + 1;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("]]]]><![CDATA[>");

        goto label4;

     label3:
        i11 = i11 + 1;

     label4:
        if i11 < i0 goto label2;

        $i9 = i11 - i10;

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(char[],int,int)>($r2, i10, $i9);

        virtualinvoke r3.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("]]>");

        return;
    }

    private static void writeXml(org.w3c.dom.Element, org.apache.batik.svggen.XmlWriter$IndentWriter, boolean) throws java.io.IOException, org.apache.batik.svggen.SVGGraphics2DIOException
    {
        org.w3c.dom.Attr r9;
        short $s0;
        org.w3c.dom.Node $r4, $r5, $r6, $r7, $r8;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9;
        org.w3c.dom.NamedNodeMap $r3;
        java.lang.String $r2, $r10;
        boolean $z0, z1, z3, $z4, $z5;
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;
        org.w3c.dom.Element r1;

        r1 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.apache.batik.svggen.XmlWriter$IndentWriter;

        z1 := @parameter2: boolean;

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String,int,int)>("</", 0, 1);

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getTagName()>();

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>($r2);

        $r3 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        if $r3 == null goto label03;

        $i7 = interfaceinvoke $r3.<org.w3c.dom.NamedNodeMap: int getLength()>();

        i8 = 0;

        goto label02;

     label01:
        $r8 = interfaceinvoke $r3.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i8);

        r9 = (org.w3c.dom.Attr) $r8;

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(int)>(32);

        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeXml(org.w3c.dom.Attr,org.apache.batik.svggen.XmlWriter$IndentWriter,boolean)>(r9, r0, z1);

        i8 = i8 + 1;

     label02:
        if i8 < $i7 goto label01;

     label03:
        $r4 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Node: org.w3c.dom.Node getLastChild()>();

        if $r5 != r1 goto label04;

        $z5 = 1;

        $z4 = 1;

        goto label05;

     label04:
        $z5 = 0;

        $z4 = 0;

     label05:
        z3 = $z4;

        $z0 = interfaceinvoke r1.<org.w3c.dom.Node: boolean hasChildNodes()>();

        if $z0 != 0 goto label07;

        if $z5 == 0 goto label06;

        $i5 = virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int getIndentLevel()>();

        $i6 = $i5 - 2;

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void setIndentLevel(int)>($i6);

     label06:
        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void printIndent()>();

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String,int,int)>("/>", 0, 2);

        return;

     label07:
        $r6 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void printIndent()>();

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String,int,int)>("/>", 1, 1);

        $s0 = interfaceinvoke $r6.<org.w3c.dom.Node: short getNodeType()>();

        $i9 = (int) $s0;

        if $i9 != 3 goto label08;

        $r7 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getLastChild()>();

        if $r7 == $r6 goto label09;

     label08:
        $i1 = virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int getIndentLevel()>();

        $i2 = $i1 + 2;

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void setIndentLevel(int)>($i2);

     label09:
        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeChildrenXml(org.w3c.dom.Element,org.apache.batik.svggen.XmlWriter$IndentWriter,boolean)>(r1, r0, z1);

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String,int,int)>("</", 0, 2);

        $r10 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getTagName()>();

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>($r10);

        if z3 == 0 goto label10;

        $i3 = virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int getIndentLevel()>();

        $i4 = $i3 - 2;

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void setIndentLevel(int)>($i4);

     label10:
        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void printIndent()>();

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String,int,int)>("/>", 1, 1);

        return;
    }

    private static void writeChildrenXml(org.w3c.dom.Element, org.apache.batik.svggen.XmlWriter$IndentWriter, boolean) throws java.io.IOException, org.apache.batik.svggen.SVGGraphics2DIOException
    {
        org.w3c.dom.Element r0;
        org.w3c.dom.Node r2;
        org.apache.batik.svggen.XmlWriter$IndentWriter r1;
        boolean z0;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: org.apache.batik.svggen.XmlWriter$IndentWriter;

        z0 := @parameter2: boolean;

        r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label2;

     label1:
        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeXml(org.w3c.dom.Node,java.io.Writer,boolean)>(r2, r1, z0);

        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label2:
        if r2 != null goto label1;

        return;
    }

    private static void writeDocumentHeader(org.apache.batik.svggen.XmlWriter$IndentWriter) throws java.io.IOException
    {
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;
        java.io.Writer $r1, $r5;
        java.io.OutputStreamWriter r6;
        java.lang.String $r2, $r3, $r4, $r7, r8;
        boolean $z0;

        r0 := @parameter0: org.apache.batik.svggen.XmlWriter$IndentWriter;

        r8 = null;

        $r1 = virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: java.io.Writer getProxied()>();

        $z0 = $r1 instanceof java.io.OutputStreamWriter;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: java.io.Writer getProxied()>();

        r6 = (java.io.OutputStreamWriter) $r5;

        $r7 = virtualinvoke r6.<java.io.OutputStreamWriter: java.lang.String getEncoding()>();

        r8 = staticinvoke <org.apache.batik.svggen.XmlWriter: java.lang.String java2std(java.lang.String)>($r7);

     label1:
        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("<?xml version=\"1.0\"");

        if r8 == null goto label2;

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>(" encoding=\"");

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>(r8);

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(int)>(34);

     label2:
        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("?>");

        $r2 = <org.apache.batik.svggen.XmlWriter: java.lang.String EOL>;

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>($r2);

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("<!DOCTYPE svg PUBLIC \'");

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("-//W3C//DTD SVG 1.0//EN");

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("\'");

        $r3 = <org.apache.batik.svggen.XmlWriter: java.lang.String EOL>;

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>($r3);

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("          \'");

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd");

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>("\'");

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>(">");

        $r4 = <org.apache.batik.svggen.XmlWriter: java.lang.String EOL>;

        virtualinvoke r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>($r4);

        return;
    }

    private static void writeXml(org.w3c.dom.Document, org.apache.batik.svggen.XmlWriter$IndentWriter, boolean) throws java.io.IOException, org.apache.batik.svggen.SVGGraphics2DIOException
    {
        org.w3c.dom.NodeList $r2;
        org.w3c.dom.Document r1;
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;
        boolean z0;

        r1 := @parameter0: org.w3c.dom.Document;

        r0 := @parameter1: org.apache.batik.svggen.XmlWriter$IndentWriter;

        z0 := @parameter2: boolean;

        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeDocumentHeader(org.apache.batik.svggen.XmlWriter$IndentWriter)>(r0);

        $r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeXml(org.w3c.dom.NodeList,org.apache.batik.svggen.XmlWriter$IndentWriter,boolean)>($r2, r0, z0);

        return;
    }

    private static void writeXml(org.w3c.dom.NodeList, org.apache.batik.svggen.XmlWriter$IndentWriter, boolean) throws java.io.IOException, org.apache.batik.svggen.SVGGraphics2DIOException
    {
        org.w3c.dom.NodeList r0;
        org.w3c.dom.Node $r1;
        int $i0, i1;
        org.apache.batik.svggen.XmlWriter$IndentWriter r2;
        java.lang.String $r3;
        boolean z0;

        r0 := @parameter0: org.w3c.dom.NodeList;

        r2 := @parameter1: org.apache.batik.svggen.XmlWriter$IndentWriter;

        z0 := @parameter2: boolean;

        $i0 = interfaceinvoke r0.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        i1 = 0;

        goto label3;

     label2:
        $r1 = interfaceinvoke r0.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeXml(org.w3c.dom.Node,java.io.Writer,boolean)>($r1, r2, z0);

        $r3 = <org.apache.batik.svggen.XmlWriter: java.lang.String EOL>;

        virtualinvoke r2.<org.apache.batik.svggen.XmlWriter$IndentWriter: void write(java.lang.String)>($r3);

        i1 = i1 + 1;

     label3:
        if i1 < $i0 goto label2;

        return;
    }

    static java.lang.String java2std(java.lang.String)
    {
        java.lang.StringBuffer $r7, $r8, $r10, $r12, $r13, $r15;
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, $r6, $r9, $r11, $r14, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return null;

     label01:
        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("ISO8859_");

        if $z0 == 0 goto label02;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ISO-8859-");

        $r14 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(8);

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;

     label02:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("8859_");

        if $z1 == 0 goto label03;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ISO-8859-");

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(5);

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;

     label03:
        $r1 = "ASCII7";

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 != 0 goto label04;

        $r2 = "ASCII";

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label05;

     label04:
        return "US-ASCII";

     label05:
        $r3 = "UTF8";

        $z4 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z4 == 0 goto label06;

        return "UTF-8";

     label06:
        $z5 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("Unicode");

        if $z5 == 0 goto label07;

        return "UTF-16";

     label07:
        $r4 = "SJIS";

        $z6 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z6 == 0 goto label08;

        return "Shift_JIS";

     label08:
        $r5 = "JIS";

        $z7 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z7 == 0 goto label09;

        return "ISO-2022-JP";

     label09:
        $r6 = "EUCJIS";

        $z8 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z8 == 0 goto label10;

        return "EUC-JP";

     label10:
        return "UTF-8";
    }

    public static void writeXml(org.w3c.dom.Node, java.io.Writer, boolean) throws org.apache.batik.svggen.SVGGraphics2DIOException
    {
        org.w3c.dom.Text $r7;
        org.w3c.dom.Attr $r8;
        org.apache.batik.svggen.SVGGraphics2DRuntimeException $r22;
        short $s0;
        org.w3c.dom.Document $r4;
        java.lang.StringBuffer $r12, $r15, $r21;
        org.w3c.dom.Node r2;
        org.w3c.dom.CDATASection $r6;
        int $i1;
        java.lang.String $r14, $r16;
        boolean $z0, z1;
        org.w3c.dom.NodeList $r3;
        org.apache.batik.svggen.SVGGraphics2DIOException $r23;
        java.io.IOException $r17;
        org.apache.batik.svggen.XmlWriter$IndentWriter r19, $r20;
        org.w3c.dom.Comment $r5;
        org.w3c.dom.Element $r9;
        java.io.Writer r0;
        java.lang.Class $r13;

        r2 := @parameter0: org.w3c.dom.Node;

        r0 := @parameter1: java.io.Writer;

        z1 := @parameter2: boolean;

     label01:
        $z0 = r0 instanceof org.apache.batik.svggen.XmlWriter$IndentWriter;

        if $z0 == 0 goto label02;

        r19 = (org.apache.batik.svggen.XmlWriter$IndentWriter) r0;

        goto label03;

     label02:
        $r20 = new org.apache.batik.svggen.XmlWriter$IndentWriter;

        specialinvoke $r20.<org.apache.batik.svggen.XmlWriter$IndentWriter: void <init>(java.io.Writer)>(r0);

        r19 = $r20;

     label03:
        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 1: goto label10;
            case 2: goto label04;
            case 3: goto label06;
            case 4: goto label07;
            case 5: goto label11;
            case 6: goto label11;
            case 7: goto label11;
            case 8: goto label05;
            case 9: goto label08;
            case 10: goto label11;
            case 11: goto label09;
            default: goto label11;
        };

     label04:
        $r8 = (org.w3c.dom.Attr) r2;

        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeXml(org.w3c.dom.Attr,org.apache.batik.svggen.XmlWriter$IndentWriter,boolean)>($r8, r19, z1);

        goto label12;

     label05:
        $r5 = (org.w3c.dom.Comment) r2;

        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeXml(org.w3c.dom.Comment,org.apache.batik.svggen.XmlWriter$IndentWriter,boolean)>($r5, r19, z1);

        goto label12;

     label06:
        $r7 = (org.w3c.dom.Text) r2;

        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeXml(org.w3c.dom.Text,org.apache.batik.svggen.XmlWriter$IndentWriter,boolean)>($r7, r19, z1);

        goto label12;

     label07:
        $r6 = (org.w3c.dom.CDATASection) r2;

        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeXml(org.w3c.dom.CDATASection,org.apache.batik.svggen.XmlWriter$IndentWriter,boolean)>($r6, r19, z1);

        goto label12;

     label08:
        $r4 = (org.w3c.dom.Document) r2;

        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeXml(org.w3c.dom.Document,org.apache.batik.svggen.XmlWriter$IndentWriter,boolean)>($r4, r19, z1);

        goto label12;

     label09:
        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeDocumentHeader(org.apache.batik.svggen.XmlWriter$IndentWriter)>(r19);

        $r3 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeXml(org.w3c.dom.NodeList,org.apache.batik.svggen.XmlWriter$IndentWriter,boolean)>($r3, r19, z1);

        goto label12;

     label10:
        $r9 = (org.w3c.dom.Element) r2;

        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeXml(org.w3c.dom.Element,org.apache.batik.svggen.XmlWriter$IndentWriter,boolean)>($r9, r19, z1);

        goto label12;

     label11:
        $r22 = new org.apache.batik.svggen.SVGGraphics2DRuntimeException;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to write node of type ");

        $r13 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.batik.svggen.SVGGraphics2DRuntimeException: void <init>(java.lang.String)>($r16);

        throw $r22;

     label12:
        goto label14;

     label13:
        $r17 := @caughtexception;

        $r23 = new org.apache.batik.svggen.SVGGraphics2DIOException;

        specialinvoke $r23.<org.apache.batik.svggen.SVGGraphics2DIOException: void <init>(java.io.IOException)>($r17);

        throw $r23;

     label14:
        return;

        catch java.io.IOException from label01 to label12 with label13;
    }

    static java.lang.String access$000()
    {
        java.lang.String $r0;

        $r0 = <org.apache.batik.svggen.XmlWriter: java.lang.String EOL>;

        return $r0;
    }

    static int access$100()
    {
        int $i0;

        $i0 = <org.apache.batik.svggen.XmlWriter: int SPACES_LEN>;

        return $i0;
    }

    static char[] access$200()
    {
        char[] $r0;

        $r0 = <org.apache.batik.svggen.XmlWriter: char[] SPACES>;

        return $r0;
    }

    static void <clinit>()
    {
        int $i0;
        char[] $r0, $r1;
        java.lang.SecurityException $r2;
        java.lang.String r3;

        <org.apache.batik.svggen.XmlWriter: java.lang.String TAG_START> = "</";

        <org.apache.batik.svggen.XmlWriter: java.lang.String TAG_END> = "/>";

        $r0 = newarray (char)[30];

        $r0[0] = 32;

        $r0[1] = 32;

        $r0[2] = 32;

        $r0[3] = 32;

        $r0[4] = 32;

        $r0[5] = 32;

        $r0[6] = 32;

        $r0[7] = 32;

        $r0[8] = 32;

        $r0[9] = 32;

        $r0[10] = 32;

        $r0[11] = 32;

        $r0[12] = 32;

        $r0[13] = 32;

        $r0[14] = 32;

        $r0[15] = 32;

        $r0[16] = 32;

        $r0[17] = 32;

        $r0[18] = 32;

        $r0[19] = 32;

        $r0[20] = 32;

        $r0[21] = 32;

        $r0[22] = 32;

        $r0[23] = 32;

        $r0[24] = 32;

        $r0[25] = 32;

        $r0[26] = 32;

        $r0[27] = 32;

        $r0[28] = 32;

        $r0[29] = 32;

        <org.apache.batik.svggen.XmlWriter: char[] SPACES> = $r0;

        $r1 = <org.apache.batik.svggen.XmlWriter: char[] SPACES>;

        $i0 = lengthof $r1;

        <org.apache.batik.svggen.XmlWriter: int SPACES_LEN> = $i0;

     label1:
        r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("line.separator", "\n");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r3 = "\n";

     label4:
        <org.apache.batik.svggen.XmlWriter: java.lang.String EOL> = r3;

        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }
}
