public class ucar.ma2.Index1D extends ucar.ma2.Index
{
    private int curr0;
    private int stride0;
    private int shape0;

    void <init>()
    {
        ucar.ma2.Index1D r0;

        r0 := @this: ucar.ma2.Index1D;

        specialinvoke r0.<ucar.ma2.Index: void <init>(int)>(1);

        return;
    }

    public void <init>(int[])
    {
        ucar.ma2.Index1D r0;
        int[] r1;

        r0 := @this: ucar.ma2.Index1D;

        r1 := @parameter0: int[];

        specialinvoke r0.<ucar.ma2.Index: void <init>(int[])>(r1);

        virtualinvoke r0.<ucar.ma2.Index1D: void precalc()>();

        return;
    }

    public java.lang.String toString()
    {
        int $i0;
        ucar.ma2.Index1D r0;
        java.lang.String $r1;

        r0 := @this: ucar.ma2.Index1D;

        $i0 = r0.<ucar.ma2.Index1D: int curr0>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        return $r1;
    }

    protected void precalc()
    {
        ucar.ma2.Index1D r0;
        int[] $r1, $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: ucar.ma2.Index1D;

        $r1 = r0.<ucar.ma2.Index1D: int[] shape>;

        $i0 = $r1[0];

        r0.<ucar.ma2.Index1D: int shape0> = $i0;

        $r2 = r0.<ucar.ma2.Index1D: int[] stride>;

        $i1 = $r2[0];

        r0.<ucar.ma2.Index1D: int stride0> = $i1;

        $r3 = r0.<ucar.ma2.Index1D: int[] current>;

        $i2 = $r3[0];

        r0.<ucar.ma2.Index1D: int curr0> = $i2;

        return;
    }

    public int[] getCurrentCounter()
    {
        ucar.ma2.Index1D r0;
        int[] $r1, $r2, $r4;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: ucar.ma2.Index1D;

        $r1 = r0.<ucar.ma2.Index1D: int[] current>;

        $i0 = r0.<ucar.ma2.Index1D: int curr0>;

        $r1[0] = $i0;

        $r2 = r0.<ucar.ma2.Index1D: int[] current>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (int[]) $r3;

        return $r4;
    }

    public int currentElement()
    {
        ucar.ma2.Index1D r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: ucar.ma2.Index1D;

        $i3 = r0.<ucar.ma2.Index1D: int offset>;

        $i1 = r0.<ucar.ma2.Index1D: int curr0>;

        $i0 = r0.<ucar.ma2.Index1D: int stride0>;

        $i2 = $i1 * $i0;

        $i4 = $i3 + $i2;

        return $i4;
    }

    public int incr()
    {
        ucar.ma2.Index1D r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: ucar.ma2.Index1D;

        $i0 = r0.<ucar.ma2.Index1D: int curr0>;

        $i1 = $i0 + 1;

        r0.<ucar.ma2.Index1D: int curr0> = $i1;

        $i2 = r0.<ucar.ma2.Index1D: int shape0>;

        if $i1 < $i2 goto label1;

        r0.<ucar.ma2.Index1D: int curr0> = 0;

     label1:
        $i6 = r0.<ucar.ma2.Index1D: int offset>;

        $i4 = r0.<ucar.ma2.Index1D: int curr0>;

        $i3 = r0.<ucar.ma2.Index1D: int stride0>;

        $i5 = $i4 * $i3;

        $i7 = $i6 + $i5;

        return $i7;
    }

    public void setDim(int, int)
    {
        ucar.ma2.Index1D r1;
        int[] $r2;
        int i0, i1, $i2;
        java.lang.ArrayIndexOutOfBoundsException $r0;

        r1 := @this: ucar.ma2.Index1D;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $r2 = r1.<ucar.ma2.Index1D: int[] shape>;

        $i2 = $r2[i1];

        if i0 < $i2 goto label2;

     label1:
        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        r1.<ucar.ma2.Index1D: int curr0> = i0;

        return;
    }

    public ucar.ma2.Index set0(int)
    {
        ucar.ma2.Index1D r1;
        int i0, $i1;
        java.lang.ArrayIndexOutOfBoundsException $r0;

        r1 := @this: ucar.ma2.Index1D;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r1.<ucar.ma2.Index1D: int shape0>;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        r1.<ucar.ma2.Index1D: int curr0> = i0;

        return r1;
    }

    public ucar.ma2.Index set(int)
    {
        int i0;
        ucar.ma2.Index1D r0;

        r0 := @this: ucar.ma2.Index1D;

        i0 := @parameter0: int;

        virtualinvoke r0.<ucar.ma2.Index1D: ucar.ma2.Index set0(int)>(i0);

        return r0;
    }

    public ucar.ma2.Index set(int[])
    {
        ucar.ma2.Index1D r1;
        int[] r0;
        int $i0, $i1, $i2;
        java.lang.ArrayIndexOutOfBoundsException $r2;

        r1 := @this: ucar.ma2.Index1D;

        r0 := @parameter0: int[];

        $i1 = lengthof r0;

        $i0 = r1.<ucar.ma2.Index1D: int rank>;

        if $i1 == $i0 goto label1;

        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label1:
        $i2 = r0[0];

        virtualinvoke r1.<ucar.ma2.Index1D: ucar.ma2.Index set0(int)>($i2);

        return r1;
    }

    public java.lang.Object clone()
    {
        ucar.ma2.Index1D r0;
        java.lang.Object $r1;

        r0 := @this: ucar.ma2.Index1D;

        $r1 = specialinvoke r0.<ucar.ma2.Index: java.lang.Object clone()>();

        return $r1;
    }

    int setDirect(int)
    {
        ucar.ma2.Index1D r1;
        java.lang.ArrayIndexOutOfBoundsException $r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r1 := @this: ucar.ma2.Index1D;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r1.<ucar.ma2.Index1D: int shape0>;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        $i4 = r1.<ucar.ma2.Index1D: int offset>;

        $i2 = r1.<ucar.ma2.Index1D: int stride0>;

        $i3 = i0 * $i2;

        $i5 = $i4 + $i3;

        return $i5;
    }
}
