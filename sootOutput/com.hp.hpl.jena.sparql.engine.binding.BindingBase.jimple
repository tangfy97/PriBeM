public abstract class com.hp.hpl.jena.sparql.engine.binding.BindingBase extends java.lang.Object implements com.hp.hpl.jena.sparql.engine.binding.Binding
{
    static boolean CHECKING;
    static boolean UNIQUE_NAMES_CHECK;
    protected com.hp.hpl.jena.sparql.engine.binding.Binding parent;

    protected void <init>(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.engine.binding.BindingBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.sparql.engine.binding.Binding parent> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.engine.binding.Binding getParent()
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r1;
        com.hp.hpl.jena.sparql.engine.binding.BindingBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.sparql.engine.binding.Binding parent>;

        return $r1;
    }

    public final java.util.Iterator vars()
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r2, $r3;
        java.util.Iterator $r1, $r4, r5;
        com.hp.hpl.jena.sparql.engine.binding.BindingBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingBase;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: java.util.Iterator vars1()>();

        r5 = $r1;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.sparql.engine.binding.Binding parent>;

        if $r2 == null goto label1;

        $r3 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.sparql.engine.binding.Binding parent>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

        r5 = staticinvoke <org.apache.jena.atlas.iterator.IteratorConcat: java.util.Iterator concat(java.util.Iterator,java.util.Iterator)>($r4, $r1);

     label1:
        return r5;
    }

    protected abstract java.util.Iterator vars1();

    public final int size()
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r1, $r2;
        com.hp.hpl.jena.sparql.engine.binding.BindingBase r0;
        int $i0, $i1, i2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingBase;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: int size1()>();

        i2 = $i0;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.sparql.engine.binding.Binding parent>;

        if $r1 == null goto label1;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.sparql.engine.binding.Binding parent>;

        $i1 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.engine.binding.Binding: int size()>();

        i2 = $i0 + $i1;

     label1:
        return i2;
    }

    protected abstract int size1();

    public boolean isEmpty()
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r1, $r2;
        com.hp.hpl.jena.sparql.engine.binding.BindingBase r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingBase;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: boolean isEmpty1()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.sparql.engine.binding.Binding parent>;

        if $r1 != null goto label2;

        return 1;

     label2:
        $r2 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.sparql.engine.binding.Binding parent>;

        $z1 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.engine.binding.Binding: boolean isEmpty()>();

        return $z1;
    }

    protected abstract boolean isEmpty1();

    public boolean contains(com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r2, $r3;
        com.hp.hpl.jena.sparql.engine.binding.BindingBase r0;
        com.hp.hpl.jena.sparql.core.Var r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: boolean contains1(com.hp.hpl.jena.sparql.core.Var)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.sparql.engine.binding.Binding parent>;

        if $r2 != null goto label2;

        return 0;

     label2:
        $r3 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.sparql.engine.binding.Binding parent>;

        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.binding.Binding: boolean contains(com.hp.hpl.jena.sparql.core.Var)>(r1);

        return $z1;
    }

    protected abstract boolean contains1(com.hp.hpl.jena.sparql.core.Var);

    public final com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r3, $r4;
        com.hp.hpl.jena.sparql.engine.binding.BindingBase r0;
        com.hp.hpl.jena.graph.Node $r2, $r5;
        com.hp.hpl.jena.sparql.core.Var r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.graph.Node get1(com.hp.hpl.jena.sparql.core.Var)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.sparql.engine.binding.Binding parent>;

        if $r3 != null goto label2;

        return null;

     label2:
        $r4 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.sparql.engine.binding.Binding parent>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r1);

        return $r5;
    }

    protected abstract com.hp.hpl.jena.graph.Node get1(com.hp.hpl.jena.sparql.core.Var);

    public java.lang.String toString()
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r2, $r3;
        com.hp.hpl.jena.sparql.engine.binding.BindingBase r1;
        java.lang.StringBuffer $r0;
        int $i0;
        java.lang.String $r4, $r5;

        r1 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingBase;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: void format1(java.lang.StringBuffer)>($r0);

        $r2 = r1.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.sparql.engine.binding.Binding parent>;

        if $r2 == null goto label1;

        $r3 = r1.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.sparql.engine.binding.Binding parent>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        if $r4 == null goto label1;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" -> ");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label1:
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public void format1(java.lang.StringBuffer)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.engine.binding.BindingBase r0;
        java.lang.StringBuffer r4;
        java.lang.Object $r2;
        java.lang.String r5;
        com.hp.hpl.jena.sparql.core.Var r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingBase;

        r4 := @parameter0: java.lang.StringBuffer;

        r5 = "";

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: java.util.Iterator vars1()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.sparql.core.Var) $r2;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        r5 = " ";

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: void format(java.lang.StringBuffer,com.hp.hpl.jena.sparql.core.Var)>(r4, r3);

        goto label1;

     label2:
        return;
    }

    protected void format(java.lang.StringBuffer, com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.engine.binding.BindingBase r0;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.sparql.core.Var r1;
        java.lang.StringBuffer r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r10, $r11;
        java.lang.String $r3, $r7, $r12;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingBase;

        r4 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Var;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForObject(java.lang.Object)>($r2);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("( ?");

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getVarName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        return;
    }

    public java.lang.String toString1()
    {
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.engine.binding.BindingBase r1;
        java.lang.StringBuffer $r0;

        r1 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingBase;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: void format1(java.lang.StringBuffer)>($r0);

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public int hashCode()
    {
        int $i0;
        com.hp.hpl.jena.sparql.engine.binding.BindingBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingBase;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingBase: int hashCode(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r2;
        com.hp.hpl.jena.sparql.engine.binding.BindingBase r0;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingBase;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.hp.hpl.jena.sparql.engine.binding.Binding;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.hp.hpl.jena.sparql.engine.binding.Binding) r1;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingBase: boolean equals(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0, r2);

        return $z1;
    }

    public static int hashCode(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.graph.Node $r4;
        com.hp.hpl.jena.sparql.core.Var r3;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        int $i0, $i1, i2, i3;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        i2 = 192;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.sparql.core.Var) $r2;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r3);

        $i0 = virtualinvoke r3.<com.hp.hpl.jena.sparql.core.Var: int hashCode()>();

        i3 = i2 ^ $i0;

        $i1 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        i2 = i3 ^ $i1;

        goto label1;

     label2:
        return i2;
    }

    public static boolean equals(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.graph.Node $r5, $r6;
        com.hp.hpl.jena.sparql.core.Var r4;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0, r1;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $i0 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: int size()>();

        $i1 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.engine.binding.Binding: int size()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.core.Var) $r3;

        $r5 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r4);

        $r6 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r4);

        $z1 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equal(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        goto label3;

     label5:
        return 1;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.engine.binding.BindingBase: boolean CHECKING> = 1;

        <com.hp.hpl.jena.sparql.engine.binding.BindingBase: boolean UNIQUE_NAMES_CHECK> = 1;

        return;
    }
}
