public final class org.apache.jena.atlas.io.BufferingWriter extends java.io.Writer
{
    private static org.slf4j.Logger log;
    private static final int SIZE;
    private static final int BLOB_SIZE;
    private final int blockSize;
    private final int blobSize;
    private java.nio.ByteBuffer buffer;
    private org.apache.jena.atlas.lib.Sink out;
    private char[] oneChar;
    private final java.nio.charset.CharsetEncoder encoder;

    public void <init>(org.apache.jena.atlas.lib.Sink)
    {
        org.apache.jena.atlas.lib.Sink r1;
        org.apache.jena.atlas.io.BufferingWriter r0;

        r0 := @this: org.apache.jena.atlas.io.BufferingWriter;

        r1 := @parameter0: org.apache.jena.atlas.lib.Sink;

        specialinvoke r0.<org.apache.jena.atlas.io.BufferingWriter: void <init>(org.apache.jena.atlas.lib.Sink,int,int)>(r1, 8192, 4096);

        return;
    }

    void <init>(org.apache.jena.atlas.lib.Sink, int, int)
    {
        org.apache.jena.atlas.lib.Sink r3;
        java.nio.charset.CharsetEncoder $r4;
        org.apache.jena.atlas.io.BufferingWriter r0;
        int i0, i1;
        char[] $r2;
        java.nio.ByteBuffer $r1;

        r0 := @this: org.apache.jena.atlas.io.BufferingWriter;

        r3 := @parameter0: org.apache.jena.atlas.lib.Sink;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.io.Writer: void <init>()>();

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8192);

        r0.<org.apache.jena.atlas.io.BufferingWriter: java.nio.ByteBuffer buffer> = $r1;

        $r2 = newarray (char)[1];

        r0.<org.apache.jena.atlas.io.BufferingWriter: char[] oneChar> = $r2;

        r0.<org.apache.jena.atlas.io.BufferingWriter: org.apache.jena.atlas.lib.Sink out> = r3;

        r0.<org.apache.jena.atlas.io.BufferingWriter: int blockSize> = i0;

        r0.<org.apache.jena.atlas.io.BufferingWriter: int blobSize> = i1;

        $r4 = staticinvoke <org.apache.jena.atlas.lib.Chars: java.nio.charset.CharsetEncoder allocEncoder()>();

        r0.<org.apache.jena.atlas.io.BufferingWriter: java.nio.charset.CharsetEncoder encoder> = $r4;

        return;
    }

    public void output(java.lang.CharSequence)
    {
        org.apache.jena.atlas.lib.Sink $r5;
        java.lang.CharSequence r0;
        org.apache.jena.atlas.io.BufferingWriter r1;
        java.nio.ByteBuffer $r2, $r3;
        java.nio.charset.CharsetEncoder $r4;
        int $i0, $i1, $i2, $i3, $i4, i5;
        boolean z0, $z2, $z3;

        r1 := @this: org.apache.jena.atlas.io.BufferingWriter;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i5 = 4 * $i0;

        $i1 = r1.<org.apache.jena.atlas.io.BufferingWriter: int blobSize>;

        if i5 <= $i1 goto label1;

        $z3 = 1;

        $z2 = 1;

        goto label2;

     label1:
        $z3 = 0;

        $z2 = 0;

     label2:
        z0 = $z3;

        if $z2 != 0 goto label3;

        $i2 = r1.<org.apache.jena.atlas.io.BufferingWriter: int blockSize>;

        $i3 = specialinvoke r1.<org.apache.jena.atlas.io.BufferingWriter: int bufferSize()>();

        $i4 = $i2 - $i3;

        if $i4 >= i5 goto label4;

     label3:
        virtualinvoke r1.<org.apache.jena.atlas.io.BufferingWriter: void flush()>();

     label4:
        if z0 == 0 goto label5;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i5);

        $r4 = r1.<org.apache.jena.atlas.io.BufferingWriter: java.nio.charset.CharsetEncoder encoder>;

        staticinvoke <org.apache.jena.atlas.lib.Bytes: int toByteBuffer(java.lang.CharSequence,java.nio.ByteBuffer,java.nio.charset.CharsetEncoder)>(r0, $r3, $r4);

        $r5 = r1.<org.apache.jena.atlas.io.BufferingWriter: org.apache.jena.atlas.lib.Sink out>;

        staticinvoke <org.apache.jena.atlas.io.BufferingWriter: void send(org.apache.jena.atlas.lib.Sink,java.nio.ByteBuffer)>($r5, $r3);

        return;

     label5:
        $r2 = r1.<org.apache.jena.atlas.io.BufferingWriter: java.nio.ByteBuffer buffer>;

        staticinvoke <org.apache.jena.atlas.io.BlockUTF8: void fromChars(java.lang.CharSequence,java.nio.ByteBuffer)>(r0, $r2);

        return;
    }

    private int bufferSize()
    {
        int $i0;
        java.nio.ByteBuffer $r1;
        org.apache.jena.atlas.io.BufferingWriter r0;

        r0 := @this: org.apache.jena.atlas.io.BufferingWriter;

        $r1 = r0.<org.apache.jena.atlas.io.BufferingWriter: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        return $i0;
    }

    public void output(char[])
    {
        char[] r1;
        java.nio.CharBuffer $r2;
        org.apache.jena.atlas.io.BufferingWriter r0;

        r0 := @this: org.apache.jena.atlas.io.BufferingWriter;

        r1 := @parameter0: char[];

        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r1);

        virtualinvoke r0.<org.apache.jena.atlas.io.BufferingWriter: void output(java.lang.CharSequence)>($r2);

        return;
    }

    public void output(char[], int, int)
    {
        java.nio.CharBuffer $r2;
        org.apache.jena.atlas.io.BufferingWriter r0;
        int i0, i1;
        char[] r1;

        r0 := @this: org.apache.jena.atlas.io.BufferingWriter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<org.apache.jena.atlas.io.BufferingWriter: void output(java.lang.CharSequence)>($r2);

        return;
    }

    public void output(int)
    {
        org.apache.jena.atlas.io.BufferingWriter r0;
        int i0;
        char[] $r1, $r2, $r3;
        char $c1;

        r0 := @this: org.apache.jena.atlas.io.BufferingWriter;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.jena.atlas.io.BufferingWriter: char[] oneChar>;

        $c1 = (char) i0;

        $r1[0] = $c1;

        $r2 = r0.<org.apache.jena.atlas.io.BufferingWriter: char[] oneChar>;

        virtualinvoke r0.<org.apache.jena.atlas.io.BufferingWriter: void output(char[])>($r2);

        $r3 = r0.<org.apache.jena.atlas.io.BufferingWriter: char[] oneChar>;

        $r3[0] = 0;

        return;
    }

    private static void send(org.apache.jena.atlas.lib.Sink, java.nio.ByteBuffer)
    {
        java.io.PrintStream $r3, $r5;
        java.lang.Throwable $r11;
        byte[] $r4;
        org.apache.jena.atlas.lib.Sink r1;
        org.slf4j.Logger $r0, $r7;
        java.nio.ByteBuffer r2;
        int $i0, $i1;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        r1 := @parameter0: org.apache.jena.atlas.lib.Sink;

        r2 := @parameter1: java.nio.ByteBuffer;

        $r0 = <org.apache.jena.atlas.io.BufferingWriter: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r0.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = <org.apache.jena.atlas.io.BufferingWriter: org.slf4j.Logger log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("send: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>($r10);

     label1:
        if r1 != null goto label6;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>();

        $i1 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();

        virtualinvoke $r3.<java.io.PrintStream: void write(byte[],int,int)>($r4, 0, $i1);

     label2:
        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void flush()>();

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

     label5:
        return;

     label6:
        $i0 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();

        if $i0 != 0 goto label7;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lorg/apache/jena/atlas/io/BufferingWriter;", "Sending zero bytes");

     label7:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        interfaceinvoke r1.<org.apache.jena.atlas.lib.Sink: void send(java.lang.Object)>(r2);

        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private static void exception(java.io.IOException)
    {
        org.apache.jena.atlas.AtlasException $r0;
        java.io.IOException r1;

        r1 := @parameter0: java.io.IOException;

        $r0 = new org.apache.jena.atlas.AtlasException;

        specialinvoke $r0.<org.apache.jena.atlas.AtlasException: void <init>(java.lang.Throwable)>(r1);

        throw $r0;
    }

    public void close()
    {
        org.apache.jena.atlas.lib.Sink $r2;
        java.nio.charset.CharsetEncoder $r1;
        org.apache.jena.atlas.io.BufferingWriter r0;

        r0 := @this: org.apache.jena.atlas.io.BufferingWriter;

        virtualinvoke r0.<org.apache.jena.atlas.io.BufferingWriter: void flush()>();

        $r1 = r0.<org.apache.jena.atlas.io.BufferingWriter: java.nio.charset.CharsetEncoder encoder>;

        staticinvoke <org.apache.jena.atlas.lib.Chars: void deallocEncoder(java.nio.charset.CharsetEncoder)>($r1);

        $r2 = r0.<org.apache.jena.atlas.io.BufferingWriter: org.apache.jena.atlas.lib.Sink out>;

        interfaceinvoke $r2.<org.apache.jena.atlas.lib.Sink: void close()>();

        return;
    }

    public void flush()
    {
        org.apache.jena.atlas.lib.Sink $r2, $r3;
        org.apache.jena.atlas.io.BufferingWriter r0;
        int $i0;
        java.nio.ByteBuffer $r1, $r4;

        r0 := @this: org.apache.jena.atlas.io.BufferingWriter;

        $i0 = specialinvoke r0.<org.apache.jena.atlas.io.BufferingWriter: int bufferSize()>();

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.apache.jena.atlas.io.BufferingWriter: org.apache.jena.atlas.lib.Sink out>;

        $r1 = r0.<org.apache.jena.atlas.io.BufferingWriter: java.nio.ByteBuffer buffer>;

        staticinvoke <org.apache.jena.atlas.io.BufferingWriter: void send(org.apache.jena.atlas.lib.Sink,java.nio.ByteBuffer)>($r2, $r1);

        $r3 = r0.<org.apache.jena.atlas.io.BufferingWriter: org.apache.jena.atlas.lib.Sink out>;

        interfaceinvoke $r3.<org.apache.jena.atlas.lib.Sink: void flush()>();

        $r4 = r0.<org.apache.jena.atlas.io.BufferingWriter: java.nio.ByteBuffer buffer>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label1:
        return;
    }

    public void write(char[], int, int) throws java.io.IOException
    {
        java.nio.CharBuffer $r2;
        org.apache.jena.atlas.io.BufferingWriter r0;
        int i0, i1;
        char[] r1;

        r0 := @this: org.apache.jena.atlas.io.BufferingWriter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<org.apache.jena.atlas.io.BufferingWriter: void output(java.lang.CharSequence)>($r2);

        return;
    }

    public void write(char[]) throws java.io.IOException
    {
        int $i0;
        char[] r1;
        org.apache.jena.atlas.io.BufferingWriter r0;

        r0 := @this: org.apache.jena.atlas.io.BufferingWriter;

        r1 := @parameter0: char[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.jena.atlas.io.BufferingWriter: void write(char[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(java.lang.String) throws java.io.IOException
    {
        java.lang.String r1;
        org.apache.jena.atlas.io.BufferingWriter r0;

        r0 := @this: org.apache.jena.atlas.io.BufferingWriter;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.jena.atlas.io.BufferingWriter: void output(java.lang.CharSequence)>(r1);

        return;
    }

    public void write(int) throws java.io.IOException
    {
        int i0;
        org.apache.jena.atlas.io.BufferingWriter r0;

        r0 := @this: org.apache.jena.atlas.io.BufferingWriter;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.jena.atlas.io.BufferingWriter: void output(int)>(i0);

        return;
    }

    static void access$000(java.io.IOException)
    {
        java.io.IOException r0;

        r0 := @parameter0: java.io.IOException;

        staticinvoke <org.apache.jena.atlas.io.BufferingWriter: void exception(java.io.IOException)>(r0);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.jena.atlas.io.BufferingWriter: int BLOB_SIZE> = 4096;

        <org.apache.jena.atlas.io.BufferingWriter: int SIZE> = 8192;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jena/atlas/io/BufferingWriter;");

        <org.apache.jena.atlas.io.BufferingWriter: org.slf4j.Logger log> = $r0;

        return;
    }
}
