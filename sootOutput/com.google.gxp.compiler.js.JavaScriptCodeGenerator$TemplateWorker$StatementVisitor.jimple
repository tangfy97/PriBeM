public class com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor extends com.google.gxp.compiler.base.DefaultingExpressionVisitor implements com.google.gxp.compiler.base.CallVisitor
{
    private final java.util.regex.Pattern PARAM_PATTERN;
    final com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0;

    protected void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.util.regex.Pattern $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0> = r1;

        specialinvoke r0.<com.google.gxp.compiler.base.DefaultingExpressionVisitor: void <init>()>();

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("%([1-9%])");

        r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.util.regex.Pattern PARAM_PATTERN> = $r2;

        return;
    }

    public java.lang.Void defaultVisitExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.base.Expression r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r2;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.Void visitAbbrExpression(com.google.gxp.compiler.base.AbbrExpression)
    {
        com.google.gxp.compiler.base.Expression $r12, $r14;
        java.lang.Object[] $r5;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r1, $r3, $r6, $r11, $r15;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.alerts.AlertSink $r8;
        java.lang.String $r9, $r10, $r13;
        com.google.gxp.compiler.alerts.SourcePosition $r4;
        com.google.gxp.compiler.base.AbbrExpression r2;
        com.google.gxp.compiler.base.OutputLanguage $r7;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r2 := @parameter0: com.google.gxp.compiler.base.AbbrExpression;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$900(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r1, "(function() {");

        $r3 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r4 = virtualinvoke r2.<com.google.gxp.compiler.base.AbbrExpression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r5 = newarray (java.lang.Object)[2];

        $r7 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $r6 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r8 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$1000(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)>($r6);

        $r9 = virtualinvoke r2.<com.google.gxp.compiler.base.AbbrExpression: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String validateName(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Node,java.lang.String)>($r8, r2, $r9);

        $r5[0] = $r10;

        $r11 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r12 = virtualinvoke r2.<com.google.gxp.compiler.base.AbbrExpression: com.google.gxp.compiler.base.Expression getValue()>();

        $r13 = virtualinvoke $r11.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getJavaScriptExpression(com.google.gxp.compiler.base.Expression)>($r12);

        $r5[1] = $r13;

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$1100(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r3, $r4, "var %s = %s;", $r5);

        $r14 = virtualinvoke r2.<com.google.gxp.compiler.base.AbbrExpression: com.google.gxp.compiler.base.Expression getContent()>();

        virtualinvoke $r14.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r0);

        $r15 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$1200(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r15, "})();");

        return null;
    }

    public java.lang.Void visitConcatenation(com.google.gxp.compiler.base.Concatenation)
    {
        java.util.List $r1;
        com.google.gxp.compiler.base.Expression r4;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r5;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        com.google.gxp.compiler.base.Concatenation r0;
        boolean $z0;

        r5 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.Concatenation;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.Concatenation: java.util.List getValues()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.gxp.compiler.base.Expression) $r3;

        virtualinvoke r4.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r5);

        goto label1;

     label2:
        return null;
    }

    public java.lang.Void visitConditional(com.google.gxp.compiler.base.Conditional)
    {
        com.google.gxp.compiler.base.Conditional$Clause $r6, $r11;
        com.google.gxp.compiler.base.Expression $r7;
        java.util.Iterator $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r8, $r9;
        com.google.gxp.compiler.base.Conditional r0;
        java.lang.AssertionError $r3;
        java.util.List $r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r4;
        java.lang.Object $r5, $r10;
        boolean $z0, $z1, $z2;

        r4 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.Conditional;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.Conditional: java.util.List getClauses()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.gxp.compiler.base.Conditional$Clause) $r5;

        specialinvoke r4.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: void appendIf(java.lang.String,com.google.gxp.compiler.base.Conditional$Clause)>("if (", $r6);

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r10 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.google.gxp.compiler.base.Conditional$Clause) $r10;

        specialinvoke r4.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: void appendIf(java.lang.String,com.google.gxp.compiler.base.Conditional$Clause)>("} else if (", $r11);

        goto label1;

     label2:
        $r7 = virtualinvoke r0.<com.google.gxp.compiler.base.Conditional: com.google.gxp.compiler.base.Expression getElseExpression()>();

        $z2 = virtualinvoke $r7.<com.google.gxp.compiler.base.Expression: boolean alwaysEmpty()>();

        if $z2 != 0 goto label3;

        $r9 = r4.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$1300(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r9, "} else {");

        virtualinvoke $r7.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r4);

     label3:
        $r8 = r4.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$1400(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r8, "}");

        goto label5;

     label4:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("No clauses in Conditional!");

        throw $r3;

     label5:
        return null;
    }

    private void appendIf(java.lang.String, com.google.gxp.compiler.base.Conditional$Clause)
    {
        com.google.gxp.compiler.base.Conditional$Clause r0;
        com.google.gxp.compiler.alerts.SourcePosition $r4;
        com.google.gxp.compiler.base.Expression $r1, $r13;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r3, $r8;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r2;
        java.lang.StringBuilder $r5, $r7, $r10, $r11;
        java.lang.String r6, $r9, $r12;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: com.google.gxp.compiler.base.Conditional$Clause;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.Conditional$Clause: com.google.gxp.compiler.base.Expression getPredicate()>();

        $r3 = r2.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r4 = virtualinvoke $r1.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = r2.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r9 = virtualinvoke $r8.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getJavaScriptExpression(com.google.gxp.compiler.base.Expression)>($r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") {");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$1500(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r3, $r4, $r12);

        $r13 = virtualinvoke r0.<com.google.gxp.compiler.base.Conditional$Clause: com.google.gxp.compiler.base.Expression getExpression()>();

        virtualinvoke $r13.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r2);

        return;
    }

    public java.lang.Void visitConvertibleToContent(com.google.gxp.compiler.base.ConvertibleToContent)
    {
        com.google.gxp.compiler.base.Expression $r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r2;
        com.google.gxp.compiler.base.ConvertibleToContent r0;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.ConvertibleToContent;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.ConvertibleToContent: com.google.gxp.compiler.base.Expression getSubexpression()>();

        virtualinvoke $r1.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r2);

        return null;
    }

    public java.lang.Void visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)
    {
        com.google.gxp.compiler.alerts.SourcePosition $r3;
        com.google.gxp.compiler.base.Expression $r6;
        java.lang.Object[] $r4;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r2, $r5, $r8;
        com.google.gxp.compiler.schema.Schema $r9;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.String $r7, $r10, $r11;
        com.google.gxp.compiler.base.EscapeExpression r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.EscapeExpression;

        $r2 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r3 = virtualinvoke r1.<com.google.gxp.compiler.base.EscapeExpression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r4 = newarray (java.lang.Object)[3];

        $r5 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r6 = virtualinvoke r1.<com.google.gxp.compiler.base.EscapeExpression: com.google.gxp.compiler.base.Expression getSubexpression()>();

        $r7 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$1600(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.base.Expression)>($r5, $r6);

        $r4[0] = $r7;

        $r8 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r9 = virtualinvoke r1.<com.google.gxp.compiler.base.EscapeExpression: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r10 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$1700(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.schema.Schema)>($r8, $r9);

        $r4[1] = $r10;

        $r11 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$1800()>();

        $r4[2] = $r11;

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$1900(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r2, $r3, "%s.%s(%s);", $r4);

        return null;
    }

    public java.lang.Void visitExampleExpression(com.google.gxp.compiler.base.ExampleExpression)
    {
        com.google.gxp.compiler.base.ExampleExpression r0;
        java.lang.Void $r4;
        com.google.gxp.compiler.base.Expression $r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r2;
        java.lang.Object $r3;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.ExampleExpression;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.ExampleExpression: com.google.gxp.compiler.base.Expression getSubexpression()>();

        $r3 = virtualinvoke $r1.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r2);

        $r4 = (java.lang.Void) $r3;

        return $r4;
    }

    public java.lang.Void visitExceptionExpression(com.google.gxp.compiler.base.ExceptionExpression)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r4;
        java.lang.AssertionError $r16;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r3;
        int[] $r1;
        com.google.gxp.compiler.base.ExceptionExpression$Kind $r2, $r19;
        int $i0, $i1;
        java.lang.String $r11, $r12, $r15, $r21;
        com.google.gxp.compiler.alerts.SourcePosition $r5;
        com.google.gxp.compiler.base.ExceptionExpression r0;
        com.google.gxp.compiler.base.OutputLanguage $r10;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r13, $r14, $r17, $r18, $r20;

        r3 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.ExceptionExpression;

        $r1 = <com.google.gxp.compiler.js.JavaScriptCodeGenerator$2: int[] $SwitchMap$com$google$gxp$compiler$base$ExceptionExpression$Kind>;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.ExceptionExpression: com.google.gxp.compiler.base.ExceptionExpression$Kind getKind()>();

        $i0 = virtualinvoke $r2.<com.google.gxp.compiler.base.ExceptionExpression$Kind: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            default: goto label2;
        };

     label1:
        goto label3;

     label2:
        $r16 = new java.lang.AssertionError;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported ExceptionExpression.Kind: ");

        $r19 = virtualinvoke r0.<com.google.gxp.compiler.base.ExceptionExpression: com.google.gxp.compiler.base.ExceptionExpression$Kind getKind()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21);

        throw $r16;

     label3:
        $r4 = r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r5 = virtualinvoke r0.<com.google.gxp.compiler.base.ExceptionExpression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("throw new ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r10 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $r11 = virtualinvoke r0.<com.google.gxp.compiler.base.ExceptionExpression: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r11);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$2000(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r4, $r5, $r15);

        return null;
    }

    public java.lang.String toLowerCamelCase(java.lang.String)
    {
        java.lang.String[] $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r9;
        int i0, i3;
        java.lang.String r1, $r3, $r4, $r7, r10, r11;
        boolean z0;
        char $c1, $c2;
        java.lang.StringBuilder $r0, $r5, $r6, $r8;

        r9 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        z0 = 1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("_");

        i0 = lengthof $r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        r10 = $r2[i3];

        $r4 = virtualinvoke r10.<java.lang.String: java.lang.String toLowerCase()>();

        r11 = $r4;

        if z0 == 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $c1 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        $c2 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r7 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        i3 = i3 + 1;

        goto label1;

     label4:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.Void visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)
    {
        com.google.transconsole.common.messages.Message $r8, $r13;
        com.google.transconsole.common.messages.Placeholder $r37, r48;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r1, $r16, $r18, $r20, $r30, $r42, $r45;
        com.google.gxp.com.google.common.base.Function $r43;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.google.gxp.com.google.common.base.CharEscaper $r34;
        com.google.transconsole.common.messages.MessageFragment r47;
        java.util.List $r4, $r41;
        java.lang.StringBuilder $r6, $r7, $r10, $r12, $r22, $r32, $r40, r46;
        java.lang.Iterable $r44;
        java.util.HashSet $r5;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.String $r2, $r9, $r11, $r25, $r26, $r27, $r28, $r29, $r35, $r36, $r38, $r39;
        com.google.gxp.compiler.alerts.SourcePosition $r17, $r19, $r21, $r31;
        java.util.Iterator $r14, $r15;
        com.google.gxp.compiler.base.ExtractedMessage r3;
        com.google.gxp.compiler.base.OutputLanguage $r24;
        java.lang.Object $r23, $r33;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r3 := @parameter0: com.google.gxp.compiler.base.ExtractedMessage;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String createVarName(java.lang.String)>("params");

        $r4 = virtualinvoke r3.<com.google.gxp.compiler.base.ExtractedMessage: java.util.List getParameters()>();

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>("var ");

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = [");

        $r41 = virtualinvoke r3.<com.google.gxp.compiler.base.ExtractedMessage: java.util.List getParameters()>();

        $r42 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r43 = $r42.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function expressionToEscapedString>;

        $r44 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>($r41, $r43);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r40, ", ", $r44);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("];");

        $r45 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$2100(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r45, $r40);

     label1:
        $r5 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MSG_EXTERNAL_");

        $r8 = virtualinvoke r3.<com.google.gxp.compiler.base.ExtractedMessage: com.google.transconsole.common.messages.Message getTcMessage()>();

        $r9 = virtualinvoke $r8.<com.google.transconsole.common.messages.Message: java.lang.String getId()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("var ");

        r46 = $r12;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = goog.getMsg(\"");

        $r13 = virtualinvoke r3.<com.google.gxp.compiler.base.ExtractedMessage: com.google.transconsole.common.messages.Message getTcMessage()>();

        $r14 = virtualinvoke $r13.<com.google.transconsole.common.messages.Message: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label5;

        $r33 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r47 = (com.google.transconsole.common.messages.MessageFragment) $r33;

        $z4 = r47 instanceof com.google.transconsole.common.messages.Placeholder;

        if $z4 == 0 goto label3;

        $r37 = (com.google.transconsole.common.messages.Placeholder) r47;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r37);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{$");

        $r38 = interfaceinvoke r47.<com.google.transconsole.common.messages.MessageFragment: java.lang.String getPresentation()>();

        $r39 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.String toLowerCamelCase(java.lang.String)>($r38);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        goto label4;

     label3:
        $r34 = staticinvoke <com.google.gxp.com.google.common.base.CharEscapers: com.google.gxp.com.google.common.base.CharEscaper javascriptEscaper()>();

        $r35 = interfaceinvoke r47.<com.google.transconsole.common.messages.MessageFragment: java.lang.String getPresentation()>();

        $r36 = virtualinvoke $r34.<com.google.gxp.com.google.common.base.CharEscaper: java.lang.String escape(java.lang.String)>($r35);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

     label4:
        goto label2;

     label5:
        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r15 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", {");

        $r20 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r21 = virtualinvoke r3.<com.google.gxp.compiler.base.ExtractedMessage: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$2200(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r20, $r21, $r12);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        r46 = $r22;

     label6:
        $z2 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r23 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r48 = (com.google.transconsole.common.messages.Placeholder) $r23;

        $r24 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $r25 = virtualinvoke r48.<com.google.transconsole.common.messages.Placeholder: java.lang.String getPresentation()>();

        $r26 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.String toLowerCamelCase(java.lang.String)>($r25);

        $r27 = virtualinvoke $r24.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r26);

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r28 = virtualinvoke r48.<com.google.transconsole.common.messages.Placeholder: java.lang.String getOriginal()>();

        $r29 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.String evalPlaceholder(java.lang.String,java.lang.String)>($r28, $r2);

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $z3 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label7:
        $r30 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r31 = virtualinvoke r3.<com.google.gxp.compiler.base.ExtractedMessage: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$2300(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r30, $r31, r46);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        r46 = $r32;

        goto label6;

     label8:
        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

     label9:
        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        $r16 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r17 = virtualinvoke r3.<com.google.gxp.compiler.base.ExtractedMessage: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$2400(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r16, $r17, r46);

        $r18 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r19 = virtualinvoke r3.<com.google.gxp.compiler.base.ExtractedMessage: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        virtualinvoke $r18.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void writeExpression(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String)>($r19, $r11);

        return null;
    }

    private java.lang.String evalPlaceholder(java.lang.String, java.lang.String)
    {
        java.util.ArrayList $r0;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r1;
        java.util.regex.Matcher $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String r2, $r6, $r7, $r8, $r10, $r11, $r12, r14, $r17, $r20;
        boolean $z0, $z1;
        com.google.gxp.compiler.base.OutputLanguage $r5, $r9;
        java.lang.StringBuilder $r13, $r15, $r16, $r18, $r19;
        java.util.regex.Pattern $r3;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r2 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r3 = r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.util.regex.Pattern PARAM_PATTERN>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        i6 = 0;

     label1:
        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean find(int)>(i6);

        if $z0 == 0 goto label4;

        $r9 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $i1 = virtualinvoke $r4.<java.util.regex.Matcher: int start()>();

        $r10 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i6, $i1);

        $r11 = virtualinvoke $r9.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r10);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11);

        $i2 = virtualinvoke $r4.<java.util.regex.Matcher: int start()>();

        $i3 = $i2 + 1;

        virtualinvoke r2.<java.lang.String: char charAt(int)>($i3);

        $r12 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("%");

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("\'%\'");

        goto label3;

     label2:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r17 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17);

        $i5 = $i4 - 1;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r20);

     label3:
        i6 = virtualinvoke $r4.<java.util.regex.Matcher: int end()>();

        goto label1;

     label4:
        $r5 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $r6 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i6, $i0);

        $r7 = virtualinvoke $r5.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r6);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.String join(java.lang.String,java.lang.Iterable)>("+", $r0);

        return $r8;
    }

    public java.lang.Void visitLoopExpression(com.google.gxp.compiler.base.LoopExpression)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r4, $r8, $r11, $r14, $r21, $r22, $r24, $r25, $r29, $r31;
        boolean $z0, $z1;
        com.google.gxp.compiler.base.Expression $r1, $r12, $r19, $r20, $r23, $r26, $r27, $r30;
        java.lang.Object[] $r10;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r3;
        com.google.gxp.compiler.base.LoopExpression r0;
        com.google.gxp.compiler.alerts.AlertSink $r6, $r16, $r32;
        java.lang.String $r2, $r7, $r13, $r17, $r18, $r34;
        com.google.gxp.compiler.alerts.SourcePosition $r9;
        com.google.gxp.compiler.base.OutputLanguage $r5, $r15, $r28;
        com.google.gxp.compiler.js.LoopRequiresIterableInJavaScriptError $r33;

        r3 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.LoopExpression;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterable()>();

        if $r1 != null goto label2;

        $r26 = virtualinvoke r0.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterator()>();

        if $r26 == null goto label1;

        $r27 = virtualinvoke r0.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterator()>();

        $r28 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $z1 = virtualinvoke $r27.<com.google.gxp.compiler.base.Expression: boolean canEvaluateAs(com.google.gxp.compiler.base.OutputLanguage)>($r28);

        if $z1 == 0 goto label1;

        $r29 = r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r30 = virtualinvoke r0.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterator()>();

        virtualinvoke $r29.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getJavaScriptExpression(com.google.gxp.compiler.base.Expression)>($r30);

     label1:
        $r31 = r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r32 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$2500(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)>($r31);

        $r33 = new com.google.gxp.compiler.js.LoopRequiresIterableInJavaScriptError;

        specialinvoke $r33.<com.google.gxp.compiler.js.LoopRequiresIterableInJavaScriptError: void <init>(com.google.gxp.compiler.base.LoopExpression)>(r0);

        interfaceinvoke $r32.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r33);

        return null;

     label2:
        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.LoopExpression: java.lang.String getKey()>();

        if $r2 != null goto label3;

        $r25 = r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r34 = virtualinvoke $r25.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String createVarName(java.lang.String)>("key");

        goto label4;

     label3:
        $r5 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $r4 = r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r6 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$2600(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)>($r4);

        $r7 = virtualinvoke r0.<com.google.gxp.compiler.base.LoopExpression: java.lang.String getKey()>();

        $r34 = virtualinvoke $r5.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String validateName(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Node,java.lang.String)>($r6, r0, $r7);

     label4:
        $r8 = r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r9 = virtualinvoke r0.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r10 = newarray (java.lang.Object)[3];

        $r11 = r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r12 = virtualinvoke r0.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getIterable()>();

        $r13 = virtualinvoke $r11.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getJavaScriptExpression(com.google.gxp.compiler.base.Expression)>($r12);

        $r10[0] = $r13;

        $r10[1] = $r34;

        $r15 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $r14 = r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r16 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$2700(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)>($r14);

        $r17 = virtualinvoke r0.<com.google.gxp.compiler.base.LoopExpression: java.lang.String getVar()>();

        $r18 = virtualinvoke $r15.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String validateName(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Node,java.lang.String)>($r16, r0, $r17);

        $r10[2] = $r18;

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$2800(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r8, $r9, "goog.gxp.base.forEach(%s, function(%s, %s, gxp$isFirst) {", $r10);

        $r19 = virtualinvoke r0.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getDelimiter()>();

        $z0 = virtualinvoke $r19.<com.google.gxp.compiler.base.Expression: boolean alwaysEmpty()>();

        if $z0 != 0 goto label5;

        $r22 = r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$2900(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r22, "if (!gxp$isFirst) {");

        $r23 = virtualinvoke r0.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getDelimiter()>();

        virtualinvoke $r23.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r3);

        $r24 = r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$3000(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r24, "}");

     label5:
        $r20 = virtualinvoke r0.<com.google.gxp.compiler.base.LoopExpression: com.google.gxp.compiler.base.Expression getSubexpression()>();

        virtualinvoke $r20.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r3);

        $r21 = r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$3100(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r21, "});");

        return null;
    }

    public java.lang.Void visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.NativeExpression r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.NativeExpression;

        return null;
    }

    public java.lang.Void visitStringConstant(com.google.gxp.compiler.base.StringConstant)
    {
        com.google.gxp.compiler.alerts.SourcePosition $r4;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r3;
        com.google.gxp.compiler.schema.Schema $r1;
        java.lang.String $r5;
        java.lang.AssertionError $r6;
        com.google.gxp.compiler.base.StringConstant r0;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.StringConstant;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.StringConstant: com.google.gxp.compiler.schema.Schema getSchema()>();

        if $r1 != null goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r3 = r2.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r4 = virtualinvoke r0.<com.google.gxp.compiler.base.StringConstant: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r5 = virtualinvoke r0.<com.google.gxp.compiler.base.StringConstant: java.lang.String evaluate()>();

        virtualinvoke $r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void writeString(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String)>($r4, $r5);

        return null;
    }

    public java.lang.Void visitCall(com.google.gxp.compiler.base.Call)
    {
        java.lang.Void $r3;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r1;
        java.lang.Object $r2;
        com.google.gxp.compiler.base.Call r0;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.Call;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.Call: java.lang.Object acceptCallVisitor(com.google.gxp.compiler.base.CallVisitor)>(r1);

        $r3 = (java.lang.Void) $r2;

        return $r3;
    }

    public java.lang.Void visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)
    {
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r2;
        com.google.gxp.compiler.base.UnboundCall r1;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.UnboundCall;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.Void visitBoundCall(com.google.gxp.compiler.base.BoundCall)
    {
        com.google.gxp.compiler.base.BoundCall r1;
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r2;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BoundCall;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.Void visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r8, $r11, $r14, $r16, $r18;
        java.util.Deque $r17;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r5;
        java.util.Map $r2;
        java.lang.Boolean $r7;
        java.lang.String $r9, $r10, r20;
        com.google.gxp.compiler.base.Callable $r1;
        boolean $z0, $z1;
        com.google.gxp.compiler.alerts.SourcePosition $r15;
        java.util.Iterator $r13;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor$1 $r4;
        java.util.List $r12;
        com.google.gxp.compiler.base.ValidatedCall r0;
        java.lang.StringBuilder $r3;
        java.lang.Object $r6, $r19;

        r5 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.ValidatedCall;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.ValidatedCall: com.google.gxp.compiler.base.Callable getCallee()>();

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.ValidatedCall: java.util.Map getAttributes()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = new com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor$1;

        specialinvoke $r4.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor$1: void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor,java.util.Map,com.google.gxp.compiler.base.ValidatedCall)>(r5, $r2, r0);

        $r6 = interfaceinvoke $r1.<com.google.gxp.compiler.base.Callable: java.lang.Object acceptCallableVisitor(com.google.gxp.compiler.base.CallableVisitor)>($r4);

        $r7 = (java.lang.Boolean) $r6;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        $r8 = r5.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r9 = virtualinvoke $r8.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getCalleeName(com.google.gxp.compiler.base.Callable)>($r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".write(");

        $r10 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$1800()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r11 = r5.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r12 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.util.List access$3500(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.base.Callable,java.util.Map)>($r11, $r1, $r2);

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r19 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.String) $r19;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        goto label1;

     label2:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        $r14 = r5.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r15 = virtualinvoke r0.<com.google.gxp.compiler.base.ValidatedCall: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$3600(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r14, $r15, $r3);

        if $z0 == 0 goto label3;

        $r16 = r5.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r17 = $r16.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.util.Deque instantiatedGxps>;

        interfaceinvoke $r17.<java.util.Deque: java.lang.Object pop()>();

        $r18 = r5.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void access$3700(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r18, "}");

     label3:
        return null;
    }

    public volatile java.lang.Object visitStringConstant(com.google.gxp.compiler.base.StringConstant)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.StringConstant r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.StringConstant;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitStringConstant(com.google.gxp.compiler.base.StringConstant)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.NativeExpression r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.NativeExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitLoopExpression(com.google.gxp.compiler.base.LoopExpression)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.LoopExpression r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.LoopExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitLoopExpression(com.google.gxp.compiler.base.LoopExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.ExtractedMessage r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExtractedMessage;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitExceptionExpression(com.google.gxp.compiler.base.ExceptionExpression)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.ExceptionExpression r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExceptionExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitExceptionExpression(com.google.gxp.compiler.base.ExceptionExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitExampleExpression(com.google.gxp.compiler.base.ExampleExpression)
    {
        com.google.gxp.compiler.base.ExampleExpression r1;
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExampleExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitExampleExpression(com.google.gxp.compiler.base.ExampleExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.EscapeExpression r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.EscapeExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitConvertibleToContent(com.google.gxp.compiler.base.ConvertibleToContent)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.ConvertibleToContent r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ConvertibleToContent;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitConvertibleToContent(com.google.gxp.compiler.base.ConvertibleToContent)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitConditional(com.google.gxp.compiler.base.Conditional)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.Conditional r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Conditional;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitConditional(com.google.gxp.compiler.base.Conditional)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitConcatenation(com.google.gxp.compiler.base.Concatenation)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.Concatenation r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Concatenation;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitConcatenation(com.google.gxp.compiler.base.Concatenation)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitCall(com.google.gxp.compiler.base.Call)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.Call r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Call;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitCall(com.google.gxp.compiler.base.Call)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitAbbrExpression(com.google.gxp.compiler.base.AbbrExpression)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.AbbrExpression r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.AbbrExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitAbbrExpression(com.google.gxp.compiler.base.AbbrExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object defaultVisitExpression(com.google.gxp.compiler.base.Expression)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.Expression r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void defaultVisitExpression(com.google.gxp.compiler.base.Expression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.ValidatedCall r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ValidatedCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitBoundCall(com.google.gxp.compiler.base.BoundCall)
    {
        com.google.gxp.compiler.base.BoundCall r1;
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BoundCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitBoundCall(com.google.gxp.compiler.base.BoundCall)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)
    {
        java.lang.Void $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.UnboundCall r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.UnboundCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)>(r1);

        return $r2;
    }
}
