class org.springframework.beans.factory.xml.UtilNamespaceHandler$MapBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser
{

    private void <init>()
    {
        org.springframework.beans.factory.xml.UtilNamespaceHandler$MapBeanDefinitionParser r0;

        r0 := @this: org.springframework.beans.factory.xml.UtilNamespaceHandler$MapBeanDefinitionParser;

        specialinvoke r0.<org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser: void <init>()>();

        return;
    }

    protected java.lang.Class getBeanClass(org.w3c.dom.Element)
    {
        org.springframework.beans.factory.xml.UtilNamespaceHandler$MapBeanDefinitionParser r0;
        org.w3c.dom.Element r1;

        r0 := @this: org.springframework.beans.factory.xml.UtilNamespaceHandler$MapBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        return class "Lorg/springframework/beans/factory/config/MapFactoryBean;";
    }

    protected void doParse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext, org.springframework.beans.factory.support.BeanDefinitionBuilder)
    {
        org.springframework.beans.factory.support.BeanDefinitionBuilder r4;
        org.springframework.beans.factory.support.AbstractBeanDefinition $r5;
        org.springframework.beans.factory.xml.UtilNamespaceHandler$MapBeanDefinitionParser r8;
        org.w3c.dom.Element r0;
        org.springframework.beans.factory.xml.ParserContext r2;
        java.util.Map $r6;
        org.springframework.beans.factory.xml.BeanDefinitionParserDelegate $r3;
        java.lang.String $r1, $r7;
        boolean $z0, $z1;

        r8 := @this: org.springframework.beans.factory.xml.UtilNamespaceHandler$MapBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        r4 := @parameter2: org.springframework.beans.factory.support.BeanDefinitionBuilder;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("map-class");

        $r3 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate getDelegate()>();

        $r5 = virtualinvoke r4.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.AbstractBeanDefinition getRawBeanDefinition()>();

        $r6 = virtualinvoke $r3.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.util.Map parseMapElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)>(r0, $r5);

        virtualinvoke r4.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("sourceMap", $r6);

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r4.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("targetMapClass", $r1);

     label1:
        $r7 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("scope");

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r7);

        if $z1 == 0 goto label2;

        virtualinvoke r4.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder setScope(java.lang.String)>($r7);

     label2:
        return;
    }

    void <init>(org.springframework.beans.factory.xml.UtilNamespaceHandler$MapBeanDefinitionParser)
    {
        org.springframework.beans.factory.xml.UtilNamespaceHandler$MapBeanDefinitionParser r0, r1;

        r0 := @this: org.springframework.beans.factory.xml.UtilNamespaceHandler$MapBeanDefinitionParser;

        r1 := @parameter0: org.springframework.beans.factory.xml.UtilNamespaceHandler$MapBeanDefinitionParser;

        specialinvoke r0.<org.springframework.beans.factory.xml.UtilNamespaceHandler$MapBeanDefinitionParser: void <init>()>();

        return;
    }
}
