class ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep extends java.lang.Object implements ucar.nc2.dt.RadialDatasetSweep$Sweep
{
    double meanElevation;
    double meanAzimuth;
    double gateSize;
    int sweepno;
    int nrays;
    int ngates;
    ucar.nc2.Variable sweepVar;
    ucar.nc2.dataset.NetcdfDataset ds;
    final ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable this$1;

    void <init>(ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable, ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Variable, int, int, int)
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        int i0, i1, i2;
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable r1;
        ucar.nc2.Variable r2;
        ucar.nc2.dataset.NetcdfDataset r3;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        r1 := @parameter0: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable;

        r3 := @parameter1: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter2: ucar.nc2.Variable;

        i2 := @parameter3: int;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double meanElevation> = #NaN;

        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double meanAzimuth> = #NaN;

        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double gateSize> = #NaN;

        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.Variable sweepVar> = r2;

        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: int nrays> = i0;

        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: int ngates> = i1;

        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: int sweepno> = i2;

        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.dataset.NetcdfDataset ds> = r3;

        return;
    }

    public ucar.nc2.Variable getsweepVar()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        ucar.nc2.Variable $r1;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.Variable sweepVar>;

        return $r1;
    }

    private void setMeanElevation()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        long $l0;
        java.io.IOException $r4;
        ucar.ma2.Array $r3, r5;
        ucar.nc2.Variable $r2;
        ucar.nc2.dataset.NetcdfDataset $r1;
        double $d0, $d1, $d2, $d3;
        boolean $z0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        r5 = null;

        $d0 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double meanElevation>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label5;

     label1:
        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("elevation");

        $r3 = virtualinvoke $r2.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        r5 = $r3;

        virtualinvoke $r2.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r3, 0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.io.IOException: void printStackTrace()>();

        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double meanElevation> = 0.0;

     label4:
        $d1 = staticinvoke <ucar.ma2.MAMath: double sumDouble(ucar.ma2.Array)>(r5);

        $l0 = virtualinvoke r5.<ucar.ma2.Array: long getSize()>();

        $d2 = (double) $l0;

        $d3 = $d1 / $d2;

        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double meanElevation> = $d3;

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public float getMeanElevation()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        float $f0;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        $d0 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double meanElevation>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: void setMeanElevation()>();

     label1:
        $d1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double meanElevation>;

        $f0 = (float) $d1;

        return $f0;
    }

    private void setMeanAzimuth()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        long $l0;
        java.io.IOException $r5;
        ucar.ma2.Array $r4, r6;
        ucar.nc2.dt.RadialDatasetSweep$Type $r1;
        ucar.nc2.Variable $r3;
        ucar.nc2.dataset.NetcdfDataset $r2;
        double $d0, $d1, $d2;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        $r1 = virtualinvoke r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.dt.RadialDatasetSweep$Type getType()>();

        if $r1 == null goto label5;

        r6 = null;

     label1:
        $r2 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.dataset.NetcdfDataset ds>;

        $r3 = virtualinvoke $r2.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("azimuth");

        $r4 = virtualinvoke $r3.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        r6 = $r4;

        virtualinvoke $r3.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r4, 0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.io.IOException: void printStackTrace()>();

        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double meanAzimuth> = 0.0;

     label4:
        $d0 = staticinvoke <ucar.ma2.MAMath: double sumDouble(ucar.ma2.Array)>(r6);

        $l0 = virtualinvoke r6.<ucar.ma2.Array: long getSize()>();

        $d1 = (double) $l0;

        $d2 = $d0 / $d1;

        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double meanAzimuth> = $d2;

        goto label6;

     label5:
        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double meanAzimuth> = 0.0;

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public float getMeanAzimuth()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        float $f0;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        $d0 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double meanAzimuth>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: void setMeanAzimuth()>();

     label1:
        $d1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double meanAzimuth>;

        $f0 = (float) $d1;

        return $f0;
    }

    public int getNumRadials()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        int $i0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        $i0 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: int nrays>;

        return $i0;
    }

    public int getNumGates()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        int $i0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        $i0 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: int ngates>;

        return $i0;
    }

    public float[] readData() throws java.io.IOException
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        float[] $r9, $r10;
        java.io.IOException $r12;
        ucar.ma2.Array $r6;
        ucar.ma2.InvalidRangeException $r11;
        int[] $r2, r4;
        int $i0;
        ucar.nc2.Variable $r1, $r3, $r5;
        java.lang.Class $r7;
        java.lang.Object $r8;
        java.lang.String $r13;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.Variable sweepVar>;

        $r2 = virtualinvoke $r1.<ucar.nc2.Variable: int[] getShape()>();

        $r3 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.Variable sweepVar>;

        $i0 = virtualinvoke $r3.<ucar.nc2.Variable: int getRank()>();

        r4 = newarray (int)[$i0];

     label1:
        $r5 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.Variable sweepVar>;

        $r6 = virtualinvoke $r5.<ucar.nc2.Variable: ucar.ma2.Array read(int[],int[])>(r4, $r2);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.io.IOException;

        $r13 = virtualinvoke $r11.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label4:
        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        $r8 = virtualinvoke $r6.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r7);

        $r9 = (float[]) $r8;

        $r10 = (float[]) $r9;

        return $r10;

        catch ucar.ma2.InvalidRangeException from label1 to label2 with label3;
    }

    public float[] readData(int) throws java.io.IOException
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        float[] $r9, $r10;
        int[] $r2, r4;
        int $i0, i1;
        ucar.nc2.Variable $r1, $r3, $r5;
        java.lang.String $r13;
        java.io.IOException $r12;
        ucar.ma2.Array $r6;
        ucar.ma2.InvalidRangeException $r11;
        java.lang.Class $r7;
        java.lang.Object $r8;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        i1 := @parameter0: int;

        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.Variable sweepVar>;

        $r2 = virtualinvoke $r1.<ucar.nc2.Variable: int[] getShape()>();

        $r3 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.Variable sweepVar>;

        $i0 = virtualinvoke $r3.<ucar.nc2.Variable: int getRank()>();

        r4 = newarray (int)[$i0];

        $r2[0] = 1;

        r4[0] = i1;

     label1:
        $r5 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.Variable sweepVar>;

        $r6 = virtualinvoke $r5.<ucar.nc2.Variable: ucar.ma2.Array read(int[],int[])>(r4, $r2);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.io.IOException;

        $r13 = virtualinvoke $r11.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label4:
        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        $r8 = virtualinvoke $r6.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r7);

        $r9 = (float[]) $r8;

        $r10 = (float[]) $r9;

        return $r10;

        catch ucar.ma2.InvalidRangeException from label1 to label2 with label3;
    }

    public ucar.nc2.dt.RadialDatasetSweep$Type getType()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        return null;
    }

    public boolean isConic()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        return 1;
    }

    public float getElevation(int) throws java.io.IOException
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        int i0;
        float $f0;
        double $d0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        i0 := @parameter0: int;

        $d0 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double meanElevation>;

        $f0 = (float) $d0;

        return $f0;
    }

    public float[] getElevation() throws java.io.IOException
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        float[] $r6, r8;
        java.io.IOException $r7;
        ucar.ma2.Array $r3;
        ucar.nc2.Variable $r2;
        java.lang.Class $r4;
        java.lang.Object $r5;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        r8 = null;

     label1:
        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("elevation");

        $r3 = virtualinvoke $r2.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        virtualinvoke $r2.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r3, 0);

        $r4 = <java.lang.Float: java.lang.Class TYPE>;

        $r5 = virtualinvoke $r3.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r4);

        $r6 = (float[]) $r5;

        r8 = (float[]) $r6;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.io.IOException: void printStackTrace()>();

     label4:
        return r8;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public float getAzimuth(int) throws java.io.IOException
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        java.io.IOException $r6;
        ucar.ma2.Array $r3, r7;
        ucar.ma2.Index $r4, $r5;
        int i0;
        float $f0;
        ucar.nc2.Variable $r2;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        i0 := @parameter0: int;

        r7 = null;

     label1:
        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("azimuth");

        $r3 = virtualinvoke $r2.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        r7 = $r3;

        virtualinvoke $r2.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r3, 0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.io.IOException: void printStackTrace()>();

     label4:
        $r4 = virtualinvoke r7.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $r5 = virtualinvoke $r4.<ucar.ma2.Index: ucar.ma2.Index set(int)>(i0);

        $f0 = virtualinvoke r7.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r5);

        return $f0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public float[] getAzimuth() throws java.io.IOException
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        float[] $r6, r8;
        java.io.IOException $r7;
        ucar.ma2.Array $r3;
        ucar.nc2.Variable $r2;
        java.lang.Class $r4;
        java.lang.Object $r5;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        r8 = null;

     label1:
        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("azimuth");

        $r3 = virtualinvoke $r2.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        virtualinvoke $r2.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r3, 0);

        $r4 = <java.lang.Float: java.lang.Class TYPE>;

        $r5 = virtualinvoke $r3.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r4);

        $r6 = (float[]) $r5;

        r8 = (float[]) $r6;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.io.IOException: void printStackTrace()>();

     label4:
        return r8;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public float getRadialDistance(int) throws java.io.IOException
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        java.io.IOException $r6;
        ucar.ma2.Array $r3, r7;
        ucar.ma2.Index $r4, $r5;
        int i0;
        float $f0;
        ucar.nc2.Variable $r2;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        i0 := @parameter0: int;

        r7 = null;

     label1:
        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("gate");

        $r3 = virtualinvoke $r2.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        r7 = $r3;

        virtualinvoke $r2.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r3, 0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.io.IOException: void printStackTrace()>();

     label4:
        $r4 = virtualinvoke r7.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $r5 = virtualinvoke $r4.<ucar.ma2.Index: ucar.ma2.Index set(int)>(i0);

        $f0 = virtualinvoke r7.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r5);

        return $f0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public float getTime(int) throws java.io.IOException
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        java.io.IOException $r6;
        ucar.ma2.Array $r3, r7;
        ucar.ma2.Index $r4, $r5;
        int i0;
        float $f0;
        ucar.nc2.Variable $r2;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        i0 := @parameter0: int;

        r7 = null;

     label1:
        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("rays_time");

        $r3 = virtualinvoke $r2.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        r7 = $r3;

        virtualinvoke $r2.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r3, 0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.io.IOException: void printStackTrace()>();

     label4:
        $r4 = virtualinvoke r7.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $r5 = virtualinvoke $r4.<ucar.ma2.Index: ucar.ma2.Index set(int)>(i0);

        $f0 = virtualinvoke r7.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r5);

        return $f0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public float getBeamWidth()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        return 0.95F;
    }

    public float getNyquistFrequency()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        return 0.0F;
    }

    public float getRangeToFirstGate()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        return 0.0F;
    }

    public float getGateSize()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        java.io.IOException $r1;
        float $f0, $f1, $f2, $f3;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

     label1:
        $d0 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double gateSize>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

        $f1 = virtualinvoke r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: float getRadialDistance(int)>(1);

        $f2 = virtualinvoke r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: float getRadialDistance(int)>(0);

        $f3 = $f1 - $f2;

        $d2 = (double) $f3;

        r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double gateSize> = $d2;

     label2:
        $d1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: double gateSize>;

        $f0 = (float) $d1;

     label3:
        return $f0;

     label4:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.io.IOException: void printStackTrace()>();

        return 0.0F;

        catch java.io.IOException from label1 to label3 with label4;
    }

    public java.util.Date getStartingTime()
    {
        java.util.Date $r3;
        ucar.nc2.dt.radial.Nids2Dataset $r2;
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable $r1;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable this$1>;

        $r2 = $r1.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable: ucar.nc2.dt.radial.Nids2Dataset this$0>;

        $r3 = staticinvoke <ucar.nc2.dt.radial.Nids2Dataset: java.util.Date access$100(ucar.nc2.dt.radial.Nids2Dataset)>($r2);

        return $r3;
    }

    public java.util.Date getEndingTime()
    {
        java.util.Date $r3;
        ucar.nc2.dt.radial.Nids2Dataset $r2;
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable $r1;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable this$1>;

        $r2 = $r1.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable: ucar.nc2.dt.radial.Nids2Dataset this$0>;

        $r3 = staticinvoke <ucar.nc2.dt.radial.Nids2Dataset: java.util.Date access$200(ucar.nc2.dt.radial.Nids2Dataset)>($r2);

        return $r3;
    }

    public boolean isGateSizeConstant()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        return 1;
    }

    public int getGateNumber()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        int $i0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        $i0 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: int ngates>;

        return $i0;
    }

    public int getRadialNumber()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        int $i0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        $i0 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: int nrays>;

        return $i0;
    }

    public ucar.unidata.geoloc.EarthLocation getOrigin(int)
    {
        ucar.unidata.geoloc.EarthLocation $r3;
        ucar.nc2.dt.radial.Nids2Dataset $r2;
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;
        int i0;
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable $r1;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable this$1>;

        $r2 = $r1.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable: ucar.nc2.dt.radial.Nids2Dataset this$0>;

        $r3 = $r2.<ucar.nc2.dt.radial.Nids2Dataset: ucar.unidata.geoloc.EarthLocation origin>;

        return $r3;
    }

    public int getSweepIndex()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        return 0;
    }

    public void clearSweepMemory()
    {
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable$Nids2Sweep;

        return;
    }
}
