public class com.hp.hpl.jena.sparql.sse.Item extends com.hp.hpl.jena.sparql.sse.ItemLocation
{
    protected com.hp.hpl.jena.sparql.sse.ItemList list;
    protected com.hp.hpl.jena.graph.Node node;
    protected java.lang.String symbol;
    protected boolean isNil;
    public static final com.hp.hpl.jena.sparql.sse.Item nil;
    public static final com.hp.hpl.jena.sparql.sse.Item defaultItem;

    public static com.hp.hpl.jena.sparql.sse.Item createList()
    {
        int $i1, $i3;
        com.hp.hpl.jena.sparql.sse.Item $r0;

        $i1 = (int) -1;

        $i3 = (int) -1;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createList(int,int)>($i1, $i3);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.sse.Item createList(int, int)
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r1;
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.Item $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new com.hp.hpl.jena.sparql.sse.Item;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.sse.Item: void <init>(int,int)>(i0, i1);

        $r1 = new com.hp.hpl.jena.sparql.sse.ItemList;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: void <init>(int,int)>(i0, i1);

        $r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList list> = $r1;

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.sse.Item createList(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        int $i1, $i3;
        com.hp.hpl.jena.sparql.sse.Item $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        $i1 = (int) -1;

        $i3 = (int) -1;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createList(com.hp.hpl.jena.sparql.sse.ItemList,int,int)>(r0, $i1, $i3);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.sse.Item createList(com.hp.hpl.jena.sparql.sse.ItemList, int, int)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r1;
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.Item $r0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new com.hp.hpl.jena.sparql.sse.Item;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.sse.Item: void <init>(int,int)>(i0, i1);

        $r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList list> = r1;

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)
    {
        int $i1, $i3;
        com.hp.hpl.jena.sparql.sse.Item $r1;
        com.hp.hpl.jena.graph.Node r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $i1 = (int) -1;

        $i3 = (int) -1;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node,int,int)>(r0, $i1, $i3);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node, int, int)
    {
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.Item $r0;
        com.hp.hpl.jena.graph.Node r1;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new com.hp.hpl.jena.sparql.sse.Item;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.sse.Item: void <init>(int,int)>(i0, i1);

        $r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node node> = r1;

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.sse.Item createSymbol(java.lang.String)
    {
        int $i1, $i3;
        com.hp.hpl.jena.sparql.sse.Item $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i1 = (int) -1;

        $i3 = (int) -1;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createSymbol(java.lang.String,int,int)>(r0, $i1, $i3);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.sse.Item createSymbol(java.lang.String, int, int)
    {
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.Item $r1, $r2;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("nil");

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNil(int,int)>(i0, i1);

        return $r2;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.sse.Item;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: void <init>(int,int)>(i0, i1);

        $r1.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String symbol> = r0;

        return $r1;
    }

    private static com.hp.hpl.jena.sparql.sse.Item createNil()
    {
        int $i1, $i3;
        com.hp.hpl.jena.sparql.sse.Item $r0;

        $i1 = (int) -1;

        $i3 = (int) -1;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNil(int,int)>($i1, $i3);

        return $r0;
    }

    private static com.hp.hpl.jena.sparql.sse.Item createNil(int, int)
    {
        int i0, i1, $i3, $i5;
        com.hp.hpl.jena.sparql.sse.Item $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new com.hp.hpl.jena.sparql.sse.Item;

        $i3 = (int) -1;

        $i5 = (int) -1;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: void <init>(int,int)>($i3, $i5);

        $r1.<com.hp.hpl.jena.sparql.sse.Item: boolean isNil> = 1;

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.sse.Item createTagged(java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r1;
        com.hp.hpl.jena.sparql.sse.Item $r0, $r3;
        java.lang.String r2;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createList()>();

        $r1 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createSymbol(java.lang.String)>(r2);

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: void add(com.hp.hpl.jena.sparql.sse.Item)>($r3);

        return $r0;
    }

    public static void addPair(com.hp.hpl.jena.sparql.sse.ItemList, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        com.hp.hpl.jena.sparql.sse.Item $r2, $r5;
        java.lang.String r1, r3;
        com.hp.hpl.jena.graph.Node $r4;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createSymbol(java.lang.String)>(r1);

        $r4 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)>(r3);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)>($r4);

        staticinvoke <com.hp.hpl.jena.sparql.sse.Item: void addPair(com.hp.hpl.jena.sparql.sse.ItemList,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item)>(r0, $r2, $r5);

        return;
    }

    public static void addPair(com.hp.hpl.jena.sparql.sse.ItemList, java.lang.String, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        com.hp.hpl.jena.sparql.sse.Item $r2, $r4;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createSymbol(java.lang.String)>(r1);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)>(r3);

        staticinvoke <com.hp.hpl.jena.sparql.sse.Item: void addPair(com.hp.hpl.jena.sparql.sse.ItemList,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item)>(r0, $r2, $r4);

        return;
    }

    public static void addPair(com.hp.hpl.jena.sparql.sse.ItemList, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        com.hp.hpl.jena.sparql.sse.Item $r2, $r4;
        com.hp.hpl.jena.graph.Node r1, r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)>(r1);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)>(r3);

        staticinvoke <com.hp.hpl.jena.sparql.sse.Item: void addPair(com.hp.hpl.jena.sparql.sse.ItemList,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item)>(r0, $r2, $r4);

        return;
    }

    public static void addPair(com.hp.hpl.jena.sparql.sse.ItemList, com.hp.hpl.jena.sparql.sse.Item, com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r3;
        com.hp.hpl.jena.sparql.sse.Item r0, r1, $r2;

        r3 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        r0 := @parameter1: com.hp.hpl.jena.sparql.sse.Item;

        r1 := @parameter2: com.hp.hpl.jena.sparql.sse.Item;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item makePair(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item)>(r0, r1);

        virtualinvoke r3.<com.hp.hpl.jena.sparql.sse.ItemList: void add(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return;
    }

    public static com.hp.hpl.jena.sparql.sse.Item makePair(com.hp.hpl.jena.sparql.sse.Item, com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r1, $r3;
        com.hp.hpl.jena.sparql.sse.Item $r0, r2, r4;

        r2 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        r4 := @parameter1: com.hp.hpl.jena.sparql.sse.Item;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createList()>();

        $r1 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: void add(com.hp.hpl.jena.sparql.sse.Item)>(r2);

        $r3 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        virtualinvoke $r3.<com.hp.hpl.jena.sparql.sse.ItemList: void add(com.hp.hpl.jena.sparql.sse.Item)>(r4);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.sse.Item find(com.hp.hpl.jena.sparql.sse.ItemList, java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.sse.Item r3;
        java.lang.String r4;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        r4 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.sparql.sse.Item) $r2;

        $z1 = virtualinvoke r3.<com.hp.hpl.jena.sparql.sse.Item: boolean isTagged(java.lang.String)>(r4);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    private void <init>(int, int)
    {
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.Item r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemLocation: void <init>(int,int)>(i0, i1);

        r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList list> = null;

        r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node node> = null;

        r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String symbol> = null;

        r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNil> = 0;

        return;
    }

    private void <init>()
    {
        int $i1, $i3;
        com.hp.hpl.jena.sparql.sse.Item r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $i1 = (int) -1;

        $i3 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemLocation: void <init>(int,int)>($i1, $i3);

        r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList list> = null;

        r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node node> = null;

        r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String symbol> = null;

        r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNil> = 0;

        return;
    }

    public int hashCode()
    {
        int $i0;
        com.hp.hpl.jena.sparql.sse.Item r1;
        com.hp.hpl.jena.sparql.sse.Item$ItemHashCode $r0;

        r1 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $r0 = new com.hp.hpl.jena.sparql.sse.Item$ItemHashCode;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.sse.Item$ItemHashCode: void <init>()>();

        virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.Item: void visit(com.hp.hpl.jena.sparql.sse.ItemVisitor)>($r0);

        $i0 = $r0.<com.hp.hpl.jena.sparql.sse.Item$ItemHashCode: int hashCode>;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.sparql.sse.Item$ItemEquals $r2;
        com.hp.hpl.jena.sparql.sse.Item r0, $r3;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.hp.hpl.jena.sparql.sse.Item;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = new com.hp.hpl.jena.sparql.sse.Item$ItemEquals;

        $r3 = (com.hp.hpl.jena.sparql.sse.Item) r1;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item$ItemEquals: void <init>(com.hp.hpl.jena.sparql.sse.Item)>($r3);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: void visit(com.hp.hpl.jena.sparql.sse.ItemVisitor)>($r2);

        $z1 = $r2.<com.hp.hpl.jena.sparql.sse.Item$ItemEquals: boolean result>;

        return $z1;
    }

    public boolean sameSymbol(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.Item r0, r1;
        java.lang.String $r2;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.sse.Item;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.Item: boolean sameSymbol(java.lang.String)>($r2);

        return $z1;

     label1:
        return 0;
    }

    public boolean sameSymbol(java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.lang.String $r1, r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        r2 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public com.hp.hpl.jena.sparql.sse.ItemList getList()
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.sparql.sse.ItemList $r1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList list>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.Node getNode()
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node node>;

        return $r1;
    }

    public java.lang.String getSymbol()
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String symbol>;

        return $r1;
    }

    public double getDouble()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.sparql.sse.ItemException $r6, $r11;
        java.lang.String $r10, $r15;
        java.lang.Number $r4, $r5;
        boolean $z0, $z1;
        double $d0;
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r14;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 != 0 goto label1;

        $r11 = new com.hp.hpl.jena.sparql.sse.ItemException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a node, can\'t be a double: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.hp.hpl.jena.sparql.sse.ItemException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 != 0 goto label2;

        $r6 = new com.hp.hpl.jena.sparql.sse.ItemException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a literal, can\'t be a double: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.sse.ItemException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $r4 = (java.lang.Number) $r3;

        $r5 = (java.lang.Number) $r4;

        $d0 = virtualinvoke $r5.<java.lang.Number: double doubleValue()>();

        return $d0;
    }

    public long getInteger()
    {
        long $l0;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.sparql.sse.ItemException $r6, $r11;
        java.lang.String $r10, $r15;
        java.lang.Number $r4, $r5;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r14;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 != 0 goto label1;

        $r11 = new com.hp.hpl.jena.sparql.sse.ItemException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a node, can\'t be an integer: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.hp.hpl.jena.sparql.sse.ItemException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 != 0 goto label2;

        $r6 = new com.hp.hpl.jena.sparql.sse.ItemException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a literal, can\'t be a integer: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.sse.ItemException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $r4 = (java.lang.Number) $r3;

        $r5 = (java.lang.Number) $r4;

        $l0 = virtualinvoke $r5.<java.lang.Number: long longValue()>();

        return $l0;
    }

    public int getInt()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.sparql.sse.ItemException $r6, $r11;
        int $i0;
        java.lang.String $r10, $r15;
        java.lang.Number $r4, $r5;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r14;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 != 0 goto label1;

        $r11 = new com.hp.hpl.jena.sparql.sse.ItemException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a node, can\'t be an integer: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.hp.hpl.jena.sparql.sse.ItemException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 != 0 goto label2;

        $r6 = new com.hp.hpl.jena.sparql.sse.ItemException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a literal, can\'t be a integer: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.sse.ItemException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $r4 = (java.lang.Number) $r3;

        $r5 = (java.lang.Number) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public int getLong()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.sparql.sse.ItemException $r6, $r11;
        int $i0;
        java.lang.String $r10, $r15;
        java.lang.Number $r4, $r5;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r14;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 != 0 goto label1;

        $r11 = new com.hp.hpl.jena.sparql.sse.ItemException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a node, can\'t be an integer: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.hp.hpl.jena.sparql.sse.ItemException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 != 0 goto label2;

        $r6 = new com.hp.hpl.jena.sparql.sse.ItemException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a literal, can\'t be a integer: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.sse.ItemException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $r4 = (java.lang.Number) $r3;

        $r5 = (java.lang.Number) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public long asInteger()
    {
        long $l1, $l3;
        com.hp.hpl.jena.graph.Node $r7, $r8;
        com.hp.hpl.jena.sparql.sse.ItemException $r1;
        int $i0, $i2;
        java.lang.String $r5, $r6, $r9;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z2 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label1;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        $l3 = (long) $i2;

        return $l3;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $l1 = (long) $i0;

        return $l1;

     label2:
        $r1 = new com.hp.hpl.jena.sparql.sse.ItemException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a literal or string: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public java.lang.String sniff()
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r1;
        com.hp.hpl.jena.sparql.sse.Item r0, $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isTaggable()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        return $r3;
    }

    public boolean isTaggedIgnoreCase(java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r1;
        com.hp.hpl.jena.sparql.sse.Item r0, $r2;
        java.lang.String r3;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        r3 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isTaggable()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbolIgnoreCase(java.lang.String)>(r3);

        return $z1;
    }

    public boolean isTagged(java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r1;
        com.hp.hpl.jena.sparql.sse.Item r0, $r2;
        java.lang.String r3;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        r3 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isTaggable()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol(java.lang.String)>(r3);

        return $z1;
    }

    public boolean isTagged()
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r1;
        com.hp.hpl.jena.sparql.sse.Item r0, $r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isTaggable()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList list>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        return $z1;
    }

    private boolean isTaggable()
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r1;
        int $i0;
        com.hp.hpl.jena.sparql.sse.Item r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isList()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList list>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i0 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public boolean isNil()
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNil>;

        return $z0;
    }

    public boolean isList()
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.sparql.sse.ItemList $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList list>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isNode()
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node node>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isNodeURI()
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isVar()
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r1);

        return $z0;
    }

    public boolean isNodeLiteral()
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isNodeBNode()
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isSymbol()
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String symbol>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSymbol(java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.lang.String $r1, r2, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String symbol>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String symbol>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        return $z0;
    }

    public boolean isSymbolIgnoreCase(java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.lang.String $r1, r2, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String symbol>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String symbol>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        return $z0;
    }

    public void visit(com.hp.hpl.jena.sparql.sse.ItemVisitor)
    {
        java.io.PrintStream $r1;
        com.hp.hpl.jena.sparql.sse.ItemList $r5;
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.graph.Node $r4;
        com.hp.hpl.jena.sparql.sse.ItemVisitor r2;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        r2 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemVisitor;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isList()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        interfaceinvoke r2.<com.hp.hpl.jena.sparql.sse.ItemVisitor: void visit(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.ItemList)>(r0, $r5);

        goto label5;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        interfaceinvoke r2.<com.hp.hpl.jena.sparql.sse.ItemVisitor: void visit(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.graph.Node)>(r0, $r4);

        goto label5;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z2 == 0 goto label3;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        interfaceinvoke r2.<com.hp.hpl.jena.sparql.sse.ItemVisitor: void visit(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>(r0, $r3);

        goto label5;

     label3:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNil()>();

        if $z3 == 0 goto label4;

        interfaceinvoke r2.<com.hp.hpl.jena.sparql.sse.ItemVisitor: void visitNil()>();

        goto label5;

     label4:
        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("broken item");

     label5:
        return;
    }

    public com.hp.hpl.jena.sparql.sse.Item transform(com.hp.hpl.jena.sparql.sse.ItemTransform)
    {
        java.io.PrintStream $r1;
        com.hp.hpl.jena.sparql.sse.Item r0, $r4, $r6;
        com.hp.hpl.jena.graph.Node $r5;
        com.hp.hpl.jena.sparql.sse.ItemTransform r2;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        r2 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemTransform;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $r6 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.sse.ItemTransform: com.hp.hpl.jena.sparql.sse.Item transform(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.graph.Node)>(r0, $r5);

        return $r6;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        $r4 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.sse.ItemTransform: com.hp.hpl.jena.sparql.sse.Item transform(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>(r0, $r3);

        return $r4;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("broken item");

        return null;
    }

    public java.lang.String toString()
    {
        org.apache.jena.atlas.io.IndentedLineBuffer $r0;
        com.hp.hpl.jena.sparql.sse.Item r1;
        java.lang.String $r2;

        r1 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $r0 = new org.apache.jena.atlas.io.IndentedLineBuffer;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.ItemWriter: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r0, r1, null);

        $r2 = virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: java.lang.String asString()>();

        return $r2;
    }

    public java.lang.String shortString()
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r1;
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.graph.Node $r3;
        java.lang.String $r2, $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        return $r5;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r3);

        return $r4;

     label2:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: java.lang.String shortString()>();

        return $r2;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.sse.Item $r0, $r1;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNil()>();

        <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item nil> = $r0;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createSymbol(java.lang.String)>("_");

        <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item defaultItem> = $r1;

        return;
    }
}
