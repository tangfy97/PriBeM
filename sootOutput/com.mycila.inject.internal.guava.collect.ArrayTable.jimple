public final class com.mycila.inject.internal.guava.collect.ArrayTable extends java.lang.Object implements com.mycila.inject.internal.guava.collect.Table, java.io.Serializable
{
    private final com.mycila.inject.internal.guava.collect.ImmutableList rowList;
    private final com.mycila.inject.internal.guava.collect.ImmutableList columnList;
    private final com.mycila.inject.internal.guava.collect.ImmutableMap rowKeyToIndex;
    private final com.mycila.inject.internal.guava.collect.ImmutableMap columnKeyToIndex;
    private final java.lang.Object[][] array;
    private transient com.mycila.inject.internal.guava.collect.ArrayTable$CellSet cellSet;
    private transient com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap columnMap;
    private transient com.mycila.inject.internal.guava.collect.ArrayTable$RowMap rowMap;
    private transient java.util.Collection values;
    private static final long serialVersionUID;

    public static com.mycila.inject.internal.guava.collect.ArrayTable create(java.lang.Iterable, java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable $r0;
        java.lang.Iterable r1, r2;

        r1 := @parameter0: java.lang.Iterable;

        r2 := @parameter1: java.lang.Iterable;

        $r0 = new com.mycila.inject.internal.guava.collect.ArrayTable;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ArrayTable: void <init>(java.lang.Iterable,java.lang.Iterable)>(r1, r2);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ArrayTable create(com.mycila.inject.internal.guava.collect.Table)
    {
        com.mycila.inject.internal.guava.collect.Table r1;
        com.mycila.inject.internal.guava.collect.ArrayTable $r0;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Table;

        $r0 = new com.mycila.inject.internal.guava.collect.ArrayTable;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ArrayTable: void <init>(com.mycila.inject.internal.guava.collect.Table)>(r1);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ArrayTable create(com.mycila.inject.internal.guava.collect.ArrayTable)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable $r0, r1;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r0 = new com.mycila.inject.internal.guava.collect.ArrayTable;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ArrayTable: void <init>(com.mycila.inject.internal.guava.collect.ArrayTable)>(r1);

        return $r0;
    }

    private void <init>(java.lang.Iterable, java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r8, $r11;
        com.mycila.inject.internal.guava.collect.ImmutableMap$Builder $r7, $r9;
        com.mycila.inject.internal.guava.collect.ImmutableList $r2, $r4, $r5, $r6, $r10, $r12, $r13, $r15, $r18, $r21;
        java.lang.Integer $r17, $r20;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Iterable r1, r3;
        java.lang.Object[][] $r14, r22;
        int $i0, $i1, $i2, i3, $i4, i5;
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        java.lang.Object $r16, $r19;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r1 := @parameter0: java.lang.Iterable;

        r3 := @parameter1: java.lang.Iterable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList copyOf(java.lang.Iterable)>(r1);

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList> = $r2;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList copyOf(java.lang.Iterable)>(r3);

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList columnList> = $r4;

        $r5 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList>;

        $z0 = virtualinvoke $r5.<com.mycila.inject.internal.guava.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z2);

        $r6 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList columnList>;

        $z1 = virtualinvoke $r6.<com.mycila.inject.internal.guava.collect.ImmutableList: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z3);

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableMap$Builder builder()>();

        i3 = 0;

     label5:
        $r21 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList>;

        $i4 = virtualinvoke $r21.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        if i3 >= $i4 goto label6;

        $r18 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList>;

        $r19 = virtualinvoke $r18.<com.mycila.inject.internal.guava.collect.ImmutableList: java.lang.Object get(int)>(i3);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        virtualinvoke $r7.<com.mycila.inject.internal.guava.collect.ImmutableMap$Builder: com.mycila.inject.internal.guava.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r19, $r20);

        i3 = i3 + 1;

        goto label5;

     label6:
        $r8 = virtualinvoke $r7.<com.mycila.inject.internal.guava.collect.ImmutableMap$Builder: com.mycila.inject.internal.guava.collect.ImmutableMap build()>();

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap rowKeyToIndex> = $r8;

        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableMap$Builder builder()>();

        i5 = 0;

     label7:
        $r10 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList columnList>;

        $i0 = virtualinvoke $r10.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        if i5 >= $i0 goto label8;

        $r15 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList columnList>;

        $r16 = virtualinvoke $r15.<com.mycila.inject.internal.guava.collect.ImmutableList: java.lang.Object get(int)>(i5);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        virtualinvoke $r9.<com.mycila.inject.internal.guava.collect.ImmutableMap$Builder: com.mycila.inject.internal.guava.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r16, $r17);

        i5 = i5 + 1;

        goto label7;

     label8:
        $r11 = virtualinvoke $r9.<com.mycila.inject.internal.guava.collect.ImmutableMap$Builder: com.mycila.inject.internal.guava.collect.ImmutableMap build()>();

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap columnKeyToIndex> = $r11;

        $r12 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList>;

        $i1 = virtualinvoke $r12.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        $r13 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList columnList>;

        $i2 = virtualinvoke $r13.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        $r14 = newmultiarray (java.lang.Object)[$i1][$i2];

        r22 = (java.lang.Object[][]) $r14;

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object[][] array> = r22;

        return;
    }

    private void <init>(com.mycila.inject.internal.guava.collect.Table)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.Table r1;
        java.util.Set $r2, $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Table;

        $r2 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table: java.util.Set rowKeySet()>();

        $r3 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table: java.util.Set columnKeySet()>();

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable: void <init>(java.lang.Iterable,java.lang.Iterable)>($r2, $r3);

        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable: void putAll(com.mycila.inject.internal.guava.collect.Table)>(r1);

        return;
    }

    private void <init>(com.mycila.inject.internal.guava.collect.ArrayTable)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r4, $r5;
        java.lang.Object[] $r13, $r14, $r15;
        com.mycila.inject.internal.guava.collect.ImmutableList $r2, $r3, $r6, $r7, $r10;
        java.lang.Object[][] $r8, r9, $r11, $r12;
        int $i0, $i1, $i2, $i3, i4;
        com.mycila.inject.internal.guava.collect.ArrayTable r0, r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ArrayTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList>;

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList> = $r2;

        $r3 = r1.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList columnList>;

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList columnList> = $r3;

        $r4 = r1.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap rowKeyToIndex>;

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap rowKeyToIndex> = $r4;

        $r5 = r1.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap columnKeyToIndex>;

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap columnKeyToIndex> = $r5;

        $r6 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList>;

        $i0 = virtualinvoke $r6.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        $r7 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList columnList>;

        $i1 = virtualinvoke $r7.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        $r8 = newmultiarray (java.lang.Object)[$i0][$i1];

        r9 = (java.lang.Object[][]) $r8;

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object[][] array> = r9;

        i4 = 0;

     label1:
        $r10 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList>;

        $i2 = virtualinvoke $r10.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        if i4 >= $i2 goto label2;

        $r11 = r1.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object[][] array>;

        $r15 = $r11[i4];

        $r14 = r9[i4];

        $r12 = r1.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object[][] array>;

        $r13 = $r12[i4];

        $i3 = lengthof $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, $r14, 0, $i3);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableList rowKeyList()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList>;

        return $r1;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableList columnKeyList()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList columnList>;

        return $r1;
    }

    public java.lang.Object at(int, int)
    {
        java.lang.Object[][] $r1;
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        java.lang.Object[] $r2;
        int i0, i1;
        java.lang.Object $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object[][] array>;

        $r2 = $r1[i0];

        $r3 = $r2[i1];

        return $r3;
    }

    public java.lang.Object set(int, int, java.lang.Object)
    {
        java.lang.Object[] $r2, $r6;
        java.lang.Object[][] $r1, $r4;
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        int i0, i1;
        java.lang.Object r3, r5;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r5 := @parameter2: java.lang.Object;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object[][] array>;

        $r2 = $r1[i0];

        r3 = $r2[i1];

        $r4 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object[][] array>;

        $r6 = $r4[i0];

        $r6[i1] = r5;

        return r3;
    }

    public java.lang.Object[][] toArray(java.lang.Class)
    {
        java.lang.Object[] $r11, $r12, $r13;
        com.mycila.inject.internal.guava.collect.ImmutableList $r3, $r4, $r8;
        java.lang.Object[][] $r6, r7, $r9, $r10;
        int[] $r1;
        int $i0, $i1, $i2, $i3, i4;
        com.mycila.inject.internal.guava.collect.ArrayTable r2;
        java.lang.Class r0;
        java.lang.Object $r5;

        r2 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r0 := @parameter0: java.lang.Class;

        $r1 = newarray (int)[2];

        $r3 = r2.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList>;

        $i0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        $r1[0] = $i0;

        $r4 = r2.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList columnList>;

        $i1 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        $r1[1] = $i1;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(r0, $r1);

        $r6 = (java.lang.Object[][]) $r5;

        r7 = (java.lang.Object[][]) $r6;

        i4 = 0;

     label1:
        $r8 = r2.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList>;

        $i2 = virtualinvoke $r8.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        if i4 >= $i2 goto label2;

        $r9 = r2.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object[][] array>;

        $r13 = $r9[i4];

        $r12 = r7[i4];

        $r10 = r2.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object[][] array>;

        $r11 = $r10[i4];

        $i3 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, $r12, 0, $i3);

        i4 = i4 + 1;

        goto label1;

     label2:
        return r7;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.ArrayTable r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void eraseAll()
    {
        java.lang.Object[][] r1;
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        java.lang.Object[] r2;
        int i0, i1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object[][] array>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r2, null);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean contains(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        java.lang.Object r1, r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable: boolean containsRow(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable: boolean containsColumn(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean containsColumn(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ImmutableMap $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap columnKeyToIndex>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsRow(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ImmutableMap $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap rowKeyToIndex>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.lang.Object[] r2;
        java.lang.Object[][] r1;
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        int i0, i1, i2, i3;
        java.lang.Object r3, r4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r4 := @parameter0: java.lang.Object;

        r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object[][] array>;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label5;

        r2 = r1[i2];

        i1 = lengthof r2;

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        r3 = r2[i3];

        $z0 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r4, r3);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return 0;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r2, $r6;
        java.lang.Integer r4, r8;
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        java.lang.Object r1, $r3, r5, $r7, $r9;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap rowKeyToIndex>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r3;

        $r6 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap columnKeyToIndex>;

        $r7 = virtualinvoke $r6.<com.mycila.inject.internal.guava.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r5);

        r8 = (java.lang.Integer) $r7;

        $r9 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object getIndexed(java.lang.Integer,java.lang.Integer)>(r4, r8);

        return $r9;
    }

    private java.lang.Object getIndexed(java.lang.Integer, java.lang.Integer)
    {
        java.lang.Object[] $r4;
        java.lang.Integer r0, r1;
        java.lang.Object[][] $r3;
        com.mycila.inject.internal.guava.collect.ArrayTable r2;
        int $i0, $i1;
        java.lang.Object $r5;

        r2 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r0 := @parameter0: java.lang.Integer;

        r1 := @parameter1: java.lang.Integer;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r5 = null;

        goto label3;

     label2:
        $r3 = r2.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object[][] array>;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $r4 = $r3[$i0];

        $i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        $r5 = $r4[$i1];

     label3:
        return $r5;
    }

    public boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        return 0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r3, $r8;
        java.lang.Object[] $r6, $r10;
        com.mycila.inject.internal.guava.collect.ImmutableList $r7, $r11;
        java.lang.Integer r5, $r14;
        int $i0, $i1;
        boolean $z0, $z1;
        com.mycila.inject.internal.guava.collect.ArrayTable r2;
        java.lang.Object r0, r1, $r4, $r9, r12, $r13;

        r2 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r12 := @parameter2: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = r2.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap rowKeyToIndex>;

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r0);

        r5 = (java.lang.Integer) $r4;

        if r5 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = r0;

        $r7 = r2.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList>;

        $r6[1] = $r7;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Row %s not in %s", $r6);

        $r8 = r2.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap columnKeyToIndex>;

        $r9 = virtualinvoke $r8.<com.mycila.inject.internal.guava.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        $r14 = (java.lang.Integer) $r9;

        if $r14 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = r1;

        $r11 = r2.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList columnList>;

        $r10[1] = $r11;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Column %s not in %s", $r10);

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        $r13 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object set(int,int,java.lang.Object)>($i0, $i1, r12);

        return $r13;
    }

    public void putAll(com.mycila.inject.internal.guava.collect.Table)
    {
        java.util.Iterator $r2;
        com.mycila.inject.internal.guava.collect.Table r0;
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.ArrayTable r5;
        com.mycila.inject.internal.guava.collect.Table$Cell r4;
        java.lang.Object $r3, $r6, $r7, $r8;
        boolean $z0;

        r5 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.Table;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.collect.Table: java.util.Set cellSet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.mycila.inject.internal.guava.collect.Table$Cell) $r3;

        $r6 = interfaceinvoke r4.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getRowKey()>();

        $r7 = interfaceinvoke r4.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getColumnKey()>();

        $r8 = interfaceinvoke r4.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getValue()>();

        virtualinvoke r5.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r7, $r8);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.ArrayTable r1;
        java.lang.Object r2, r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.lang.Object erase(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r2, $r6;
        java.lang.Integer r4, r8;
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        int $i0, $i1;
        java.lang.Object r1, $r3, r5, $r7, $r9;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap rowKeyToIndex>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r3;

        $r6 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap columnKeyToIndex>;

        $r7 = virtualinvoke $r6.<com.mycila.inject.internal.guava.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r5);

        r8 = (java.lang.Integer) $r7;

        if r4 == null goto label1;

        if r8 != null goto label2;

     label1:
        return null;

     label2:
        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        $r9 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object set(int,int,java.lang.Object)>($i0, $i1, null);

        return $r9;
    }

    public int size()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        int $i0, $i1, $i2;
        com.mycila.inject.internal.guava.collect.ImmutableList $r1, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList>;

        $i0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        $r2 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList columnList>;

        $i1 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        $i2 = $i0 * $i1;

        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r2;
        com.mycila.inject.internal.guava.collect.Table r1;
        java.util.Set $r3, $r4;
        java.lang.Object r0;
        boolean $z0, $z1;

        r2 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Table;

        if $z0 == 0 goto label1;

        r1 = (com.mycila.inject.internal.guava.collect.Table) r0;

        $r3 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.ArrayTable: java.util.Set cellSet()>();

        $r4 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table: java.util.Set cellSet()>();

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.ArrayTable r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.util.Set cellSet()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        java.lang.String $r2;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.util.Map rowMap()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public java.util.Set cellSet()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ArrayTable$CellSet r1, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ArrayTable$CellSet cellSet>;

        if r1 != null goto label1;

        $r2 = new com.mycila.inject.internal.guava.collect.ArrayTable$CellSet;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.ArrayTable$CellSet: void <init>(com.mycila.inject.internal.guava.collect.ArrayTable,com.mycila.inject.internal.guava.collect.ArrayTable$1)>(r0, null);

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ArrayTable$CellSet cellSet> = $r2;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public java.util.Map column(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r2;
        java.lang.Integer r4;
        com.mycila.inject.internal.guava.collect.ArrayTable$Column $r6;
        com.mycila.inject.internal.guava.collect.ArrayTable r1;
        java.util.Map $r5;
        int $i0;
        java.lang.Object r0, $r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = r1.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap columnKeyToIndex>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (java.lang.Integer) $r3;

        if r4 != null goto label1;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableMap of()>();

        goto label2;

     label1:
        $r6 = new com.mycila.inject.internal.guava.collect.ArrayTable$Column;

        $r5 = $r6;

        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        specialinvoke $r6.<com.mycila.inject.internal.guava.collect.ArrayTable$Column: void <init>(com.mycila.inject.internal.guava.collect.ArrayTable,int)>(r1, $i0);

     label2:
        return $r5;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSet columnKeySet()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ImmutableMap $r1;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap columnKeyToIndex>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableSet keySet()>();

        return $r2;
    }

    public java.util.Map columnMap()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap r1, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap columnMap>;

        if r1 != null goto label1;

        $r2 = new com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap: void <init>(com.mycila.inject.internal.guava.collect.ArrayTable,com.mycila.inject.internal.guava.collect.ArrayTable$1)>(r0, null);

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap columnMap> = $r2;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public java.util.Map row(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r2;
        java.lang.Integer r4;
        com.mycila.inject.internal.guava.collect.ArrayTable r1;
        java.util.Map $r5;
        int $i0;
        java.lang.Object r0, $r3;
        com.mycila.inject.internal.guava.collect.ArrayTable$Row $r6;

        r1 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = r1.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap rowKeyToIndex>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (java.lang.Integer) $r3;

        if r4 != null goto label1;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableMap of()>();

        goto label2;

     label1:
        $r6 = new com.mycila.inject.internal.guava.collect.ArrayTable$Row;

        $r5 = $r6;

        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        specialinvoke $r6.<com.mycila.inject.internal.guava.collect.ArrayTable$Row: void <init>(com.mycila.inject.internal.guava.collect.ArrayTable,int)>(r1, $i0);

     label2:
        return $r5;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSet rowKeySet()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ImmutableMap $r1;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap rowKeyToIndex>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableSet keySet()>();

        return $r2;
    }

    public java.util.Map rowMap()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ArrayTable$RowMap r1, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ArrayTable$RowMap rowMap>;

        if r1 != null goto label1;

        $r2 = new com.mycila.inject.internal.guava.collect.ArrayTable$RowMap;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.ArrayTable$RowMap: void <init>(com.mycila.inject.internal.guava.collect.ArrayTable,com.mycila.inject.internal.guava.collect.ArrayTable$1)>(r0, null);

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ArrayTable$RowMap rowMap> = $r2;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public java.util.Collection values()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ArrayTable$Values $r3;
        java.util.Collection r1, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.util.Collection values>;

        if r1 != null goto label1;

        $r3 = new com.mycila.inject.internal.guava.collect.ArrayTable$Values;

        $r2 = $r3;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.ArrayTable$Values: void <init>(com.mycila.inject.internal.guava.collect.ArrayTable,com.mycila.inject.internal.guava.collect.ArrayTable$1)>(r0, null);

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.util.Collection values> = $r3;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public volatile java.util.Set columnKeySet()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableSet columnKeySet()>();

        return $r1;
    }

    public volatile java.util.Set rowKeySet()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableSet rowKeySet()>();

        return $r1;
    }

    static com.mycila.inject.internal.guava.collect.ImmutableList access$100(com.mycila.inject.internal.guava.collect.ArrayTable)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList columnList>;

        return $r1;
    }

    static com.mycila.inject.internal.guava.collect.ImmutableList access$200(com.mycila.inject.internal.guava.collect.ArrayTable)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList rowList>;

        return $r1;
    }

    static java.lang.Object[][] access$300(com.mycila.inject.internal.guava.collect.ArrayTable)
    {
        java.lang.Object[][] $r1;
        com.mycila.inject.internal.guava.collect.ArrayTable r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object[][] array>;

        return $r1;
    }

    static com.mycila.inject.internal.guava.collect.ImmutableMap access$400(com.mycila.inject.internal.guava.collect.ArrayTable)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ImmutableMap $r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap rowKeyToIndex>;

        return $r1;
    }

    static com.mycila.inject.internal.guava.collect.ImmutableMap access$500(com.mycila.inject.internal.guava.collect.ArrayTable)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        com.mycila.inject.internal.guava.collect.ImmutableMap $r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.ArrayTable;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap columnKeyToIndex>;

        return $r1;
    }

    static java.lang.Object access$600(com.mycila.inject.internal.guava.collect.ArrayTable, java.lang.Integer, java.lang.Integer)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r0;
        java.lang.Object $r3;
        java.lang.Integer r1, r2;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.ArrayTable;

        r1 := @parameter1: java.lang.Integer;

        r2 := @parameter2: java.lang.Integer;

        $r3 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object getIndexed(java.lang.Integer,java.lang.Integer)>(r1, r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.ArrayTable: long serialVersionUID> = 0L;

        return;
    }
}
