public class org.springframework.scheduling.config.ScheduledTaskRegistrar extends java.lang.Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    private org.springframework.scheduling.TaskScheduler taskScheduler;
    private java.util.concurrent.ScheduledExecutorService localExecutor;
    private java.util.Map triggerTasks;
    private java.util.Map cronTasks;
    private java.util.Map fixedRateTasks;
    private java.util.Map fixedDelayTasks;
    private final java.util.Set scheduledFutures;

    public void <init>()
    {
        org.springframework.scheduling.config.ScheduledTaskRegistrar r0;
        java.util.LinkedHashSet $r1;

        r0 := @this: org.springframework.scheduling.config.ScheduledTaskRegistrar;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashSet;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Set scheduledFutures> = $r1;

        return;
    }

    public void setTaskScheduler(org.springframework.scheduling.TaskScheduler)
    {
        org.springframework.scheduling.TaskScheduler r0;
        org.springframework.scheduling.config.ScheduledTaskRegistrar r1;

        r1 := @this: org.springframework.scheduling.config.ScheduledTaskRegistrar;

        r0 := @parameter0: org.springframework.scheduling.TaskScheduler;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "TaskScheduler must not be null");

        r1.<org.springframework.scheduling.config.ScheduledTaskRegistrar: org.springframework.scheduling.TaskScheduler taskScheduler> = r0;

        return;
    }

    public void setScheduler(java.lang.Object)
    {
        org.springframework.scheduling.TaskScheduler $r9;
        java.lang.IllegalArgumentException $r1;
        java.util.concurrent.ScheduledExecutorService $r8;
        org.springframework.scheduling.config.ScheduledTaskRegistrar r6;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r4;
        java.lang.Class $r3;
        java.lang.String $r5;
        org.springframework.scheduling.concurrent.ConcurrentTaskScheduler $r7;
        boolean $z0, $z1;

        r6 := @this: org.springframework.scheduling.config.ScheduledTaskRegistrar;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Scheduler object must not be null");

        $z0 = r0 instanceof org.springframework.scheduling.TaskScheduler;

        if $z0 == 0 goto label1;

        $r9 = (org.springframework.scheduling.TaskScheduler) r0;

        r6.<org.springframework.scheduling.config.ScheduledTaskRegistrar: org.springframework.scheduling.TaskScheduler taskScheduler> = $r9;

        goto label3;

     label1:
        $z1 = r0 instanceof java.util.concurrent.ScheduledExecutorService;

        if $z1 == 0 goto label2;

        $r7 = new org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

        $r8 = (java.util.concurrent.ScheduledExecutorService) r0;

        specialinvoke $r7.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: void <init>(java.util.concurrent.ScheduledExecutorService)>($r8);

        r6.<org.springframework.scheduling.config.ScheduledTaskRegistrar: org.springframework.scheduling.TaskScheduler taskScheduler> = $r7;

        goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unsupported scheduler type: ");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label3:
        return;
    }

    public void setTriggerTasks(java.util.Map)
    {
        org.springframework.scheduling.config.ScheduledTaskRegistrar r0;
        java.util.Map r1;

        r0 := @this: org.springframework.scheduling.config.ScheduledTaskRegistrar;

        r1 := @parameter0: java.util.Map;

        r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Map triggerTasks> = r1;

        return;
    }

    public void setCronTasks(java.util.Map)
    {
        org.springframework.scheduling.config.ScheduledTaskRegistrar r0;
        java.util.Map r1;

        r0 := @this: org.springframework.scheduling.config.ScheduledTaskRegistrar;

        r1 := @parameter0: java.util.Map;

        r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Map cronTasks> = r1;

        return;
    }

    public void setFixedRateTasks(java.util.Map)
    {
        org.springframework.scheduling.config.ScheduledTaskRegistrar r0;
        java.util.Map r1;

        r0 := @this: org.springframework.scheduling.config.ScheduledTaskRegistrar;

        r1 := @parameter0: java.util.Map;

        r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Map fixedRateTasks> = r1;

        return;
    }

    public void setFixedDelayTasks(java.util.Map)
    {
        org.springframework.scheduling.config.ScheduledTaskRegistrar r0;
        java.util.Map r1;

        r0 := @this: org.springframework.scheduling.config.ScheduledTaskRegistrar;

        r1 := @parameter0: java.util.Map;

        r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Map fixedDelayTasks> = r1;

        return;
    }

    public void afterPropertiesSet()
    {
        java.lang.Long $r15, $r26;
        java.util.Map $r2, $r3, $r4, $r5, $r6, $r17, $r28, $r40;
        org.springframework.scheduling.config.ScheduledTaskRegistrar r0;
        org.springframework.scheduling.Trigger $r49;
        java.util.Set $r7, $r10, $r18, $r21, $r29, $r32, $r41, $r44;
        org.springframework.scheduling.concurrent.ConcurrentTaskScheduler $r52;
        long $l0, $l1;
        java.util.concurrent.ScheduledExecutorService $r51, $r53;
        java.lang.String $r38;
        java.util.Map$Entry r54, r55, r56, r57;
        org.springframework.scheduling.support.CronTrigger $r35;
        java.util.concurrent.ScheduledFuture $r16, $r27, $r39, $r50;
        java.lang.Runnable $r13, $r24, $r36, $r47;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.scheduling.TaskScheduler $r1, $r11, $r22, $r33, $r45;
        java.util.Iterator $r8, $r19, $r30, $r42;
        java.lang.Object $r9, $r12, $r14, $r20, $r23, $r25, $r31, $r34, $r37, $r43, $r46, $r48;

        r0 := @this: org.springframework.scheduling.config.ScheduledTaskRegistrar;

        $r1 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: org.springframework.scheduling.TaskScheduler taskScheduler>;

        if $r1 != null goto label01;

        $r51 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>();

        r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.concurrent.ScheduledExecutorService localExecutor> = $r51;

        $r52 = new org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

        $r53 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.concurrent.ScheduledExecutorService localExecutor>;

        specialinvoke $r52.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: void <init>(java.util.concurrent.ScheduledExecutorService)>($r53);

        r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: org.springframework.scheduling.TaskScheduler taskScheduler> = $r52;

     label01:
        $r2 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Map triggerTasks>;

        if $r2 == null goto label04;

        $r40 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Map triggerTasks>;

        $r41 = interfaceinvoke $r40.<java.util.Map: java.util.Set entrySet()>();

        $r42 = interfaceinvoke $r41.<java.util.Set: java.util.Iterator iterator()>();

        goto label03;

     label02:
        $r43 = interfaceinvoke $r42.<java.util.Iterator: java.lang.Object next()>();

        r54 = (java.util.Map$Entry) $r43;

        $r44 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Set scheduledFutures>;

        $r45 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: org.springframework.scheduling.TaskScheduler taskScheduler>;

        $r46 = interfaceinvoke r54.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r47 = (java.lang.Runnable) $r46;

        $r48 = interfaceinvoke r54.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r49 = (org.springframework.scheduling.Trigger) $r48;

        $r50 = interfaceinvoke $r45.<org.springframework.scheduling.TaskScheduler: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,org.springframework.scheduling.Trigger)>($r47, $r49);

        interfaceinvoke $r44.<java.util.Set: boolean add(java.lang.Object)>($r50);

     label03:
        $z3 = interfaceinvoke $r42.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label02;

     label04:
        $r3 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Map cronTasks>;

        if $r3 == null goto label07;

        $r28 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Map cronTasks>;

        $r29 = interfaceinvoke $r28.<java.util.Map: java.util.Set entrySet()>();

        $r30 = interfaceinvoke $r29.<java.util.Set: java.util.Iterator iterator()>();

        goto label06;

     label05:
        $r31 = interfaceinvoke $r30.<java.util.Iterator: java.lang.Object next()>();

        r55 = (java.util.Map$Entry) $r31;

        $r32 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Set scheduledFutures>;

        $r33 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: org.springframework.scheduling.TaskScheduler taskScheduler>;

        $r34 = interfaceinvoke r55.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r36 = (java.lang.Runnable) $r34;

        $r35 = new org.springframework.scheduling.support.CronTrigger;

        $r37 = interfaceinvoke r55.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r38 = (java.lang.String) $r37;

        specialinvoke $r35.<org.springframework.scheduling.support.CronTrigger: void <init>(java.lang.String)>($r38);

        $r39 = interfaceinvoke $r33.<org.springframework.scheduling.TaskScheduler: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,org.springframework.scheduling.Trigger)>($r36, $r35);

        interfaceinvoke $r32.<java.util.Set: boolean add(java.lang.Object)>($r39);

     label06:
        $z2 = interfaceinvoke $r30.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label05;

     label07:
        $r4 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Map fixedRateTasks>;

        if $r4 == null goto label10;

        $r17 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Map fixedRateTasks>;

        $r18 = interfaceinvoke $r17.<java.util.Map: java.util.Set entrySet()>();

        $r19 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

        goto label09;

     label08:
        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r56 = (java.util.Map$Entry) $r20;

        $r21 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Set scheduledFutures>;

        $r22 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: org.springframework.scheduling.TaskScheduler taskScheduler>;

        $r23 = interfaceinvoke r56.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r24 = (java.lang.Runnable) $r23;

        $r25 = interfaceinvoke r56.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r26 = (java.lang.Long) $r25;

        $l1 = virtualinvoke $r26.<java.lang.Long: long longValue()>();

        $r27 = interfaceinvoke $r22.<org.springframework.scheduling.TaskScheduler: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long)>($r24, $l1);

        interfaceinvoke $r21.<java.util.Set: boolean add(java.lang.Object)>($r27);

     label09:
        $z1 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label08;

     label10:
        $r5 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Map fixedDelayTasks>;

        if $r5 == null goto label13;

        $r6 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Map fixedDelayTasks>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        goto label12;

     label11:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r57 = (java.util.Map$Entry) $r9;

        $r10 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Set scheduledFutures>;

        $r11 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: org.springframework.scheduling.TaskScheduler taskScheduler>;

        $r12 = interfaceinvoke r57.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (java.lang.Runnable) $r12;

        $r14 = interfaceinvoke r57.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (java.lang.Long) $r14;

        $l0 = virtualinvoke $r15.<java.lang.Long: long longValue()>();

        $r16 = interfaceinvoke $r11.<org.springframework.scheduling.TaskScheduler: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long)>($r13, $l0);

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r16);

     label12:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label11;

     label13:
        return;
    }

    public void destroy()
    {
        java.util.concurrent.ScheduledFuture r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.util.concurrent.ScheduledExecutorService $r5, $r6;
        org.springframework.scheduling.config.ScheduledTaskRegistrar r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.config.ScheduledTaskRegistrar;

        $r1 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.Set scheduledFutures>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.concurrent.ScheduledFuture) $r3;

        interfaceinvoke r4.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.concurrent.ScheduledExecutorService localExecutor>;

        if $r5 == null goto label3;

        $r6 = r0.<org.springframework.scheduling.config.ScheduledTaskRegistrar: java.util.concurrent.ScheduledExecutorService localExecutor>;

        interfaceinvoke $r6.<java.util.concurrent.ScheduledExecutorService: java.util.List shutdownNow()>();

     label3:
        return;
    }
}
