public class org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl extends java.lang.Object implements org.waveprotocol.wave.model.document.indexed.IndexedDocument, org.waveprotocol.wave.model.document.indexed.Validator
{
    public static boolean performValidation;
    private final org.waveprotocol.wave.model.util.OffsetList$LocationAction pointFinder;
    private final org.waveprotocol.wave.model.util.OffsetList$LocationAction locationUpdater;
    private final org.waveprotocol.wave.model.document.raw.RawDocument substrate;
    private final org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList;
    private int currentLocation;
    private org.waveprotocol.wave.model.util.OffsetList$Container currentContainer;
    private int currentOffset;
    private java.lang.Object currentParent;
    private int deletionDepth;
    private final org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations;
    private final org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints;
    private final org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument autoDoc;
    private final org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$InvertibleCursor invertibleCursor;
    private boolean inconsistent;
    private final org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor nindoCursor;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.model.document.raw.RawDocument, org.waveprotocol.wave.model.document.indexed.RawAnnotationSet, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations $r25;
        java.lang.AssertionError $r27, $r28;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet r7, $r15, $r17, $r18, $r20;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$InvertibleCursor $r23;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r6;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1 $r21;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$2 $r22;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor $r24;
        org.waveprotocol.wave.model.document.raw.RawDocument r8;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r11, $r16, $r26;
        java.lang.Object $r10, $r12, $r13;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r8 := @parameter0: org.waveprotocol.wave.model.document.raw.RawDocument;

        r7 := @parameter1: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet;

        r6 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r21 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1;

        specialinvoke $r21.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>(r0);

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$LocationAction pointFinder> = $r21;

        $r22 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$2;

        specialinvoke $r22.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$2: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>(r0);

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$LocationAction locationUpdater> = $r22;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.Automatons: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument fromReadable(org.waveprotocol.wave.model.document.ReadableWDocument)>(r0);

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument autoDoc> = $r3;

        $r23 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$InvertibleCursor;

        specialinvoke $r23.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$InvertibleCursor: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1)>(r0, null);

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$InvertibleCursor invertibleCursor> = $r23;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean inconsistent> = 0;

        $r24 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        specialinvoke $r24.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>(r0);

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor nindoCursor> = $r24;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "Null schema not allowed, use DocumentSchema.NO_SCHEMA_CONSTRAINTS");

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints> = r6;

        if r7 == null goto label1;

        $r20 = r7;

        goto label2;

     label1:
        $r25 = new org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        $r20 = $r25;

        specialinvoke $r25.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: void <init>()>();

     label2:
        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations> = $r20;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate> = r8;

        $r26 = new org.waveprotocol.wave.model.util.EvaluableOffsetList;

        specialinvoke $r26.<org.waveprotocol.wave.model.util.EvaluableOffsetList: void <init>(org.waveprotocol.wave.model.util.EvaluableOffsetList$AssociativeOperator)>(null);

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList> = $r26;

        $z0 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $i3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int size()>();

        if $i3 == 0 goto label3;

        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();

        throw $r27;

     label3:
        $r10 = interfaceinvoke r8.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getDocumentElement()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void indexChildren(java.lang.Object)>($r10);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void resetLocation()>();

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $i0 = virtualinvoke $r11.<org.waveprotocol.wave.model.util.EvaluableOffsetList: int size()>();

        if $i0 <= 0 goto label4;

        $r15 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        interfaceinvoke $r15.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void begin()>();

        $r17 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        $r16 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $i2 = virtualinvoke $r16.<org.waveprotocol.wave.model.util.EvaluableOffsetList: int size()>();

        interfaceinvoke $r17.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void insert(int)>($i2);

        $r18 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        interfaceinvoke $r18.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void finish()>();

     label4:
        $z1 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label5;

        $r12 = interfaceinvoke r8.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getDocumentElement()>();

        $r13 = interfaceinvoke r8.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getFirstChild(java.lang.Object)>($r12);

        if $r13 != null goto label5;

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int size()>();

        if $i1 == 0 goto label5;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label5:
        return;
    }

    private void indexElement(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Container $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r1;
        java.lang.Object r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Container sentinel()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void insertBefore(org.waveprotocol.wave.model.util.OffsetList$Container,java.lang.Object,int)>($r2, r3, 1);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void indexChildren(java.lang.Object)>(r3);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container insertBefore(java.lang.Object,int)>(null, 1);

        return;
    }

    private void indexChildren(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Container $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r4, $r5, $r7, $r9, $r10;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r1;
        int $i0;
        java.lang.Object r3, $r6, $r8, r11;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Container sentinel()>();

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        r11 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getFirstChild(java.lang.Object)>(r3);

     label1:
        if r11 == null goto label4;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asElement(java.lang.Object)>(r11);

        if $r6 == null goto label2;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void indexElement(java.lang.Object)>($r6);

        goto label3;

     label2:
        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asText(java.lang.Object)>(r11);

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $i0 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.raw.RawDocument: int getLength(java.lang.Object)>($r8);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void insertBefore(org.waveprotocol.wave.model.util.OffsetList$Container,java.lang.Object,int)>($r2, $r8, $i0);

     label3:
        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getNextSibling(java.lang.Object)>(r11);

        goto label1;

     label4:
        return;
    }

    public org.waveprotocol.wave.model.document.util.Point locate(int)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r1, $r3;
        int i0, $i1;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.document.util.Point $r5;
        org.waveprotocol.wave.model.util.OffsetList$LocationAction $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $i1 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndex(int,int)>(i0, $i1);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$LocationAction pointFinder>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.util.EvaluableOffsetList: java.lang.Object performActionAt(int,org.waveprotocol.wave.model.util.OffsetList$LocationAction)>(i0, $r2);

        $r5 = (org.waveprotocol.wave.model.document.util.Point) $r4;

        return $r5;
    }

    public int getLocation(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.OffsetList$Container $r3, $r4;
        int $i0;
        java.lang.String $r9, $r14;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r1;
        java.lang.IllegalArgumentException $r5, $r10;
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        java.lang.Object r0;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r13;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Cannot get the location of a null node");

        $r2 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer(java.lang.Object)>(r0);

        if $r3 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getLocation: node has no indexing container - ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getNextContainer()>();

        if $r4 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getLocation: node probably removed from DOM - ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        $i0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.OffsetList$Container: int offset()>();

        return $i0;
    }

    public int getLocation(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r2, $r3, $r4;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Cannot get the location of a null point");

        staticinvoke <org.waveprotocol.wave.model.document.util.Point: void checkPoint(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point,java.lang.String)>(r1, r0, "IndexedDocumentImpl#getLocation");

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $i2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int getLocation(java.lang.Object)>($r4);

        $i3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $i4 = $i2 + $i3;

        return $i4;

     label1:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r2 != null goto label2;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $i1 = specialinvoke r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int getLastLocationIn(java.lang.Object)>($r3);

        return $i1;

     label2:
        $i0 = virtualinvoke r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int getLocation(java.lang.Object)>($r2);

        return $i0;
    }

    private int getLastLocationIn(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.OffsetList$Container $r6, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r2, $r5, $r7, $r9;
        java.lang.Object r1, $r3, $r4, $r8;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getLastChild(java.lang.Object)>(r1);

        if $r3 == null goto label2;

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asElement(java.lang.Object)>($r3);

        if $r8 == null goto label1;

        $i6 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int getLastLocationIn(java.lang.Object)>($r3);

        $i7 = $i6 + 1;

        return $i7;

     label1:
        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.raw.RawDocument: org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer(java.lang.Object)>($r3);

        $i3 = interfaceinvoke $r10.<org.waveprotocol.wave.model.util.OffsetList$Container: int offset()>();

        $i4 = interfaceinvoke $r10.<org.waveprotocol.wave.model.util.OffsetList$Container: int size()>();

        $i5 = $i3 + $i4;

        return $i5;

     label2:
        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object getDocumentElement()>();

        if r1 != $r4 goto label3;

        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int size()>();

        return $i2;

     label3:
        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer(java.lang.Object)>(r1);

        $i0 = interfaceinvoke $r6.<org.waveprotocol.wave.model.util.OffsetList$Container: int offset()>();

        $i1 = $i0 + 1;

        return $i1;
    }

    private void moveToCurrentLocation()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r2;
        int $i0;
        org.waveprotocol.wave.model.util.OffsetList$LocationAction $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$LocationAction locationUpdater>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList: java.lang.Object performActionAt(int,org.waveprotocol.wave.model.util.OffsetList$LocationAction)>($i0, $r1);

        return;
    }

    public void consume(org.waveprotocol.wave.model.document.operation.DocOp) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $z0 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean performValidation>;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.DocOp,boolean)>(r1, $z0);

        return;
    }

    public void consume(org.waveprotocol.wave.model.document.operation.DocOp, boolean) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.operation.OperationException $r4;
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        org.waveprotocol.wave.model.operation.OpCursorException $r3;
        java.lang.String $r5;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$InvertibleCursor $r2;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void checkConsistent()>();

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void maybeThrowOperationExceptionFor(org.waveprotocol.wave.model.document.operation.DocOp)>(r1);

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void beginChange()>();

     label2:
        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$InvertibleCursor invertibleCursor>;

        interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.DocOp: void apply(org.waveprotocol.wave.model.document.operation.DocOpCursor)>($r2);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = new org.waveprotocol.wave.model.operation.OperationException;

        $r5 = virtualinvoke $r3.<org.waveprotocol.wave.model.operation.OpCursorException: java.lang.String getMessage()>();

        specialinvoke $r4.<org.waveprotocol.wave.model.operation.OperationException: void <init>(java.lang.String,java.lang.Throwable)>($r5, $r3);

        throw $r4;

     label5:
        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void endChange()>();

        return;

        catch org.waveprotocol.wave.model.operation.OpCursorException from label2 to label3 with label4;
    }

    public void maybeThrowOperationExceptionFor(org.waveprotocol.wave.model.document.operation.DocOp) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r3, $r7;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector $r5;
        org.waveprotocol.wave.model.operation.OperationException $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r4;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r2, $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints>;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument autoDoc>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument,org.waveprotocol.wave.model.document.operation.DocOp)>(null, $r3, $r2, r1);

        $z0 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z0 != 0 goto label1;

        $r5 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: void <init>()>();

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints>;

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument autoDoc>;

        staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument,org.waveprotocol.wave.model.document.operation.DocOp)>($r5, $r7, $r6, r1);

        $r8 = new org.waveprotocol.wave.model.operation.OperationException;

        specialinvoke $r8.<org.waveprotocol.wave.model.operation.OperationException: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r5);

        throw $r8;

     label1:
        return;
    }

    public org.waveprotocol.wave.model.document.operation.DocOp consumeAndReturnInvertible(org.waveprotocol.wave.model.document.operation.Nindo) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.operation.Nindo r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.operation.DocOp $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo;

        $z0 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean performValidation>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.DocOp consumeAndReturnInvertible(org.waveprotocol.wave.model.document.operation.Nindo,boolean)>(r1, $z0);

        return $r2;
    }

    public org.waveprotocol.wave.model.document.operation.DocOp consumeAndReturnInvertible(org.waveprotocol.wave.model.document.operation.Nindo, boolean) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.operation.DocOp $r5;
        org.waveprotocol.wave.model.operation.OpCursorException $r6;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor $r1, $r3, $r4;
        org.waveprotocol.wave.model.document.operation.Nindo r2;
        org.waveprotocol.wave.model.operation.OperationException $r7;
        java.lang.String $r8;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void checkConsistent()>();

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void maybeThrowOperationExceptionFor(org.waveprotocol.wave.model.document.operation.Nindo)>(r2);

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor nindoCursor>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void access$700(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor)>($r1);

     label2:
        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor nindoCursor>;

        virtualinvoke r2.<org.waveprotocol.wave.model.document.operation.Nindo: void apply(org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor)>($r3);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = new org.waveprotocol.wave.model.operation.OperationException;

        $r8 = virtualinvoke $r6.<org.waveprotocol.wave.model.operation.OpCursorException: java.lang.String getMessage()>();

        specialinvoke $r7.<org.waveprotocol.wave.model.operation.OperationException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r6);

        throw $r7;

     label5:
        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor nindoCursor>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.DocOp access$800(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor)>($r4);

        return $r5;

        catch org.waveprotocol.wave.model.operation.OpCursorException from label2 to label3 with label4;
    }

    public void maybeThrowOperationExceptionFor(org.waveprotocol.wave.model.document.operation.Nindo) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector $r3;
        org.waveprotocol.wave.model.document.operation.Nindo r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.operation.OperationException $r4;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.NindoValidator: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector validate(org.waveprotocol.wave.model.document.indexed.IndexedDocument,org.waveprotocol.wave.model.document.operation.Nindo,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>(r0, r1, $r2);

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: boolean isValid()>();

        if $z0 != 0 goto label1;

        $r4 = new org.waveprotocol.wave.model.operation.OperationException;

        specialinvoke $r4.<org.waveprotocol.wave.model.operation.OperationException: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r3);

        throw $r4;

     label1:
        return;
    }

    private void checkConsistent()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $z0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean inconsistent>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "The document is not in a consistent state");

        return;
    }

    private void beginChange()
    {
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void beforeBegin()>();

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean inconsistent> = 1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void resetLocation()>();

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void begin()>();

        return;
    }

    private void endChange() throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r1;
        org.waveprotocol.wave.model.operation.OperationException $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int size()>();

        if $i0 == $i1 goto label1;

        $r2 = new org.waveprotocol.wave.model.operation.OperationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation size does not match document size [operation size:");

        $i2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] [doc size:");

        $i3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int size()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.waveprotocol.wave.model.operation.OperationException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void finish()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void checkSizeConsistency(java.lang.String)>("finish");

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean inconsistent> = 0;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void afterFinish()>();

        return;
    }

    private void checkRetain(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r8;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.operation.OpCursorException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        $i2 = $i1 + i0;

        $i3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int size()>();

        if $i2 <= $i3 goto label1;

        $r1 = new org.waveprotocol.wave.model.operation.OpCursorException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Retain past end of document [location:");

        $i4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        $i5 = $i4 + i0;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] [doc size:");

        $i6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int size()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.OpCursorException: void <init>(java.lang.String)>($r8);

        throw $r1;

     label1:
        return;
    }

    private void doElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.operation.Attributes r2;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r10;
        org.waveprotocol.wave.model.document.raw.RawDocument $r4;
        org.waveprotocol.wave.model.util.OffsetList$Container $r3, $r8, $r9, $r11, $r12;
        int $i0, $i1;
        java.lang.Object $r5, $r6, $r7;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void splitCurrent()>();

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object currentParent>;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r6 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r7 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object createElement(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object)>(r1, r2, $r5, $r6);

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void insertBefore(org.waveprotocol.wave.model.util.OffsetList$Container,java.lang.Object,int)>($r8, $r7, 1);

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        interfaceinvoke $r9.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container insertBefore(java.lang.Object,int)>(null, 1);

        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        interfaceinvoke $r10.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void insert(int)>(1);

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r12 = interfaceinvoke $r11.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getPreviousContainer()>();

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer> = $r12;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object currentParent> = $r7;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation> = $i1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void onElementStart(java.lang.Object)>($r7);

        return;
    }

    private void doCharacters(java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r5, $r8, $r13, $r15, $r18;
        org.waveprotocol.wave.model.util.OffsetList$Container $r3, $r7, $r12, $r14, $r16, $r17, r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String r1;
        java.lang.Object $r4, $r6, $r9, $r10, $r11, $r19, r21;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void insert(int)>($i0);

        r20 = null;

        r21 = null;

        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset>;

        if $i1 != 0 goto label1;

        $r16 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r17 = interfaceinvoke $r16.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getPreviousContainer()>();

        r20 = $r17;

        $r18 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r19 = interfaceinvoke $r17.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        r21 = interfaceinvoke $r18.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asText(java.lang.Object)>($r19);

     label1:
        if r21 == null goto label2;

        $r15 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        interfaceinvoke $r15.<org.waveprotocol.wave.model.document.raw.RawDocument: void appendData(java.lang.Object,java.lang.String)>(r21, r1);

        $i8 = virtualinvoke r1.<java.lang.String: int length()>();

        interfaceinvoke r20.<org.waveprotocol.wave.model.util.OffsetList$Container: void increaseSize(int)>($i8);

        goto label4;

     label2:
        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asText(java.lang.Object)>($r4);

        if $r6 == null goto label3;

        $r13 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $i3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset>;

        interfaceinvoke $r13.<org.waveprotocol.wave.model.document.raw.RawDocument: void insertData(java.lang.Object,int,java.lang.String)>($r6, $i3, r1);

        $r14 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        interfaceinvoke $r14.<org.waveprotocol.wave.model.util.OffsetList$Container: void increaseSize(int)>($i4);

        $i5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset>;

        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        $i7 = $i5 + $i6;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset> = $i7;

        goto label4;

     label3:
        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object currentParent>;

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r10 = interfaceinvoke $r7.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r11 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object createTextNode(java.lang.String,java.lang.Object,java.lang.Object)>(r1, $r9, $r10);

        $r12 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void insertBefore(org.waveprotocol.wave.model.util.OffsetList$Container,java.lang.Object,int)>($r12, $r11, $i2);

     label4:
        $i9 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void onCharacters(int,java.lang.String)>($i9, r1);

        $i10 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        $i11 = virtualinvoke r1.<java.lang.String: int length()>();

        $i12 = $i10 + $i11;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation> = $i12;

        return;
    }

    private java.lang.String doDeleteCharacters(int)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r1;
        java.lang.StringBuilder $r0;
        java.lang.AssertionError $r15;
        org.waveprotocol.wave.model.util.OffsetList$Container $r2, $r9, $r14, $r16, $r21, $r30, $r39, $r40, $r41, $r46;
        java.lang.String $r8, $r11, $r12, $r27, $r28, $r32, $r36, $r37, $r43, $r44, $r47;
        boolean $z0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r3, $r6, $r7, $r10, $r13, $r17, $r20, $r22, $r25, $r26, $r29, $r31, $r34, $r35, $r38, $r42, $r45;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20;
        java.lang.Object $r4, $r5, $r18, $r19, $r23, $r24, $r33;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i20 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int deletionDepth>;

        if $i0 > 0 goto label5;

        $r17 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r16 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r18 = interfaceinvoke $r16.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r19 = interfaceinvoke $r17.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asText(java.lang.Object)>($r18);

        $r20 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $i4 = interfaceinvoke $r20.<org.waveprotocol.wave.model.document.raw.RawDocument: int getLength(java.lang.Object)>($r19);

        $i5 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset>;

        $i6 = $i5 + i20;

        if $i6 >= $i4 goto label1;

        $r42 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r43 = interfaceinvoke $r42.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.String getData(java.lang.Object)>($r19);

        $i17 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset>;

        $i15 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset>;

        $i16 = $i15 + i20;

        $r44 = virtualinvoke $r43.<java.lang.String: java.lang.String substring(int,int)>($i17, $i16);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r45 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $i18 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset>;

        interfaceinvoke $r45.<org.waveprotocol.wave.model.document.raw.RawDocument: void deleteData(java.lang.Object,int,int)>($r19, $i18, i20);

        $r46 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $i19 = neg i20;

        interfaceinvoke $r46.<org.waveprotocol.wave.model.util.OffsetList$Container: void increaseSize(int)>($i19);

        goto label4;

     label1:
        $i7 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset>;

        if $i7 <= 0 goto label2;

        $i10 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset>;

        i11 = $i4 - $i10;

        $r35 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r36 = interfaceinvoke $r35.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.String getData(java.lang.Object)>($r19);

        $i12 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset>;

        $r37 = virtualinvoke $r36.<java.lang.String: java.lang.String substring(int)>($i12);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r38 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $i13 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset>;

        interfaceinvoke $r38.<org.waveprotocol.wave.model.document.raw.RawDocument: void deleteData(java.lang.Object,int,int)>($r19, $i13, i11);

        $r39 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $i14 = neg i11;

        interfaceinvoke $r39.<org.waveprotocol.wave.model.util.OffsetList$Container: void increaseSize(int)>($i14);

        i20 = i20 - i11;

        $r40 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r41 = interfaceinvoke $r40.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getNextContainer()>();

        r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer> = $r41;

        r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset> = 0;

     label2:
        if i20 <= 0 goto label4;

        $r22 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r21 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r23 = interfaceinvoke $r21.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r24 = interfaceinvoke $r22.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asText(java.lang.Object)>($r23);

        $r25 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $i8 = interfaceinvoke $r25.<org.waveprotocol.wave.model.document.raw.RawDocument: int getLength(java.lang.Object)>($r24);

        if $i8 > i20 goto label3;

        $r31 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r32 = interfaceinvoke $r31.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.String getData(java.lang.Object)>($r24);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r33 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object currentParent>;

        interfaceinvoke $r34.<org.waveprotocol.wave.model.document.raw.RawDocument: void removeChild(java.lang.Object,java.lang.Object)>($r33, $r24);

        specialinvoke r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void deleteCurrentContainer()>();

        i20 = i20 - $i8;

        goto label2;

     label3:
        $r26 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r27 = interfaceinvoke $r26.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.String getData(java.lang.Object)>($r24);

        $r28 = virtualinvoke $r27.<java.lang.String: java.lang.String substring(int,int)>(0, i20);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r29 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        interfaceinvoke $r29.<org.waveprotocol.wave.model.document.raw.RawDocument: void deleteData(java.lang.Object,int,int)>($r24, 0, i20);

        $r30 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $i9 = neg i20;

        interfaceinvoke $r30.<org.waveprotocol.wave.model.util.OffsetList$Container: void increaseSize(int)>($i9);

        goto label4;

     label4:
        goto label8;

     label5:
        if i20 <= 0 goto label8;

        $r3 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r2 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asText(java.lang.Object)>($r4);

        $z0 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        if $r5 != null goto label6;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label6:
        $r6 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $i1 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.raw.RawDocument: int getLength(java.lang.Object)>($r5);

        if i20 >= $i1 goto label7;

        $r10 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.String getData(java.lang.Object)>($r5);

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int,int)>(0, i20);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        interfaceinvoke $r13.<org.waveprotocol.wave.model.document.raw.RawDocument: void deleteData(java.lang.Object,int,int)>($r5, 0, i20);

        $r14 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $i3 = neg i20;

        interfaceinvoke $r14.<org.waveprotocol.wave.model.util.OffsetList$Container: void increaseSize(int)>($i3);

        goto label8;

     label7:
        $r7 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.String getData(java.lang.Object)>($r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r9 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $i2 = interfaceinvoke $r9.<org.waveprotocol.wave.model.util.OffsetList$Container: int size()>();

        i20 = i20 - $i2;

        specialinvoke r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void deleteCurrentContainer()>();

        goto label5;

     label8:
        $r47 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r47;
    }

    private void doElementEnd()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r1;
        org.waveprotocol.wave.model.document.raw.RawDocument $r5;
        org.waveprotocol.wave.model.util.OffsetList$Container $r2, $r3;
        int $i0, $i1;
        java.lang.Object $r4, $r6;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void onElementEnd()>();

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void insert(int)>(1);

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation> = $i1;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getNextContainer()>();

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer> = $r3;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object currentParent>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getParentElement(java.lang.Object)>($r4);

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object currentParent> = $r6;

        return;
    }

    private void doStartAnnotation(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r1;
        java.lang.String r0, r2;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: boolean isLocal(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot access local annotations");

        throw $r4;

     label1:
        $r3 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void startAnnotation(java.lang.String,java.lang.Object)>(r0, r2);

        return;
    }

    private void doEndAnnotation(java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r1;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: boolean isLocal(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot access local annotations");

        throw $r3;

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void endAnnotation(java.lang.String)>(r0);

        return;
    }

    private void resetLocation()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Container $r4;
        org.waveprotocol.wave.model.document.raw.RawDocument $r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r3;
        java.lang.Object $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation> = 0;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset> = 0;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getDocumentElement()>();

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object currentParent> = $r2;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Container firstContainer()>();

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer> = $r4;

        return;
    }

    private void deleteCurrentContainer()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.util.OffsetList$Container $r1, $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getNextContainer()>();

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.OffsetList$Container: void remove()>();

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer> = $r2;

        return;
    }

    private java.lang.Object getParentOf(org.waveprotocol.wave.model.util.OffsetList$Container)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r3;
        org.waveprotocol.wave.model.document.raw.RawDocument $r4, $r6, $r7, $r8;
        org.waveprotocol.wave.model.util.OffsetList$Container r10, r11;
        int i0, i1;
        java.lang.Object $r0, $r1, $r2, $r5, $r9, r12;

        r3 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r10 := @parameter0: org.waveprotocol.wave.model.util.OffsetList$Container;

        $r0 = interfaceinvoke r10.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        if $r0 == null goto label1;

        $r8 = r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getParentElement(java.lang.Object)>($r0);

        return $r9;

     label1:
        i0 = 0;

        r11 = interfaceinvoke r10.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getPreviousContainer()>();

     label2:
        $r1 = interfaceinvoke r11.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        if $r1 != null goto label3;

        i0 = i0 + 1;

        r11 = interfaceinvoke r11.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getPreviousContainer()>();

        goto label2;

     label3:
        $r2 = interfaceinvoke r11.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r4 = r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asElement(java.lang.Object)>($r2);

        r12 = $r5;

        if $r5 != null goto label4;

        $r7 = r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        r12 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getParentElement(java.lang.Object)>($r2);

     label4:
        i1 = 0;

     label5:
        if i1 >= i0 goto label6;

        $r6 = r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        r12 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getParentElement(java.lang.Object)>(r12);

        i1 = i1 + 1;

        goto label5;

     label6:
        return r12;
    }

    private void splitCurrent()
    {
        java.lang.AssertionError $r11;
        org.waveprotocol.wave.model.util.OffsetList$Container $r1, $r7, $r8, $r9;
        int $i0, $i1, $i2;
        boolean $z0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r2, $r5, $r10;
        java.lang.Object $r3, $r4, $r6;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset>;

        if $i0 == 0 goto label2;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asText(java.lang.Object)>($r3);

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object splitText(java.lang.Object,int)>($r4, $i1);

        $z0 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $r6 != null goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $i2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container split(int,java.lang.Object)>($i2, $r6);

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer> = $r8;

        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        interfaceinvoke $r10.<org.waveprotocol.wave.model.document.raw.RawDocument: void setIndexingContainer(java.lang.Object,org.waveprotocol.wave.model.util.OffsetList$Container)>($r6, $r9);

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset> = 0;

     label2:
        return;
    }

    private void insertBefore(org.waveprotocol.wave.model.util.OffsetList$Container, java.lang.Object, int)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.util.OffsetList$Container r2, $r4;
        int i0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.util.OffsetList$Container;

        r1 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r4 = interfaceinvoke r2.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container insertBefore(java.lang.Object,int)>(r1, i0);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.raw.RawDocument: void setIndexingContainer(java.lang.Object,org.waveprotocol.wave.model.util.OffsetList$Container)>(r1, $r4);

        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r2;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8;
        java.lang.String $r3, $r6, $r9;

        r2 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IndexedDI@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r2);

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r6 = virtualinvoke r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.String toDebugString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public java.lang.String toDebugString()
    {
        java.lang.String $r3, $r9, $r15, $r23;
        boolean $z0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r18;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r1, $r2;
        java.lang.RuntimeException $r4, $r10;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r16, $r17, $r19, $r20, $r21, $r22;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.DocInitialization toInitialization()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: org.waveprotocol.wave.model.document.operation.DocInitialization maybeScrub(org.waveprotocol.wave.model.document.operation.DocInitialization)>($r1);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: java.lang.String toXmlString(org.waveprotocol.wave.model.document.operation.DocInitialization)>($r2);

     label2:
        return $r3;

     label3:
        $r10 := @caughtexception;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocOpScrub: boolean shouldScrubByDefault()>();

        if $z0 != 0 goto label7;

     label4:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#<NO ANNOTATIONS>: ");

        $r18 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXml(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("# (");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        return $r23;

     label6:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#<!SUPER BROKEN># (");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label7:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#<!BROKEN># (");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label4 to label5 with label6;
    }

    public java.lang.String getData(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.Object r1;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.String getData(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object getFirstChild(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getFirstChild(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object getLastChild(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getLastChild(java.lang.Object)>(r1);

        return $r3;
    }

    public int getLength(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: int getLength(java.lang.Object)>(r1);

        return $i0;
    }

    public java.lang.Object getNextSibling(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getNextSibling(java.lang.Object)>(r1);

        return $r3;
    }

    public short getNodeType(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        short $s0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $s0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: short getNodeType(java.lang.Object)>(r1);

        return $s0;
    }

    public java.lang.Object getParentElement(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getParentElement(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object getPreviousSibling(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getPreviousSibling(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object getDocumentElement()
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getDocumentElement()>();

        return $r2;
    }

    public java.lang.Object asElement(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asElement(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object asText(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asText(java.lang.Object)>(r1);

        return $r3;
    }

    public boolean isSameNode(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.raw.RawDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>(r1, r2);

        return $z0;
    }

    public java.util.Map getAttributes(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.util.Map $r3;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.util.Map getAttributes(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.String getTagName(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.Object r1;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.String getTagName(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.String getAttribute(java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.Object r1;
        java.lang.String r2, $r4;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.String getAttribute(java.lang.Object,java.lang.String)>(r1, r2);

        return $r4;
    }

    public int size()
    {
        int $i0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void checkSizeConsistency(java.lang.String)>("size");

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList: int size()>();

        return $i0;
    }

    private void checkSizeConsistency(java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r1, $r4, $r13;
        int $i0, $i1, $i2, $i3;
        java.lang.String r7, $r16;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.RuntimeException $r5;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r2, $r3, $r10;
        java.lang.StringBuilder $r6, $r8, $r9, $r11, $r12, $r14, $r15;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r7 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        if $r1 == null goto label1;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        if $r2 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $i0 = virtualinvoke $r3.<org.waveprotocol.wave.model.util.EvaluableOffsetList: int size()>();

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        $i1 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: int size()>();

        if $i0 == $i1 goto label1;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Document and annotations have inconsistent size: ");

        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $i2 = virtualinvoke $r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList: int size()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $r13 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        $i3 = interfaceinvoke $r13.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: int size()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", respectively");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw $r5;

     label1:
        return;
    }

    public java.lang.String getAnnotation(int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r1;
        java.lang.IllegalArgumentException $r5;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r2;
        int i0;
        java.lang.Object $r3;
        java.lang.String r0, $r4;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: boolean isLocal(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot access local annotations");

        throw $r5;

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: java.lang.Object getAnnotation(int,java.lang.String)>(i0, r0);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public int firstAnnotationChange(int, int, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r1;
        java.lang.IllegalArgumentException $r4;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r3;
        int i0, i1, $i2;
        java.lang.String r0, r2;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: boolean isLocal(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot access local annotations");

        throw $r4;

     label1:
        $r3 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        $i2 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i0, i1, r0, r2);

        return $i2;
    }

    public int lastAnnotationChange(int, int, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r1;
        java.lang.IllegalArgumentException $r4;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r3;
        int i0, i1, $i2;
        java.lang.String r0, r2;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: boolean isLocal(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot access local annotations");

        throw $r4;

     label1:
        $r3 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        $i2 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: int lastAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i0, i1, r0, r2);

        return $i2;
    }

    void checkValidPersistentKeys(org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$3 $r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r2;

        r2 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        $r1 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$3;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$3: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>(r2);

        interfaceinvoke r0.<org.waveprotocol.wave.model.util.ReadableStringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r1);

        return;
    }

    public java.lang.Object splitText(java.lang.Object, int)
    {
        java.lang.IllegalStateException $r8;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        org.waveprotocol.wave.model.util.OffsetList$Container $r5;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r4;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1, $r6, $r7;
        boolean $z0;
        org.waveprotocol.wave.model.util.OffsetList$LocationAction $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $z0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean inconsistent>;

        if $z0 == 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot splitText() during a modification");

        throw $r8;

     label1:
        if i0 != 0 goto label2;

        return r1;

     label2:
        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $i1 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: int getLength(java.lang.Object)>(r1);

        if i0 < $i1 goto label3;

        return null;

     label3:
        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int getLocation(java.lang.Object)>(r1);

        $i3 = $i2 + i0;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation> = $i3;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $i4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$LocationAction locationUpdater>;

        virtualinvoke $r4.<org.waveprotocol.wave.model.util.EvaluableOffsetList: java.lang.Object performActionAt(int,org.waveprotocol.wave.model.util.OffsetList$LocationAction)>($i4, $r3);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void splitCurrent()>();

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object asText(java.lang.Object)>($r6);

        return $r7;
    }

    public java.lang.Object mergeText(java.lang.Object)
    {
        java.lang.IllegalStateException $r11;
        org.waveprotocol.wave.model.util.OffsetList$Container $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2;
        boolean $z0;
        org.waveprotocol.wave.model.util.OffsetList$LocationAction $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r4, $r10;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r3;
        java.lang.Object r1, $r5;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean inconsistent>;

        if $z0 == 0 goto label1;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot mergeText() during a modification");

        throw $r11;

     label1:
        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int getLocation(java.lang.Object)>(r1);

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation> = $i0;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$LocationAction locationUpdater>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.util.EvaluableOffsetList: java.lang.Object performActionAt(int,org.waveprotocol.wave.model.util.OffsetList$LocationAction)>($i1, $r2);

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object mergeText(java.lang.Object)>(r1);

        if $r5 == null goto label2;

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getPreviousContainer()>();

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $i2 = interfaceinvoke $r7.<org.waveprotocol.wave.model.util.OffsetList$Container: int size()>();

        interfaceinvoke $r8.<org.waveprotocol.wave.model.util.OffsetList$Container: void increaseSize(int)>($i2);

        interfaceinvoke $r7.<org.waveprotocol.wave.model.util.OffsetList$Container: void remove()>();

        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        interfaceinvoke $r10.<org.waveprotocol.wave.model.document.raw.RawDocument: void setIndexingContainer(java.lang.Object,org.waveprotocol.wave.model.util.OffsetList$Container)>($r5, $r9);

     label2:
        return $r5;
    }

    public org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.operation.DocOp $r1, $r2, r10;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r4;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r3, $r7;
        java.lang.AssertionError $r6;
        org.waveprotocol.wave.model.operation.OperationException $r8;
        int $i0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r5;
        org.waveprotocol.wave.model.operation.OperationRuntimeException $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int size()>();

        if $i0 != 0 goto label1;

        $r7 = <org.waveprotocol.wave.model.document.util.EmptyDocument: org.waveprotocol.wave.model.document.operation.DocInitialization EMPTY_DOCUMENT>;

        return $r7;

     label1:
        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.DocOp serializeDom()>();

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.DocOp serializeAnnotations()>();

     label2:
        $z0 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean performValidation>;

        if $z0 == 0 goto label3;

        r10 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Composer: org.waveprotocol.wave.model.document.operation.DocOp compose(org.waveprotocol.wave.model.document.operation.DocOp,org.waveprotocol.wave.model.document.operation.DocOp)>($r1, $r2);

        goto label4;

     label3:
        r10 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Composer: org.waveprotocol.wave.model.document.operation.DocOp composeUnchecked(org.waveprotocol.wave.model.document.operation.DocOp,org.waveprotocol.wave.model.document.operation.DocOp)>($r1, $r2);

     label4:
        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: org.waveprotocol.wave.model.document.operation.DocInitialization asInitialization(org.waveprotocol.wave.model.document.operation.DocOp)>(r10);

        $z1 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label5;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.operation.DocInitialization)>(null, $r4, $r3);

        $z2 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z2 != 0 goto label5;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label5:
        return $r3;

     label6:
        $r8 := @caughtexception;

        $r9 = new org.waveprotocol.wave.model.operation.OperationRuntimeException;

        specialinvoke $r9.<org.waveprotocol.wave.model.operation.OperationRuntimeException: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.OperationException)>("Bug either in indexed document or the composer", $r8);

        throw $r9;

        catch org.waveprotocol.wave.model.operation.OperationException from label2 to label5 with label6;
    }

    public org.waveprotocol.wave.model.document.operation.DocInitialization toInitialization()
    {
        org.waveprotocol.wave.model.document.operation.DocInitialization $r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        return $r1;
    }

    private org.waveprotocol.wave.model.document.operation.DocOp serializeDom()
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r4;
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder $r18;
        java.lang.AssertionError $r20;
        java.util.Map $r15;
        int i0, $i2;
        java.lang.String $r12, $r17;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r1;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r19;
        org.waveprotocol.wave.model.document.raw.RawDocument $r7, $r9, $r11, $r14, $r16;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r2;
        java.lang.Object $r6, $r8, $r10;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r18 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder;

        specialinvoke $r18.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: void <init>()>();

        i0 = 0;

        $r2 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if $r6 == null goto label4;

        $r7 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asText(java.lang.Object)>($r6);

        if $r8 == null goto label2;

        $r16 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r17 = interfaceinvoke $r16.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.String getData(java.lang.Object)>($r8);

        virtualinvoke $r18.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder characters(java.lang.String)>($r17);

        goto label3;

     label2:
        $r9 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asElement(java.lang.Object)>($r6);

        $r11 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r12 = interfaceinvoke $r11.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.String getTagName(java.lang.Object)>($r10);

        $r19 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        $r14 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        $r15 = interfaceinvoke $r14.<org.waveprotocol.wave.model.document.raw.RawDocument: java.util.Map getAttributes(java.lang.Object)>($r10);

        specialinvoke $r19.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.util.Map)>($r15);

        virtualinvoke $r18.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder elementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>($r12, $r19);

        i0 = i0 + 1;

     label3:
        goto label5;

     label4:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label5;

        virtualinvoke $r18.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder elementEnd()>();

     label5:
        goto label1;

     label6:
        $r4 = virtualinvoke $r18.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.DocOp buildUnchecked()>();

        $z1 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label7;

        $z2 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: boolean isWellFormed(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.DocOp)>(null, $r4);

        if $z2 != 0 goto label7;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label7:
        return $r4;
    }

    private org.waveprotocol.wave.model.document.operation.DocOp serializeAnnotations()
    {
        org.waveprotocol.wave.model.util.StringSet $r4;
        org.waveprotocol.wave.model.document.operation.impl.UncheckedDocOpBuffer $r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r11;
        java.lang.AssertionError $r8;
        java.lang.Iterable $r5;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r3;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.model.util.ReadableStringMap $r9, $r14;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r0;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r2;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$4 $r15;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$5 $r10;
        java.lang.Object $r7, $r12;
        org.waveprotocol.wave.model.document.AnnotationInterval r13, r16;

        r2 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r0 = new org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer;

        $r1 = new org.waveprotocol.wave.model.document.operation.impl.UncheckedDocOpBuffer;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.UncheckedDocOpBuffer: void <init>()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void <init>(org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor)>($r1);

        r16 = null;

        $r3 = r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        $i0 = virtualinvoke r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int size()>();

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.StringSet knownKeys()>();

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: java.lang.Iterable annotationIntervals(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(0, $i0, $r4);

        $r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.waveprotocol.wave.model.document.AnnotationInterval) $r12;

        $r14 = interfaceinvoke r13.<org.waveprotocol.wave.model.document.AnnotationInterval: org.waveprotocol.wave.model.util.ReadableStringMap diffFromLeft()>();

        $r15 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$4;

        specialinvoke $r15.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$4: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer)>(r2, $r0);

        interfaceinvoke $r14.<org.waveprotocol.wave.model.util.ReadableStringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r15);

        $i2 = interfaceinvoke r13.<org.waveprotocol.wave.model.document.AnnotationInterval: int length()>();

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void retain(int)>($i2);

        r16 = r13;

        goto label1;

     label2:
        $i1 = virtualinvoke r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int size()>();

        if $i1 <= 0 goto label3;

        $r9 = interfaceinvoke r16.<org.waveprotocol.wave.model.document.AnnotationInterval: org.waveprotocol.wave.model.util.ReadableStringMap annotations()>();

        $r10 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$5;

        specialinvoke $r10.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$5: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer)>(r2, $r0);

        interfaceinvoke $r9.<org.waveprotocol.wave.model.util.ReadableStringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r10);

     label3:
        $r7 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: java.lang.Object finish()>();

        $r11 = (org.waveprotocol.wave.model.document.operation.DocOp) $r7;

        $z1 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        $z2 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: boolean isWellFormed(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.DocOp)>(null, $r11);

        if $z2 != 0 goto label4;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label4:
        return $r11;
    }

    public org.waveprotocol.wave.model.util.StringSet knownKeys()
    {
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r2;
        org.waveprotocol.wave.model.util.ReadableStringSet $r3;
        org.waveprotocol.wave.model.util.StringSet $r0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$6 $r4;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        $r2 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: org.waveprotocol.wave.model.util.ReadableStringSet knownKeysLive()>();

        $r4 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$6;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$6: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,org.waveprotocol.wave.model.util.StringSet)>(r1, $r0);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.ReadableStringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r4);

        return $r0;
    }

    protected java.lang.Object evaluate()
    {
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList: java.lang.Object evaluate()>();

        return $r2;
    }

    private java.lang.Object getCurrentParent()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object currentParent>;

        return $r1;
    }

    private int getCurrentLocation()
    {
        int $i0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        return $i0;
    }

    protected java.lang.Object getCurrentNode()
    {
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.util.OffsetList$Container $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        return $r2;
    }

    public void forEachAnnotationAt(int, org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)
    {
        org.waveprotocol.wave.model.util.ReadableStringMap$ProcV r2;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        int i0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$7 $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        r2 := @parameter1: org.waveprotocol.wave.model.util.ReadableStringMap$ProcV;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        $r1 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$7;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$7: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>(r0, r2);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void forEachAnnotationAt(int,org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>(i0, $r1);

        return;
    }

    public org.waveprotocol.wave.model.document.AnnotationCursor annotationCursor(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r1;
        org.waveprotocol.wave.model.util.ReadableStringSet r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.AnnotationCursor $r2;
        int i0, i1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        if r3 != null goto label1;

        r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.StringSet knownKeys()>();

        goto label2;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void checkValidPersistentKeys(org.waveprotocol.wave.model.util.ReadableStringSet)>(r3);

     label2:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: org.waveprotocol.wave.model.document.AnnotationCursor annotationCursor(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(i0, i1, r3);

        return $r2;
    }

    public java.lang.Iterable annotationIntervals(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r1;
        org.waveprotocol.wave.model.util.ReadableStringSet r4;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        int i0, i1;
        java.lang.Iterable $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$8 $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r4 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        if r4 != null goto label1;

        r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.StringSet knownKeys()>();

        goto label2;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void checkValidPersistentKeys(org.waveprotocol.wave.model.util.ReadableStringSet)>(r4);

     label2:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: java.lang.Iterable annotationIntervals(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(i0, i1, r4);

        $r3 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$8;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$8: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,java.lang.Iterable)>(r0, $r2);

        return $r3;
    }

    public java.lang.Iterable rangedAnnotations(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9 $r3;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r1;
        org.waveprotocol.wave.model.util.ReadableStringSet r4;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        int i0, i1;
        java.lang.Iterable $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r4 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        if r4 != null goto label1;

        r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.StringSet knownKeys()>();

        goto label2;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void checkValidPersistentKeys(org.waveprotocol.wave.model.util.ReadableStringSet)>(r4);

     label2:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: java.lang.Iterable rangedAnnotations(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(i0, i1, r4);

        $r3 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,java.lang.Iterable)>(r0, $r2);

        return $r3;
    }

    public java.lang.String toXmlString()
    {
        org.waveprotocol.wave.model.document.operation.DocInitialization $r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: java.lang.String toXmlString(org.waveprotocol.wave.model.document.operation.DocInitialization)>($r1);

        return $r2;
    }

    protected void beforeBegin()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        return;
    }

    protected void afterFinish()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        return;
    }

    protected void onElementStart(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        return;
    }

    protected void onElementEnd()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        return;
    }

    protected void onDeleteElementStart(int, java.lang.Object)
    {
        int i0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        return;
    }

    protected void onDeleteElementEnd()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        return;
    }

    protected void onModifyAttributes(java.lang.Object, org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.operation.Attributes r2, r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        r3 := @parameter2: org.waveprotocol.wave.model.document.operation.Attributes;

        return;
    }

    protected void onModifyAttributes(java.lang.Object, org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        return;
    }

    protected void onCharacters(int, java.lang.String)
    {
        int i0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        return;
    }

    protected void onDeleteCharacters(int, java.lang.String)
    {
        int i0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema getSchema()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints>;

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()
    {
        org.waveprotocol.wave.model.util.StringSet $r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.StringSet knownKeys()>();

        return $r1;
    }

    public volatile java.lang.Object getAnnotation(int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        int i0;
        java.lang.String r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.String getAnnotation(int,java.lang.String)>(i0, r1);

        return $r2;
    }

    public volatile int lastAnnotationChange(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        int i0, i1, $i2;
        java.lang.Object r2;
        java.lang.String r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object;

        $r3 = (java.lang.String) r2;

        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int lastAnnotationChange(int,int,java.lang.String,java.lang.String)>(i0, i1, r1, $r3);

        return $i2;
    }

    public volatile int firstAnnotationChange(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        int i0, i1, $i2;
        java.lang.Object r2;
        java.lang.String r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object;

        $r3 = (java.lang.String) r2;

        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int firstAnnotationChange(int,int,java.lang.String,java.lang.String)>(i0, i1, r1, $r3);

        return $i2;
    }

    static org.waveprotocol.wave.model.util.EvaluableOffsetList access$000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList offsetList>;

        return $r1;
    }

    static org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument substrate>;

        return $r1;
    }

    static java.lang.Object access$200(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl, org.waveprotocol.wave.model.util.OffsetList$Container)
    {
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.util.OffsetList$Container r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.util.OffsetList$Container;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object getParentOf(org.waveprotocol.wave.model.util.OffsetList$Container)>(r1);

        return $r2;
    }

    static org.waveprotocol.wave.model.util.OffsetList$Container access$302(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl, org.waveprotocol.wave.model.util.OffsetList$Container)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.util.OffsetList$Container r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.util.OffsetList$Container;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer> = r1;

        return r1;
    }

    static int access$402(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl, int)
    {
        int i0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter1: int;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentOffset> = i0;

        return i0;
    }

    static java.lang.Object access$502(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl, java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter1: java.lang.Object;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object currentParent> = r1;

        return r1;
    }

    static org.waveprotocol.wave.model.document.indexed.RawAnnotationSet access$900(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet annotations>;

        return $r1;
    }

    static org.waveprotocol.wave.model.util.OffsetList$Container access$300(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        org.waveprotocol.wave.model.util.OffsetList$Container $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container currentContainer>;

        return $r1;
    }

    static int access$1004(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation> = $i1;

        return $i1;
    }

    static java.lang.Object access$500(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object currentParent>;

        return $r1;
    }

    static java.lang.String access$1100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl, int)
    {
        int i0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.String $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.String doDeleteCharacters(int)>(i0);

        return $r1;
    }

    static int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        int $i0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        return $i0;
    }

    static void access$1200(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl, int)
    {
        int i0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter1: int;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void checkRetain(int)>(i0);

        return;
    }

    static int access$1012(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl, int)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        int i0, $i1, $i2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter1: int;

        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        $i2 = $i1 + i0;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation> = $i2;

        return $i2;
    }

    static void access$1300(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void moveToCurrentLocation()>();

        return;
    }

    static void access$1400(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.String r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void doEndAnnotation(java.lang.String)>(r1);

        return;
    }

    static void access$1500(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.String r1, r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void doStartAnnotation(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static void access$1600(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.String r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void doCharacters(java.lang.String)>(r1);

        return;
    }

    static void access$1700(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void doElementEnd()>();

        return;
    }

    static void access$1800(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl, java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.Attributes r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.waveprotocol.wave.model.document.operation.Attributes;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void doElementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r1, r2);

        return;
    }

    static int access$1900(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        int $i0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int deletionDepth>;

        return $i0;
    }

    static void access$2000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void deleteCurrentContainer()>();

        return;
    }

    static int access$1904(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int deletionDepth>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int deletionDepth> = $i1;

        return $i1;
    }

    static int access$1906(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int deletionDepth>;

        $i1 = $i0 - 1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int deletionDepth> = $i1;

        return $i1;
    }

    static void access$2100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void beginChange()>();

        return;
    }

    static void access$2200(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void endChange()>();

        return;
    }

    static int access$1002(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl, int)
    {
        int i0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        i0 := @parameter1: int;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation> = i0;

        return i0;
    }

    static int access$1008(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int currentLocation> = $i1;

        return $i0;
    }

    static int access$1908(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int deletionDepth>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int deletionDepth> = $i1;

        return $i0;
    }

    static int access$1910(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int deletionDepth>;

        $i1 = $i0 - 1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int deletionDepth> = $i1;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/indexed/IndexedDocumentImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean $assertionsDisabled> = $z1;

        <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean performValidation> = 1;

        return;
    }
}
