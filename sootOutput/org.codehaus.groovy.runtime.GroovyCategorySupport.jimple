public class org.codehaus.groovy.runtime.GroovyCategorySupport extends java.lang.Object
{
    private static int categoriesInUse;
    private static final java.lang.ThreadLocal LOCAL;
    static java.lang.Class class$java$lang$Object;

    public void <init>()
    {
        org.codehaus.groovy.runtime.GroovyCategorySupport r0;

        r0 := @this: org.codehaus.groovy.runtime.GroovyCategorySupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List getCategoryMethods(java.lang.Class, java.lang.String)
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.ArrayList $r1;
        java.util.List r11;
        java.util.Map $r0, r8;
        java.lang.Object $r4, $r7, $r10;
        java.lang.Class r5, r6;
        java.lang.String r9;
        boolean $z0, $z1, $z2;

        r6 := @parameter0: java.lang.Class;

        r9 := @parameter1: java.lang.String;

        $r0 = staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: java.util.Map getProperties()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Class) $r4;

        $z2 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r6);

        if $z2 == 0 goto label2;

        $r7 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r8 = (java.util.Map) $r7;

        $r10 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        r11 = (java.util.List) $r10;

        if r11 == null goto label2;

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>(r11);

     label2:
        goto label1;

     label3:
        $z1 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        return null;

     label4:
        return $r1;
    }

    public static java.util.List getCategoryMethods(java.lang.Class)
    {
        java.util.ArrayList $r1;
        java.util.Map $r0, r8;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r3, $r10;
        java.util.Collection $r9;
        java.util.Set $r2;
        java.util.List r12;
        java.lang.Object $r4, $r7, $r11;
        java.lang.Class r5, r6;

        r6 := @parameter0: java.lang.Class;

        $r0 = staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: java.util.Map getProperties()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Class) $r4;

        $z2 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r6);

        if $z2 == 0 goto label4;

        $r7 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r8 = (java.util.Map) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map: java.util.Collection values()>();

        $r10 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.List) $r11;

        if r12 == null goto label3;

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>(r12);

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        $z1 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label6;

        return null;

     label6:
        return $r1;
    }

    public static java.lang.Object getClosestMatchingCategoryMethod(java.lang.Class, groovy.lang.MetaMethod, groovy.lang.MetaMethod)
    {
        groovy.lang.MetaMethod r0, r1;
        org.codehaus.groovy.runtime.GroovyCategorySupport$CategoryMethod r2, r3;
        int $i0;
        java.lang.Class r4;
        boolean $z0, $z1;

        r4 := @parameter0: java.lang.Class;

        r0 := @parameter1: groovy.lang.MetaMethod;

        r1 := @parameter2: groovy.lang.MetaMethod;

        $z0 = r0 instanceof org.codehaus.groovy.runtime.GroovyCategorySupport$CategoryMethod;

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof org.codehaus.groovy.runtime.GroovyCategorySupport$CategoryMethod;

        if $z1 == 0 goto label1;

        r2 = (org.codehaus.groovy.runtime.GroovyCategorySupport$CategoryMethod) r0;

        r3 = (org.codehaus.groovy.runtime.GroovyCategorySupport$CategoryMethod) r1;

        $i0 = virtualinvoke r2.<org.codehaus.groovy.runtime.GroovyCategorySupport$CategoryMethod: int compareTo(java.lang.Object)>(r3);

        if $i0 >= 0 goto label1;

        return r0;

     label1:
        return r1;
    }

    public static java.lang.Object use(java.lang.Class, groovy.lang.Closure)
    {
        java.lang.Throwable $r3;
        groovy.lang.Closure r1;
        java.lang.Class r0;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: groovy.lang.Closure;

        staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: void newScope()>();

     label1:
        staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: void use(java.lang.Class)>(r0);

        $r2 = virtualinvoke r1.<groovy.lang.Closure: java.lang.Object call()>();

     label2:
        staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: void endScope()>();

        return $r2;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: void endScope()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.lang.Object use(java.util.List, groovy.lang.Closure)
    {
        java.lang.Throwable $r6;
        java.util.Iterator $r1;
        groovy.lang.Closure r2;
        java.util.List r0;
        java.lang.Object $r3, $r4;
        java.lang.Class r5;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: groovy.lang.Closure;

        staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: void newScope()>();

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Class) $r4;

        staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: void use(java.lang.Class)>(r5);

        goto label2;

     label3:
        $r3 = virtualinvoke r2.<groovy.lang.Closure: java.lang.Object call()>();

     label4:
        staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: void endScope()>();

        return $r3;

     label5:
        $r6 := @caughtexception;

     label6:
        staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: void endScope()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private static void use(java.lang.Class)
    {
        org.codehaus.groovy.reflection.CachedClass[] $r9;
        java.lang.reflect.Method[] $r6;
        org.codehaus.groovy.runtime.GroovyCategorySupport$CategoryMethod $r15;
        java.util.Map $r0, $r12;
        int $i0, $i1, $i2, i3;
        java.lang.String $r13;
        java.util.LinkedList $r4;
        java.lang.reflect.Method r7;
        boolean $z0;
        java.lang.ThreadLocal $r1;
        org.codehaus.groovy.reflection.CachedMethod $r8;
        org.codehaus.groovy.reflection.CachedClass r10;
        java.util.List r3, $r14;
        java.lang.Object $r2;
        java.lang.Class r5, $r11, $r16;

        r5 := @parameter0: java.lang.Class;

        $r0 = staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: java.util.Map getProperties()>();

        $r1 = <org.codehaus.groovy.runtime.GroovyCategorySupport: java.lang.ThreadLocal LOCAL>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        r3 = (java.util.List) $r2;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        $r6 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i3 = 0;

     label1:
        $i0 = lengthof $r6;

        if i3 >= $i0 goto label3;

        r7 = $r6[i3];

        $i1 = virtualinvoke r7.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z0 == 0 goto label2;

        $r8 = staticinvoke <org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedMethod find(java.lang.reflect.Method)>(r7);

        $r9 = virtualinvoke $r8.<org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedClass[] getParameterTypes()>();

        $i2 = lengthof $r9;

        if $i2 <= 0 goto label2;

        r10 = $r9[0];

        $r11 = virtualinvoke r10.<org.codehaus.groovy.reflection.CachedClass: java.lang.Class getTheClass()>();

        $r12 = staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: java.util.Map getMetaMethods(java.util.Map,java.lang.Class)>($r0, $r11);

        $r13 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.String getName()>();

        $r14 = staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: java.util.List getMethodList(java.util.Map,java.lang.String)>($r12, $r13);

        $r15 = new org.codehaus.groovy.runtime.GroovyCategorySupport$CategoryMethod;

        $r16 = virtualinvoke r10.<org.codehaus.groovy.reflection.CachedClass: java.lang.Class getTheClass()>();

        specialinvoke $r15.<org.codehaus.groovy.runtime.GroovyCategorySupport$CategoryMethod: void <init>(org.codehaus.groovy.reflection.CachedMethod,java.lang.Class)>($r8, $r16);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r14);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    private static synchronized void newScope()
    {
        java.util.Map r4, $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.WeakHashMap $r5;
        boolean $z0;
        java.lang.ThreadLocal $r0;
        java.util.Map$Entry r9;
        java.util.Iterator $r7;
        java.util.Set $r6;
        java.util.List r2;
        java.lang.Object $r1, $r3, $r8, $r10, $r11;

        $i0 = <org.codehaus.groovy.runtime.GroovyCategorySupport: int categoriesInUse>;

        $i1 = $i0 + 1;

        <org.codehaus.groovy.runtime.GroovyCategorySupport: int categoriesInUse> = $i1;

        $r0 = <org.codehaus.groovy.runtime.GroovyCategorySupport: java.lang.ThreadLocal LOCAL>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.List) $r1;

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i3);

        r4 = (java.util.Map) $r3;

        $r5 = new java.util.WeakHashMap;

        $i4 = interfaceinvoke r4.<java.util.Map: int size()>();

        specialinvoke $r5.<java.util.WeakHashMap: void <init>(int)>($i4);

        $r6 = interfaceinvoke r4.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.util.Map) $r11;

        $r13 = staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: java.util.Map copyMapOfList(java.util.Map)>($r12);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r13);

        goto label1;

     label2:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        return;
    }

    private static synchronized void endScope()
    {
        java.lang.ThreadLocal $r0;
        java.util.List r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1;

        $r0 = <org.codehaus.groovy.runtime.GroovyCategorySupport: java.lang.ThreadLocal LOCAL>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.List) $r1;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>($i1);

        $i2 = <org.codehaus.groovy.runtime.GroovyCategorySupport: int categoriesInUse>;

        $i3 = $i2 - 1;

        <org.codehaus.groovy.runtime.GroovyCategorySupport: int categoriesInUse> = $i3;

        return;
    }

    private static java.util.Map copyMapOfList(java.util.Map)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.HashMap $r0;
        java.util.ArrayList $r7;
        java.util.List r9;
        java.util.Map r1;
        int $i0;
        java.lang.Object $r4, $r6, $r8;
        boolean $z0;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.util.HashMap;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.util.List) $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>(r9);

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        goto label1;

     label2:
        return $r0;
    }

    private static java.util.Map getProperties()
    {
        java.lang.ThreadLocal $r0;
        java.util.List r2;
        java.util.Map $r4;
        int $i0, $i1;
        java.lang.Object $r1, $r3;

        $r0 = <org.codehaus.groovy.runtime.GroovyCategorySupport: java.lang.ThreadLocal LOCAL>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.List) $r1;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (java.util.Map) $r3;

        return $r4;
    }

    public static boolean hasCategoryInAnyThread()
    {
        int $i0;
        boolean $z0;

        $i0 = <org.codehaus.groovy.runtime.GroovyCategorySupport: int categoriesInUse>;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static java.util.List getMethodList(java.util.Map, java.lang.String)
    {
        java.util.List r4;
        java.util.Map r0;
        java.lang.Object $r2;
        java.lang.String r1;
        java.util.ArrayList $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.List) $r2;

        if r4 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(1);

        r4 = $r3;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

     label1:
        return r4;
    }

    private static java.util.Map getMetaMethods(java.util.Map, java.lang.Class)
    {
        java.util.Map r0, r4;
        java.lang.Class r1;
        java.lang.Object $r2;
        java.util.HashMap $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Class;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.Map) $r2;

        if r4 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r4 = $r3;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

     label1:
        return r4;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.runtime.GroovyCategorySupport$1 $r0;

        <org.codehaus.groovy.runtime.GroovyCategorySupport: int categoriesInUse> = 0;

        $r0 = new org.codehaus.groovy.runtime.GroovyCategorySupport$1;

        specialinvoke $r0.<org.codehaus.groovy.runtime.GroovyCategorySupport$1: void <init>()>();

        <org.codehaus.groovy.runtime.GroovyCategorySupport: java.lang.ThreadLocal LOCAL> = $r0;

        return;
    }
}
