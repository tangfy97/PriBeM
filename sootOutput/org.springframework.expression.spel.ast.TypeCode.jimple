public final enum class org.springframework.expression.spel.ast.TypeCode extends java.lang.Enum
{
    public static final enum org.springframework.expression.spel.ast.TypeCode OBJECT;
    public static final enum org.springframework.expression.spel.ast.TypeCode BOOLEAN;
    public static final enum org.springframework.expression.spel.ast.TypeCode BYTE;
    public static final enum org.springframework.expression.spel.ast.TypeCode CHAR;
    public static final enum org.springframework.expression.spel.ast.TypeCode SHORT;
    public static final enum org.springframework.expression.spel.ast.TypeCode INT;
    public static final enum org.springframework.expression.spel.ast.TypeCode LONG;
    public static final enum org.springframework.expression.spel.ast.TypeCode FLOAT;
    public static final enum org.springframework.expression.spel.ast.TypeCode DOUBLE;
    private java.lang.Class type;
    private static final org.springframework.expression.spel.ast.TypeCode[] ENUM$VALUES;

    static void <clinit>()
    {
        org.springframework.expression.spel.ast.TypeCode[] $r17;
        org.springframework.expression.spel.ast.TypeCode $r0, $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        java.lang.Class $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16;

        $r0 = new org.springframework.expression.spel.ast.TypeCode;

        specialinvoke $r0.<org.springframework.expression.spel.ast.TypeCode: void <init>(java.lang.String,int,java.lang.Class)>("OBJECT", 0, class "Ljava/lang/Object;");

        <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode OBJECT> = $r0;

        $r1 = new org.springframework.expression.spel.ast.TypeCode;

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r1.<org.springframework.expression.spel.ast.TypeCode: void <init>(java.lang.String,int,java.lang.Class)>("BOOLEAN", 1, $r2);

        <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode BOOLEAN> = $r1;

        $r3 = new org.springframework.expression.spel.ast.TypeCode;

        $r4 = <java.lang.Byte: java.lang.Class TYPE>;

        specialinvoke $r3.<org.springframework.expression.spel.ast.TypeCode: void <init>(java.lang.String,int,java.lang.Class)>("BYTE", 2, $r4);

        <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode BYTE> = $r3;

        $r5 = new org.springframework.expression.spel.ast.TypeCode;

        $r6 = <java.lang.Character: java.lang.Class TYPE>;

        specialinvoke $r5.<org.springframework.expression.spel.ast.TypeCode: void <init>(java.lang.String,int,java.lang.Class)>("CHAR", 3, $r6);

        <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode CHAR> = $r5;

        $r7 = new org.springframework.expression.spel.ast.TypeCode;

        $r8 = <java.lang.Short: java.lang.Class TYPE>;

        specialinvoke $r7.<org.springframework.expression.spel.ast.TypeCode: void <init>(java.lang.String,int,java.lang.Class)>("SHORT", 4, $r8);

        <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode SHORT> = $r7;

        $r9 = new org.springframework.expression.spel.ast.TypeCode;

        $r10 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r9.<org.springframework.expression.spel.ast.TypeCode: void <init>(java.lang.String,int,java.lang.Class)>("INT", 5, $r10);

        <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode INT> = $r9;

        $r11 = new org.springframework.expression.spel.ast.TypeCode;

        $r12 = <java.lang.Long: java.lang.Class TYPE>;

        specialinvoke $r11.<org.springframework.expression.spel.ast.TypeCode: void <init>(java.lang.String,int,java.lang.Class)>("LONG", 6, $r12);

        <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode LONG> = $r11;

        $r13 = new org.springframework.expression.spel.ast.TypeCode;

        $r14 = <java.lang.Float: java.lang.Class TYPE>;

        specialinvoke $r13.<org.springframework.expression.spel.ast.TypeCode: void <init>(java.lang.String,int,java.lang.Class)>("FLOAT", 7, $r14);

        <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode FLOAT> = $r13;

        $r15 = new org.springframework.expression.spel.ast.TypeCode;

        $r16 = <java.lang.Double: java.lang.Class TYPE>;

        specialinvoke $r15.<org.springframework.expression.spel.ast.TypeCode: void <init>(java.lang.String,int,java.lang.Class)>("DOUBLE", 8, $r16);

        <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode DOUBLE> = $r15;

        $r17 = newarray (org.springframework.expression.spel.ast.TypeCode)[9];

        $r18 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode OBJECT>;

        $r17[0] = $r18;

        $r19 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode BOOLEAN>;

        $r17[1] = $r19;

        $r20 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode BYTE>;

        $r17[2] = $r20;

        $r21 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode CHAR>;

        $r17[3] = $r21;

        $r22 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode SHORT>;

        $r17[4] = $r22;

        $r23 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode INT>;

        $r17[5] = $r23;

        $r24 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode LONG>;

        $r17[6] = $r24;

        $r25 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode FLOAT>;

        $r17[7] = $r25;

        $r26 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode DOUBLE>;

        $r17[8] = $r26;

        <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode[] ENUM$VALUES> = $r17;

        return;
    }

    private void <init>(java.lang.String, int, java.lang.Class)
    {
        int i0;
        java.lang.Class r2;
        java.lang.String r1;
        org.springframework.expression.spel.ast.TypeCode r0;

        r0 := @this: org.springframework.expression.spel.ast.TypeCode;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Class;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.springframework.expression.spel.ast.TypeCode: java.lang.Class type> = r2;

        return;
    }

    public java.lang.Class getType()
    {
        java.lang.Class $r1;
        org.springframework.expression.spel.ast.TypeCode r0;

        r0 := @this: org.springframework.expression.spel.ast.TypeCode;

        $r1 = r0.<org.springframework.expression.spel.ast.TypeCode: java.lang.Class type>;

        return $r1;
    }

    public static org.springframework.expression.spel.ast.TypeCode forName(java.lang.String)
    {
        org.springframework.expression.spel.ast.TypeCode[] $r2;
        int $i0, i1;
        java.lang.String r0, $r1, $r4;
        org.springframework.expression.spel.ast.TypeCode $r3, $r5, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();

        $r2 = staticinvoke <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode[] values()>();

        i1 = 1;

        goto label3;

     label1:
        $r3 = $r2[i1];

        $r4 = virtualinvoke $r3.<org.springframework.expression.spel.ast.TypeCode: java.lang.String name()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r5 = $r2[i1];

        return $r5;

     label2:
        i1 = i1 + 1;

     label3:
        $i0 = lengthof $r2;

        if i1 < $i0 goto label1;

        $r6 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode OBJECT>;

        return $r6;
    }

    public static org.springframework.expression.spel.ast.TypeCode forClass(java.lang.Class)
    {
        int $i0, i1;
        java.lang.Class r2, $r3;
        org.springframework.expression.spel.ast.TypeCode[] $r0;
        org.springframework.expression.spel.ast.TypeCode r1, $r4;

        r2 := @parameter0: java.lang.Class;

        $r0 = staticinvoke <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode[] values()>();

        i1 = 0;

        goto label3;

     label1:
        r1 = $r0[i1];

        $r3 = virtualinvoke r1.<org.springframework.expression.spel.ast.TypeCode: java.lang.Class getType()>();

        if r2 != $r3 goto label2;

        return r1;

     label2:
        i1 = i1 + 1;

     label3:
        $i0 = lengthof $r0;

        if i1 < $i0 goto label1;

        $r4 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode OBJECT>;

        return $r4;
    }

    public static org.springframework.expression.spel.ast.TypeCode[] values()
    {
        int $i0;
        org.springframework.expression.spel.ast.TypeCode[] $r0, $r1;

        $r0 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode[] ENUM$VALUES>;

        $i0 = lengthof $r0;

        $r1 = newarray (org.springframework.expression.spel.ast.TypeCode)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 0, $i0);

        return $r1;
    }

    public static org.springframework.expression.spel.ast.TypeCode valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.springframework.expression.spel.ast.TypeCode $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/springframework/expression/spel/ast/TypeCode;", r0);

        $r2 = (org.springframework.expression.spel.ast.TypeCode) $r1;

        return $r2;
    }
}
