public class org.apache.poi.xslf.usermodel.XSLFImageRenderer extends java.lang.Object
{

    public void <init>()
    {
        org.apache.poi.xslf.usermodel.XSLFImageRenderer r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFImageRenderer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean drawImage(java.awt.Graphics2D, org.apache.poi.xslf.usermodel.XSLFPictureData, java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D r4;
        java.awt.Graphics2D r6;
        int $i0, $i1;
        org.apache.poi.openxml4j.opc.PackagePart $r1;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, $d7;
        java.awt.image.BufferedImage $r3;
        org.apache.poi.xslf.usermodel.XSLFImageRenderer r8;
        java.awt.geom.AffineTransform $r5;
        java.lang.Exception $r7;
        org.apache.poi.xslf.usermodel.XSLFPictureData r0;
        java.io.InputStream $r2;

        r8 := @this: org.apache.poi.xslf.usermodel.XSLFImageRenderer;

        r6 := @parameter0: java.awt.Graphics2D;

        r0 := @parameter1: org.apache.poi.xslf.usermodel.XSLFPictureData;

        r4 := @parameter2: java.awt.geom.Rectangle2D;

     label1:
        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFPictureData: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackagePart: java.io.InputStream getInputStream()>();

        $r3 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>($r2);

        $d0 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getWidth()>();

        $i0 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getWidth()>();

        $d1 = (double) $i0;

        d2 = $d0 / $d1;

        $d3 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getHeight()>();

        $i1 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getHeight()>();

        $d4 = (double) $i1;

        d5 = $d3 / $d4;

        $d6 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getX()>();

        $d7 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getY()>();

        $r5 = new java.awt.geom.AffineTransform;

        specialinvoke $r5.<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double)>(d2, 0.0, 0.0, d5, $d6, $d7);

        virtualinvoke r6.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>($r3, $r5);

     label2:
        return 1;

     label3:
        $r7 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.awt.image.BufferedImage readImage(org.apache.poi.openxml4j.opc.PackagePart) throws java.io.IOException
    {
        java.awt.image.BufferedImage $r2;
        org.apache.poi.xslf.usermodel.XSLFImageRenderer r3;
        org.apache.poi.openxml4j.opc.PackagePart r0;
        java.io.InputStream $r1;

        r3 := @this: org.apache.poi.xslf.usermodel.XSLFImageRenderer;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.PackagePart;

        $r1 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.PackagePart: java.io.InputStream getInputStream()>();

        $r2 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>($r1);

        return $r2;
    }
}
