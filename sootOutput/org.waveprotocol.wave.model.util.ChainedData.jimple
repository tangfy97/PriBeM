public class org.waveprotocol.wave.model.util.ChainedData extends java.lang.Object
{
    private final org.waveprotocol.wave.model.util.DataDomain domain;
    protected final org.waveprotocol.wave.model.util.ChainedData parent;
    private boolean frozen;
    private final java.lang.Object overlay;
    private final java.lang.Object cache;
    private final java.lang.Object roCache;
    private double version;
    private double knownParentVersion;

    public void <init>(org.waveprotocol.wave.model.util.DataDomain)
    {
        org.waveprotocol.wave.model.util.DataDomain r1;
        java.lang.Object $r2, $r3, $r4, $r5;
        org.waveprotocol.wave.model.util.ChainedData r0;

        r0 := @this: org.waveprotocol.wave.model.util.ChainedData;

        r1 := @parameter0: org.waveprotocol.wave.model.util.DataDomain;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.util.ChainedData: boolean frozen> = 0;

        r0.<org.waveprotocol.wave.model.util.ChainedData: double version> = 0.0;

        r0.<org.waveprotocol.wave.model.util.ChainedData: double knownParentVersion> = 0.0;

        r0.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.DataDomain domain> = r1;

        r0.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.ChainedData parent> = null;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.util.DataDomain: java.lang.Object empty()>();

        r0.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object overlay> = $r2;

        $r3 = r0.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object overlay>;

        r0.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object cache> = $r3;

        $r4 = r0.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object cache>;

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.model.util.DataDomain: java.lang.Object readOnlyView(java.lang.Object)>($r4);

        r0.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object roCache> = $r5;

        return;
    }

    public void <init>(org.waveprotocol.wave.model.util.ChainedData)
    {
        org.waveprotocol.wave.model.util.DataDomain $r2, $r3, $r5, $r8;
        java.lang.Object $r4, $r6, $r7, $r9;
        org.waveprotocol.wave.model.util.ChainedData r0, r1;

        r0 := @this: org.waveprotocol.wave.model.util.ChainedData;

        r1 := @parameter0: org.waveprotocol.wave.model.util.ChainedData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.util.ChainedData: boolean frozen> = 0;

        r0.<org.waveprotocol.wave.model.util.ChainedData: double version> = 0.0;

        r0.<org.waveprotocol.wave.model.util.ChainedData: double knownParentVersion> = 0.0;

        $r2 = r1.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.DataDomain domain>;

        r0.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.DataDomain domain> = $r2;

        r0.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.ChainedData parent> = r1;

        $r3 = r0.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.DataDomain domain>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.DataDomain: java.lang.Object empty()>();

        r0.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object overlay> = $r4;

        $r5 = r0.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.DataDomain domain>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.DataDomain: java.lang.Object empty()>();

        r0.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object cache> = $r6;

        $r8 = r0.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.DataDomain domain>;

        $r7 = r0.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object cache>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.util.DataDomain: java.lang.Object readOnlyView(java.lang.Object)>($r7);

        r0.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object roCache> = $r9;

        return;
    }

    public java.lang.Object inspect()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.util.ChainedData r0;

        r0 := @this: org.waveprotocol.wave.model.util.ChainedData;

        specialinvoke r0.<org.waveprotocol.wave.model.util.ChainedData: void maybeUpdateCache()>();

        $r1 = r0.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object roCache>;

        return $r1;
    }

    public java.lang.Object modify()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.util.ChainedData r0;
        double $d0, $d1;

        r0 := @this: org.waveprotocol.wave.model.util.ChainedData;

        $d0 = r0.<org.waveprotocol.wave.model.util.ChainedData: double version>;

        $d1 = $d0 + 1.0;

        r0.<org.waveprotocol.wave.model.util.ChainedData: double version> = $d1;

        r0.<org.waveprotocol.wave.model.util.ChainedData: double knownParentVersion> = -1.0;

        $r1 = r0.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object overlay>;

        return $r1;
    }

    public void freeze()
    {
        java.lang.UnsupportedOperationException $r2;
        org.waveprotocol.wave.model.util.ChainedData r0, $r1;

        r0 := @this: org.waveprotocol.wave.model.util.ChainedData;

        $r1 = r0.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.ChainedData parent>;

        if $r1 != null goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Cannot freeze the root collection");

        throw $r2;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.util.ChainedData: void maybeUpdateCache()>();

        r0.<org.waveprotocol.wave.model.util.ChainedData: boolean frozen> = 1;

        return;
    }

    public void unfreeze()
    {
        org.waveprotocol.wave.model.util.ChainedData r0;

        r0 := @this: org.waveprotocol.wave.model.util.ChainedData;

        r0.<org.waveprotocol.wave.model.util.ChainedData: boolean frozen> = 0;

        return;
    }

    private void maybeUpdateCache()
    {
        org.waveprotocol.wave.model.util.DataDomain $r8;
        byte $b0;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4;
        java.lang.Object $r5, $r6, $r7;
        org.waveprotocol.wave.model.util.ChainedData r0, $r1, $r2, $r3, $r4, $r9;

        r0 := @this: org.waveprotocol.wave.model.util.ChainedData;

        $z0 = r0.<org.waveprotocol.wave.model.util.ChainedData: boolean frozen>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.ChainedData parent>;

        if $r1 == null goto label2;

        $r2 = r0.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.ChainedData parent>;

        specialinvoke $r2.<org.waveprotocol.wave.model.util.ChainedData: void maybeUpdateCache()>();

        $r3 = r0.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.ChainedData parent>;

        $d1 = $r3.<org.waveprotocol.wave.model.util.ChainedData: double version>;

        $d0 = r0.<org.waveprotocol.wave.model.util.ChainedData: double knownParentVersion>;

        $b0 = $d1 cmpl $d0;

        if $b0 == 0 goto label2;

        $r8 = r0.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.DataDomain domain>;

        $r7 = r0.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object cache>;

        $r6 = r0.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object overlay>;

        $r4 = r0.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.ChainedData parent>;

        $r5 = $r4.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object roCache>;

        interfaceinvoke $r8.<org.waveprotocol.wave.model.util.DataDomain: void compose(java.lang.Object,java.lang.Object,java.lang.Object)>($r7, $r6, $r5);

        $r9 = r0.<org.waveprotocol.wave.model.util.ChainedData: org.waveprotocol.wave.model.util.ChainedData parent>;

        $d2 = $r9.<org.waveprotocol.wave.model.util.ChainedData: double version>;

        r0.<org.waveprotocol.wave.model.util.ChainedData: double knownParentVersion> = $d2;

        $d3 = r0.<org.waveprotocol.wave.model.util.ChainedData: double version>;

        $d4 = $d3 + 1.0;

        r0.<org.waveprotocol.wave.model.util.ChainedData: double version> = $d4;

     label2:
        return;
    }

    public double debugGetVersion()
    {
        org.waveprotocol.wave.model.util.ChainedData r0;
        double $d0;

        r0 := @this: org.waveprotocol.wave.model.util.ChainedData;

        $d0 = r0.<org.waveprotocol.wave.model.util.ChainedData: double version>;

        return $d0;
    }

    public double debugGetKnownParentVersion()
    {
        org.waveprotocol.wave.model.util.ChainedData r0;
        double $d0;

        r0 := @this: org.waveprotocol.wave.model.util.ChainedData;

        $d0 = r0.<org.waveprotocol.wave.model.util.ChainedData: double knownParentVersion>;

        return $d0;
    }
}
