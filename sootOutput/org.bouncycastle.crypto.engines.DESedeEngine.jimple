public class org.bouncycastle.crypto.engines.DESedeEngine extends org.bouncycastle.crypto.engines.DESEngine
{
    protected static final int BLOCK_SIZE;
    private int[] workingKey1;
    private int[] workingKey2;
    private int[] workingKey3;
    private boolean forEncryption;

    public void <init>()
    {
        org.bouncycastle.crypto.engines.DESedeEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.DESedeEngine;

        specialinvoke r0.<org.bouncycastle.crypto.engines.DESEngine: void <init>()>();

        r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey1> = null;

        r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey2> = null;

        r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey3> = null;

        return;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        byte[] $r2, r4, r6, r9;
        org.bouncycastle.crypto.engines.DESedeEngine r3;
        int[] $r5, $r7, $r8, $r10;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r16, $r18;
        org.bouncycastle.crypto.params.KeyParameter $r1;
        org.bouncycastle.crypto.CipherParameters r0;
        boolean $z0, z1, $z2;
        java.lang.IllegalArgumentException $r11, $r12;
        java.lang.StringBuilder $r13, $r14, $r17;
        java.lang.Class $r15;

        r3 := @this: org.bouncycastle.crypto.engines.DESedeEngine;

        z1 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z0 != 0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to DESede init - ");

        $r15 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r12;

     label1:
        $r1 = (org.bouncycastle.crypto.params.KeyParameter) r0;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $i0 = lengthof $r2;

        if $i0 <= 24 goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key size greater than 24 bytes");

        throw $r11;

     label2:
        r3.<org.bouncycastle.crypto.engines.DESedeEngine: boolean forEncryption> = z1;

        r4 = newarray (byte)[8];

        $i1 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r4, 0, $i1);

        $r5 = virtualinvoke r3.<org.bouncycastle.crypto.engines.DESedeEngine: int[] generateWorkingKey(boolean,byte[])>(z1, r4);

        r3.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey1> = $r5;

        r6 = newarray (byte)[8];

        $i2 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 8, r6, 0, $i2);

        if z1 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        $r7 = virtualinvoke r3.<org.bouncycastle.crypto.engines.DESedeEngine: int[] generateWorkingKey(boolean,byte[])>($z2, r6);

        r3.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey2> = $r7;

        $i3 = lengthof $r2;

        if $i3 != 24 goto label5;

        r9 = newarray (byte)[8];

        $i4 = lengthof r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 16, r9, 0, $i4);

        $r10 = virtualinvoke r3.<org.bouncycastle.crypto.engines.DESedeEngine: int[] generateWorkingKey(boolean,byte[])>(z1, r9);

        r3.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey3> = $r10;

        goto label6;

     label5:
        $r8 = r3.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey1>;

        r3.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey3> = $r8;

     label6:
        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.engines.DESedeEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.DESedeEngine;

        return "DESede";
    }

    public int getBlockSize()
    {
        org.bouncycastle.crypto.engines.DESedeEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.DESedeEngine;

        return 8;
    }

    public int processBlock(byte[], int, byte[], int)
    {
        byte[] r2, r3, r4;
        java.lang.IllegalStateException $r13;
        org.bouncycastle.crypto.engines.DESedeEngine r0;
        org.bouncycastle.crypto.DataLengthException $r11, $r12;
        int[] $r1, $r5, $r6, $r7, $r8, $r9, $r10;
        int i0, $i1, $i2, i3, $i4, $i5;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.engines.DESedeEngine;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        r3 := @parameter2: byte[];

        i3 := @parameter3: int;

        $r1 = r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey1>;

        if $r1 != null goto label1;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("DESede engine not initialised");

        throw $r13;

     label1:
        $i2 = i0 + 8;

        $i1 = lengthof r2;

        if $i2 <= $i1 goto label2;

        $r12 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r12.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r12;

     label2:
        $i5 = i3 + 8;

        $i4 = lengthof r3;

        if $i5 <= $i4 goto label3;

        $r11 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r11.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r11;

     label3:
        r4 = newarray (byte)[8];

        $z0 = r0.<org.bouncycastle.crypto.engines.DESedeEngine: boolean forEncryption>;

        if $z0 == 0 goto label4;

        $r8 = r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey1>;

        virtualinvoke r0.<org.bouncycastle.crypto.engines.DESedeEngine: void desFunc(int[],byte[],int,byte[],int)>($r8, r2, i0, r4, 0);

        $r9 = r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey2>;

        virtualinvoke r0.<org.bouncycastle.crypto.engines.DESedeEngine: void desFunc(int[],byte[],int,byte[],int)>($r9, r4, 0, r4, 0);

        $r10 = r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey3>;

        virtualinvoke r0.<org.bouncycastle.crypto.engines.DESedeEngine: void desFunc(int[],byte[],int,byte[],int)>($r10, r4, 0, r3, i3);

        goto label5;

     label4:
        $r5 = r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey3>;

        virtualinvoke r0.<org.bouncycastle.crypto.engines.DESedeEngine: void desFunc(int[],byte[],int,byte[],int)>($r5, r2, i0, r4, 0);

        $r6 = r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey2>;

        virtualinvoke r0.<org.bouncycastle.crypto.engines.DESedeEngine: void desFunc(int[],byte[],int,byte[],int)>($r6, r4, 0, r4, 0);

        $r7 = r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey1>;

        virtualinvoke r0.<org.bouncycastle.crypto.engines.DESedeEngine: void desFunc(int[],byte[],int,byte[],int)>($r7, r4, 0, r3, i3);

     label5:
        return 8;
    }

    public void reset()
    {
        org.bouncycastle.crypto.engines.DESedeEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.DESedeEngine;

        return;
    }

    public static void <clinit>()
    {
        <org.bouncycastle.crypto.engines.DESedeEngine: int BLOCK_SIZE> = 8;

        return;
    }
}
