public class org.apache.commons.httpclient.ChunkedInputStream extends java.io.InputStream
{
    private java.io.InputStream in;
    private int chunkSize;
    private int pos;
    private boolean bof;
    private boolean eof;
    private boolean closed;
    private org.apache.commons.httpclient.HttpMethod method;
    private static final org.apache.commons.logging.Log LOG;
    static java.lang.Class class$org$apache$commons$httpclient$ChunkedInputStream;

    public void <init>(java.io.InputStream, org.apache.commons.httpclient.HttpMethod) throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpMethod r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.commons.httpclient.ChunkedInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean bof> = 1;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof> = 0;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean closed> = 0;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.httpclient.HttpMethod method> = null;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InputStream parameter may not be null");

        throw $r3;

     label1:
        r0.<org.apache.commons.httpclient.ChunkedInputStream: java.io.InputStream in> = r1;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.httpclient.HttpMethod method> = r2;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos> = 0;

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.httpclient.ChunkedInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.HttpMethod)>(r1, null);

        return;
    }

    public int read() throws java.io.IOException
    {
        java.io.IOException $r3;
        org.apache.commons.httpclient.ChunkedInputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8;
        boolean $z0, $z1, $z2;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        $z0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r3;

     label1:
        $z1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof>;

        if $z1 == 0 goto label2;

        $i6 = (int) -1;

        return $i6;

     label2:
        $i1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos>;

        $i0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int chunkSize>;

        if $i1 < $i0 goto label3;

        specialinvoke r0.<org.apache.commons.httpclient.ChunkedInputStream: void nextChunk()>();

        $z2 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof>;

        if $z2 == 0 goto label3;

        $i8 = (int) -1;

        return $i8;

     label3:
        $i2 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos>;

        $i3 = $i2 + 1;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos> = $i3;

        $r1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: java.io.InputStream in>;

        $i4 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        return $i4;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, i10, $i12, $i14;
        boolean $z0, $z1, $z2;
        java.io.IOException $r4;
        org.apache.commons.httpclient.ChunkedInputStream r0;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        r1 := @parameter0: byte[];

        i6 := @parameter1: int;

        i10 := @parameter2: int;

        $z0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r4;

     label1:
        $z1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof>;

        if $z1 == 0 goto label2;

        $i12 = (int) -1;

        return $i12;

     label2:
        $i1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos>;

        $i0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int chunkSize>;

        if $i1 < $i0 goto label3;

        specialinvoke r0.<org.apache.commons.httpclient.ChunkedInputStream: void nextChunk()>();

        $z2 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof>;

        if $z2 == 0 goto label3;

        $i14 = (int) -1;

        return $i14;

     label3:
        $i3 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int chunkSize>;

        $i2 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos>;

        $i4 = $i3 - $i2;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i10, $i4);

        $r2 = r0.<org.apache.commons.httpclient.ChunkedInputStream: java.io.InputStream in>;

        $i7 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i6, $i5);

        $i8 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos>;

        $i9 = $i8 + $i7;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos> = $i9;

        return $i7;
    }

    public int read(byte[]) throws java.io.IOException
    {
        byte[] r1;
        int $i0, $i1;
        org.apache.commons.httpclient.ChunkedInputStream r0;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    private void readCRLF() throws java.io.IOException
    {
        java.io.IOException $r3;
        org.apache.commons.httpclient.ChunkedInputStream r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1;
        java.lang.String $r9;
        java.io.InputStream $r1, $r2;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        $r1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        $r2 = r0.<org.apache.commons.httpclient.ChunkedInputStream: java.io.InputStream in>;

        $i1 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        if $i0 != 13 goto label1;

        if $i1 == 10 goto label2;

     label1:
        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CRLF expected at end of chunk: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        return;
    }

    private void nextChunk() throws java.io.IOException
    {
        int $i0, $i1;
        org.apache.commons.httpclient.ChunkedInputStream r0;
        boolean $z0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        $z0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean bof>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>();

     label1:
        $r1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: java.io.InputStream in>;

        $i0 = staticinvoke <org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>($r1);

        r0.<org.apache.commons.httpclient.ChunkedInputStream: int chunkSize> = $i0;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean bof> = 0;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos> = 0;

        $i1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int chunkSize>;

        if $i1 != 0 goto label2;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof> = 1;

        specialinvoke r0.<org.apache.commons.httpclient.ChunkedInputStream: void parseTrailerHeaders()>();

     label2:
        return;
    }

    private static int getChunkSizeFromInputStream(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r1;
        java.io.ByteArrayOutputStream $r17;
        byte b4, b5, b6;
        java.lang.StringBuffer $r12, $r13, $r21;
        int $i0, $i1, $i2, $i3, $i8, $i10;
        java.lang.String $r2, $r3, $r4, $r14, $r15, r16;
        java.lang.NumberFormatException $r9;
        java.io.IOException $r18, $r19, $r22;
        java.lang.RuntimeException $r20;
        java.io.InputStream r5;

        r5 := @parameter0: java.io.InputStream;

        $r17 = new java.io.ByteArrayOutputStream;

        specialinvoke $r17.<java.io.ByteArrayOutputStream: void <init>()>();

        b4 = 0;

        b6 = 0;

        b5 = 0;

     label01:
        $i8 = (int) -1;

        if b6 == $i8 goto label15;

        $i2 = virtualinvoke r5.<java.io.InputStream: int read()>();

        $i10 = (int) -1;

        if $i2 != $i10 goto label02;

        $r18 = new java.io.IOException;

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>("chunked stream ended unexpectedly");

        throw $r18;

     label02:
        tableswitch(b5)
        {
            case 0: goto label03;
            case 1: goto label07;
            case 2: goto label09;
            default: goto label13;
        };

     label03:
        lookupswitch($i2)
        {
            case 13: goto label04;
            case 34: goto label05;
            default: goto label06;
        };

     label04:
        b4 = 1;

        b6 = 1;

        b5 = 1;

        goto label14;

     label05:
        b4 = 2;

        b6 = 2;

        b5 = 2;

     label06:
        virtualinvoke $r17.<java.io.ByteArrayOutputStream: void write(int)>($i2);

        goto label14;

     label07:
        if $i2 != 10 goto label08;

        b4 = -1;

        b6 = -1;

        b5 = -1;

        goto label14;

     label08:
        $r19 = new java.io.IOException;

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>("Protocol violation: Unexpected single newline character in chunk size");

        throw $r19;

     label09:
        lookupswitch($i2)
        {
            case 34: goto label11;
            case 92: goto label10;
            default: goto label12;
        };

     label10:
        $i3 = virtualinvoke r5.<java.io.InputStream: int read()>();

        virtualinvoke $r17.<java.io.ByteArrayOutputStream: void write(int)>($i3);

        goto label14;

     label11:
        b4 = 0;

        b6 = 0;

        b5 = 0;

     label12:
        virtualinvoke $r17.<java.io.ByteArrayOutputStream: void write(int)>($i2);

        goto label14;

     label13:
        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>("assertion failed");

        throw $r20;

     label14:
        goto label01;

     label15:
        $r1 = virtualinvoke $r17.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[])>($r1);

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(59);

        if $i0 <= 0 goto label16;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r15 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        goto label17;

     label16:
        $r15 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

     label17:
        r16 = $r15;

     label18:
        $r3 = virtualinvoke $r15.<java.lang.String: java.lang.String trim()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r3, 16);

     label19:
        goto label21;

     label20:
        $r9 := @caughtexception;

        $r22 = new java.io.IOException;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad chunk size: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r16);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r22;

     label21:
        return $i1;

        catch java.lang.NumberFormatException from label18 to label19 with label20;
    }

    private void parseTrailerHeaders() throws java.io.IOException
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r8;
        org.apache.commons.httpclient.Header $r5;
        int $i0, i1;
        org.apache.commons.httpclient.HttpException $r9;
        java.lang.String $r12, r13;
        java.io.IOException $r11;
        org.apache.commons.httpclient.ChunkedInputStream r0;
        org.apache.commons.httpclient.HttpMethod $r1, $r4, $r6, $r7;
        org.apache.commons.logging.Log $r10;
        org.apache.commons.httpclient.Header[] $r3;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

     label1:
        r13 = "US-ASCII";

        $r1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.httpclient.HttpMethod method>;

        if $r1 == null goto label2;

        $r7 = r0.<org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.httpclient.HttpMethod method>;

        $r8 = interfaceinvoke $r7.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        r13 = virtualinvoke $r8.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>();

     label2:
        $r2 = r0.<org.apache.commons.httpclient.ChunkedInputStream: java.io.InputStream in>;

        $r3 = staticinvoke <org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>($r2, r13);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = <org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Error parsing trailer headers", $r9);

        $r11 = new java.io.IOException;

        $r12 = virtualinvoke $r9.<org.apache.commons.httpclient.HttpException: java.lang.String getMessage()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r12);

        staticinvoke <org.apache.commons.httpclient.util.ExceptionUtil: void initCause(java.lang.Throwable,java.lang.Throwable)>($r11, $r9);

        throw $r11;

     label5:
        $r4 = r0.<org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.httpclient.HttpMethod method>;

        if $r4 == null goto label7;

        i1 = 0;

     label6:
        $i0 = lengthof $r3;

        if i1 >= $i0 goto label7;

        $r6 = r0.<org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.httpclient.HttpMethod method>;

        $r5 = $r3[i1];

        interfaceinvoke $r6.<org.apache.commons.httpclient.HttpMethod: void addResponseFooter(org.apache.commons.httpclient.Header)>($r5);

        i1 = i1 + 1;

        goto label6;

     label7:
        return;

        catch org.apache.commons.httpclient.HttpException from label1 to label3 with label4;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r1;
        org.apache.commons.httpclient.ChunkedInputStream r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        $z0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean closed>;

        if $z0 != 0 goto label5;

     label1:
        $z1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof>;

        if $z1 != 0 goto label2;

        staticinvoke <org.apache.commons.httpclient.ChunkedInputStream: void exhaustInputStream(java.io.InputStream)>(r0);

     label2:
        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof> = 1;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean closed> = 1;

        goto label5;

     label3:
        $r1 := @caughtexception;

     label4:
        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof> = 1;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean closed> = 1;

        throw $r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static void exhaustInputStream(java.io.InputStream) throws java.io.IOException
    {
        int $i0;
        byte[] r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r0 = newarray (byte)[1024];

     label1:
        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        if $i0 < 0 goto label2;

        goto label1;

     label2:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.commons.httpclient.ChunkedInputStream: java.lang.Class class$org$apache$commons$httpclient$ChunkedInputStream>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.ChunkedInputStream: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.ChunkedInputStream");

        <org.apache.commons.httpclient.ChunkedInputStream: java.lang.Class class$org$apache$commons$httpclient$ChunkedInputStream> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.ChunkedInputStream: java.lang.Class class$org$apache$commons$httpclient$ChunkedInputStream>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
