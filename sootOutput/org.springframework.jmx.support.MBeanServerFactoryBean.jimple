public class org.springframework.jmx.support.MBeanServerFactoryBean extends java.lang.Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    protected final org.apache.commons.logging.Log logger;
    private boolean locateExistingServerIfPossible;
    private java.lang.String agentId;
    private java.lang.String defaultDomain;
    private boolean registerWithFactory;
    private javax.management.MBeanServer server;
    private boolean newlyRegistered;

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.springframework.jmx.support.MBeanServerFactoryBean r0;

        r0 := @this: org.springframework.jmx.support.MBeanServerFactoryBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.jmx.support.MBeanServerFactoryBean: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.jmx.support.MBeanServerFactoryBean: boolean locateExistingServerIfPossible> = 0;

        r0.<org.springframework.jmx.support.MBeanServerFactoryBean: boolean registerWithFactory> = 1;

        r0.<org.springframework.jmx.support.MBeanServerFactoryBean: boolean newlyRegistered> = 0;

        return;
    }

    public void setLocateExistingServerIfPossible(boolean)
    {
        org.springframework.jmx.support.MBeanServerFactoryBean r0;
        boolean z0;

        r0 := @this: org.springframework.jmx.support.MBeanServerFactoryBean;

        z0 := @parameter0: boolean;

        r0.<org.springframework.jmx.support.MBeanServerFactoryBean: boolean locateExistingServerIfPossible> = z0;

        return;
    }

    public void setAgentId(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.jmx.support.MBeanServerFactoryBean r0;

        r0 := @this: org.springframework.jmx.support.MBeanServerFactoryBean;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.jmx.support.MBeanServerFactoryBean: java.lang.String agentId> = r1;

        return;
    }

    public void setDefaultDomain(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.jmx.support.MBeanServerFactoryBean r0;

        r0 := @this: org.springframework.jmx.support.MBeanServerFactoryBean;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.jmx.support.MBeanServerFactoryBean: java.lang.String defaultDomain> = r1;

        return;
    }

    public void setRegisterWithFactory(boolean)
    {
        org.springframework.jmx.support.MBeanServerFactoryBean r0;
        boolean z0;

        r0 := @this: org.springframework.jmx.support.MBeanServerFactoryBean;

        z0 := @parameter0: boolean;

        r0.<org.springframework.jmx.support.MBeanServerFactoryBean: boolean registerWithFactory> = z0;

        return;
    }

    public void afterPropertiesSet() throws org.springframework.jmx.MBeanServerNotFoundException
    {
        org.springframework.jmx.support.MBeanServerFactoryBean r0;
        org.springframework.jmx.MBeanServerNotFoundException $r6;
        javax.management.MBeanServer $r2, $r4, $r9;
        org.apache.commons.logging.Log $r8;
        java.lang.String $r1, $r3, $r5, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.jmx.support.MBeanServerFactoryBean;

        $z0 = r0.<org.springframework.jmx.support.MBeanServerFactoryBean: boolean locateExistingServerIfPossible>;

        if $z0 != 0 goto label1;

        $r5 = r0.<org.springframework.jmx.support.MBeanServerFactoryBean: java.lang.String agentId>;

        if $r5 == null goto label5;

     label1:
        $r1 = r0.<org.springframework.jmx.support.MBeanServerFactoryBean: java.lang.String agentId>;

        $r2 = virtualinvoke r0.<org.springframework.jmx.support.MBeanServerFactoryBean: javax.management.MBeanServer locateMBeanServer(java.lang.String)>($r1);

        r0.<org.springframework.jmx.support.MBeanServerFactoryBean: javax.management.MBeanServer server> = $r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        $r7 = r0.<org.springframework.jmx.support.MBeanServerFactoryBean: java.lang.String agentId>;

        if $r7 == null goto label4;

        throw $r6;

     label4:
        $r8 = r0.<org.springframework.jmx.support.MBeanServerFactoryBean: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void info(java.lang.Object)>("No existing MBeanServer found - creating new one");

     label5:
        $r9 = r0.<org.springframework.jmx.support.MBeanServerFactoryBean: javax.management.MBeanServer server>;

        if $r9 != null goto label6;

        $r3 = r0.<org.springframework.jmx.support.MBeanServerFactoryBean: java.lang.String defaultDomain>;

        $z1 = r0.<org.springframework.jmx.support.MBeanServerFactoryBean: boolean registerWithFactory>;

        $r4 = virtualinvoke r0.<org.springframework.jmx.support.MBeanServerFactoryBean: javax.management.MBeanServer createMBeanServer(java.lang.String,boolean)>($r3, $z1);

        r0.<org.springframework.jmx.support.MBeanServerFactoryBean: javax.management.MBeanServer server> = $r4;

        $z2 = r0.<org.springframework.jmx.support.MBeanServerFactoryBean: boolean registerWithFactory>;

        r0.<org.springframework.jmx.support.MBeanServerFactoryBean: boolean newlyRegistered> = $z2;

     label6:
        return;

        catch org.springframework.jmx.MBeanServerNotFoundException from label1 to label2 with label3;
    }

    protected javax.management.MBeanServer locateMBeanServer(java.lang.String) throws org.springframework.jmx.MBeanServerNotFoundException
    {
        java.lang.String r0;
        org.springframework.jmx.support.MBeanServerFactoryBean r2;
        javax.management.MBeanServer $r1;

        r2 := @this: org.springframework.jmx.support.MBeanServerFactoryBean;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.jmx.support.JmxUtils: javax.management.MBeanServer locateMBeanServer(java.lang.String)>(r0);

        return $r1;
    }

    protected javax.management.MBeanServer createMBeanServer(java.lang.String, boolean)
    {
        org.springframework.jmx.support.MBeanServerFactoryBean r3;
        javax.management.MBeanServer $r1, $r2;
        java.lang.String r0;
        boolean z0;

        r3 := @this: org.springframework.jmx.support.MBeanServerFactoryBean;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = staticinvoke <javax.management.MBeanServerFactory: javax.management.MBeanServer createMBeanServer(java.lang.String)>(r0);

        return $r2;

     label1:
        $r1 = staticinvoke <javax.management.MBeanServerFactory: javax.management.MBeanServer newMBeanServer(java.lang.String)>(r0);

        return $r1;
    }

    public javax.management.MBeanServer getObject()
    {
        org.springframework.jmx.support.MBeanServerFactoryBean r0;
        javax.management.MBeanServer $r1;

        r0 := @this: org.springframework.jmx.support.MBeanServerFactoryBean;

        $r1 = r0.<org.springframework.jmx.support.MBeanServerFactoryBean: javax.management.MBeanServer server>;

        return $r1;
    }

    public java.lang.Class getObjectType()
    {
        org.springframework.jmx.support.MBeanServerFactoryBean r0;
        javax.management.MBeanServer $r1, $r2;
        java.lang.Class $r3;

        r0 := @this: org.springframework.jmx.support.MBeanServerFactoryBean;

        $r1 = r0.<org.springframework.jmx.support.MBeanServerFactoryBean: javax.management.MBeanServer server>;

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.jmx.support.MBeanServerFactoryBean: javax.management.MBeanServer server>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        goto label2;

     label1:
        $r3 = class "Ljavax/management/MBeanServer;";

     label2:
        return $r3;
    }

    public boolean isSingleton()
    {
        org.springframework.jmx.support.MBeanServerFactoryBean r0;

        r0 := @this: org.springframework.jmx.support.MBeanServerFactoryBean;

        return 1;
    }

    public void destroy()
    {
        org.springframework.jmx.support.MBeanServerFactoryBean r0;
        boolean $z0;
        javax.management.MBeanServer $r1;

        r0 := @this: org.springframework.jmx.support.MBeanServerFactoryBean;

        $z0 = r0.<org.springframework.jmx.support.MBeanServerFactoryBean: boolean newlyRegistered>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.springframework.jmx.support.MBeanServerFactoryBean: javax.management.MBeanServer server>;

        staticinvoke <javax.management.MBeanServerFactory: void releaseMBeanServer(javax.management.MBeanServer)>($r1);

     label1:
        return;
    }

    public volatile java.lang.Object getObject() throws java.lang.Exception
    {
        org.springframework.jmx.support.MBeanServerFactoryBean r0;
        javax.management.MBeanServer $r1;

        r0 := @this: org.springframework.jmx.support.MBeanServerFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.jmx.support.MBeanServerFactoryBean: javax.management.MBeanServer getObject()>();

        return $r1;
    }
}
