public class com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor extends com.hp.hpl.jena.sparql.algebra.OpVisitorByType
{
    com.hp.hpl.jena.sparql.algebra.OpVisitor beforeVisitor;
    com.hp.hpl.jena.sparql.algebra.OpVisitor afterVisitor;
    com.hp.hpl.jena.sparql.algebra.OpVisitor mainVisitor;

    public void <init>(com.hp.hpl.jena.sparql.algebra.OpVisitor, com.hp.hpl.jena.sparql.algebra.OpVisitor, com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor r0;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r1, r2, r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitorByType: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor beforeVisitor> = null;

        r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor afterVisitor> = null;

        r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor mainVisitor> = null;

        r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor mainVisitor> = r1;

        r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor beforeVisitor> = r2;

        r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor afterVisitor> = r3;

        return;
    }

    private void before(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor r0;
        com.hp.hpl.jena.sparql.algebra.Op r2;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r1, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor beforeVisitor>;

        if $r1 == null goto label1;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor beforeVisitor>;

        interfaceinvoke r2.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r3);

     label1:
        return;
    }

    private void after(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor r0;
        com.hp.hpl.jena.sparql.algebra.Op r2;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r1, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor afterVisitor>;

        if $r1 == null goto label1;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor afterVisitor>;

        interfaceinvoke r2.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r3);

     label1:
        return;
    }

    protected void visit0(com.hp.hpl.jena.sparql.algebra.op.Op0)
    {
        com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.Op0 r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op0;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: void before(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor mainVisitor>;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op0: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r2);

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: void after(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return;
    }

    protected void visit1(com.hp.hpl.jena.sparql.algebra.op.Op1)
    {
        com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.Op1 r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: void before(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor mainVisitor>;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op1: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r2);

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: void after(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return;
    }

    protected void visit2(com.hp.hpl.jena.sparql.algebra.op.Op2)
    {
        com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.Op2 r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op2;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: void before(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor mainVisitor>;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op2: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r2);

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: void after(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return;
    }

    protected void visitN(com.hp.hpl.jena.sparql.algebra.op.OpN)
    {
        com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.OpN r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpN;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: void before(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor mainVisitor>;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpN: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r2);

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: void after(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return;
    }

    protected void visitFilter(com.hp.hpl.jena.sparql.algebra.op.OpFilter)
    {
        com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: void before(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor mainVisitor>;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r2);

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: void after(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return;
    }

    protected void visitExt(com.hp.hpl.jena.sparql.algebra.op.OpExt)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExt r1;
        com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor r0;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExt;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: void before(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor mainVisitor>;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpExt: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r2);

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.BeforeAfterVisitor: void after(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return;
    }
}
