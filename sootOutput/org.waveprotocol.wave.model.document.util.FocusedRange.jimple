public final class org.waveprotocol.wave.model.document.util.FocusedRange extends java.lang.Object
{
    private final int anchor;
    private final int focus;
    private org.waveprotocol.wave.model.document.util.Range range;

    public void <init>(int, int)
    {
        org.waveprotocol.wave.model.document.util.FocusedRange r0;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: org.waveprotocol.wave.model.document.util.FocusedRange;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 < 0 goto label1;

        if i1 >= 0 goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad focused range: (");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r7);

     label2:
        r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int anchor> = i0;

        r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int focus> = i1;

        return;
    }

    public void <init>(org.waveprotocol.wave.model.document.util.Range, boolean)
    {
        org.waveprotocol.wave.model.document.util.FocusedRange r0;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.model.document.util.Range r1;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FocusedRange;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Range;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if z0 == 0 goto label1;

        $i2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int anchor> = $i2;

        $i3 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int focus> = $i3;

        goto label2;

     label1:
        $i0 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int anchor> = $i0;

        $i1 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int focus> = $i1;

     label2:
        return;
    }

    public void <init>(int)
    {
        int i0;
        org.waveprotocol.wave.model.document.util.FocusedRange r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FocusedRange;

        i0 := @parameter0: int;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.FocusedRange: void <init>(int,int)>(i0, i0);

        return;
    }

    public int getAnchor()
    {
        int $i0;
        org.waveprotocol.wave.model.document.util.FocusedRange r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FocusedRange;

        $i0 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int anchor>;

        return $i0;
    }

    public int getFocus()
    {
        int $i0;
        org.waveprotocol.wave.model.document.util.FocusedRange r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FocusedRange;

        $i0 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int focus>;

        return $i0;
    }

    public boolean isCollapsed()
    {
        org.waveprotocol.wave.model.document.util.FocusedRange r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FocusedRange;

        $i1 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int anchor>;

        $i0 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int focus>;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isOrdered()
    {
        org.waveprotocol.wave.model.document.util.FocusedRange r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FocusedRange;

        $i1 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int anchor>;

        $i0 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int focus>;

        if $i1 > $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.waveprotocol.wave.model.document.util.Range asRange()
    {
        org.waveprotocol.wave.model.document.util.FocusedRange r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.waveprotocol.wave.model.document.util.Range $r1, $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.util.FocusedRange;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: org.waveprotocol.wave.model.document.util.Range range>;

        if $r1 != null goto label3;

        $i1 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int anchor>;

        $i0 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int focus>;

        if $i1 >= $i0 goto label1;

        $r2 = new org.waveprotocol.wave.model.document.util.Range;

        $i5 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int anchor>;

        $i4 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int focus>;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.util.Range: void <init>(int,int)>($i5, $i4);

        goto label2;

     label1:
        $r2 = new org.waveprotocol.wave.model.document.util.Range;

        $i3 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int focus>;

        $i2 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int anchor>;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.util.Range: void <init>(int,int)>($i3, $i2);

     label2:
        r0.<org.waveprotocol.wave.model.document.util.FocusedRange: org.waveprotocol.wave.model.document.util.Range range> = $r2;

     label3:
        $r3 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: org.waveprotocol.wave.model.document.util.Range range>;

        return $r3;
    }

    public int hashCode()
    {
        org.waveprotocol.wave.model.document.util.FocusedRange r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.waveprotocol.wave.model.document.util.FocusedRange;

        $i2 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int anchor>;

        $i0 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int focus>;

        $i1 = 37 * $i0;

        $i3 = $i2 + $i1;

        return $i3;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.FocusedRange r0, r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FocusedRange;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.waveprotocol.wave.model.document.util.FocusedRange;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.waveprotocol.wave.model.document.util.FocusedRange) r1;

        $i1 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int focus>;

        $i0 = r2.<org.waveprotocol.wave.model.document.util.FocusedRange: int focus>;

        if $i1 == $i0 goto label3;

        return 0;

     label3:
        $i3 = r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int anchor>;

        $i2 = r2.<org.waveprotocol.wave.model.document.util.FocusedRange: int anchor>;

        if $i3 == $i2 goto label4;

        return 0;

     label4:
        return 1;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.document.util.FocusedRange r2;
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9, $r10;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.document.util.FocusedRange;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FocusedRange(");

        $i0 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.FocusedRange: int getAnchor()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.FocusedRange: boolean isCollapsed()>();

        if $z0 == 0 goto label1;

        $r10 = "";

        goto label2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $i1 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.FocusedRange: int getFocus()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
