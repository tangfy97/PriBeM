public class com.google.wave.api.impl.EventMessageBundle extends java.lang.Object
{
    private java.util.List events;
    private com.google.wave.api.impl.WaveletData waveletData;
    private com.google.wave.api.Wavelet wavelet;
    private java.util.Map blipData;
    private java.util.Map threads;
    private java.util.Map requiredBlips;
    private java.lang.String proxyingFor;
    private final java.lang.String robotAddress;
    private final java.lang.String rpcServerUrl;

    public void <init>(java.lang.String, java.lang.String)
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.util.HashMap $r4, $r5, $r6;
        java.lang.String r1, r3;
        java.util.ArrayList $r2;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.wave.api.impl.EventMessageBundle: java.lang.String robotAddress> = r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.google.wave.api.impl.EventMessageBundle: java.util.List events> = $r2;

        r0.<com.google.wave.api.impl.EventMessageBundle: java.lang.String rpcServerUrl> = r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map blipData> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map requiredBlips> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map threads> = $r6;

        return;
    }

    public java.util.Map getRequiredBlips()
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.util.Map $r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        $r1 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map requiredBlips>;

        return $r1;
    }

    public void requireBlip(java.lang.String, java.util.List)
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        com.google.wave.api.Context r7;
        java.util.Iterator $r5;
        java.util.Set r10;
        java.util.HashSet $r8;
        java.util.List r4;
        java.util.Map $r2, $r9;
        java.lang.Object $r3, $r6;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.util.List;

        $r2 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map requiredBlips>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r10 = (java.util.Set) $r3;

        if r10 != null goto label1;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r10 = $r8;

        $r9 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map requiredBlips>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8);

     label1:
        $r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.google.wave.api.Context) $r6;

        interfaceinvoke r10.<java.util.Set: boolean add(java.lang.Object)>(r7);

        goto label2;

     label3:
        return;
    }

    public void addEvent(com.google.wave.api.event.Event)
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        com.google.wave.api.event.Event r1;
        java.util.List $r2;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        r1 := @parameter0: com.google.wave.api.event.Event;

        $r2 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.List events>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public boolean hasMessages()
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.util.List $r1;
        boolean $z0, $z1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        $r1 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.List events>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.util.List getEvents()
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.util.List $r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        $r1 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.List events>;

        return $r1;
    }

    public com.google.wave.api.impl.WaveletData getWaveletData()
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        com.google.wave.api.impl.WaveletData $r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        $r1 = r0.<com.google.wave.api.impl.EventMessageBundle: com.google.wave.api.impl.WaveletData waveletData>;

        return $r1;
    }

    public com.google.wave.api.Wavelet getWavelet()
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        com.google.wave.api.Wavelet $r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        $r1 = r0.<com.google.wave.api.impl.EventMessageBundle: com.google.wave.api.Wavelet wavelet>;

        return $r1;
    }

    public java.util.Map getBlipData()
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.util.Map $r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        $r1 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map blipData>;

        return $r1;
    }

    public java.util.Map getThreads()
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.util.Map $r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        $r1 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map threads>;

        return $r1;
    }

    public void setEvents(java.util.List)
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.util.List r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        r1 := @parameter0: java.util.List;

        r0.<com.google.wave.api.impl.EventMessageBundle: java.util.List events> = r1;

        return;
    }

    public void setWaveletData(com.google.wave.api.impl.WaveletData)
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        com.google.wave.api.impl.WaveletData r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        r1 := @parameter0: com.google.wave.api.impl.WaveletData;

        r0.<com.google.wave.api.impl.EventMessageBundle: com.google.wave.api.impl.WaveletData waveletData> = r1;

        return;
    }

    public void setWavelet(com.google.wave.api.Wavelet)
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        com.google.wave.api.Wavelet r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        r1 := @parameter0: com.google.wave.api.Wavelet;

        r0.<com.google.wave.api.impl.EventMessageBundle: com.google.wave.api.Wavelet wavelet> = r1;

        return;
    }

    public void setBlipData(java.util.Map)
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.util.Map r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        r1 := @parameter0: java.util.Map;

        r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map blipData> = r1;

        return;
    }

    public void setThreads(java.util.Map)
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.util.Map r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        r1 := @parameter0: java.util.Map;

        r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map threads> = r1;

        return;
    }

    public void clear()
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.util.List $r1;
        java.util.Map $r2, $r3;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        $r1 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.List events>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r2 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map blipData>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map requiredBlips>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        r0.<com.google.wave.api.impl.EventMessageBundle: com.google.wave.api.impl.WaveletData waveletData> = null;

        return;
    }

    public boolean hasBlipId(java.lang.String)
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.util.Map $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map blipData>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public void addBlip(java.lang.String, com.google.wave.api.BlipData)
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        com.google.wave.api.BlipData r2;
        java.util.Map $r3;
        java.lang.String r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.google.wave.api.BlipData;

        $r3 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map blipData>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void addThread(java.lang.String, com.google.wave.api.BlipThread)
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.util.Map $r3;
        java.lang.String r1;
        com.google.wave.api.BlipThread r2;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.google.wave.api.BlipThread;

        $r3 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map threads>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public boolean hasThreadId(java.lang.String)
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.util.Map $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.Map threads>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean hasEvent(com.google.wave.api.event.EventType)
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.util.Iterator $r2;
        com.google.wave.api.event.Event r4;
        com.google.wave.api.event.EventType $r5, r6;
        java.util.List $r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        r6 := @parameter0: com.google.wave.api.event.EventType;

        $r1 = r0.<com.google.wave.api.impl.EventMessageBundle: java.util.List events>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.wave.api.event.Event) $r3;

        $r5 = interfaceinvoke r4.<com.google.wave.api.event.Event: com.google.wave.api.event.EventType getType()>();

        if $r5 != r6 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public java.lang.String getProxyingFor()
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.lang.String $r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        $r1 = r0.<com.google.wave.api.impl.EventMessageBundle: java.lang.String proxyingFor>;

        return $r1;
    }

    public void setProxyingFor(java.lang.String)
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.lang.String r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        r1 := @parameter0: java.lang.String;

        r0.<com.google.wave.api.impl.EventMessageBundle: java.lang.String proxyingFor> = r1;

        return;
    }

    public java.lang.String getRobotAddress()
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.lang.String $r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        $r1 = r0.<com.google.wave.api.impl.EventMessageBundle: java.lang.String robotAddress>;

        return $r1;
    }

    public java.lang.String getRpcServerUrl()
    {
        com.google.wave.api.impl.EventMessageBundle r0;
        java.lang.String $r1;

        r0 := @this: com.google.wave.api.impl.EventMessageBundle;

        $r1 = r0.<com.google.wave.api.impl.EventMessageBundle: java.lang.String rpcServerUrl>;

        return $r1;
    }
}
