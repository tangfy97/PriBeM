public class com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph extends com.hp.hpl.jena.reasoner.BaseInfGraph implements com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI
{
    protected com.hp.hpl.jena.util.OneToManyMap derivations;
    protected com.hp.hpl.jena.reasoner.FGraph fdeductions;
    protected com.hp.hpl.jena.graph.Graph safeDeductions;
    protected com.hp.hpl.jena.graph.Graph schemaGraph;
    protected com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine;
    private java.util.List rules;
    public boolean filterFunctors;
    protected boolean traceOn;
    private static org.slf4j.Logger logger;

    public void <init>(com.hp.hpl.jena.reasoner.Reasoner, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Graph r2;
        com.hp.hpl.jena.reasoner.Reasoner r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.Reasoner;

        r2 := @parameter1: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void <init>(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.reasoner.Reasoner)>(null, r1);

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean filterFunctors> = 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean traceOn> = 0;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void instantiateRuleEngine(java.util.List)>(null);

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.graph.Graph schemaGraph> = r2;

        return;
    }

    public void <init>(com.hp.hpl.jena.reasoner.Reasoner, java.util.List, com.hp.hpl.jena.graph.Graph)
    {
        java.util.List r2;
        com.hp.hpl.jena.reasoner.Reasoner r1;
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Graph r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.Reasoner;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void <init>(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.reasoner.Reasoner)>(null, r1);

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean filterFunctors> = 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean traceOn> = 0;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void instantiateRuleEngine(java.util.List)>(r2);

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: java.util.List rules> = r2;

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.graph.Graph schemaGraph> = r3;

        return;
    }

    public void <init>(com.hp.hpl.jena.reasoner.Reasoner, java.util.List, com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph)
    {
        java.util.List r2;
        com.hp.hpl.jena.reasoner.Reasoner r1;
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Graph r3, r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.Reasoner;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: com.hp.hpl.jena.graph.Graph;

        r4 := @parameter3: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph)>(r1, r2, r3);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void rebind(com.hp.hpl.jena.graph.Graph)>(r4);

        return;
    }

    protected void instantiateRuleEngine(java.util.List)
    {
        java.util.List r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine $r2, $r3;
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r1;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label1;

        $r3 = new com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI,java.util.List)>(r1, r0);

        r1.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine> = $r3;

        goto label2;

     label1:
        $r2 = new com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        specialinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI)>(r1);

        r1.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine> = $r2;

     label2:
        return;
    }

    public void setRuleStore(java.lang.Object)
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        java.lang.Object r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: void setRuleStore(java.lang.Object)>(r1);

        return;
    }

    public void rebind(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.FGraph $r1;
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Graph r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = new com.hp.hpl.jena.reasoner.FGraph;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: void <init>(com.hp.hpl.jena.graph.Graph)>(r2);

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata> = $r1;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void rebind()>();

        return;
    }

    public void rebind()
    {
        int $i0, $i1;
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: int version> = $i1;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void setPreparedState(boolean)>(0);

        return;
    }

    public com.hp.hpl.jena.graph.Graph getSchemaGraph()
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.graph.Graph schemaGraph>;

        return $r1;
    }

    public synchronized void prepare()
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI $r5, $r7;
        com.hp.hpl.jena.reasoner.FGraph $r1, $r4, $r6;
        com.hp.hpl.jena.graph.Graph $r2, $r3, $r8;
        boolean $z0, z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean isPrepared()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void setPreparedState(boolean)>(1);

        $r1 = new com.hp.hpl.jena.reasoner.FGraph;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.graph.Graph createDeductionsGraph()>();

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: void <init>(com.hp.hpl.jena.graph.Graph)>($r2);

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions> = $r1;

        z1 = 0;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.graph.Graph schemaGraph>;

        if $r3 == null goto label2;

        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.graph.Graph schemaGraph>;

        z1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean preloadDeductions(com.hp.hpl.jena.graph.Graph)>($r8);

     label2:
        if z1 == 0 goto label3;

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        interfaceinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: void fastInit(com.hp.hpl.jena.reasoner.Finder)>($r6);

        goto label4;

     label3:
        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        interfaceinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: void init(boolean,com.hp.hpl.jena.reasoner.Finder)>(1, $r4);

     label4:
        return;
    }

    protected boolean preloadDeductions(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0, r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI $r8, $r9;
        com.hp.hpl.jena.graph.Triple $r12;
        com.hp.hpl.jena.reasoner.FGraph $r1;
        java.util.List $r5, $r6;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r7;
        java.lang.Object $r10, $r11;
        com.hp.hpl.jena.graph.Graph $r2, r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        r4 = (com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph) r3;

        $r6 = r4.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: java.util.List rules>;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: java.util.List rules>;

        if $r6 != $r5 goto label3;

        $r7 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, null, null);

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (com.hp.hpl.jena.graph.Triple) $r11;

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r12);

        goto label1;

     label2:
        $r9 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        $r8 = r4.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        $r10 = interfaceinvoke $r8.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: java.lang.Object getRuleStore()>();

        interfaceinvoke $r9.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: void setRuleStore(java.lang.Object)>($r10);

        return 1;

     label3:
        return 0;
    }

    public void addDeduction(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Graph $r1;
        com.hp.hpl.jena.graph.Triple r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.graph.Graph getDeductionsGraph()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r2);

        return;
    }

    public void setFunctorFiltering(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean filterFunctors> = z0;

        return;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder)
    {
        com.hp.hpl.jena.reasoner.Finder r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.Finder;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder,boolean)>(r1, r2, 1);

        return $r3;
    }

    private com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder, boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.util.iterator.Filter $r7;
        com.hp.hpl.jena.reasoner.FGraph $r1, $r4, $r5, $r9, $r10, $r11;
        com.hp.hpl.jena.reasoner.Finder r2, $r6;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r8, r12;
        com.hp.hpl.jena.reasoner.TriplePattern r3;
        boolean z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.Finder;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void checkOpen()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void requirePrepared()>();

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        if $r1 != null goto label1;

        $r11 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        r12 = virtualinvoke $r11.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>(r3, r2);

        goto label3;

     label1:
        if r2 != null goto label2;

        $r10 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r9 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        r12 = virtualinvoke $r10.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>(r3, $r9);

        goto label3;

     label2:
        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        $r6 = staticinvoke <com.hp.hpl.jena.reasoner.FinderUtil: com.hp.hpl.jena.reasoner.Finder cascade(com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.Finder)>($r4, r2);

        r12 = virtualinvoke $r5.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>(r3, $r6);

     label3:
        if z0 == 0 goto label4;

        $z1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean filterFunctors>;

        if $z1 == 0 goto label4;

        $r7 = <com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.util.iterator.Filter acceptFilter>;

        $r8 = interfaceinvoke r12.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterDrop(com.hp.hpl.jena.util.iterator.Filter)>($r7);

        return $r8;

     label4:
        return r12;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.reasoner.TriplePattern $r1;
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Node r2, r3, r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>($r1, null);

        return $r5;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.reasoner.TriplePattern r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>(r1, null);

        return $r2;
    }

    public synchronized void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Triple r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI $r4;
        com.hp.hpl.jena.reasoner.FGraph $r1;
        int $i0, $i1;
        com.hp.hpl.jena.graph.Graph $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: int version> = $i1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r3);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean isPrepared()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        interfaceinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: void add(com.hp.hpl.jena.graph.Triple)>(r3);

     label1:
        return;
    }

    public int graphBaseSize()
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.FGraph $r1, $r3;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.graph.Graph $r2, $r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void checkOpen()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void requirePrepared()>();

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        $i0 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: int size()>();

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        $i1 = interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: int size()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Triple r4;
        com.hp.hpl.jena.reasoner.FGraph $r1, $r2, $r5;
        int $i0, $i1;
        com.hp.hpl.jena.graph.Graph $r3, $r6;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r4 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: int version> = $i1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        if $r1 == null goto label1;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        if $r6 == null goto label1;

        interfaceinvoke $r6.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r4);

     label1:
        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean isPrepared()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r4);

     label2:
        return;
    }

    public void close()
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean closed>;

        if $z0 != 0 goto label1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine> = null;

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions> = null;

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: java.util.List rules> = null;

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.graph.Graph schemaGraph> = null;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void close()>();

     label1:
        return;
    }

    public void addBRule(com.hp.hpl.jena.reasoner.rulesys.Rule)
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r7;
        com.hp.hpl.jena.reasoner.rulesys.Rule r3;
        java.lang.StringBuilder $r1, $r2, $r5;
        java.lang.String $r4, $r6;
        com.hp.hpl.jena.reasoner.ReasonerException $r0;

        r7 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r0 = new com.hp.hpl.jena.reasoner.ReasonerException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward reasoner does not support hybrid rules - ");

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String toShortString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public void deleteBRule(com.hp.hpl.jena.reasoner.rulesys.Rule)
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r7;
        com.hp.hpl.jena.reasoner.rulesys.Rule r3;
        java.lang.StringBuilder $r1, $r2, $r5;
        java.lang.String $r4, $r6;
        com.hp.hpl.jena.reasoner.ReasonerException $r0;

        r7 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r0 = new com.hp.hpl.jena.reasoner.ReasonerException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward reasoner does not support hybrid rules - ");

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String toShortString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public com.hp.hpl.jena.graph.Graph getDeductionsGraph()
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void prepare()>();

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.graph.Graph safeDeductions>;

        return $r1;
    }

    protected com.hp.hpl.jena.graph.Graph createDeductionsGraph()
    {
        com.hp.hpl.jena.reasoner.FGraph $r1, $r4;
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph $r3;
        com.hp.hpl.jena.graph.Graph $r2, $r5, $r6;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        if $r1 == null goto label1;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        if $r5 == null goto label1;

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.graph.Graph safeDeductions>;

        interfaceinvoke $r6.<com.hp.hpl.jena.graph.Graph: void clear()>();

        return $r5;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.graph.Factory: com.hp.hpl.jena.graph.Graph createGraphMem()>();

        $r3 = new com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.SafeGraph: void <init>(com.hp.hpl.jena.graph.Graph)>($r2);

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.graph.Graph safeDeductions> = $r3;

        return $r2;
    }

    public com.hp.hpl.jena.graph.Graph getCurrentDeductionsGraph()
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.graph.Graph safeDeductions>;

        return $r1;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator findDataMatches(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.reasoner.TriplePattern $r1;
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Node r2, r3, r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        $r5 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder,boolean)>($r1, null, 0);

        return $r5;
    }

    public void logDerivation(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.reasoner.Derivation)
    {
        com.hp.hpl.jena.reasoner.Derivation r2;
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.util.OneToManyMap $r3;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.Derivation;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.util.OneToManyMap derivations>;

        virtualinvoke $r3.<com.hp.hpl.jena.util.OneToManyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void silentAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.FGraph $r1;
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r3);

        return;
    }

    public void setDerivationLogging(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.util.OneToManyMap $r2;
        boolean z0;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean recordDerivations> = z0;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        interfaceinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: void setDerivationLogging(boolean)>(z0);

        if z0 == 0 goto label1;

        $r2 = new com.hp.hpl.jena.util.OneToManyMap;

        specialinvoke $r2.<com.hp.hpl.jena.util.OneToManyMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.util.OneToManyMap derivations> = $r2;

        goto label2;

     label1:
        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.util.OneToManyMap derivations> = null;

     label2:
        return;
    }

    public boolean shouldLogDerivations()
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean recordDerivations>;

        return $z0;
    }

    public java.util.Iterator getDerivation(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.util.iterator.NullIterator $r5;
        java.util.Iterator $r4;
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        com.hp.hpl.jena.util.OneToManyMap $r1, $r3;
        com.hp.hpl.jena.graph.Triple r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.util.OneToManyMap derivations>;

        if $r1 != null goto label1;

        $r5 = new com.hp.hpl.jena.util.iterator.NullIterator;

        specialinvoke $r5.<com.hp.hpl.jena.util.iterator.NullIterator: void <init>()>();

        return $r5;

     label1:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.util.OneToManyMap derivations>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.util.OneToManyMap: java.util.Iterator getAll(java.lang.Object)>(r2);

        return $r4;
    }

    public void setTraceOn(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean traceOn> = z0;

        return;
    }

    public boolean shouldTrace()
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: boolean traceOn>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        $z1 = interfaceinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: boolean shouldTrace()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public long getNRulesFired()
    {
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph r0;
        long $l0;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        $l0 = interfaceinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: long getNRulesFired()>();

        return $l0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/reasoner/rulesys/BasicForwardRuleInfGraph;");

        <com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: org.slf4j.Logger logger> = $r0;

        return;
    }
}
