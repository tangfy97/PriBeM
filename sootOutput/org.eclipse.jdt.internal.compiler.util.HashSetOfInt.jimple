public final class org.eclipse.jdt.internal.compiler.util.HashSetOfInt extends java.lang.Object implements java.lang.Cloneable
{
    public int[] set;
    public int elementSize;
    int threshold;

    public void <init>()
    {
        org.eclipse.jdt.internal.compiler.util.HashSetOfInt r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.HashSetOfInt;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: void <init>(int)>(13);

        return;
    }

    public void <init>(int)
    {
        int[] $r1;
        org.eclipse.jdt.internal.compiler.util.HashSetOfInt r0;
        int i0, $i1, i2;
        float $f0, $f1;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.HashSetOfInt;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int elementSize> = 0;

        r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int threshold> = i0;

        $f0 = (float) i0;

        $f1 = $f0 * 1.75F;

        i2 = (int) $f1;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int threshold>;

        if $i1 != i2 goto label1;

        i2 = i2 + 1;

     label1:
        $r1 = newarray (int)[i2];

        r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set> = $r1;

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.eclipse.jdt.internal.compiler.util.HashSetOfInt r0, r2;
        int[] $r3, $r4, $r5, $r6;
        int $i0, $i1, i2;
        java.lang.Object $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.HashSetOfInt;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.eclipse.jdt.internal.compiler.util.HashSetOfInt) $r1;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int elementSize>;

        r2.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int elementSize> = $i0;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int threshold>;

        r2.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int threshold> = $i1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        i2 = lengthof $r3;

        $r4 = newarray (int)[i2];

        r2.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set> = $r4;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        $r5 = r2.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, 0, i2);

        return r2;
    }

    public boolean contains(int)
    {
        int[] $r1, $r2;
        org.eclipse.jdt.internal.compiler.util.HashSetOfInt r0;
        int i0, i1, i2, $i3;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.HashSetOfInt;

        i1 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        i0 = lengthof $r1;

        i2 = i1 % i0;

        goto label3;

     label1:
        if $i3 != i1 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        if i2 != i0 goto label3;

        i2 = 0;

     label3:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        $i3 = $r2[i2];

        if $i3 != 0 goto label1;

        return 0;
    }

    public int add(int)
    {
        org.eclipse.jdt.internal.compiler.util.HashSetOfInt r0;
        int[] $r1, $r2, $r3, $r4;
        int i0, i1, $i2, $i3, $i4, i5, $i6;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.HashSetOfInt;

        i1 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        i0 = lengthof $r1;

        i5 = i1 % i0;

        goto label3;

     label1:
        if $i6 != i1 goto label2;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        $r2[i5] = i1;

        return i1;

     label2:
        i5 = i5 + 1;

        if i5 != i0 goto label3;

        i5 = 0;

     label3:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        $i6 = $r4[i5];

        if $i6 != 0 goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        $r3[i5] = i1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int elementSize>;

        $i3 = $i2 + 1;

        r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int elementSize> = $i3;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int threshold>;

        if $i3 <= $i4 goto label4;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: void rehash()>();

     label4:
        return i1;
    }

    public int remove(int)
    {
        org.eclipse.jdt.internal.compiler.util.HashSetOfInt r0;
        int[] $r1, $r2, $r3, $r4;
        int i0, i1, i2, $i3, $i4, i5, $i6;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.HashSetOfInt;

        i1 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        i0 = lengthof $r1;

        i5 = i1 % i0;

        goto label3;

     label1:
        if $i6 != i1 goto label2;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        i2 = $r2[i5];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int elementSize>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int elementSize> = $i4;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        $r3[i5] = 0;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: void rehash()>();

        return i2;

     label2:
        i5 = i5 + 1;

        if i5 != i0 goto label3;

        i5 = 0;

     label3:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        $i6 = $r4[i5];

        if $i6 != 0 goto label1;

        return 0;
    }

    private void rehash()
    {
        org.eclipse.jdt.internal.compiler.util.HashSetOfInt r1, $r5;
        int[] $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, i4, $i6;

        r1 := @this: org.eclipse.jdt.internal.compiler.util.HashSetOfInt;

        $r5 = new org.eclipse.jdt.internal.compiler.util.HashSetOfInt;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int elementSize>;

        $i1 = $i0 * 2;

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: void <init>(int)>($i1);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        i4 = lengthof $r2;

        goto label2;

     label1:
        $r3 = r1.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        $i2 = $r3[i4];

        if $i2 == 0 goto label2;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int add(int)>($i2);

     label2:
        $i6 = (int) -1;

        i4 = i4 + $i6;

        if i4 >= 0 goto label1;

        $r4 = $r5.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        r1.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set> = $r4;

        $i3 = $r5.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int threshold>;

        r1.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int threshold> = $i3;

        return;
    }

    public int size()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.util.HashSetOfInt r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.HashSetOfInt;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int elementSize>;

        return $i0;
    }

    public java.lang.String toString()
    {
        org.eclipse.jdt.internal.compiler.util.HashSetOfInt r1;
        int[] $r2, $r3;
        java.lang.StringBuffer $r0;
        int i0, $i1, $i2, i3;
        java.lang.String $r4;

        r1 := @this: org.eclipse.jdt.internal.compiler.util.HashSetOfInt;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i3 = 0;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        i0 = lengthof $r2;

        goto label3;

     label1:
        $r3 = r1.<org.eclipse.jdt.internal.compiler.util.HashSetOfInt: int[] set>;

        $i1 = $r3[i3];

        if $i1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $i2 = i0 - 1;

        if i3 == $i2 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i0 goto label1;

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }
}
