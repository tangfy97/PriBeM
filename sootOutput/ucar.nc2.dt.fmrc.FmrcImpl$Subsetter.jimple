class ucar.nc2.dt.fmrc.FmrcImpl$Subsetter extends java.lang.Object
{
    java.util.List invList;
    ucar.nc2.Variable mainv;
    final ucar.nc2.dt.fmrc.FmrcImpl this$0;

    void <init>(ucar.nc2.dt.fmrc.FmrcImpl, java.util.List, ucar.nc2.Variable)
    {
        ucar.nc2.dt.fmrc.FmrcImpl$Subsetter r0;
        java.util.List r2;
        ucar.nc2.Variable r3;
        ucar.nc2.dt.fmrc.FmrcImpl r1;

        r0 := @this: ucar.nc2.dt.fmrc.FmrcImpl$Subsetter;

        r1 := @parameter0: ucar.nc2.dt.fmrc.FmrcImpl;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: ucar.nc2.Variable;

        r0.<ucar.nc2.dt.fmrc.FmrcImpl$Subsetter: ucar.nc2.dt.fmrc.FmrcImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.dt.fmrc.FmrcImpl$Subsetter: java.util.List invList> = r2;

        r0.<ucar.nc2.dt.fmrc.FmrcImpl$Subsetter: ucar.nc2.Variable mainv> = r3;

        return;
    }

    public ucar.ma2.Array reallyRead(ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        java.lang.IllegalStateException $r24;
        ucar.nc2.util.CancelTask r21;
        int[] $r6, r7;
        boolean $z0, $z1;
        ucar.ma2.Range $r18, $r19;
        ucar.ma2.DataType $r10;
        java.util.List $r8, $r13, $r14;
        ucar.ma2.Section $r12;
        ucar.nc2.dt.fmrc.FmrcImpl$Inventory r17;
        long $l8, $l10, $l11, $l12;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, i13;
        ucar.nc2.Variable $r3, $r5, $r9;
        java.lang.String $r4, $r25;
        ucar.nc2.dt.fmrc.FmrcImpl$Subsetter r0;
        org.slf4j.Logger $r23;
        java.util.Iterator $r15;
        ucar.ma2.Array $r11, $r20;
        ucar.ma2.InvalidRangeException $r22;
        java.lang.Object $r16;
        ucar.nc2.dataset.NetcdfDataset $r2;
        ucar.nc2.dt.fmrc.FmrcImpl $r1;

        r0 := @this: ucar.nc2.dt.fmrc.FmrcImpl$Subsetter;

        r21 := @parameter0: ucar.nc2.util.CancelTask;

        $r1 = r0.<ucar.nc2.dt.fmrc.FmrcImpl$Subsetter: ucar.nc2.dt.fmrc.FmrcImpl this$0>;

        $r2 = staticinvoke <ucar.nc2.dt.fmrc.FmrcImpl: ucar.nc2.dataset.NetcdfDataset access$500(ucar.nc2.dt.fmrc.FmrcImpl)>($r1);

        $r3 = r0.<ucar.nc2.dt.fmrc.FmrcImpl$Subsetter: ucar.nc2.Variable mainv>;

        $r4 = virtualinvoke $r3.<ucar.nc2.Variable: java.lang.String getNameEscaped()>();

        $r5 = virtualinvoke $r2.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<ucar.nc2.Variable: int[] getShape()>();

        $i0 = virtualinvoke $r5.<ucar.nc2.Variable: int getRank()>();

        i1 = $i0 - 1;

        r7 = newarray (int)[i1];

        $r8 = r0.<ucar.nc2.dt.fmrc.FmrcImpl$Subsetter: java.util.List invList>;

        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        r7[0] = $i2;

        $i3 = i1 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 2, r7, 1, $i3);

        $r9 = r0.<ucar.nc2.dt.fmrc.FmrcImpl$Subsetter: ucar.nc2.Variable mainv>;

        $r10 = virtualinvoke $r9.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r11 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r10, r7);

        i13 = 0;

        $r12 = new ucar.ma2.Section;

        $r13 = virtualinvoke $r5.<ucar.nc2.Variable: java.util.List getRanges()>();

        specialinvoke $r12.<ucar.ma2.Section: void <init>(java.util.List)>($r13);

        $r14 = r0.<ucar.nc2.dt.fmrc.FmrcImpl$Subsetter: java.util.List invList>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (ucar.nc2.dt.fmrc.FmrcImpl$Inventory) $r16;

     label2:
        $r18 = new ucar.ma2.Range;

        $i5 = r17.<ucar.nc2.dt.fmrc.FmrcImpl$Inventory: int run>;

        $i4 = r17.<ucar.nc2.dt.fmrc.FmrcImpl$Inventory: int run>;

        specialinvoke $r18.<ucar.ma2.Range: void <init>(int,int)>($i5, $i4);

        virtualinvoke $r12.<ucar.ma2.Section: ucar.ma2.Section setRange(int,ucar.ma2.Range)>(0, $r18);

        $r19 = new ucar.ma2.Range;

        $i7 = r17.<ucar.nc2.dt.fmrc.FmrcImpl$Inventory: int time>;

        $i6 = r17.<ucar.nc2.dt.fmrc.FmrcImpl$Inventory: int time>;

        specialinvoke $r19.<ucar.ma2.Range: void <init>(int,int)>($i7, $i6);

        virtualinvoke $r12.<ucar.ma2.Section: ucar.ma2.Section setRange(int,ucar.ma2.Range)>(1, $r19);

        $r20 = virtualinvoke $r5.<ucar.nc2.Variable: ucar.ma2.Array read(ucar.ma2.Section)>($r12);

     label3:
        goto label5;

     label4:
        $r22 := @caughtexception;

        $r23 = staticinvoke <ucar.nc2.dt.fmrc.FmrcImpl: org.slf4j.Logger access$600()>();

        interfaceinvoke $r23.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("read failed", $r22);

        $r24 = new java.lang.IllegalStateException;

        $r25 = virtualinvoke $r22.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label5:
        $l8 = virtualinvoke $r20.<ucar.ma2.Array: long getSize()>();

        $i9 = (int) $l8;

        staticinvoke <ucar.ma2.Array: void arraycopy(ucar.ma2.Array,int,ucar.ma2.Array,int,int)>($r20, 0, $r11, i13, $i9);

        $l10 = (long) i13;

        $l11 = virtualinvoke $r20.<ucar.ma2.Array: long getSize()>();

        $l12 = $l10 + $l11;

        i13 = (int) $l12;

        if r21 == null goto label6;

        $z1 = interfaceinvoke r21.<ucar.nc2.util.CancelTask: boolean isCancel()>();

        if $z1 == 0 goto label6;

        return null;

     label6:
        goto label1;

     label7:
        return $r11;

        catch ucar.ma2.InvalidRangeException from label2 to label3 with label4;
    }

    public ucar.ma2.Array reallyRead(ucar.ma2.Section, ucar.nc2.util.CancelTask) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        java.lang.IllegalStateException $r26;
        ucar.nc2.util.CancelTask r22;
        byte $b2;
        int[] $r10;
        boolean $z0, $z1;
        ucar.ma2.Range $r12, $r19, $r20;
        ucar.ma2.DataType $r9;
        java.util.List $r14, $r16;
        ucar.ma2.Section r0;
        ucar.nc2.dt.fmrc.FmrcImpl$Inventory r18;
        long $l0, $l1, $l8, $l10, $l11, $l12;
        java.util.ArrayList $r13;
        int $i3, $i4, $i5, $i6, $i7, $i9, i13;
        ucar.nc2.Variable $r2, $r5, $r7, $r8;
        java.lang.String $r6;
        ucar.nc2.dt.fmrc.FmrcImpl$Subsetter r1;
        org.slf4j.Logger $r25;
        ucar.ma2.Array $r11, $r21, $r23;
        ucar.ma2.InvalidRangeException $r24;
        ucar.ma2.Range$Iterator $r15;
        java.lang.Object $r17;
        ucar.nc2.dataset.NetcdfDataset $r4;
        ucar.nc2.dt.fmrc.FmrcImpl $r3;

        r1 := @this: ucar.nc2.dt.fmrc.FmrcImpl$Subsetter;

        r0 := @parameter0: ucar.ma2.Section;

        r22 := @parameter1: ucar.nc2.util.CancelTask;

        $l0 = virtualinvoke r0.<ucar.ma2.Section: long computeSize()>();

        $r2 = r1.<ucar.nc2.dt.fmrc.FmrcImpl$Subsetter: ucar.nc2.Variable mainv>;

        $l1 = virtualinvoke $r2.<ucar.nc2.Variable: long getSize()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $r23 = virtualinvoke r1.<ucar.nc2.dt.fmrc.FmrcImpl$Subsetter: ucar.ma2.Array reallyRead(ucar.nc2.util.CancelTask)>(r22);

        return $r23;

     label1:
        $r3 = r1.<ucar.nc2.dt.fmrc.FmrcImpl$Subsetter: ucar.nc2.dt.fmrc.FmrcImpl this$0>;

        $r4 = staticinvoke <ucar.nc2.dt.fmrc.FmrcImpl: ucar.nc2.dataset.NetcdfDataset access$500(ucar.nc2.dt.fmrc.FmrcImpl)>($r3);

        $r5 = r1.<ucar.nc2.dt.fmrc.FmrcImpl$Subsetter: ucar.nc2.Variable mainv>;

        $r6 = virtualinvoke $r5.<ucar.nc2.Variable: java.lang.String getNameEscaped()>();

        $r7 = virtualinvoke $r4.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r6);

        $r8 = r1.<ucar.nc2.dt.fmrc.FmrcImpl$Subsetter: ucar.nc2.Variable mainv>;

        $r9 = virtualinvoke $r8.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke r0.<ucar.ma2.Section: int[] getShape()>();

        $r11 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r9, $r10);

        i13 = 0;

        $r12 = virtualinvoke r0.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(0);

        $r13 = new java.util.ArrayList;

        $r14 = virtualinvoke r0.<ucar.ma2.Section: java.util.List getRanges()>();

        specialinvoke $r13.<java.util.ArrayList: void <init>(java.util.Collection)>($r14);

        interfaceinvoke $r13.<java.util.List: void add(int,java.lang.Object)>(0, null);

        $r15 = virtualinvoke $r12.<ucar.ma2.Range: ucar.ma2.Range$Iterator getIterator()>();

     label2:
        $z0 = virtualinvoke $r15.<ucar.ma2.Range$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $i3 = virtualinvoke $r15.<ucar.ma2.Range$Iterator: int next()>();

        $r16 = r1.<ucar.nc2.dt.fmrc.FmrcImpl$Subsetter: java.util.List invList>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>($i3);

        r18 = (ucar.nc2.dt.fmrc.FmrcImpl$Inventory) $r17;

     label3:
        $r19 = new ucar.ma2.Range;

        $i5 = r18.<ucar.nc2.dt.fmrc.FmrcImpl$Inventory: int run>;

        $i4 = r18.<ucar.nc2.dt.fmrc.FmrcImpl$Inventory: int run>;

        specialinvoke $r19.<ucar.ma2.Range: void <init>(int,int)>($i5, $i4);

        interfaceinvoke $r13.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, $r19);

        $r20 = new ucar.ma2.Range;

        $i7 = r18.<ucar.nc2.dt.fmrc.FmrcImpl$Inventory: int time>;

        $i6 = r18.<ucar.nc2.dt.fmrc.FmrcImpl$Inventory: int time>;

        specialinvoke $r20.<ucar.ma2.Range: void <init>(int,int)>($i7, $i6);

        interfaceinvoke $r13.<java.util.List: java.lang.Object set(int,java.lang.Object)>(1, $r20);

        $r21 = virtualinvoke $r7.<ucar.nc2.Variable: ucar.ma2.Array read(java.util.List)>($r13);

     label4:
        goto label6;

     label5:
        $r24 := @caughtexception;

        $r25 = staticinvoke <ucar.nc2.dt.fmrc.FmrcImpl: org.slf4j.Logger access$600()>();

        interfaceinvoke $r25.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("readSection failed", $r24);

        $r26 = new java.lang.IllegalStateException;

        specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("read failed", $r24);

        throw $r26;

     label6:
        $l8 = virtualinvoke $r21.<ucar.ma2.Array: long getSize()>();

        $i9 = (int) $l8;

        staticinvoke <ucar.ma2.Array: void arraycopy(ucar.ma2.Array,int,ucar.ma2.Array,int,int)>($r21, 0, $r11, i13, $i9);

        $l10 = (long) i13;

        $l11 = virtualinvoke $r21.<ucar.ma2.Array: long getSize()>();

        $l12 = $l10 + $l11;

        i13 = (int) $l12;

        if r22 == null goto label7;

        $z1 = interfaceinvoke r22.<ucar.nc2.util.CancelTask: boolean isCancel()>();

        if $z1 == 0 goto label7;

        return null;

     label7:
        goto label2;

     label8:
        return $r11;

        catch ucar.ma2.InvalidRangeException from label3 to label4 with label5;
    }
}
