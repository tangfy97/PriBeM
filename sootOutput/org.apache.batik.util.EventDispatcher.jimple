public class org.apache.batik.util.EventDispatcher extends java.lang.Object
{

    public void <init>()
    {
        org.apache.batik.util.EventDispatcher r0;

        r0 := @this: org.apache.batik.util.EventDispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void fireEvent(org.apache.batik.util.EventDispatcher$Dispatcher, java.util.List, java.lang.Object, boolean)
    {
        java.lang.Throwable $r4, $r5, $r6, r11;
        java.lang.Object[] r10;
        int $i0, i1, $i3;
        boolean z0, $z1;
        org.apache.batik.util.EventDispatcher$Dispatcher r1;
        java.lang.ThreadDeath $r7;
        java.lang.reflect.InvocationTargetException $r9;
        java.util.List r0;
        java.lang.InterruptedException $r8;
        org.apache.batik.util.EventDispatcher$1 $r12;
        java.lang.Object r2;

        r1 := @parameter0: org.apache.batik.util.EventDispatcher$Dispatcher;

        r0 := @parameter1: java.util.List;

        r2 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label08;

        $z1 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z1 != 0 goto label08;

        $r12 = new org.apache.batik.util.EventDispatcher$1;

        specialinvoke $r12.<org.apache.batik.util.EventDispatcher$1: void <init>(org.apache.batik.util.EventDispatcher$Dispatcher,java.util.List,java.lang.Object,boolean)>(r1, r0, r2, z0);

     label01:
        staticinvoke <java.awt.EventQueue: void invokeAndWait(java.lang.Runnable)>($r12);

     label02:
        goto label07;

     label03:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.reflect.InvocationTargetException: void printStackTrace()>();

        goto label07;

     label04:
        $r8 := @caughtexception;

        goto label07;

     label05:
        $r7 := @caughtexception;

        throw $r7;

     label06:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void printStackTrace()>();

     label07:
        return;

     label08:
        r10 = null;

        r11 = null;

        i1 = 10;

        goto label14;

     label09:
        entermonitor r0;

     label10:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label11;

        exitmonitor r0;

        return;

     label11:
        r10 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray()>();

        exitmonitor r0;

        goto label15;

     label12:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

     label13:
        $r4 := @caughtexception;

        r11 = $r4;

     label14:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        if i1 != 0 goto label09;

     label15:
        if r10 != null goto label17;

        if r11 == null goto label16;

        virtualinvoke r11.<java.lang.Throwable: void printStackTrace()>();

     label16:
        return;

     label17:
        staticinvoke <org.apache.batik.util.EventDispatcher: void dispatchEvent(org.apache.batik.util.EventDispatcher$Dispatcher,java.lang.Object[],java.lang.Object)>(r1, r10, r2);

        return;

        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label03;
        catch java.lang.InterruptedException from label01 to label02 with label04;
        catch java.lang.ThreadDeath from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label10 to label12 with label12;
        catch java.lang.Throwable from label09 to label13 with label13;
    }

    protected static void dispatchEvent(org.apache.batik.util.EventDispatcher$Dispatcher, java.lang.Object[], java.lang.Object)
    {
        java.lang.Throwable $r3, $r6, $r8;
        java.lang.Object[] r0;
        java.lang.ThreadDeath $r5, $r7, r9;
        int $i0, $i1, i2, $i3;
        java.lang.Object r2, $r4, r10;
        org.apache.batik.util.EventDispatcher$Dispatcher r1;

        r1 := @parameter0: org.apache.batik.util.EventDispatcher$Dispatcher;

        r0 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.Object;

        r9 = null;

     label01:
        i2 = 0;

        goto label11;

     label02:
        entermonitor r0;

     label03:
        r10 = r0[i2];

        if r10 != null goto label04;

        exitmonitor r0;

        goto label10;

     label04:
        r0[i2] = null;

        exitmonitor r0;

        goto label06;

     label05:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

     label06:
        interfaceinvoke r1.<org.apache.batik.util.EventDispatcher$Dispatcher: void dispatch(java.lang.Object,java.lang.Object)>(r10, r2);

     label07:
        goto label10;

     label08:
        $r7 := @caughtexception;

        r9 = $r7;

        goto label10;

     label09:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void printStackTrace()>();

     label10:
        i2 = i2 + 1;

     label11:
        $i3 = lengthof r0;

        if i2 < $i3 goto label02;

     label12:
        goto label16;

     label13:
        $r5 := @caughtexception;

        r9 = $r5;

        goto label16;

     label14:
        $r3 := @caughtexception;

        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        $r4 = r0[$i1];

        if $r4 == null goto label15;

        staticinvoke <org.apache.batik.util.EventDispatcher: void dispatchEvent(org.apache.batik.util.EventDispatcher$Dispatcher,java.lang.Object[],java.lang.Object)>(r1, r0, r2);

     label15:
        virtualinvoke $r3.<java.lang.Throwable: void printStackTrace()>();

     label16:
        if r9 == null goto label17;

        throw r9;

     label17:
        return;

        catch java.lang.Throwable from label03 to label05 with label05;
        catch java.lang.ThreadDeath from label02 to label07 with label08;
        catch java.lang.Throwable from label02 to label07 with label09;
        catch java.lang.ThreadDeath from label01 to label12 with label13;
        catch java.lang.Throwable from label01 to label12 with label14;
    }
}
