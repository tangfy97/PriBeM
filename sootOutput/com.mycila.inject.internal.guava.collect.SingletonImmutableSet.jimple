final class com.mycila.inject.internal.guava.collect.SingletonImmutableSet extends com.mycila.inject.internal.guava.collect.ImmutableSet
{
    final transient java.lang.Object element;
    private transient java.lang.Integer cachedHashCode;

    void <init>(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet r0;
        java.lang.Object r1, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSet: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: java.lang.Object element> = $r2;

        return;
    }

    void <init>(java.lang.Object, int)
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet r0;
        int i0;
        java.lang.Object r1;
        java.lang.Integer $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSet: void <init>()>();

        r0.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: java.lang.Object element> = r1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: java.lang.Integer cachedHashCode> = $r2;

        return;
    }

    public int size()
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        return 1;
    }

    public boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        return 0;
    }

    public boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: java.lang.Object element>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet r0;
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: java.lang.Object element>;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: com.mycila.inject.internal.guava.collect.UnmodifiableIterator singletonIterator(java.lang.Object)>($r1);

        return $r2;
    }

    boolean isPartialView()
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        return 0;
    }

    public java.lang.Object[] toArray()
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet r1;
        java.lang.Object $r2;
        java.lang.Object[] $r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        $r0 = newarray (java.lang.Object)[1];

        $r2 = r1.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: java.lang.Object element>;

        $r0[0] = $r2;

        return $r0;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet r0;
        java.lang.Object[] r1;
        int $i0, $i1;
        java.lang.Object $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        r1 := @parameter0: java.lang.Object[];

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        r1 = staticinvoke <com.mycila.inject.internal.guava.collect.ObjectArrays: java.lang.Object[] newArray(java.lang.Object[],int)>(r1, 1);

        goto label2;

     label1:
        $i1 = lengthof r1;

        if $i1 <= 1 goto label2;

        r1[1] = null;

     label2:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: java.lang.Object element>;

        r1[0] = $r2;

        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet r1;
        java.util.Iterator $r4;
        java.util.Set r2;
        int $i0;
        java.lang.Object r0, $r3, $r5;
        boolean $z0, $z1, $z2;

        r1 := @this: com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof java.util.Set;

        if $z0 == 0 goto label4;

        r2 = (java.util.Set) r0;

        $i0 = interfaceinvoke r2.<java.util.Set: int size()>();

        if $i0 != 1 goto label2;

        $r3 = r1.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: java.lang.Object element>;

        $r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        return 0;
    }

    public final int hashCode()
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet r0;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        java.lang.Integer r1, $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        r1 = r0.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: java.lang.Integer cachedHashCode>;

        if r1 != null goto label1;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: java.lang.Object element>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        r0.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: java.lang.Integer cachedHashCode> = $r3;

        $i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i2;

     label1:
        $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    boolean isHashCodeFast()
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        return 0;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet r0;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r2, $r7;

        r0 := @this: com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: java.lang.Object element>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = new java.lang.StringBuilder;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = $i0 + 2;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public volatile java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet r0;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }
}
