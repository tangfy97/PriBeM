final class org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode extends org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderBase
{
    private boolean _wholeDoc;
    private boolean _done;
    private org.apache.xmlbeans.impl.store.Cur _cur;
    private org.apache.xmlbeans.impl.store.Cur _end;
    private boolean _srcFetched;
    private java.lang.Object _src;
    private int _offSrc;
    private int _cchSrc;
    private boolean _textFetched;
    private char[] _chars;
    private int _offChars;
    private int _cchChars;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.xmlbeans.impl.store.Cur, boolean)
    {
        javax.xml.stream.XMLStreamException $r20;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        org.apache.xmlbeans.impl.store.Cur r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.AssertionError $r7, $r18, $r19;
        java.lang.String $r22;
        java.lang.RuntimeException $r21;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        r1 := @parameter0: org.apache.xmlbeans.impl.store.Cur;

        z1 := @parameter1: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderBase: void <init>(org.apache.xmlbeans.impl.store.Cur)>(r1);

        $z0 = <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z11 = virtualinvoke r1.<org.apache.xmlbeans.impl.store.Cur: boolean isContainer()>();

        if $z11 != 0 goto label01;

        $z12 = virtualinvoke r1.<org.apache.xmlbeans.impl.store.Cur: boolean isComment()>();

        if $z12 != 0 goto label01;

        $z13 = virtualinvoke r1.<org.apache.xmlbeans.impl.store.Cur: boolean isProcinst()>();

        if $z13 != 0 goto label01;

        $z14 = virtualinvoke r1.<org.apache.xmlbeans.impl.store.Cur: boolean isAttr()>();

        if $z14 != 0 goto label01;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label01:
        if z1 == 0 goto label04;

        $z8 = <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean $assertionsDisabled>;

        if $z8 != 0 goto label02;

        $z10 = virtualinvoke r1.<org.apache.xmlbeans.impl.store.Cur: boolean isContainer()>();

        if $z10 != 0 goto label02;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label02:
        $r13 = virtualinvoke r1.<org.apache.xmlbeans.impl.store.Cur: org.apache.xmlbeans.impl.store.Cur weakCur(java.lang.Object)>(r0);

        r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur> = $r13;

        $r14 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $z9 = virtualinvoke $r14.<org.apache.xmlbeans.impl.store.Cur: boolean toFirstAttr()>();

        if $z9 != 0 goto label03;

        $r17 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        virtualinvoke $r17.<org.apache.xmlbeans.impl.store.Cur: boolean next()>();

     label03:
        $r15 = virtualinvoke r1.<org.apache.xmlbeans.impl.store.Cur: org.apache.xmlbeans.impl.store.Cur weakCur(java.lang.Object)>(r0);

        r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _end> = $r15;

        $r16 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _end>;

        virtualinvoke $r16.<org.apache.xmlbeans.impl.store.Cur: void toEnd()>();

        goto label07;

     label04:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.store.Cur: org.apache.xmlbeans.impl.store.Cur weakCur(java.lang.Object)>(r0);

        r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur> = $r2;

        $z2 = virtualinvoke r1.<org.apache.xmlbeans.impl.store.Cur: boolean isRoot()>();

        if $z2 == 0 goto label05;

        r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _wholeDoc> = 1;

        goto label07;

     label05:
        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.store.Cur: org.apache.xmlbeans.impl.store.Cur weakCur(java.lang.Object)>(r0);

        r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _end> = $r3;

        $z3 = virtualinvoke r1.<org.apache.xmlbeans.impl.store.Cur: boolean isAttr()>();

        if $z3 == 0 goto label06;

        $r10 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _end>;

        $z7 = virtualinvoke $r10.<org.apache.xmlbeans.impl.store.Cur: boolean toNextAttr()>();

        if $z7 != 0 goto label07;

        $r11 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _end>;

        virtualinvoke $r11.<org.apache.xmlbeans.impl.store.Cur: boolean toParent()>();

        $r12 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _end>;

        virtualinvoke $r12.<org.apache.xmlbeans.impl.store.Cur: boolean next()>();

        goto label07;

     label06:
        $r4 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _end>;

        virtualinvoke $r4.<org.apache.xmlbeans.impl.store.Cur: boolean skip()>();

     label07:
        $z15 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _wholeDoc>;

        if $z15 != 0 goto label12;

        $r8 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        virtualinvoke $r8.<org.apache.xmlbeans.impl.store.Cur: void push()>();

     label08:
        virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int next()>();

     label09:
        goto label11;

     label10:
        $r20 := @caughtexception;

        $r21 = new java.lang.RuntimeException;

        $r22 = virtualinvoke $r20.<javax.xml.stream.XMLStreamException: java.lang.String getMessage()>();

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r22, $r20);

        throw $r21;

     label11:
        $r9 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        virtualinvoke $r9.<org.apache.xmlbeans.impl.store.Cur: boolean pop()>();

     label12:
        $z4 = <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean $assertionsDisabled>;

        if $z4 != 0 goto label13;

        $z5 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _wholeDoc>;

        if $z5 != 0 goto label13;

        $r6 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r5 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _end>;

        $z6 = virtualinvoke $r6.<org.apache.xmlbeans.impl.store.Cur: boolean isSamePos(org.apache.xmlbeans.impl.store.Cur)>($r5);

        if $z6 == 0 goto label13;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label13:
        return;

        catch javax.xml.stream.XMLStreamException from label08 to label09 with label10;
    }

    protected org.apache.xmlbeans.impl.store.Cur getStreamCur()
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        org.apache.xmlbeans.impl.store.Cur $r1;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        return $r1;
    }

    public boolean hasNext() throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: void checkChanged()>();

        $z0 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _done>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int getEventType()
    {
        java.lang.IllegalStateException $r3;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        byte $b1;
        int $i0;
        org.apache.xmlbeans.impl.store.Cur $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $i0 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: int kind()>();

        tableswitch($i0)
        {
            case -2: goto label04;
            case -1: goto label02;
            case 0: goto label08;
            case 1: goto label01;
            case 2: goto label03;
            case 3: goto label05;
            case 4: goto label09;
            case 5: goto label10;
            default: goto label11;
        };

     label01:
        return 7;

     label02:
        return 8;

     label03:
        return 1;

     label04:
        return 2;

     label05:
        $r2 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $z0 = virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: boolean isXmlns()>();

        if $z0 == 0 goto label06;

        $b1 = 13;

        goto label07;

     label06:
        $b1 = 10;

     label07:
        return $b1;

     label08:
        return 4;

     label09:
        return 5;

     label10:
        return 3;

     label11:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;
    }

    public int next() throws javax.xml.stream.XMLStreamException
    {
        java.lang.IllegalStateException $r16;
        java.lang.AssertionError $r17, $r18;
        int $i0, $i1, $i2, $i4, $i6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        org.apache.xmlbeans.impl.store.Cur $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: void checkChanged()>();

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean hasNext()>();

        if $z0 != 0 goto label01;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No next event in stream");

        throw $r16;

     label01:
        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $i0 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: int kind()>();

        $i4 = (int) -1;

        if $i0 != $i4 goto label03;

        $z4 = <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean $assertionsDisabled>;

        if $z4 != 0 goto label02;

        $z5 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _wholeDoc>;

        if $z5 != 0 goto label02;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label02:
        r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _done> = 1;

        goto label13;

     label03:
        if $i0 != 3 goto label04;

        $r11 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $z3 = virtualinvoke $r11.<org.apache.xmlbeans.impl.store.Cur: boolean toNextAttr()>();

        if $z3 != 0 goto label08;

        $r12 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        virtualinvoke $r12.<org.apache.xmlbeans.impl.store.Cur: boolean toParent()>();

        $r13 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        virtualinvoke $r13.<org.apache.xmlbeans.impl.store.Cur: boolean next()>();

        goto label08;

     label04:
        if $i0 == 4 goto label05;

        if $i0 != 5 goto label06;

     label05:
        $r2 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: boolean skip()>();

        goto label08;

     label06:
        if $i0 != 1 goto label07;

        $r9 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $z2 = virtualinvoke $r9.<org.apache.xmlbeans.impl.store.Cur: boolean toFirstAttr()>();

        if $z2 != 0 goto label08;

        $r10 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        virtualinvoke $r10.<org.apache.xmlbeans.impl.store.Cur: boolean next()>();

        goto label08;

     label07:
        $r8 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        virtualinvoke $r8.<org.apache.xmlbeans.impl.store.Cur: boolean next()>();

     label08:
        $z6 = <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean $assertionsDisabled>;

        if $z6 != 0 goto label09;

        $z1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _wholeDoc>;

        if $z1 != 0 goto label09;

        $r6 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _end>;

        if $r6 != null goto label09;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label09:
        $z7 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _wholeDoc>;

        if $z7 == 0 goto label11;

        $r5 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $i1 = virtualinvoke $r5.<org.apache.xmlbeans.impl.store.Cur: int kind()>();

        $i6 = (int) -1;

        if $i1 != $i6 goto label10;

        $z8 = 1;

        goto label12;

     label10:
        $z8 = 0;

        goto label12;

     label11:
        $r4 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r3 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _end>;

        $z8 = virtualinvoke $r4.<org.apache.xmlbeans.impl.store.Cur: boolean isSamePos(org.apache.xmlbeans.impl.store.Cur)>($r3);

     label12:
        r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _done> = $z8;

     label13:
        r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _textFetched> = 0;

        r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _srcFetched> = 0;

        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int getEventType()>();

        return $i2;
    }

    public java.lang.String getText()
    {
        java.lang.IllegalStateException $r7;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int $i0, $i2;
        java.lang.String $r4, $r6;
        org.apache.xmlbeans.impl.store.Cur $r1, $r3, $r5;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: void checkChanged()>();

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $i0 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: int kind()>();

        if $i0 != 4 goto label1;

        $r5 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.store.Cur: java.lang.String getValueAsString()>();

        return $r6;

     label1:
        if $i0 != 0 goto label2;

        $r3 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $i2 = (int) -1;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.store.Cur: java.lang.String getCharsAsString(int)>($i2);

        return $r4;

     label2:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;
    }

    public boolean isStartElement()
    {
        int $i0;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int getEventType()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isEndElement()
    {
        int $i0;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int getEventType()>();

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isCharacters()
    {
        int $i0;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int getEventType()>();

        if $i0 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getElementText() throws javax.xml.stream.XMLStreamException
    {
        java.lang.IllegalStateException $r6;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        java.lang.StringBuffer $r1;
        javax.xml.stream.XMLStreamException $r3, $r5;
        int $i0;
        java.lang.String $r2, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: void checkChanged()>();

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean isStartElement()>();

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

     label2:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $r5 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r5.<javax.xml.stream.XMLStreamException: void <init>()>();

        throw $r5;

     label3:
        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int next()>();

        if $i0 != 2 goto label4;

        goto label7;

     label4:
        if $i0 != 1 goto label5;

        $r3 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r3.<javax.xml.stream.XMLStreamException: void <init>()>();

        throw $r3;

     label5:
        if $i0 == 5 goto label6;

        if $i0 == 3 goto label6;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: java.lang.String getText()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label6:
        goto label2;

     label7:
        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public int nextTag() throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        javax.xml.stream.XMLStreamException $r1, $r2;
        int $i0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: void checkChanged()>();

     label1:
        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean isStartElement()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean isEndElement()>();

        if $z1 == 0 goto label3;

     label2:
        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int getEventType()>();

        return $i0;

     label3:
        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean isWhiteSpace()>();

        if $z2 != 0 goto label4;

        $r2 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r2.<javax.xml.stream.XMLStreamException: void <init>()>();

        throw $r2;

     label4:
        $z3 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean hasNext()>();

        if $z3 != 0 goto label5;

        $r1 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r1.<javax.xml.stream.XMLStreamException: void <init>()>();

        throw $r1;

     label5:
        virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int next()>();

        goto label1;
    }

    private static boolean matchAttr(org.apache.xmlbeans.impl.store.Cur, java.lang.String, java.lang.String)
    {
        java.lang.AssertionError $r6;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2, r3, r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.xmlbeans.impl.store.Cur r0;

        r0 := @parameter0: org.apache.xmlbeans.impl.store.Cur;

        r4 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $z0 = <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z3 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Cur: boolean isNormalAttr()>();

        if $z3 != 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Cur: javax.xml.namespace.QName getName()>();

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label3;

        if r4 == null goto label2;

        $r5 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    private static org.apache.xmlbeans.impl.store.Cur toAttr(org.apache.xmlbeans.impl.store.Cur, java.lang.String, java.lang.String)
    {
        java.lang.IllegalStateException $r4;
        java.lang.IllegalArgumentException $r5;
        int $i0;
        java.lang.String r0, r1;
        org.apache.xmlbeans.impl.store.Cur r2, $r3, r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;

        r2 := @parameter0: org.apache.xmlbeans.impl.store.Cur;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label2:
        $r3 = virtualinvoke r2.<org.apache.xmlbeans.impl.store.Cur: org.apache.xmlbeans.impl.store.Cur tempCur()>();

        r6 = $r3;

        z6 = 0;

        $z0 = virtualinvoke r2.<org.apache.xmlbeans.impl.store.Cur: boolean isElem()>();

        if $z0 == 0 goto label5;

        $z2 = virtualinvoke $r3.<org.apache.xmlbeans.impl.store.Cur: boolean toFirstAttr()>();

        if $z2 == 0 goto label7;

     label3:
        $z3 = virtualinvoke $r3.<org.apache.xmlbeans.impl.store.Cur: boolean isNormalAttr()>();

        if $z3 == 0 goto label4;

        $z5 = staticinvoke <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean matchAttr(org.apache.xmlbeans.impl.store.Cur,java.lang.String,java.lang.String)>($r3, r0, r1);

        if $z5 == 0 goto label4;

        z6 = 1;

        goto label7;

     label4:
        $z4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.store.Cur: boolean toNextSibling()>();

        if $z4 != 0 goto label3;

        goto label7;

     label5:
        $z1 = virtualinvoke r2.<org.apache.xmlbeans.impl.store.Cur: boolean isNormalAttr()>();

        if $z1 == 0 goto label6;

        z6 = staticinvoke <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean matchAttr(org.apache.xmlbeans.impl.store.Cur,java.lang.String,java.lang.String)>(r2, r0, r1);

        goto label7;

     label6:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label7:
        if z6 != 0 goto label8;

        virtualinvoke $r3.<org.apache.xmlbeans.impl.store.Cur: void release()>();

        r6 = null;

     label8:
        return r6;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        java.lang.String r1, r2, r5;
        org.apache.xmlbeans.impl.store.Cur $r3, $r4;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r4 = staticinvoke <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur toAttr(org.apache.xmlbeans.impl.store.Cur,java.lang.String,java.lang.String)>($r3, r1, r2);

        r5 = null;

        if $r4 == null goto label1;

        r5 = virtualinvoke $r4.<org.apache.xmlbeans.impl.store.Cur: java.lang.String getValueAsString()>();

        virtualinvoke $r4.<org.apache.xmlbeans.impl.store.Cur: void release()>();

     label1:
        return r5;
    }

    private static org.apache.xmlbeans.impl.store.Cur toAttr(org.apache.xmlbeans.impl.store.Cur, int)
    {
        java.lang.IndexOutOfBoundsException $r5, $r7;
        java.lang.IllegalStateException $r6;
        int $i0, i1, $i3;
        org.apache.xmlbeans.impl.store.Cur r0, $r1;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6;

        r0 := @parameter0: org.apache.xmlbeans.impl.store.Cur;

        i1 := @parameter1: int;

        if i1 >= 0 goto label1;

        $r5 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Attribute index is negative");

        throw $r5;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Cur: org.apache.xmlbeans.impl.store.Cur tempCur()>();

        z5 = 0;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Cur: boolean isElem()>();

        if $z0 == 0 goto label4;

        $z2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: boolean toFirstAttr()>();

        if $z2 == 0 goto label8;

     label2:
        $z3 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: boolean isNormalAttr()>();

        if $z3 == 0 goto label3;

        $i0 = i1;

        $i3 = (int) -1;

        i1 = i1 + $i3;

        if $i0 != 0 goto label3;

        z5 = 1;

        goto label8;

     label3:
        $z4 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: boolean toNextSibling()>();

        if $z4 != 0 goto label2;

        goto label8;

     label4:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Cur: boolean isNormalAttr()>();

        if $z1 == 0 goto label7;

        if i1 != 0 goto label5;

        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        z5 = $z6;

        goto label8;

     label7:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label8:
        if z5 != 0 goto label9;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: void release()>();

        $r7 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Attribute index is too large");

        throw $r7;

     label9:
        return $r1;
    }

    public int getAttributeCount()
    {
        java.lang.IllegalStateException $r3;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int i0;
        org.apache.xmlbeans.impl.store.Cur $r1, $r2, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        i0 = 0;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $z0 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: boolean isElem()>();

        if $z0 == 0 goto label4;

        $r4 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r5 = virtualinvoke $r4.<org.apache.xmlbeans.impl.store.Cur: org.apache.xmlbeans.impl.store.Cur tempCur()>();

        $z2 = virtualinvoke $r5.<org.apache.xmlbeans.impl.store.Cur: boolean toFirstAttr()>();

        if $z2 == 0 goto label3;

     label1:
        $z3 = virtualinvoke $r5.<org.apache.xmlbeans.impl.store.Cur: boolean isNormalAttr()>();

        if $z3 == 0 goto label2;

        i0 = i0 + 1;

     label2:
        $z4 = virtualinvoke $r5.<org.apache.xmlbeans.impl.store.Cur: boolean toNextSibling()>();

        if $z4 != 0 goto label1;

     label3:
        virtualinvoke $r5.<org.apache.xmlbeans.impl.store.Cur: void release()>();

        goto label6;

     label4:
        $r2 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $z1 = virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: boolean isNormalAttr()>();

        if $z1 == 0 goto label5;

        i0 = 1;

        goto label6;

     label5:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label6:
        return i0;
    }

    public javax.xml.namespace.QName getAttributeName(int)
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int i0;
        javax.xml.namespace.QName $r3;
        org.apache.xmlbeans.impl.store.Cur $r1, $r2;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur toAttr(org.apache.xmlbeans.impl.store.Cur,int)>($r1, i0);

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: javax.xml.namespace.QName getName()>();

        virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: void release()>();

        return $r3;
    }

    public java.lang.String getAttributeNamespace(int)
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int i0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: javax.xml.namespace.QName getAttributeName(int)>(i0);

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        return $r2;
    }

    public java.lang.String getAttributeLocalName(int)
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int i0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: javax.xml.namespace.QName getAttributeName(int)>(i0);

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        return $r2;
    }

    public java.lang.String getAttributePrefix(int)
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int i0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: javax.xml.namespace.QName getAttributeName(int)>(i0);

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        return $r2;
    }

    public java.lang.String getAttributeType(int)
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int i0;
        org.apache.xmlbeans.impl.store.Cur $r1, $r2;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur toAttr(org.apache.xmlbeans.impl.store.Cur,int)>($r1, i0);

        virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: void release()>();

        return "CDATA";
    }

    public java.lang.String getAttributeValue(int)
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int i0;
        java.lang.String r3;
        org.apache.xmlbeans.impl.store.Cur $r1, $r2;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur toAttr(org.apache.xmlbeans.impl.store.Cur,int)>($r1, i0);

        r3 = null;

        if $r2 == null goto label1;

        r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: java.lang.String getValueAsString()>();

        virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: void release()>();

     label1:
        return r3;
    }

    public boolean isAttributeSpecified(int)
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int i0;
        org.apache.xmlbeans.impl.store.Cur $r1, $r2;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur toAttr(org.apache.xmlbeans.impl.store.Cur,int)>($r1, i0);

        virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: void release()>();

        return 0;
    }

    public int getNamespaceCount()
    {
        java.lang.IllegalStateException $r8;
        int $i0, $i1, i2, $i4, $i6;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        org.apache.xmlbeans.impl.store.Cur $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        i2 = 0;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $z0 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: boolean isElem()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $i1 = virtualinvoke $r5.<org.apache.xmlbeans.impl.store.Cur: int kind()>();

        $i4 = (int) -2;

        if $i1 != $i4 goto label6;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: org.apache.xmlbeans.impl.store.Cur tempCur()>();

        $r4 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $i0 = virtualinvoke $r4.<org.apache.xmlbeans.impl.store.Cur: int kind()>();

        $i6 = (int) -2;

        if $i0 != $i6 goto label2;

        virtualinvoke $r3.<org.apache.xmlbeans.impl.store.Cur: boolean toParent()>();

     label2:
        $z1 = virtualinvoke $r3.<org.apache.xmlbeans.impl.store.Cur: boolean toFirstAttr()>();

        if $z1 == 0 goto label5;

     label3:
        $z2 = virtualinvoke $r3.<org.apache.xmlbeans.impl.store.Cur: boolean isXmlns()>();

        if $z2 == 0 goto label4;

        i2 = i2 + 1;

     label4:
        $z3 = virtualinvoke $r3.<org.apache.xmlbeans.impl.store.Cur: boolean toNextSibling()>();

        if $z3 != 0 goto label3;

     label5:
        virtualinvoke $r3.<org.apache.xmlbeans.impl.store.Cur: void release()>();

        goto label8;

     label6:
        $r6 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $z4 = virtualinvoke $r6.<org.apache.xmlbeans.impl.store.Cur: boolean isXmlns()>();

        if $z4 == 0 goto label7;

        i2 = 1;

        goto label8;

     label7:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label8:
        return i2;
    }

    private static org.apache.xmlbeans.impl.store.Cur toXmlns(org.apache.xmlbeans.impl.store.Cur, int)
    {
        java.lang.IndexOutOfBoundsException $r5, $r7;
        java.lang.IllegalStateException $r6;
        int $i0, $i1, $i2, i3, $i5, $i7, $i9;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6;
        org.apache.xmlbeans.impl.store.Cur r0, $r1;

        r0 := @parameter0: org.apache.xmlbeans.impl.store.Cur;

        i3 := @parameter1: int;

        if i3 >= 0 goto label01;

        $r5 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Namespace index is negative");

        throw $r5;

     label01:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Cur: org.apache.xmlbeans.impl.store.Cur tempCur()>();

        z5 = 0;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Cur: boolean isElem()>();

        if $z0 != 0 goto label02;

        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Cur: int kind()>();

        $i5 = (int) -2;

        if $i2 != $i5 goto label06;

     label02:
        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Cur: int kind()>();

        $i7 = (int) -2;

        if $i0 != $i7 goto label03;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: boolean toParent()>();

     label03:
        $z1 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: boolean toFirstAttr()>();

        if $z1 == 0 goto label10;

     label04:
        $z2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: boolean isXmlns()>();

        if $z2 == 0 goto label05;

        $i1 = i3;

        $i9 = (int) -1;

        i3 = i3 + $i9;

        if $i1 != 0 goto label05;

        z5 = 1;

        goto label10;

     label05:
        $z3 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: boolean toNextSibling()>();

        if $z3 != 0 goto label04;

        goto label10;

     label06:
        $z4 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Cur: boolean isXmlns()>();

        if $z4 == 0 goto label09;

        if i3 != 0 goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        z5 = $z6;

        goto label10;

     label09:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label10:
        if z5 != 0 goto label11;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: void release()>();

        $r7 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Namespace index is too large");

        throw $r7;

     label11:
        return $r1;
    }

    public java.lang.String getNamespacePrefix(int)
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int i0;
        java.lang.String $r3;
        org.apache.xmlbeans.impl.store.Cur $r1, $r2;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur toXmlns(org.apache.xmlbeans.impl.store.Cur,int)>($r1, i0);

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: java.lang.String getXmlnsPrefix()>();

        virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: void release()>();

        return $r3;
    }

    public java.lang.String getNamespaceURI(int)
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int i0;
        java.lang.String $r3;
        org.apache.xmlbeans.impl.store.Cur $r1, $r2;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur toXmlns(org.apache.xmlbeans.impl.store.Cur,int)>($r1, i0);

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: java.lang.String getXmlnsUri()>();

        virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: void release()>();

        return $r3;
    }

    private void fetchChars()
    {
        java.lang.IllegalStateException $r9;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int $i0, $i1, $i2, $i3, $i5;
        char[] $r4;
        java.lang.Object $r3;
        boolean $z0;
        org.apache.xmlbeans.impl.store.Cur $r1, $r5, $r6, $r7, r8;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        $z0 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _textFetched>;

        if $z0 != 0 goto label5;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $i0 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: int kind()>();

        if $i0 != 4 goto label1;

        $r6 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r7 = virtualinvoke $r6.<org.apache.xmlbeans.impl.store.Cur: org.apache.xmlbeans.impl.store.Cur tempCur()>();

        r8 = $r7;

        virtualinvoke $r7.<org.apache.xmlbeans.impl.store.Cur: boolean next()>();

        goto label3;

     label1:
        if $i0 != 0 goto label2;

        r8 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        goto label3;

     label2:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>()>();

        throw $r9;

     label3:
        $i5 = (int) -1;

        $r3 = virtualinvoke r8.<org.apache.xmlbeans.impl.store.Cur: java.lang.Object getChars(int)>($i5);

        $i1 = r8.<org.apache.xmlbeans.impl.store.Cur: int _cchSrc>;

        specialinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: void ensureCharBufLen(int)>($i1);

        $r4 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: char[] _chars>;

        r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int _offChars> = 0;

        $i3 = r8.<org.apache.xmlbeans.impl.store.Cur: int _offSrc>;

        $i2 = r8.<org.apache.xmlbeans.impl.store.Cur: int _cchSrc>;

        r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int _cchChars> = $i2;

        staticinvoke <org.apache.xmlbeans.impl.store.CharUtil: void getChars(char[],int,java.lang.Object,int,int)>($r4, 0, $r3, $i3, $i2);

        $r5 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        if r8 == $r5 goto label4;

        virtualinvoke r8.<org.apache.xmlbeans.impl.store.Cur: void release()>();

     label4:
        r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _textFetched> = 1;

     label5:
        return;
    }

    private void ensureCharBufLen(int)
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int i0, $i1, i2;
        char[] $r1, $r2, $r3;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: char[] _chars>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: char[] _chars>;

        $i1 = lengthof $r3;

        if $i1 >= i0 goto label4;

     label1:
        i2 = 256;

     label2:
        if i2 >= i0 goto label3;

        i2 = i2 * 2;

        goto label2;

     label3:
        $r2 = newarray (char)[i2];

        r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: char[] _chars> = $r2;

     label4:
        return;
    }

    public char[] getTextCharacters()
    {
        char[] $r1;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: void checkChanged()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: void fetchChars()>();

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: char[] _chars>;

        return $r1;
    }

    public int getTextStart()
    {
        int $i0;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: void checkChanged()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: void fetchChars()>();

        $i0 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int _offChars>;

        return $i0;
    }

    public int getTextLength()
    {
        int $i0;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: void checkChanged()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: void fetchChars()>();

        $i0 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int _cchChars>;

        return $i0;
    }

    public int getTextCharacters(int, char[], int, int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.IndexOutOfBoundsException $r14, $r15, $r16, $r18;
        java.lang.IllegalStateException $r17;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i15;
        boolean $z0;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r2;
        char[] r1;
        java.lang.Object $r3, $r7;
        org.apache.xmlbeans.impl.store.Cur $r5, $r8, $r9, $r10, r13;

        r2 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        i4 := @parameter0: int;

        r1 := @parameter1: char[];

        i0 := @parameter2: int;

        i12 := @parameter3: int;

        if i12 >= 0 goto label01;

        $r14 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r14.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r14;

     label01:
        if i0 < 0 goto label02;

        $i1 = lengthof r1;

        if i0 < $i1 goto label03;

     label02:
        $r15 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r15.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r15;

     label03:
        $i3 = i0 + i12;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label04;

        $r16 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r16.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r16;

     label04:
        $z0 = r2.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _srcFetched>;

        if $z0 != 0 goto label09;

        $r5 = r2.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $i9 = virtualinvoke $r5.<org.apache.xmlbeans.impl.store.Cur: int kind()>();

        if $i9 != 4 goto label05;

        $r9 = r2.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r10 = virtualinvoke $r9.<org.apache.xmlbeans.impl.store.Cur: org.apache.xmlbeans.impl.store.Cur tempCur()>();

        r13 = $r10;

        virtualinvoke $r10.<org.apache.xmlbeans.impl.store.Cur: boolean next()>();

        goto label07;

     label05:
        if $i9 != 0 goto label06;

        r13 = r2.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        goto label07;

     label06:
        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>()>();

        throw $r17;

     label07:
        $i15 = (int) -1;

        $r7 = virtualinvoke r13.<org.apache.xmlbeans.impl.store.Cur: java.lang.Object getChars(int)>($i15);

        r2.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: java.lang.Object _src> = $r7;

        $i10 = r13.<org.apache.xmlbeans.impl.store.Cur: int _offSrc>;

        r2.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int _offSrc> = $i10;

        $i11 = r13.<org.apache.xmlbeans.impl.store.Cur: int _cchSrc>;

        r2.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int _cchSrc> = $i11;

        $r8 = r2.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        if r13 == $r8 goto label08;

        virtualinvoke r13.<org.apache.xmlbeans.impl.store.Cur: void release()>();

     label08:
        r2.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean _srcFetched> = 1;

     label09:
        $i13 = r2.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int _cchSrc>;

        if i4 <= $i13 goto label10;

        $r18 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r18.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r18;

     label10:
        $i6 = i4 + i12;

        $i5 = r2.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int _cchSrc>;

        if $i6 <= $i5 goto label11;

        $i8 = r2.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int _cchSrc>;

        i12 = $i8 - i4;

     label11:
        $r3 = r2.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: java.lang.Object _src>;

        $i7 = r2.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: int _offSrc>;

        staticinvoke <org.apache.xmlbeans.impl.store.CharUtil: void getChars(char[],int,java.lang.Object,int,int)>(r1, i0, $r3, $i7, i12);

        return i12;
    }

    public boolean hasText()
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int $i0;
        org.apache.xmlbeans.impl.store.Cur $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $i0 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: int kind()>();

        if $i0 == 4 goto label1;

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean hasName()
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int $i0, $i2;
        org.apache.xmlbeans.impl.store.Cur $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $i0 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: int kind()>();

        if $i0 == 2 goto label1;

        $i2 = (int) -2;

        if $i0 != $i2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public javax.xml.namespace.QName getName()
    {
        java.lang.IllegalStateException $r3;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        javax.xml.namespace.QName $r2;
        boolean $z0;
        org.apache.xmlbeans.impl.store.Cur $r1;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean hasName()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: javax.xml.namespace.QName getName()>();

        return $r2;
    }

    public java.lang.String getNamespaceURI()
    {
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: javax.xml.namespace.QName getName()>();

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        return $r2;
    }

    public java.lang.String getLocalName()
    {
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: javax.xml.namespace.QName getName()>();

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        return $r2;
    }

    public java.lang.String getPrefix()
    {
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: javax.xml.namespace.QName getName()>();

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        return $r2;
    }

    public java.lang.String getPITarget()
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int $i0;
        javax.xml.namespace.QName $r3;
        java.lang.String $r4;
        org.apache.xmlbeans.impl.store.Cur $r1, $r2;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $i0 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: int kind()>();

        if $i0 != 5 goto label1;

        $r2 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: javax.xml.namespace.QName getName()>();

        $r4 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public java.lang.String getPIData()
    {
        org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode r0;
        int $i0;
        java.lang.String $r3;
        org.apache.xmlbeans.impl.store.Cur $r1, $r2;

        r0 := @this: org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode;

        $r1 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $i0 = virtualinvoke $r1.<org.apache.xmlbeans.impl.store.Cur: int kind()>();

        if $i0 != 5 goto label1;

        $r2 = r0.<org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: org.apache.xmlbeans.impl.store.Cur _cur>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.store.Cur: java.lang.String getValueAsString()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.apache.xmlbeans.impl.store.Jsr173: java.lang.Class class$org$apache$xmlbeans$impl$store$Jsr173>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.store.Jsr173: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.store.Jsr173");

        <org.apache.xmlbeans.impl.store.Jsr173: java.lang.Class class$org$apache$xmlbeans$impl$store$Jsr173> = $r1;

        goto label2;

     label1:
        $r1 = <org.apache.xmlbeans.impl.store.Jsr173: java.lang.Class class$org$apache$xmlbeans$impl$store$Jsr173>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.store.Jsr173$XMLStreamReaderForNode: boolean $assertionsDisabled> = $z1;

        return;
    }
}
