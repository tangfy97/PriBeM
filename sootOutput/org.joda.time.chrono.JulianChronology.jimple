public final class org.joda.time.chrono.JulianChronology extends org.joda.time.chrono.BasicGJChronology
{
    private static final long serialVersionUID;
    private static final long MILLIS_PER_YEAR;
    private static final long MILLIS_PER_MONTH;
    private static final int MIN_YEAR;
    private static final int MAX_YEAR;
    private static final org.joda.time.chrono.JulianChronology INSTANCE_UTC;
    private static final java.util.Map cCache;

    static int adjustYearForSet(int)
    {
        int i0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.IllegalFieldValueException $r0;
        java.lang.Integer $r2;

        i0 := @parameter0: int;

        if i0 > 0 goto label2;

        if i0 != 0 goto label1;

        $r0 = new org.joda.time.IllegalFieldValueException;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0);

        specialinvoke $r0.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r2, null, null);

        throw $r0;

     label1:
        i0 = i0 + 1;

     label2:
        return i0;
    }

    public static org.joda.time.chrono.JulianChronology getInstanceUTC()
    {
        org.joda.time.chrono.JulianChronology $r0;

        $r0 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC>;

        return $r0;
    }

    public static org.joda.time.chrono.JulianChronology getInstance()
    {
        org.joda.time.DateTimeZone $r0;
        org.joda.time.chrono.JulianChronology $r1;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        $r1 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, 4);

        return $r1;
    }

    public static org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.chrono.JulianChronology $r1;

        r0 := @parameter0: org.joda.time.DateTimeZone;

        $r1 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>(r0, 4);

        return $r1;
    }

    public static org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone, int)
    {
        java.lang.Throwable $r12;
        org.joda.time.chrono.ZonedChronology $r7;
        org.joda.time.DateTimeZone $r3, $r4, r19;
        java.lang.StringBuffer $r15, $r16, $r17;
        java.util.Map $r0, $r1, $r9;
        int i0, $i1, $i2;
        org.joda.time.chrono.JulianChronology $r5, $r6, $r8, $r10, r21;
        java.lang.String $r18;
        org.joda.time.chrono.JulianChronology[] $r11, r20;
        java.lang.ArrayIndexOutOfBoundsException $r13;
        java.lang.IllegalArgumentException $r14;
        java.lang.Object $r2;

        r19 := @parameter0: org.joda.time.DateTimeZone;

        i0 := @parameter1: int;

        if r19 != null goto label01;

        r19 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label01:
        $r0 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>;

        entermonitor $r0;

     label02:
        $r1 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19);

        $r11 = (org.joda.time.chrono.JulianChronology[]) $r2;

        r20 = $r11;

        if $r11 != null goto label03;

        r20 = newarray (org.joda.time.chrono.JulianChronology)[7];

        $r9 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r20);

     label03:
        $i1 = i0 - 1;

        $r10 = r20[$i1];

        r21 = $r10;

     label04:
        goto label06;

     label05:
        $r13 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid min days in first week: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label06:
        if $r10 != null goto label09;

        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if r19 != $r3 goto label07;

        $r8 = new org.joda.time.chrono.JulianChronology;

        specialinvoke $r8.<org.joda.time.chrono.JulianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>(null, null, i0);

        r21 = $r8;

        goto label08;

     label07:
        $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r5 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>($r4, i0);

        $r6 = new org.joda.time.chrono.JulianChronology;

        $r7 = staticinvoke <org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>($r5, r19);

        specialinvoke $r6.<org.joda.time.chrono.JulianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>($r7, null, i0);

        r21 = $r6;

     label08:
        $i2 = i0 - 1;

        r20[$i2] = r21;

     label09:
        exitmonitor $r0;

     label10:
        goto label13;

     label11:
        $r12 := @caughtexception;

        exitmonitor $r0;

     label12:
        throw $r12;

     label13:
        return r21;

        catch java.lang.ArrayIndexOutOfBoundsException from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    void <init>(org.joda.time.Chronology, java.lang.Object, int)
    {
        org.joda.time.Chronology r1;
        int i0;
        java.lang.Object r2;
        org.joda.time.chrono.JulianChronology r0;

        r0 := @this: org.joda.time.chrono.JulianChronology;

        r1 := @parameter0: org.joda.time.Chronology;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>(r1, r2, i0);

        return;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.DateTimeZone $r2, $r3;
        org.joda.time.Chronology $r1;
        int $i0, $i1;
        org.joda.time.chrono.JulianChronology r0, $r4;

        r0 := @this: org.joda.time.chrono.JulianChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology getBase()>();

        $i0 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>();

        if $i0 != 0 goto label1;

        $i1 = 4;

        goto label2;

     label1:
        $i1 = $i0;

     label2:
        if $r1 != null goto label3;

        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r4 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>($r3, $i1);

        goto label4;

     label3:
        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $r4 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>($r2, $i1);

     label4:
        return $r4;
    }

    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.chrono.JulianChronology $r0, r1;

        r1 := @this: org.joda.time.chrono.JulianChronology;

        $r0 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC>;

        return $r0;
    }

    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r1, r3;
        org.joda.time.chrono.JulianChronology r0, $r2;

        r0 := @this: org.joda.time.chrono.JulianChronology;

        r3 := @parameter0: org.joda.time.DateTimeZone;

        if r3 != null goto label1;

        r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>();

        if r3 != $r1 goto label2;

        return r0;

     label2:
        $r2 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>(r3);

        return $r2;
    }

    long getDateMidnightMillis(int, int, int) throws java.lang.IllegalArgumentException
    {
        int i0, $i1, i2, i3;
        long $l4;
        org.joda.time.chrono.JulianChronology r0;

        r0 := @this: org.joda.time.chrono.JulianChronology;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $i1 = staticinvoke <org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>(i0);

        $l4 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateMidnightMillis(int,int,int)>($i1, i2, i3);

        return $l4;
    }

    boolean isLeapYear(int)
    {
        int i0, $i1;
        org.joda.time.chrono.JulianChronology r0;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.JulianChronology;

        i0 := @parameter0: int;

        $i1 = i0 & 3;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    long calculateFirstDayOfYearMillis(int)
    {
        long $l4, $l5, $l6, $l7, $l8, $l9;
        int i0, i1, $i2, i3;
        org.joda.time.chrono.JulianChronology r0;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.JulianChronology;

        i0 := @parameter0: int;

        i1 = i0 - 1968;

        if i1 > 0 goto label1;

        $i2 = i1 + 3;

        i3 = $i2 >> 2;

        goto label2;

     label1:
        i3 = i1 >> 2;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>(i0);

        if $z0 != 0 goto label2;

        i3 = i3 + 1;

     label2:
        $l4 = (long) i1;

        $l5 = $l4 * 365L;

        $l6 = (long) i3;

        $l7 = $l5 + $l6;

        $l8 = $l7 * 86400000L;

        $l9 = $l8 - 62035200000L;

        return $l9;
    }

    int getMinYear()
    {
        org.joda.time.chrono.JulianChronology r0;

        r0 := @this: org.joda.time.chrono.JulianChronology;

        return -292269054;
    }

    int getMaxYear()
    {
        org.joda.time.chrono.JulianChronology r0;

        r0 := @this: org.joda.time.chrono.JulianChronology;

        return 292272992;
    }

    long getAverageMillisPerYear()
    {
        org.joda.time.chrono.JulianChronology r0;

        r0 := @this: org.joda.time.chrono.JulianChronology;

        return 31557600000L;
    }

    long getAverageMillisPerYearDividedByTwo()
    {
        org.joda.time.chrono.JulianChronology r0;

        r0 := @this: org.joda.time.chrono.JulianChronology;

        return 15778800000L;
    }

    long getAverageMillisPerMonth()
    {
        org.joda.time.chrono.JulianChronology r0;

        r0 := @this: org.joda.time.chrono.JulianChronology;

        return 2629800000L;
    }

    long getApproxMillisAtEpochDividedByTwo()
    {
        org.joda.time.chrono.JulianChronology r0;

        r0 := @this: org.joda.time.chrono.JulianChronology;

        return 31083663600000L;
    }

    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.chrono.AssembledChronology$Fields r2;
        org.joda.time.field.SkipDateTimeField $r3, $r5;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r4, $r6;
        org.joda.time.chrono.JulianChronology r0;

        r0 := @this: org.joda.time.chrono.JulianChronology;

        r2 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology getBase()>();

        if $r1 != null goto label1;

        specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r2);

        $r3 = new org.joda.time.field.SkipDateTimeField;

        $r4 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        specialinvoke $r3.<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, $r4);

        r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3;

        $r5 = new org.joda.time.field.SkipDateTimeField;

        $r6 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        specialinvoke $r5.<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, $r6);

        r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r5;

     label1:
        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.chrono.JulianChronology $r2;

        <org.joda.time.chrono.JulianChronology: int MAX_YEAR> = 292272992;

        <org.joda.time.chrono.JulianChronology: int MIN_YEAR> = -292269054;

        <org.joda.time.chrono.JulianChronology: long MILLIS_PER_MONTH> = 2629800000L;

        <org.joda.time.chrono.JulianChronology: long MILLIS_PER_YEAR> = 31557600000L;

        <org.joda.time.chrono.JulianChronology: long serialVersionUID> = -8731039522547897247L;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.joda.time.chrono.JulianChronology: java.util.Map cCache> = $r0;

        $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r2 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC> = $r2;

        return;
    }
}
