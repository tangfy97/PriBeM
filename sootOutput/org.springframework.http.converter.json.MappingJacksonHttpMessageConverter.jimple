public class org.springframework.http.converter.json.MappingJacksonHttpMessageConverter extends org.springframework.http.converter.AbstractHttpMessageConverter
{
    public static final java.nio.charset.Charset DEFAULT_CHARSET;
    private org.codehaus.jackson.map.ObjectMapper objectMapper;
    private boolean prefixJson;

    static void <clinit>()
    {
        java.nio.charset.Charset $r0;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: java.nio.charset.Charset DEFAULT_CHARSET> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.http.converter.json.MappingJacksonHttpMessageConverter r0;
        java.nio.charset.Charset $r2;
        org.springframework.http.MediaType $r1;
        org.codehaus.jackson.map.ObjectMapper $r3;

        r0 := @this: org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;

        $r1 = new org.springframework.http.MediaType;

        $r2 = <org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: java.nio.charset.Charset DEFAULT_CHARSET>;

        specialinvoke $r1.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String,java.nio.charset.Charset)>("application", "json", $r2);

        specialinvoke r0.<org.springframework.http.converter.AbstractHttpMessageConverter: void <init>(org.springframework.http.MediaType)>($r1);

        $r3 = new org.codehaus.jackson.map.ObjectMapper;

        specialinvoke $r3.<org.codehaus.jackson.map.ObjectMapper: void <init>()>();

        r0.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: org.codehaus.jackson.map.ObjectMapper objectMapper> = $r3;

        r0.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: boolean prefixJson> = 0;

        return;
    }

    public void setObjectMapper(org.codehaus.jackson.map.ObjectMapper)
    {
        org.springframework.http.converter.json.MappingJacksonHttpMessageConverter r1;
        org.codehaus.jackson.map.ObjectMapper r0;

        r1 := @this: org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;

        r0 := @parameter0: org.codehaus.jackson.map.ObjectMapper;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'objectMapper\' must not be null");

        r1.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: org.codehaus.jackson.map.ObjectMapper objectMapper> = r0;

        return;
    }

    public void setPrefixJson(boolean)
    {
        org.springframework.http.converter.json.MappingJacksonHttpMessageConverter r0;
        boolean z0;

        r0 := @this: org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;

        z0 := @parameter0: boolean;

        r0.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: boolean prefixJson> = z0;

        return;
    }

    public boolean canRead(java.lang.Class, org.springframework.http.MediaType)
    {
        org.springframework.http.converter.json.MappingJacksonHttpMessageConverter r0;
        org.springframework.http.MediaType r4;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class r1;
        org.codehaus.jackson.map.ObjectMapper $r3;
        boolean $z0, $z1;

        r0 := @this: org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r4 := @parameter1: org.springframework.http.MediaType;

        $r2 = virtualinvoke r0.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: org.codehaus.jackson.type.JavaType getJavaType(java.lang.Class)>(r1);

        $r3 = r0.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: org.codehaus.jackson.map.ObjectMapper objectMapper>;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.map.ObjectMapper: boolean canDeserialize(org.codehaus.jackson.type.JavaType)>($r2);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: boolean canRead(org.springframework.http.MediaType)>(r4);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected org.codehaus.jackson.type.JavaType getJavaType(java.lang.Class)
    {
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Class r0;
        org.springframework.http.converter.json.MappingJacksonHttpMessageConverter r2;

        r2 := @this: org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>(r0);

        return $r1;
    }

    public boolean canWrite(java.lang.Class, org.springframework.http.MediaType)
    {
        org.springframework.http.converter.json.MappingJacksonHttpMessageConverter r0;
        org.springframework.http.MediaType r3;
        java.lang.Class r1;
        org.codehaus.jackson.map.ObjectMapper $r2;
        boolean $z0, $z1;

        r0 := @this: org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.springframework.http.MediaType;

        $r2 = r0.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: org.codehaus.jackson.map.ObjectMapper objectMapper>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.ObjectMapper: boolean canSerialize(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: boolean canWrite(org.springframework.http.MediaType)>(r3);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean supports(java.lang.Class)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Class r2;
        org.springframework.http.converter.json.MappingJacksonHttpMessageConverter r1;

        r1 := @this: org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;

        r2 := @parameter0: java.lang.Class;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    protected java.lang.Object readInternal(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException
    {
        java.lang.Throwable $r7;
        org.springframework.http.converter.json.MappingJacksonHttpMessageConverter r0;
        org.springframework.http.converter.HttpMessageNotReadableException $r14;
        org.springframework.http.HttpInputMessage r3;
        org.codehaus.jackson.JsonParseException $r15;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class r1;
        java.lang.Object $r6;
        java.lang.StringBuilder $r11, $r13;
        java.lang.String $r10, $r12;
        org.codehaus.jackson.map.ObjectMapper $r4;
        java.io.InputStream $r5;

        r0 := @this: org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.springframework.http.HttpInputMessage;

        $r2 = virtualinvoke r0.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: org.codehaus.jackson.type.JavaType getJavaType(java.lang.Class)>(r1);

     label1:
        $r4 = r0.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: org.codehaus.jackson.map.ObjectMapper objectMapper>;

        $r5 = interfaceinvoke r3.<org.springframework.http.HttpInputMessage: java.io.InputStream getBody()>();

        $r6 = virtualinvoke $r4.<org.codehaus.jackson.map.ObjectMapper: java.lang.Object readValue(java.io.InputStream,org.codehaus.jackson.type.JavaType)>($r5, $r2);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r14 = new org.springframework.http.converter.HttpMessageNotReadableException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not read JSON: ");

        $r15 = (org.codehaus.jackson.JsonParseException) $r7;

        $r10 = virtualinvoke $r15.<org.codehaus.jackson.JsonParseException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.springframework.http.converter.HttpMessageNotReadableException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r7);

        throw $r14;

        catch org.codehaus.jackson.JsonParseException from label1 to label2 with label3;
    }

    protected void writeInternal(java.lang.Object, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException
    {
        java.lang.Throwable $r11;
        org.springframework.http.converter.json.MappingJacksonHttpMessageConverter r0;
        org.springframework.http.converter.HttpMessageNotWritableException $r18;
        org.codehaus.jackson.JsonEncoding $r4;
        org.codehaus.jackson.JsonGenerator $r8;
        java.lang.String $r14, $r16;
        boolean $z0;
        java.io.OutputStream $r7;
        org.springframework.http.HttpHeaders $r2;
        org.springframework.http.MediaType $r3;
        org.codehaus.jackson.JsonGenerationException $r19;
        org.codehaus.jackson.JsonFactory $r6;
        java.lang.Object r9;
        java.lang.StringBuilder $r15, $r17;
        org.codehaus.jackson.map.ObjectMapper $r5, $r10;
        org.springframework.http.HttpOutputMessage r1;

        r0 := @this: org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;

        r9 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.springframework.http.HttpOutputMessage;

        $r2 = interfaceinvoke r1.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $r3 = virtualinvoke $r2.<org.springframework.http.HttpHeaders: org.springframework.http.MediaType getContentType()>();

        $r4 = specialinvoke r0.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: org.codehaus.jackson.JsonEncoding getEncoding(org.springframework.http.MediaType)>($r3);

        $r5 = r0.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: org.codehaus.jackson.map.ObjectMapper objectMapper>;

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.ObjectMapper: org.codehaus.jackson.JsonFactory getJsonFactory()>();

        $r7 = interfaceinvoke r1.<org.springframework.http.HttpOutputMessage: java.io.OutputStream getBody()>();

        $r8 = virtualinvoke $r6.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonGenerator createJsonGenerator(java.io.OutputStream,org.codehaus.jackson.JsonEncoding)>($r7, $r4);

     label1:
        $z0 = r0.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: boolean prefixJson>;

        if $z0 == 0 goto label2;

        virtualinvoke $r8.<org.codehaus.jackson.JsonGenerator: void writeRaw(java.lang.String)>("{} && ");

     label2:
        $r10 = r0.<org.springframework.http.converter.json.MappingJacksonHttpMessageConverter: org.codehaus.jackson.map.ObjectMapper objectMapper>;

        virtualinvoke $r10.<org.codehaus.jackson.map.ObjectMapper: void writeValue(org.codehaus.jackson.JsonGenerator,java.lang.Object)>($r8, r9);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r18 = new org.springframework.http.converter.HttpMessageNotWritableException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not write JSON: ");

        $r19 = (org.codehaus.jackson.JsonGenerationException) $r11;

        $r14 = virtualinvoke $r19.<org.codehaus.jackson.JsonGenerationException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.springframework.http.converter.HttpMessageNotWritableException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r11);

        throw $r18;

     label5:
        return;

        catch org.codehaus.jackson.JsonGenerationException from label1 to label3 with label4;
    }

    private org.codehaus.jackson.JsonEncoding getEncoding(org.springframework.http.MediaType)
    {
        org.springframework.http.converter.json.MappingJacksonHttpMessageConverter r7;
        org.codehaus.jackson.JsonEncoding[] $r3;
        org.springframework.http.MediaType r0;
        java.nio.charset.Charset $r1, $r2;
        org.codehaus.jackson.JsonEncoding r4, $r8;
        int i0, i1;
        java.lang.String $r5, $r6;
        boolean $z0;

        r7 := @this: org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;

        r0 := @parameter0: org.springframework.http.MediaType;

        if r0 == null goto label4;

        $r1 = virtualinvoke r0.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        if $r1 == null goto label4;

        $r2 = virtualinvoke r0.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        $r3 = staticinvoke <org.codehaus.jackson.JsonEncoding: org.codehaus.jackson.JsonEncoding[] values()>();

        i0 = lengthof $r3;

        i1 = 0;

        goto label3;

     label1:
        r4 = $r3[i1];

        $r5 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        $r6 = virtualinvoke r4.<org.codehaus.jackson.JsonEncoding: java.lang.String getJavaName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        return r4;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

     label4:
        $r8 = <org.codehaus.jackson.JsonEncoding: org.codehaus.jackson.JsonEncoding UTF8>;

        return $r8;
    }
}
