public abstract class org.springframework.beans.AbstractPropertyAccessor extends org.springframework.beans.PropertyEditorRegistrySupport implements org.springframework.beans.ConfigurablePropertyAccessor
{
    private boolean extractOldValueForEditor;

    public void <init>()
    {
        org.springframework.beans.AbstractPropertyAccessor r0;

        r0 := @this: org.springframework.beans.AbstractPropertyAccessor;

        specialinvoke r0.<org.springframework.beans.PropertyEditorRegistrySupport: void <init>()>();

        r0.<org.springframework.beans.AbstractPropertyAccessor: boolean extractOldValueForEditor> = 0;

        return;
    }

    public void setExtractOldValueForEditor(boolean)
    {
        org.springframework.beans.AbstractPropertyAccessor r0;
        boolean z0;

        r0 := @this: org.springframework.beans.AbstractPropertyAccessor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.AbstractPropertyAccessor: boolean extractOldValueForEditor> = z0;

        return;
    }

    public boolean isExtractOldValueForEditor()
    {
        org.springframework.beans.AbstractPropertyAccessor r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.AbstractPropertyAccessor;

        $z0 = r0.<org.springframework.beans.AbstractPropertyAccessor: boolean extractOldValueForEditor>;

        return $z0;
    }

    public void setPropertyValue(org.springframework.beans.PropertyValue) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.PropertyValue r1;
        org.springframework.beans.AbstractPropertyAccessor r0;
        java.lang.Object $r3;
        java.lang.String $r2;

        r0 := @this: org.springframework.beans.AbstractPropertyAccessor;

        r1 := @parameter0: org.springframework.beans.PropertyValue;

        $r2 = virtualinvoke r1.<org.springframework.beans.PropertyValue: java.lang.String getName()>();

        $r3 = virtualinvoke r1.<org.springframework.beans.PropertyValue: java.lang.Object getValue()>();

        virtualinvoke r0.<org.springframework.beans.AbstractPropertyAccessor: void setPropertyValue(java.lang.String,java.lang.Object)>($r2, $r3);

        return;
    }

    public void setPropertyValues(java.util.Map) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.AbstractPropertyAccessor r0;
        org.springframework.beans.MutablePropertyValues $r1;
        java.util.Map r2;

        r0 := @this: org.springframework.beans.AbstractPropertyAccessor;

        r2 := @parameter0: java.util.Map;

        $r1 = new org.springframework.beans.MutablePropertyValues;

        specialinvoke $r1.<org.springframework.beans.MutablePropertyValues: void <init>(java.util.Map)>(r2);

        virtualinvoke r0.<org.springframework.beans.AbstractPropertyAccessor: void setPropertyValues(org.springframework.beans.PropertyValues)>($r1);

        return;
    }

    public void setPropertyValues(org.springframework.beans.PropertyValues) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.AbstractPropertyAccessor r0;
        org.springframework.beans.PropertyValues r1;

        r0 := @this: org.springframework.beans.AbstractPropertyAccessor;

        r1 := @parameter0: org.springframework.beans.PropertyValues;

        virtualinvoke r0.<org.springframework.beans.AbstractPropertyAccessor: void setPropertyValues(org.springframework.beans.PropertyValues,boolean,boolean)>(r1, 0, 0);

        return;
    }

    public void setPropertyValues(org.springframework.beans.PropertyValues, boolean) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.AbstractPropertyAccessor r0;
        org.springframework.beans.PropertyValues r1;
        boolean z0;

        r0 := @this: org.springframework.beans.AbstractPropertyAccessor;

        r1 := @parameter0: org.springframework.beans.PropertyValues;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.springframework.beans.AbstractPropertyAccessor: void setPropertyValues(org.springframework.beans.PropertyValues,boolean,boolean)>(r1, z0, 0);

        return;
    }

    public void setPropertyValues(org.springframework.beans.PropertyValues, boolean, boolean) throws org.springframework.beans.BeansException
    {
        java.lang.Object[] $r6;
        org.springframework.beans.PropertyAccessException[] $r5, r16;
        org.springframework.beans.PropertyValue[] $r1;
        org.springframework.beans.PropertyBatchUpdateException $r7;
        int $i0;
        java.util.LinkedList $r10, r13;
        boolean $z0, z1, z2, $z3;
        java.util.Iterator $r2;
        org.springframework.beans.PropertyAccessException $r9;
        org.springframework.beans.PropertyValue r15;
        org.springframework.beans.MutablePropertyValues $r8;
        java.util.List $r14;
        org.springframework.beans.AbstractPropertyAccessor r4;
        java.lang.Object $r3;
        org.springframework.beans.NotWritablePropertyException $r12;
        org.springframework.beans.PropertyValues r0;
        org.springframework.beans.NullValueInNestedPathException $r11;

        r4 := @this: org.springframework.beans.AbstractPropertyAccessor;

        r0 := @parameter0: org.springframework.beans.PropertyValues;

        z2 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r13 = null;

        $z0 = r0 instanceof org.springframework.beans.MutablePropertyValues;

        if $z0 == 0 goto label01;

        $r8 = (org.springframework.beans.MutablePropertyValues) r0;

        $r14 = virtualinvoke $r8.<org.springframework.beans.MutablePropertyValues: java.util.List getPropertyValueList()>();

        goto label02;

     label01:
        $r1 = interfaceinvoke r0.<org.springframework.beans.PropertyValues: org.springframework.beans.PropertyValue[] getPropertyValues()>();

        $r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

     label02:
        $r2 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

        goto label10;

     label03:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.springframework.beans.PropertyValue) $r3;

     label04:
        virtualinvoke r4.<org.springframework.beans.AbstractPropertyAccessor: void setPropertyValue(org.springframework.beans.PropertyValue)>(r15);

     label05:
        goto label10;

     label06:
        $r12 := @caughtexception;

        if z2 != 0 goto label10;

        throw $r12;

     label07:
        $r11 := @caughtexception;

        if z1 != 0 goto label10;

        throw $r11;

     label08:
        $r9 := @caughtexception;

        if r13 != null goto label09;

        $r10 = new java.util.LinkedList;

        specialinvoke $r10.<java.util.LinkedList: void <init>()>();

        r13 = $r10;

     label09:
        interfaceinvoke r13.<java.util.List: boolean add(java.lang.Object)>($r9);

     label10:
        $z3 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label03;

        if r13 == null goto label11;

        $i0 = interfaceinvoke r13.<java.util.List: int size()>();

        $r5 = newarray (org.springframework.beans.PropertyAccessException)[$i0];

        $r6 = interfaceinvoke r13.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        r16 = (org.springframework.beans.PropertyAccessException[]) $r6;

        $r7 = new org.springframework.beans.PropertyBatchUpdateException;

        specialinvoke $r7.<org.springframework.beans.PropertyBatchUpdateException: void <init>(org.springframework.beans.PropertyAccessException[])>(r16);

        throw $r7;

     label11:
        return;

        catch org.springframework.beans.NotWritablePropertyException from label04 to label05 with label06;
        catch org.springframework.beans.NullValueInNestedPathException from label04 to label05 with label07;
        catch org.springframework.beans.PropertyAccessException from label04 to label05 with label08;
    }

    public java.lang.Object convertIfNecessary(java.lang.Object, java.lang.Class) throws org.springframework.beans.TypeMismatchException
    {
        org.springframework.beans.AbstractPropertyAccessor r0;
        java.lang.Object r1, $r3;
        java.lang.Class r2;

        r0 := @this: org.springframework.beans.AbstractPropertyAccessor;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r0.<org.springframework.beans.AbstractPropertyAccessor: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class,org.springframework.core.MethodParameter)>(r1, r2, null);

        return $r3;
    }

    public java.lang.Class getPropertyType(java.lang.String)
    {
        org.springframework.beans.AbstractPropertyAccessor r0;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.AbstractPropertyAccessor;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public abstract java.lang.Object getPropertyValue(java.lang.String) throws org.springframework.beans.BeansException;

    public abstract void setPropertyValue(java.lang.String, java.lang.Object) throws org.springframework.beans.BeansException;
}
