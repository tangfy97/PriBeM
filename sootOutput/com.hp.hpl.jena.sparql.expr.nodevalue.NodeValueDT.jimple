public class com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT extends com.hp.hpl.jena.sparql.expr.NodeValue
{
    private final javax.xml.datatype.XMLGregorianCalendar datetime;

    public void <init>(java.lang.String, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, $r3;
        javax.xml.datatype.DatatypeFactory $r5, $r8;
        int $i0, $i1;
        java.lang.String $r7, r11;
        boolean $z0, $z1;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT r0;
        javax.xml.datatype.XMLGregorianCalendar $r6, $r9, $r10;
        com.hp.hpl.jena.datatypes.RDFDatatype $r4;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        r11 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: void <init>(com.hp.hpl.jena.graph.Node)>(r1);

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgMonth>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: com.hp.hpl.jena.graph.Node getNode()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r11.<java.lang.String: boolean endsWith(java.lang.String)>("Z");

        if $z1 == 0 goto label1;

        $i0 = virtualinvoke r11.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r7 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r8 = <com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.DatatypeFactory xmlDatatypeFactory>;

        $r9 = virtualinvoke $r8.<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.lang.String)>($r7);

        r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: javax.xml.datatype.XMLGregorianCalendar datetime> = $r9;

        $r10 = r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: javax.xml.datatype.XMLGregorianCalendar datetime>;

        virtualinvoke $r10.<javax.xml.datatype.XMLGregorianCalendar: void setTimezone(int)>(0);

        return;

     label1:
        $r5 = <com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.DatatypeFactory xmlDatatypeFactory>;

        $r6 = virtualinvoke $r5.<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.lang.String)>(r11);

        r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: javax.xml.datatype.XMLGregorianCalendar datetime> = $r6;

        return;
    }

    public boolean isDateTime()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT r0;
        com.hp.hpl.jena.graph.Node $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdateTime>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public boolean isDate()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT r0;
        com.hp.hpl.jena.graph.Node $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdate>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public boolean isTime()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT r0;
        com.hp.hpl.jena.graph.Node $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDtime>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public boolean isGYear()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT r0;
        com.hp.hpl.jena.graph.Node $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgYear>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public boolean isGYearMonth()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT r0;
        com.hp.hpl.jena.graph.Node $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgYearMonth>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public boolean isGMonth()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT r0;
        com.hp.hpl.jena.graph.Node $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgMonth>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public boolean isGMonthDay()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT r0;
        com.hp.hpl.jena.graph.Node $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgMonthDay>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public boolean isGDay()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT r0;
        com.hp.hpl.jena.graph.Node $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgDay>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public javax.xml.datatype.XMLGregorianCalendar getDateTime()
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT r0;
        java.lang.Object $r2;
        javax.xml.datatype.XMLGregorianCalendar $r1, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT: javax.xml.datatype.XMLGregorianCalendar datetime>;

        $r2 = virtualinvoke $r1.<javax.xml.datatype.XMLGregorianCalendar: java.lang.Object clone()>();

        $r3 = (javax.xml.datatype.XMLGregorianCalendar) $r2;

        return $r3;
    }

    protected com.hp.hpl.jena.graph.Node makeNode()
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        return null;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueVisitor)
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueVisitor: void visit(com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDT)>(r1);

        return;
    }
}
