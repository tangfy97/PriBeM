public final class kodkod.instance.Instance extends java.lang.Object implements java.lang.Cloneable
{
    private final java.util.Map tuples;
    private final kodkod.util.ints.SparseSequence ints;
    private final kodkod.instance.Universe universe;

    private void <init>(kodkod.instance.Universe, java.util.Map, kodkod.util.ints.SparseSequence)
    {
        kodkod.instance.Instance r0;
        java.util.Map r2;
        kodkod.instance.Universe r1;
        kodkod.util.ints.SparseSequence r3;

        r0 := @this: kodkod.instance.Instance;

        r1 := @parameter0: kodkod.instance.Universe;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: kodkod.util.ints.SparseSequence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.instance.Instance: kodkod.instance.Universe universe> = r1;

        r0.<kodkod.instance.Instance: java.util.Map tuples> = r2;

        r0.<kodkod.instance.Instance: kodkod.util.ints.SparseSequence ints> = r3;

        return;
    }

    public void <init>(kodkod.instance.Universe)
    {
        kodkod.instance.Instance r0;
        java.util.LinkedHashMap $r2;
        kodkod.util.ints.TreeSequence $r3;
        kodkod.instance.Universe r1;
        java.lang.NullPointerException $r4;

        r0 := @this: kodkod.instance.Instance;

        r1 := @parameter0: kodkod.instance.Universe;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("universe=null");

        throw $r4;

     label1:
        r0.<kodkod.instance.Instance: kodkod.instance.Universe universe> = r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<kodkod.instance.Instance: java.util.Map tuples> = $r2;

        $r3 = new kodkod.util.ints.TreeSequence;

        specialinvoke $r3.<kodkod.util.ints.TreeSequence: void <init>()>();

        r0.<kodkod.instance.Instance: kodkod.util.ints.SparseSequence ints> = $r3;

        return;
    }

    public kodkod.instance.Universe universe()
    {
        kodkod.instance.Instance r0;
        kodkod.instance.Universe $r1;

        r0 := @this: kodkod.instance.Instance;

        $r1 = r0.<kodkod.instance.Instance: kodkod.instance.Universe universe>;

        return $r1;
    }

    public boolean contains(kodkod.ast.Relation)
    {
        kodkod.instance.Instance r0;
        java.util.Map $r2;
        kodkod.ast.Relation r1;
        boolean $z0;

        r0 := @this: kodkod.instance.Instance;

        r1 := @parameter0: kodkod.ast.Relation;

        $r2 = r0.<kodkod.instance.Instance: java.util.Map tuples>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean contains(int)
    {
        kodkod.instance.Instance r0;
        int i0;
        kodkod.util.ints.SparseSequence $r1;
        boolean $z0;

        r0 := @this: kodkod.instance.Instance;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.instance.Instance: kodkod.util.ints.SparseSequence ints>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: boolean containsIndex(int)>(i0);

        return $z0;
    }

    public java.util.Set relations()
    {
        kodkod.instance.Instance r0;
        java.util.Set $r2;
        java.util.Map $r1;

        r0 := @this: kodkod.instance.Instance;

        $r1 = r0.<kodkod.instance.Instance: java.util.Map tuples>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public kodkod.util.ints.IntSet ints()
    {
        kodkod.instance.Instance r0;
        kodkod.util.ints.SparseSequence $r1;
        kodkod.util.ints.IntSet $r2;

        r0 := @this: kodkod.instance.Instance;

        $r1 = r0.<kodkod.instance.Instance: kodkod.util.ints.SparseSequence ints>;

        $r2 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: kodkod.util.ints.IntSet indices()>();

        return $r2;
    }

    public void add(kodkod.ast.Relation, kodkod.instance.TupleSet)
    {
        java.lang.IllegalArgumentException $r8, $r9;
        kodkod.instance.Instance r2;
        java.util.Map $r5;
        int $i0, $i1;
        kodkod.instance.Universe $r1, $r3;
        kodkod.ast.Relation r4;
        kodkod.instance.TupleSet r0, $r6, $r7;
        boolean $z0;

        r2 := @this: kodkod.instance.Instance;

        r4 := @parameter0: kodkod.ast.Relation;

        r0 := @parameter1: kodkod.instance.TupleSet;

        $r1 = virtualinvoke r0.<kodkod.instance.TupleSet: kodkod.instance.Universe universe()>();

        $r3 = r2.<kodkod.instance.Instance: kodkod.instance.Universe universe>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("s.universe!=this.universe");

        throw $r9;

     label1:
        $i0 = virtualinvoke r4.<kodkod.ast.Relation: int arity()>();

        $i1 = virtualinvoke r0.<kodkod.instance.TupleSet: int arity()>();

        if $i0 == $i1 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("relation.arity!=s.arity");

        throw $r8;

     label2:
        $r5 = r2.<kodkod.instance.Instance: java.util.Map tuples>;

        $r6 = virtualinvoke r0.<kodkod.instance.TupleSet: kodkod.instance.TupleSet clone()>();

        $r7 = virtualinvoke $r6.<kodkod.instance.TupleSet: kodkod.instance.TupleSet unmodifiableView()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r7);

        return;
    }

    public void add(int, kodkod.instance.TupleSet)
    {
        kodkod.instance.Instance r2;
        int $i0, $i1, i2;
        kodkod.instance.Universe $r1, $r3;
        java.lang.String $r10, $r14;
        kodkod.instance.TupleSet r0, $r5, $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r7, $r11, $r15;
        kodkod.util.ints.SparseSequence $r4;
        java.lang.StringBuilder $r8, $r9, $r12, $r13;

        r2 := @this: kodkod.instance.Instance;

        i2 := @parameter0: int;

        r0 := @parameter1: kodkod.instance.TupleSet;

        $r1 = virtualinvoke r0.<kodkod.instance.TupleSet: kodkod.instance.Universe universe()>();

        $r3 = r2.<kodkod.instance.Instance: kodkod.instance.Universe universe>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("s.universe!=this.universe");

        throw $r15;

     label1:
        $i0 = virtualinvoke r0.<kodkod.instance.TupleSet: int arity()>();

        if $i0 == 1 goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("s.arity!=1: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label2:
        $i1 = virtualinvoke r0.<kodkod.instance.TupleSet: int size()>();

        if $i1 == 1 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("s.size()!=1: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label3:
        $r4 = r2.<kodkod.instance.Instance: kodkod.util.ints.SparseSequence ints>;

        $r5 = virtualinvoke r0.<kodkod.instance.TupleSet: kodkod.instance.TupleSet clone()>();

        $r6 = virtualinvoke $r5.<kodkod.instance.TupleSet: kodkod.instance.TupleSet unmodifiableView()>();

        interfaceinvoke $r4.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>(i2, $r6);

        return;
    }

    public kodkod.instance.TupleSet tuples(kodkod.ast.Relation)
    {
        kodkod.instance.Instance r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        kodkod.ast.Relation r1;
        kodkod.instance.TupleSet $r4;

        r0 := @this: kodkod.instance.Instance;

        r1 := @parameter0: kodkod.ast.Relation;

        $r2 = r0.<kodkod.instance.Instance: java.util.Map tuples>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (kodkod.instance.TupleSet) $r3;

        return $r4;
    }

    public java.util.Map relationTuples()
    {
        kodkod.instance.Instance r0;
        java.util.Map $r1, $r2;

        r0 := @this: kodkod.instance.Instance;

        $r1 = r0.<kodkod.instance.Instance: java.util.Map tuples>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public kodkod.instance.TupleSet tuples(int)
    {
        kodkod.instance.Instance r0;
        int i0;
        java.lang.Object $r2;
        kodkod.util.ints.SparseSequence $r1;
        kodkod.instance.TupleSet $r3;

        r0 := @this: kodkod.instance.Instance;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.instance.Instance: kodkod.util.ints.SparseSequence ints>;

        $r2 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: java.lang.Object get(int)>(i0);

        $r3 = (kodkod.instance.TupleSet) $r2;

        return $r3;
    }

    public kodkod.util.ints.SparseSequence intTuples()
    {
        kodkod.instance.Instance r0;
        kodkod.util.ints.SparseSequence $r1, $r2;

        r0 := @this: kodkod.instance.Instance;

        $r1 = r0.<kodkod.instance.Instance: kodkod.util.ints.SparseSequence ints>;

        $r2 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.SparseSequence unmodifiableSequence(kodkod.util.ints.SparseSequence)>($r1);

        return $r2;
    }

    public kodkod.instance.Instance unmodifiableView()
    {
        kodkod.instance.Instance $r0, r1;
        java.util.Map $r2, $r4;
        kodkod.instance.Universe $r3;
        kodkod.util.ints.SparseSequence $r5, $r6;

        r1 := @this: kodkod.instance.Instance;

        $r0 = new kodkod.instance.Instance;

        $r3 = r1.<kodkod.instance.Instance: kodkod.instance.Universe universe>;

        $r2 = r1.<kodkod.instance.Instance: java.util.Map tuples>;

        $r4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r2);

        $r5 = r1.<kodkod.instance.Instance: kodkod.util.ints.SparseSequence ints>;

        $r6 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.SparseSequence unmodifiableSequence(kodkod.util.ints.SparseSequence)>($r5);

        specialinvoke $r0.<kodkod.instance.Instance: void <init>(kodkod.instance.Universe,java.util.Map,kodkod.util.ints.SparseSequence)>($r3, $r4, $r6);

        return $r0;
    }

    public kodkod.instance.Instance clone()
    {
        kodkod.util.ints.SparseSequence $r5, $r6;
        java.lang.CloneNotSupportedException $r7;
        kodkod.instance.Instance $r0, r1;
        java.util.LinkedHashMap $r2;
        java.util.Map $r3;
        java.lang.InternalError $r8;
        kodkod.instance.Universe $r4;

        r1 := @this: kodkod.instance.Instance;

     label1:
        $r0 = new kodkod.instance.Instance;

        $r4 = r1.<kodkod.instance.Instance: kodkod.instance.Universe universe>;

        $r2 = new java.util.LinkedHashMap;

        $r3 = r1.<kodkod.instance.Instance: java.util.Map tuples>;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r3);

        $r5 = r1.<kodkod.instance.Instance: kodkod.util.ints.SparseSequence ints>;

        $r6 = interfaceinvoke $r5.<kodkod.util.ints.SparseSequence: kodkod.util.ints.SparseSequence clone()>();

        specialinvoke $r0.<kodkod.instance.Instance: void <init>(kodkod.instance.Universe,java.util.Map,kodkod.util.ints.SparseSequence)>($r4, $r2, $r6);

     label2:
        return $r0;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.InternalError;

        specialinvoke $r8.<java.lang.InternalError: void <init>()>();

        throw $r8;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        kodkod.util.ints.SparseSequence $r6;
        kodkod.instance.Instance r1;
        java.util.Map $r2;
        java.lang.StringBuilder $r0, $r4, $r5, $r7;
        java.lang.String $r3, $r8;

        r1 := @this: kodkod.instance.Instance;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("relations: ");

        $r2 = r1.<kodkod.instance.Instance: java.util.Map tuples>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nints: ");

        $r6 = r1.<kodkod.instance.Instance: kodkod.util.ints.SparseSequence ints>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    protected volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.instance.Instance r0, $r1;

        r0 := @this: kodkod.instance.Instance;

        $r1 = virtualinvoke r0.<kodkod.instance.Instance: kodkod.instance.Instance clone()>();

        return $r1;
    }
}
