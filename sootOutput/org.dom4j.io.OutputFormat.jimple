public class org.dom4j.io.OutputFormat extends java.lang.Object implements java.lang.Cloneable
{
    protected static final java.lang.String STANDARD_INDENT;
    private boolean suppressDeclaration;
    private boolean newLineAfterDeclaration;
    private java.lang.String encoding;
    private boolean omitEncoding;
    private java.lang.String indent;
    private boolean expandEmptyElements;
    private boolean newlines;
    private java.lang.String lineSeparator;
    private boolean trimText;
    private boolean padText;
    private boolean doXHTML;
    private int newLineAfterNTags;
    private char attributeQuoteChar;

    public void <init>()
    {
        org.dom4j.io.OutputFormat r0;

        r0 := @this: org.dom4j.io.OutputFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.OutputFormat: boolean suppressDeclaration> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newLineAfterDeclaration> = 1;

        r0.<org.dom4j.io.OutputFormat: java.lang.String encoding> = "UTF-8";

        r0.<org.dom4j.io.OutputFormat: boolean omitEncoding> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = null;

        r0.<org.dom4j.io.OutputFormat: boolean expandEmptyElements> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newlines> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String lineSeparator> = "\n";

        r0.<org.dom4j.io.OutputFormat: boolean trimText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean padText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean doXHTML> = 0;

        r0.<org.dom4j.io.OutputFormat: int newLineAfterNTags> = 0;

        r0.<org.dom4j.io.OutputFormat: char attributeQuoteChar> = 34;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.io.OutputFormat;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.OutputFormat: boolean suppressDeclaration> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newLineAfterDeclaration> = 1;

        r0.<org.dom4j.io.OutputFormat: java.lang.String encoding> = "UTF-8";

        r0.<org.dom4j.io.OutputFormat: boolean omitEncoding> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = null;

        r0.<org.dom4j.io.OutputFormat: boolean expandEmptyElements> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newlines> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String lineSeparator> = "\n";

        r0.<org.dom4j.io.OutputFormat: boolean trimText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean padText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean doXHTML> = 0;

        r0.<org.dom4j.io.OutputFormat: int newLineAfterNTags> = 0;

        r0.<org.dom4j.io.OutputFormat: char attributeQuoteChar> = 34;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = r1;

        return;
    }

    public void <init>(java.lang.String, boolean)
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.OutputFormat: boolean suppressDeclaration> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newLineAfterDeclaration> = 1;

        r0.<org.dom4j.io.OutputFormat: java.lang.String encoding> = "UTF-8";

        r0.<org.dom4j.io.OutputFormat: boolean omitEncoding> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = null;

        r0.<org.dom4j.io.OutputFormat: boolean expandEmptyElements> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newlines> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String lineSeparator> = "\n";

        r0.<org.dom4j.io.OutputFormat: boolean trimText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean padText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean doXHTML> = 0;

        r0.<org.dom4j.io.OutputFormat: int newLineAfterNTags> = 0;

        r0.<org.dom4j.io.OutputFormat: char attributeQuoteChar> = 34;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = r1;

        r0.<org.dom4j.io.OutputFormat: boolean newlines> = z0;

        return;
    }

    public void <init>(java.lang.String, boolean, java.lang.String)
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String r1, r2;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.OutputFormat: boolean suppressDeclaration> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newLineAfterDeclaration> = 1;

        r0.<org.dom4j.io.OutputFormat: java.lang.String encoding> = "UTF-8";

        r0.<org.dom4j.io.OutputFormat: boolean omitEncoding> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = null;

        r0.<org.dom4j.io.OutputFormat: boolean expandEmptyElements> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newlines> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String lineSeparator> = "\n";

        r0.<org.dom4j.io.OutputFormat: boolean trimText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean padText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean doXHTML> = 0;

        r0.<org.dom4j.io.OutputFormat: int newLineAfterNTags> = 0;

        r0.<org.dom4j.io.OutputFormat: char attributeQuoteChar> = 34;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = r1;

        r0.<org.dom4j.io.OutputFormat: boolean newlines> = z0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String encoding> = r2;

        return;
    }

    public java.lang.String getLineSeparator()
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.io.OutputFormat;

        $r1 = r0.<org.dom4j.io.OutputFormat: java.lang.String lineSeparator>;

        return $r1;
    }

    public void setLineSeparator(java.lang.String)
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.io.OutputFormat;

        r1 := @parameter0: java.lang.String;

        r0.<org.dom4j.io.OutputFormat: java.lang.String lineSeparator> = r1;

        return;
    }

    public boolean isNewlines()
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 = r0.<org.dom4j.io.OutputFormat: boolean newlines>;

        return $z0;
    }

    public void setNewlines(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean newlines> = z0;

        return;
    }

    public java.lang.String getEncoding()
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.io.OutputFormat;

        $r1 = r0.<org.dom4j.io.OutputFormat: java.lang.String encoding>;

        return $r1;
    }

    public void setEncoding(java.lang.String)
    {
        org.dom4j.io.OutputFormat r1;
        java.lang.String r0;

        r1 := @this: org.dom4j.io.OutputFormat;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        r1.<org.dom4j.io.OutputFormat: java.lang.String encoding> = r0;

     label1:
        return;
    }

    public boolean isOmitEncoding()
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 = r0.<org.dom4j.io.OutputFormat: boolean omitEncoding>;

        return $z0;
    }

    public void setOmitEncoding(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean omitEncoding> = z0;

        return;
    }

    public void setSuppressDeclaration(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean suppressDeclaration> = z0;

        return;
    }

    public boolean isSuppressDeclaration()
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 = r0.<org.dom4j.io.OutputFormat: boolean suppressDeclaration>;

        return $z0;
    }

    public void setNewLineAfterDeclaration(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean newLineAfterDeclaration> = z0;

        return;
    }

    public boolean isNewLineAfterDeclaration()
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 = r0.<org.dom4j.io.OutputFormat: boolean newLineAfterDeclaration>;

        return $z0;
    }

    public boolean isExpandEmptyElements()
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 = r0.<org.dom4j.io.OutputFormat: boolean expandEmptyElements>;

        return $z0;
    }

    public void setExpandEmptyElements(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean expandEmptyElements> = z0;

        return;
    }

    public boolean isTrimText()
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 = r0.<org.dom4j.io.OutputFormat: boolean trimText>;

        return $z0;
    }

    public void setTrimText(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean trimText> = z0;

        return;
    }

    public boolean isPadText()
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 = r0.<org.dom4j.io.OutputFormat: boolean padText>;

        return $z0;
    }

    public void setPadText(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean padText> = z0;

        return;
    }

    public java.lang.String getIndent()
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.io.OutputFormat;

        $r1 = r0.<org.dom4j.io.OutputFormat: java.lang.String indent>;

        return $r1;
    }

    public void setIndent(java.lang.String)
    {
        int $i0;
        org.dom4j.io.OutputFormat r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.io.OutputFormat;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 > 0 goto label1;

        r1 = null;

     label1:
        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = r1;

        return;
    }

    public void setIndent(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = "  ";

        goto label2;

     label1:
        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = null;

     label2:
        return;
    }

    public void setIndentSize(int)
    {
        java.lang.StringBuffer $r0;
        int i0, i1;
        org.dom4j.io.OutputFormat r1;
        java.lang.String $r2;

        r1 := @this: org.dom4j.io.OutputFormat;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        r1.<org.dom4j.io.OutputFormat: java.lang.String indent> = $r2;

        return;
    }

    public boolean isXHTML()
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 = r0.<org.dom4j.io.OutputFormat: boolean doXHTML>;

        return $z0;
    }

    public void setXHTML(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean doXHTML> = z0;

        return;
    }

    public int getNewLineAfterNTags()
    {
        int $i0;
        org.dom4j.io.OutputFormat r0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $i0 = r0.<org.dom4j.io.OutputFormat: int newLineAfterNTags>;

        return $i0;
    }

    public void setNewLineAfterNTags(int)
    {
        int i0;
        org.dom4j.io.OutputFormat r0;

        r0 := @this: org.dom4j.io.OutputFormat;

        i0 := @parameter0: int;

        r0.<org.dom4j.io.OutputFormat: int newLineAfterNTags> = i0;

        return;
    }

    public char getAttributeQuoteCharacter()
    {
        org.dom4j.io.OutputFormat r0;
        char $c0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $c0 = r0.<org.dom4j.io.OutputFormat: char attributeQuoteChar>;

        return $c0;
    }

    public void setAttributeQuoteCharacter(char)
    {
        org.dom4j.io.OutputFormat r0;
        char c0;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuffer $r3, $r4, $r5, $r7;
        int $i1, $i2;
        java.lang.String $r6;

        r0 := @this: org.dom4j.io.OutputFormat;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 39 goto label1;

        $i2 = (int) c0;

        if $i2 != 34 goto label2;

     label1:
        r0.<org.dom4j.io.OutputFormat: char attributeQuoteChar> = c0;

        goto label3;

     label2:
        $r8 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid attribute quote character (");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label3:
        return;
    }

    public int parseOptions(java.lang.String[], int)
    {
        org.dom4j.io.OutputFormat r12;
        java.lang.String[] r0;
        int i0, $i1, i2;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        r12 := @this: org.dom4j.io.OutputFormat;

        r0 := @parameter0: java.lang.String[];

        i2 := @parameter1: int;

        i0 = lengthof r0;

     label01:
        if i2 >= i0 goto label14;

        $r1 = r0[i2];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("-suppressDeclaration");

        if $z0 == 0 goto label02;

        virtualinvoke r12.<org.dom4j.io.OutputFormat: void setSuppressDeclaration(boolean)>(1);

        goto label13;

     label02:
        $r2 = r0[i2];

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-omitEncoding");

        if $z1 == 0 goto label03;

        virtualinvoke r12.<org.dom4j.io.OutputFormat: void setOmitEncoding(boolean)>(1);

        goto label13;

     label03:
        $r3 = r0[i2];

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("-indent");

        if $z2 == 0 goto label04;

        i2 = i2 + 1;

        $r16 = r0[i2];

        virtualinvoke r12.<org.dom4j.io.OutputFormat: void setIndent(java.lang.String)>($r16);

        goto label13;

     label04:
        $r4 = r0[i2];

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("-indentSize");

        if $z3 == 0 goto label05;

        i2 = i2 + 1;

        $r15 = r0[i2];

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15);

        virtualinvoke r12.<org.dom4j.io.OutputFormat: void setIndentSize(int)>($i1);

        goto label13;

     label05:
        $r5 = r0[i2];

        $z4 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("-expandEmpty");

        if $z4 == 0 goto label06;

        virtualinvoke r12.<org.dom4j.io.OutputFormat: void setExpandEmptyElements(boolean)>(1);

        goto label13;

     label06:
        $r6 = r0[i2];

        $z5 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("-encoding");

        if $z5 == 0 goto label07;

        i2 = i2 + 1;

        $r14 = r0[i2];

        virtualinvoke r12.<org.dom4j.io.OutputFormat: void setEncoding(java.lang.String)>($r14);

        goto label13;

     label07:
        $r7 = r0[i2];

        $z6 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("-newlines");

        if $z6 == 0 goto label08;

        virtualinvoke r12.<org.dom4j.io.OutputFormat: void setNewlines(boolean)>(1);

        goto label13;

     label08:
        $r8 = r0[i2];

        $z7 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("-lineSeparator");

        if $z7 == 0 goto label09;

        i2 = i2 + 1;

        $r13 = r0[i2];

        virtualinvoke r12.<org.dom4j.io.OutputFormat: void setLineSeparator(java.lang.String)>($r13);

        goto label13;

     label09:
        $r9 = r0[i2];

        $z8 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("-trimText");

        if $z8 == 0 goto label10;

        virtualinvoke r12.<org.dom4j.io.OutputFormat: void setTrimText(boolean)>(1);

        goto label13;

     label10:
        $r10 = r0[i2];

        $z9 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("-padText");

        if $z9 == 0 goto label11;

        virtualinvoke r12.<org.dom4j.io.OutputFormat: void setPadText(boolean)>(1);

        goto label13;

     label11:
        $r11 = r0[i2];

        $z10 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("-xhtml");

        if $z10 == 0 goto label12;

        virtualinvoke r12.<org.dom4j.io.OutputFormat: void setXHTML(boolean)>(1);

        goto label13;

     label12:
        return i2;

     label13:
        i2 = i2 + 1;

        goto label01;

     label14:
        return i2;
    }

    public static org.dom4j.io.OutputFormat createPrettyPrint()
    {
        org.dom4j.io.OutputFormat $r0;

        $r0 = new org.dom4j.io.OutputFormat;

        specialinvoke $r0.<org.dom4j.io.OutputFormat: void <init>()>();

        virtualinvoke $r0.<org.dom4j.io.OutputFormat: void setIndentSize(int)>(2);

        virtualinvoke $r0.<org.dom4j.io.OutputFormat: void setNewlines(boolean)>(1);

        virtualinvoke $r0.<org.dom4j.io.OutputFormat: void setTrimText(boolean)>(1);

        virtualinvoke $r0.<org.dom4j.io.OutputFormat: void setPadText(boolean)>(1);

        return $r0;
    }

    public static org.dom4j.io.OutputFormat createCompactFormat()
    {
        org.dom4j.io.OutputFormat $r0;

        $r0 = new org.dom4j.io.OutputFormat;

        specialinvoke $r0.<org.dom4j.io.OutputFormat: void <init>()>();

        virtualinvoke $r0.<org.dom4j.io.OutputFormat: void setIndent(boolean)>(0);

        virtualinvoke $r0.<org.dom4j.io.OutputFormat: void setNewlines(boolean)>(0);

        virtualinvoke $r0.<org.dom4j.io.OutputFormat: void setTrimText(boolean)>(1);

        return $r0;
    }

    public static void <clinit>()
    {
        <org.dom4j.io.OutputFormat: java.lang.String STANDARD_INDENT> = "  ";

        return;
    }
}
