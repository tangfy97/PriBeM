public final class minsolver.MinSolver$MinSolutionIterator extends java.lang.Object implements java.util.Iterator
{
    private final kodkod.engine.config.Options options;
    private final minsolver.MinExtraOptions extraOptions;
    private kodkod.ast.Formula formula;
    private kodkod.instance.Bounds origBounds;
    private boolean trivial;
    private minsolver.fol2sat.MinTranslation translation;
    private java.util.Map mapVarToRelation;
    private long translTime;
    private minsolver.MinSolution lastSolution;
    private final minsolver.MinSolver minSolver;
    private java.lang.Boolean sat;
    private minsolver.MinSolution unsatSolution;
    public minsolver.MinSolution lastSatSolutionFound;
    private java.util.Set coneRestrictionClauses;
    private java.util.Set coneRestrictionConstraints;
    private java.util.Set coneRestrictionUnits;
    private final int[] lifters;
    long parentHash;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lminsolver/MinSolver;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <minsolver.MinSolver$MinSolutionIterator: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(minsolver.MinSolver, kodkod.ast.Formula, kodkod.instance.Bounds, kodkod.engine.config.Options, minsolver.MinExtraOptions)
    {
        kodkod.engine.config.Options r4;
        minsolver.MinSolver r1;
        kodkod.instance.Bounds r3;
        minsolver.MinSolver$MinSolutionIterator r0;
        kodkod.ast.Formula r2;
        minsolver.MinExtraOptions r5;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        r1 := @parameter0: minsolver.MinSolver;

        r2 := @parameter1: kodkod.ast.Formula;

        r3 := @parameter2: kodkod.instance.Bounds;

        r4 := @parameter3: kodkod.engine.config.Options;

        r5 := @parameter4: minsolver.MinExtraOptions;

        specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: void <init>(minsolver.MinSolver,kodkod.ast.Formula,kodkod.instance.Bounds,kodkod.engine.config.Options,minsolver.MinExtraOptions,java.util.ArrayList,minsolver.MinSolver$MinSolutionIterator)>(r1, r2, r3, r4, r5, null, null);

        return;
    }

    void <init>(minsolver.MinSolver, kodkod.ast.Formula, kodkod.instance.Bounds, kodkod.engine.config.Options, minsolver.MinExtraOptions, java.util.ArrayList, minsolver.MinSolver$MinSolutionIterator)
    {
        kodkod.engine.config.Options r7;
        minsolver.MinSolver$MinSolutionIterator r0, r10;
        minsolver.fol2sat.MinTranslation $r11;
        long $l1;
        java.util.ArrayList r9;
        java.util.HashSet $r1, $r2, $r3;
        kodkod.instance.Bounds r6;
        int[] $r13;
        java.util.Map $r12;
        int $i0;
        kodkod.ast.Formula r5;
        minsolver.MinSolver r4;
        minsolver.MinExtraOptions r8;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        r4 := @parameter0: minsolver.MinSolver;

        r5 := @parameter1: kodkod.ast.Formula;

        r6 := @parameter2: kodkod.instance.Bounds;

        r7 := @parameter3: kodkod.engine.config.Options;

        r8 := @parameter4: minsolver.MinExtraOptions;

        r9 := @parameter5: java.util.ArrayList;

        r10 := @parameter6: minsolver.MinSolver$MinSolutionIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<minsolver.MinSolver$MinSolutionIterator: boolean trivial> = 0;

        r0.<minsolver.MinSolver$MinSolutionIterator: java.lang.Boolean sat> = null;

        r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution unsatSolution> = null;

        r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution lastSatSolutionFound> = null;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Set coneRestrictionClauses> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Set coneRestrictionConstraints> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Set coneRestrictionUnits> = $r3;

        r0.<minsolver.MinSolver$MinSolutionIterator: long parentHash> = 0L;

        r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolver minSolver> = r4;

        r0.<minsolver.MinSolver$MinSolutionIterator: kodkod.ast.Formula formula> = r5;

        r0.<minsolver.MinSolver$MinSolutionIterator: kodkod.instance.Bounds origBounds> = r6;

        r0.<minsolver.MinSolver$MinSolutionIterator: kodkod.engine.config.Options options> = r7;

        r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinExtraOptions extraOptions> = r8;

        r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation> = null;

        if r9 != null goto label1;

        $r13 = null;

        goto label2;

     label1:
        $r13 = staticinvoke <minsolver.MinSolver$MinSolutionIterator: int[] toIntCollection(java.util.Collection)>(r9);

     label2:
        r0.<minsolver.MinSolver$MinSolutionIterator: int[] lifters> = $r13;

        if r10 == null goto label3;

        $r11 = virtualinvoke r10.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation getTranslation()>();

        r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation> = $r11;

        $r12 = r10.<minsolver.MinSolver$MinSolutionIterator: java.util.Map mapVarToRelation>;

        r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Map mapVarToRelation> = $r12;

        $i0 = virtualinvoke r10.<java.lang.Object: int hashCode()>();

        $l1 = (long) $i0;

        r0.<minsolver.MinSolver$MinSolutionIterator: long parentHash> = $l1;

     label3:
        return;
    }

    public java.lang.String toString()
    {
        minsolver.MinSolver$MinSolutionIterator r2;
        minsolver.fol2sat.MinTranslation $r27;
        kodkod.instance.Bounds $r16;
        int[] $r21;
        java.util.Map $r37;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r8, $r10, $r12, $r13, $r15, $r17, $r18, $r20, $r23, $r24, $r26, $r28, $r29, $r31, $r33, $r34, $r36, $r38, $r39;
        long $l1;
        java.lang.StringBuffer $r0;
        int $i0, $i2, $i3;
        java.lang.String $r5, $r9, $r14, $r19, $r22, $r25, $r30, $r35, $r40, $r41;
        kodkod.ast.Formula $r11;
        minsolver.MinSolver $r32;

        r2 := @this: minsolver.MinSolver$MinSolutionIterator;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Iterator hash code:");

        $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Iterator parent\'s hash code:");

        $l1 = r2.<minsolver.MinSolver$MinSolutionIterator: long parentHash>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Iterator formula:");

        $r11 = r2.<minsolver.MinSolver$MinSolutionIterator: kodkod.ast.Formula formula>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Iterator origBounds:");

        $r16 = r2.<minsolver.MinSolver$MinSolutionIterator: kodkod.instance.Bounds origBounds>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Iterator lifters:");

        $r21 = r2.<minsolver.MinSolver$MinSolutionIterator: int[] lifters>;

        $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r21);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Iterator translation\'s num pri vars:");

        $r27 = r2.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $i2 = virtualinvoke $r27.<minsolver.fol2sat.MinTranslation: int numPrimaryVariables()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>("Iterator solver\'s hash code:");

        $r32 = r2.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolver minSolver>;

        $i3 = virtualinvoke $r32.<java.lang.Object: int hashCode()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>(java.lang.String)>("Iterator mapVarToRelation:");

        $r37 = r2.<minsolver.MinSolver$MinSolutionIterator: java.util.Map mapVarToRelation>;

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        $r41 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r41;
    }

    public boolean hasNext()
    {
        minsolver.MinSolution $r1;
        minsolver.MinSolver$MinSolutionIterator r0;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution unsatSolution>;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    private minsolver.MinSolution nonTrivialSolution()
    {
        minsolver.MinSolver$MinSolutionIterator r0;
        minsolver.fol2sat.MinTranslation $r1, $r5, $r6, $r9, $r17, $r23, $r30, $r31, $r36;
        java.lang.Integer $r25;
        kodkod.instance.Bounds $r19;
        int[] $r11, r37;
        minsolver.MinSATSolver $r2, $r10;
        boolean $z0, $z1, $z2, $z3;
        kodkod.engine.config.Reporter $r14, $r35;
        java.util.Set $r3;
        minsolver.MinSolution$MinimizationHistory $r22, r38;
        kodkod.engine.satlab.SATAbortedException $r26;
        minsolver.MinSolution $r7, $r8, $r21, $r32;
        kodkod.engine.config.Options $r13, $r34;
        long $l0, $l1, $l2, $l9, $l10, $l11, $l15;
        kodkod.instance.Instance $r18, $r20;
        java.util.HashSet $r24;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i12, $i13, $i14, i16;
        minsolver.MinStatistics $r4, $r29;
        org.sat4j.specs.ContradictionException $r28, $r33;
        minsolver.MinAbortedException $r27;
        minsolver.MyReporter r15;
        java.lang.Object $r12;
        minsolver.MinExtraOptions $r16;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

     label01:
        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r2 = virtualinvoke $r1.<minsolver.fol2sat.MinTranslation: minsolver.MinSATSolver cnf()>();

     label02:
        $r3 = r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Set coneRestrictionConstraints>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label05;

        specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: void addAllClauses()>();

     label03:
        goto label05;

     label04:
        $r33 := @caughtexception;

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object)>(null, "CONTRADICTION exception in nonTrivialSolution()");

     label05:
        $r34 = r0.<minsolver.MinSolver$MinSolutionIterator: kodkod.engine.config.Options options>;

        $r35 = virtualinvoke $r34.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        $r36 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $i12 = virtualinvoke $r36.<minsolver.fol2sat.MinTranslation: int numPrimaryVariables()>();

        $i13 = virtualinvoke $r2.<minsolver.MinSATSolver: int numberOfVariables()>();

        $i14 = virtualinvoke $r2.<minsolver.MinSATSolver: int numberOfClauses()>();

        interfaceinvoke $r35.<kodkod.engine.config.Reporter: void solvingCNF(int,int,int)>($i12, $i13, $i14);

        $l15 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label06:
        $z3 = specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: boolean solve()>();

        if $z3 == 0 goto label13;

        $r23 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $i7 = virtualinvoke $r23.<minsolver.fol2sat.MinTranslation: int numPrimaryVariables()>();

        $r24 = new java.util.HashSet;

        specialinvoke $r24.<java.util.HashSet: void <init>()>();

        i16 = 1;

        goto label09;

     label07:
        $z2 = virtualinvoke $r2.<minsolver.MinSATSolver: boolean valueOf(int)>(i16);

        if $z2 == 0 goto label08;

        $i8 = neg i16;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        interfaceinvoke $r24.<java.util.Set: boolean add(java.lang.Object)>($r25);

     label08:
        i16 = i16 + 1;

     label09:
        if i16 <= $i7 goto label07;

     label10:
        specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: void addConeRestriction(java.util.Set,minsolver.MinSATSolver)>($r24, $r2);

        specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: void addPermConeRestrictions(java.util.Set,minsolver.MinSATSolver)>($r24, $r2);

     label11:
        goto label13;

     label12:
        $r28 := @caughtexception;

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object)>(null, "Contradiction; out of models. Augmentation will be disabled.");

        $l9 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r29 = new minsolver.MinStatistics;

        $r30 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $l11 = r0.<minsolver.MinSolver$MinSolutionIterator: long translTime>;

        $l10 = $l9 - $l15;

        specialinvoke $r29.<minsolver.MinStatistics: void <init>(minsolver.fol2sat.MinTranslation,long,long)>($r30, $l11, $l10);

        $r31 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r32 = staticinvoke <minsolver.MinSolver: minsolver.MinSolution access$0(minsolver.fol2sat.MinTranslation,minsolver.MinStatistics)>($r31, $r29);

        r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution unsatSolution> = $r32;

     label13:
        if 0 == 0 goto label14;

        if $z3 != 0 goto label06;

     label14:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = new minsolver.MinStatistics;

        $r5 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $l2 = r0.<minsolver.MinSolver$MinSolutionIterator: long translTime>;

        $l1 = $l0 - $l15;

        specialinvoke $r4.<minsolver.MinStatistics: void <init>(minsolver.fol2sat.MinTranslation,long,long)>($r5, $l2, $l1);

        if $z3 == 0 goto label17;

        $r9 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r10 = virtualinvoke $r9.<minsolver.fol2sat.MinTranslation: minsolver.MinSATSolver cnf()>();

        $r11 = virtualinvoke $r10.<minsolver.MinSATSolver: int[] getLastModel()>();

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.Object clone()>();

        r37 = (int[]) $r12;

        $r13 = r0.<minsolver.MinSolver$MinSolutionIterator: kodkod.engine.config.Options options>;

        $r14 = virtualinvoke $r13.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        r15 = (minsolver.MyReporter) $r14;

        r38 = null;

        $r16 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinExtraOptions extraOptions>;

        $z1 = virtualinvoke $r16.<minsolver.MinExtraOptions: boolean logMinimizationHistory()>();

        if $z1 == 0 goto label15;

        $r22 = new minsolver.MinSolution$MinimizationHistory;

        $i3 = virtualinvoke r15.<minsolver.MyReporter: int getIterations()>();

        $i4 = virtualinvoke r15.<minsolver.MyReporter: int getReducedElements()>();

        $i5 = virtualinvoke r15.<minsolver.MyReporter: int getReducedAttributes()>();

        $i6 = virtualinvoke r15.<minsolver.MyReporter: int getReducedRelations()>();

        specialinvoke $r22.<minsolver.MinSolution$MinimizationHistory: void <init>(int,int,int,int)>($i3, $i4, $i5, $i6);

        r38 = $r22;

     label15:
        $r17 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r18 = virtualinvoke $r17.<minsolver.fol2sat.MinTranslation: kodkod.instance.Instance interpret()>();

        $r19 = r0.<minsolver.MinSolver$MinSolutionIterator: kodkod.instance.Bounds origBounds>;

        $r20 = staticinvoke <minsolver.MinSolver: kodkod.instance.Instance access$1(kodkod.instance.Instance,kodkod.instance.Bounds)>($r18, $r19);

        $r21 = staticinvoke <minsolver.MinSolution: minsolver.MinSolution satisfiable(minsolver.MinStatistics,kodkod.instance.Instance,minsolver.MinSolution$MinimizationHistory,int[])>($r4, $r20, r38, r37);

     label16:
        return $r21;

     label17:
        $r6 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r7 = staticinvoke <minsolver.MinSolver: minsolver.MinSolution access$0(minsolver.fol2sat.MinTranslation,minsolver.MinStatistics)>($r6, $r4);

        r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution unsatSolution> = $r7;

        $r8 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution unsatSolution>;

     label18:
        return $r8;

     label19:
        $r26 := @caughtexception;

        $r27 = new minsolver.MinAbortedException;

        specialinvoke $r27.<minsolver.MinAbortedException: void <init>(java.lang.Throwable)>($r26);

        throw $r27;

        catch org.sat4j.specs.ContradictionException from label02 to label03 with label04;
        catch org.sat4j.specs.ContradictionException from label10 to label11 with label12;
        catch kodkod.engine.satlab.SATAbortedException from label01 to label16 with label19;
        catch kodkod.engine.satlab.SATAbortedException from label17 to label18 with label19;
    }

    private void addConeRestriction(java.util.Set, minsolver.MinSATSolver) throws org.sat4j.specs.ContradictionException
    {
        minsolver.MinSolver$MinSolutionIterator r1;
        java.lang.Integer $r10, $r12;
        int[] $r5;
        int $i0, $i1;
        minsolver.MinSATSolver r3;
        boolean $z0, $z1;
        java.util.Iterator $r8;
        org.sat4j.specs.IConstr $r6;
        java.util.Set r0, $r2, $r4, $r7, $r11;
        java.lang.Object $r9;

        r1 := @this: minsolver.MinSolver$MinSolutionIterator;

        r0 := @parameter0: java.util.Set;

        r3 := @parameter1: minsolver.MinSATSolver;

        $i0 = interfaceinvoke r0.<java.util.Set: int size()>();

        if $i0 != 1 goto label3;

        $r8 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.Integer) $r9;

        $i1 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $r11 = r1.<minsolver.MinSolver$MinSolutionIterator: java.util.Set coneRestrictionUnits>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>($r12);

     label2:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        goto label5;

     label3:
        $r2 = r1.<minsolver.MinSolver$MinSolutionIterator: java.util.Set coneRestrictionClauses>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z0 == 0 goto label4;

        return;

     label4:
        $r4 = r1.<minsolver.MinSolver$MinSolutionIterator: java.util.Set coneRestrictionConstraints>;

        $r5 = staticinvoke <minsolver.MinSolver$MinSolutionIterator: int[] toIntCollection(java.util.Collection)>(r0);

        $r6 = virtualinvoke r3.<minsolver.MinSATSolver: org.sat4j.specs.IConstr addConstraint(int[])>($r5);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r6);

        $r7 = r1.<minsolver.MinSolver$MinSolutionIterator: java.util.Set coneRestrictionClauses>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r0);

     label5:
        return;
    }

    private void addPermConeRestrictions(java.util.Set, minsolver.MinSATSolver) throws org.sat4j.specs.ContradictionException
    {
        kodkod.engine.config.Options $r6;
        java.util.Iterator $r3;
        minsolver.MinSolver$MinSolutionIterator r0;
        java.util.Set $r2, r7, $r8;
        minsolver.fol2sat.MinTranslation $r1;
        java.util.Map r5;
        int $i0, i1;
        java.lang.Object $r4;
        minsolver.MinSATSolver r9;
        boolean $z0;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        r7 := @parameter0: java.util.Set;

        r9 := @parameter1: minsolver.MinSATSolver;

        i1 = 0;

        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r2 = $r1.<minsolver.fol2sat.MinTranslation: java.util.Set permutations>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map) $r4;

        $r6 = r0.<minsolver.MinSolver$MinSolutionIterator: kodkod.engine.config.Options options>;

        $i0 = virtualinvoke $r6.<kodkod.engine.config.Options: int symmetryBreaking()>();

        if i1 < $i0 goto label2;

        goto label4;

     label2:
        $r8 = specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Set permuteNegatedPositiveDiagram(java.util.Set,java.util.Map)>(r7, r5);

        specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: void addConeRestriction(java.util.Set,minsolver.MinSATSolver)>($r8, r9);

        i1 = i1 + 1;

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label4:
        return;
    }

    private java.util.Set permuteNegatedPositiveDiagram(java.util.Set, java.util.Map)
    {
        minsolver.MinSolver$MinSolutionIterator r13;
        java.lang.Integer r4, $r6, $r7, $r9, $r10, $r12;
        java.util.HashSet $r14;
        java.util.Map r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12, $i14;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r2;
        java.util.Set r1;
        java.lang.Object $r3, $r8, $r11;

        r13 := @this: minsolver.MinSolver$MinSolutionIterator;

        r1 := @parameter0: java.util.Set;

        r5 := @parameter1: java.util.Map;

        $r14 = new java.util.HashSet;

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        specialinvoke $r14.<java.util.HashSet: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        if $i1 <= 0 goto label2;

        $z1 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r12 = (java.lang.Integer) $r11;

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r12);

        goto label4;

     label2:
        $i2 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        if $i2 >= 0 goto label3;

        $i3 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $i10 = (int) -1;

        $i4 = $i3 * $i10;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $z0 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        $i5 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $i12 = (int) -1;

        $i6 = $i5 * $i12;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r8 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r9 = (java.lang.Integer) $r8;

        $i7 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $i14 = (int) -1;

        $i8 = $i7 * $i14;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r10);

        goto label4;

     label3:
        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>(r4);

     label4:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        return $r14;
    }

    private minsolver.MinSolution trivialSolution(minsolver.fol2sat.MinTrivialFormulaException)
    {
        kodkod.engine.bool.BooleanConstant $r3;
        minsolver.MinSolver$MinSolutionIterator r1;
        long $l0;
        minsolver.MinProof $r5;
        kodkod.instance.Instance $r9, $r11;
        kodkod.instance.Bounds $r8, $r10;
        minsolver.MinStatistics $r0;
        minsolver.fol2sat.MinTranslationLog $r4;
        boolean $z0;
        minsolver.fol2sat.MinTrivialFormulaException r2;
        minsolver.MinSolution $r6, $r7, $r12, $r13;

        r1 := @this: minsolver.MinSolver$MinSolutionIterator;

        r2 := @parameter0: minsolver.fol2sat.MinTrivialFormulaException;

        $r0 = new minsolver.MinStatistics;

        $l0 = r1.<minsolver.MinSolver$MinSolutionIterator: long translTime>;

        specialinvoke $r0.<minsolver.MinStatistics: void <init>(int,int,int,long,long)>(0, 0, 0, $l0, 0L);

        r1.<minsolver.MinSolver$MinSolutionIterator: boolean trivial> = 1;

        $r3 = virtualinvoke r2.<minsolver.fol2sat.MinTrivialFormulaException: kodkod.engine.bool.BooleanConstant value()>();

        $z0 = virtualinvoke $r3.<kodkod.engine.bool.BooleanConstant: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r2.<minsolver.fol2sat.MinTrivialFormulaException: kodkod.instance.Bounds bounds()>();

        $r9 = staticinvoke <minsolver.MinSolver: kodkod.instance.Instance access$2(kodkod.instance.Bounds)>($r8);

        $r10 = r1.<minsolver.MinSolver$MinSolutionIterator: kodkod.instance.Bounds origBounds>;

        $r11 = staticinvoke <minsolver.MinSolver: kodkod.instance.Instance access$1(kodkod.instance.Instance,kodkod.instance.Bounds)>($r9, $r10);

        $r12 = staticinvoke <minsolver.MinSolution: minsolver.MinSolution triviallySatisfiable(minsolver.MinStatistics,kodkod.instance.Instance,minsolver.MinSolution$MinimizationHistory,int[])>($r0, $r11, null, null);

        $r13 = staticinvoke <minsolver.MinSolution: minsolver.MinSolution triviallyUnsatisfiable(minsolver.MinStatistics,minsolver.MinProof,minsolver.MinSolution$MinimizationHistory,int[])>($r0, null, null, null);

        r1.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution unsatSolution> = $r13;

        return $r12;

     label1:
        $r4 = virtualinvoke r2.<minsolver.fol2sat.MinTrivialFormulaException: minsolver.fol2sat.MinTranslationLog log()>();

        $r5 = staticinvoke <minsolver.MinSolver: minsolver.MinProof access$3(minsolver.fol2sat.MinTranslationLog)>($r4);

        $r6 = staticinvoke <minsolver.MinSolution: minsolver.MinSolution triviallyUnsatisfiable(minsolver.MinStatistics,minsolver.MinProof,minsolver.MinSolution$MinimizationHistory,int[])>($r0, $r5, null, null);

        r1.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution unsatSolution> = $r6;

        $r7 = r1.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution unsatSolution>;

        return $r7;
    }

    public minsolver.MinSolution next()
    {
        kodkod.engine.config.Options $r3, $r7;
        minsolver.MinSolver$MinSolutionIterator r0;
        minsolver.fol2sat.MinTranslation $r1, $r6, $r8;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6;
        kodkod.instance.Bounds $r4, $r11;
        java.util.Map $r12;
        boolean $z0;
        minsolver.fol2sat.MinTrivialFormulaException $r15;
        kodkod.ast.Formula $r5;
        kodkod.engine.config.Reporter $r9;
        minsolver.MinSolution $r2, $r13, $r14, $r16, $r17;
        minsolver.MyReporter $r10;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        $z0 = virtualinvoke r0.<minsolver.MinSolver$MinSolutionIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r14 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution unsatSolution>;

        return $r14;

     label1:
        specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: void claimSATSolver()>();

        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        if $r1 != null goto label5;

     label2:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<minsolver.MinSolver$MinSolutionIterator: long translTime> = $l0;

        $r5 = r0.<minsolver.MinSolver$MinSolutionIterator: kodkod.ast.Formula formula>;

        $r4 = r0.<minsolver.MinSolver$MinSolutionIterator: kodkod.instance.Bounds origBounds>;

        $r3 = r0.<minsolver.MinSolver$MinSolutionIterator: kodkod.engine.config.Options options>;

        $r6 = staticinvoke <minsolver.fol2sat.MinTranslator: minsolver.fol2sat.MinTranslation translate(kodkod.ast.Formula,kodkod.instance.Bounds,kodkod.engine.config.Options)>($r5, $r4, $r3);

        r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation> = $r6;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = r0.<minsolver.MinSolver$MinSolutionIterator: long translTime>;

        $l3 = $l1 - $l2;

        r0.<minsolver.MinSolver$MinSolutionIterator: long translTime> = $l3;

        $r8 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r7 = r0.<minsolver.MinSolver$MinSolutionIterator: kodkod.engine.config.Options options>;

        $r9 = virtualinvoke $r7.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        $r10 = (minsolver.MyReporter) $r9;

        $r11 = $r10.<minsolver.MyReporter: kodkod.instance.Bounds skolemBounds>;

        $r12 = staticinvoke <minsolver.MinSolver$MinTwoWayTranslator: java.util.Map access$0(minsolver.fol2sat.MinTranslation,kodkod.instance.Bounds)>($r8, $r11);

        r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Map mapVarToRelation> = $r12;

        $r13 = specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution nonTrivialSolution()>();

        specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: void setLastSolution(minsolver.MinSolution)>($r13);

     label3:
        goto label6;

     label4:
        $r15 := @caughtexception;

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = r0.<minsolver.MinSolver$MinSolutionIterator: long translTime>;

        $l6 = $l4 - $l5;

        r0.<minsolver.MinSolver$MinSolutionIterator: long translTime> = $l6;

        $r16 = specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution trivialSolution(minsolver.fol2sat.MinTrivialFormulaException)>($r15);

        specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: void setLastSolution(minsolver.MinSolution)>($r16);

        goto label6;

     label5:
        $r2 = specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution nonTrivialSolution()>();

        specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: void setLastSolution(minsolver.MinSolution)>($r2);

     label6:
        $r17 = specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution getLastSolution()>();

        return $r17;

        catch minsolver.fol2sat.MinTrivialFormulaException from label2 to label3 with label4;
    }

    private void claimSATSolver()
    {
        minsolver.MinSolver$MinSolutionIterator r0, $r2, $r8, $r10;
        minsolver.fol2sat.MinTranslation $r3, $r5, $r14;
        minsolver.MinSATSolver $r4, $r6;
        boolean $z0, $z1;
        org.sat4j.specs.ContradictionException $r12;
        java.util.Set $r11;
        minsolver.MinSolver $r1, $r7, $r9, $r13;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolver minSolver>;

        $r2 = staticinvoke <minsolver.MinSolver: minsolver.MinSolver$MinSolutionIterator access$4(minsolver.MinSolver)>($r1);

        if $r2 == null goto label4;

        $r7 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolver minSolver>;

        $r8 = staticinvoke <minsolver.MinSolver: minsolver.MinSolver$MinSolutionIterator access$4(minsolver.MinSolver)>($r7);

        if $r8 == r0 goto label4;

        $r9 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolver minSolver>;

        $r10 = staticinvoke <minsolver.MinSolver: minsolver.MinSolver$MinSolutionIterator access$4(minsolver.MinSolver)>($r9);

        specialinvoke $r10.<minsolver.MinSolver$MinSolutionIterator: void removeAllConstraints()>();

     label1:
        $r11 = r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Set coneRestrictionConstraints>;

        $z1 = interfaceinvoke $r11.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: void addAllClauses()>();

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object)>(null, "CONTRADICTION exception in claimSATSolver()");

     label4:
        $r13 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolver minSolver>;

        staticinvoke <minsolver.MinSolver: void access$5(minsolver.MinSolver,minsolver.MinSolver$MinSolutionIterator)>($r13, r0);

        $r14 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        if $r14 == null goto label6;

        $z0 = specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: boolean isAugmented()>();

        if $z0 == 0 goto label5;

        $r5 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r6 = virtualinvoke $r5.<minsolver.fol2sat.MinTranslation: minsolver.MinSATSolver cnf()>();

        virtualinvoke $r6.<minsolver.MinSATSolver: boolean deactivateSBP()>();

        goto label6;

     label5:
        $r3 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r4 = virtualinvoke $r3.<minsolver.fol2sat.MinTranslation: minsolver.MinSATSolver cnf()>();

        virtualinvoke $r4.<minsolver.MinSATSolver: boolean activateSBP()>();

     label6:
        return;

        catch org.sat4j.specs.ContradictionException from label1 to label2 with label3;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSolver$MinSolutionIterator r1;

        r1 := @this: minsolver.MinSolver$MinSolutionIterator;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    private boolean solve()
    {
        minsolver.MinSolver$MinSolutionIterator r0;
        minsolver.fol2sat.MinTranslation $r5, $r10;
        java.util.HashSet $r1;
        int[] $r2, $r7;
        int $i0;
        java.lang.Boolean $r8, $r9, $r12, $r16;
        minsolver.MinSATSolver $r6, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.sat4j.specs.ContradictionException $r15;
        java.util.Set $r3, $r4;
        java.lang.RuntimeException $r14;
        org.sat4j.specs.TimeoutException $r13;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        $z0 = virtualinvoke r0.<minsolver.MinSolver$MinSolutionIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = r0.<minsolver.MinSolver$MinSolutionIterator: int[] lifters>;

        $r3 = staticinvoke <minsolver.MinSolver$MinSolutionIterator: java.util.Set toSet(int[])>($r2);

        interfaceinvoke $r1.<java.util.Set: boolean addAll(java.util.Collection)>($r3);

        $r4 = r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Set coneRestrictionUnits>;

        interfaceinvoke $r1.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 != 0 goto label2;

        $r10 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r11 = virtualinvoke $r10.<minsolver.fol2sat.MinTranslation: minsolver.MinSATSolver cnf()>();

        $z3 = virtualinvoke $r11.<minsolver.MinSATSolver: boolean solve()>();

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        r0.<minsolver.MinSolver$MinSolutionIterator: java.lang.Boolean sat> = $r12;

        goto label3;

     label2:
        $r5 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r6 = virtualinvoke $r5.<minsolver.fol2sat.MinTranslation: minsolver.MinSATSolver cnf()>();

        $r7 = staticinvoke <minsolver.MinSolver$MinSolutionIterator: int[] toIntCollection(java.util.Collection)>($r1);

        $z1 = virtualinvoke $r6.<minsolver.MinSATSolver: boolean solve(int[])>($r7);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        r0.<minsolver.MinSolver$MinSolutionIterator: java.lang.Boolean sat> = $r8;

     label3:
        $r9 = r0.<minsolver.MinSolver$MinSolutionIterator: java.lang.Boolean sat>;

        $z2 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == 0 goto label7;

     label4:
        specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: void minimize()>();

     label5:
        goto label7;

     label6:
        $r15 := @caughtexception;

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object)>(null, "CONTRADICTION exception in minimize() call");

     label7:
        $r16 = r0.<minsolver.MinSolver$MinSolutionIterator: java.lang.Boolean sat>;

        $z4 = virtualinvoke $r16.<java.lang.Boolean: boolean booleanValue()>();

     label8:
        return $z4;

     label9:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>("timed out");

        throw $r14;

        catch org.sat4j.specs.ContradictionException from label4 to label5 with label6;
        catch org.sat4j.specs.TimeoutException from label1 to label8 with label9;
    }

    private void minimize() throws org.sat4j.specs.TimeoutException, org.sat4j.specs.ContradictionException
    {
        minsolver.MinSolver$MinSolutionIterator r0;
        minsolver.fol2sat.MinTranslation $r8, $r31;
        java.lang.Integer $r10, $r11, $r25, r29;
        int[] $r3, $r12, $r14, $r22, $r26, r28, r32;
        minsolver.MinSATSolver $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        kodkod.engine.config.Reporter $r17;
        java.util.Set $r4, $r5;
        kodkod.engine.config.Options $r16;
        java.util.ArrayList $r30;
        java.util.HashSet $r2;
        int $i0, $i1, $i2, $i3, i4, $i5, i6;
        java.lang.Boolean $r15;
        java.util.Iterator $r6, $r19;
        org.sat4j.specs.IConstr $r13, $r21;
        minsolver.MyReporter $r18;
        java.lang.Object $r7, $r20, $r23, $r24, $r27;
        minsolver.MinExtraOptions $r1;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinExtraOptions extraOptions>;

        $z0 = virtualinvoke $r1.<minsolver.MinExtraOptions: boolean logMinimizationHistory()>();

        r28 = (int[]) null;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = r0.<minsolver.MinSolver$MinSolutionIterator: int[] lifters>;

        $r4 = staticinvoke <minsolver.MinSolver$MinSolutionIterator: java.util.Set toSet(int[])>($r3);

        $r5 = r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Set coneRestrictionUnits>;

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label02;

     label01:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r29 = (java.lang.Integer) $r7;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r29);

     label02:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label01;

        $r8 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r9 = virtualinvoke $r8.<minsolver.fol2sat.MinTranslation: minsolver.MinSATSolver cnf()>();

        if $z0 == 0 goto label03;

        $r26 = virtualinvoke $r9.<minsolver.MinSATSolver: int[] getLastModel()>();

        $r27 = virtualinvoke $r26.<java.lang.Object: java.lang.Object clone()>();

        r28 = (int[]) $r27;

     label03:
        virtualinvoke $r9.<minsolver.MinSATSolver: boolean deactivateSBP()>();

        i4 = 1;

     label04:
        $r30 = new java.util.ArrayList;

        specialinvoke $r30.<java.util.ArrayList: void <init>()>();

        $r31 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $i5 = virtualinvoke $r31.<minsolver.fol2sat.MinTranslation: int numPrimaryVariables()>();

        i6 = 1;

        goto label08;

     label05:
        $z2 = virtualinvoke $r9.<minsolver.MinSATSolver: boolean valueOf(int)>(i6);

        if $z2 == 0 goto label06;

        $i1 = neg i6;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r30.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label07;

     label06:
        $i0 = neg i6;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r10);

     label07:
        i6 = i6 + 1;

     label08:
        if i6 <= $i5 goto label05;

        $i2 = interfaceinvoke $r30.<java.util.List: int size()>();

        if $i2 != 0 goto label09;

        goto label12;

     label09:
        $i3 = interfaceinvoke $r30.<java.util.List: int size()>();

        if $i3 != 1 goto label10;

        $r24 = interfaceinvoke $r30.<java.util.List: java.lang.Object get(int)>(0);

        $r25 = (java.lang.Integer) $r24;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r25);

        goto label11;

     label10:
        $r12 = staticinvoke <minsolver.MinSolver$MinSolutionIterator: int[] toIntCollection(java.util.Collection)>($r30);

        $r13 = virtualinvoke $r9.<minsolver.MinSATSolver: org.sat4j.specs.IConstr addConstraint(int[])>($r12);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r13);

     label11:
        i4 = i4 + 1;

        $r14 = staticinvoke <minsolver.MinSolver$MinSolutionIterator: int[] toIntCollection(java.util.Collection)>($r4);

        $z3 = virtualinvoke $r9.<minsolver.MinSATSolver: boolean solve(int[])>($r14);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        $z4 = virtualinvoke $r15.<java.lang.Boolean: boolean booleanValue()>();

        if $z4 != 0 goto label04;

     label12:
        if $z0 == 0 goto label13;

        $r22 = virtualinvoke $r9.<minsolver.MinSATSolver: int[] getLastModel()>();

        $r23 = virtualinvoke $r22.<java.lang.Object: java.lang.Object clone()>();

        r32 = (int[]) $r23;

        specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: void computeDifference(int[],int[])>(r28, r32);

     label13:
        $r16 = r0.<minsolver.MinSolver$MinSolutionIterator: kodkod.engine.config.Options options>;

        $r17 = virtualinvoke $r16.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        $r18 = (minsolver.MyReporter) $r17;

        virtualinvoke $r18.<minsolver.MyReporter: void setIterations(int)>(i4);

        $z5 = specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: boolean isAugmented()>();

        if $z5 != 0 goto label14;

        virtualinvoke $r9.<minsolver.MinSATSolver: boolean activateSBP()>();

     label14:
        $r19 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label16;

     label15:
        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        $r21 = (org.sat4j.specs.IConstr) $r20;

        virtualinvoke $r9.<minsolver.MinSATSolver: boolean removeConstraint(org.sat4j.specs.IConstr)>($r21);

     label16:
        $z6 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label15;

        return;
    }

    private void computeDifference(int[], int[])
    {
        minsolver.MinSolver$MinSolutionIterator r0;
        minsolver.fol2sat.MinTranslation $r8, $r24;
        kodkod.instance.Bounds $r7;
        int[] r10, r11;
        java.util.Map $r6;
        boolean $z0, $z1;
        kodkod.engine.config.Reporter $r2;
        java.util.Set $r18, $r21;
        kodkod.ast.Relation $r13, $r15;
        kodkod.engine.config.Options $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, $i11;
        java.util.LinkedHashSet $r4, $r5;
        kodkod.instance.TupleSet $r17, $r20;
        java.util.Map$Entry $r9;
        java.util.Iterator $r22;
        minsolver.MyReporter r3;
        java.lang.Object $r12, $r14, $r16, $r19, $r23;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        r10 := @parameter0: int[];

        r11 := @parameter1: int[];

        i7 = 0;

        i8 = 0;

        i9 = 0;

        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: kodkod.engine.config.Options options>;

        $r2 = virtualinvoke $r1.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        r3 = (minsolver.MyReporter) $r2;

        $r4 = new java.util.LinkedHashSet;

        specialinvoke $r4.<java.util.LinkedHashSet: void <init>()>();

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>()>();

        i10 = 0;

        goto label6;

     label1:
        $r8 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r7 = r3.<minsolver.MyReporter: kodkod.instance.Bounds skolemBounds>;

        $r6 = r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Map mapVarToRelation>;

        $i0 = i10 + 1;

        $r9 = staticinvoke <minsolver.MinSolver$MinTwoWayTranslator: java.util.Map$Entry access$1(minsolver.fol2sat.MinTranslation,kodkod.instance.Bounds,java.util.Map,int)>($r8, $r7, $r6, $i0);

        $i1 = r10[i10];

        if $i1 <= 0 goto label2;

        $r19 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (kodkod.instance.TupleSet) $r19;

        $r21 = staticinvoke <minsolver.MinSolver$MinSolutionIterator: java.util.Set getAtoms(kodkod.instance.TupleSet)>($r20);

        interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>($r21);

     label2:
        $i2 = r11[i10];

        if $i2 <= 0 goto label3;

        $r16 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (kodkod.instance.TupleSet) $r16;

        $r18 = staticinvoke <minsolver.MinSolver$MinSolutionIterator: java.util.Set getAtoms(kodkod.instance.TupleSet)>($r17);

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r18);

     label3:
        $i3 = r10[i10];

        if $i3 <= 0 goto label5;

        $i4 = r11[i10];

        if $i4 >= 0 goto label5;

        $r12 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (kodkod.ast.Relation) $r12;

        $i5 = virtualinvoke $r13.<kodkod.ast.Relation: int arity()>();

        if $i5 != 1 goto label4;

        i8 = i8 + 1;

        goto label5;

     label4:
        $r14 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = (kodkod.ast.Relation) $r14;

        $i6 = virtualinvoke $r15.<kodkod.ast.Relation: int arity()>();

        if $i6 <= 1 goto label5;

        i9 = i9 + 1;

     label5:
        i10 = i10 + 1;

     label6:
        $r24 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $i11 = virtualinvoke $r24.<minsolver.fol2sat.MinTranslation: int numPrimaryVariables()>();

        if i10 < $i11 goto label1;

        $r22 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label8;

     label7:
        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r23);

        if $z0 != 0 goto label8;

        i7 = i7 + 1;

     label8:
        $z1 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label7;

        virtualinvoke r3.<minsolver.MyReporter: void setReducedElements(int)>(i7);

        virtualinvoke r3.<minsolver.MyReporter: void setReducedAttributes(int)>(i8);

        virtualinvoke r3.<minsolver.MyReporter: void setReducedRelations(int)>(i9);

        return;
    }

    public int[] getLifters() throws org.sat4j.specs.TimeoutException, org.sat4j.specs.ContradictionException
    {
        minsolver.MinSolver$MinSolutionIterator r0;
        minsolver.fol2sat.MinTranslation $r1, $r6;
        java.lang.Integer $r9, $r10, r22, r23;
        int[] $r8, $r14, $r15, $r19;
        minsolver.MinSATSolver $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        minsolver.MinSolution $r7;
        java.lang.AssertionError $r20;
        java.util.ArrayList $r11;
        java.util.HashSet $r3, $r4, $r5, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.util.Iterator $r12, $r17;
        org.sat4j.specs.IConstr r21;
        java.lang.Object $r13, $r18;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        $z0 = <minsolver.MinSolver$MinSolutionIterator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z5 = r0.<minsolver.MinSolver$MinSolutionIterator: boolean trivial>;

        if $z5 == 0 goto label01;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label01:
        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r2 = virtualinvoke $r1.<minsolver.fol2sat.MinTranslation: minsolver.MinSATSolver cnf()>();

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: void claimSATSolver()>();

        specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: void removeAllConstraints()>();

        virtualinvoke $r2.<minsolver.MinSATSolver: boolean deactivateSBP()>();

        $r6 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $i0 = virtualinvoke $r6.<minsolver.fol2sat.MinTranslation: int numPrimaryVariables()>();

        $r7 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution lastSatSolutionFound>;

        $r8 = virtualinvoke $r7.<minsolver.MinSolution: int[] getPropositionalModel()>();

        i6 = 1;

        goto label05;

     label02:
        $i1 = i6 - 1;

        $i2 = $r8[$i1];

        if $i2 <= 0 goto label03;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r10);

        goto label04;

     label03:
        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label04:
        i6 = i6 + 1;

     label05:
        if i6 <= $i0 goto label02;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

     label06:
        r21 = null;

        $i3 = interfaceinvoke $r3.<java.util.Set: int size()>();

        if $i3 <= 1 goto label07;

        $r19 = staticinvoke <minsolver.MinSolver$MinSolutionIterator: int[] toIntCollection(java.util.Collection)>($r3);

        r21 = virtualinvoke $r2.<minsolver.MinSATSolver: org.sat4j.specs.IConstr addConstraint(int[])>($r19);

        goto label10;

     label07:
        $r12 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label09;

     label08:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.lang.Integer) $r13;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r22);

     label09:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label08;

     label10:
        $r14 = staticinvoke <minsolver.MinSolver$MinSolutionIterator: int[] toIntCollection(java.util.Collection)>($r11);

        $z2 = virtualinvoke $r2.<minsolver.MinSATSolver: boolean solve(int[])>($r14);

        if $z2 == 0 goto label13;

        $r16 = new java.util.HashSet;

        specialinvoke $r16.<java.util.HashSet: void <init>()>();

        $r17 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label12;

     label11:
        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.lang.Integer) $r18;

        $i5 = virtualinvoke r23.<java.lang.Integer: int intValue()>();

        $z4 = virtualinvoke $r2.<minsolver.MinSATSolver: boolean valueOf(int)>($i5);

        if $z4 == 0 goto label12;

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>(r23);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r23);

     label12:
        $z6 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label11;

        interfaceinvoke $r3.<java.util.Set: boolean removeAll(java.util.Collection)>($r16);

     label13:
        if r21 == null goto label14;

        virtualinvoke $r2.<minsolver.MinSATSolver: boolean removeConstraint(org.sat4j.specs.IConstr)>(r21);

     label14:
        $i4 = interfaceinvoke $r3.<java.util.Set: int size()>();

        if $i4 <= 0 goto label15;

        if $z2 != 0 goto label06;

     label15:
        $z3 = specialinvoke r0.<minsolver.MinSolver$MinSolutionIterator: boolean isAugmented()>();

        if $z3 != 0 goto label16;

        virtualinvoke $r2.<minsolver.MinSATSolver: boolean activateSBP()>();

     label16:
        $r15 = staticinvoke <minsolver.MinSolver$MinSolutionIterator: int[] toIntCollection(java.util.Collection)>($r4);

        return $r15;
    }

    public minsolver.fol2sat.MinTranslation getTranslation()
    {
        minsolver.fol2sat.MinTranslation $r1;
        minsolver.MinSolver$MinSolutionIterator r0;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        return $r1;
    }

    private minsolver.MinSolution getLastSolution()
    {
        minsolver.MinSolution $r1;
        minsolver.MinSolver$MinSolutionIterator r0;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution lastSolution>;

        return $r1;
    }

    private void setLastSolution(minsolver.MinSolution)
    {
        kodkod.instance.Instance $r1;
        minsolver.MinSolution r0;
        minsolver.MinSolver$MinSolutionIterator r2;

        r2 := @this: minsolver.MinSolver$MinSolutionIterator;

        r0 := @parameter0: minsolver.MinSolution;

        if r0 == null goto label1;

        r2.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution lastSolution> = r0;

     label1:
        $r1 = virtualinvoke r0.<minsolver.MinSolution: kodkod.instance.Instance instance()>();

        if $r1 == null goto label2;

        r2.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution lastSatSolutionFound> = r0;

     label2:
        return;
    }

    private boolean isAugmented()
    {
        int[] $r1, $r2;
        minsolver.MinSolver$MinSolutionIterator r0;
        int $i0;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: int[] lifters>;

        if $r1 == null goto label1;

        $r2 = r0.<minsolver.MinSolver$MinSolutionIterator: int[] lifters>;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void addAllClauses() throws org.sat4j.specs.ContradictionException
    {
        java.util.Iterator $r2;
        minsolver.MinSolver$MinSolutionIterator r0;
        org.sat4j.specs.IConstr $r9;
        java.util.Set $r1, r4, $r6;
        minsolver.fol2sat.MinTranslation $r5;
        int[] $r8;
        java.lang.Object $r3;
        minsolver.MinSATSolver $r7;
        boolean $z0;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Set coneRestrictionClauses>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Set) $r3;

        $r6 = r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Set coneRestrictionConstraints>;

        $r5 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r7 = virtualinvoke $r5.<minsolver.fol2sat.MinTranslation: minsolver.MinSATSolver cnf()>();

        $r8 = staticinvoke <minsolver.MinSolver$MinSolutionIterator: int[] toIntCollection(java.util.Collection)>(r4);

        $r9 = virtualinvoke $r7.<minsolver.MinSATSolver: org.sat4j.specs.IConstr addConstraint(int[])>($r8);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private void removeAllConstraints()
    {
        java.util.Iterator $r2;
        minsolver.MinSolver$MinSolutionIterator r0;
        org.sat4j.specs.IConstr r4;
        java.util.Set $r1;
        minsolver.fol2sat.MinTranslation $r5;
        java.lang.Object $r3;
        minsolver.MinSATSolver $r6;
        boolean $z0;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Set coneRestrictionConstraints>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.IConstr) $r3;

        $r5 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        $r6 = virtualinvoke $r5.<minsolver.fol2sat.MinTranslation: minsolver.MinSATSolver cnf()>();

        virtualinvoke $r6.<minsolver.MinSATSolver: boolean removeConstraint(org.sat4j.specs.IConstr)>(r4);

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private static int[] toIntCollection(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        java.lang.Integer r4;
        int[] r1;
        int $i0, $i1, i2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (int)[$i0];

        i2 = 0;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        r1[i2] = $i1;

        i2 = i2 + 1;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return r1;
    }

    private static java.util.Set toSet(int[])
    {
        java.util.HashSet $r0;
        int[] r1;
        int $i0, $i1, i2;
        java.lang.Integer $r2;

        r1 := @parameter0: int[];

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        if r1 == null goto label3;

        i2 = 0;

        goto label2;

     label1:
        $i1 = r1[i2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r2);

        i2 = i2 + 1;

     label2:
        $i0 = lengthof r1;

        if i2 < $i0 goto label1;

     label3:
        return $r0;
    }

    private static java.util.Set getAtoms(kodkod.instance.TupleSet)
    {
        kodkod.instance.Tuple r4;
        java.util.Iterator $r2;
        java.util.HashSet $r0;
        int $i0, i1;
        java.lang.Object $r3, $r5;
        kodkod.instance.TupleSet r1;
        boolean $z0;

        r1 := @parameter0: kodkod.instance.TupleSet;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = virtualinvoke r1.<kodkod.instance.TupleSet: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (kodkod.instance.Tuple) $r3;

        i1 = 0;

        goto label3;

     label2:
        $r5 = virtualinvoke r4.<kodkod.instance.Tuple: java.lang.Object atom(int)>(i1);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r5);

        i1 = i1 + 1;

     label3:
        $i0 = virtualinvoke r4.<kodkod.instance.Tuple: int arity()>();

        if i1 < $i0 goto label2;

     label4:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r0;
    }

    public volatile java.lang.Object next()
    {
        minsolver.MinSolution $r1;
        minsolver.MinSolver$MinSolutionIterator r0;

        r0 := @this: minsolver.MinSolver$MinSolutionIterator;

        $r1 = virtualinvoke r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.MinSolution next()>();

        return $r1;
    }

    static boolean access$1(minsolver.MinSolver$MinSolutionIterator)
    {
        minsolver.MinSolver$MinSolutionIterator r0;
        boolean $z0;

        r0 := @parameter0: minsolver.MinSolver$MinSolutionIterator;

        $z0 = r0.<minsolver.MinSolver$MinSolutionIterator: boolean trivial>;

        return $z0;
    }

    static minsolver.fol2sat.MinTranslation access$2(minsolver.MinSolver$MinSolutionIterator)
    {
        minsolver.fol2sat.MinTranslation $r1;
        minsolver.MinSolver$MinSolutionIterator r0;

        r0 := @parameter0: minsolver.MinSolver$MinSolutionIterator;

        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: minsolver.fol2sat.MinTranslation translation>;

        return $r1;
    }

    static kodkod.engine.config.Options access$3(minsolver.MinSolver$MinSolutionIterator)
    {
        kodkod.engine.config.Options $r1;
        minsolver.MinSolver$MinSolutionIterator r0;

        r0 := @parameter0: minsolver.MinSolver$MinSolutionIterator;

        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: kodkod.engine.config.Options options>;

        return $r1;
    }

    static java.util.Map access$4(minsolver.MinSolver$MinSolutionIterator)
    {
        minsolver.MinSolver$MinSolutionIterator r0;
        java.util.Map $r1;

        r0 := @parameter0: minsolver.MinSolver$MinSolutionIterator;

        $r1 = r0.<minsolver.MinSolver$MinSolutionIterator: java.util.Map mapVarToRelation>;

        return $r1;
    }
}
