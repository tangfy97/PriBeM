final class com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4 extends java.lang.Object implements com.mycila.inject.internal.cglib.core.ProcessSwitchCallback
{
    private final java.util.List val$info;
    private final com.mycila.inject.internal.cglib.core.CodeEmitter val$e;
    private final int val$arg;
    private final com.mycila.inject.internal.asm.Type val$base;
    private final com.mycila.inject.internal.asm.Label val$illegalArg;

    void <init>(java.util.List, com.mycila.inject.internal.cglib.core.CodeEmitter, int, com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.asm.Label)
    {
        java.util.List r1;
        int i0;
        com.mycila.inject.internal.asm.Label r4;
        com.mycila.inject.internal.asm.Type r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter r2;
        com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4 r0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter2: int;

        r3 := @parameter3: com.mycila.inject.internal.asm.Type;

        r4 := @parameter4: com.mycila.inject.internal.asm.Label;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: java.util.List val$info> = r1;

        r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: com.mycila.inject.internal.cglib.core.CodeEmitter val$e> = r2;

        r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: int val$arg> = i0;

        r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: com.mycila.inject.internal.asm.Type val$base> = r3;

        r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: com.mycila.inject.internal.asm.Label val$illegalArg> = r4;

        return;
    }

    public void processCase(int, com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Type $r6, $r11, $r14;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r7, $r8, $r9, $r12, $r13, $r15;
        com.mycila.inject.internal.cglib.core.MethodInfo r3;
        int i0, $i1, $i2, i3;
        com.mycila.inject.internal.asm.Type[] $r5;
        boolean $z0;
        com.mycila.inject.internal.cglib.core.Signature $r4, $r10;
        java.util.List $r1;
        com.mycila.inject.internal.asm.Label r16;
        java.lang.Object $r2;
        com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4 r0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4;

        i0 := @parameter0: int;

        r16 := @parameter1: com.mycila.inject.internal.asm.Label;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: java.util.List val$info>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (com.mycila.inject.internal.cglib.core.MethodInfo) $r2;

        $r4 = virtualinvoke r3.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type[] getArgumentTypes()>();

        i3 = 0;

     label1:
        $i1 = lengthof $r5;

        if i3 >= $i1 goto label2;

        $r12 = r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $i2 = r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: int val$arg>;

        virtualinvoke $r12.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>($i2);

        $r13 = r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r13.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aaload(int)>(i3);

        $r15 = r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $r14 = $r5[i3];

        virtualinvoke $r15.<com.mycila.inject.internal.cglib.core.CodeEmitter: void unbox(com.mycila.inject.internal.asm.Type)>($r14);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r7 = r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $r6 = r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: com.mycila.inject.internal.asm.Type val$base>;

        virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke(com.mycila.inject.internal.cglib.core.MethodInfo,com.mycila.inject.internal.asm.Type)>(r3, $r6);

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isConstructor(com.mycila.inject.internal.cglib.core.MethodInfo)>(r3);

        if $z0 != 0 goto label3;

        $r9 = r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $r10 = virtualinvoke r3.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r11 = virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type getReturnType()>();

        virtualinvoke $r9.<com.mycila.inject.internal.cglib.core.CodeEmitter: void box(com.mycila.inject.internal.asm.Type)>($r11);

     label3:
        $r8 = r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        return;
    }

    public void processDefault()
    {
        com.mycila.inject.internal.asm.Label $r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4 r0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4;

        $r2 = r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.FastClassEmitter$4: com.mycila.inject.internal.asm.Label val$illegalArg>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void goTo(com.mycila.inject.internal.asm.Label)>($r1);

        return;
    }
}
