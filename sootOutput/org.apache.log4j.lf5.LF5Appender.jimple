public class org.apache.log4j.lf5.LF5Appender extends org.apache.log4j.AppenderSkeleton
{
    protected org.apache.log4j.lf5.viewer.LogBrokerMonitor _logMonitor;
    protected static org.apache.log4j.lf5.viewer.LogBrokerMonitor _defaultLogMonitor;
    protected static org.apache.log4j.lf5.AppenderFinalizer _finalizer;

    public void <init>()
    {
        org.apache.log4j.lf5.LF5Appender r0;
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r1;

        r0 := @this: org.apache.log4j.lf5.LF5Appender;

        $r1 = staticinvoke <org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor getDefaultInstance()>();

        specialinvoke r0.<org.apache.log4j.lf5.LF5Appender: void <init>(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>($r1);

        return;
    }

    public void <init>(org.apache.log4j.lf5.viewer.LogBrokerMonitor)
    {
        org.apache.log4j.lf5.LF5Appender r0;
        org.apache.log4j.lf5.viewer.LogBrokerMonitor r1;

        r0 := @this: org.apache.log4j.lf5.LF5Appender;

        r1 := @parameter0: org.apache.log4j.lf5.viewer.LogBrokerMonitor;

        specialinvoke r0.<org.apache.log4j.AppenderSkeleton: void <init>()>();

        if r1 == null goto label1;

        r0.<org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _logMonitor> = r1;

     label1:
        return;
    }

    public void append(org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.lf5.LF5Appender r12;
        long l0;
        org.apache.log4j.Level $r5;
        org.apache.log4j.lf5.Log4JLogRecord $r8;
        java.lang.String $r1, $r2, $r3, $r4, $r6, $r9;
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r13, $r14;
        org.apache.log4j.spi.LoggingEvent r0;
        org.apache.log4j.lf5.LogLevel $r11, $r17;
        org.apache.log4j.spi.ThrowableInformation $r10, $r15;
        org.apache.log4j.lf5.LogLevelFormatException $r16;
        org.apache.log4j.spi.LocationInfo $r7;

        r12 := @this: org.apache.log4j.lf5.LF5Appender;

        r0 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $r1 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.lang.String getLoggerName()>();

        $r2 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.lang.String getRenderedMessage()>();

        $r3 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.lang.String getNDC()>();

        $r4 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.lang.String getThreadName()>();

        $r5 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Level getLevel()>();

        $r6 = virtualinvoke $r5.<org.apache.log4j.Priority: java.lang.String toString()>();

        l0 = r0.<org.apache.log4j.spi.LoggingEvent: long timeStamp>;

        $r7 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.LocationInfo getLocationInformation()>();

        $r8 = new org.apache.log4j.lf5.Log4JLogRecord;

        specialinvoke $r8.<org.apache.log4j.lf5.Log4JLogRecord: void <init>()>();

        virtualinvoke $r8.<org.apache.log4j.lf5.LogRecord: void setCategory(java.lang.String)>($r1);

        virtualinvoke $r8.<org.apache.log4j.lf5.LogRecord: void setMessage(java.lang.String)>($r2);

        $r9 = $r7.<org.apache.log4j.spi.LocationInfo: java.lang.String fullInfo>;

        virtualinvoke $r8.<org.apache.log4j.lf5.LogRecord: void setLocation(java.lang.String)>($r9);

        virtualinvoke $r8.<org.apache.log4j.lf5.LogRecord: void setMillis(long)>(l0);

        virtualinvoke $r8.<org.apache.log4j.lf5.LogRecord: void setThreadDescription(java.lang.String)>($r4);

        if $r3 == null goto label1;

        virtualinvoke $r8.<org.apache.log4j.lf5.LogRecord: void setNDC(java.lang.String)>($r3);

        goto label2;

     label1:
        virtualinvoke $r8.<org.apache.log4j.lf5.LogRecord: void setNDC(java.lang.String)>("");

     label2:
        $r10 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.ThrowableInformation getThrowableInformation()>();

        if $r10 == null goto label3;

        $r15 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.ThrowableInformation getThrowableInformation()>();

        virtualinvoke $r8.<org.apache.log4j.lf5.Log4JLogRecord: void setThrownStackTrace(org.apache.log4j.spi.ThrowableInformation)>($r15);

     label3:
        $r11 = staticinvoke <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>($r6);

        virtualinvoke $r8.<org.apache.log4j.lf5.LogRecord: void setLevel(org.apache.log4j.lf5.LogLevel)>($r11);

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        $r17 = <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel WARN>;

        virtualinvoke $r8.<org.apache.log4j.lf5.LogRecord: void setLevel(org.apache.log4j.lf5.LogLevel)>($r17);

     label6:
        $r13 = r12.<org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _logMonitor>;

        if $r13 == null goto label7;

        $r14 = r12.<org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _logMonitor>;

        virtualinvoke $r14.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)>($r8);

     label7:
        return;

        catch org.apache.log4j.lf5.LogLevelFormatException from label3 to label4 with label5;
    }

    public void close()
    {
        org.apache.log4j.lf5.LF5Appender r0;

        r0 := @this: org.apache.log4j.lf5.LF5Appender;

        return;
    }

    public boolean requiresLayout()
    {
        org.apache.log4j.lf5.LF5Appender r0;

        r0 := @this: org.apache.log4j.lf5.LF5Appender;

        return 0;
    }

    public void setCallSystemExitOnClose(boolean)
    {
        org.apache.log4j.lf5.LF5Appender r0;
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r1;
        boolean z0;

        r0 := @this: org.apache.log4j.lf5.LF5Appender;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _logMonitor>;

        virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setCallSystemExitOnClose(boolean)>(z0);

        return;
    }

    public boolean equals(org.apache.log4j.lf5.LF5Appender)
    {
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r2, $r3;
        org.apache.log4j.lf5.LF5Appender r0, r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.lf5.LF5Appender;

        r1 := @parameter0: org.apache.log4j.lf5.LF5Appender;

        $r2 = r0.<org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _logMonitor>;

        $r3 = virtualinvoke r1.<org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor getLogBrokerMonitor()>();

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.log4j.lf5.viewer.LogBrokerMonitor getLogBrokerMonitor()
    {
        org.apache.log4j.lf5.LF5Appender r0;
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r1;

        r0 := @this: org.apache.log4j.lf5.LF5Appender;

        $r1 = r0.<org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _logMonitor>;

        return $r1;
    }

    public static void main(java.lang.String[])
    {
        org.apache.log4j.lf5.LF5Appender $r0;
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        $r0 = new org.apache.log4j.lf5.LF5Appender;

        specialinvoke $r0.<org.apache.log4j.lf5.LF5Appender: void <init>()>();

        return;
    }

    public void setMaxNumberOfRecords(int)
    {
        int i0;
        org.apache.log4j.lf5.LF5Appender r1;
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r0;

        r1 := @this: org.apache.log4j.lf5.LF5Appender;

        i0 := @parameter0: int;

        $r0 = <org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _defaultLogMonitor>;

        virtualinvoke $r0.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setMaxNumberOfLogRecords(int)>(i0);

        return;
    }

    protected static synchronized org.apache.log4j.lf5.viewer.LogBrokerMonitor getDefaultInstance()
    {
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r0, $r1, $r4, $r5, $r6, $r7, $r9;
        org.apache.log4j.lf5.AppenderFinalizer $r3;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.SecurityException $r8;

        $r0 = <org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _defaultLogMonitor>;

        if $r0 != null goto label4;

     label1:
        $r1 = new org.apache.log4j.lf5.viewer.LogBrokerMonitor;

        $r2 = staticinvoke <org.apache.log4j.lf5.LogLevel: java.util.List getLog4JLevels()>();

        specialinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void <init>(java.util.List)>($r2);

        <org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _defaultLogMonitor> = $r1;

        $r3 = new org.apache.log4j.lf5.AppenderFinalizer;

        $r4 = <org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _defaultLogMonitor>;

        specialinvoke $r3.<org.apache.log4j.lf5.AppenderFinalizer: void <init>(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>($r4);

        <org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.AppenderFinalizer _finalizer> = $r3;

        $r5 = <org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _defaultLogMonitor>;

        $i0 = staticinvoke <org.apache.log4j.lf5.LF5Appender: int getDefaultMonitorWidth()>();

        $i1 = staticinvoke <org.apache.log4j.lf5.LF5Appender: int getDefaultMonitorHeight()>();

        virtualinvoke $r5.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setFrameSize(int,int)>($i0, $i1);

        $r6 = <org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _defaultLogMonitor>;

        virtualinvoke $r6.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setFontSize(int)>(12);

        $r7 = <org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _defaultLogMonitor>;

        virtualinvoke $r7.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void show()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        <org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _defaultLogMonitor> = null;

     label4:
        $r9 = <org.apache.log4j.lf5.LF5Appender: org.apache.log4j.lf5.viewer.LogBrokerMonitor _defaultLogMonitor>;

        return $r9;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    protected static int getScreenWidth()
    {
        java.lang.Throwable $r2;
        java.awt.Dimension $r1;
        int $i0;
        java.awt.Toolkit $r0;

     label1:
        $r0 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r1 = virtualinvoke $r0.<java.awt.Toolkit: java.awt.Dimension getScreenSize()>();

        $i0 = $r1.<java.awt.Dimension: int width>;

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        return 800;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected static int getScreenHeight()
    {
        java.lang.Throwable $r2;
        java.awt.Dimension $r1;
        int $i0;
        java.awt.Toolkit $r0;

     label1:
        $r0 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r1 = virtualinvoke $r0.<java.awt.Toolkit: java.awt.Dimension getScreenSize()>();

        $i0 = $r1.<java.awt.Dimension: int height>;

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        return 600;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected static int getDefaultMonitorWidth()
    {
        int $i0, $i1, $i2;

        $i0 = staticinvoke <org.apache.log4j.lf5.LF5Appender: int getScreenWidth()>();

        $i1 = 3 * $i0;

        $i2 = $i1 / 4;

        return $i2;
    }

    protected static int getDefaultMonitorHeight()
    {
        int $i0, $i1, $i2;

        $i0 = staticinvoke <org.apache.log4j.lf5.LF5Appender: int getScreenHeight()>();

        $i1 = 3 * $i0;

        $i2 = $i1 / 4;

        return $i2;
    }
}
