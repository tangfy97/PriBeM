public class org.apache.commons.collections.map.AbstractLinkedMap extends org.apache.commons.collections.map.AbstractHashedMap implements org.apache.commons.collections.OrderedMap
{
    protected transient org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header;

    protected void <init>()
    {
        org.apache.commons.collections.map.AbstractLinkedMap r0;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void <init>()>();

        return;
    }

    protected void <init>(int, float, int)
    {
        int i0, i1;
        float f0;
        org.apache.commons.collections.map.AbstractLinkedMap r0;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void <init>(int,float,int)>(i0, f0, i1);

        return;
    }

    protected void <init>(int)
    {
        int i0;
        org.apache.commons.collections.map.AbstractLinkedMap r0;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void <init>(int)>(i0);

        return;
    }

    protected void <init>(int, float)
    {
        int i0;
        float f0;
        org.apache.commons.collections.map.AbstractLinkedMap r0;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void <init>(int,float)>(i0, f0);

        return;
    }

    protected void <init>(java.util.Map)
    {
        org.apache.commons.collections.map.AbstractLinkedMap r0;
        java.util.Map r1;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void <init>(java.util.Map)>(r1);

        return;
    }

    protected void init()
    {
        int $i1;
        org.apache.commons.collections.map.AbstractLinkedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry $r1;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        $i1 = (int) -1;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry createEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,java.lang.Object,java.lang.Object)>(null, $i1, null, null);

        $r2 = (org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry) $r1;

        r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header> = $r2;

        $r5 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r4 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r3 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r4.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after> = $r3;

        $r5.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before> = $r3;

        return;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractLinkedMap r1;
        java.lang.Object r0, $r4, $r7;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry $r2, $r3, $r5, $r6, r8, r9;
        boolean $z0;

        r1 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label4;

        $r5 = r1.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        r8 = $r5.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

     label1:
        $r6 = r1.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        if r8 == $r6 goto label3;

        $r7 = virtualinvoke r8.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: java.lang.Object getValue()>();

        if $r7 != null goto label2;

        return 1;

     label2:
        r8 = r8.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        goto label1;

     label3:
        goto label7;

     label4:
        $r2 = r1.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        r9 = $r2.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

     label5:
        $r3 = r1.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        if r9 == $r3 goto label7;

        $r4 = virtualinvoke r9.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: java.lang.Object getValue()>();

        $z0 = virtualinvoke r1.<org.apache.commons.collections.map.AbstractLinkedMap: boolean isEqualValue(java.lang.Object,java.lang.Object)>(r0, $r4);

        if $z0 == 0 goto label6;

        return 1;

     label6:
        r9 = r9.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        goto label5;

     label7:
        return 0;
    }

    public void clear()
    {
        org.apache.commons.collections.map.AbstractLinkedMap r0;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry $r1, $r2, $r3;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void clear()>();

        $r3 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r2 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r1 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r2.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after> = $r1;

        $r3.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before> = $r1;

        return;
    }

    public java.lang.Object firstKey()
    {
        int $i0;
        org.apache.commons.collections.map.AbstractLinkedMap r0;
        java.lang.Object $r3;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry $r1, $r2;
        java.util.NoSuchElementException $r4;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        $i0 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: int size>;

        if $i0 != 0 goto label1;

        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Map is empty");

        throw $r4;

     label1:
        $r1 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r2 = $r1.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        $r3 = virtualinvoke $r2.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: java.lang.Object getKey()>();

        return $r3;
    }

    public java.lang.Object lastKey()
    {
        int $i0;
        org.apache.commons.collections.map.AbstractLinkedMap r0;
        java.lang.Object $r3;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry $r1, $r2;
        java.util.NoSuchElementException $r4;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        $i0 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: int size>;

        if $i0 != 0 goto label1;

        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Map is empty");

        throw $r4;

     label1:
        $r1 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r2 = $r1.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        $r3 = virtualinvoke $r2.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: java.lang.Object getKey()>();

        return $r3;
    }

    public java.lang.Object nextKey(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractLinkedMap r0;
        java.lang.Object r1, $r7;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry $r2;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry r3, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)>(r1);

        r3 = (org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry) $r2;

        if r3 == null goto label1;

        $r5 = r3.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        $r4 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        if $r5 != $r4 goto label2;

     label1:
        $r7 = null;

        goto label3;

     label2:
        $r6 = r3.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        $r7 = virtualinvoke $r6.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: java.lang.Object getKey()>();

     label3:
        return $r7;
    }

    public java.lang.Object previousKey(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractLinkedMap r0;
        java.lang.Object r1, $r7;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry $r2;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry r3, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)>(r1);

        r3 = (org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry) $r2;

        if r3 == null goto label1;

        $r5 = r3.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        $r4 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        if $r5 != $r4 goto label2;

     label1:
        $r7 = null;

        goto label3;

     label2:
        $r6 = r3.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        $r7 = virtualinvoke $r6.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: java.lang.Object getKey()>();

     label3:
        return $r7;
    }

    protected org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry getEntry(int)
    {
        java.lang.IndexOutOfBoundsException $r17, $r19;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r11, $r12, $r13, $r16, $r18;
        int i0, $i1, $i2, $i3, $i4, i5, i6, $i8;
        java.lang.String $r8, $r14;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry $r1, r15;
        org.apache.commons.collections.map.AbstractLinkedMap r0;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r17 = new java.lang.IndexOutOfBoundsException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is less than zero");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r14);

        throw $r17;

     label1:
        $i1 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: int size>;

        if i0 < $i1 goto label2;

        $r19 = new java.lang.IndexOutOfBoundsException;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is invalid for size ");

        $i4 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: int size>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r19;

     label2:
        $i2 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: int size>;

        $i3 = $i2 / 2;

        if i0 >= $i3 goto label5;

        $r1 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        r15 = $r1.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        i5 = 0;

     label3:
        if i5 >= i0 goto label4;

        r15 = r15.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        i5 = i5 + 1;

        goto label3;

     label4:
        goto label7;

     label5:
        r15 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        i6 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: int size>;

     label6:
        if i6 <= i0 goto label7;

        r15 = r15.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        $i8 = (int) -1;

        i6 = i6 + $i8;

        goto label6;

     label7:
        return r15;
    }

    protected void addEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, int)
    {
        org.apache.commons.collections.map.AbstractLinkedMap r2;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r9;
        int i0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r0;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry r1, $r3, $r4, $r5, $r6, $r7, $r8;

        r2 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        r0 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        i0 := @parameter1: int;

        r1 = (org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry) r0;

        $r3 = r2.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        r1.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after> = $r3;

        $r4 = r2.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r5 = $r4.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        r1.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before> = $r5;

        $r6 = r2.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r7 = $r6.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        $r7.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after> = r1;

        $r8 = r2.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r8.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before> = r1;

        $r9 = r2.<org.apache.commons.collections.map.AbstractLinkedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r9[i0] = r0;

        return;
    }

    protected org.apache.commons.collections.map.AbstractHashedMap$HashEntry createEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, int, java.lang.Object, java.lang.Object)
    {
        int i0;
        java.lang.Object r2, r3;
        org.apache.commons.collections.map.AbstractLinkedMap r4;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry $r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1;

        r4 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r0 = new org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry;

        specialinvoke $r0.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: void <init>(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,java.lang.Object,java.lang.Object)>(r1, i0, r2, r3);

        return $r0;
    }

    protected void removeEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, int, org.apache.commons.collections.map.AbstractHashedMap$HashEntry)
    {
        org.apache.commons.collections.map.AbstractLinkedMap r6;
        int i0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r0, r7;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry r1, $r2, $r3, $r4, $r5;

        r6 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        r0 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        i0 := @parameter1: int;

        r7 := @parameter2: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        r1 = (org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry) r0;

        $r3 = r1.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        $r2 = r1.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        $r3.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after> = $r2;

        $r5 = r1.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        $r4 = r1.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        $r5.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before> = $r4;

        r1.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after> = null;

        r1.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before> = null;

        specialinvoke r6.<org.apache.commons.collections.map.AbstractHashedMap: void removeEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>(r0, i0, r7);

        return;
    }

    protected org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry entryBefore(org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry)
    {
        org.apache.commons.collections.map.AbstractLinkedMap r2;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry r0, $r1;

        r2 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        r0 := @parameter0: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry;

        $r1 = r0.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        return $r1;
    }

    protected org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry entryAfter(org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry)
    {
        org.apache.commons.collections.map.AbstractLinkedMap r2;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry r0, $r1;

        r2 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        r0 := @parameter0: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry;

        $r1 = r0.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        return $r1;
    }

    public org.apache.commons.collections.MapIterator mapIterator()
    {
        org.apache.commons.collections.map.AbstractLinkedMap$LinkMapIterator $r1;
        int $i0;
        org.apache.commons.collections.map.AbstractLinkedMap r0;
        org.apache.commons.collections.OrderedMapIterator $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        $i0 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: int size>;

        if $i0 != 0 goto label1;

        $r2 = <org.apache.commons.collections.iterators.EmptyOrderedMapIterator: org.apache.commons.collections.OrderedMapIterator INSTANCE>;

        return $r2;

     label1:
        $r1 = new org.apache.commons.collections.map.AbstractLinkedMap$LinkMapIterator;

        specialinvoke $r1.<org.apache.commons.collections.map.AbstractLinkedMap$LinkMapIterator: void <init>(org.apache.commons.collections.map.AbstractLinkedMap)>(r0);

        return $r1;
    }

    public org.apache.commons.collections.OrderedMapIterator orderedMapIterator()
    {
        org.apache.commons.collections.map.AbstractLinkedMap$LinkMapIterator $r1;
        int $i0;
        org.apache.commons.collections.map.AbstractLinkedMap r0;
        org.apache.commons.collections.OrderedMapIterator $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        $i0 = r0.<org.apache.commons.collections.map.AbstractLinkedMap: int size>;

        if $i0 != 0 goto label1;

        $r2 = <org.apache.commons.collections.iterators.EmptyOrderedMapIterator: org.apache.commons.collections.OrderedMapIterator INSTANCE>;

        return $r2;

     label1:
        $r1 = new org.apache.commons.collections.map.AbstractLinkedMap$LinkMapIterator;

        specialinvoke $r1.<org.apache.commons.collections.map.AbstractLinkedMap$LinkMapIterator: void <init>(org.apache.commons.collections.map.AbstractLinkedMap)>(r0);

        return $r1;
    }

    protected java.util.Iterator createEntrySetIterator()
    {
        org.apache.commons.collections.OrderedIterator $r2;
        org.apache.commons.collections.map.AbstractLinkedMap$EntrySetIterator $r1;
        int $i0;
        org.apache.commons.collections.map.AbstractLinkedMap r0;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractLinkedMap: int size()>();

        if $i0 != 0 goto label1;

        $r2 = <org.apache.commons.collections.iterators.EmptyOrderedIterator: org.apache.commons.collections.OrderedIterator INSTANCE>;

        return $r2;

     label1:
        $r1 = new org.apache.commons.collections.map.AbstractLinkedMap$EntrySetIterator;

        specialinvoke $r1.<org.apache.commons.collections.map.AbstractLinkedMap$EntrySetIterator: void <init>(org.apache.commons.collections.map.AbstractLinkedMap)>(r0);

        return $r1;
    }

    protected java.util.Iterator createKeySetIterator()
    {
        org.apache.commons.collections.map.AbstractLinkedMap$KeySetIterator $r1;
        org.apache.commons.collections.OrderedIterator $r2;
        int $i0;
        org.apache.commons.collections.map.AbstractLinkedMap r0;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractLinkedMap: int size()>();

        if $i0 != 0 goto label1;

        $r2 = <org.apache.commons.collections.iterators.EmptyOrderedIterator: org.apache.commons.collections.OrderedIterator INSTANCE>;

        return $r2;

     label1:
        $r1 = new org.apache.commons.collections.map.AbstractLinkedMap$KeySetIterator;

        specialinvoke $r1.<org.apache.commons.collections.map.AbstractLinkedMap$KeySetIterator: void <init>(org.apache.commons.collections.map.AbstractLinkedMap)>(r0);

        return $r1;
    }

    protected java.util.Iterator createValuesIterator()
    {
        org.apache.commons.collections.map.AbstractLinkedMap$ValuesIterator $r1;
        org.apache.commons.collections.OrderedIterator $r2;
        int $i0;
        org.apache.commons.collections.map.AbstractLinkedMap r0;

        r0 := @this: org.apache.commons.collections.map.AbstractLinkedMap;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractLinkedMap: int size()>();

        if $i0 != 0 goto label1;

        $r2 = <org.apache.commons.collections.iterators.EmptyOrderedIterator: org.apache.commons.collections.OrderedIterator INSTANCE>;

        return $r2;

     label1:
        $r1 = new org.apache.commons.collections.map.AbstractLinkedMap$ValuesIterator;

        specialinvoke $r1.<org.apache.commons.collections.map.AbstractLinkedMap$ValuesIterator: void <init>(org.apache.commons.collections.map.AbstractLinkedMap)>(r0);

        return $r1;
    }
}
