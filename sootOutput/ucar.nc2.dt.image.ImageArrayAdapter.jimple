public class ucar.nc2.dt.image.ImageArrayAdapter extends java.lang.Object
{

    public void <init>()
    {
        ucar.nc2.dt.image.ImageArrayAdapter r0;

        r0 := @this: ucar.nc2.dt.image.ImageArrayAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.image.BufferedImage makeGrayscaleImage(ucar.ma2.Array)
    {
        java.awt.image.BufferedImage $r8;
        java.awt.color.ColorSpace $r5;
        ucar.ma2.Array r9;
        java.awt.image.ComponentColorModel $r6;
        int[] $r0, $r1, $r3, $r7;
        int $i0, $i1, $i2, $i3;
        java.awt.image.WritableRaster $r4;
        java.awt.image.DataBuffer $r2;

        r9 := @parameter0: ucar.ma2.Array;

        $i0 = virtualinvoke r9.<ucar.ma2.Array: int getRank()>();

        if $i0 != 3 goto label1;

        r9 = virtualinvoke r9.<ucar.ma2.Array: ucar.ma2.Array reduce()>();

     label1:
        $i1 = virtualinvoke r9.<ucar.ma2.Array: int getRank()>();

        if $i1 != 3 goto label2;

        r9 = virtualinvoke r9.<ucar.ma2.Array: ucar.ma2.Array slice(int,int)>(0, 0);

     label2:
        $r0 = virtualinvoke r9.<ucar.ma2.Array: int[] getShape()>();

        $i2 = $r0[0];

        $r1 = virtualinvoke r9.<ucar.ma2.Array: int[] getShape()>();

        $i3 = $r1[1];

        $r2 = staticinvoke <ucar.nc2.dt.image.ImageArrayAdapter: java.awt.image.DataBuffer makeDataBuffer(ucar.ma2.Array)>(r9);

        $r3 = newarray (int)[1];

        $r3[0] = 0;

        $r4 = staticinvoke <java.awt.image.WritableRaster: java.awt.image.WritableRaster createInterleavedRaster(java.awt.image.DataBuffer,int,int,int,int,int[],java.awt.Point)>($r2, $i3, $i2, $i3, 1, $r3, null);

        $r5 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r6 = new java.awt.image.ComponentColorModel;

        $r7 = newarray (int)[1];

        $r7[0] = 8;

        specialinvoke $r6.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r5, $r7, 0, 0, 1, 0);

        $r8 = new java.awt.image.BufferedImage;

        specialinvoke $r8.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r6, $r4, 0, null);

        return $r8;
    }

    private static java.awt.image.DataBuffer makeDataBuffer(ucar.ma2.Array)
    {
        byte[] $r5;
        ucar.ma2.ArrayByte $r6;
        java.awt.image.DataBufferByte $r8;
        byte $b2, $b6;
        int[] $r1, $r2;
        int i0, i1, $i3, $i4, $i5, i7, $i8, $i9;
        boolean $z0;
        double $d0, $d1, $d2, $d3, d4, d5;
        ucar.ma2.IndexIterator $r3;
        ucar.ma2.Array r0;
        java.awt.image.DataBuffer $r7;

        r0 := @parameter0: ucar.ma2.Array;

        $z0 = r0 instanceof ucar.ma2.ArrayByte;

        if $z0 == 0 goto label1;

        $r6 = (ucar.ma2.ArrayByte) r0;

        $r7 = staticinvoke <ucar.nc2.dt.image.ImageArrayAdapter: java.awt.image.DataBuffer makeByteDataBuffer(ucar.ma2.ArrayByte)>($r6);

        return $r7;

     label1:
        $r1 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        i0 = $r1[0];

        $r2 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        i1 = $r2[1];

        $d0 = staticinvoke <ucar.ma2.MAMath: double getMinimum(ucar.ma2.Array)>(r0);

        $d1 = staticinvoke <ucar.ma2.MAMath: double getMaximum(ucar.ma2.Array)>(r0);

        d5 = $d1 - $d0;

        $b2 = d5 cmpl 0.0;

        $i9 = (int) $b2;

        if $i9 <= 0 goto label2;

        d5 = 255.0 / d5;

     label2:
        $r3 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $i3 = i0 * i1;

        $r5 = newarray (byte)[$i3];

        i7 = 0;

     label3:
        $i8 = lengthof $r5;

        if i7 >= $i8 goto label4;

        $d2 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $d3 = $d2 - $d0;

        d4 = $d3 * d5;

        $i5 = (int) d4;

        $b6 = (byte) $i5;

        $r5[i7] = $b6;

        i7 = i7 + 1;

        goto label3;

     label4:
        $r8 = new java.awt.image.DataBufferByte;

        $i4 = lengthof $r5;

        specialinvoke $r8.<java.awt.image.DataBufferByte: void <init>(byte[],int)>($r5, $i4);

        return $r8;
    }

    private static java.awt.image.DataBuffer makeByteDataBuffer(ucar.ma2.ArrayByte)
    {
        byte[] $r2, r3;
        ucar.ma2.ArrayByte r0;
        int $i0;
        java.lang.Object $r1;
        java.awt.image.DataBufferByte $r4;

        r0 := @parameter0: ucar.ma2.ArrayByte;

        $r1 = virtualinvoke r0.<ucar.ma2.ArrayByte: java.lang.Object copyTo1DJavaArray()>();

        $r2 = (byte[]) $r1;

        r3 = (byte[]) $r2;

        $r4 = new java.awt.image.DataBufferByte;

        $i0 = lengthof r3;

        specialinvoke $r4.<java.awt.image.DataBufferByte: void <init>(byte[],int)>(r3, $i0);

        return $r4;
    }

    private static javax.swing.JLabel test()
    {
        java.awt.Color $r9, $r11;
        byte[] r0;
        java.awt.image.DataBufferByte $r1;
        java.awt.geom.Rectangle2D$Float $r13;
        java.awt.color.ColorSpace $r4;
        java.awt.AlphaComposite $r12;
        byte $b3;
        int[] $r2, $r6;
        java.awt.Graphics2D $r8;
        int $i0, $i1, $i2, i4, i5;
        javax.swing.ImageIcon $r15;
        double $d0, $d1, $d2;
        java.awt.image.BufferedImage $r7;
        java.awt.image.ComponentColorModel $r5;
        javax.swing.JLabel $r14;
        java.awt.image.WritableRaster $r3;
        java.awt.geom.Ellipse2D$Float $r10;

        r0 = newarray (byte)[576900];

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label2;

        i5 = i4 / 640;

        $d0 = (double) i5;

        $d1 = $d0 * 255.0;

        $d2 = $d1 / 900.0;

        $i2 = (int) $d2;

        $b3 = (byte) $i2;

        r0[i4] = $b3;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r1 = new java.awt.image.DataBufferByte;

        $i1 = lengthof r0;

        specialinvoke $r1.<java.awt.image.DataBufferByte: void <init>(byte[],int)>(r0, $i1);

        $r2 = newarray (int)[1];

        $r2[0] = 0;

        $r3 = staticinvoke <java.awt.image.WritableRaster: java.awt.image.WritableRaster createInterleavedRaster(java.awt.image.DataBuffer,int,int,int,int,int[],java.awt.Point)>($r1, 900, 640, 900, 1, $r2, null);

        $r4 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r5 = new java.awt.image.ComponentColorModel;

        $r6 = newarray (int)[1];

        $r6[0] = 8;

        specialinvoke $r5.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r4, $r6, 0, 0, 1, 0);

        $r7 = new java.awt.image.BufferedImage;

        specialinvoke $r7.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r5, $r3, 1, null);

        $r8 = virtualinvoke $r7.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r9 = <java.awt.Color: java.awt.Color red>;

        virtualinvoke $r8.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r9);

        $r10 = new java.awt.geom.Ellipse2D$Float;

        specialinvoke $r10.<java.awt.geom.Ellipse2D$Float: void <init>(float,float,float,float)>(0.0F, 0.0F, 200.0F, 100.0F);

        virtualinvoke $r8.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r10);

        virtualinvoke $r8.<java.awt.Graphics2D: void dispose()>();

        $r11 = new java.awt.Color;

        specialinvoke $r11.<java.awt.Color: void <init>(int,int,int,int)>(0, 0, 0, 0);

        virtualinvoke $r8.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r11);

        $r12 = <java.awt.AlphaComposite: java.awt.AlphaComposite Src>;

        virtualinvoke $r8.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r12);

        $r13 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r13.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(320.0F, 20.0F, 100.0F, 20.0F);

        virtualinvoke $r8.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r13);

        virtualinvoke $r8.<java.awt.Graphics2D: void dispose()>();

        $r14 = new javax.swing.JLabel;

        $r15 = new javax.swing.ImageIcon;

        specialinvoke $r15.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r7);

        specialinvoke $r14.<javax.swing.JLabel: void <init>(javax.swing.Icon)>($r15);

        return $r14;
    }

    public static void main(java.lang.String[])
    {
        java.awt.image.SampleModel $r6;
        int[] $r0;
        javax.swing.JFrame $r22;
        boolean $z0;
        java.awt.image.BufferedImage $r4, $r19, $r20;
        java.awt.geom.AffineTransform $r17;
        java.lang.StringBuilder $r7, $r9, $r10, $r12, $r14, $r15;
        javax.swing.JPanel $r26;
        ucar.nc2.dt.image.ImageArrayAdapter$1 $r23;
        java.lang.String[] r28;
        java.awt.image.AffineTransformOp $r18;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        javax.swing.ImageIcon $r24;
        java.lang.String $r11, $r16;
        java.awt.Container $r27;
        java.io.PrintStream $r8, $r13, $r21;
        ucar.ma2.IndexIterator $r3;
        ucar.ma2.Array $r2;
        javax.swing.JLabel $r25;
        java.lang.Class $r1;
        java.awt.image.WritableRaster $r5;

        r28 := @parameter0: java.lang.String[];

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        $r0 = newarray (int)[2];

        $r0[0] = 255;

        $r0[1] = 100;

        $r2 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r1, $r0);

        i5 = 0;

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        i6 = i5 / 100;

        $i4 = i6 * 255;

        interfaceinvoke $r3.<ucar.ma2.IndexIterator: void setIntNext(int)>($i4);

        i5 = i5 + 1;

        goto label1;

     label2:
        $r4 = staticinvoke <ucar.nc2.dt.image.ImageArrayAdapter: java.awt.image.BufferedImage makeGrayscaleImage(ucar.ma2.Array)>($r2);

        $r5 = virtualinvoke $r4.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        virtualinvoke $r5.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $r6 = virtualinvoke $r5.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" image type = ");

        $i0 = virtualinvoke $r4.<java.awt.image.BufferedImage: int getType()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11);

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transfer type = ");

        $i1 = virtualinvoke $r6.<java.awt.image.SampleModel: int getTransferType()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r16);

        $r17 = new java.awt.geom.AffineTransform;

        specialinvoke $r17.<java.awt.geom.AffineTransform: void <init>()>();

        $r18 = new java.awt.image.AffineTransformOp;

        specialinvoke $r18.<java.awt.image.AffineTransformOp: void <init>(java.awt.geom.AffineTransform,int)>($r17, 1);

        $r19 = new java.awt.image.BufferedImage;

        $i2 = virtualinvoke $r4.<java.awt.image.BufferedImage: int getWidth()>();

        $i3 = virtualinvoke $r4.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r19.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i2, $i3, 5);

        $r20 = virtualinvoke $r18.<java.awt.image.AffineTransformOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r4, $r19);

        $r21 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>("ok!");

        if 1 != 0 goto label3;

        return;

     label3:
        $r22 = new javax.swing.JFrame;

        specialinvoke $r22.<javax.swing.JFrame: void <init>(java.lang.String)>("Test");

        $r23 = new ucar.nc2.dt.image.ImageArrayAdapter$1;

        specialinvoke $r23.<ucar.nc2.dt.image.ImageArrayAdapter$1: void <init>()>();

        virtualinvoke $r22.<javax.swing.JFrame: void addWindowListener(java.awt.event.WindowListener)>($r23);

        $r24 = new javax.swing.ImageIcon;

        specialinvoke $r24.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r20);

        $r25 = new javax.swing.JLabel;

        specialinvoke $r25.<javax.swing.JLabel: void <init>(javax.swing.Icon)>($r24);

        $r26 = new javax.swing.JPanel;

        specialinvoke $r26.<javax.swing.JPanel: void <init>()>();

        virtualinvoke $r26.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($r25);

        $r27 = virtualinvoke $r22.<javax.swing.JFrame: java.awt.Container getContentPane()>();

        virtualinvoke $r27.<java.awt.Container: java.awt.Component add(java.awt.Component)>($r26);

        virtualinvoke $r22.<javax.swing.JFrame: void pack()>();

        virtualinvoke $r22.<javax.swing.JFrame: void setLocation(int,int)>(300, 300);

        virtualinvoke $r22.<javax.swing.JFrame: void setVisible(boolean)>(1);

        return;
    }
}
