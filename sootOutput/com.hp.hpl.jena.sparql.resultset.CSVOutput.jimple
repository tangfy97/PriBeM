public class com.hp.hpl.jena.sparql.resultset.CSVOutput extends com.hp.hpl.jena.sparql.resultset.OutputBase
{
    static java.lang.String NL;
    static final byte[] headerBytes;
    static final byte[] yesBytes;
    static final byte[] noBytes;
    static final byte[] NLBytes;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.resultset.CSVOutput r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.CSVOutput;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.OutputBase: void <init>()>();

        return;
    }

    public void format(java.io.OutputStream, com.hp.hpl.jena.query.ResultSet)
    {
        com.hp.hpl.jena.graph.Node $r14;
        com.hp.hpl.jena.sparql.ARQException $r20;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.query.ResultSet r4;
        java.util.List $r5;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r9;
        java.io.Writer $r1;
        com.hp.hpl.jena.sparql.util.NodeToLabelMap $r2;
        java.util.ArrayList $r6;
        int $i0;
        java.lang.String $r8, $r11, $r17, r21, r22, r23, r24, r25, r26, r27;
        java.io.OutputStream r0;
        java.util.Iterator $r7, $r10;
        java.io.BufferedWriter $r3;
        java.io.IOException $r19;
        com.hp.hpl.jena.sparql.core.Var r13, $r18;
        com.hp.hpl.jena.sparql.resultset.CSVOutput r15;
        java.lang.Object $r12, $r16;

        r15 := @this: com.hp.hpl.jena.sparql.resultset.CSVOutput;

        r0 := @parameter0: java.io.OutputStream;

        r4 := @parameter1: com.hp.hpl.jena.query.ResultSet;

     label01:
        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.Writer asUTF8(java.io.OutputStream)>(r0);

        $r2 = new com.hp.hpl.jena.sparql.util.NodeToLabelMap;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: void <init>()>();

        $r3 = new java.io.BufferedWriter;

        specialinvoke $r3.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r1);

        r21 = null;

        r25 = null;

        r24 = null;

        $r5 = interfaceinvoke r4.<com.hp.hpl.jena.query.ResultSet: java.util.List getResultVars()>();

        $r6 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i0);

        $r7 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r16 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.lang.String) $r16;

        if r25 == null goto label03;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>(r24);

        goto label04;

     label03:
        r21 = ",";

        r25 = ",";

        r24 = ",";

     label04:
        $r17 = specialinvoke r15.<com.hp.hpl.jena.sparql.resultset.CSVOutput: java.lang.String csvSafe(java.lang.String)>(r22);

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r17);

        $r18 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>(r22);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r18);

        goto label02;

     label05:
        $r8 = <com.hp.hpl.jena.sparql.resultset.CSVOutput: java.lang.String NL>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r8);

     label06:
        $z1 = interfaceinvoke r4.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z1 == 0 goto label11;

        r23 = null;

        r27 = null;

        r26 = null;

        $r9 = interfaceinvoke r4.<com.hp.hpl.jena.query.ResultSet: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        $r10 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r12 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.hp.hpl.jena.sparql.core.Var) $r12;

        if r26 == null goto label08;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>(r27);

     label08:
        r23 = ",";

        r27 = ",";

        r26 = ",";

        $r14 = interfaceinvoke $r9.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r13);

        if $r14 == null goto label09;

        specialinvoke r15.<com.hp.hpl.jena.sparql.resultset.CSVOutput: void output(java.io.Writer,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.util.NodeToLabelMap)>($r3, $r14, $r2);

     label09:
        goto label07;

     label10:
        $r11 = <com.hp.hpl.jena.sparql.resultset.CSVOutput: java.lang.String NL>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r11);

        goto label06;

     label11:
        virtualinvoke $r3.<java.io.Writer: void flush()>();

     label12:
        goto label14;

     label13:
        $r19 := @caughtexception;

        $r20 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r20.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.Throwable)>($r19);

        throw $r20;

     label14:
        return;

        catch java.io.IOException from label01 to label12 with label13;
    }

    private void output(java.io.Writer, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.util.NodeToLabelMap) throws java.io.IOException
    {
        com.hp.hpl.jena.sparql.util.NodeToLabelMap r3;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.resultset.CSVOutput r1;
        java.io.Writer r2;
        java.lang.String r4, $r5;
        boolean $z0, $z1, $z2;

        r1 := @this: com.hp.hpl.jena.sparql.resultset.CSVOutput;

        r2 := @parameter0: java.io.Writer;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.sparql.util.NodeToLabelMap;

        r4 = "?";

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        r4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 == 0 goto label2;

        r4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        goto label3;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z2 == 0 goto label3;

        r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: java.lang.String asString(com.hp.hpl.jena.graph.Node)>(r0);

     label3:
        $r5 = specialinvoke r1.<com.hp.hpl.jena.sparql.resultset.CSVOutput: java.lang.String csvSafe(java.lang.String)>(r4);

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r5);

        return;
    }

    private java.lang.String csvSafe(java.lang.String)
    {
        com.hp.hpl.jena.sparql.resultset.CSVOutput r0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String r1, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.CSVOutput;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\"");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(",");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\r");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\n");

        if $z3 == 0 goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\"", "\"\"");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        $z4 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z4 == 0 goto label3;

        r1 = "\"\"";

     label3:
        return r1;
    }

    public void format(java.io.OutputStream, boolean)
    {
        java.io.OutputStream r0;
        byte[] $r1, $r2, $r3, $r4;
        java.io.IOException $r5;
        com.hp.hpl.jena.sparql.resultset.CSVOutput r7;
        com.hp.hpl.jena.sparql.ARQException $r6;
        boolean z0;

        r7 := @this: com.hp.hpl.jena.sparql.resultset.CSVOutput;

        r0 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

     label1:
        $r1 = <com.hp.hpl.jena.sparql.resultset.CSVOutput: byte[] headerBytes>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r1);

        if z0 == 0 goto label2;

        $r4 = <com.hp.hpl.jena.sparql.resultset.CSVOutput: byte[] yesBytes>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r4);

        goto label3;

     label2:
        $r2 = <com.hp.hpl.jena.sparql.resultset.CSVOutput: byte[] noBytes>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r2);

     label3:
        $r3 = <com.hp.hpl.jena.sparql.resultset.CSVOutput: byte[] NLBytes>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r3);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        $r6 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label6:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }

    static void <clinit>()
    {
        byte[] $r5, $r6, $r7, $r9;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r2, $r4, $r8;

        <com.hp.hpl.jena.sparql.resultset.CSVOutput: java.lang.String NL> = "\r\n";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_askResult");

        $r2 = <com.hp.hpl.jena.sparql.resultset.CSVOutput: java.lang.String NL>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: byte[] asUTF8bytes(java.lang.String)>($r4);

        <com.hp.hpl.jena.sparql.resultset.CSVOutput: byte[] headerBytes> = $r5;

        $r6 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: byte[] asUTF8bytes(java.lang.String)>("true");

        <com.hp.hpl.jena.sparql.resultset.CSVOutput: byte[] yesBytes> = $r6;

        $r7 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: byte[] asUTF8bytes(java.lang.String)>("false");

        <com.hp.hpl.jena.sparql.resultset.CSVOutput: byte[] noBytes> = $r7;

        $r8 = <com.hp.hpl.jena.sparql.resultset.CSVOutput: java.lang.String NL>;

        $r9 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: byte[] asUTF8bytes(java.lang.String)>($r8);

        <com.hp.hpl.jena.sparql.resultset.CSVOutput: byte[] NLBytes> = $r9;

        return;
    }
}
