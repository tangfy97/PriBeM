public final class org.apache.poi.ss.formula.ptg.FuncVarPtg extends org.apache.poi.ss.formula.ptg.AbstractFunctionPtg
{
    public static final byte sid;
    private static final int SIZE;
    public static final org.apache.poi.ss.formula.ptg.OperationPtg SUM;

    private void <init>(int, int, byte[], int)
    {
        byte[] r1;
        org.apache.poi.ss.formula.ptg.FuncVarPtg r0;
        int i0, i1, i2;

        r0 := @this: org.apache.poi.ss.formula.ptg.FuncVarPtg;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        i2 := @parameter3: int;

        specialinvoke r0.<org.apache.poi.ss.formula.ptg.AbstractFunctionPtg: void <init>(int,int,byte[],int)>(i0, i1, r1, i2);

        return;
    }

    public static org.apache.poi.ss.formula.ptg.FuncVarPtg create(org.apache.poi.util.LittleEndianInput)
    {
        short $s1;
        byte $b0;
        org.apache.poi.ss.formula.ptg.FuncVarPtg $r1;
        org.apache.poi.util.LittleEndianInput r0;
        int $i2, $i3;

        r0 := @parameter0: org.apache.poi.util.LittleEndianInput;

        $b0 = interfaceinvoke r0.<org.apache.poi.util.LittleEndianInput: byte readByte()>();

        $s1 = interfaceinvoke r0.<org.apache.poi.util.LittleEndianInput: short readShort()>();

        $i2 = (int) $b0;

        $i3 = (int) $s1;

        $r1 = staticinvoke <org.apache.poi.ss.formula.ptg.FuncVarPtg: org.apache.poi.ss.formula.ptg.FuncVarPtg create(int,int)>($i2, $i3);

        return $r1;
    }

    public static org.apache.poi.ss.formula.ptg.FuncVarPtg create(java.lang.String, int)
    {
        short $s1;
        org.apache.poi.ss.formula.ptg.FuncVarPtg $r1;
        int i0, $i2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $s1 = staticinvoke <org.apache.poi.ss.formula.ptg.FuncVarPtg: short lookupIndex(java.lang.String)>(r0);

        $i2 = (int) $s1;

        $r1 = staticinvoke <org.apache.poi.ss.formula.ptg.FuncVarPtg: org.apache.poi.ss.formula.ptg.FuncVarPtg create(int,int)>(i0, $i2);

        return $r1;
    }

    private static org.apache.poi.ss.formula.ptg.FuncVarPtg create(int, int)
    {
        org.apache.poi.ss.formula.function.FunctionMetadata $r0;
        byte[] $r2, $r4;
        org.apache.poi.ss.formula.ptg.FuncVarPtg $r5, $r6;
        byte $b1;
        int i0, i2, $i3;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $r0 = staticinvoke <org.apache.poi.ss.formula.function.FunctionMetadataRegistry: org.apache.poi.ss.formula.function.FunctionMetadata getFunctionByIndex(int)>(i0);

        if $r0 != null goto label1;

        $r5 = new org.apache.poi.ss.formula.ptg.FuncVarPtg;

        $r4 = newarray (byte)[1];

        $r4[0] = 32;

        specialinvoke $r5.<org.apache.poi.ss.formula.ptg.FuncVarPtg: void <init>(int,int,byte[],int)>(i0, 32, $r4, i2);

        return $r5;

     label1:
        $r6 = new org.apache.poi.ss.formula.ptg.FuncVarPtg;

        $b1 = virtualinvoke $r0.<org.apache.poi.ss.formula.function.FunctionMetadata: byte getReturnClassCode()>();

        $r2 = virtualinvoke $r0.<org.apache.poi.ss.formula.function.FunctionMetadata: byte[] getParameterClassCodes()>();

        $i3 = (int) $b1;

        specialinvoke $r6.<org.apache.poi.ss.formula.ptg.FuncVarPtg: void <init>(int,int,byte[],int)>(i0, $i3, $r2, i2);

        return $r6;
    }

    public void write(org.apache.poi.util.LittleEndianOutput)
    {
        org.apache.poi.ss.formula.ptg.FuncVarPtg r1;
        short $s3;
        byte $b0;
        org.apache.poi.util.LittleEndianOutput r0;
        int $i1, $i2, $i4, $i5;

        r1 := @this: org.apache.poi.ss.formula.ptg.FuncVarPtg;

        r0 := @parameter0: org.apache.poi.util.LittleEndianOutput;

        $b0 = virtualinvoke r1.<org.apache.poi.ss.formula.ptg.FuncVarPtg: byte getPtgClass()>();

        $i4 = (int) $b0;

        $i1 = 34 + $i4;

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void writeByte(int)>($i1);

        $i2 = virtualinvoke r1.<org.apache.poi.ss.formula.ptg.FuncVarPtg: int getNumberOfOperands()>();

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void writeByte(int)>($i2);

        $s3 = virtualinvoke r1.<org.apache.poi.ss.formula.ptg.FuncVarPtg: short getFunctionIndex()>();

        $i5 = (int) $s3;

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void writeShort(int)>($i5);

        return;
    }

    public int getSize()
    {
        org.apache.poi.ss.formula.ptg.FuncVarPtg r0;

        r0 := @this: org.apache.poi.ss.formula.ptg.FuncVarPtg;

        return 4;
    }

    static void <clinit>()
    {
        org.apache.poi.ss.formula.ptg.FuncVarPtg $r0;

        <org.apache.poi.ss.formula.ptg.FuncVarPtg: int SIZE> = 4;

        <org.apache.poi.ss.formula.ptg.FuncVarPtg: byte sid> = 34;

        $r0 = staticinvoke <org.apache.poi.ss.formula.ptg.FuncVarPtg: org.apache.poi.ss.formula.ptg.FuncVarPtg create(java.lang.String,int)>("SUM", 1);

        <org.apache.poi.ss.formula.ptg.FuncVarPtg: org.apache.poi.ss.formula.ptg.OperationPtg SUM> = $r0;

        return;
    }
}
