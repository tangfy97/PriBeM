final class org.waveprotocol.wave.model.version.HashedVersionSerializer$1 extends java.lang.Object implements org.waveprotocol.wave.model.util.Serializer
{

    void <init>()
    {
        org.waveprotocol.wave.model.version.HashedVersionSerializer$1 r0;

        r0 := @this: org.waveprotocol.wave.model.version.HashedVersionSerializer$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.model.version.HashedVersion fromString(java.lang.String)
    {
        org.waveprotocol.wave.model.version.HashedVersionSerializer$1 r0;
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.version.HashedVersionSerializer$1;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersionSerializer$1: org.waveprotocol.wave.model.version.HashedVersion fromString(java.lang.String,org.waveprotocol.wave.model.version.HashedVersion)>(r1, null);

        return $r2;
    }

    public org.waveprotocol.wave.model.version.HashedVersion fromString(java.lang.String, org.waveprotocol.wave.model.version.HashedVersion)
    {
        byte[] r15;
        java.lang.String[] $r1;
        long $l0;
        int $i1;
        org.waveprotocol.wave.model.version.HashedVersion $r3, r5;
        java.lang.String r0, $r2, $r4, $r10, $r13;
        java.lang.IllegalArgumentException $r7;
        org.waveprotocol.wave.model.version.HashedVersionSerializer$1 r14;
        org.waveprotocol.wave.model.util.Base64DecoderException $r6;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;

        r14 := @this: org.waveprotocol.wave.model.version.HashedVersionSerializer$1;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        if null != r0 goto label1;

        return r5;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(":", 2);

        $r2 = $r1[0];

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

        r15 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersionSerializer: byte[] access$000()>();

        $i1 = lengthof $r1;

        if $i1 != 2 goto label5;

     label2:
        $r4 = $r1[1];

        r15 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: byte[] decode(java.lang.String)>($r4);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid base64 hash: \'");

        $r10 = $r1[1];

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label5:
        $r3 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion of(long,byte[])>($l0, r15);

        return $r3;

        catch org.waveprotocol.wave.model.util.Base64DecoderException from label2 to label3 with label4;
    }

    public java.lang.String toString(org.waveprotocol.wave.model.version.HashedVersion)
    {
        byte[] $r4;
        long $l0;
        org.waveprotocol.wave.model.version.HashedVersionSerializer$1 r7;
        org.waveprotocol.wave.model.version.HashedVersion r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r6;
        java.lang.String $r5, $r8;

        r7 := @this: org.waveprotocol.wave.model.version.HashedVersionSerializer$1;

        r0 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        if r0 == null goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: byte[] getHistoryHash()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: java.lang.String encode(byte[])>($r4);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r8 = null;

     label2:
        return $r8;
    }

    public volatile java.lang.Object fromString(java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.version.HashedVersionSerializer$1 r0;
        org.waveprotocol.wave.model.version.HashedVersion $r3, $r4;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.version.HashedVersionSerializer$1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = (org.waveprotocol.wave.model.version.HashedVersion) r2;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersionSerializer$1: org.waveprotocol.wave.model.version.HashedVersion fromString(java.lang.String,org.waveprotocol.wave.model.version.HashedVersion)>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.Object fromString(java.lang.String)
    {
        org.waveprotocol.wave.model.version.HashedVersionSerializer$1 r0;
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.version.HashedVersionSerializer$1;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersionSerializer$1: org.waveprotocol.wave.model.version.HashedVersion fromString(java.lang.String)>(r1);

        return $r2;
    }

    public volatile java.lang.String toString(java.lang.Object)
    {
        org.waveprotocol.wave.model.version.HashedVersionSerializer$1 r0;
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        java.lang.Object r1;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.version.HashedVersionSerializer$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.version.HashedVersion) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersionSerializer$1: java.lang.String toString(org.waveprotocol.wave.model.version.HashedVersion)>($r2);

        return $r3;
    }
}
