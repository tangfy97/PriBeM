public abstract class org.jdesktop.swingx.painter.AbstractAreaPainter extends org.jdesktop.swingx.painter.AbstractLayoutPainter
{
    private boolean stretchPaint;
    private org.jdesktop.swingx.painter.effects.AreaEffect[] areaEffects;
    private org.jdesktop.swingx.painter.AbstractAreaPainter$Style style;
    private float borderWidth;
    private java.awt.Paint fillPaint;
    private java.awt.Paint borderPaint;

    public void <init>()
    {
        java.awt.Color $r3;
        org.jdesktop.swingx.painter.AbstractAreaPainter r0;
        org.jdesktop.swingx.painter.effects.AreaEffect[] $r1;
        org.jdesktop.swingx.painter.AbstractAreaPainter$Style $r2;

        r0 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: void <init>()>();

        $r1 = newarray (org.jdesktop.swingx.painter.effects.AreaEffect)[0];

        r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.effects.AreaEffect[] areaEffects> = $r1;

        $r2 = <org.jdesktop.swingx.painter.AbstractAreaPainter$Style: org.jdesktop.swingx.painter.AbstractAreaPainter$Style BOTH>;

        r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.AbstractAreaPainter$Style style> = $r2;

        $r3 = <java.awt.Color: java.awt.Color RED>;

        r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: java.awt.Paint fillPaint> = $r3;

        return;
    }

    public void <init>(java.awt.Paint)
    {
        java.awt.Paint r3;
        org.jdesktop.swingx.painter.AbstractAreaPainter r0;
        org.jdesktop.swingx.painter.effects.AreaEffect[] $r1;
        org.jdesktop.swingx.painter.AbstractAreaPainter$Style $r2;

        r0 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        r3 := @parameter0: java.awt.Paint;

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: void <init>()>();

        $r1 = newarray (org.jdesktop.swingx.painter.effects.AreaEffect)[0];

        r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.effects.AreaEffect[] areaEffects> = $r1;

        $r2 = <org.jdesktop.swingx.painter.AbstractAreaPainter$Style: org.jdesktop.swingx.painter.AbstractAreaPainter$Style BOTH>;

        r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.AbstractAreaPainter$Style style> = $r2;

        r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: java.awt.Paint fillPaint> = r3;

        return;
    }

    public java.awt.Paint getFillPaint()
    {
        java.awt.Paint $r1;
        org.jdesktop.swingx.painter.AbstractAreaPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        $r1 = r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: java.awt.Paint fillPaint>;

        return $r1;
    }

    public void setFillPaint(java.awt.Paint)
    {
        java.awt.Paint $r1, r2, $r3;
        org.jdesktop.swingx.painter.AbstractAreaPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        r2 := @parameter0: java.awt.Paint;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: java.awt.Paint getFillPaint()>();

        r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: java.awt.Paint fillPaint> = r2;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void setDirty(boolean)>(1);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: java.awt.Paint getFillPaint()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("fillPaint", $r1, $r3);

        return;
    }

    public boolean isPaintStretched()
    {
        org.jdesktop.swingx.painter.AbstractAreaPainter r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        $z0 = r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: boolean stretchPaint>;

        return $z0;
    }

    public void setPaintStretched(boolean)
    {
        org.jdesktop.swingx.painter.AbstractAreaPainter r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: boolean isPaintStretched()>();

        r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: boolean stretchPaint> = z1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void setDirty(boolean)>(1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: boolean isPaintStretched()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("paintStretched", $r1, $r2);

        return;
    }

    public void setBorderPaint(java.awt.Paint)
    {
        java.awt.Paint $r1, r2, $r3;
        org.jdesktop.swingx.painter.AbstractAreaPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        r2 := @parameter0: java.awt.Paint;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: java.awt.Paint getBorderPaint()>();

        r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: java.awt.Paint borderPaint> = r2;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void setDirty(boolean)>(1);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: java.awt.Paint getBorderPaint()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("borderPaint", $r1, $r3);

        return;
    }

    public java.awt.Paint getBorderPaint()
    {
        java.awt.Paint $r1;
        org.jdesktop.swingx.painter.AbstractAreaPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        $r1 = r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: java.awt.Paint borderPaint>;

        return $r1;
    }

    public void setStyle(org.jdesktop.swingx.painter.AbstractAreaPainter$Style)
    {
        org.jdesktop.swingx.painter.AbstractAreaPainter r0;
        org.jdesktop.swingx.painter.AbstractAreaPainter$Style $r1, r2, $r3, $r4;

        r0 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        r2 := @parameter0: org.jdesktop.swingx.painter.AbstractAreaPainter$Style;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.AbstractAreaPainter$Style getStyle()>();

        if r2 != null goto label1;

        $r4 = <org.jdesktop.swingx.painter.AbstractAreaPainter$Style: org.jdesktop.swingx.painter.AbstractAreaPainter$Style BOTH>;

        goto label2;

     label1:
        $r4 = r2;

     label2:
        r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.AbstractAreaPainter$Style style> = $r4;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void setDirty(boolean)>(1);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.AbstractAreaPainter$Style getStyle()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("style", $r1, $r3);

        return;
    }

    public org.jdesktop.swingx.painter.AbstractAreaPainter$Style getStyle()
    {
        org.jdesktop.swingx.painter.AbstractAreaPainter$Style $r1;
        org.jdesktop.swingx.painter.AbstractAreaPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        $r1 = r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.AbstractAreaPainter$Style style>;

        return $r1;
    }

    public void setBorderWidth(float)
    {
        java.lang.Float $r1, $r2;
        org.jdesktop.swingx.painter.AbstractAreaPainter r0;
        float $f0, f1, $f2;

        r0 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        f1 := @parameter0: float;

        $f0 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: float getBorderWidth()>();

        r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: float borderWidth> = f1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void setDirty(boolean)>(1);

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $f2 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: float getBorderWidth()>();

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("borderWidth", $r1, $r2);

        return;
    }

    public float getBorderWidth()
    {
        float $f0;
        org.jdesktop.swingx.painter.AbstractAreaPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        $f0 = r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: float borderWidth>;

        return $f0;
    }

    java.awt.Paint calculateSnappedPaint(java.awt.Paint, int, int)
    {
        java.awt.Paint r0, $r1;
        org.jdesktop.swingx.painter.AbstractAreaPainter r2;
        int i0, i1;

        r2 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        r0 := @parameter0: java.awt.Paint;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <org.jdesktop.swingx.util.PaintUtils: java.awt.Paint resizeGradient(java.awt.Paint,int,int)>(r0, i0, i1);

        return $r1;
    }

    protected abstract java.awt.Shape provideShape(java.awt.Graphics2D, java.lang.Object, int, int);

    public transient void setAreaEffects(org.jdesktop.swingx.painter.effects.AreaEffect[])
    {
        org.jdesktop.swingx.painter.effects.AreaEffect[] $r1, r2, $r3, $r4, $r5, $r6;
        org.jdesktop.swingx.painter.AbstractAreaPainter r0;
        int $i0, $i1;

        r0 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        r2 := @parameter0: org.jdesktop.swingx.painter.effects.AreaEffect[];

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.effects.AreaEffect[] getAreaEffects()>();

        if r2 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = lengthof r2;

     label2:
        $r3 = newarray (org.jdesktop.swingx.painter.effects.AreaEffect)[$i1];

        r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.effects.AreaEffect[] areaEffects> = $r3;

        if r2 == null goto label3;

        $r6 = r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.effects.AreaEffect[] areaEffects>;

        $r5 = r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.effects.AreaEffect[] areaEffects>;

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r6, 0, $i0);

     label3:
        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void setDirty(boolean)>(1);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.effects.AreaEffect[] getAreaEffects()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("areaEffects", $r1, $r4);

        return;
    }

    public org.jdesktop.swingx.painter.effects.AreaEffect[] getAreaEffects()
    {
        org.jdesktop.swingx.painter.AbstractAreaPainter r0;
        org.jdesktop.swingx.painter.effects.AreaEffect[] $r1, r2, $r3;
        int $i0, $i1;

        r0 := @this: org.jdesktop.swingx.painter.AbstractAreaPainter;

        $r1 = r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.effects.AreaEffect[] areaEffects>;

        $i0 = lengthof $r1;

        r2 = newarray (org.jdesktop.swingx.painter.effects.AreaEffect)[$i0];

        $r3 = r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: org.jdesktop.swingx.painter.effects.AreaEffect[] areaEffects>;

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i1);

        return r2;
    }
}
