public class com.google.gxp.compiler.cpp.CppUtil extends com.google.gxp.compiler.codegen.OutputLanguageUtil
{
    private static final java.util.Set FORBIDDEN_OPS;
    private static final java.util.regex.Pattern OPS_FINDER;
    private static final java.util.Set RESERVED_WORDS;
    public static final com.google.gxp.compiler.cpp.CppUtil INSTANCE;

    private void <init>()
    {
        com.google.gxp.com.google.common.base.CharEscaper $r4, $r5;
        com.google.gxp.compiler.cpp.CppUtil r0;
        java.util.Set $r1, $r2;
        java.util.regex.Pattern $r3;

        r0 := @this: com.google.gxp.compiler.cpp.CppUtil;

        $r1 = <com.google.gxp.compiler.cpp.CppUtil: java.util.Set RESERVED_WORDS>;

        $r2 = <com.google.gxp.compiler.cpp.CppUtil: java.util.Set FORBIDDEN_OPS>;

        $r3 = <com.google.gxp.compiler.cpp.CppUtil: java.util.regex.Pattern OPS_FINDER>;

        $r4 = staticinvoke <com.google.gxp.com.google.common.base.CharEscapers: com.google.gxp.com.google.common.base.CharEscaper javaStringUnicodeEscaper()>();

        $r5 = staticinvoke <com.google.gxp.com.google.common.base.CharEscapers: com.google.gxp.com.google.common.base.CharEscaper javaStringEscaper()>();

        specialinvoke r0.<com.google.gxp.compiler.codegen.OutputLanguageUtil: void <init>(java.lang.Iterable,java.lang.Iterable,java.util.regex.Pattern,com.google.gxp.com.google.common.base.CharEscaper,com.google.gxp.com.google.common.base.CharEscaper)>($r1, $r2, $r3, $r4, $r5);

        return;
    }

    public java.lang.String validateExpression(com.google.gxp.compiler.alerts.AlertSink, com.google.gxp.compiler.base.NativeExpression, com.google.gxp.compiler.base.OutputLanguage)
    {
        com.google.gxp.com.google.common.base.CharEscaper $r3;
        com.google.gxp.compiler.base.NativeExpression r0;
        com.google.gxp.compiler.base.OutputLanguage r1;
        com.google.gxp.compiler.alerts.AlertSink r6;
        com.google.gxp.compiler.cpp.CppUtil r5;
        java.lang.String $r2, $r4;

        r5 := @this: com.google.gxp.compiler.cpp.CppUtil;

        r6 := @parameter0: com.google.gxp.compiler.alerts.AlertSink;

        r0 := @parameter1: com.google.gxp.compiler.base.NativeExpression;

        r1 := @parameter2: com.google.gxp.compiler.base.OutputLanguage;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.NativeExpression: java.lang.String getNativeCode(com.google.gxp.compiler.base.OutputLanguage)>(r1);

        if $r2 != null goto label1;

        return "";

     label1:
        $r3 = staticinvoke <com.google.gxp.com.google.common.base.CharEscapers: com.google.gxp.com.google.common.base.CharEscaper javaStringUnicodeEscaper()>();

        $r4 = virtualinvoke $r3.<com.google.gxp.com.google.common.base.CharEscaper: java.lang.String escape(java.lang.String)>($r2);

        return $r4;
    }

    public static java.lang.String validateType(com.google.gxp.compiler.alerts.AlertSink, com.google.gxp.compiler.base.NativeType)
    {
        com.google.gxp.compiler.alerts.common.MissingTypeError $r7;
        com.google.gxp.compiler.base.OutputLanguage $r1, $r8;
        com.google.gxp.compiler.alerts.AlertSink r6;
        java.lang.String $r2, $r3, $r4, $r5;
        com.google.gxp.compiler.base.NativeType r0;

        r6 := @parameter0: com.google.gxp.compiler.alerts.AlertSink;

        r0 := @parameter1: com.google.gxp.compiler.base.NativeType;

        $r1 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage CPP>;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.NativeType: java.lang.String getNativeType(com.google.gxp.compiler.base.OutputLanguage)>($r1);

        if $r2 != null goto label1;

        $r7 = new com.google.gxp.compiler.alerts.common.MissingTypeError;

        $r8 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage CPP>;

        specialinvoke $r7.<com.google.gxp.compiler.alerts.common.MissingTypeError: void <init>(com.google.gxp.compiler.base.NativeType,com.google.gxp.compiler.base.OutputLanguage)>(r0, $r8);

        interfaceinvoke r6.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r7);

        return $r2;

     label1:
        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("{", "< ");

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("}", " >");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        return $r5;
    }

    static void <clinit>()
    {
        com.google.gxp.com.google.common.collect.ImmutableSet $r0, $r3;
        com.google.gxp.compiler.cpp.CppUtil $r4;
        java.lang.String[] $r1;
        java.util.regex.Pattern $r2;

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.ImmutableSet: com.google.gxp.com.google.common.collect.ImmutableSet of()>();

        <com.google.gxp.compiler.cpp.CppUtil: java.util.Set FORBIDDEN_OPS> = $r0;

        $r1 = newarray (java.lang.String)[0];

        $r2 = staticinvoke <com.google.gxp.compiler.cpp.CppUtil: java.util.regex.Pattern compileUnionPattern(java.lang.String[])>($r1);

        <com.google.gxp.compiler.cpp.CppUtil: java.util.regex.Pattern OPS_FINDER> = $r2;

        $r3 = staticinvoke <com.google.gxp.com.google.common.collect.ImmutableSet: com.google.gxp.com.google.common.collect.ImmutableSet of()>();

        <com.google.gxp.compiler.cpp.CppUtil: java.util.Set RESERVED_WORDS> = $r3;

        $r4 = new com.google.gxp.compiler.cpp.CppUtil;

        specialinvoke $r4.<com.google.gxp.compiler.cpp.CppUtil: void <init>()>();

        <com.google.gxp.compiler.cpp.CppUtil: com.google.gxp.compiler.cpp.CppUtil INSTANCE> = $r4;

        return;
    }
}
