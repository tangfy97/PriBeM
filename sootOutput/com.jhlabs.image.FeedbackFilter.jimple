public class com.jhlabs.image.FeedbackFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    private float centreX;
    private float centreY;
    private float distance;
    private float angle;
    private float rotation;
    private float zoom;
    private float startAlpha;
    private float endAlpha;
    private int iterations;

    public void <init>()
    {
        com.jhlabs.image.FeedbackFilter r0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.FeedbackFilter: float centreX> = 0.5F;

        r0.<com.jhlabs.image.FeedbackFilter: float centreY> = 0.5F;

        r0.<com.jhlabs.image.FeedbackFilter: float startAlpha> = 1.0F;

        r0.<com.jhlabs.image.FeedbackFilter: float endAlpha> = 1.0F;

        return;
    }

    public void <init>(float, float, float, float)
    {
        com.jhlabs.image.FeedbackFilter r0;
        float f0, f1, f2, f3;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.FeedbackFilter: float centreX> = 0.5F;

        r0.<com.jhlabs.image.FeedbackFilter: float centreY> = 0.5F;

        r0.<com.jhlabs.image.FeedbackFilter: float startAlpha> = 1.0F;

        r0.<com.jhlabs.image.FeedbackFilter: float endAlpha> = 1.0F;

        r0.<com.jhlabs.image.FeedbackFilter: float distance> = f0;

        r0.<com.jhlabs.image.FeedbackFilter: float angle> = f1;

        r0.<com.jhlabs.image.FeedbackFilter: float rotation> = f2;

        r0.<com.jhlabs.image.FeedbackFilter: float zoom> = f3;

        return;
    }

    public void setAngle(float)
    {
        com.jhlabs.image.FeedbackFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FeedbackFilter: float angle> = f0;

        return;
    }

    public float getAngle()
    {
        com.jhlabs.image.FeedbackFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        $f0 = r0.<com.jhlabs.image.FeedbackFilter: float angle>;

        return $f0;
    }

    public void setDistance(float)
    {
        com.jhlabs.image.FeedbackFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FeedbackFilter: float distance> = f0;

        return;
    }

    public float getDistance()
    {
        com.jhlabs.image.FeedbackFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        $f0 = r0.<com.jhlabs.image.FeedbackFilter: float distance>;

        return $f0;
    }

    public void setRotation(float)
    {
        com.jhlabs.image.FeedbackFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FeedbackFilter: float rotation> = f0;

        return;
    }

    public float getRotation()
    {
        com.jhlabs.image.FeedbackFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        $f0 = r0.<com.jhlabs.image.FeedbackFilter: float rotation>;

        return $f0;
    }

    public void setZoom(float)
    {
        com.jhlabs.image.FeedbackFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FeedbackFilter: float zoom> = f0;

        return;
    }

    public float getZoom()
    {
        com.jhlabs.image.FeedbackFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        $f0 = r0.<com.jhlabs.image.FeedbackFilter: float zoom>;

        return $f0;
    }

    public void setStartAlpha(float)
    {
        com.jhlabs.image.FeedbackFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FeedbackFilter: float startAlpha> = f0;

        return;
    }

    public float getStartAlpha()
    {
        com.jhlabs.image.FeedbackFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        $f0 = r0.<com.jhlabs.image.FeedbackFilter: float startAlpha>;

        return $f0;
    }

    public void setEndAlpha(float)
    {
        com.jhlabs.image.FeedbackFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FeedbackFilter: float endAlpha> = f0;

        return;
    }

    public float getEndAlpha()
    {
        com.jhlabs.image.FeedbackFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        $f0 = r0.<com.jhlabs.image.FeedbackFilter: float endAlpha>;

        return $f0;
    }

    public void setCentreX(float)
    {
        com.jhlabs.image.FeedbackFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FeedbackFilter: float centreX> = f0;

        return;
    }

    public float getCentreX()
    {
        com.jhlabs.image.FeedbackFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        $f0 = r0.<com.jhlabs.image.FeedbackFilter: float centreX>;

        return $f0;
    }

    public void setCentreY(float)
    {
        com.jhlabs.image.FeedbackFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FeedbackFilter: float centreY> = f0;

        return;
    }

    public float getCentreY()
    {
        com.jhlabs.image.FeedbackFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        $f0 = r0.<com.jhlabs.image.FeedbackFilter: float centreY>;

        return $f0;
    }

    public void setCentre(java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r1;
        com.jhlabs.image.FeedbackFilter r0;
        float $f0, $f1;
        double $d0, $d1;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $f0 = (float) $d0;

        r0.<com.jhlabs.image.FeedbackFilter: float centreX> = $f0;

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $f1 = (float) $d1;

        r0.<com.jhlabs.image.FeedbackFilter: float centreY> = $f1;

        return;
    }

    public java.awt.geom.Point2D getCentre()
    {
        java.awt.geom.Point2D$Float $r0;
        com.jhlabs.image.FeedbackFilter r1;
        float $f0, $f1;

        r1 := @this: com.jhlabs.image.FeedbackFilter;

        $r0 = new java.awt.geom.Point2D$Float;

        $f1 = r1.<com.jhlabs.image.FeedbackFilter: float centreX>;

        $f0 = r1.<com.jhlabs.image.FeedbackFilter: float centreY>;

        specialinvoke $r0.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f1, $f0);

        return $r0;
    }

    public void setIterations(int)
    {
        com.jhlabs.image.FeedbackFilter r0;
        int i0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.FeedbackFilter: int iterations> = i0;

        return;
    }

    public int getIterations()
    {
        com.jhlabs.image.FeedbackFilter r0;
        int $i0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        $i0 = r0.<com.jhlabs.image.FeedbackFilter: int iterations>;

        return $i0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        byte $b6;
        java.awt.AlphaComposite $r7;
        java.awt.RenderingHints$Key $r4, $r6;
        com.jhlabs.image.FeedbackFilter r1;
        java.awt.image.BufferedImage r0, r9;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28;
        java.awt.Graphics2D $r2, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, i7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;
        java.lang.Object $r3, $r5;

        r1 := @this: com.jhlabs.image.FeedbackFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r9 := @parameter1: java.awt.image.BufferedImage;

        if r9 != null goto label1;

        r9 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label1:
        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $f1 = (float) $i0;

        $f0 = r1.<com.jhlabs.image.FeedbackFilter: float centreX>;

        $f23 = $f1 * $f0;

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $f3 = (float) $i1;

        $f2 = r1.<com.jhlabs.image.FeedbackFilter: float centreY>;

        $f24 = $f3 * $f2;

        $f5 = $f23 * $f23;

        $f4 = $f24 * $f24;

        $f6 = $f5 + $f4;

        $d0 = (double) $f6;

        staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f7 = r1.<com.jhlabs.image.FeedbackFilter: float distance>;

        $d2 = (double) $f7;

        $f8 = r1.<com.jhlabs.image.FeedbackFilter: float angle>;

        $d1 = (double) $f8;

        $d3 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        $d4 = $d2 * $d3;

        $f25 = (float) $d4;

        $f9 = r1.<com.jhlabs.image.FeedbackFilter: float distance>;

        $d6 = (double) $f9;

        $f10 = r1.<com.jhlabs.image.FeedbackFilter: float angle>;

        $d5 = (double) $f10;

        $d7 = staticinvoke <java.lang.Math: double sin(double)>($d5);

        $d8 = neg $d7;

        $d9 = $d6 * $d8;

        $f26 = (float) $d9;

        $f11 = r1.<com.jhlabs.image.FeedbackFilter: float zoom>;

        $d10 = (double) $f11;

        $d11 = staticinvoke <java.lang.Math: double exp(double)>($d10);

        $f27 = (float) $d11;

        $f28 = r1.<com.jhlabs.image.FeedbackFilter: float rotation>;

        $i2 = r1.<com.jhlabs.image.FeedbackFilter: int iterations>;

        if $i2 != 0 goto label2;

        $r8 = virtualinvoke r9.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke $r8.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>(r0, null);

        virtualinvoke $r8.<java.awt.Graphics: void dispose()>();

        return r9;

     label2:
        $r2 = virtualinvoke r9.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke $r2.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)>(r0, null, null);

        i7 = 0;

     label3:
        $i3 = r1.<com.jhlabs.image.FeedbackFilter: int iterations>;

        if i7 >= $i3 goto label5;

        $r4 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r3 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        virtualinvoke $r2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r4, $r3);

        $r6 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r5 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BILINEAR>;

        virtualinvoke $r2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r6, $r5);

        $f13 = (float) i7;

        $i4 = r1.<com.jhlabs.image.FeedbackFilter: int iterations>;

        $i5 = $i4 - 1;

        $f12 = (float) $i5;

        $f16 = $f13 / $f12;

        $f15 = r1.<com.jhlabs.image.FeedbackFilter: float startAlpha>;

        $f14 = r1.<com.jhlabs.image.FeedbackFilter: float endAlpha>;

        $f17 = staticinvoke <com.jhlabs.image.ImageMath: float lerp(float,float,float)>($f16, $f15, $f14);

        $r7 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, $f17);

        virtualinvoke $r2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r7);

        $f18 = $f23 + $f25;

        $d13 = (double) $f18;

        $f19 = $f24 + $f26;

        $d12 = (double) $f19;

        virtualinvoke $r2.<java.awt.Graphics2D: void translate(double,double)>($d13, $d12);

        $d15 = (double) $f27;

        $d14 = (double) $f27;

        virtualinvoke $r2.<java.awt.Graphics2D: void scale(double,double)>($d15, $d14);

        $f20 = r1.<com.jhlabs.image.FeedbackFilter: float rotation>;

        $b6 = $f20 cmpl 0.0F;

        if $b6 == 0 goto label4;

        $d18 = (double) $f28;

        virtualinvoke $r2.<java.awt.Graphics2D: void rotate(double)>($d18);

     label4:
        $f21 = neg $f23;

        $d17 = (double) $f21;

        $f22 = neg $f24;

        $d16 = (double) $f22;

        virtualinvoke $r2.<java.awt.Graphics2D: void translate(double,double)>($d17, $d16);

        virtualinvoke $r2.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)>(r0, null, null);

        i7 = i7 + 1;

        goto label3;

     label5:
        virtualinvoke $r2.<java.awt.Graphics: void dispose()>();

        return r9;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.FeedbackFilter r0;

        r0 := @this: com.jhlabs.image.FeedbackFilter;

        return "Effects/Feedback...";
    }
}
