public class org.apache.poi.ss.formula.SharedFormula extends java.lang.Object
{
    private final int _columnWrappingMask;
    private final int _rowWrappingMask;

    public void <init>(org.apache.poi.ss.SpreadsheetVersion)
    {
        org.apache.poi.ss.formula.SharedFormula r0;
        org.apache.poi.ss.SpreadsheetVersion r1;
        int $i0, $i1;

        r0 := @this: org.apache.poi.ss.formula.SharedFormula;

        r1 := @parameter0: org.apache.poi.ss.SpreadsheetVersion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.poi.ss.SpreadsheetVersion: int getLastColumnIndex()>();

        r0.<org.apache.poi.ss.formula.SharedFormula: int _columnWrappingMask> = $i0;

        $i1 = virtualinvoke r1.<org.apache.poi.ss.SpreadsheetVersion: int getLastRowIndex()>();

        r0.<org.apache.poi.ss.formula.SharedFormula: int _rowWrappingMask> = $i1;

        return;
    }

    public org.apache.poi.ss.formula.ptg.Ptg[] convertSharedFormulas(org.apache.poi.ss.formula.ptg.Ptg[], int, int)
    {
        byte b17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        org.apache.poi.ss.formula.ptg.RefPtg $r5;
        org.apache.poi.ss.formula.ptg.Ptg r6;
        org.apache.poi.ss.formula.SharedFormula r4;
        org.apache.poi.ss.formula.ptg.Ptg[] r0, r1;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16;
        org.apache.poi.ss.formula.ptg.OperandPtg $r2;
        org.apache.poi.ss.formula.ptg.AreaPtgBase r8;
        org.apache.poi.ss.formula.ptg.RefPtgBase r7;
        org.apache.poi.ss.formula.ptg.AreaPtg $r3;

        r4 := @this: org.apache.poi.ss.formula.SharedFormula;

        r0 := @parameter0: org.apache.poi.ss.formula.ptg.Ptg[];

        i2 := @parameter1: int;

        i7 := @parameter2: int;

        $i0 = lengthof r0;

        r1 = newarray (org.apache.poi.ss.formula.ptg.Ptg)[$i0];

        i16 = 0;

     label1:
        $i1 = lengthof r0;

        if i16 >= $i1 goto label6;

        r6 = r0[i16];

        b17 = -1;

        $z0 = virtualinvoke r6.<org.apache.poi.ss.formula.ptg.Ptg: boolean isBaseToken()>();

        if $z0 != 0 goto label2;

        b17 = virtualinvoke r6.<org.apache.poi.ss.formula.ptg.Ptg: byte getPtgClass()>();

     label2:
        $z1 = r6 instanceof org.apache.poi.ss.formula.ptg.RefPtgBase;

        if $z1 == 0 goto label3;

        r7 = (org.apache.poi.ss.formula.ptg.RefPtgBase) r6;

        $r5 = new org.apache.poi.ss.formula.ptg.RefPtg;

        $i12 = virtualinvoke r7.<org.apache.poi.ss.formula.ptg.RefPtgBase: int getRow()>();

        $z12 = virtualinvoke r7.<org.apache.poi.ss.formula.ptg.RefPtgBase: boolean isRowRelative()>();

        $i13 = specialinvoke r4.<org.apache.poi.ss.formula.SharedFormula: int fixupRelativeRow(int,int,boolean)>(i2, $i12, $z12);

        $i14 = virtualinvoke r7.<org.apache.poi.ss.formula.ptg.RefPtgBase: int getColumn()>();

        $z13 = virtualinvoke r7.<org.apache.poi.ss.formula.ptg.RefPtgBase: boolean isColRelative()>();

        $i15 = specialinvoke r4.<org.apache.poi.ss.formula.SharedFormula: int fixupRelativeColumn(int,int,boolean)>(i7, $i14, $z13);

        $z14 = virtualinvoke r7.<org.apache.poi.ss.formula.ptg.RefPtgBase: boolean isRowRelative()>();

        $z15 = virtualinvoke r7.<org.apache.poi.ss.formula.ptg.RefPtgBase: boolean isColRelative()>();

        specialinvoke $r5.<org.apache.poi.ss.formula.ptg.RefPtg: void <init>(int,int,boolean,boolean)>($i13, $i15, $z14, $z15);

        r6 = $r5;

        virtualinvoke $r5.<org.apache.poi.ss.formula.ptg.Ptg: void setClass(byte)>(b17);

        goto label5;

     label3:
        $z2 = r6 instanceof org.apache.poi.ss.formula.ptg.AreaPtgBase;

        if $z2 == 0 goto label4;

        r8 = (org.apache.poi.ss.formula.ptg.AreaPtgBase) r6;

        $r3 = new org.apache.poi.ss.formula.ptg.AreaPtg;

        $i3 = virtualinvoke r8.<org.apache.poi.ss.formula.ptg.AreaPtgBase: int getFirstRow()>();

        $z4 = virtualinvoke r8.<org.apache.poi.ss.formula.ptg.AreaPtgBase: boolean isFirstRowRelative()>();

        $i4 = specialinvoke r4.<org.apache.poi.ss.formula.SharedFormula: int fixupRelativeRow(int,int,boolean)>(i2, $i3, $z4);

        $i5 = virtualinvoke r8.<org.apache.poi.ss.formula.ptg.AreaPtgBase: int getLastRow()>();

        $z5 = virtualinvoke r8.<org.apache.poi.ss.formula.ptg.AreaPtgBase: boolean isLastRowRelative()>();

        $i6 = specialinvoke r4.<org.apache.poi.ss.formula.SharedFormula: int fixupRelativeRow(int,int,boolean)>(i2, $i5, $z5);

        $i8 = virtualinvoke r8.<org.apache.poi.ss.formula.ptg.AreaPtgBase: int getFirstColumn()>();

        $z6 = virtualinvoke r8.<org.apache.poi.ss.formula.ptg.AreaPtgBase: boolean isFirstColRelative()>();

        $i9 = specialinvoke r4.<org.apache.poi.ss.formula.SharedFormula: int fixupRelativeColumn(int,int,boolean)>(i7, $i8, $z6);

        $i10 = virtualinvoke r8.<org.apache.poi.ss.formula.ptg.AreaPtgBase: int getLastColumn()>();

        $z7 = virtualinvoke r8.<org.apache.poi.ss.formula.ptg.AreaPtgBase: boolean isLastColRelative()>();

        $i11 = specialinvoke r4.<org.apache.poi.ss.formula.SharedFormula: int fixupRelativeColumn(int,int,boolean)>(i7, $i10, $z7);

        $z8 = virtualinvoke r8.<org.apache.poi.ss.formula.ptg.AreaPtgBase: boolean isFirstRowRelative()>();

        $z9 = virtualinvoke r8.<org.apache.poi.ss.formula.ptg.AreaPtgBase: boolean isLastRowRelative()>();

        $z10 = virtualinvoke r8.<org.apache.poi.ss.formula.ptg.AreaPtgBase: boolean isFirstColRelative()>();

        $z11 = virtualinvoke r8.<org.apache.poi.ss.formula.ptg.AreaPtgBase: boolean isLastColRelative()>();

        specialinvoke $r3.<org.apache.poi.ss.formula.ptg.AreaPtg: void <init>(int,int,int,int,boolean,boolean,boolean,boolean)>($i4, $i6, $i9, $i11, $z8, $z9, $z10, $z11);

        r6 = $r3;

        virtualinvoke $r3.<org.apache.poi.ss.formula.ptg.Ptg: void setClass(byte)>(b17);

        goto label5;

     label4:
        $z3 = r6 instanceof org.apache.poi.ss.formula.ptg.OperandPtg;

        if $z3 == 0 goto label5;

        $r2 = (org.apache.poi.ss.formula.ptg.OperandPtg) r6;

        r6 = virtualinvoke $r2.<org.apache.poi.ss.formula.ptg.OperandPtg: org.apache.poi.ss.formula.ptg.OperandPtg copy()>();

     label5:
        r1[i16] = r6;

        i16 = i16 + 1;

        goto label1;

     label6:
        return r1;
    }

    private int fixupRelativeColumn(int, int, boolean)
    {
        org.apache.poi.ss.formula.SharedFormula r0;
        int i0, i1, $i2, $i3, $i4;
        boolean z0;

        r0 := @this: org.apache.poi.ss.formula.SharedFormula;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $i3 = i0 + i1;

        $i2 = r0.<org.apache.poi.ss.formula.SharedFormula: int _columnWrappingMask>;

        $i4 = $i3 & $i2;

        return $i4;

     label1:
        return i0;
    }

    private int fixupRelativeRow(int, int, boolean)
    {
        org.apache.poi.ss.formula.SharedFormula r0;
        int i0, i1, $i2, $i3, $i4;
        boolean z0;

        r0 := @this: org.apache.poi.ss.formula.SharedFormula;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $i3 = i0 + i1;

        $i2 = r0.<org.apache.poi.ss.formula.SharedFormula: int _rowWrappingMask>;

        $i4 = $i3 & $i2;

        return $i4;

     label1:
        return i0;
    }
}
