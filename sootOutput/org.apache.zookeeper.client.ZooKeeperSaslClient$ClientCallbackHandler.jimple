public class org.apache.zookeeper.client.ZooKeeperSaslClient$ClientCallbackHandler extends java.lang.Object implements javax.security.auth.callback.CallbackHandler
{
    private java.lang.String password;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.apache.zookeeper.client.ZooKeeperSaslClient$ClientCallbackHandler r0;

        r0 := @this: org.apache.zookeeper.client.ZooKeeperSaslClient$ClientCallbackHandler;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.zookeeper.client.ZooKeeperSaslClient$ClientCallbackHandler: java.lang.String password> = null;

        r0.<org.apache.zookeeper.client.ZooKeeperSaslClient$ClientCallbackHandler: java.lang.String password> = r1;

        return;
    }

    public void handle(javax.security.auth.callback.Callback[]) throws javax.security.auth.callback.UnsupportedCallbackException
    {
        javax.security.auth.callback.UnsupportedCallbackException $r2;
        org.apache.zookeeper.client.ZooKeeperSaslClient$ClientCallbackHandler r6;
        javax.security.auth.callback.Callback[] r0;
        int i0, i1;
        java.lang.String $r3, $r4, $r5, $r7, $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        javax.security.sasl.RealmCallback r14;
        javax.security.auth.callback.PasswordCallback r13;
        org.slf4j.Logger $r8;
        javax.security.auth.callback.NameCallback r12;
        javax.security.sasl.AuthorizeCallback r15;
        char[] $r10;
        javax.security.auth.callback.Callback r1;

        r6 := @this: org.apache.zookeeper.client.ZooKeeperSaslClient$ClientCallbackHandler;

        r0 := @parameter0: javax.security.auth.callback.Callback[];

        i0 = lengthof r0;

        i1 = 0;

     label01:
        if i1 >= i0 goto label12;

        r1 = r0[i1];

        $z0 = r1 instanceof javax.security.auth.callback.NameCallback;

        if $z0 == 0 goto label02;

        r12 = (javax.security.auth.callback.NameCallback) r1;

        $r11 = virtualinvoke r12.<javax.security.auth.callback.NameCallback: java.lang.String getDefaultName()>();

        virtualinvoke r12.<javax.security.auth.callback.NameCallback: void setName(java.lang.String)>($r11);

        goto label11;

     label02:
        $z1 = r1 instanceof javax.security.auth.callback.PasswordCallback;

        if $z1 == 0 goto label05;

        r13 = (javax.security.auth.callback.PasswordCallback) r1;

        $r7 = r6.<org.apache.zookeeper.client.ZooKeeperSaslClient$ClientCallbackHandler: java.lang.String password>;

        if $r7 == null goto label03;

        $r9 = r6.<org.apache.zookeeper.client.ZooKeeperSaslClient$ClientCallbackHandler: java.lang.String password>;

        $r10 = virtualinvoke $r9.<java.lang.String: char[] toCharArray()>();

        virtualinvoke r13.<javax.security.auth.callback.PasswordCallback: void setPassword(char[])>($r10);

        goto label04;

     label03:
        $r8 = staticinvoke <org.apache.zookeeper.client.ZooKeeperSaslClient: org.slf4j.Logger access$000()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String)>("Could not login: the client is being asked for a password, but the Zookeeper client code does not currently support obtaining a password from the user. Make sure that the client is configured to use a ticket cache (using the JAAS configuration setting \'useTicketCache=true)\' and restart the client. If you still get this message after that, the TGT in the ticket cache has expired and must be manually refreshed. To do so, first determine if you are using a password or a keytab. If the former, run kinit in a Unix shell in the environment of the user who is running this Zookeeper client using the command \'kinit <princ>\' (where <princ> is the name of the client\'s Kerberos principal). If the latter, do \'kinit -k -t <keytab> <princ>\' (where <princ> is the name of the Kerberos principal, and <keytab> is the location of the keytab file). After manually refreshing your cache, restart this client. If you continue to see this message after manually refreshing your cache, ensure that your KDC host\'s clock is in sync with this host\'s clock.");

     label04:
        goto label11;

     label05:
        $z2 = r1 instanceof javax.security.sasl.RealmCallback;

        if $z2 == 0 goto label06;

        r14 = (javax.security.sasl.RealmCallback) r1;

        $r5 = virtualinvoke r14.<javax.security.sasl.RealmCallback: java.lang.String getDefaultText()>();

        virtualinvoke r14.<javax.security.sasl.RealmCallback: void setText(java.lang.String)>($r5);

        goto label11;

     label06:
        $z3 = r1 instanceof javax.security.sasl.AuthorizeCallback;

        if $z3 == 0 goto label10;

        r15 = (javax.security.sasl.AuthorizeCallback) r1;

        $r3 = virtualinvoke r15.<javax.security.sasl.AuthorizeCallback: java.lang.String getAuthenticationID()>();

        $r4 = virtualinvoke r15.<javax.security.sasl.AuthorizeCallback: java.lang.String getAuthorizationID()>();

        $z4 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z4 == 0 goto label07;

        virtualinvoke r15.<javax.security.sasl.AuthorizeCallback: void setAuthorized(boolean)>(1);

        goto label08;

     label07:
        virtualinvoke r15.<javax.security.sasl.AuthorizeCallback: void setAuthorized(boolean)>(0);

     label08:
        $z5 = virtualinvoke r15.<javax.security.sasl.AuthorizeCallback: boolean isAuthorized()>();

        if $z5 == 0 goto label09;

        virtualinvoke r15.<javax.security.sasl.AuthorizeCallback: void setAuthorizedID(java.lang.String)>($r4);

     label09:
        goto label11;

     label10:
        $r2 = new javax.security.auth.callback.UnsupportedCallbackException;

        specialinvoke $r2.<javax.security.auth.callback.UnsupportedCallbackException: void <init>(javax.security.auth.callback.Callback,java.lang.String)>(r1, "Unrecognized SASL ClientCallback");

        throw $r2;

     label11:
        i1 = i1 + 1;

        goto label01;

     label12:
        return;
    }
}
