class com.mycila.inject.schedule.SchedulingModule$2$1 extends java.lang.Object implements com.google.inject.spi.InjectionListener
{
    final javax.inject.Provider val$scheduler;
    final com.mycila.inject.schedule.SchedulingModule$2 this$1;

    void <init>(com.mycila.inject.schedule.SchedulingModule$2, javax.inject.Provider)
    {
        javax.inject.Provider r2;
        com.mycila.inject.schedule.SchedulingModule$2$1 r0;
        com.mycila.inject.schedule.SchedulingModule$2 r1;

        r0 := @this: com.mycila.inject.schedule.SchedulingModule$2$1;

        r1 := @parameter0: com.mycila.inject.schedule.SchedulingModule$2;

        r2 := @parameter1: javax.inject.Provider;

        r0.<com.mycila.inject.schedule.SchedulingModule$2$1: com.mycila.inject.schedule.SchedulingModule$2 this$1> = r1;

        r0.<com.mycila.inject.schedule.SchedulingModule$2$1: javax.inject.Provider val$scheduler> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void afterInjection(java.lang.Object)
    {
        org.quartz.JobBuilder $r10, $r11, $r22, $r27, $r28;
        org.quartz.Scheduler $r9, $r32;
        com.mycila.inject.schedule.SchedulingModule$2$1 r6;
        com.google.inject.ProvisionException $r78;
        java.lang.StringBuilder $r15, $r16, $r37, $r38, $r51, $r52, $r62, $r65, $r66, $r68, $r73, $r74, $r76, $r77;
        java.lang.Throwable $r70;
        org.quartz.TriggerBuilder $r33, $r44, $r47, $r58;
        org.quartz.SchedulerException $r80;
        java.lang.String $r14, $r17, $r21, $r25, $r36, $r39, $r43, $r45, $r50, $r53, $r57, $r64, $r67, $r69, $r72;
        com.mycila.inject.internal.guava.collect.ImmutableMap $r26;
        javax.inject.Provider $r7, $r30;
        com.mycila.inject.schedule.SchedulingModule$2 $r18, $r40, $r54;
        boolean $z0;
        org.quartz.ScheduleBuilder $r79;
        com.mycila.inject.schedule.Cron r3;
        com.mycila.inject.schedule.SchedulingModule $r19, $r41, $r55;
        java.util.logging.Logger $r4, $r60;
        org.quartz.JobDataMap $r75;
        java.lang.'annotation'.Annotation $r2;
        java.util.logging.Level $r5;
        org.quartz.Trigger $r59;
        org.quartz.JobDetail $r29;
        java.lang.Object r0, $r8, $r31;
        java.lang.Class $r1, $r13, $r20, $r24, $r35, $r42, $r49, $r56, $r63;
        org.quartz.CronScheduleBuilder $r46;

        r6 := @this: com.mycila.inject.schedule.SchedulingModule$2$1;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/mycila/inject/schedule/Cron;");

        r3 = (com.mycila.inject.schedule.Cron) $r2;

        $r4 = staticinvoke <com.mycila.inject.schedule.SchedulingModule: java.util.logging.Logger access$000()>();

        $r5 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $z0 = virtualinvoke $r4.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r5);

        if $z0 == 0 goto label1;

        $r60 = staticinvoke <com.mycila.inject.schedule.SchedulingModule: java.util.logging.Logger access$000()>();

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Registering cron job ");

        $r63 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r64 = virtualinvoke $r63.<java.lang.Class: java.lang.String getName()>();

        $r65 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at frequency: ");

        $r67 = interfaceinvoke r3.<com.mycila.inject.schedule.Cron: java.lang.String value()>();

        $r68 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r60.<java.util.logging.Logger: void info(java.lang.String)>($r69);

     label1:
        $r7 = r6.<com.mycila.inject.schedule.SchedulingModule$2$1: javax.inject.Provider val$scheduler>;

        $r8 = interfaceinvoke $r7.<javax.inject.Provider: java.lang.Object get()>();

        $r9 = (org.quartz.Scheduler) $r8;

        $r10 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lcom/mycila/inject/schedule/SchedulingModule$QuartzAdapter;");

        $r11 = virtualinvoke $r10.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>();

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-job");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = r6.<com.mycila.inject.schedule.SchedulingModule$2$1: com.mycila.inject.schedule.SchedulingModule$2 this$1>;

        $r19 = $r18.<com.mycila.inject.schedule.SchedulingModule$2: com.mycila.inject.schedule.SchedulingModule this$0>;

        $r20 = virtualinvoke $r19.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getSimpleName()>();

        $r22 = virtualinvoke $r11.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>($r17, $r21);

        $r75 = new org.quartz.JobDataMap;

        $r24 = class "Lcom/mycila/inject/schedule/SchedulingModule$QuartzAdapter;";

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>();

        $r26 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableMap of(java.lang.Object,java.lang.Object)>($r25, r0);

        specialinvoke $r75.<org.quartz.JobDataMap: void <init>(java.util.Map)>($r26);

        $r27 = virtualinvoke $r22.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(org.quartz.JobDataMap)>($r75);

        $r28 = virtualinvoke $r27.<org.quartz.JobBuilder: org.quartz.JobBuilder requestRecovery(boolean)>(1);

        $r29 = virtualinvoke $r28.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        interfaceinvoke $r9.<org.quartz.Scheduler: void addJob(org.quartz.JobDetail,boolean)>($r29, 1);

        $r30 = r6.<com.mycila.inject.schedule.SchedulingModule$2$1: javax.inject.Provider val$scheduler>;

        $r31 = interfaceinvoke $r30.<javax.inject.Provider: java.lang.Object get()>();

        $r32 = (org.quartz.Scheduler) $r31;

        $r33 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r36 = virtualinvoke $r35.<java.lang.Class: java.lang.String getName()>();

        $r37 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-trigger");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40 = r6.<com.mycila.inject.schedule.SchedulingModule$2$1: com.mycila.inject.schedule.SchedulingModule$2 this$1>;

        $r41 = $r40.<com.mycila.inject.schedule.SchedulingModule$2: com.mycila.inject.schedule.SchedulingModule this$0>;

        $r42 = virtualinvoke $r41.<java.lang.Object: java.lang.Class getClass()>();

        $r43 = virtualinvoke $r42.<java.lang.Class: java.lang.String getSimpleName()>();

        $r44 = virtualinvoke $r33.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>($r39, $r43);

        $r45 = interfaceinvoke r3.<com.mycila.inject.schedule.Cron: java.lang.String value()>();

        $r46 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>($r45);

        $r79 = (org.quartz.ScheduleBuilder) $r46;

        $r47 = virtualinvoke $r44.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r79);

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r50 = virtualinvoke $r49.<java.lang.Class: java.lang.String getName()>();

        $r51 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-job");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        $r54 = r6.<com.mycila.inject.schedule.SchedulingModule$2$1: com.mycila.inject.schedule.SchedulingModule$2 this$1>;

        $r55 = $r54.<com.mycila.inject.schedule.SchedulingModule$2: com.mycila.inject.schedule.SchedulingModule this$0>;

        $r56 = virtualinvoke $r55.<java.lang.Object: java.lang.Class getClass()>();

        $r57 = virtualinvoke $r56.<java.lang.Class: java.lang.String getSimpleName()>();

        $r58 = virtualinvoke $r47.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(java.lang.String,java.lang.String)>($r53, $r57);

        $r59 = virtualinvoke $r58.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke $r32.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.Trigger)>($r59);

     label2:
        goto label4;

     label3:
        $r70 := @caughtexception;

        $r78 = new com.google.inject.ProvisionException;

        $r80 = (org.quartz.SchedulerException) $r70;

        $r72 = virtualinvoke $r80.<org.quartz.SchedulerException: java.lang.String getMessage()>();

        specialinvoke $r78.<com.google.inject.ProvisionException: void <init>(java.lang.String,java.lang.Throwable)>($r72, $r70);

        throw $r78;

     label4:
        return;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
    }
}
