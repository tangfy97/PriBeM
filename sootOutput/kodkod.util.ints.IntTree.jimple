final class kodkod.util.ints.IntTree extends java.lang.Object implements java.lang.Cloneable
{
    private static final boolean BLACK;
    private static final boolean RED;
    private kodkod.util.ints.IntTree$Node root;

    void <init>()
    {
        kodkod.util.ints.IntTree r0;

        r0 := @this: kodkod.util.ints.IntTree;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root> = null;

        return;
    }

    final void clear()
    {
        kodkod.util.ints.IntTree r0;

        r0 := @this: kodkod.util.ints.IntTree;

        r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root> = null;

        return;
    }

    final kodkod.util.ints.IntTree$Node search(int)
    {
        kodkod.util.ints.IntTree$Node r1;
        int i0, $i1, $i2;
        kodkod.util.ints.IntTree r0;

        r0 := @this: kodkod.util.ints.IntTree;

        i0 := @parameter0: int;

        r1 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

        goto label4;

     label1:
        $i1 = r1.<kodkod.util.ints.IntTree$Node: int key>;

        if $i1 != i0 goto label2;

        goto label5;

     label2:
        $i2 = r1.<kodkod.util.ints.IntTree$Node: int key>;

        if $i2 <= i0 goto label3;

        r1 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r1);

        goto label4;

     label3:
        r1 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r1);

     label4:
        if r1 != null goto label1;

     label5:
        return r1;
    }

    final kodkod.util.ints.IntTree$Node searchGTE(int)
    {
        kodkod.util.ints.IntTree$Node $r1, $r2, $r3, $r4, r5;
        int i0, $i1, $i2;
        kodkod.util.ints.IntTree r0;

        r0 := @this: kodkod.util.ints.IntTree;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

        if $r1 != null goto label1;

        return null;

     label1:
        r5 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

     label2:
        $i2 = r5.<kodkod.util.ints.IntTree$Node: int key>;

        if $i2 != i0 goto label3;

        return r5;

     label3:
        $i1 = r5.<kodkod.util.ints.IntTree$Node: int key>;

        if $i1 <= i0 goto label5;

        $r4 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r5);

        if $r4 == null goto label4;

        r5 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r5);

        goto label2;

     label4:
        return r5;

     label5:
        $r2 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r5);

        if $r2 == null goto label6;

        r5 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r5);

        goto label2;

     label6:
        $r3 = virtualinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node successor(kodkod.util.ints.IntTree$Node)>(r5);

        return $r3;
    }

    final kodkod.util.ints.IntTree$Node searchLTE(int)
    {
        kodkod.util.ints.IntTree$Node $r1, $r2, $r3, $r4, r5;
        int i0, $i1, $i2;
        kodkod.util.ints.IntTree r0;

        r0 := @this: kodkod.util.ints.IntTree;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

        if $r1 != null goto label1;

        return null;

     label1:
        r5 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

     label2:
        $i2 = r5.<kodkod.util.ints.IntTree$Node: int key>;

        if $i2 != i0 goto label3;

        return r5;

     label3:
        $i1 = r5.<kodkod.util.ints.IntTree$Node: int key>;

        if $i1 <= i0 goto label5;

        $r3 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r5);

        if $r3 == null goto label4;

        r5 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r5);

        goto label2;

     label4:
        $r4 = virtualinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node predecessor(kodkod.util.ints.IntTree$Node)>(r5);

        return $r4;

     label5:
        $r2 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r5);

        if $r2 == null goto label6;

        r5 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r5);

        goto label2;

     label6:
        return r5;
    }

    final kodkod.util.ints.IntTree$Node predecessor(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0, $r1, $r2, $r4, $r5, r6, r7;
        kodkod.util.ints.IntTree r3;

        r3 := @this: kodkod.util.ints.IntTree;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        $r1 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r0);

        if $r1 == null goto label1;

        $r4 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r0);

        $r5 = specialinvoke r3.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node max(kodkod.util.ints.IntTree$Node)>($r4);

        return $r5;

     label1:
        r6 = r0;

        r7 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        goto label3;

     label2:
        r6 = r7;

        r7 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r7);

     label3:
        if r7 == null goto label4;

        $r2 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r7);

        if r6 == $r2 goto label2;

     label4:
        return r7;
    }

    final kodkod.util.ints.IntTree$Node successor(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0, $r1, $r2, $r4, $r5, r6, r7;
        kodkod.util.ints.IntTree r3;

        r3 := @this: kodkod.util.ints.IntTree;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        $r1 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r0);

        if $r1 == null goto label1;

        $r4 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r0);

        $r5 = specialinvoke r3.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node min(kodkod.util.ints.IntTree$Node)>($r4);

        return $r5;

     label1:
        r6 = r0;

        r7 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        goto label3;

     label2:
        r6 = r7;

        r7 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r7);

     label3:
        if r7 == null goto label4;

        $r2 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r7);

        if r6 == $r2 goto label2;

     label4:
        return r7;
    }

    final kodkod.util.ints.IntTree$Node min()
    {
        kodkod.util.ints.IntTree$Node $r1, $r2;
        kodkod.util.ints.IntTree r0;

        r0 := @this: kodkod.util.ints.IntTree;

        $r1 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

        $r2 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node min(kodkod.util.ints.IntTree$Node)>($r1);

        return $r2;
    }

    final kodkod.util.ints.IntTree$Node max()
    {
        kodkod.util.ints.IntTree$Node $r1, $r2;
        kodkod.util.ints.IntTree r0;

        r0 := @this: kodkod.util.ints.IntTree;

        $r1 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

        $r2 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node max(kodkod.util.ints.IntTree$Node)>($r1);

        return $r2;
    }

    private final kodkod.util.ints.IntTree$Node min(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node $r0, r2;
        kodkod.util.ints.IntTree r1;

        r1 := @this: kodkod.util.ints.IntTree;

        r2 := @parameter0: kodkod.util.ints.IntTree$Node;

        if r2 == null goto label3;

        goto label2;

     label1:
        r2 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r2);

     label2:
        $r0 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r2);

        if $r0 != null goto label1;

     label3:
        return r2;
    }

    private final kodkod.util.ints.IntTree$Node max(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node $r0, r2;
        kodkod.util.ints.IntTree r1;

        r1 := @this: kodkod.util.ints.IntTree;

        r2 := @parameter0: kodkod.util.ints.IntTree$Node;

        if r2 == null goto label3;

        goto label2;

     label1:
        r2 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r2);

     label2:
        $r0 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r2);

        if $r0 != null goto label1;

     label3:
        return r2;
    }

    final void replace(kodkod.util.ints.IntTree$Node, kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree r12;
        boolean $z0;
        kodkod.util.ints.IntTree$Node r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14;

        r12 := @this: kodkod.util.ints.IntTree;

        r1 := @parameter0: kodkod.util.ints.IntTree$Node;

        r0 := @parameter1: kodkod.util.ints.IntTree$Node;

        $z0 = staticinvoke <kodkod.util.ints.IntTree$Node: boolean access$4(kodkod.util.ints.IntTree$Node)>(r1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$5(kodkod.util.ints.IntTree$Node,boolean)>(r0, $z0);

        $r2 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r0, $r2);

        $r3 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r0, $r3);

        $r4 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r0, $r4);

        $r5 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r1);

        if $r5 == null goto label1;

        $r14 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r14, r0);

     label1:
        $r6 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r1);

        if $r6 == null goto label2;

        $r13 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r13, r0);

     label2:
        $r7 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r1);

        if $r7 != null goto label3;

        r12.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root> = r0;

        goto label5;

     label3:
        $r8 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r1);

        $r9 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>($r8);

        if r1 != $r9 goto label4;

        $r11 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r11, r0);

        goto label5;

     label4:
        $r10 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r10, r0);

     label5:
        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r1, null);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r1, null);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r1, null);

        return;
    }

    private final kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0, $r2;
        kodkod.util.ints.IntTree r1;

        r1 := @this: kodkod.util.ints.IntTree;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        if r0 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

     label2:
        return $r2;
    }

    private final kodkod.util.ints.IntTree$Node leftOf(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0, $r2;
        kodkod.util.ints.IntTree r1;

        r1 := @this: kodkod.util.ints.IntTree;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        if r0 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r0);

     label2:
        return $r2;
    }

    private final kodkod.util.ints.IntTree$Node rightOf(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0, $r2;
        kodkod.util.ints.IntTree r1;

        r1 := @this: kodkod.util.ints.IntTree;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        if r0 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r0);

     label2:
        return $r2;
    }

    private final boolean colorOf(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0;
        kodkod.util.ints.IntTree r1;
        boolean $z0;

        r1 := @this: kodkod.util.ints.IntTree;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        if r0 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = staticinvoke <kodkod.util.ints.IntTree$Node: boolean access$4(kodkod.util.ints.IntTree$Node)>(r0);

     label2:
        return $z0;
    }

    private final void setColor(kodkod.util.ints.IntTree$Node, boolean)
    {
        kodkod.util.ints.IntTree$Node r0;
        kodkod.util.ints.IntTree r1;
        boolean z0;

        r1 := @this: kodkod.util.ints.IntTree;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        z0 := @parameter1: boolean;

        if r0 == null goto label1;

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$5(kodkod.util.ints.IntTree$Node,boolean)>(r0, z0);

     label1:
        return;
    }

    final void insert(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r1, r2, r3;
        int $i0, $i1, $i2, $i3;
        kodkod.util.ints.IntTree r0;

        r0 := @this: kodkod.util.ints.IntTree;

        r1 := @parameter0: kodkod.util.ints.IntTree$Node;

        r2 = null;

        r3 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

        goto label3;

     label1:
        r2 = r3;

        $i1 = r3.<kodkod.util.ints.IntTree$Node: int key>;

        $i0 = r1.<kodkod.util.ints.IntTree$Node: int key>;

        if $i1 <= $i0 goto label2;

        r3 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r3);

        goto label3;

     label2:
        r3 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r3);

     label3:
        if r3 != null goto label1;

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r1, r2);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r1, null);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r1, null);

        if r2 != null goto label4;

        r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root> = r1;

        goto label7;

     label4:
        staticinvoke <kodkod.util.ints.IntTree$Node: void access$5(kodkod.util.ints.IntTree$Node,boolean)>(r1, 0);

        $i3 = r2.<kodkod.util.ints.IntTree$Node: int key>;

        $i2 = r1.<kodkod.util.ints.IntTree$Node: int key>;

        if $i3 <= $i2 goto label5;

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r2, r1);

        goto label6;

     label5:
        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r2, r1);

     label6:
        specialinvoke r0.<kodkod.util.ints.IntTree: void insertFixUp(kodkod.util.ints.IntTree$Node)>(r1);

     label7:
        return;
    }

    final void delete(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree r6;
        boolean z0, $z1, $z2;
        kodkod.util.ints.IntTree$Node r0, $r1, r2, $r3, r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, r16;

        r6 := @this: kodkod.util.ints.IntTree;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        $r1 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r0);

        if $r1 == null goto label01;

        $r13 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r0);

        if $r13 != null goto label02;

     label01:
        $r14 = r0;

        goto label03;

     label02:
        $r14 = virtualinvoke r6.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node successor(kodkod.util.ints.IntTree$Node)>(r0);

     label03:
        r2 = $r14;

        $r3 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>($r14);

        if $r3 == null goto label04;

        $r15 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>($r14);

        goto label05;

     label04:
        $r15 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>($r14);

     label05:
        r4 = $r15;

        $r5 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r2);

        r16 = $r5;

        $r7 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r2);

        $r8 = specialinvoke r6.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node leftOf(kodkod.util.ints.IntTree$Node)>($r7);

        if r2 != $r8 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        z0 = $z2;

        $z1 = staticinvoke <kodkod.util.ints.IntTree$Node: boolean access$4(kodkod.util.ints.IntTree$Node)>(r2);

        if r4 == null goto label08;

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r4, $r5);

     label08:
        if $r5 != null goto label09;

        r6.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root> = r4;

        goto label11;

     label09:
        if z0 == 0 goto label10;

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r5, r4);

        goto label11;

     label10:
        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r5, r4);

     label11:
        if r2 == r0 goto label12;

        virtualinvoke r6.<kodkod.util.ints.IntTree: void replace(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r0, r2);

     label12:
        if $z1 == 0 goto label18;

        if r4 == null goto label13;

        specialinvoke r6.<kodkod.util.ints.IntTree: void deleteFixUp(kodkod.util.ints.IntTree$Node)>(r4);

        goto label18;

     label13:
        if $r5 == null goto label18;

        if r0 != $r5 goto label14;

        r16 = r2;

     label14:
        staticinvoke <kodkod.util.ints.IntTree$Node: void access$5(kodkod.util.ints.IntTree$Node,boolean)>(r0, 1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r0, null);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r0, null);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r0, r16);

        if z0 == 0 goto label15;

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r16, r0);

        goto label16;

     label15:
        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r16, r0);

     label16:
        specialinvoke r6.<kodkod.util.ints.IntTree: void deleteFixUp(kodkod.util.ints.IntTree$Node)>(r0);

        $r9 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        $r10 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>($r9);

        if r0 != $r10 goto label17;

        $r12 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r12, null);

        goto label18;

     label17:
        $r11 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r11, null);

     label18:
        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r0, null);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r0, null);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r0, null);

        return;
    }

    protected kodkod.util.ints.IntTree clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.IntTree$Node $r3, $r4;
        java.lang.Object $r1;
        kodkod.util.ints.IntTree r0, r2;

        r0 := @this: kodkod.util.ints.IntTree;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (kodkod.util.ints.IntTree) $r1;

        $r3 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

        $r4 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node clone(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r3, null);

        r2.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root> = $r4;

        return r2;
    }

    private kodkod.util.ints.IntTree$Node clone(kodkod.util.ints.IntTree$Node, kodkod.util.ints.IntTree$Node) throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.IntTree$Node r0, $r1, r2, $r4, $r5, $r6, $r7;
        kodkod.util.ints.IntTree r3;

        r3 := @this: kodkod.util.ints.IntTree;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        r2 := @parameter1: kodkod.util.ints.IntTree$Node;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node clone()>();

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r1, r2);

        $r4 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r0);

        $r5 = specialinvoke r3.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node clone(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r4, $r1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r1, $r5);

        $r6 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r0);

        $r7 = specialinvoke r3.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node clone(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r6, $r1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r1, $r7);

        return $r1;
    }

    private void insertFixUp(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree r0;
        boolean $z0, $z1, $z2;
        kodkod.util.ints.IntTree$Node $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, r41, $r42;

        r0 := @this: kodkod.util.ints.IntTree;

        r41 := @parameter0: kodkod.util.ints.IntTree$Node;

        goto label7;

     label1:
        $r3 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        $r4 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        $r5 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>($r4);

        $r6 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node leftOf(kodkod.util.ints.IntTree$Node)>($r5);

        if $r3 != $r6 goto label4;

        $r24 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        $r25 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>($r24);

        $r26 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node rightOf(kodkod.util.ints.IntTree$Node)>($r25);

        $z2 = specialinvoke r0.<kodkod.util.ints.IntTree: boolean colorOf(kodkod.util.ints.IntTree$Node)>($r26);

        if $z2 != 0 goto label2;

        $r37 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r37, 1);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r26, 1);

        $r38 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        $r39 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>($r38);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r39, 0);

        $r40 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        r41 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>($r40);

        goto label7;

     label2:
        $r27 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        $r28 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node rightOf(kodkod.util.ints.IntTree$Node)>($r27);

        if r41 != $r28 goto label3;

        $r36 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        r41 = $r36;

        specialinvoke r0.<kodkod.util.ints.IntTree: void rotateLeft(kodkod.util.ints.IntTree$Node)>($r36);

     label3:
        $r29 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r29, 1);

        $r30 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        $r31 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>($r30);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r31, 0);

        $r32 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        $r33 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>($r32);

        if $r33 == null goto label7;

        $r34 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        $r35 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>($r34);

        specialinvoke r0.<kodkod.util.ints.IntTree: void rotateRight(kodkod.util.ints.IntTree$Node)>($r35);

        goto label7;

     label4:
        $r7 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        $r8 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>($r7);

        $r9 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node leftOf(kodkod.util.ints.IntTree$Node)>($r8);

        $z1 = specialinvoke r0.<kodkod.util.ints.IntTree: boolean colorOf(kodkod.util.ints.IntTree$Node)>($r9);

        if $z1 != 0 goto label5;

        $r20 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r20, 1);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r9, 1);

        $r21 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        $r22 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>($r21);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r22, 0);

        $r23 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        r41 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>($r23);

        goto label7;

     label5:
        $r10 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        $r11 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node leftOf(kodkod.util.ints.IntTree$Node)>($r10);

        if r41 != $r11 goto label6;

        $r19 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        r41 = $r19;

        specialinvoke r0.<kodkod.util.ints.IntTree: void rotateRight(kodkod.util.ints.IntTree$Node)>($r19);

     label6:
        $r12 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r12, 1);

        $r13 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        $r14 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>($r13);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r14, 0);

        $r15 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        $r16 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>($r15);

        if $r16 == null goto label7;

        $r17 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r41);

        $r18 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>($r17);

        specialinvoke r0.<kodkod.util.ints.IntTree: void rotateLeft(kodkod.util.ints.IntTree$Node)>($r18);

     label7:
        if r41 == null goto label8;

        $r1 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

        if r41 == $r1 goto label8;

        $r2 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r41);

        $z0 = staticinvoke <kodkod.util.ints.IntTree$Node: boolean access$4(kodkod.util.ints.IntTree$Node)>($r2);

        if $z0 == 0 goto label1;

     label8:
        $r42 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$5(kodkod.util.ints.IntTree$Node,boolean)>($r42, 1);

        return;
    }

    private void deleteFixUp(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        kodkod.util.ints.IntTree$Node $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, r31, r32, r33, $r34;

        r0 := @this: kodkod.util.ints.IntTree;

        r31 := @parameter0: kodkod.util.ints.IntTree$Node;

        goto label09;

     label01:
        $r1 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        $r2 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node leftOf(kodkod.util.ints.IntTree$Node)>($r1);

        if r31 != $r2 goto label05;

        $r17 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        $r18 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node rightOf(kodkod.util.ints.IntTree$Node)>($r17);

        r32 = $r18;

        $z6 = specialinvoke r0.<kodkod.util.ints.IntTree: boolean colorOf(kodkod.util.ints.IntTree$Node)>($r18);

        if $z6 != 0 goto label02;

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r18, 1);

        $r28 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r28, 0);

        $r29 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        specialinvoke r0.<kodkod.util.ints.IntTree: void rotateLeft(kodkod.util.ints.IntTree$Node)>($r29);

        $r30 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        r32 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node rightOf(kodkod.util.ints.IntTree$Node)>($r30);

     label02:
        $r19 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node leftOf(kodkod.util.ints.IntTree$Node)>(r32);

        $z7 = specialinvoke r0.<kodkod.util.ints.IntTree: boolean colorOf(kodkod.util.ints.IntTree$Node)>($r19);

        if $z7 == 0 goto label03;

        $r27 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node rightOf(kodkod.util.ints.IntTree$Node)>(r32);

        $z10 = specialinvoke r0.<kodkod.util.ints.IntTree: boolean colorOf(kodkod.util.ints.IntTree$Node)>($r27);

        if $z10 == 0 goto label03;

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>(r32, 0);

        r31 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        goto label09;

     label03:
        $r20 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node rightOf(kodkod.util.ints.IntTree$Node)>(r32);

        $z8 = specialinvoke r0.<kodkod.util.ints.IntTree: boolean colorOf(kodkod.util.ints.IntTree$Node)>($r20);

        if $z8 == 0 goto label04;

        $r25 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node leftOf(kodkod.util.ints.IntTree$Node)>(r32);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r25, 1);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>(r32, 0);

        specialinvoke r0.<kodkod.util.ints.IntTree: void rotateRight(kodkod.util.ints.IntTree$Node)>(r32);

        $r26 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        r32 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node rightOf(kodkod.util.ints.IntTree$Node)>($r26);

     label04:
        $r21 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        $z9 = specialinvoke r0.<kodkod.util.ints.IntTree: boolean colorOf(kodkod.util.ints.IntTree$Node)>($r21);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>(r32, $z9);

        $r22 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r22, 1);

        $r23 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node rightOf(kodkod.util.ints.IntTree$Node)>(r32);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r23, 1);

        $r24 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        specialinvoke r0.<kodkod.util.ints.IntTree: void rotateLeft(kodkod.util.ints.IntTree$Node)>($r24);

        r31 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

        goto label09;

     label05:
        $r3 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        $r4 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node leftOf(kodkod.util.ints.IntTree$Node)>($r3);

        r33 = $r4;

        $z1 = specialinvoke r0.<kodkod.util.ints.IntTree: boolean colorOf(kodkod.util.ints.IntTree$Node)>($r4);

        if $z1 != 0 goto label06;

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r4, 1);

        $r14 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r14, 0);

        $r15 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        specialinvoke r0.<kodkod.util.ints.IntTree: void rotateRight(kodkod.util.ints.IntTree$Node)>($r15);

        $r16 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        r33 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node leftOf(kodkod.util.ints.IntTree$Node)>($r16);

     label06:
        $r5 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node rightOf(kodkod.util.ints.IntTree$Node)>(r33);

        $z2 = specialinvoke r0.<kodkod.util.ints.IntTree: boolean colorOf(kodkod.util.ints.IntTree$Node)>($r5);

        if $z2 == 0 goto label07;

        $r13 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node leftOf(kodkod.util.ints.IntTree$Node)>(r33);

        $z5 = specialinvoke r0.<kodkod.util.ints.IntTree: boolean colorOf(kodkod.util.ints.IntTree$Node)>($r13);

        if $z5 == 0 goto label07;

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>(r33, 0);

        r31 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        goto label09;

     label07:
        $r6 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node leftOf(kodkod.util.ints.IntTree$Node)>(r33);

        $z3 = specialinvoke r0.<kodkod.util.ints.IntTree: boolean colorOf(kodkod.util.ints.IntTree$Node)>($r6);

        if $z3 == 0 goto label08;

        $r11 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node rightOf(kodkod.util.ints.IntTree$Node)>(r33);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r11, 1);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>(r33, 0);

        specialinvoke r0.<kodkod.util.ints.IntTree: void rotateLeft(kodkod.util.ints.IntTree$Node)>(r33);

        $r12 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        r33 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node leftOf(kodkod.util.ints.IntTree$Node)>($r12);

     label08:
        $r7 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        $z4 = specialinvoke r0.<kodkod.util.ints.IntTree: boolean colorOf(kodkod.util.ints.IntTree$Node)>($r7);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>(r33, $z4);

        $r8 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r8, 1);

        $r9 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node leftOf(kodkod.util.ints.IntTree$Node)>(r33);

        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>($r9, 1);

        $r10 = specialinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node parentOf(kodkod.util.ints.IntTree$Node)>(r31);

        specialinvoke r0.<kodkod.util.ints.IntTree: void rotateRight(kodkod.util.ints.IntTree$Node)>($r10);

        r31 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

     label09:
        $r34 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

        if r31 == $r34 goto label10;

        $z0 = specialinvoke r0.<kodkod.util.ints.IntTree: boolean colorOf(kodkod.util.ints.IntTree$Node)>(r31);

        if $z0 != 0 goto label01;

     label10:
        specialinvoke r0.<kodkod.util.ints.IntTree: void setColor(kodkod.util.ints.IntTree$Node,boolean)>(r31, 1);

        return;
    }

    private void rotateLeft(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11;
        kodkod.util.ints.IntTree r10;

        r10 := @this: kodkod.util.ints.IntTree;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        $r1 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>(r0);

        $r2 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>($r1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r0, $r2);

        $r3 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>($r1);

        if $r3 == null goto label1;

        $r11 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>($r1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r11, r0);

     label1:
        $r4 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r1, $r4);

        $r5 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        if $r5 != null goto label2;

        r10.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root> = $r1;

        goto label4;

     label2:
        $r6 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        $r7 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>($r6);

        if $r7 != r0 goto label3;

        $r9 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r9, $r1);

        goto label4;

     label3:
        $r8 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r8, $r1);

     label4:
        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r1, r0);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r0, $r1);

        return;
    }

    private void rotateRight(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11;
        kodkod.util.ints.IntTree r10;

        r10 := @this: kodkod.util.ints.IntTree;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        $r1 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)>(r0);

        $r2 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>($r1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r0, $r2);

        $r3 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>($r1);

        if $r3 == null goto label1;

        $r11 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>($r1);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r11, r0);

     label1:
        $r4 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r1, $r4);

        $r5 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        if $r5 != null goto label2;

        r10.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root> = $r1;

        goto label4;

     label2:
        $r6 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        $r7 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)>($r6);

        if $r7 != r0 goto label3;

        $r9 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r9, $r1);

        goto label4;

     label3:
        $r8 = staticinvoke <kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)>(r0);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$7(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r8, $r1);

     label4:
        staticinvoke <kodkod.util.ints.IntTree$Node: void access$8(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>($r1, r0);

        staticinvoke <kodkod.util.ints.IntTree$Node: void access$6(kodkod.util.ints.IntTree$Node,kodkod.util.ints.IntTree$Node)>(r0, $r1);

        return;
    }

    public java.lang.String toString()
    {
        kodkod.util.ints.IntTree$Node $r1;
        java.lang.String $r2;
        kodkod.util.ints.IntTree r0;

        r0 := @this: kodkod.util.ints.IntTree;

        $r1 = r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node root>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree$Node: java.lang.String toString()>();

        return $r2;
    }

    protected volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.IntTree r0, $r1;

        r0 := @this: kodkod.util.ints.IntTree;

        $r1 = virtualinvoke r0.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree clone()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <kodkod.util.ints.IntTree: boolean RED> = 0;

        <kodkod.util.ints.IntTree: boolean BLACK> = 1;

        return;
    }
}
