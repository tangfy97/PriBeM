public abstract class org.springframework.web.multipart.commons.CommonsFileUploadSupport extends java.lang.Object
{
    protected final org.apache.commons.logging.Log logger;
    private final org.apache.commons.fileupload.disk.DiskFileItemFactory fileItemFactory;
    private final org.apache.commons.fileupload.FileUpload fileUpload;
    private boolean uploadTempDirSpecified;

    public void <init>()
    {
        org.apache.commons.fileupload.disk.DiskFileItemFactory $r3, $r4;
        org.springframework.web.multipart.commons.CommonsFileUploadSupport r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.apache.commons.fileupload.FileItemFactory $r6;
        org.apache.commons.fileupload.FileUpload $r5;

        r0 := @this: org.springframework.web.multipart.commons.CommonsFileUploadSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: boolean uploadTempDirSpecified> = 0;

        $r3 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.disk.DiskFileItemFactory newFileItemFactory()>();

        r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.disk.DiskFileItemFactory fileItemFactory> = $r3;

        $r4 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.disk.DiskFileItemFactory getFileItemFactory()>();

        $r6 = (org.apache.commons.fileupload.FileItemFactory) $r4;

        $r5 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.FileUpload newFileUpload(org.apache.commons.fileupload.FileItemFactory)>($r6);

        r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.FileUpload fileUpload> = $r5;

        return;
    }

    public org.apache.commons.fileupload.disk.DiskFileItemFactory getFileItemFactory()
    {
        org.springframework.web.multipart.commons.CommonsFileUploadSupport r0;
        org.apache.commons.fileupload.disk.DiskFileItemFactory $r1;

        r0 := @this: org.springframework.web.multipart.commons.CommonsFileUploadSupport;

        $r1 = r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.disk.DiskFileItemFactory fileItemFactory>;

        return $r1;
    }

    public org.apache.commons.fileupload.FileUpload getFileUpload()
    {
        org.springframework.web.multipart.commons.CommonsFileUploadSupport r0;
        org.apache.commons.fileupload.FileUpload $r1;

        r0 := @this: org.springframework.web.multipart.commons.CommonsFileUploadSupport;

        $r1 = r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.FileUpload fileUpload>;

        return $r1;
    }

    public void setMaxUploadSize(long)
    {
        org.springframework.web.multipart.commons.CommonsFileUploadSupport r0;
        long l0;
        org.apache.commons.fileupload.FileUpload $r1;

        r0 := @this: org.springframework.web.multipart.commons.CommonsFileUploadSupport;

        l0 := @parameter0: long;

        $r1 = r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.FileUpload fileUpload>;

        virtualinvoke $r1.<org.apache.commons.fileupload.FileUpload: void setSizeMax(long)>(l0);

        return;
    }

    public void setMaxInMemorySize(int)
    {
        int i0;
        org.springframework.web.multipart.commons.CommonsFileUploadSupport r0;
        org.apache.commons.fileupload.disk.DiskFileItemFactory $r1;

        r0 := @this: org.springframework.web.multipart.commons.CommonsFileUploadSupport;

        i0 := @parameter0: int;

        $r1 = r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.disk.DiskFileItemFactory fileItemFactory>;

        virtualinvoke $r1.<org.apache.commons.fileupload.disk.DiskFileItemFactory: void setSizeThreshold(int)>(i0);

        return;
    }

    public void setDefaultEncoding(java.lang.String)
    {
        org.springframework.web.multipart.commons.CommonsFileUploadSupport r0;
        java.lang.String r1;
        org.apache.commons.fileupload.FileUpload $r2;

        r0 := @this: org.springframework.web.multipart.commons.CommonsFileUploadSupport;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.FileUpload fileUpload>;

        virtualinvoke $r2.<org.apache.commons.fileupload.FileUpload: void setHeaderEncoding(java.lang.String)>(r1);

        return;
    }

    protected java.lang.String getDefaultEncoding()
    {
        org.springframework.web.multipart.commons.CommonsFileUploadSupport r0;
        java.lang.String $r2, r3;
        org.apache.commons.fileupload.FileUpload $r1;

        r0 := @this: org.springframework.web.multipart.commons.CommonsFileUploadSupport;

        $r1 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.FileUpload getFileUpload()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.fileupload.FileUpload: java.lang.String getHeaderEncoding()>();

        r3 = $r2;

        if $r2 != null goto label1;

        r3 = "ISO-8859-1";

     label1:
        return r3;
    }

    public void setUploadTempDir(org.springframework.core.io.Resource) throws java.io.IOException
    {
        java.lang.IllegalArgumentException $r5;
        java.io.File $r3, $r4;
        org.apache.commons.fileupload.disk.DiskFileItemFactory $r2;
        org.springframework.web.multipart.commons.CommonsFileUploadSupport r1;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        org.springframework.core.io.Resource r0;
        boolean $z0, $z1;

        r1 := @this: org.springframework.web.multipart.commons.CommonsFileUploadSupport;

        r0 := @parameter0: org.springframework.core.io.Resource;

        $z0 = interfaceinvoke r0.<org.springframework.core.io.Resource: boolean exists()>();

        if $z0 != 0 goto label1;

        $r4 = interfaceinvoke r0.<org.springframework.core.io.Resource: java.io.File getFile()>();

        $z1 = virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        if $z1 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Given uploadTempDir [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] could not be created");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r2 = r1.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.disk.DiskFileItemFactory fileItemFactory>;

        $r3 = interfaceinvoke r0.<org.springframework.core.io.Resource: java.io.File getFile()>();

        virtualinvoke $r2.<org.apache.commons.fileupload.disk.DiskFileItemFactory: void setRepository(java.io.File)>($r3);

        r1.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: boolean uploadTempDirSpecified> = 1;

        return;
    }

    protected boolean isUploadTempDirSpecified()
    {
        org.springframework.web.multipart.commons.CommonsFileUploadSupport r0;
        boolean $z0;

        r0 := @this: org.springframework.web.multipart.commons.CommonsFileUploadSupport;

        $z0 = r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: boolean uploadTempDirSpecified>;

        return $z0;
    }

    protected org.apache.commons.fileupload.disk.DiskFileItemFactory newFileItemFactory()
    {
        org.springframework.web.multipart.commons.CommonsFileUploadSupport r1;
        org.apache.commons.fileupload.disk.DiskFileItemFactory $r0;

        r1 := @this: org.springframework.web.multipart.commons.CommonsFileUploadSupport;

        $r0 = new org.apache.commons.fileupload.disk.DiskFileItemFactory;

        specialinvoke $r0.<org.apache.commons.fileupload.disk.DiskFileItemFactory: void <init>()>();

        return $r0;
    }

    protected abstract org.apache.commons.fileupload.FileUpload newFileUpload(org.apache.commons.fileupload.FileItemFactory);

    protected org.apache.commons.fileupload.FileUpload prepareFileUpload(java.lang.String)
    {
        long $l0;
        org.apache.commons.fileupload.FileItemFactory $r7;
        org.apache.commons.fileupload.FileUpload $r1, $r5, r6;
        org.apache.commons.fileupload.disk.DiskFileItemFactory $r4;
        org.springframework.web.multipart.commons.CommonsFileUploadSupport r0;
        java.lang.String r2, $r3;
        boolean $z0;

        r0 := @this: org.springframework.web.multipart.commons.CommonsFileUploadSupport;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.FileUpload getFileUpload()>();

        r6 = $r1;

        if r2 == null goto label1;

        $r3 = virtualinvoke $r1.<org.apache.commons.fileupload.FileUpload: java.lang.String getHeaderEncoding()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.disk.DiskFileItemFactory getFileItemFactory()>();

        $r7 = (org.apache.commons.fileupload.FileItemFactory) $r4;

        $r5 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.fileupload.FileUpload newFileUpload(org.apache.commons.fileupload.FileItemFactory)>($r7);

        r6 = $r5;

        $l0 = virtualinvoke $r1.<org.apache.commons.fileupload.FileUpload: long getSizeMax()>();

        virtualinvoke $r5.<org.apache.commons.fileupload.FileUpload: void setSizeMax(long)>($l0);

        virtualinvoke $r5.<org.apache.commons.fileupload.FileUpload: void setHeaderEncoding(java.lang.String)>(r2);

     label1:
        return r6;
    }

    protected org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult parseFileItems(java.util.List, java.lang.String)
    {
        org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult $r30;
        org.springframework.web.multipart.commons.CommonsFileUploadSupport r8;
        boolean $z0, $z1, $z2, $z3;
        java.util.List r2;
        java.lang.StringBuilder $r10, $r13, $r14, $r15, $r16, $r18, $r19, $r21, $r33, $r36, $r37, $r38, $r39;
        java.io.UnsupportedEncodingException $r31;
        java.util.HashMap $r1;
        long $l0;
        java.lang.String[] $r26, $r29, $r44;
        java.lang.String $r7, $r12, $r17, $r20, $r22, $r23, r24, $r25, $r27, $r28, $r35, $r40, r41, $r42;
        java.util.Iterator $r3;
        org.apache.commons.fileupload.FileItem r5;
        org.springframework.web.multipart.commons.CommonsMultipartFile $r6;
        java.lang.Object $r4, $r43;
        org.apache.commons.logging.Log $r9, $r11, $r32, $r34;
        org.springframework.util.LinkedMultiValueMap $r0;

        r8 := @this: org.springframework.web.multipart.commons.CommonsFileUploadSupport;

        r2 := @parameter0: java.util.List;

        r24 := @parameter1: java.lang.String;

        $r0 = new org.springframework.util.LinkedMultiValueMap;

        specialinvoke $r0.<org.springframework.util.LinkedMultiValueMap: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        goto label10;

     label01:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.fileupload.FileItem) $r4;

        $z0 = interfaceinvoke r5.<org.apache.commons.fileupload.FileItem: boolean isFormField()>();

        if $z0 == 0 goto label09;

        $r23 = interfaceinvoke r5.<org.apache.commons.fileupload.FileItem: java.lang.String getContentType()>();

        $r25 = specialinvoke r8.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: java.lang.String determineEncoding(java.lang.String,java.lang.String)>($r23, r24);

        if $r25 == null goto label06;

     label02:
        r41 = interfaceinvoke r5.<org.apache.commons.fileupload.FileItem: java.lang.String getString(java.lang.String)>($r25);

     label03:
        goto label07;

     label04:
        $r31 := @caughtexception;

        $r32 = r8.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r32.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z2 == 0 goto label05;

        $r34 = r8.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.logging.Log logger>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not decode multipart item \'");

        $r35 = interfaceinvoke r5.<org.apache.commons.fileupload.FileItem: java.lang.String getFieldName()>();

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with encoding \'");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': using platform default");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r34.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r40);

     label05:
        r41 = interfaceinvoke r5.<org.apache.commons.fileupload.FileItem: java.lang.String getString()>();

        goto label07;

     label06:
        r41 = interfaceinvoke r5.<org.apache.commons.fileupload.FileItem: java.lang.String getString()>();

     label07:
        $r42 = interfaceinvoke r5.<org.apache.commons.fileupload.FileItem: java.lang.String getFieldName()>();

        $r43 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r42);

        $r44 = (java.lang.String[]) $r43;

        if $r44 != null goto label08;

        $r28 = interfaceinvoke r5.<org.apache.commons.fileupload.FileItem: java.lang.String getFieldName()>();

        $r29 = newarray (java.lang.String)[1];

        $r29[0] = r41;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r29);

        goto label10;

     label08:
        $r26 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] addStringToArray(java.lang.String[],java.lang.String)>($r44, r41);

        $r27 = interfaceinvoke r5.<org.apache.commons.fileupload.FileItem: java.lang.String getFieldName()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r26);

        goto label10;

     label09:
        $r6 = new org.springframework.web.multipart.commons.CommonsMultipartFile;

        specialinvoke $r6.<org.springframework.web.multipart.commons.CommonsMultipartFile: void <init>(org.apache.commons.fileupload.FileItem)>(r5);

        $r7 = virtualinvoke $r6.<org.springframework.web.multipart.commons.CommonsMultipartFile: java.lang.String getName()>();

        interfaceinvoke $r0.<org.springframework.util.MultiValueMap: void add(java.lang.Object,java.lang.Object)>($r7, $r6);

        $r9 = r8.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r9.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label10;

        $r11 = r8.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.logging.Log logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found multipart file [");

        $r12 = virtualinvoke $r6.<org.springframework.web.multipart.commons.CommonsMultipartFile: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] of size ");

        $l0 = virtualinvoke $r6.<org.springframework.web.multipart.commons.CommonsMultipartFile: long getSize()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes with original filename [");

        $r17 = virtualinvoke $r6.<org.springframework.web.multipart.commons.CommonsMultipartFile: java.lang.String getOriginalFilename()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], stored ");

        $r20 = virtualinvoke $r6.<org.springframework.web.multipart.commons.CommonsMultipartFile: java.lang.String getStorageDescription()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r22);

     label10:
        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label01;

        $r30 = new org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult;

        specialinvoke $r30.<org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult: void <init>(org.springframework.util.MultiValueMap,java.util.Map)>($r0, $r1);

        return $r30;

        catch java.io.UnsupportedEncodingException from label02 to label03 with label04;
    }

    protected void cleanupFileItems(org.springframework.util.MultiValueMap)
    {
        org.springframework.web.multipart.commons.CommonsFileUploadSupport r10;
        java.lang.String $r14, $r17, $r20, $r22;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r2, $r5;
        java.util.Collection $r1;
        org.apache.commons.fileupload.FileItem $r9;
        org.springframework.util.MultiValueMap r0;
        java.util.List r4;
        org.springframework.web.multipart.commons.CommonsMultipartFile r8;
        org.springframework.web.multipart.MultipartFile r7;
        java.lang.Object $r3, $r6;
        org.apache.commons.logging.Log $r11, $r13;
        java.lang.StringBuilder $r12, $r15, $r16, $r18, $r19, $r21;

        r10 := @this: org.springframework.web.multipart.commons.CommonsFileUploadSupport;

        r0 := @parameter0: org.springframework.util.MultiValueMap;

        $r1 = interfaceinvoke r0.<org.springframework.util.MultiValueMap: java.util.Collection values()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.List) $r3;

        $r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.springframework.web.multipart.MultipartFile) $r6;

        $z1 = r7 instanceof org.springframework.web.multipart.commons.CommonsMultipartFile;

        if $z1 == 0 goto label3;

        r8 = (org.springframework.web.multipart.commons.CommonsMultipartFile) r7;

        $r9 = virtualinvoke r8.<org.springframework.web.multipart.commons.CommonsMultipartFile: org.apache.commons.fileupload.FileItem getFileItem()>();

        interfaceinvoke $r9.<org.apache.commons.fileupload.FileItem: void delete()>();

        $r11 = r10.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r11.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label3;

        $r13 = r10.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: org.apache.commons.logging.Log logger>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cleaning up multipart file [");

        $r14 = virtualinvoke r8.<org.springframework.web.multipart.commons.CommonsMultipartFile: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] with original filename [");

        $r17 = virtualinvoke r8.<org.springframework.web.multipart.commons.CommonsMultipartFile: java.lang.String getOriginalFilename()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], stored ");

        $r20 = virtualinvoke r8.<org.springframework.web.multipart.commons.CommonsMultipartFile: java.lang.String getStorageDescription()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r22);

     label3:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label2;

     label4:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private java.lang.String determineEncoding(java.lang.String, java.lang.String)
    {
        java.nio.charset.Charset $r2;
        org.springframework.http.MediaType $r1;
        org.springframework.web.multipart.commons.CommonsFileUploadSupport r4;
        java.lang.String r0, r3, $r5;
        boolean $z0;

        r4 := @this: org.springframework.web.multipart.commons.CommonsFileUploadSupport;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        return r3;

     label1:
        $r1 = staticinvoke <org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        if $r2 == null goto label2;

        $r5 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        goto label3;

     label2:
        $r5 = r3;

     label3:
        return $r5;
    }
}
