final class com.mycila.inject.internal.guava.collect.GeneralRange extends java.lang.Object implements java.io.Serializable
{
    private final java.util.Comparator comparator;
    private final com.mycila.inject.internal.guava.base.Optional lowerEndpoint;
    private final com.mycila.inject.internal.guava.collect.BoundType lowerBoundType;
    private final com.mycila.inject.internal.guava.base.Optional upperEndpoint;
    private final com.mycila.inject.internal.guava.collect.BoundType upperBoundType;
    private transient com.mycila.inject.internal.guava.collect.GeneralRange reverse;

    static com.mycila.inject.internal.guava.collect.GeneralRange 'from'(com.mycila.inject.internal.guava.collect.Range)
    {
        com.mycila.inject.internal.guava.collect.Range r0;
        com.mycila.inject.internal.guava.collect.BoundType r2, $r9, $r11;
        com.mycila.inject.internal.guava.base.Optional r1, r3, $r8, $r10;
        com.mycila.inject.internal.guava.collect.Ordering $r5;
        boolean $z0, $z1, $z2, $z3;
        com.mycila.inject.internal.guava.collect.GeneralRange $r4;
        java.lang.Comparable $r6, $r7;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.Range;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Range: boolean hasLowerBound()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Range: java.lang.Comparable lowerEndpoint()>();

        $r8 = staticinvoke <com.mycila.inject.internal.guava.base.Optional: com.mycila.inject.internal.guava.base.Optional of(java.lang.Object)>($r7);

        goto label2;

     label1:
        $r8 = staticinvoke <com.mycila.inject.internal.guava.base.Optional: com.mycila.inject.internal.guava.base.Optional absent()>();

     label2:
        r1 = $r8;

        $z1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Range: boolean hasLowerBound()>();

        if $z1 == 0 goto label3;

        $r9 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.BoundType lowerBoundType()>();

        goto label4;

     label3:
        $r9 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

     label4:
        r2 = $r9;

        $z2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Range: boolean hasUpperBound()>();

        if $z2 == 0 goto label5;

        $r6 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Range: java.lang.Comparable upperEndpoint()>();

        $r10 = staticinvoke <com.mycila.inject.internal.guava.base.Optional: com.mycila.inject.internal.guava.base.Optional of(java.lang.Object)>($r6);

        goto label6;

     label5:
        $r10 = staticinvoke <com.mycila.inject.internal.guava.base.Optional: com.mycila.inject.internal.guava.base.Optional absent()>();

     label6:
        r3 = $r10;

        $z3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Range: boolean hasUpperBound()>();

        if $z3 == 0 goto label7;

        $r11 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.BoundType upperBoundType()>();

        goto label8;

     label7:
        $r11 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

     label8:
        $r4 = new com.mycila.inject.internal.guava.collect.GeneralRange;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.GeneralRange: void <init>(java.util.Comparator,com.mycila.inject.internal.guava.base.Optional,com.mycila.inject.internal.guava.collect.BoundType,com.mycila.inject.internal.guava.base.Optional,com.mycila.inject.internal.guava.collect.BoundType)>($r5, r1, r2, r3, $r11);

        return $r4;
    }

    static com.mycila.inject.internal.guava.collect.GeneralRange all(java.util.Comparator)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r0;
        com.mycila.inject.internal.guava.collect.BoundType $r3, $r5;
        com.mycila.inject.internal.guava.base.Optional $r2, $r4;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        $r0 = new com.mycila.inject.internal.guava.collect.GeneralRange;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Optional: com.mycila.inject.internal.guava.base.Optional absent()>();

        $r3 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.base.Optional: com.mycila.inject.internal.guava.base.Optional absent()>();

        $r5 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.GeneralRange: void <init>(java.util.Comparator,com.mycila.inject.internal.guava.base.Optional,com.mycila.inject.internal.guava.collect.BoundType,com.mycila.inject.internal.guava.base.Optional,com.mycila.inject.internal.guava.collect.BoundType)>(r1, $r2, $r3, $r4, $r5);

        return $r0;
    }

    static com.mycila.inject.internal.guava.collect.GeneralRange downTo(java.util.Comparator, java.lang.Object, com.mycila.inject.internal.guava.collect.BoundType)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r0;
        com.mycila.inject.internal.guava.collect.BoundType r4, $r6;
        com.mycila.inject.internal.guava.base.Optional $r3, $r5;
        java.lang.Object r2;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: com.mycila.inject.internal.guava.collect.BoundType;

        $r0 = new com.mycila.inject.internal.guava.collect.GeneralRange;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Optional: com.mycila.inject.internal.guava.base.Optional of(java.lang.Object)>(r2);

        $r5 = staticinvoke <com.mycila.inject.internal.guava.base.Optional: com.mycila.inject.internal.guava.base.Optional absent()>();

        $r6 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.GeneralRange: void <init>(java.util.Comparator,com.mycila.inject.internal.guava.base.Optional,com.mycila.inject.internal.guava.collect.BoundType,com.mycila.inject.internal.guava.base.Optional,com.mycila.inject.internal.guava.collect.BoundType)>(r1, $r3, r4, $r5, $r6);

        return $r0;
    }

    static com.mycila.inject.internal.guava.collect.GeneralRange upTo(java.util.Comparator, java.lang.Object, com.mycila.inject.internal.guava.collect.BoundType)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r0;
        com.mycila.inject.internal.guava.collect.BoundType $r4, r6;
        com.mycila.inject.internal.guava.base.Optional $r2, $r5;
        java.lang.Object r3;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        r3 := @parameter1: java.lang.Object;

        r6 := @parameter2: com.mycila.inject.internal.guava.collect.BoundType;

        $r0 = new com.mycila.inject.internal.guava.collect.GeneralRange;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Optional: com.mycila.inject.internal.guava.base.Optional absent()>();

        $r4 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.base.Optional: com.mycila.inject.internal.guava.base.Optional of(java.lang.Object)>(r3);

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.GeneralRange: void <init>(java.util.Comparator,com.mycila.inject.internal.guava.base.Optional,com.mycila.inject.internal.guava.collect.BoundType,com.mycila.inject.internal.guava.base.Optional,com.mycila.inject.internal.guava.collect.BoundType)>(r1, $r2, $r4, $r5, r6);

        return $r0;
    }

    static com.mycila.inject.internal.guava.collect.GeneralRange range(java.util.Comparator, java.lang.Object, com.mycila.inject.internal.guava.collect.BoundType, java.lang.Object, com.mycila.inject.internal.guava.collect.BoundType)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r0;
        com.mycila.inject.internal.guava.collect.BoundType r4, r7;
        com.mycila.inject.internal.guava.base.Optional $r3, $r6;
        java.lang.Object r2, r5;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: com.mycila.inject.internal.guava.collect.BoundType;

        r5 := @parameter3: java.lang.Object;

        r7 := @parameter4: com.mycila.inject.internal.guava.collect.BoundType;

        $r0 = new com.mycila.inject.internal.guava.collect.GeneralRange;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Optional: com.mycila.inject.internal.guava.base.Optional of(java.lang.Object)>(r2);

        $r6 = staticinvoke <com.mycila.inject.internal.guava.base.Optional: com.mycila.inject.internal.guava.base.Optional of(java.lang.Object)>(r5);

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.GeneralRange: void <init>(java.util.Comparator,com.mycila.inject.internal.guava.base.Optional,com.mycila.inject.internal.guava.collect.BoundType,com.mycila.inject.internal.guava.base.Optional,com.mycila.inject.internal.guava.collect.BoundType)>(r1, $r3, r4, $r6, r7);

        return $r0;
    }

    private void <init>(java.util.Comparator, com.mycila.inject.internal.guava.base.Optional, com.mycila.inject.internal.guava.collect.BoundType, com.mycila.inject.internal.guava.base.Optional, com.mycila.inject.internal.guava.collect.BoundType)
    {
        java.lang.Object[] $r18;
        com.mycila.inject.internal.guava.collect.BoundType r7, $r9, r13, $r15, $r19, $r20;
        com.mycila.inject.internal.guava.base.Optional r4, $r6, r10, $r12;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.mycila.inject.internal.guava.collect.GeneralRange r0;
        java.lang.Object $r2, $r5, $r8, $r11, $r14, $r16, $r17;
        java.util.Comparator r1, $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.GeneralRange;

        r1 := @parameter0: java.util.Comparator;

        r4 := @parameter1: com.mycila.inject.internal.guava.base.Optional;

        r7 := @parameter2: com.mycila.inject.internal.guava.collect.BoundType;

        r10 := @parameter3: com.mycila.inject.internal.guava.base.Optional;

        r13 := @parameter4: com.mycila.inject.internal.guava.collect.BoundType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.Comparator) $r2;

        r0.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator> = $r3;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r6 = (com.mycila.inject.internal.guava.base.Optional) $r5;

        r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional lowerEndpoint> = $r6;

        $r8 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r7);

        $r9 = (com.mycila.inject.internal.guava.collect.BoundType) $r8;

        r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType lowerBoundType> = $r9;

        $r11 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r10);

        $r12 = (com.mycila.inject.internal.guava.base.Optional) $r11;

        r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional upperEndpoint> = $r12;

        $r14 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r13);

        $r15 = (com.mycila.inject.internal.guava.collect.BoundType) $r14;

        r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType upperBoundType> = $r15;

        $z0 = virtualinvoke r4.<com.mycila.inject.internal.guava.base.Optional: boolean isPresent()>();

        if $z0 == 0 goto label7;

        $z1 = virtualinvoke r10.<com.mycila.inject.internal.guava.base.Optional: boolean isPresent()>();

        if $z1 == 0 goto label7;

        $r16 = virtualinvoke r4.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        $r17 = virtualinvoke r10.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        $i0 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r16, $r17);

        if $i0 > 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r18 = newarray (java.lang.Object)[2];

        $r18[0] = r4;

        $r18[1] = r10;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z2, "lowerEndpoint (%s) > upperEndpoint (%s)", $r18);

        if $i0 != 0 goto label7;

        $r19 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        if r7 == $r19 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $r20 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        if r13 == $r20 goto label5;

        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        $z5 = $z3 | $z4;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z5);

     label7:
        return;
    }

    java.util.Comparator comparator()
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r0;
        java.util.Comparator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.GeneralRange;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator>;

        return $r1;
    }

    boolean hasLowerBound()
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r0;
        com.mycila.inject.internal.guava.base.Optional $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.GeneralRange;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional lowerEndpoint>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Optional: boolean isPresent()>();

        return $z0;
    }

    boolean hasUpperBound()
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r0;
        com.mycila.inject.internal.guava.base.Optional $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.GeneralRange;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional upperEndpoint>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Optional: boolean isPresent()>();

        return $z0;
    }

    boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r0;
        com.mycila.inject.internal.guava.base.Optional $r1, $r3;
        java.lang.Object $r2, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.mycila.inject.internal.guava.collect.GeneralRange;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean hasUpperBound()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional upperEndpoint>;

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        $z3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean tooLow(java.lang.Object)>($r4);

        if $z3 != 0 goto label2;

     label1:
        $z1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean hasLowerBound()>();

        if $z1 == 0 goto label3;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional lowerEndpoint>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        $z2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean tooHigh(java.lang.Object)>($r2);

        if $z2 == 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    boolean tooLow(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r0;
        com.mycila.inject.internal.guava.collect.BoundType $r5, $r6;
        com.mycila.inject.internal.guava.base.Optional $r1;
        int $i0;
        java.lang.Object $r2, r3;
        java.util.Comparator $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: com.mycila.inject.internal.guava.collect.GeneralRange;

        r3 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean hasLowerBound()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional lowerEndpoint>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        $r4 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator>;

        $i0 = interfaceinvoke $r4.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r3, $r2);

        if $i0 >= 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        if $i0 != 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        $r5 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType lowerBoundType>;

        $r6 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        if $r5 != $r6 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        $z4 = $z2 & $z3;

        $z5 = $z1 | $z4;

        return $z5;
    }

    boolean tooHigh(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r0;
        com.mycila.inject.internal.guava.collect.BoundType $r5, $r6;
        com.mycila.inject.internal.guava.base.Optional $r1;
        int $i0;
        java.lang.Object $r2, r3;
        java.util.Comparator $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: com.mycila.inject.internal.guava.collect.GeneralRange;

        r3 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean hasUpperBound()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional upperEndpoint>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        $r4 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator>;

        $i0 = interfaceinvoke $r4.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r3, $r2);

        if $i0 <= 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        if $i0 != 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        $r5 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType upperBoundType>;

        $r6 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        if $r5 != $r6 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        $z4 = $z2 & $z3;

        $z5 = $z1 | $z4;

        return $z5;
    }

    boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r1;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: com.mycila.inject.internal.guava.collect.GeneralRange;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean tooLow(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean tooHigh(java.lang.Object)>(r0);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    com.mycila.inject.internal.guava.collect.GeneralRange intersect(com.mycila.inject.internal.guava.collect.GeneralRange)
    {
        com.mycila.inject.internal.guava.collect.BoundType $r7, $r8, $r14, $r15, $r21, $r22, r24, r26;
        com.mycila.inject.internal.guava.base.Optional $r9, $r12, $r16, $r19, r23, r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i1, $i2;
        com.mycila.inject.internal.guava.collect.GeneralRange r0, r1, $r27;
        java.lang.Object $r5, $r6, $r11, $r13, $r18, $r20;
        java.util.Comparator $r2, $r3, $r4, $r10, $r17, $r28;

        r1 := @this: com.mycila.inject.internal.guava.collect.GeneralRange;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.GeneralRange;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator>;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        r23 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional lowerEndpoint>;

        r24 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType lowerBoundType>;

        $z1 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean hasLowerBound()>();

        if $z1 != 0 goto label1;

        r23 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional lowerEndpoint>;

        r24 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType lowerBoundType>;

        goto label3;

     label1:
        $z2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean hasLowerBound()>();

        if $z2 == 0 goto label3;

        $r17 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator>;

        $r16 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional lowerEndpoint>;

        $r18 = virtualinvoke $r16.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        $r19 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional lowerEndpoint>;

        $r20 = virtualinvoke $r19.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        $i2 = interfaceinvoke $r17.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r18, $r20);

        if $i2 < 0 goto label2;

        if $i2 != 0 goto label3;

        $r22 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType lowerBoundType>;

        $r21 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        if $r22 != $r21 goto label3;

     label2:
        r23 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional lowerEndpoint>;

        r24 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType lowerBoundType>;

     label3:
        r25 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional upperEndpoint>;

        r26 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType upperBoundType>;

        $z5 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean hasUpperBound()>();

        if $z5 != 0 goto label4;

        r25 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional upperEndpoint>;

        r26 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType upperBoundType>;

        goto label6;

     label4:
        $z3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean hasUpperBound()>();

        if $z3 == 0 goto label6;

        $r10 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator>;

        $r9 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional upperEndpoint>;

        $r11 = virtualinvoke $r9.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        $r12 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional upperEndpoint>;

        $r13 = virtualinvoke $r12.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        $i1 = interfaceinvoke $r10.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r11, $r13);

        if $i1 > 0 goto label5;

        if $i1 != 0 goto label6;

        $r15 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType upperBoundType>;

        $r14 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        if $r15 != $r14 goto label6;

     label5:
        r25 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional upperEndpoint>;

        r26 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType upperBoundType>;

     label6:
        $z6 = virtualinvoke r23.<com.mycila.inject.internal.guava.base.Optional: boolean isPresent()>();

        if $z6 == 0 goto label8;

        $z4 = virtualinvoke r25.<com.mycila.inject.internal.guava.base.Optional: boolean isPresent()>();

        if $z4 == 0 goto label8;

        $r4 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator>;

        $r5 = virtualinvoke r23.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        $r6 = virtualinvoke r25.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        $i0 = interfaceinvoke $r4.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $i0 > 0 goto label7;

        if $i0 != 0 goto label8;

        $r7 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        if r24 != $r7 goto label8;

        $r8 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        if r26 != $r8 goto label8;

     label7:
        r23 = r25;

        r24 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        r26 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType CLOSED>;

     label8:
        $r27 = new com.mycila.inject.internal.guava.collect.GeneralRange;

        $r28 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator>;

        specialinvoke $r27.<com.mycila.inject.internal.guava.collect.GeneralRange: void <init>(java.util.Comparator,com.mycila.inject.internal.guava.base.Optional,com.mycila.inject.internal.guava.collect.BoundType,com.mycila.inject.internal.guava.base.Optional,com.mycila.inject.internal.guava.collect.BoundType)>($r28, r23, r24, r25, r26);

        return $r27;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.BoundType $r7, $r8, $r11, $r12;
        com.mycila.inject.internal.guava.base.Optional $r5, $r6, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.mycila.inject.internal.guava.collect.GeneralRange r1, r2;
        java.lang.Object r0;
        java.util.Comparator $r3, $r4;

        r2 := @this: com.mycila.inject.internal.guava.collect.GeneralRange;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.GeneralRange;

        if $z0 == 0 goto label3;

        r1 = (com.mycila.inject.internal.guava.collect.GeneralRange) r0;

        $r4 = r2.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator>;

        $r3 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $r6 = r2.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional lowerEndpoint>;

        $r5 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional lowerEndpoint>;

        $z2 = virtualinvoke $r6.<com.mycila.inject.internal.guava.base.Optional: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label1;

        $r8 = r2.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType lowerBoundType>;

        $r7 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType lowerBoundType>;

        $z3 = virtualinvoke $r8.<com.mycila.inject.internal.guava.collect.BoundType: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label1;

        $r10 = r2.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional upperEndpoint>;

        $r9 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional upperEndpoint>;

        $z4 = virtualinvoke $r10.<com.mycila.inject.internal.guava.base.Optional: boolean equals(java.lang.Object)>($r9);

        if $z4 == 0 goto label1;

        $r12 = r2.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType upperBoundType>;

        $r11 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType upperBoundType>;

        $z5 = virtualinvoke $r12.<com.mycila.inject.internal.guava.collect.BoundType: boolean equals(java.lang.Object)>($r11);

        if $z5 == 0 goto label1;

        $z6 = 1;

        goto label2;

     label1:
        $z6 = 0;

     label2:
        return $z6;

     label3:
        return 0;
    }

    public int hashCode()
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r1;
        java.lang.Object[] $r0;
        com.mycila.inject.internal.guava.collect.BoundType $r4, $r6;
        com.mycila.inject.internal.guava.base.Optional $r3, $r5;
        int $i0;
        java.util.Comparator $r2;

        r1 := @this: com.mycila.inject.internal.guava.collect.GeneralRange;

        $r0 = newarray (java.lang.Object)[5];

        $r2 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator>;

        $r0[0] = $r2;

        $r3 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional lowerEndpoint>;

        $r0[1] = $r3;

        $r4 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType lowerBoundType>;

        $r0[2] = $r4;

        $r5 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional upperEndpoint>;

        $r0[3] = $r5;

        $r6 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType upperBoundType>;

        $r0[4] = $r6;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: int hashCode(java.lang.Object[])>($r0);

        return $i0;
    }

    public com.mycila.inject.internal.guava.collect.GeneralRange reverse()
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r0, $r1, r9;
        com.mycila.inject.internal.guava.collect.BoundType $r5, $r7;
        com.mycila.inject.internal.guava.base.Optional $r6, $r8;
        java.util.Comparator $r2;
        com.mycila.inject.internal.guava.collect.Ordering $r3, $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.GeneralRange;

        r9 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.GeneralRange reverse>;

        if r9 != null goto label1;

        $r1 = new com.mycila.inject.internal.guava.collect.GeneralRange;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering 'from'(java.util.Comparator)>($r2);

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering reverse()>();

        $r8 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional upperEndpoint>;

        $r7 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType upperBoundType>;

        $r6 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional lowerEndpoint>;

        $r5 = r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType lowerBoundType>;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.GeneralRange: void <init>(java.util.Comparator,com.mycila.inject.internal.guava.base.Optional,com.mycila.inject.internal.guava.collect.BoundType,com.mycila.inject.internal.guava.base.Optional,com.mycila.inject.internal.guava.collect.BoundType)>($r4, $r8, $r7, $r6, $r5);

        $r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.GeneralRange reverse> = r0;

        r0.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.GeneralRange reverse> = $r1;

        return $r1;

     label1:
        return r9;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.internal.guava.collect.BoundType $r4, $r6;
        int[] $r5, $r7;
        int $i0, $i1, $i2, $i3;
        com.mycila.inject.internal.guava.base.Optional $r8, $r10;
        java.lang.String $r12;
        boolean $z0, $z1;
        com.mycila.inject.internal.guava.collect.GeneralRange r1;
        java.lang.StringBuilder $r0, $r3;
        java.lang.Object $r9, $r11;
        java.util.Comparator $r2;

        r1 := @this: com.mycila.inject.internal.guava.collect.GeneralRange;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r5 = <com.mycila.inject.internal.guava.collect.GeneralRange$1: int[] $SwitchMap$com$google$common$collect$BoundType>;

        $r4 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType lowerBoundType>;

        $i0 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.BoundType: int ordinal()>();

        $i1 = $r5[$i0];

        lookupswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            default: goto label03;
        };

     label01:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        goto label03;

     label02:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

     label03:
        $z1 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean hasLowerBound()>();

        if $z1 == 0 goto label04;

        $r10 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional lowerEndpoint>;

        $r11 = virtualinvoke $r10.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        goto label05;

     label04:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-\u221e");

     label05:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $z0 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean hasUpperBound()>();

        if $z0 == 0 goto label06;

        $r8 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.base.Optional upperEndpoint>;

        $r9 = virtualinvoke $r8.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        goto label07;

     label06:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u221e");

     label07:
        $r7 = <com.mycila.inject.internal.guava.collect.GeneralRange$1: int[] $SwitchMap$com$google$common$collect$BoundType>;

        $r6 = r1.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.BoundType upperBoundType>;

        $i2 = virtualinvoke $r6.<com.mycila.inject.internal.guava.collect.BoundType: int ordinal()>();

        $i3 = $r7[$i2];

        lookupswitch($i3)
        {
            case 1: goto label08;
            case 2: goto label09;
            default: goto label10;
        };

     label08:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        goto label10;

     label09:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

     label10:
        $r12 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }
}
