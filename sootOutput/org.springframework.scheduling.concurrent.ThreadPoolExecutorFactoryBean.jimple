public class org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean extends org.springframework.scheduling.concurrent.ExecutorConfigurationSupport implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    private int corePoolSize;
    private int maxPoolSize;
    private int keepAliveSeconds;
    private boolean allowCoreThreadTimeOut;
    private int queueCapacity;
    private boolean exposeUnconfigurableExecutor;
    private java.util.concurrent.ExecutorService exposedExecutor;

    public void <init>()
    {
        org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

        specialinvoke r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void <init>()>();

        r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: int corePoolSize> = 1;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: int maxPoolSize> = 2147483647;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: int keepAliveSeconds> = 60;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: boolean allowCoreThreadTimeOut> = 0;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: int queueCapacity> = 2147483647;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: boolean exposeUnconfigurableExecutor> = 0;

        return;
    }

    public void setCorePoolSize(int)
    {
        int i0;
        org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

        i0 := @parameter0: int;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: int corePoolSize> = i0;

        return;
    }

    public void setMaxPoolSize(int)
    {
        int i0;
        org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

        i0 := @parameter0: int;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: int maxPoolSize> = i0;

        return;
    }

    public void setKeepAliveSeconds(int)
    {
        int i0;
        org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

        i0 := @parameter0: int;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: int keepAliveSeconds> = i0;

        return;
    }

    public void setAllowCoreThreadTimeOut(boolean)
    {
        org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean r0;
        boolean z0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

        z0 := @parameter0: boolean;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: boolean allowCoreThreadTimeOut> = z0;

        return;
    }

    public void setQueueCapacity(int)
    {
        int i0;
        org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

        i0 := @parameter0: int;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: int queueCapacity> = i0;

        return;
    }

    public void setExposeUnconfigurableExecutor(boolean)
    {
        org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean r0;
        boolean z0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

        z0 := @parameter0: boolean;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: boolean exposeUnconfigurableExecutor> = z0;

        return;
    }

    protected java.util.concurrent.ExecutorService initializeExecutor(java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)
    {
        java.util.concurrent.ThreadPoolExecutor $r2;
        org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean r0;
        java.util.concurrent.BlockingQueue $r1;
        long $l2;
        java.util.concurrent.TimeUnit $r5;
        java.util.concurrent.RejectedExecutionHandler r4;
        int $i0, $i1, $i3, $i4;
        java.util.concurrent.ThreadFactory r3;
        java.util.concurrent.ExecutorService $r6;
        boolean $z0, $z1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

        r3 := @parameter0: java.util.concurrent.ThreadFactory;

        r4 := @parameter1: java.util.concurrent.RejectedExecutionHandler;

        $i0 = r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: int queueCapacity>;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: java.util.concurrent.BlockingQueue createQueue(int)>($i0);

        $r2 = new java.util.concurrent.ThreadPoolExecutor;

        $i4 = r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: int corePoolSize>;

        $i3 = r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: int maxPoolSize>;

        $i1 = r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: int keepAliveSeconds>;

        $l2 = (long) $i1;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        specialinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>($i4, $i3, $l2, $r5, $r1, r3, r4);

        $z0 = r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: boolean allowCoreThreadTimeOut>;

        if $z0 == 0 goto label1;

        virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1);

     label1:
        $z1 = r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: boolean exposeUnconfigurableExecutor>;

        if $z1 == 0 goto label2;

        $r6 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService)>($r2);

        goto label3;

     label2:
        $r6 = $r2;

     label3:
        r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: java.util.concurrent.ExecutorService exposedExecutor> = $r6;

        return $r2;
    }

    protected java.util.concurrent.BlockingQueue createQueue(int)
    {
        java.util.concurrent.SynchronousQueue $r0;
        int i0;
        org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean r2;
        java.util.concurrent.LinkedBlockingQueue $r1;

        r2 := @this: org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $r1 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r1.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(i0);

        return $r1;

     label1:
        $r0 = new java.util.concurrent.SynchronousQueue;

        specialinvoke $r0.<java.util.concurrent.SynchronousQueue: void <init>()>();

        return $r0;
    }

    public java.util.concurrent.ExecutorService getObject() throws java.lang.Exception
    {
        org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

        $r1 = r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: java.util.concurrent.ExecutorService exposedExecutor>;

        return $r1;
    }

    public java.lang.Class getObjectType()
    {
        org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean r0;
        java.lang.Class $r3;
        java.util.concurrent.ExecutorService $r1, $r2;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

        $r1 = r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: java.util.concurrent.ExecutorService exposedExecutor>;

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: java.util.concurrent.ExecutorService exposedExecutor>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        goto label2;

     label1:
        $r3 = class "Ljava/util/concurrent/ExecutorService;";

     label2:
        return $r3;
    }

    public boolean isSingleton()
    {
        org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

        return 1;
    }

    public volatile java.lang.Object getObject() throws java.lang.Exception
    {
        org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean: java.util.concurrent.ExecutorService getObject()>();

        return $r1;
    }
}
