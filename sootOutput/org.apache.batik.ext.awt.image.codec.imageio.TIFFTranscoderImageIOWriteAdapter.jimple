public class org.apache.batik.ext.awt.image.codec.imageio.TIFFTranscoderImageIOWriteAdapter extends java.lang.Object implements org.apache.batik.transcoder.image.TIFFTranscoder$WriteAdapter
{

    public void <init>()
    {
        org.apache.batik.ext.awt.image.codec.imageio.TIFFTranscoderImageIOWriteAdapter r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.imageio.TIFFTranscoderImageIOWriteAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void writeImage(org.apache.batik.transcoder.image.TIFFTranscoder, java.awt.image.BufferedImage, org.apache.batik.transcoder.TranscoderOutput) throws org.apache.batik.transcoder.TranscoderException
    {
        java.awt.image.SampleModel $r23;
        int[] $r25;
        org.apache.batik.ext.awt.image.rendered.FormatRed $r10;
        org.apache.batik.transcoder.TranscodingHints$Key $r6, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.batik.ext.awt.image.spi.ImageWriterRegistry $r2;
        java.awt.image.BufferedImage r8;
        java.awt.image.PixelInterleavedSampleModel $r9;
        org.apache.batik.transcoder.TranscodingHints $r1;
        org.apache.batik.bridge.UserAgent $r5;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r11;
        float $f0;
        org.apache.batik.ext.awt.image.codec.imageio.TIFFTranscoderImageIOWriteAdapter r20;
        org.apache.batik.transcoder.image.TIFFTranscoder r0;
        org.apache.batik.ext.awt.image.spi.ImageWriter $r3;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.awt.image.SinglePixelPackedSampleModel $r24;
        java.lang.String $r14, $r15, $r16, $r17, r21;
        double $d0, $d1, $d2;
        java.io.OutputStream $r22;
        org.apache.batik.transcoder.TranscoderOutput r7;
        java.io.IOException $r18;
        org.apache.batik.transcoder.TranscoderException $r19;
        org.apache.batik.ext.awt.image.spi.ImageWriterParams $r4;
        java.lang.Object $r13;

        r20 := @this: org.apache.batik.ext.awt.image.codec.imageio.TIFFTranscoderImageIOWriteAdapter;

        r0 := @parameter0: org.apache.batik.transcoder.image.TIFFTranscoder;

        r8 := @parameter1: java.awt.image.BufferedImage;

        r7 := @parameter2: org.apache.batik.transcoder.TranscoderOutput;

        $r1 = virtualinvoke r0.<org.apache.batik.transcoder.image.TIFFTranscoder: org.apache.batik.transcoder.TranscodingHints getTranscodingHints()>();

        $r2 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: org.apache.batik.ext.awt.image.spi.ImageWriterRegistry getInstance()>();

        $r3 = virtualinvoke $r2.<org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: org.apache.batik.ext.awt.image.spi.ImageWriter getWriterFor(java.lang.String)>("image/tiff");

        $r4 = new org.apache.batik.ext.awt.image.spi.ImageWriterParams;

        specialinvoke $r4.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: void <init>()>();

        $r5 = virtualinvoke r0.<org.apache.batik.transcoder.image.TIFFTranscoder: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $f0 = interfaceinvoke $r5.<org.apache.batik.bridge.UserAgent: float getPixelUnitToMillimeter()>();

        $d0 = (double) $f0;

        $d1 = 25.4 / $d0;

        $d2 = $d1 + 0.5;

        i0 = (int) $d2;

        virtualinvoke $r4.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: void setResolution(int)>(i0);

        $r6 = <org.apache.batik.transcoder.image.TIFFTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_COMPRESSION_METHOD>;

        $z0 = virtualinvoke $r1.<org.apache.batik.transcoder.TranscodingHints: boolean containsKey(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        $r12 = <org.apache.batik.transcoder.image.TIFFTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_COMPRESSION_METHOD>;

        $r13 = virtualinvoke $r1.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r12);

        r21 = (java.lang.String) $r13;

        $r14 = "packbits";

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r21);

        if $z1 == 0 goto label1;

        virtualinvoke $r4.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: void setCompressionMethod(java.lang.String)>("PackBits");

        goto label4;

     label1:
        $r15 = "deflate";

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r21);

        if $z2 == 0 goto label2;

        virtualinvoke $r4.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: void setCompressionMethod(java.lang.String)>("Deflate");

        goto label4;

     label2:
        $r16 = "lzw";

        $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r21);

        if $z3 == 0 goto label3;

        virtualinvoke $r4.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: void setCompressionMethod(java.lang.String)>("LZW");

        goto label4;

     label3:
        $r17 = "jpeg";

        $z4 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r21);

        if $z4 == 0 goto label4;

        virtualinvoke $r4.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: void setCompressionMethod(java.lang.String)>("JPEG");

     label4:
        $r22 = virtualinvoke r7.<org.apache.batik.transcoder.TranscoderOutput: java.io.OutputStream getOutputStream()>();

        $i2 = virtualinvoke r8.<java.awt.image.BufferedImage: int getWidth()>();

        $i3 = virtualinvoke r8.<java.awt.image.BufferedImage: int getHeight()>();

        $r23 = virtualinvoke r8.<java.awt.image.BufferedImage: java.awt.image.SampleModel getSampleModel()>();

        $r24 = (java.awt.image.SinglePixelPackedSampleModel) $r23;

        $i4 = virtualinvoke $r24.<java.awt.image.SinglePixelPackedSampleModel: int getNumBands()>();

        $r25 = newarray (int)[$i4];

        i5 = 0;

     label5:
        if i5 >= $i4 goto label6;

        $r25[i5] = i5;

        i5 = i5 + 1;

        goto label5;

     label6:
        $r9 = new java.awt.image.PixelInterleavedSampleModel;

        $i1 = $i2 * $i4;

        specialinvoke $r9.<java.awt.image.PixelInterleavedSampleModel: void <init>(int,int,int,int,int,int[])>(0, $i2, $i3, $i4, $i1, $r25);

        $r10 = new org.apache.batik.ext.awt.image.rendered.FormatRed;

        $r11 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>(r8);

        specialinvoke $r10.<org.apache.batik.ext.awt.image.rendered.FormatRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.image.SampleModel)>($r11, $r9);

        interfaceinvoke $r3.<org.apache.batik.ext.awt.image.spi.ImageWriter: void writeImage(java.awt.image.RenderedImage,java.io.OutputStream,org.apache.batik.ext.awt.image.spi.ImageWriterParams)>($r10, $r22, $r4);

        virtualinvoke $r22.<java.io.OutputStream: void flush()>();

     label7:
        goto label9;

     label8:
        $r18 := @caughtexception;

        $r19 = new org.apache.batik.transcoder.TranscoderException;

        specialinvoke $r19.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.Exception)>($r18);

        throw $r19;

     label9:
        return;

        catch java.io.IOException from label4 to label7 with label8;
    }
}
