public class org.apache.commons.httpclient.MultiThreadedHttpConnectionManager extends java.lang.Object implements org.apache.commons.httpclient.HttpConnectionManager
{
    private static final org.apache.commons.logging.Log LOG;
    public static final int DEFAULT_MAX_HOST_CONNECTIONS;
    public static final int DEFAULT_MAX_TOTAL_CONNECTIONS;
    private static final java.util.Map REFERENCE_TO_CONNECTION_SOURCE;
    private static final java.lang.ref.ReferenceQueue REFERENCE_QUEUE;
    private static org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread REFERENCE_QUEUE_THREAD;
    private static java.util.WeakHashMap ALL_CONNECTION_MANAGERS;
    private org.apache.commons.httpclient.params.HttpConnectionManagerParams params;
    private org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool;
    private volatile boolean shutdown;
    static java.lang.Class class$org$apache$commons$httpclient$MultiThreadedHttpConnectionManager;

    public static void shutdownAll()
    {
        java.lang.Throwable $r14, $r15;
        java.lang.Object[] $r6;
        java.util.Map $r0, $r10;
        int $i0, $i1, i2;
        java.util.WeakHashMap $r1, $r2, $r4;
        java.util.Set $r3;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager[] $r5, $r7, r8;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread $r9, $r11;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r12, $r13;

        $r0 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        entermonitor $r0;

     label01:
        $r1 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.WeakHashMap ALL_CONNECTION_MANAGERS>;

        entermonitor $r1;

     label02:
        $r2 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.WeakHashMap ALL_CONNECTION_MANAGERS>;

        $r3 = virtualinvoke $r2.<java.util.WeakHashMap: java.util.Set keySet()>();

        $r4 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.WeakHashMap ALL_CONNECTION_MANAGERS>;

        $i0 = virtualinvoke $r4.<java.util.WeakHashMap: int size()>();

        $r5 = newarray (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager)[$i0];

        $r6 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager[]) $r6;

        r8 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager[]) $r7;

        i2 = 0;

     label03:
        $i1 = lengthof r8;

        if i2 >= $i1 goto label05;

        $r12 = r8[i2];

        if $r12 == null goto label04;

        $r13 = r8[i2];

        virtualinvoke $r13.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void shutdown()>();

     label04:
        i2 = i2 + 1;

        goto label03;

     label05:
        exitmonitor $r1;

     label06:
        goto label09;

     label07:
        $r15 := @caughtexception;

        exitmonitor $r1;

     label08:
        throw $r15;

     label09:
        $r9 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread REFERENCE_QUEUE_THREAD>;

        if $r9 == null goto label10;

        $r11 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread REFERENCE_QUEUE_THREAD>;

        virtualinvoke $r11.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: void shutdown()>();

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread REFERENCE_QUEUE_THREAD> = null;

     label10:
        $r10 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        interfaceinvoke $r10.<java.util.Map: void clear()>();

        exitmonitor $r0;

     label11:
        goto label14;

     label12:
        $r14 := @caughtexception;

        exitmonitor $r0;

     label13:
        throw $r14;

     label14:
        return;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private static void storeReferenceToConnection(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference, org.apache.commons.httpclient.HostConfiguration, org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)
    {
        java.lang.Throwable $r10;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread $r4, $r8, $r9;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource $r0;
        org.apache.commons.httpclient.HostConfiguration r2;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r1;
        java.util.Map $r3, $r7;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference r5;
        java.lang.ref.WeakReference $r6;

        r5 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference;

        r2 := @parameter1: org.apache.commons.httpclient.HostConfiguration;

        r1 := @parameter2: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r0 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource;

        specialinvoke $r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource: void <init>(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$1)>(null);

        $r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool> = r1;

        $r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource: org.apache.commons.httpclient.HostConfiguration hostConfiguration> = r2;

        $r3 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        entermonitor $r3;

     label1:
        $r4 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread REFERENCE_QUEUE_THREAD>;

        if $r4 != null goto label2;

        $r8 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread;

        specialinvoke $r8.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: void <init>()>();

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread REFERENCE_QUEUE_THREAD> = $r8;

        $r9 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread REFERENCE_QUEUE_THREAD>;

        virtualinvoke $r9.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: void start()>();

     label2:
        $r7 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        $r6 = r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference: java.lang.ref.WeakReference reference>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r0);

        exitmonitor $r3;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r10;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static void shutdownCheckedOutConnections(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)
    {
        java.lang.Throwable $r16;
        org.apache.commons.httpclient.HttpConnection r15, r17;
        java.util.ArrayList $r0;
        java.util.Map $r1, $r2, $r9;
        boolean $z0, $z1;
        java.util.Iterator $r4, $r5;
        java.util.Set $r3;
        java.lang.ref.Reference r8;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource r11;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r12, $r13;
        java.lang.Object $r6, $r7, $r10, $r14;

        r12 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        entermonitor $r1;

     label01:
        $r2 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.ref.Reference) $r7;

        $r9 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r11 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource) $r10;

        $r13 = r11.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        if $r13 != r12 goto label03;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        $r14 = virtualinvoke r8.<java.lang.ref.Reference: java.lang.Object get()>();

        r15 = (org.apache.commons.httpclient.HttpConnection) $r14;

        if r15 == null goto label03;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r15);

     label03:
        goto label02;

     label04:
        exitmonitor $r1;

     label05:
        goto label08;

     label06:
        $r16 := @caughtexception;

        exitmonitor $r1;

     label07:
        throw $r16;

     label08:
        $r5 = virtualinvoke $r0.<java.util.ArrayList: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.apache.commons.httpclient.HttpConnection) $r6;

        virtualinvoke r17.<org.apache.commons.httpclient.HttpConnection: void close()>();

        virtualinvoke r17.<org.apache.commons.httpclient.HttpConnection: void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)>(null);

        virtualinvoke r17.<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>();

        goto label09;

     label10:
        return;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    private static void removeReferenceToConnection(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference)
    {
        java.lang.Throwable $r4;
        java.util.Map $r0, $r3;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference r1;
        java.lang.ref.WeakReference $r2;

        r1 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference;

        $r0 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        entermonitor $r0;

     label1:
        $r3 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        $r2 = r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference: java.lang.ref.WeakReference reference>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        exitmonitor $r0;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void <init>()
    {
        java.lang.Throwable $r5;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r2;
        java.util.WeakHashMap $r3, $r4;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.httpclient.params.HttpConnectionManagerParams;

        specialinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void <init>()>();

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params> = $r1;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: boolean shutdown> = 0;

        $r2 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        specialinvoke $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void <init>(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager,org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$1)>(r0, null);

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool> = $r2;

        $r3 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.WeakHashMap ALL_CONNECTION_MANAGERS>;

        entermonitor $r3;

     label1:
        $r4 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.WeakHashMap ALL_CONNECTION_MANAGERS>;

        virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, null);

        exitmonitor $r3;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public synchronized void shutdown()
    {
        java.lang.Throwable $r3;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r1, $r2;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        entermonitor $r1;

     label1:
        $z0 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: boolean shutdown>;

        if $z0 != 0 goto label2;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: boolean shutdown> = 1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        virtualinvoke $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void shutdown()>();

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean isConnectionStaleCheckingEnabled()
    {
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: boolean isStaleCheckingEnabled()>();

        return $z0;
    }

    public void setConnectionStaleCheckingEnabled(boolean)
    {
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setStaleCheckingEnabled(boolean)>(z0);

        return;
    }

    public void setMaxConnectionsPerHost(int)
    {
        int i0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setDefaultMaxConnectionsPerHost(int)>(i0);

        return;
    }

    public int getMaxConnectionsPerHost()
    {
        int $i0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: int getDefaultMaxConnectionsPerHost()>();

        return $i0;
    }

    public void setMaxTotalConnections(int)
    {
        int i0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setMaxTotalConnections(int)>(i0);

        return;
    }

    public int getMaxTotalConnections()
    {
        int $i0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: int getMaxTotalConnections()>();

        return $i0;
    }

    public org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.HostConfiguration r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.httpclient.ConnectionPoolTimeoutException $r3;
        org.apache.commons.logging.Log $r4;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>(r1, 0L);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Unexpected exception while waiting for connection", $r3);

        goto label1;

        catch org.apache.commons.httpclient.ConnectionPoolTimeoutException from label1 to label2 with label3;
    }

    public org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration, long) throws org.apache.commons.httpclient.ConnectionPoolTimeoutException
    {
        org.apache.commons.httpclient.HttpConnection $r4;
        long l0;
        org.apache.commons.httpclient.HostConfiguration r1;
        java.lang.StringBuffer $r6, $r8, $r9, $r10, $r11;
        java.lang.String $r12;
        boolean $z0;
        java.lang.IllegalArgumentException $r13;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter $r5;
        org.apache.commons.logging.Log $r0, $r2, $r7;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r3;

        r3 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        l0 := @parameter1: long;

        $r0 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnectionManager.getConnectionWithTimeout(HostConfiguration, long)");

        if r1 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("hostConfiguration is null");

        throw $r13;

     label1:
        $r2 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r7 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("HttpConnectionManager.getConnection:  config = ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", timeout = ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label2:
        $r4 = specialinvoke r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HttpConnection doGetConnection(org.apache.commons.httpclient.HostConfiguration,long)>(r1, l0);

        $r5 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        specialinvoke $r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: void <init>(org.apache.commons.httpclient.HttpConnection)>($r4);

        return $r5;
    }

    public org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration, long) throws org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpConnection $r3;
        long l0;
        org.apache.commons.httpclient.HostConfiguration r2;
        org.apache.commons.httpclient.HttpException $r5;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.ConnectionPoolTimeoutException $r4;
        java.lang.String $r6;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r1;

        r1 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        r2 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        l0 := @parameter1: long;

        $r0 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnectionManager.getConnection(HostConfiguration, long)");

     label1:
        $r3 = virtualinvoke r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>(r2, l0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.commons.httpclient.HttpException;

        $r6 = virtualinvoke $r4.<org.apache.commons.httpclient.ConnectionPoolTimeoutException: java.lang.String getMessage()>();

        specialinvoke $r5.<org.apache.commons.httpclient.HttpException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch org.apache.commons.httpclient.ConnectionPoolTimeoutException from label1 to label2 with label3;
    }

    private org.apache.commons.httpclient.HttpConnection doGetConnection(org.apache.commons.httpclient.HostConfiguration, long) throws org.apache.commons.httpclient.ConnectionPoolTimeoutException
    {
        byte $b3, $b9;
        java.lang.Thread $r17;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1, $r2;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        java.lang.Throwable $r32, $r33;
        long l2, $l7, $l8, $l12, $l13, l14, l15;
        org.apache.commons.httpclient.HostConfiguration r43, $r46;
        java.lang.StringBuffer $r20, $r21, $r49;
        java.lang.String $r22;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r3, $r5, $r10, $r12, $r14, $r24, $r26, $r27, $r28, $r29, $r30, $r35, $r39;
        org.apache.commons.httpclient.ConnectionPoolTimeoutException $r48;
        java.lang.IllegalStateException $r47;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.commons.httpclient.HttpConnection r44;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r6;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread r45, $r50;
        int $i0, $i1, $i4, $i5, $i6, $i10, $i11, $i16, $i17;
        java.util.LinkedList $r7, $r9, $r11, $r13, $r15, $r25, $r34, $r36, $r38, $r40;
        java.lang.IllegalThreadStateException $r51;
        java.lang.InterruptedException $r37;
        org.apache.commons.logging.Log $r8, $r19, $r41;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        r43 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        l2 := @parameter1: long;

        r44 = null;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: int getMaxConnectionsPerHost(org.apache.commons.httpclient.HostConfiguration)>(r43);

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        $i1 = virtualinvoke $r2.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: int getMaxTotalConnections()>();

        $r3 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        entermonitor $r3;

     label01:
        $r46 = new org.apache.commons.httpclient.HostConfiguration;

        specialinvoke $r46.<org.apache.commons.httpclient.HostConfiguration: void <init>(org.apache.commons.httpclient.HostConfiguration)>(r43);

        $r5 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>($r46, 1);

        r45 = null;

        $b3 = l2 cmp 0L;

        $i16 = (int) $b3;

        if $i16 <= 0 goto label02;

        $z7 = 1;

        goto label03;

     label02:
        $z7 = 0;

     label03:
        z0 = $z7;

        l14 = l2;

        l15 = 0L;

     label04:
        if r44 != null goto label24;

        $z1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: boolean shutdown>;

        if $z1 == 0 goto label05;

        $r47 = new java.lang.IllegalStateException;

        specialinvoke $r47.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection factory has been shutdown.");

        throw $r47;

     label05:
        $r7 = $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList freeConnections>;

        $i4 = virtualinvoke $r7.<java.util.LinkedList: int size()>();

        if $i4 <= 0 goto label06;

        $r30 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        r44 = virtualinvoke $r30.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.HttpConnection getFreeConnection(org.apache.commons.httpclient.HostConfiguration)>($r46);

        goto label04;

     label06:
        $i5 = $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        if $i5 >= $i0 goto label07;

        $r28 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $i11 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int access$200(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r28);

        if $i11 >= $i1 goto label07;

        $r29 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        r44 = virtualinvoke $r29.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.HttpConnection createConnection(org.apache.commons.httpclient.HostConfiguration)>($r46);

        goto label04;

     label07:
        $i6 = $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        if $i6 >= $i0 goto label08;

        $r24 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r25 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList access$300(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r24);

        $i10 = virtualinvoke $r25.<java.util.LinkedList: int size()>();

        if $i10 <= 0 goto label08;

        $r26 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        virtualinvoke $r26.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void deleteLeastUsedConnection()>();

        $r27 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        r44 = virtualinvoke $r27.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.HttpConnection createConnection(org.apache.commons.httpclient.HostConfiguration)>($r46);

        goto label04;

     label08:
        if z0 == 0 goto label09;

        $b9 = l14 cmp 0L;

        $i17 = (int) $b9;

        if $i17 > 0 goto label09;

        $r48 = new org.apache.commons.httpclient.ConnectionPoolTimeoutException;

        specialinvoke $r48.<org.apache.commons.httpclient.ConnectionPoolTimeoutException: void <init>(java.lang.String)>("Timeout waiting for connection");

        throw $r48;

     label09:
        $r8 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        $z2 = interfaceinvoke $r8.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label10;

        $r19 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to get a connection, waiting..., hostConfig=");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r46);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r19.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r22);

     label10:
        if r45 != null goto label11;

        $r50 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread;

        specialinvoke $r50.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: void <init>(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$1)>(null);

        r45 = $r50;

        $r50.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool hostConnectionPool> = $r6;

        $r17 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r50.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: java.lang.Thread thread> = $r17;

        goto label12;

     label11:
        r45.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: boolean interruptedByConnectionPool> = 0;

     label12:
        if z0 == 0 goto label13;

        l15 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label13:
        $r9 = $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        virtualinvoke $r9.<java.util.LinkedList: void addLast(java.lang.Object)>(r45);

        $r10 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r11 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList access$500(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r10);

        virtualinvoke $r11.<java.util.LinkedList: void addLast(java.lang.Object)>(r45);

        $r12 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        virtualinvoke $r12.<java.lang.Object: void wait(long)>(l14);

     label14:
        $z3 = r45.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: boolean interruptedByConnectionPool>;

        if $z3 != 0 goto label15;

        $r13 = $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        virtualinvoke $r13.<java.util.LinkedList: boolean remove(java.lang.Object)>(r45);

        $r14 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r15 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList access$500(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r14);

        virtualinvoke $r15.<java.util.LinkedList: boolean remove(java.lang.Object)>(r45);

     label15:
        if z0 == 0 goto label23;

        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l8 = $l7 - l15;

        l14 = l14 - $l8;

        goto label23;

     label16:
        $r37 := @caughtexception;

        $z5 = r45.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: boolean interruptedByConnectionPool>;

        if $z5 != 0 goto label17;

        $r41 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r41.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Interrupted while waiting for connection", $r37);

        $r51 = new java.lang.IllegalThreadStateException;

        specialinvoke $r51.<java.lang.IllegalThreadStateException: void <init>(java.lang.String)>("Interrupted while waiting in MultiThreadedHttpConnectionManager");

        throw $r51;

     label17:
        $z6 = r45.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: boolean interruptedByConnectionPool>;

        if $z6 != 0 goto label18;

        $r38 = $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        virtualinvoke $r38.<java.util.LinkedList: boolean remove(java.lang.Object)>(r45);

        $r39 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r40 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList access$500(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r39);

        virtualinvoke $r40.<java.util.LinkedList: boolean remove(java.lang.Object)>(r45);

     label18:
        if z0 == 0 goto label23;

        $l12 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l13 = $l12 - l15;

        l14 = l14 - $l13;

        goto label23;

     label19:
        $r33 := @caughtexception;

     label20:
        $z4 = r45.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: boolean interruptedByConnectionPool>;

        if $z4 != 0 goto label21;

        $r34 = $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        virtualinvoke $r34.<java.util.LinkedList: boolean remove(java.lang.Object)>(r45);

        $r35 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r36 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList access$500(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r35);

        virtualinvoke $r36.<java.util.LinkedList: boolean remove(java.lang.Object)>(r45);

     label21:
        if z0 == 0 goto label22;

        staticinvoke <java.lang.System: long currentTimeMillis()>();

     label22:
        throw $r33;

     label23:
        goto label04;

     label24:
        exitmonitor $r3;

     label25:
        goto label28;

     label26:
        $r32 := @caughtexception;

        exitmonitor $r3;

     label27:
        throw $r32;

     label28:
        return r44;

        catch java.lang.InterruptedException from label08 to label14 with label16;
        catch java.lang.Throwable from label08 to label14 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Throwable from label01 to label25 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
    }

    public int getConnectionsInPool(org.apache.commons.httpclient.HostConfiguration)
    {
        java.lang.Throwable $r5;
        org.apache.commons.httpclient.HostConfiguration r2;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r1, $r3;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r4;
        int $i0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        r2 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>(r2, 0);

        if $r4 == null goto label2;

        $i0 = $r4.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        goto label3;

     label2:
        $i0 = 0;

     label3:
        exitmonitor $r1;

     label4:
        return $i0;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int getConnectionsInPool()
    {
        java.lang.Throwable $r3;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r1, $r2;
        int $i0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $i0 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int access$200(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r2);

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getConnectionsInUse(org.apache.commons.httpclient.HostConfiguration)
    {
        int $i0;
        org.apache.commons.httpclient.HostConfiguration r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getConnectionsInPool(org.apache.commons.httpclient.HostConfiguration)>(r1);

        return $i0;
    }

    public int getConnectionsInUse()
    {
        int $i0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getConnectionsInPool()>();

        return $i0;
    }

    public void deleteClosedConnections()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        virtualinvoke $r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void deleteClosedConnections()>();

        return;
    }

    public void closeIdleConnections(long)
    {
        long l0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        virtualinvoke $r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void closeIdleConnections(long)>(l0);

        virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void deleteClosedConnections()>();

        return;
    }

    public void releaseConnection(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter $r3;
        org.apache.commons.httpclient.HttpConnection r4;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r2;
        org.apache.commons.logging.Log $r0;
        boolean $z0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r1;

        r1 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        r4 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnectionManager.releaseConnection(HttpConnection)");

        $z0 = r4 instanceof org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter) r4;

        r4 = virtualinvoke $r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection getWrappedConnection()>();

     label1:
        staticinvoke <org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>(r4);

        $r2 = r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        virtualinvoke $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void freeConnection(org.apache.commons.httpclient.HttpConnection)>(r4);

        return;
    }

    private org.apache.commons.httpclient.HostConfiguration configurationForConnection(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.HttpConnection r1;
        java.net.InetAddress $r4, $r7;
        org.apache.commons.httpclient.HostConfiguration $r0;
        int $i0, $i1;
        org.apache.commons.httpclient.protocol.Protocol $r3;
        java.lang.String $r2, $r5, $r6;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r8;

        r8 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r0 = new org.apache.commons.httpclient.HostConfiguration;

        specialinvoke $r0.<org.apache.commons.httpclient.HostConfiguration: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        $i0 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r3 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        virtualinvoke $r0.<org.apache.commons.httpclient.HostConfiguration: void setHost(java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>($r2, $i0, $r3);

        $r4 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress getLocalAddress()>();

        if $r4 == null goto label1;

        $r7 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress getLocalAddress()>();

        virtualinvoke $r0.<org.apache.commons.httpclient.HostConfiguration: void setLocalAddress(java.net.InetAddress)>($r7);

     label1:
        $r5 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>();

        if $r5 == null goto label2;

        $r6 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>();

        $i1 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: int getProxyPort()>();

        virtualinvoke $r0.<org.apache.commons.httpclient.HostConfiguration: void setProxy(java.lang.String,int)>($r6, $i1);

     label2:
        return $r0;
    }

    public org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()
    {
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        return $r1;
    }

    public void setParams(org.apache.commons.httpclient.params.HttpConnectionManagerParams)
    {
        java.lang.IllegalArgumentException $r2;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams r0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r1;

        r1 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        r0 := @parameter0: org.apache.commons.httpclient.params.HttpConnectionManagerParams;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null");

        throw $r2;

     label1:
        r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params> = r0;

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void access$600(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;

        r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void shutdownCheckedOutConnections(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>(r0);

        return;
    }

    static org.apache.commons.logging.Log access$700()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        return $r0;
    }

    static org.apache.commons.httpclient.params.HttpConnectionManagerParams access$800(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager)
    {
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;

        r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        return $r1;
    }

    static void access$900(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference, org.apache.commons.httpclient.HostConfiguration, org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)
    {
        org.apache.commons.httpclient.HostConfiguration r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference r0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r2;

        r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference;

        r1 := @parameter1: org.apache.commons.httpclient.HostConfiguration;

        r2 := @parameter2: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void storeReferenceToConnection(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference,org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>(r0, r1, r2);

        return;
    }

    static org.apache.commons.httpclient.HostConfiguration access$1100(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.HostConfiguration $r2;
        org.apache.commons.httpclient.HttpConnection r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;

        r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        r1 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r2 = specialinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HostConfiguration configurationForConnection(org.apache.commons.httpclient.HttpConnection)>(r1);

        return $r2;
    }

    static boolean access$1200(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $z0 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: boolean shutdown>;

        return $z0;
    }

    static void access$1300(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference r0;

        r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference;

        staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void removeReferenceToConnection(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference)>(r0);

        return;
    }

    static java.util.Map access$1400()
    {
        java.util.Map $r0;

        $r0 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        return $r0;
    }

    static java.lang.ref.ReferenceQueue access$1500()
    {
        java.lang.ref.ReferenceQueue $r0;

        $r0 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.lang.ref.ReferenceQueue REFERENCE_QUEUE>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r5;
        org.apache.commons.logging.Log $r1;
        java.util.HashMap $r2;
        java.lang.ref.ReferenceQueue $r3;
        java.util.WeakHashMap $r4;

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int DEFAULT_MAX_TOTAL_CONNECTIONS> = 20;

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int DEFAULT_MAX_HOST_CONNECTIONS> = 2;

        $r0 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.lang.Class class$org$apache$commons$httpclient$MultiThreadedHttpConnectionManager>;

        if $r0 != null goto label1;

        $r5 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.MultiThreadedHttpConnectionManager");

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.lang.Class class$org$apache$commons$httpclient$MultiThreadedHttpConnectionManager> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.lang.Class class$org$apache$commons$httpclient$MultiThreadedHttpConnectionManager>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r5);

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE> = $r2;

        $r3 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r3.<java.lang.ref.ReferenceQueue: void <init>()>();

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.lang.ref.ReferenceQueue REFERENCE_QUEUE> = $r3;

        $r4 = new java.util.WeakHashMap;

        specialinvoke $r4.<java.util.WeakHashMap: void <init>()>();

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.WeakHashMap ALL_CONNECTION_MANAGERS> = $r4;

        return;
    }
}
