public class org.apache.commons.compress.archivers.zip.X7875_NewUnix extends java.lang.Object implements org.apache.commons.compress.archivers.zip.ZipExtraField, java.lang.Cloneable, java.io.Serializable
{
    private static final org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID;
    private static final java.math.BigInteger ONE_THOUSAND;
    private static final long serialVersionUID;
    private int version;
    private java.math.BigInteger uid;
    private java.math.BigInteger gid;

    public void <init>()
    {
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: int version> = 1;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: void reset()>();

        return;
    }

    public org.apache.commons.compress.archivers.zip.ZipShort getHeaderId()
    {
        org.apache.commons.compress.archivers.zip.ZipShort $r0;
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r1;

        r1 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        $r0 = <org.apache.commons.compress.archivers.zip.X7875_NewUnix: org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID>;

        return $r0;
    }

    public long getUID()
    {
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r0;
        java.math.BigInteger $r1;
        long $l0;

        r0 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger uid>;

        $l0 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: long bigToLong(java.math.BigInteger)>($r1);

        return $l0;
    }

    public long getGID()
    {
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r0;
        java.math.BigInteger $r1;
        long $l0;

        r0 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger gid>;

        $l0 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: long bigToLong(java.math.BigInteger)>($r1);

        return $l0;
    }

    public void setUID(long)
    {
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r0;
        long l0;
        java.math.BigInteger $r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        l0 := @parameter0: long;

        $r1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: java.math.BigInteger longToBig(long)>(l0);

        r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger uid> = $r1;

        return;
    }

    public void setGID(long)
    {
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r0;
        long l0;
        java.math.BigInteger $r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        l0 := @parameter0: long;

        $r1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: java.math.BigInteger longToBig(long)>(l0);

        r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger gid> = $r1;

        return;
    }

    public org.apache.commons.compress.archivers.zip.ZipShort getLocalFileDataLength()
    {
        byte[] $r2, $r3, $r5, $r6;
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r0;
        org.apache.commons.compress.archivers.zip.ZipShort $r7;
        int i0, i1, $i2, $i3;
        java.math.BigInteger $r1, $r4;

        r0 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger uid>;

        $r2 = virtualinvoke $r1.<java.math.BigInteger: byte[] toByteArray()>();

        $r3 = staticinvoke <org.apache.commons.compress.archivers.zip.X7875_NewUnix: byte[] trimLeadingZeroesForceMinLength(byte[])>($r2);

        i0 = lengthof $r3;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger gid>;

        $r5 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.X7875_NewUnix: byte[] trimLeadingZeroesForceMinLength(byte[])>($r5);

        i1 = lengthof $r6;

        $r7 = new org.apache.commons.compress.archivers.zip.ZipShort;

        $i2 = 3 + i0;

        $i3 = $i2 + i1;

        specialinvoke $r7.<org.apache.commons.compress.archivers.zip.ZipShort: void <init>(int)>($i3);

        return $r7;
    }

    public org.apache.commons.compress.archivers.zip.ZipShort getCentralDirectoryLength()
    {
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r0;
        org.apache.commons.compress.archivers.zip.ZipShort $r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: org.apache.commons.compress.archivers.zip.ZipShort getLocalFileDataLength()>();

        return $r1;
    }

    public byte[] getLocalFileDataData()
    {
        byte[] $r2, $r4, $r5, $r6, r7;
        byte $b5, $b7, $b11;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i9, $i10, $i12, i13, i14;
        java.math.BigInteger $r1, $r3;
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger uid>;

        $r2 = virtualinvoke $r1.<java.math.BigInteger: byte[] toByteArray()>();

        $r3 = r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger gid>;

        $r4 = virtualinvoke $r3.<java.math.BigInteger: byte[] toByteArray()>();

        $r5 = staticinvoke <org.apache.commons.compress.archivers.zip.X7875_NewUnix: byte[] trimLeadingZeroesForceMinLength(byte[])>($r2);

        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.X7875_NewUnix: byte[] trimLeadingZeroesForceMinLength(byte[])>($r4);

        $i0 = lengthof $r5;

        $i2 = 3 + $i0;

        $i1 = lengthof $r6;

        $i3 = $i2 + $i1;

        r7 = newarray (byte)[$i3];

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: byte[] reverse(byte[])>($r5);

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: byte[] reverse(byte[])>($r6);

        $i4 = r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: int version>;

        $b5 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: byte unsignedIntToSignedByte(int)>($i4);

        r7[0] = $b5;

        $i6 = lengthof $r5;

        $b7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: byte unsignedIntToSignedByte(int)>($i6);

        r7[1] = $b7;

        $i8 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r7, 2, $i8);

        $i9 = lengthof $r5;

        i13 = 2 + $i9;

        i14 = i13 + 1;

        $i10 = lengthof $r6;

        $b11 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: byte unsignedIntToSignedByte(int)>($i10);

        r7[i13] = $b11;

        $i12 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r7, i14, $i12);

        return r7;
    }

    public byte[] getCentralDirectoryData()
    {
        byte[] $r1;
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: byte[] getLocalFileDataData()>();

        return $r1;
    }

    public void parseFromLocalFileData(byte[], int, int) throws java.util.zip.ZipException
    {
        byte[] r1, r2, $r4, r5, $r7;
        byte $b0, $b2, $b4;
        int $i1, $i3, $i5, i6, i7, i8, i9, i10, i11;
        java.math.BigInteger $r3, $r6;
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        r1 := @parameter0: byte[];

        i7 := @parameter1: int;

        i6 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: void reset()>();

        i8 = i7 + 1;

        $b0 = r1[i7];

        $i1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: int signedByteToUnsignedInt(byte)>($b0);

        r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: int version> = $i1;

        i9 = i8 + 1;

        $b2 = r1[i8];

        $i3 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: int signedByteToUnsignedInt(byte)>($b2);

        r2 = newarray (byte)[$i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i9, r2, 0, $i3);

        i10 = i9 + $i3;

        $r3 = new java.math.BigInteger;

        $r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: byte[] reverse(byte[])>(r2);

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,byte[])>(1, $r4);

        r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger uid> = $r3;

        i11 = i10 + 1;

        $b4 = r1[i10];

        $i5 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: int signedByteToUnsignedInt(byte)>($b4);

        r5 = newarray (byte)[$i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i11, r5, 0, $i5);

        $r6 = new java.math.BigInteger;

        $r7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: byte[] reverse(byte[])>(r5);

        specialinvoke $r6.<java.math.BigInteger: void <init>(int,byte[])>(1, $r7);

        r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger gid> = $r6;

        return;
    }

    public void parseFromCentralDirectoryData(byte[], int, int) throws java.util.zip.ZipException
    {
        byte[] r1;
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r0;
        int i0, i1;

        r0 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: void reset()>();

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: void parseFromLocalFileData(byte[],int,int)>(r1, i0, i1);

        return;
    }

    private void reset()
    {
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r0;
        java.math.BigInteger $r1, $r2;

        r0 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        $r1 = <org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger ONE_THOUSAND>;

        r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger uid> = $r1;

        $r2 = <org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger ONE_THOUSAND>;

        r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger gid> = $r2;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7;
        java.math.BigInteger $r3, $r6;
        java.lang.String $r8;

        r2 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x7875 Zip Extra Field: UID=");

        $r3 = r2.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger uid>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" GID=");

        $r6 = r2.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger gid>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r1, r2;
        int $i0, $i1;
        java.lang.Object r0;
        java.math.BigInteger $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        if $z0 == 0 goto label3;

        r1 = (org.apache.commons.compress.archivers.zip.X7875_NewUnix) r0;

        $i1 = r2.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: int version>;

        $i0 = r1.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: int version>;

        if $i1 != $i0 goto label1;

        $r4 = r2.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger uid>;

        $r3 = r1.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger uid>;

        $z1 = virtualinvoke $r4.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $r6 = r2.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger gid>;

        $r5 = r1.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger gid>;

        $z2 = virtualinvoke $r6.<java.math.BigInteger: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.compress.archivers.zip.X7875_NewUnix r0;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        java.math.BigInteger $r1, $r2;

        r0 := @this: org.apache.commons.compress.archivers.zip.X7875_NewUnix;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: int version>;

        i4 = -1234567 * $i0;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger uid>;

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        $i2 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($i1, 16);

        i5 = i4 ^ $i2;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger gid>;

        $i3 = virtualinvoke $r2.<java.math.BigInteger: int hashCode()>();

        i6 = i5 ^ $i3;

        return i6;
    }

    static byte[] trimLeadingZeroesForceMinLength(byte[])
    {
        byte[] r0, $r1;
        byte b8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, i10, i11, i12;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        return r0;

     label1:
        i10 = 0;

        i11 = lengthof r0;

        i12 = 0;

     label2:
        if i12 >= i11 goto label3;

        b8 = r0[i12];

        if b8 != 0 goto label3;

        i10 = i10 + 1;

        i12 = i12 + 1;

        goto label2;

     label3:
        $i0 = lengthof r0;

        $i1 = $i0 - i10;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i1);

        $r1 = newarray (byte)[$i2];

        $i5 = lengthof $r1;

        $i3 = lengthof r0;

        $i4 = $i3 - i10;

        $i9 = $i5 - $i4;

        $i6 = lengthof $r1;

        $i7 = $i6 - $i9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i10, $r1, $i9, $i7);

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.commons.compress.archivers.zip.ZipShort $r0;
        java.math.BigInteger $r1;

        <org.apache.commons.compress.archivers.zip.X7875_NewUnix: long serialVersionUID> = 1L;

        $r0 = new org.apache.commons.compress.archivers.zip.ZipShort;

        specialinvoke $r0.<org.apache.commons.compress.archivers.zip.ZipShort: void <init>(int)>(30837);

        <org.apache.commons.compress.archivers.zip.X7875_NewUnix: org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1000L);

        <org.apache.commons.compress.archivers.zip.X7875_NewUnix: java.math.BigInteger ONE_THOUSAND> = $r1;

        return;
    }
}
