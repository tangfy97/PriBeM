public class org.apache.cxf.databinding.source.SourceDataBinding extends org.apache.cxf.databinding.AbstractDataBinding
{
    public static final java.lang.String PREFERRED_FORMAT;
    final java.lang.Class preferred;

    public void <init>()
    {
        org.apache.cxf.databinding.source.SourceDataBinding r0;

        r0 := @this: org.apache.cxf.databinding.source.SourceDataBinding;

        specialinvoke r0.<org.apache.cxf.databinding.AbstractDataBinding: void <init>()>();

        r0.<org.apache.cxf.databinding.source.SourceDataBinding: java.lang.Class preferred> = null;

        return;
    }

    public void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        org.apache.cxf.databinding.source.SourceDataBinding r0;

        r0 := @this: org.apache.cxf.databinding.source.SourceDataBinding;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.apache.cxf.databinding.AbstractDataBinding: void <init>()>();

        r0.<org.apache.cxf.databinding.source.SourceDataBinding: java.lang.Class preferred> = r1;

        return;
    }

    public void initialize(org.apache.cxf.service.Service)
    {
        java.util.Iterator $r2;
        org.apache.cxf.databinding.source.SourceDataBinding r8;
        org.apache.cxf.service.model.ServiceInfo r4;
        org.apache.cxf.common.xmlschema.SchemaCollection $r5;
        org.apache.cxf.databinding.source.SourceDataBinding$1 $r7;
        org.apache.ws.commons.schema.XmlSchema[] $r6;
        java.util.List $r1;
        org.apache.cxf.service.Service r0;
        int $i0;
        java.lang.Object $r3;
        boolean $z0;

        r8 := @this: org.apache.cxf.databinding.source.SourceDataBinding;

        r0 := @parameter0: org.apache.cxf.service.Service;

        $r1 = interfaceinvoke r0.<org.apache.cxf.service.Service: java.util.List getServiceInfos()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.cxf.service.model.ServiceInfo) $r3;

        $r5 = virtualinvoke r4.<org.apache.cxf.service.model.ServiceInfo: org.apache.cxf.common.xmlschema.SchemaCollection getXmlSchemaCollection()>();

        $r6 = virtualinvoke $r5.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchema[] getXmlSchemas()>();

        $i0 = lengthof $r6;

        if $i0 <= 1 goto label2;

        goto label1;

     label2:
        $r7 = new org.apache.cxf.databinding.source.SourceDataBinding$1;

        specialinvoke $r7.<org.apache.cxf.databinding.source.SourceDataBinding$1: void <init>(org.apache.cxf.databinding.source.SourceDataBinding,org.apache.cxf.service.model.ServiceInfo)>(r8, r4);

        virtualinvoke $r7.<org.apache.cxf.databinding.source.SourceDataBinding$1: void walk()>();

        goto label1;

     label3:
        return;
    }

    public org.apache.cxf.databinding.DataReader createReader(java.lang.Class)
    {
        java.lang.UnsupportedOperationException $r1;
        org.apache.cxf.databinding.source.XMLStreamDataReader $r9;
        org.apache.cxf.databinding.source.SourceDataBinding r10;
        org.apache.cxf.databinding.source.NodeDataReader $r8;
        java.lang.Class r0, $r11;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String $r4, $r7;

        r10 := @this: org.apache.cxf.databinding.source.SourceDataBinding;

        r0 := @parameter0: java.lang.Class;

        if r0 != class "Ljavax/xml/stream/XMLStreamReader;" goto label1;

        $r9 = new org.apache.cxf.databinding.source.XMLStreamDataReader;

        $r11 = r10.<org.apache.cxf.databinding.source.SourceDataBinding: java.lang.Class preferred>;

        specialinvoke $r9.<org.apache.cxf.databinding.source.XMLStreamDataReader: void <init>(java.lang.Class)>($r11);

        return $r9;

     label1:
        if r0 != class "Lorg/w3c/dom/Node;" goto label2;

        $r8 = new org.apache.cxf.databinding.source.NodeDataReader;

        specialinvoke $r8.<org.apache.cxf.databinding.source.NodeDataReader: void <init>()>();

        return $r8;

     label2:
        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The type ");

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r1;
    }

    public java.lang.Class[] getSupportedReaderFormats()
    {
        java.lang.Class[] $r0;
        org.apache.cxf.databinding.source.SourceDataBinding r1;

        r1 := @this: org.apache.cxf.databinding.source.SourceDataBinding;

        $r0 = newarray (java.lang.Class)[2];

        $r0[0] = class "Ljavax/xml/stream/XMLStreamReader;";

        $r0[1] = class "Lorg/w3c/dom/Node;";

        return $r0;
    }

    public org.apache.cxf.databinding.DataWriter createWriter(java.lang.Class)
    {
        java.lang.UnsupportedOperationException $r1;
        org.apache.cxf.databinding.source.SourceDataBinding r10;
        org.apache.cxf.databinding.source.NodeDataWriter $r8;
        java.lang.Class r0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String $r4, $r7;
        org.apache.cxf.databinding.source.XMLStreamDataWriter $r9;

        r10 := @this: org.apache.cxf.databinding.source.SourceDataBinding;

        r0 := @parameter0: java.lang.Class;

        if r0 != class "Ljavax/xml/stream/XMLStreamWriter;" goto label1;

        $r9 = new org.apache.cxf.databinding.source.XMLStreamDataWriter;

        specialinvoke $r9.<org.apache.cxf.databinding.source.XMLStreamDataWriter: void <init>()>();

        return $r9;

     label1:
        if r0 != class "Lorg/w3c/dom/Node;" goto label2;

        $r8 = new org.apache.cxf.databinding.source.NodeDataWriter;

        specialinvoke $r8.<org.apache.cxf.databinding.source.NodeDataWriter: void <init>()>();

        return $r8;

     label2:
        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The type ");

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r1;
    }

    public java.lang.Class[] getSupportedWriterFormats()
    {
        java.lang.Class[] $r0;
        org.apache.cxf.databinding.source.SourceDataBinding r1;

        r1 := @this: org.apache.cxf.databinding.source.SourceDataBinding;

        $r0 = newarray (java.lang.Class)[2];

        $r0[0] = class "Ljavax/xml/stream/XMLStreamWriter;";

        $r0[1] = class "Lorg/w3c/dom/Node;";

        return $r0;
    }

    public static void <clinit>()
    {
        <org.apache.cxf.databinding.source.SourceDataBinding: java.lang.String PREFERRED_FORMAT> = "source-preferred-format";

        return;
    }
}
