public class org.apache.xmlbeans.impl.common.Mutex extends java.lang.Object
{
    private java.lang.Thread owner;
    private int lock_count;

    public void <init>()
    {
        org.apache.xmlbeans.impl.common.Mutex r0;

        r0 := @this: org.apache.xmlbeans.impl.common.Mutex;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xmlbeans.impl.common.Mutex: java.lang.Thread owner> = null;

        r0.<org.apache.xmlbeans.impl.common.Mutex: int lock_count> = 0;

        return;
    }

    public synchronized void acquire() throws java.lang.InterruptedException
    {
        org.apache.xmlbeans.impl.common.Mutex r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.common.Mutex;

     label1:
        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.common.Mutex: boolean tryToAcquire()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<java.lang.Object: void wait()>();

        goto label1;

     label2:
        return;
    }

    public synchronized boolean tryToAcquire()
    {
        org.apache.xmlbeans.impl.common.Mutex r0;
        java.lang.Thread $r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.xmlbeans.impl.common.Mutex;

        $r1 = r0.<org.apache.xmlbeans.impl.common.Mutex: java.lang.Thread owner>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<org.apache.xmlbeans.impl.common.Mutex: java.lang.Thread owner> = $r4;

        r0.<org.apache.xmlbeans.impl.common.Mutex: int lock_count> = 1;

        return 1;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.common.Mutex: java.lang.Thread owner>;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r2 != $r3 goto label2;

        $i0 = r0.<org.apache.xmlbeans.impl.common.Mutex: int lock_count>;

        $i1 = $i0 + 1;

        r0.<org.apache.xmlbeans.impl.common.Mutex: int lock_count> = $i1;

        return 1;

     label2:
        return 0;
    }

    public synchronized void release()
    {
        java.lang.IllegalStateException $r3;
        org.apache.xmlbeans.impl.common.Mutex r0;
        java.lang.Thread $r1, $r2;
        int $i0, $i1;

        r0 := @this: org.apache.xmlbeans.impl.common.Mutex;

        $r1 = r0.<org.apache.xmlbeans.impl.common.Mutex: java.lang.Thread owner>;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r1 == $r2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Thread calling release() doesn\'t own mutex");

        throw $r3;

     label1:
        $i0 = r0.<org.apache.xmlbeans.impl.common.Mutex: int lock_count>;

        $i1 = $i0 - 1;

        r0.<org.apache.xmlbeans.impl.common.Mutex: int lock_count> = $i1;

        if $i1 > 0 goto label2;

        r0.<org.apache.xmlbeans.impl.common.Mutex: java.lang.Thread owner> = null;

        virtualinvoke r0.<java.lang.Object: void notify()>();

     label2:
        return;
    }
}
