final class kodkod.engine.TrivialProof$NodePruner extends kodkod.ast.visitor.AbstractVoidVisitor
{
    private final java.util.Set visited;
    private final java.util.Set relevant;
    private final java.util.Map constNodes;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator;

    void <init>(kodkod.engine.fol2sat.TranslationLog)
    {
        kodkod.util.collections.IdentityHashSet $r1, $r2;
        kodkod.engine.fol2sat.TranslationLog r5;
        java.util.LinkedHashMap $r4;
        java.util.Map $r9, $r12, $r15;
        int $i0, $i1;
        java.lang.Boolean $r11, $r14;
        kodkod.engine.fol2sat.TranslationRecord r8;
        boolean $z0;
        java.util.Iterator $r6;
        kodkod.engine.TrivialProof$NodePruner$1 $r3;
        kodkod.ast.Formula $r10, $r13, $r16;
        kodkod.engine.TrivialProof$NodePruner r0;
        java.lang.Object $r7;

        r0 := @this: kodkod.engine.TrivialProof$NodePruner;

        r5 := @parameter0: kodkod.engine.fol2sat.TranslationLog;

        specialinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: void <init>()>();

        $r1 = new kodkod.util.collections.IdentityHashSet;

        specialinvoke $r1.<kodkod.util.collections.IdentityHashSet: void <init>()>();

        r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Set visited> = $r1;

        $r2 = new kodkod.util.collections.IdentityHashSet;

        specialinvoke $r2.<kodkod.util.collections.IdentityHashSet: void <init>()>();

        r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Set relevant> = $r2;

        $r3 = new kodkod.engine.TrivialProof$NodePruner$1;

        specialinvoke $r3.<kodkod.engine.TrivialProof$NodePruner$1: void <init>(kodkod.engine.TrivialProof$NodePruner)>(r0);

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Map constNodes> = $r4;

        $r6 = virtualinvoke r5.<kodkod.engine.fol2sat.TranslationLog: java.util.Iterator replay(kodkod.engine.fol2sat.RecordFilter)>($r3);

        goto label4;

     label1:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kodkod.engine.fol2sat.TranslationRecord) $r7;

        $i0 = virtualinvoke r8.<kodkod.engine.fol2sat.TranslationRecord: int literal()>();

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        if $i1 == 2147483647 goto label2;

        $r15 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Map constNodes>;

        $r16 = virtualinvoke r8.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Formula translated()>();

        interfaceinvoke $r15.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r16);

        goto label4;

     label2:
        if $i0 != 2147483647 goto label3;

        $r12 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Map constNodes>;

        $r13 = virtualinvoke r8.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Formula translated()>();

        $r14 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r14);

        goto label4;

     label3:
        $r9 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Map constNodes>;

        $r10 = virtualinvoke r8.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Formula translated()>();

        $r11 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

     label4:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    static java.util.Set relevantNodes(kodkod.engine.fol2sat.TranslationLog, java.util.Set)
    {
        java.util.Iterator $r3;
        kodkod.ast.Formula r5;
        kodkod.engine.fol2sat.TranslationLog r1;
        java.util.Set r2, $r6;
        kodkod.engine.TrivialProof$NodePruner $r0;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r1 := @parameter0: kodkod.engine.fol2sat.TranslationLog;

        r2 := @parameter1: java.util.Set;

        $r0 = new kodkod.engine.TrivialProof$NodePruner;

        specialinvoke $r0.<kodkod.engine.TrivialProof$NodePruner: void <init>(kodkod.engine.fol2sat.TranslationLog)>(r1);

        $r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kodkod.ast.Formula) $r4;

        $z0 = virtualinvoke $r0.<kodkod.engine.TrivialProof$NodePruner: boolean isTrue(kodkod.ast.Node)>(r5);

        if $z0 != 0 goto label2;

        virtualinvoke r5.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>($r0);

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r6 = $r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Set relevant>;

        return $r6;
    }

    protected boolean visited(kodkod.ast.Node)
    {
        kodkod.engine.TrivialProof$NodePruner r0;
        java.util.Set $r2;
        kodkod.ast.Node r1;
        boolean $z0, $z1;

        r0 := @this: kodkod.engine.TrivialProof$NodePruner;

        r1 := @parameter0: kodkod.ast.Node;

        $r2 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Set visited>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        return $z1;
    }

    final boolean isTrue(kodkod.ast.Node)
    {
        kodkod.engine.TrivialProof$NodePruner r0;
        java.util.Map $r2;
        java.lang.Boolean $r4;
        java.lang.Object $r3;
        kodkod.ast.Node r1;

        r0 := @this: kodkod.engine.TrivialProof$NodePruner;

        r1 := @parameter0: kodkod.ast.Node;

        $r2 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Map constNodes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if $r3 != $r4 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void visit(kodkod.ast.Decl)
    {
        kodkod.engine.TrivialProof$NodePruner r0;
        kodkod.ast.Decl r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: kodkod.engine.TrivialProof$NodePruner;

        r1 := @parameter0: kodkod.ast.Decl;

        $z0 = virtualinvoke r0.<kodkod.engine.TrivialProof$NodePruner: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Set relevant>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.engine.TrivialProof$NodePruner r0;
        kodkod.ast.QuantifiedFormula r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: kodkod.engine.TrivialProof$NodePruner;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $z0 = virtualinvoke r0.<kodkod.engine.TrivialProof$NodePruner: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Set relevant>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void visit(kodkod.ast.ComparisonFormula)
    {
        kodkod.engine.TrivialProof$NodePruner r0;
        kodkod.ast.ComparisonFormula r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: kodkod.engine.TrivialProof$NodePruner;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        $z0 = virtualinvoke r0.<kodkod.engine.TrivialProof$NodePruner: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Set relevant>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.MultiplicityFormula r1;
        kodkod.engine.TrivialProof$NodePruner r0;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: kodkod.engine.TrivialProof$NodePruner;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        $z0 = virtualinvoke r0.<kodkod.engine.TrivialProof$NodePruner: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Set relevant>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void visit(kodkod.ast.RelationPredicate)
    {
        kodkod.engine.TrivialProof$NodePruner r0;
        java.util.Set $r2;
        kodkod.ast.RelationPredicate r1;
        boolean $z0;

        r0 := @this: kodkod.engine.TrivialProof$NodePruner;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $z0 = virtualinvoke r0.<kodkod.engine.TrivialProof$NodePruner: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Set relevant>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void visit(kodkod.ast.IntComparisonFormula)
    {
        kodkod.engine.TrivialProof$NodePruner r0;
        kodkod.ast.IntComparisonFormula r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: kodkod.engine.TrivialProof$NodePruner;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        $z0 = virtualinvoke r0.<kodkod.engine.TrivialProof$NodePruner: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Set relevant>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void visit(kodkod.ast.ConstantFormula)
    {
        java.util.Set $r2;
        kodkod.engine.TrivialProof$NodePruner r0;
        kodkod.ast.ConstantFormula r1;

        r0 := @this: kodkod.engine.TrivialProof$NodePruner;

        r1 := @parameter0: kodkod.ast.ConstantFormula;

        $r2 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Set relevant>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void visit(kodkod.ast.NotFormula)
    {
        kodkod.engine.TrivialProof$NodePruner r0;
        kodkod.ast.NotFormula r1;
        kodkod.ast.Formula $r3;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: kodkod.engine.TrivialProof$NodePruner;

        r1 := @parameter0: kodkod.ast.NotFormula;

        $z0 = virtualinvoke r0.<kodkod.engine.TrivialProof$NodePruner: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Set relevant>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r3 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        virtualinvoke $r3.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.BinaryFormula)
    {
        int[] $r11;
        java.util.Map $r5, $r8;
        kodkod.ast.operator.FormulaOperator $r12, $r24;
        boolean $z0, $z1, z2, $z3, z4, $z5, $z6, $z7, $z8;
        java.util.Set $r2;
        kodkod.engine.TrivialProof$NodePruner r0;
        java.lang.StringBuilder $r23, $r25;
        kodkod.ast.BinaryFormula r1;
        int $i0, $i1;
        java.lang.Boolean r7, r10, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r27, $r28, $r29;
        java.lang.String $r26;
        kodkod.ast.Formula $r3, $r4;
        java.lang.IllegalArgumentException $r22;
        java.lang.Object $r6, $r9;

        r0 := @this: kodkod.engine.TrivialProof$NodePruner;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $z0 = virtualinvoke r0.<kodkod.engine.TrivialProof$NodePruner: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label01;

        return;

     label01:
        $r2 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Set relevant>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r3 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        $r4 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        $r5 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Map constNodes>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r7 = (java.lang.Boolean) $r6;

        $r8 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Map constNodes>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r10 = (java.lang.Boolean) $r9;

        $r11 = staticinvoke <kodkod.engine.TrivialProof$NodePruner: int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator()>();

        $r12 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $i0 = virtualinvoke $r12.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        $i1 = $r11[$i0];

        tableswitch($i1)
        {
            case 0: goto label02;
            case 1: goto label08;
            case 2: goto label20;
            case 3: goto label14;
            default: goto label21;
        };

     label02:
        $r19 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        if r7 == $r19 goto label04;

        if r7 != null goto label03;

        $r21 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        if r10 != $r21 goto label04;

     label03:
        $z1 = 0;

        goto label05;

     label04:
        $z1 = 1;

     label05:
        z2 = $z1;

        $r27 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if r10 == $r27 goto label06;

        $r20 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        if r7 == $r20 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        z4 = $z3;

        goto label22;

     label08:
        $r16 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if r7 == $r16 goto label10;

        if r7 != null goto label09;

        $r18 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if r10 != $r18 goto label10;

     label09:
        $z5 = 0;

        goto label11;

     label10:
        $z5 = 1;

     label11:
        z2 = $z5;

        $r28 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        if r10 == $r28 goto label12;

        $r17 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if r7 == $r17 goto label12;

        $z6 = 1;

        goto label13;

     label12:
        $z6 = 0;

     label13:
        z4 = $z6;

        goto label22;

     label14:
        $r13 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        if r7 == $r13 goto label16;

        if r7 != null goto label15;

        $r15 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if r10 != $r15 goto label16;

     label15:
        $z7 = 0;

        goto label17;

     label16:
        $z7 = 1;

     label17:
        z2 = $z7;

        $r29 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        if r10 == $r29 goto label18;

        $r14 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        if r7 == $r14 goto label18;

        $z8 = 1;

        goto label19;

     label18:
        $z8 = 0;

     label19:
        z4 = $z8;

        goto label22;

     label20:
        z4 = 1;

        z2 = 1;

        goto label22;

     label21:
        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown operator: ");

        $r24 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r22;

     label22:
        if z2 == 0 goto label23;

        virtualinvoke $r3.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

     label23:
        if z4 == 0 goto label24;

        virtualinvoke $r4.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

     label24:
        return;
    }

    public void visit(kodkod.ast.NaryFormula)
    {
        int[] $r6;
        java.util.Map $r3, $r13, $r17;
        kodkod.ast.operator.FormulaOperator $r7, $r21;
        kodkod.ast.NaryFormula r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r2;
        kodkod.engine.TrivialProof$NodePruner r0;
        java.lang.StringBuilder $r20, $r22;
        int $i0, $i1;
        java.lang.Boolean r5, $r8, r24;
        java.lang.String $r23;
        java.util.Iterator $r9, $r11, $r15;
        kodkod.ast.Formula r25, r26, r27;
        java.lang.IllegalArgumentException $r19;
        java.lang.Object $r4, $r10, $r12, $r14, $r16, $r18;

        r0 := @this: kodkod.engine.TrivialProof$NodePruner;

        r1 := @parameter0: kodkod.ast.NaryFormula;

        $z0 = virtualinvoke r0.<kodkod.engine.TrivialProof$NodePruner: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label01;

        return;

     label01:
        $r2 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Set relevant>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Map constNodes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.lang.Boolean) $r4;

        $r6 = staticinvoke <kodkod.engine.TrivialProof$NodePruner: int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator()>();

        $r7 = virtualinvoke r1.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $i0 = virtualinvoke $r7.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        $i1 = $r6[$i0];

        tableswitch($i1)
        {
            case 0: goto label02;
            case 1: goto label03;
            default: goto label04;
        };

     label02:
        r24 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label05;

     label03:
        r24 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label05;

     label04:
        $r19 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown nary operator: ");

        $r21 = virtualinvoke r1.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label05:
        $z1 = virtualinvoke r24.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label06;

        $z4 = 0;

        goto label07;

     label06:
        $z4 = 1;

     label07:
        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        if r5 == $r8 goto label12;

        $r11 = virtualinvoke r1.<kodkod.ast.NaryFormula: java.util.Iterator iterator()>();

        goto label09;

     label08:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r25 = (kodkod.ast.Formula) $r12;

        $r13 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Map constNodes>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r25);

        if $r14 != r24 goto label09;

        virtualinvoke r25.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;

     label09:
        $z3 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label08;

        $r15 = virtualinvoke r1.<kodkod.ast.NaryFormula: java.util.Iterator iterator()>();

        goto label11;

     label10:
        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r26 = (kodkod.ast.Formula) $r16;

        $r17 = r0.<kodkod.engine.TrivialProof$NodePruner: java.util.Map constNodes>;

        $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r26);

        if $r18 == $r8 goto label11;

        virtualinvoke r26.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

     label11:
        $z5 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label10;

        return;

     label12:
        $r9 = virtualinvoke r1.<kodkod.ast.NaryFormula: java.util.Iterator iterator()>();

        goto label14;

     label13:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r27 = (kodkod.ast.Formula) $r10;

        virtualinvoke r27.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

     label14:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label13;

        return;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator()
    {
        java.lang.NoSuchFieldError $r7, $r8, $r9, $r10;
        int[] $r0, r2;
        kodkod.ast.operator.FormulaOperator $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4;
        kodkod.ast.operator.FormulaOperator[] $r1;

        $r0 = <kodkod.engine.TrivialProof$NodePruner: int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        r2[$i1] = 0;

     label03:
        goto label05;

     label04:
        $r10 := @caughtexception;

     label05:
        $r4 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IFF>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        r2[$i2] = 2;

     label06:
        goto label08;

     label07:
        $r9 := @caughtexception;

     label08:
        $r5 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IMPLIES>;

        $i3 = virtualinvoke $r5.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        r2[$i3] = 3;

     label09:
        goto label11;

     label10:
        $r8 := @caughtexception;

     label11:
        $r6 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator OR>;

        $i4 = virtualinvoke $r6.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        r2[$i4] = 1;

     label12:
        goto label14;

     label13:
        $r7 := @caughtexception;

     label14:
        <kodkod.engine.TrivialProof$NodePruner: int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
    }
}
