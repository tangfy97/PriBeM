public class com.hp.hpl.jena.sparql.engine.main.QueryEngineMain extends com.hp.hpl.jena.sparql.engine.QueryEngineBase
{
    private static com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory;

    public static com.hp.hpl.jena.sparql.engine.QueryEngineFactory getFactory()
    {
        com.hp.hpl.jena.sparql.engine.QueryEngineFactory $r0;

        $r0 = <com.hp.hpl.jena.sparql.engine.main.QueryEngineMain: com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory>;

        return $r0;
    }

    public static void register()
    {
        com.hp.hpl.jena.sparql.engine.QueryEngineFactory $r0;

        $r0 = <com.hp.hpl.jena.sparql.engine.main.QueryEngineMain: com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory>;

        staticinvoke <com.hp.hpl.jena.sparql.engine.QueryEngineRegistry: void addFactory(com.hp.hpl.jena.sparql.engine.QueryEngineFactory)>($r0);

        return;
    }

    public static void unregister()
    {
        com.hp.hpl.jena.sparql.engine.QueryEngineFactory $r0;

        $r0 = <com.hp.hpl.jena.sparql.engine.main.QueryEngineMain: com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory>;

        staticinvoke <com.hp.hpl.jena.sparql.engine.QueryEngineRegistry: void removeFactory(com.hp.hpl.jena.sparql.engine.QueryEngineFactory)>($r0);

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r3;
        com.hp.hpl.jena.sparql.engine.main.QueryEngineMain r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r2;
        com.hp.hpl.jena.sparql.util.Context r4;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.QueryEngineMain;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r3 := @parameter2: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r4 := @parameter3: com.hp.hpl.jena.sparql.util.Context;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.QueryEngineBase: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.util.Context)>(r1, r2, r3, r4);

        return;
    }

    public void <init>(com.hp.hpl.jena.query.Query, com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r3;
        com.hp.hpl.jena.sparql.engine.main.QueryEngineMain r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r2;
        com.hp.hpl.jena.sparql.util.Context r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.QueryEngineMain;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r3 := @parameter2: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r4 := @parameter3: com.hp.hpl.jena.sparql.util.Context;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.QueryEngineBase: void <init>(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.util.Context)>(r1, r2, r3, r4);

        return;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator eval(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.engine.main.QueryEngineMain r11;
        com.hp.hpl.jena.sparql.core.DatasetGraph r2;
        com.hp.hpl.jena.sparql.util.Context r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r5;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorCheck $r9;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r0;
        com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory $r4;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot $r6;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorWrapper r12;
        com.hp.hpl.jena.graph.Graph $r3;
        com.hp.hpl.jena.sparql.algebra.Op r7;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r8;
        com.hp.hpl.jena.sparql.util.Symbol $r10;
        boolean $z0;

        r11 := @this: com.hp.hpl.jena.sparql.engine.main.QueryEngineMain;

        r7 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r5 := @parameter2: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r1 := @parameter3: com.hp.hpl.jena.sparql.util.Context;

        $r0 = new com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.QC: com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory getFactory(com.hp.hpl.jena.sparql.util.Context)>(r1);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.ExecutionContext: void <init>(com.hp.hpl.jena.sparql.util.Context,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory)>(r1, $r3, r2, $r4);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot: com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot create(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r5, $r0);

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.QC: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7, $r6, $r0);

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorCheck: com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorCheck check(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r8, $r0);

        r12 = $r9;

        $r10 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol enableExecutionTimeLogging>;

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.util.Context: boolean isTrue(com.hp.hpl.jena.sparql.util.Symbol)>($r10);

        if $z0 == 0 goto label1;

        r12 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorTiming: com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorTiming time(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r9);

     label1:
        return r12;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op modifyOp(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.engine.main.QueryEngineMain r0;
        com.hp.hpl.jena.sparql.util.Context $r2, $r4;
        com.hp.hpl.jena.sparql.algebra.Op r3, $r5, $r6;
        com.hp.hpl.jena.sparql.util.Symbol $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.QueryEngineMain;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.main.QueryEngineMain: com.hp.hpl.jena.sparql.util.Context context>;

        $r1 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optimization>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.util.Context: boolean isFalse(com.hp.hpl.jena.sparql.util.Symbol)>($r1);

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.QueryEngineMain: com.hp.hpl.jena.sparql.algebra.Op minimalModifyOp(com.hp.hpl.jena.sparql.algebra.Op)>(r3);

        return $r6;

     label1:
        $r4 = r0.<com.hp.hpl.jena.sparql.engine.QueryEngineBase: com.hp.hpl.jena.sparql.util.Context context>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.algebra.Op optimize(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.util.Context)>(r3, $r4);

        return $r5;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op minimalModifyOp(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.engine.main.QueryEngineMain r2;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r1;

        r2 := @this: com.hp.hpl.jena.sparql.engine.main.QueryEngineMain;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformScopeRename: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.engine.main.QueryEngineMain$1 $r0;

        $r0 = new com.hp.hpl.jena.sparql.engine.main.QueryEngineMain$1;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.main.QueryEngineMain$1: void <init>()>();

        <com.hp.hpl.jena.sparql.engine.main.QueryEngineMain: com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory> = $r0;

        return;
    }
}
