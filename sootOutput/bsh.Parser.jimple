public class bsh.Parser extends java.lang.Object implements bsh.ParserTreeConstants, bsh.ParserConstants
{
    protected bsh.JJTParserState jjtree;
    boolean retainComments;
    public bsh.ParserTokenManager token_source;
    bsh.JavaCharStream jj_input_stream;
    public bsh.Token token;
    public bsh.Token jj_nt;
    private int jj_ntk;
    private bsh.Token jj_scanpos;
    private bsh.Token jj_lastpos;
    private int jj_la;
    public boolean lookingAhead;
    private boolean jj_semLA;
    private final bsh.Parser$LookaheadSuccess jj_ls;

    public void setRetainComments(boolean)
    {
        bsh.Parser r0;
        boolean z0;

        r0 := @this: bsh.Parser;

        z0 := @parameter0: boolean;

        r0.<bsh.Parser: boolean retainComments> = z0;

        return;
    }

    void jjtreeOpenNodeScope(bsh.Node)
    {
        bsh.Parser r1;
        bsh.Token $r3;
        bsh.SimpleNode $r2;
        bsh.Node r0;

        r1 := @this: bsh.Parser;

        r0 := @parameter0: bsh.Node;

        $r2 = (bsh.SimpleNode) r0;

        $r3 = virtualinvoke r1.<bsh.Parser: bsh.Token getToken(int)>(1);

        $r2.<bsh.SimpleNode: bsh.Token firstToken> = $r3;

        return;
    }

    void jjtreeCloseNodeScope(bsh.Node)
    {
        bsh.Parser r1;
        bsh.Token $r3;
        bsh.SimpleNode $r2;
        bsh.Node r0;

        r1 := @this: bsh.Parser;

        r0 := @parameter0: bsh.Node;

        $r2 = (bsh.SimpleNode) r0;

        $r3 = virtualinvoke r1.<bsh.Parser: bsh.Token getToken(int)>(0);

        $r2.<bsh.SimpleNode: bsh.Token lastToken> = $r3;

        return;
    }

    void reInitInput(java.io.Reader)
    {
        bsh.Parser r0;
        java.io.Reader r1;

        r0 := @this: bsh.Parser;

        r1 := @parameter0: java.io.Reader;

        virtualinvoke r0.<bsh.Parser: void ReInit(java.io.Reader)>(r1);

        return;
    }

    public bsh.SimpleNode popNode()
    {
        bsh.Parser r0;
        int $i0;
        bsh.SimpleNode $r4;
        bsh.JJTParserState $r1, $r2;
        bsh.Node $r3;

        r0 := @this: bsh.Parser;

        $r1 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        $i0 = virtualinvoke $r1.<bsh.JJTParserState: int nodeArity()>();

        if $i0 <= 0 goto label1;

        $r2 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        $r3 = virtualinvoke $r2.<bsh.JJTParserState: bsh.Node popNode()>();

        $r4 = (bsh.SimpleNode) $r3;

        return $r4;

     label1:
        return null;
    }

    void reInitTokenInput(java.io.Reader)
    {
        bsh.Parser r0;
        bsh.JavaCharStream $r2, $r3, $r4;
        int $i0, $i1;
        java.io.Reader r1;

        r0 := @this: bsh.Parser;

        r1 := @parameter0: java.io.Reader;

        $r3 = r0.<bsh.Parser: bsh.JavaCharStream jj_input_stream>;

        $r2 = r0.<bsh.Parser: bsh.JavaCharStream jj_input_stream>;

        $i0 = virtualinvoke $r2.<bsh.JavaCharStream: int getEndLine()>();

        $r4 = r0.<bsh.Parser: bsh.JavaCharStream jj_input_stream>;

        $i1 = virtualinvoke $r4.<bsh.JavaCharStream: int getEndColumn()>();

        virtualinvoke $r3.<bsh.JavaCharStream: void ReInit(java.io.Reader,int,int)>(r1, $i0, $i1);

        return;
    }

    public static void main(java.lang.String[]) throws java.io.IOException, bsh.ParseException
    {
        java.io.PrintStream $r5;
        java.lang.String[] r0;
        bsh.SimpleNode $r6;
        bsh.Parser $r4;
        int i0, $i1;
        java.lang.String $r1, $r3;
        java.io.FileReader $r2;
        boolean $z0, z1, $z2;

        r0 := @parameter0: java.lang.String[];

        z1 = 0;

        i0 = 0;

        $r1 = r0[0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("-p");

        if $z0 == 0 goto label4;

        i0 = 1;

        z1 = 1;

        goto label4;

     label1:
        $r2 = new java.io.FileReader;

        $r3 = r0[i0];

        specialinvoke $r2.<java.io.FileReader: void <init>(java.lang.String)>($r3);

        $r4 = new bsh.Parser;

        specialinvoke $r4.<bsh.Parser: void <init>(java.io.Reader)>($r2);

        virtualinvoke $r4.<bsh.Parser: void setRetainComments(boolean)>(1);

        goto label3;

     label2:
        if z1 == 0 goto label3;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = virtualinvoke $r4.<bsh.Parser: bsh.SimpleNode popNode()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.Object)>($r6);

     label3:
        $z2 = virtualinvoke $r4.<bsh.Parser: boolean Line()>();

        if $z2 == 0 goto label2;

        i0 = i0 + 1;

     label4:
        $i1 = lengthof r0;

        if i0 < $i1 goto label1;

        return;
    }

    boolean isRegularForStatement()
    {
        bsh.Parser r0;
        bsh.Token $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @this: bsh.Parser;

        $r1 = virtualinvoke r0.<bsh.Parser: bsh.Token getToken(int)>(1);

        $i0 = $r1.<bsh.Token: int kind>;

        if $i0 == 30 goto label1;

        return 0;

     label1:
        i4 = 3;

        $r2 = virtualinvoke r0.<bsh.Parser: bsh.Token getToken(int)>(2);

        $i1 = $r2.<bsh.Token: int kind>;

        if $i1 == 72 goto label2;

        return 0;

     label2:
        $i2 = i4;

        i4 = i4 + 1;

        $r3 = virtualinvoke r0.<bsh.Parser: bsh.Token getToken(int)>($i2);

        $i3 = $r3.<bsh.Token: int kind>;

        lookupswitch($i3)
        {
            case 0: goto label5;
            case 78: goto label4;
            case 89: goto label3;
            default: goto label6;
        };

     label3:
        return 0;

     label4:
        return 1;

     label5:
        return 0;

     label6:
        goto label2;
    }

    bsh.ParseException createParseException(java.lang.String)
    {
        java.lang.String[] $r12;
        bsh.ParseException $r2;
        bsh.Parser r0;
        bsh.Token r1;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r8, $r10;
        int i0, i1, $i2;
        java.lang.String r9, $r11, $r13;

        r0 := @this: bsh.Parser;

        r9 := @parameter0: java.lang.String;

        r1 = r0.<bsh.Parser: bsh.Token token>;

        i0 = r1.<bsh.Token: int beginLine>;

        i1 = r1.<bsh.Token: int beginColumn>;

        $i2 = r1.<bsh.Token: int kind>;

        if $i2 != 0 goto label1;

        $r12 = <bsh.ParserConstants: java.lang.String[] tokenImage>;

        $r13 = $r12[0];

        goto label2;

     label1:
        $r13 = r1.<bsh.Token: java.lang.String image>;

     label2:
        $r2 = new bsh.ParseException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Parse error at line ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", column ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<bsh.ParseException: void <init>(java.lang.String)>($r11);

        return $r2;
    }

    public final boolean Line() throws bsh.ParseException
    {
        bsh.Parser r0;
        int $i0, $i1, $i3, $i5;
        bsh.ParseException $r2;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $i1 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label2;

     label1:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

     label2:
        lookupswitch($i1)
        {
            case 0: goto label3;
            default: goto label4;
        };

     label3:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(0);

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>("End of File!");

        return 1;

     label4:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_2_1(int)>(1);

        if $z0 == 0 goto label5;

        virtualinvoke r0.<bsh.Parser: void BlockStatement()>();

        return 0;

     label5:
        $i5 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i5);

        $r2 = new bsh.ParseException;

        specialinvoke $r2.<bsh.ParseException: void <init>()>();

        throw $r2;
    }

    public final bsh.Modifiers Modifiers(int, boolean) throws bsh.ParseException
    {
        java.lang.IllegalStateException $r5;
        bsh.ParseException $r7, $r9;
        bsh.Parser r0;
        bsh.Token $r1;
        bsh.Modifiers r8, $r10;
        int $i0, i1, $i2, $i3, $i4, $i6, $i8, $i10;
        java.lang.String $r2, $r6;
        boolean z0;

        r0 := @this: bsh.Parser;

        i1 := @parameter0: int;

        z0 := @parameter1: boolean;

        r8 = null;

        goto label01;

     label01:
        $i2 = r0.<bsh.Parser: int jj_ntk>;

        $i6 = (int) -1;

        if $i2 != $i6 goto label02;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i3)
        {
            case 10: goto label04;
            case 27: goto label04;
            case 39: goto label04;
            case 43: goto label04;
            case 44: goto label04;
            case 45: goto label04;
            case 48: goto label04;
            case 49: goto label04;
            case 51: goto label04;
            case 52: goto label04;
            case 58: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        goto label26;

     label06:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i8 = (int) -1;

        if $i0 != $i8 goto label07;

        $i4 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label08;

     label07:
        $i4 = r0.<bsh.Parser: int jj_ntk>;

     label08:
        lookupswitch($i4)
        {
            case 10: goto label17;
            case 27: goto label13;
            case 39: goto label14;
            case 43: goto label09;
            case 44: goto label10;
            case 45: goto label11;
            case 48: goto label18;
            case 49: goto label19;
            case 51: goto label12;
            case 52: goto label15;
            case 58: goto label16;
            default: goto label20;
        };

     label09:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(43);

        goto label21;

     label10:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(44);

        goto label21;

     label11:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(45);

        goto label21;

     label12:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(51);

        goto label21;

     label13:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(27);

        goto label21;

     label14:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(39);

        goto label21;

     label15:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(52);

        goto label21;

     label16:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(58);

        goto label21;

     label17:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(10);

        goto label21;

     label18:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(48);

        goto label21;

     label19:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(49);

        goto label21;

     label20:
        $i10 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i10);

        $r9 = new bsh.ParseException;

        specialinvoke $r9.<bsh.ParseException: void <init>()>();

        throw $r9;

     label21:
        if z0 != 0 goto label01;

     label22:
        if r8 != null goto label23;

        $r10 = new bsh.Modifiers;

        specialinvoke $r10.<bsh.Modifiers: void <init>()>();

        r8 = $r10;

     label23:
        $r1 = virtualinvoke r0.<bsh.Parser: bsh.Token getToken(int)>(0);

        $r2 = $r1.<bsh.Token: java.lang.String image>;

        virtualinvoke r8.<bsh.Modifiers: void addModifier(int,java.lang.String)>(i1, $r2);

     label24:
        goto label01;

     label25:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r7 = virtualinvoke r0.<bsh.Parser: bsh.ParseException createParseException(java.lang.String)>($r6);

        throw $r7;

     label26:
        return r8;

        catch java.lang.IllegalStateException from label22 to label24 with label25;
    }

    public final void ClassDeclaration() throws bsh.ParseException
    {
        bsh.Parser r1;
        boolean $z0, $z1, z2, z3, z4;
        bsh.JJTParserState $r2, $r5, $r7, $r10, $r12, $r16;
        java.lang.Throwable $r9, $r11;
        java.lang.Error $r13;
        bsh.ParseException $r14, $r18;
        bsh.Modifiers $r3;
        bsh.Token $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12, $i14;
        java.lang.String $r6;
        bsh.BSHClassDeclaration $r17;
        java.lang.RuntimeException $r15;

        r1 := @this: bsh.Parser;

        $r17 = new bsh.BSHClassDeclaration;

        specialinvoke $r17.<bsh.BSHClassDeclaration: void <init>(int)>(1);

        z2 = 1;

        z4 = 1;

        z3 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r17);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r17);

     label01:
        $r3 = virtualinvoke r1.<bsh.Parser: bsh.Modifiers Modifiers(int,boolean)>(0, 0);

        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i8 = (int) -1;

        if $i0 != $i8 goto label02;

        $i4 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i4 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i4)
        {
            case 13: goto label04;
            case 37: goto label05;
            default: goto label06;
        };

     label04:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(13);

        goto label07;

     label05:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(37);

        $r17.<bsh.BSHClassDeclaration: boolean isInterface> = 1;

        goto label07;

     label06:
        $i10 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i10);

        $r18 = new bsh.ParseException;

        specialinvoke $r18.<bsh.ParseException: void <init>()>();

        throw $r18;

     label07:
        $r4 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        $i1 = r1.<bsh.Parser: int jj_ntk>;

        $i12 = (int) -1;

        if $i1 != $i12 goto label08;

        $i5 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label09;

     label08:
        $i5 = r1.<bsh.Parser: int jj_ntk>;

     label09:
        lookupswitch($i5)
        {
            case 25: goto label10;
            default: goto label11;
        };

     label10:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(25);

        virtualinvoke r1.<bsh.Parser: void AmbiguousName()>();

        $r17.<bsh.BSHClassDeclaration: boolean extend> = 1;

        goto label11;

     label11:
        $i2 = r1.<bsh.Parser: int jj_ntk>;

        $i14 = (int) -1;

        if $i2 != $i14 goto label12;

        $i6 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label13;

     label12:
        $i6 = r1.<bsh.Parser: int jj_ntk>;

     label13:
        lookupswitch($i6)
        {
            case 33: goto label14;
            default: goto label15;
        };

     label14:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(33);

        $i3 = virtualinvoke r1.<bsh.Parser: int NameList()>();

        $r17.<bsh.BSHClassDeclaration: int numInterfaces> = $i3;

        goto label15;

     label15:
        virtualinvoke r1.<bsh.Parser: void Block()>();

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r17, 1);

        z2 = 0;

        z4 = 0;

        z3 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r17);

        $r17.<bsh.BSHClassDeclaration: bsh.Modifiers modifiers> = $r3;

        $r6 = $r4.<bsh.Token: java.lang.String image>;

        $r17.<bsh.BSHClassDeclaration: java.lang.String name> = $r6;

     label16:
        goto label26;

     label17:
        goto label25;

     label18:
        $r11 := @caughtexception;

        if z4 == 0 goto label19;

        $r16 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r16.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r17);

        z2 = 0;

        z3 = 0;

        goto label20;

     label19:
        $r12 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r12.<bsh.JJTParserState: bsh.Node popNode()>();

     label20:
        $z0 = $r11 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label21;

        $r15 = (java.lang.RuntimeException) $r11;

        throw $r15;

     label21:
        $z1 = $r11 instanceof bsh.ParseException;

        if $z1 == 0 goto label22;

        $r14 = (bsh.ParseException) $r11;

        throw $r14;

     label22:
        $r13 = (java.lang.Error) $r11;

        throw $r13;

     label23:
        $r9 := @caughtexception;

        goto label28;

     label24:
        throw $r9;

     label25:
        return;

     label26:
        if 0 == 0 goto label27;

        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r17, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r17);

     label27:
        goto label17;

     label28:
        if z3 == 0 goto label29;

        $r10 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r10.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r17, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r17);

     label29:
        goto label24;

        catch java.lang.Throwable from label01 to label16 with label18;
        catch java.lang.Throwable from label01 to label17 with label23;
        catch java.lang.Throwable from label18 to label24 with label23;
    }

    public final void MethodDeclaration() throws bsh.ParseException
    {
        bsh.Parser r1;
        boolean $z0, $z1, $z2, z3;
        bsh.JJTParserState $r2, $r6, $r12, $r14, $r18;
        java.lang.Throwable $r11, $r13;
        java.lang.Error $r15;
        bsh.ParseException $r16, $r20, $r21;
        bsh.Modifiers $r3;
        bsh.Token $r4, $r9;
        bsh.BSHMethodDeclaration $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12, $i14, $i16;
        java.lang.String $r5, $r10;
        java.lang.RuntimeException $r17;

        r1 := @this: bsh.Parser;

        $r19 = new bsh.BSHMethodDeclaration;

        specialinvoke $r19.<bsh.BSHMethodDeclaration: void <init>(int)>(2);

        z3 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r19);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r19);

     label01:
        $r3 = virtualinvoke r1.<bsh.Parser: bsh.Modifiers Modifiers(int,boolean)>(1, 0);

        $r19.<bsh.BSHMethodDeclaration: bsh.Modifiers modifiers> = $r3;

        $z0 = specialinvoke r1.<bsh.Parser: boolean jj_2_2(int)>(2147483647);

        if $z0 == 0 goto label02;

        $r9 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        $r10 = $r9.<bsh.Token: java.lang.String image>;

        $r19.<bsh.BSHMethodDeclaration: java.lang.String name> = $r10;

        goto label07;

     label02:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i8 = (int) -1;

        if $i0 != $i8 goto label03;

        $i4 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label04;

     label03:
        $i4 = r1.<bsh.Parser: int jj_ntk>;

     label04:
        lookupswitch($i4)
        {
            case 11: goto label05;
            case 14: goto label05;
            case 17: goto label05;
            case 22: goto label05;
            case 29: goto label05;
            case 36: goto label05;
            case 38: goto label05;
            case 47: goto label05;
            case 57: goto label05;
            case 69: goto label05;
            default: goto label06;
        };

     label05:
        virtualinvoke r1.<bsh.Parser: void ReturnType()>();

        $r4 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        $r5 = $r4.<bsh.Token: java.lang.String image>;

        $r19.<bsh.BSHMethodDeclaration: java.lang.String name> = $r5;

        goto label07;

     label06:
        $i10 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i10);

        $r20 = new bsh.ParseException;

        specialinvoke $r20.<bsh.ParseException: void <init>()>();

        throw $r20;

     label07:
        virtualinvoke r1.<bsh.Parser: void FormalParameters()>();

        $i1 = r1.<bsh.Parser: int jj_ntk>;

        $i12 = (int) -1;

        if $i1 != $i12 goto label08;

        $i5 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label09;

     label08:
        $i5 = r1.<bsh.Parser: int jj_ntk>;

     label09:
        lookupswitch($i5)
        {
            case 54: goto label10;
            default: goto label11;
        };

     label10:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(54);

        $i2 = virtualinvoke r1.<bsh.Parser: int NameList()>();

        $r19.<bsh.BSHMethodDeclaration: int numThrows> = $i2;

        goto label11;

     label11:
        $i3 = r1.<bsh.Parser: int jj_ntk>;

        $i14 = (int) -1;

        if $i3 != $i14 goto label12;

        $i6 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label13;

     label12:
        $i6 = r1.<bsh.Parser: int jj_ntk>;

     label13:
        lookupswitch($i6)
        {
            case 74: goto label14;
            case 78: goto label15;
            default: goto label16;
        };

     label14:
        virtualinvoke r1.<bsh.Parser: void Block()>();

        goto label17;

     label15:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(78);

        goto label17;

     label16:
        $i16 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i16);

        $r21 = new bsh.ParseException;

        specialinvoke $r21.<bsh.ParseException: void <init>()>();

        throw $r21;

     label17:
        goto label27;

     label18:
        goto label26;

     label19:
        $r13 := @caughtexception;

        if 1 == 0 goto label20;

        $r18 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r18.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r19);

        z3 = 0;

        goto label21;

     label20:
        $r14 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r14.<bsh.JJTParserState: bsh.Node popNode()>();

     label21:
        $z1 = $r13 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label22;

        $r17 = (java.lang.RuntimeException) $r13;

        throw $r17;

     label22:
        $z2 = $r13 instanceof bsh.ParseException;

        if $z2 == 0 goto label23;

        $r16 = (bsh.ParseException) $r13;

        throw $r16;

     label23:
        $r15 = (java.lang.Error) $r13;

        throw $r15;

     label24:
        $r11 := @caughtexception;

        goto label29;

     label25:
        throw $r11;

     label26:
        return;

     label27:
        if 1 == 0 goto label28;

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

     label28:
        goto label18;

     label29:
        if z3 == 0 goto label30;

        $r12 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r12.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

     label30:
        goto label25;

        catch java.lang.Throwable from label01 to label17 with label19;
        catch java.lang.Throwable from label01 to label18 with label24;
        catch java.lang.Throwable from label19 to label25 with label24;
    }

    public final void PackageDeclaration() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        bsh.BSHPackageDeclaration $r0;
        java.lang.Error $r8;
        java.lang.RuntimeException $r10;
        bsh.ParseException $r9;
        bsh.Parser r1;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;
        boolean $z0, $z1, z2;

        r1 := @this: bsh.Parser;

        $r0 = new bsh.BSHPackageDeclaration;

        specialinvoke $r0.<bsh.BSHPackageDeclaration: void <init>(int)>(3);

        z2 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r0);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r0);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(42);

        virtualinvoke r1.<bsh.Parser: void AmbiguousName()>();

     label02:
        goto label12;

     label03:
        goto label11;

     label04:
        $r6 := @caughtexception;

        if 1 == 0 goto label05;

        $r11 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r0);

        z2 = 0;

        goto label06;

     label05:
        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label06:
        $z0 = $r6 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label07;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label07:
        $z1 = $r6 instanceof bsh.ParseException;

        if $z1 == 0 goto label08;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label08:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label09:
        $r4 := @caughtexception;

        goto label14;

     label10:
        throw $r4;

     label11:
        return;

     label12:
        if 1 == 0 goto label13;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label13:
        goto label03;

     label14:
        if z2 == 0 goto label15;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label15:
        goto label10;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label10 with label09;
    }

    public final void ImportDeclaration() throws bsh.ParseException
    {
        bsh.Parser r1;
        boolean $z0, $z1, $z2, z3, z4, z5;
        bsh.BSHImportDeclaration $r17;
        bsh.JJTParserState $r2, $r3, $r4, $r6, $r8, $r10, $r14;
        java.lang.Throwable $r7, $r9;
        java.lang.Error $r11;
        bsh.ParseException $r12, $r18;
        bsh.Token r15, r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11, $i13;
        java.lang.RuntimeException $r13;

        r1 := @this: bsh.Parser;

        $r17 = new bsh.BSHImportDeclaration;

        specialinvoke $r17.<bsh.BSHImportDeclaration: void <init>(int)>(4);

        z3 = 1;

        z5 = 1;

        z4 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r17);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r17);

        r15 = null;

        r16 = null;

     label01:
        $z0 = specialinvoke r1.<bsh.Parser: boolean jj_2_3(int)>(3);

        if $z0 == 0 goto label11;

        $i1 = r1.<bsh.Parser: int jj_ntk>;

        $i7 = (int) -1;

        if $i1 != $i7 goto label02;

        $i3 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i3 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i3)
        {
            case 48: goto label04;
            default: goto label05;
        };

     label04:
        r15 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(48);

        goto label05;

     label05:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(34);

        virtualinvoke r1.<bsh.Parser: void AmbiguousName()>();

        $i2 = r1.<bsh.Parser: int jj_ntk>;

        $i9 = (int) -1;

        if $i2 != $i9 goto label06;

        $i4 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label07;

     label06:
        $i4 = r1.<bsh.Parser: int jj_ntk>;

     label07:
        lookupswitch($i4)
        {
            case 80: goto label08;
            default: goto label09;
        };

     label08:
        r16 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(80);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(104);

        goto label09;

     label09:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(78);

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r17, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r17);

        if r15 == null goto label10;

        $r17.<bsh.BSHImportDeclaration: boolean staticImport> = 1;

     label10:
        if r16 == null goto label16;

        $r17.<bsh.BSHImportDeclaration: boolean importPackage> = 1;

        goto label16;

     label11:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i11 = (int) -1;

        if $i0 != $i11 goto label12;

        $i5 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label13;

     label12:
        $i5 = r1.<bsh.Parser: int jj_ntk>;

     label13:
        lookupswitch($i5)
        {
            case 34: goto label14;
            default: goto label15;
        };

     label14:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(34);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(104);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(78);

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r17, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r17);

        $r17.<bsh.BSHImportDeclaration: boolean superImport> = 1;

        goto label16;

     label15:
        $i13 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i13);

        $r18 = new bsh.ParseException;

        specialinvoke $r18.<bsh.ParseException: void <init>()>();

        throw $r18;

     label16:
        goto label26;

     label17:
        goto label25;

     label18:
        $r9 := @caughtexception;

        if z4 == 0 goto label19;

        $r14 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r14.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r17);

        z3 = 0;

        z5 = 0;

        goto label20;

     label19:
        $r10 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r10.<bsh.JJTParserState: bsh.Node popNode()>();

     label20:
        $z1 = $r9 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label21;

        $r13 = (java.lang.RuntimeException) $r9;

        throw $r13;

     label21:
        $z2 = $r9 instanceof bsh.ParseException;

        if $z2 == 0 goto label22;

        $r12 = (bsh.ParseException) $r9;

        throw $r12;

     label22:
        $r11 = (java.lang.Error) $r9;

        throw $r11;

     label23:
        $r7 := @caughtexception;

        goto label28;

     label24:
        throw $r7;

     label25:
        return;

     label26:
        if 0 == 0 goto label27;

        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r17, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r17);

     label27:
        goto label17;

     label28:
        if z5 == 0 goto label29;

        $r8 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r17, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r17);

     label29:
        goto label24;

        catch java.lang.Throwable from label01 to label16 with label18;
        catch java.lang.Throwable from label01 to label17 with label23;
        catch java.lang.Throwable from label18 to label24 with label23;
    }

    public final void VariableDeclarator() throws bsh.ParseException
    {
        java.lang.Throwable $r7, $r9;
        java.lang.Error $r11;
        bsh.ParseException $r12;
        bsh.Parser r1;
        bsh.Token $r3;
        int $i0, $i1, $i3;
        java.lang.String $r5;
        bsh.BSHVariableDeclarator $r15;
        boolean $z0, $z1, z2, z3, z4;
        java.lang.RuntimeException $r13;
        bsh.JJTParserState $r2, $r4, $r6, $r8, $r10, $r14;

        r1 := @this: bsh.Parser;

        $r15 = new bsh.BSHVariableDeclarator;

        specialinvoke $r15.<bsh.BSHVariableDeclarator: void <init>(int)>(5);

        z2 = 1;

        z4 = 1;

        z3 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r15);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r15);

     label01:
        $r3 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label02;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i1)
        {
            case 81: goto label04;
            default: goto label05;
        };

     label04:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(81);

        virtualinvoke r1.<bsh.Parser: void VariableInitializer()>();

        goto label05;

     label05:
        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r15, 1);

        z2 = 0;

        z4 = 0;

        z3 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r15);

        $r5 = $r3.<bsh.Token: java.lang.String image>;

        $r15.<bsh.BSHVariableDeclarator: java.lang.String name> = $r5;

     label06:
        goto label16;

     label07:
        goto label15;

     label08:
        $r9 := @caughtexception;

        if z3 == 0 goto label09;

        $r14 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r14.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r15);

        z2 = 0;

        z4 = 0;

        goto label10;

     label09:
        $r10 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r10.<bsh.JJTParserState: bsh.Node popNode()>();

     label10:
        $z0 = $r9 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label11;

        $r13 = (java.lang.RuntimeException) $r9;

        throw $r13;

     label11:
        $z1 = $r9 instanceof bsh.ParseException;

        if $z1 == 0 goto label12;

        $r12 = (bsh.ParseException) $r9;

        throw $r12;

     label12:
        $r11 = (java.lang.Error) $r9;

        throw $r11;

     label13:
        $r7 := @caughtexception;

        goto label18;

     label14:
        throw $r7;

     label15:
        return;

     label16:
        if 0 == 0 goto label17;

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r15, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r15);

     label17:
        goto label07;

     label18:
        if z4 == 0 goto label19;

        $r8 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r15, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r15);

     label19:
        goto label14;

        catch java.lang.Throwable from label01 to label06 with label08;
        catch java.lang.Throwable from label01 to label07 with label13;
        catch java.lang.Throwable from label08 to label14 with label13;
    }

    public final void VariableInitializer() throws bsh.ParseException
    {
        bsh.Parser r0;
        int $i0, $i1, $i3, $i5;
        bsh.ParseException $r2;

        r0 := @this: bsh.Parser;

        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $i1 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label2;

     label1:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

     label2:
        tableswitch($i1)
        {
            case 11: goto label4;
            case 12: goto label5;
            case 13: goto label5;
            case 14: goto label4;
            case 15: goto label5;
            case 16: goto label5;
            case 17: goto label4;
            case 18: goto label5;
            case 19: goto label5;
            case 20: goto label5;
            case 21: goto label5;
            case 22: goto label4;
            case 23: goto label5;
            case 24: goto label5;
            case 25: goto label5;
            case 26: goto label4;
            case 27: goto label5;
            case 28: goto label5;
            case 29: goto label4;
            case 30: goto label5;
            case 31: goto label5;
            case 32: goto label5;
            case 33: goto label5;
            case 34: goto label5;
            case 35: goto label5;
            case 36: goto label4;
            case 37: goto label5;
            case 38: goto label4;
            case 39: goto label5;
            case 40: goto label4;
            case 41: goto label4;
            case 42: goto label5;
            case 43: goto label5;
            case 44: goto label5;
            case 45: goto label5;
            case 46: goto label5;
            case 47: goto label4;
            case 48: goto label5;
            case 49: goto label5;
            case 50: goto label5;
            case 51: goto label5;
            case 52: goto label5;
            case 53: goto label5;
            case 54: goto label5;
            case 55: goto label4;
            case 56: goto label5;
            case 57: goto label4;
            case 58: goto label5;
            case 59: goto label5;
            case 60: goto label4;
            case 61: goto label5;
            case 62: goto label5;
            case 63: goto label5;
            case 64: goto label4;
            case 65: goto label5;
            case 66: goto label4;
            case 67: goto label4;
            case 68: goto label5;
            case 69: goto label4;
            case 70: goto label5;
            case 71: goto label5;
            case 72: goto label4;
            case 73: goto label5;
            case 74: goto label3;
            case 75: goto label5;
            case 76: goto label5;
            case 77: goto label5;
            case 78: goto label5;
            case 79: goto label5;
            case 80: goto label5;
            case 81: goto label5;
            case 82: goto label5;
            case 83: goto label5;
            case 84: goto label5;
            case 85: goto label5;
            case 86: goto label4;
            case 87: goto label4;
            case 88: goto label5;
            case 89: goto label5;
            case 90: goto label5;
            case 91: goto label5;
            case 92: goto label5;
            case 93: goto label5;
            case 94: goto label5;
            case 95: goto label5;
            case 96: goto label5;
            case 97: goto label5;
            case 98: goto label5;
            case 99: goto label5;
            case 100: goto label4;
            case 101: goto label4;
            case 102: goto label4;
            case 103: goto label4;
            default: goto label5;
        };

     label3:
        virtualinvoke r0.<bsh.Parser: void ArrayInitializer()>();

        goto label6;

     label4:
        virtualinvoke r0.<bsh.Parser: void Expression()>();

        goto label6;

     label5:
        $i5 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i5);

        $r2 = new bsh.ParseException;

        specialinvoke $r2.<bsh.ParseException: void <init>()>();

        throw $r2;

     label6:
        return;
    }

    public final void ArrayInitializer() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        java.lang.Error $r8;
        bsh.ParseException $r9;
        bsh.Parser r1;
        bsh.BSHArrayInitializer $r12;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        boolean $z0, $z1, $z2, z3;
        java.lang.RuntimeException $r10;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;

        r1 := @this: bsh.Parser;

        $r12 = new bsh.BSHArrayInitializer;

        specialinvoke $r12.<bsh.BSHArrayInitializer: void <init>(int)>(6);

        z3 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r12);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r12);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(74);

        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label02;

        $i2 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i2 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        tableswitch($i2)
        {
            case 11: goto label04;
            case 12: goto label06;
            case 13: goto label06;
            case 14: goto label04;
            case 15: goto label06;
            case 16: goto label06;
            case 17: goto label04;
            case 18: goto label06;
            case 19: goto label06;
            case 20: goto label06;
            case 21: goto label06;
            case 22: goto label04;
            case 23: goto label06;
            case 24: goto label06;
            case 25: goto label06;
            case 26: goto label04;
            case 27: goto label06;
            case 28: goto label06;
            case 29: goto label04;
            case 30: goto label06;
            case 31: goto label06;
            case 32: goto label06;
            case 33: goto label06;
            case 34: goto label06;
            case 35: goto label06;
            case 36: goto label04;
            case 37: goto label06;
            case 38: goto label04;
            case 39: goto label06;
            case 40: goto label04;
            case 41: goto label04;
            case 42: goto label06;
            case 43: goto label06;
            case 44: goto label06;
            case 45: goto label06;
            case 46: goto label06;
            case 47: goto label04;
            case 48: goto label06;
            case 49: goto label06;
            case 50: goto label06;
            case 51: goto label06;
            case 52: goto label06;
            case 53: goto label06;
            case 54: goto label06;
            case 55: goto label04;
            case 56: goto label06;
            case 57: goto label04;
            case 58: goto label06;
            case 59: goto label06;
            case 60: goto label04;
            case 61: goto label06;
            case 62: goto label06;
            case 63: goto label06;
            case 64: goto label04;
            case 65: goto label06;
            case 66: goto label04;
            case 67: goto label04;
            case 68: goto label06;
            case 69: goto label04;
            case 70: goto label06;
            case 71: goto label06;
            case 72: goto label04;
            case 73: goto label06;
            case 74: goto label04;
            case 75: goto label06;
            case 76: goto label06;
            case 77: goto label06;
            case 78: goto label06;
            case 79: goto label06;
            case 80: goto label06;
            case 81: goto label06;
            case 82: goto label06;
            case 83: goto label06;
            case 84: goto label06;
            case 85: goto label06;
            case 86: goto label04;
            case 87: goto label04;
            case 88: goto label06;
            case 89: goto label06;
            case 90: goto label06;
            case 91: goto label06;
            case 92: goto label06;
            case 93: goto label06;
            case 94: goto label06;
            case 95: goto label06;
            case 96: goto label06;
            case 97: goto label06;
            case 98: goto label06;
            case 99: goto label06;
            case 100: goto label04;
            case 101: goto label04;
            case 102: goto label04;
            case 103: goto label04;
            default: goto label06;
        };

     label04:
        virtualinvoke r1.<bsh.Parser: void VariableInitializer()>();

        goto label05;

     label05:
        $z0 = specialinvoke r1.<bsh.Parser: boolean jj_2_4(int)>(2);

        if $z0 == 0 goto label06;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(79);

        virtualinvoke r1.<bsh.Parser: void VariableInitializer()>();

        goto label05;

     label06:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

        $i7 = (int) -1;

        if $i1 != $i7 goto label07;

        $i3 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label08;

     label07:
        $i3 = r1.<bsh.Parser: int jj_ntk>;

     label08:
        lookupswitch($i3)
        {
            case 79: goto label09;
            default: goto label10;
        };

     label09:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(79);

        goto label10;

     label10:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(75);

     label11:
        goto label21;

     label12:
        goto label20;

     label13:
        $r6 := @caughtexception;

        if 1 == 0 goto label14;

        $r11 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r12);

        z3 = 0;

        goto label15;

     label14:
        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label15:
        $z1 = $r6 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label16;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label16:
        $z2 = $r6 instanceof bsh.ParseException;

        if $z2 == 0 goto label17;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label17:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label18:
        $r4 := @caughtexception;

        goto label23;

     label19:
        throw $r4;

     label20:
        return;

     label21:
        if 1 == 0 goto label22;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label22:
        goto label12;

     label23:
        if z3 == 0 goto label24;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label24:
        goto label19;

        catch java.lang.Throwable from label01 to label11 with label13;
        catch java.lang.Throwable from label01 to label12 with label18;
        catch java.lang.Throwable from label13 to label19 with label18;
    }

    public final void FormalParameters() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        java.lang.Error $r8;
        bsh.ParseException $r9;
        bsh.Parser r1;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        boolean $z0, $z1, z2;
        java.lang.RuntimeException $r10;
        bsh.BSHFormalParameters $r12;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;

        r1 := @this: bsh.Parser;

        $r12 = new bsh.BSHFormalParameters;

        specialinvoke $r12.<bsh.BSHFormalParameters: void <init>(int)>(7);

        z2 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r12);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r12);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label02;

        $i2 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i2 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i2)
        {
            case 11: goto label04;
            case 14: goto label04;
            case 17: goto label04;
            case 22: goto label04;
            case 29: goto label04;
            case 36: goto label04;
            case 38: goto label04;
            case 47: goto label04;
            case 69: goto label04;
            default: goto label11;
        };

     label04:
        virtualinvoke r1.<bsh.Parser: void FormalParameter()>();

        goto label05;

     label05:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

        $i7 = (int) -1;

        if $i1 != $i7 goto label06;

        $i3 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label07;

     label06:
        $i3 = r1.<bsh.Parser: int jj_ntk>;

     label07:
        lookupswitch($i3)
        {
            case 79: goto label08;
            default: goto label09;
        };

     label08:
        goto label10;

     label09:
        goto label11;

     label10:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(79);

        virtualinvoke r1.<bsh.Parser: void FormalParameter()>();

        goto label05;

     label11:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

     label12:
        goto label22;

     label13:
        goto label21;

     label14:
        $r6 := @caughtexception;

        if 1 == 0 goto label15;

        $r11 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r12);

        z2 = 0;

        goto label16;

     label15:
        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label16:
        $z0 = $r6 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label17;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label17:
        $z1 = $r6 instanceof bsh.ParseException;

        if $z1 == 0 goto label18;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label18:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label19:
        $r4 := @caughtexception;

        goto label24;

     label20:
        throw $r4;

     label21:
        return;

     label22:
        if 1 == 0 goto label23;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label23:
        goto label13;

     label24:
        if z2 == 0 goto label25;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label25:
        goto label20;

        catch java.lang.Throwable from label01 to label12 with label14;
        catch java.lang.Throwable from label01 to label13 with label19;
        catch java.lang.Throwable from label14 to label20 with label19;
    }

    public final void FormalParameter() throws bsh.ParseException
    {
        java.lang.Throwable $r11, $r13;
        java.lang.Error $r15;
        bsh.ParseException $r16, $r20;
        bsh.BSHFormalParameter $r19;
        bsh.Parser r1;
        bsh.Token $r3, $r8;
        int $i0, $i1, $i3, $i5;
        java.lang.String $r5, $r10;
        boolean $z0, $z1, $z2, z3, z4, z5;
        java.lang.RuntimeException $r17;
        bsh.JJTParserState $r2, $r4, $r6, $r9, $r12, $r14, $r18;

        r1 := @this: bsh.Parser;

        $r19 = new bsh.BSHFormalParameter;

        specialinvoke $r19.<bsh.BSHFormalParameter: void <init>(int)>(8);

        z3 = 1;

        z5 = 1;

        z4 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r19);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r19);

     label01:
        $z0 = specialinvoke r1.<bsh.Parser: boolean jj_2_5(int)>(2);

        if $z0 == 0 goto label02;

        virtualinvoke r1.<bsh.Parser: void Type()>();

        $r8 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        $r9 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r9.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

        $r10 = $r8.<bsh.Token: java.lang.String image>;

        $r19.<bsh.BSHFormalParameter: java.lang.String name> = $r10;

        goto label07;

     label02:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label03;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label04;

     label03:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label04:
        lookupswitch($i1)
        {
            case 69: goto label05;
            default: goto label06;
        };

     label05:
        $r3 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

        $r5 = $r3.<bsh.Token: java.lang.String image>;

        $r19.<bsh.BSHFormalParameter: java.lang.String name> = $r5;

        goto label07;

     label06:
        $i5 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i5);

        $r20 = new bsh.ParseException;

        specialinvoke $r20.<bsh.ParseException: void <init>()>();

        throw $r20;

     label07:
        goto label17;

     label08:
        goto label16;

     label09:
        $r13 := @caughtexception;

        if z4 == 0 goto label10;

        $r18 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r18.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r19);

        z3 = 0;

        z5 = 0;

        goto label11;

     label10:
        $r14 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r14.<bsh.JJTParserState: bsh.Node popNode()>();

     label11:
        $z1 = $r13 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label12;

        $r17 = (java.lang.RuntimeException) $r13;

        throw $r17;

     label12:
        $z2 = $r13 instanceof bsh.ParseException;

        if $z2 == 0 goto label13;

        $r16 = (bsh.ParseException) $r13;

        throw $r16;

     label13:
        $r15 = (java.lang.Error) $r13;

        throw $r15;

     label14:
        $r11 := @caughtexception;

        goto label19;

     label15:
        throw $r11;

     label16:
        return;

     label17:
        if 0 == 0 goto label18;

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

     label18:
        goto label08;

     label19:
        if z5 == 0 goto label20;

        $r12 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r12.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

     label20:
        goto label15;

        catch java.lang.Throwable from label01 to label07 with label09;
        catch java.lang.Throwable from label01 to label08 with label14;
        catch java.lang.Throwable from label09 to label15 with label14;
    }

    public final void Type() throws bsh.ParseException
    {
        java.lang.Throwable $r5, $r7;
        java.lang.Error $r9;
        bsh.ParseException $r10, $r14;
        bsh.Parser r1;
        bsh.BSHType $r13;
        int $i0, $i1, $i3, $i5;
        boolean $z0, $z1, z2, $z3;
        java.lang.RuntimeException $r11;
        bsh.JJTParserState $r2, $r3, $r6, $r8, $r12;

        r1 := @this: bsh.Parser;

        $r13 = new bsh.BSHType;

        specialinvoke $r13.<bsh.BSHType: void <init>(int)>(9);

        z2 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r13);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r13);

     label01:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label02;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i1)
        {
            case 11: goto label04;
            case 14: goto label04;
            case 17: goto label04;
            case 22: goto label04;
            case 29: goto label04;
            case 36: goto label04;
            case 38: goto label04;
            case 47: goto label04;
            case 69: goto label05;
            default: goto label06;
        };

     label04:
        virtualinvoke r1.<bsh.Parser: void PrimitiveType()>();

        goto label07;

     label05:
        virtualinvoke r1.<bsh.Parser: void AmbiguousName()>();

        goto label07;

     label06:
        $i5 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i5);

        $r14 = new bsh.ParseException;

        specialinvoke $r14.<bsh.ParseException: void <init>()>();

        throw $r14;

     label07:
        $z3 = specialinvoke r1.<bsh.Parser: boolean jj_2_6(int)>(2);

        if $z3 == 0 goto label08;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(76);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(77);

        virtualinvoke $r13.<bsh.BSHType: void addArrayDimension()>();

        goto label07;

     label08:
        goto label18;

     label09:
        goto label17;

     label10:
        $r7 := @caughtexception;

        if 1 == 0 goto label11;

        $r12 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r12.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r13);

        z2 = 0;

        goto label12;

     label11:
        $r8 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: bsh.Node popNode()>();

     label12:
        $z0 = $r7 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label13;

        $r11 = (java.lang.RuntimeException) $r7;

        throw $r11;

     label13:
        $z1 = $r7 instanceof bsh.ParseException;

        if $z1 == 0 goto label14;

        $r10 = (bsh.ParseException) $r7;

        throw $r10;

     label14:
        $r9 = (java.lang.Error) $r7;

        throw $r9;

     label15:
        $r5 := @caughtexception;

        goto label20;

     label16:
        throw $r5;

     label17:
        return;

     label18:
        if 1 == 0 goto label19;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r13, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r13);

     label19:
        goto label09;

     label20:
        if z2 == 0 goto label21;

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r13, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r13);

     label21:
        goto label16;

        catch java.lang.Throwable from label01 to label08 with label10;
        catch java.lang.Throwable from label01 to label09 with label15;
        catch java.lang.Throwable from label10 to label16 with label15;
    }

    public final void ReturnType() throws bsh.ParseException
    {
        java.lang.Throwable $r6, $r8;
        java.lang.Error $r10;
        bsh.BSHReturnType $r14;
        bsh.ParseException $r11, $r15;
        bsh.Parser r1;
        int $i0, $i1, $i3, $i5;
        boolean $z0, $z1, z2, z3, z4, z5;
        java.lang.RuntimeException $r12;
        bsh.JJTParserState $r2, $r3, $r4, $r7, $r9, $r13;

        r1 := @this: bsh.Parser;

        $r14 = new bsh.BSHReturnType;

        specialinvoke $r14.<bsh.BSHReturnType: void <init>(int)>(10);

        z2 = 1;

        z5 = 1;

        z4 = 1;

        z3 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r14);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r14);

     label01:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label02;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i1)
        {
            case 11: goto label05;
            case 14: goto label05;
            case 17: goto label05;
            case 22: goto label05;
            case 29: goto label05;
            case 36: goto label05;
            case 38: goto label05;
            case 47: goto label05;
            case 57: goto label04;
            case 69: goto label05;
            default: goto label06;
        };

     label04:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(57);

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r14, 1);

        z2 = 0;

        z5 = 0;

        z4 = 0;

        z3 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r14);

        $r14.<bsh.BSHReturnType: boolean isVoid> = 1;

        goto label07;

     label05:
        virtualinvoke r1.<bsh.Parser: void Type()>();

        goto label07;

     label06:
        $i5 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i5);

        $r15 = new bsh.ParseException;

        specialinvoke $r15.<bsh.ParseException: void <init>()>();

        throw $r15;

     label07:
        goto label17;

     label08:
        goto label16;

     label09:
        $r8 := @caughtexception;

        if z4 == 0 goto label10;

        $r13 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r13.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r14);

        z2 = 0;

        z5 = 0;

        goto label11;

     label10:
        $r9 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r9.<bsh.JJTParserState: bsh.Node popNode()>();

     label11:
        $z0 = $r8 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label12;

        $r12 = (java.lang.RuntimeException) $r8;

        throw $r12;

     label12:
        $z1 = $r8 instanceof bsh.ParseException;

        if $z1 == 0 goto label13;

        $r11 = (bsh.ParseException) $r8;

        throw $r11;

     label13:
        $r10 = (java.lang.Error) $r8;

        throw $r10;

     label14:
        $r6 := @caughtexception;

        goto label19;

     label15:
        throw $r6;

     label16:
        return;

     label17:
        if z3 == 0 goto label18;

        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r14, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r14);

     label18:
        goto label08;

     label19:
        if z5 == 0 goto label20;

        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r14, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r14);

     label20:
        goto label15;

        catch java.lang.Throwable from label01 to label07 with label09;
        catch java.lang.Throwable from label01 to label08 with label14;
        catch java.lang.Throwable from label09 to label15 with label14;
    }

    public final void PrimitiveType() throws bsh.ParseException
    {
        java.lang.Throwable $r21;
        bsh.ParseException $r24;
        bsh.Parser r1;
        int $i0, $i1, $i3, $i5;
        boolean z0;
        bsh.BSHPrimitiveType $r23;
        java.lang.Class $r4, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        bsh.JJTParserState $r2, $r3, $r5, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r22;

        r1 := @this: bsh.Parser;

        $r23 = new bsh.BSHPrimitiveType;

        specialinvoke $r23.<bsh.BSHPrimitiveType: void <init>(int)>(11);

        z0 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r23);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r23);

     label01:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label02;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i1)
        {
            case 11: goto label04;
            case 14: goto label06;
            case 17: goto label05;
            case 22: goto label11;
            case 29: goto label10;
            case 36: goto label08;
            case 38: goto label09;
            case 47: goto label07;
            default: goto label12;
        };

     label04:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(11);

        $r18 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r18.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r23, 1);

        z0 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r23);

        $r19 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r23.<bsh.BSHPrimitiveType: java.lang.Class type> = $r19;

        goto label13;

     label05:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(17);

        $r14 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r14.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r23, 1);

        z0 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r23);

        $r15 = <java.lang.Character: java.lang.Class TYPE>;

        $r23.<bsh.BSHPrimitiveType: java.lang.Class type> = $r15;

        goto label13;

     label06:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(14);

        $r16 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r16.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r23, 1);

        z0 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r23);

        $r17 = <java.lang.Byte: java.lang.Class TYPE>;

        $r23.<bsh.BSHPrimitiveType: java.lang.Class type> = $r17;

        goto label13;

     label07:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(47);

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r23, 1);

        z0 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r23);

        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        $r23.<bsh.BSHPrimitiveType: java.lang.Class type> = $r4;

        goto label13;

     label08:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(36);

        $r8 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r23, 1);

        z0 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r23);

        $r9 = <java.lang.Integer: java.lang.Class TYPE>;

        $r23.<bsh.BSHPrimitiveType: java.lang.Class type> = $r9;

        goto label13;

     label09:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(38);

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r23, 1);

        z0 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r23);

        $r7 = <java.lang.Long: java.lang.Class TYPE>;

        $r23.<bsh.BSHPrimitiveType: java.lang.Class type> = $r7;

        goto label13;

     label10:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(29);

        $r10 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r10.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r23, 1);

        z0 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r23);

        $r11 = <java.lang.Float: java.lang.Class TYPE>;

        $r23.<bsh.BSHPrimitiveType: java.lang.Class type> = $r11;

        goto label13;

     label11:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(22);

        $r12 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r12.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r23, 1);

        z0 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r23);

        $r13 = <java.lang.Double: java.lang.Class TYPE>;

        $r23.<bsh.BSHPrimitiveType: java.lang.Class type> = $r13;

        goto label13;

     label12:
        $i5 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i5);

        $r24 = new bsh.ParseException;

        specialinvoke $r24.<bsh.ParseException: void <init>()>();

        throw $r24;

     label13:
        goto label18;

     label14:
        goto label17;

     label15:
        $r21 := @caughtexception;

        goto label20;

     label16:
        throw $r21;

     label17:
        return;

     label18:
        if 0 == 0 goto label19;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r23, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r23);

     label19:
        goto label14;

     label20:
        if z0 == 0 goto label21;

        $r22 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r22.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r23, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r23);

     label21:
        goto label16;

        catch java.lang.Throwable from label01 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public final void AmbiguousName() throws bsh.ParseException
    {
        java.lang.Throwable $r15;
        bsh.Parser r1;
        bsh.BSHAmbiguousName $r0;
        bsh.Token $r3, $r9;
        java.lang.StringBuffer $r4, $r10, $r11, $r13;
        java.lang.String $r5, $r7, $r12, $r14;
        boolean $z0, z1;
        bsh.JJTParserState $r2, $r6, $r8, $r16;

        r1 := @this: bsh.Parser;

        $r0 = new bsh.BSHAmbiguousName;

        specialinvoke $r0.<bsh.BSHAmbiguousName: void <init>(int)>(12);

        z1 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r0);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r0);

     label01:
        $r3 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        $r4 = new java.lang.StringBuffer;

        $r5 = $r3.<bsh.Token: java.lang.String image>;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(java.lang.String)>($r5);

        goto label02;

     label02:
        $z0 = specialinvoke r1.<bsh.Parser: boolean jj_2_7(int)>(2);

        if $z0 == 0 goto label03;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(80);

        $r9 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r12 = $r9.<bsh.Token: java.lang.String image>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        goto label02;

     label03:
        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        z1 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r0.<bsh.BSHAmbiguousName: java.lang.String text> = $r7;

        goto label08;

     label04:
        goto label07;

     label05:
        $r15 := @caughtexception;

        goto label10;

     label06:
        throw $r15;

     label07:
        return;

     label08:
        if 0 == 0 goto label09;

        $r8 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label09:
        goto label04;

     label10:
        if z1 == 0 goto label11;

        $r16 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r16.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label11:
        goto label06;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    public final int NameList() throws bsh.ParseException
    {
        bsh.Parser r0;
        int $i0, i1, $i2, $i4;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void AmbiguousName()>();

        i1 = 1;

        goto label1;

     label1:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        $i2 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label3;

     label2:
        $i2 = r0.<bsh.Parser: int jj_ntk>;

     label3:
        lookupswitch($i2)
        {
            case 79: goto label4;
            default: goto label5;
        };

     label4:
        goto label6;

     label5:
        goto label7;

     label6:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(79);

        virtualinvoke r0.<bsh.Parser: void AmbiguousName()>();

        i1 = i1 + 1;

        goto label1;

     label7:
        return i1;
    }

    public final void Expression() throws bsh.ParseException
    {
        bsh.Parser r0;
        int $i0, $i1, $i3, $i5;
        bsh.ParseException $r2;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_2_8(int)>(2147483647);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<bsh.Parser: void Assignment()>();

        goto label6;

     label1:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        $i1 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label3;

     label2:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

     label3:
        tableswitch($i1)
        {
            case 11: goto label4;
            case 12: goto label5;
            case 13: goto label5;
            case 14: goto label4;
            case 15: goto label5;
            case 16: goto label5;
            case 17: goto label4;
            case 18: goto label5;
            case 19: goto label5;
            case 20: goto label5;
            case 21: goto label5;
            case 22: goto label4;
            case 23: goto label5;
            case 24: goto label5;
            case 25: goto label5;
            case 26: goto label4;
            case 27: goto label5;
            case 28: goto label5;
            case 29: goto label4;
            case 30: goto label5;
            case 31: goto label5;
            case 32: goto label5;
            case 33: goto label5;
            case 34: goto label5;
            case 35: goto label5;
            case 36: goto label4;
            case 37: goto label5;
            case 38: goto label4;
            case 39: goto label5;
            case 40: goto label4;
            case 41: goto label4;
            case 42: goto label5;
            case 43: goto label5;
            case 44: goto label5;
            case 45: goto label5;
            case 46: goto label5;
            case 47: goto label4;
            case 48: goto label5;
            case 49: goto label5;
            case 50: goto label5;
            case 51: goto label5;
            case 52: goto label5;
            case 53: goto label5;
            case 54: goto label5;
            case 55: goto label4;
            case 56: goto label5;
            case 57: goto label4;
            case 58: goto label5;
            case 59: goto label5;
            case 60: goto label4;
            case 61: goto label5;
            case 62: goto label5;
            case 63: goto label5;
            case 64: goto label4;
            case 65: goto label5;
            case 66: goto label4;
            case 67: goto label4;
            case 68: goto label5;
            case 69: goto label4;
            case 70: goto label5;
            case 71: goto label5;
            case 72: goto label4;
            case 73: goto label5;
            case 74: goto label5;
            case 75: goto label5;
            case 76: goto label5;
            case 77: goto label5;
            case 78: goto label5;
            case 79: goto label5;
            case 80: goto label5;
            case 81: goto label5;
            case 82: goto label5;
            case 83: goto label5;
            case 84: goto label5;
            case 85: goto label5;
            case 86: goto label4;
            case 87: goto label4;
            case 88: goto label5;
            case 89: goto label5;
            case 90: goto label5;
            case 91: goto label5;
            case 92: goto label5;
            case 93: goto label5;
            case 94: goto label5;
            case 95: goto label5;
            case 96: goto label5;
            case 97: goto label5;
            case 98: goto label5;
            case 99: goto label5;
            case 100: goto label4;
            case 101: goto label4;
            case 102: goto label4;
            case 103: goto label4;
            default: goto label5;
        };

     label4:
        virtualinvoke r0.<bsh.Parser: void ConditionalExpression()>();

        goto label6;

     label5:
        $i5 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i5);

        $r2 = new bsh.ParseException;

        specialinvoke $r2.<bsh.ParseException: void <init>()>();

        throw $r2;

     label6:
        return;
    }

    public final void Assignment() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        java.lang.Error $r8;
        bsh.ParseException $r9;
        bsh.Parser r1;
        int $i0;
        boolean $z0, $z1, z2;
        java.lang.RuntimeException $r10;
        bsh.BSHAssignment $r0;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;

        r1 := @this: bsh.Parser;

        $r0 = new bsh.BSHAssignment;

        specialinvoke $r0.<bsh.BSHAssignment: void <init>(int)>(13);

        z2 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r0);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r0);

     label01:
        virtualinvoke r1.<bsh.Parser: void PrimaryExpression()>();

        $i0 = virtualinvoke r1.<bsh.Parser: int AssignmentOperator()>();

        $r0.<bsh.BSHAssignment: int operator> = $i0;

        virtualinvoke r1.<bsh.Parser: void Expression()>();

     label02:
        goto label12;

     label03:
        goto label11;

     label04:
        $r6 := @caughtexception;

        if 1 == 0 goto label05;

        $r11 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r0);

        z2 = 0;

        goto label06;

     label05:
        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label06:
        $z0 = $r6 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label07;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label07:
        $z1 = $r6 instanceof bsh.ParseException;

        if $z1 == 0 goto label08;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label08:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label09:
        $r4 := @caughtexception;

        goto label14;

     label10:
        throw $r4;

     label11:
        return;

     label12:
        if 1 == 0 goto label13;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label13:
        goto label03;

     label14:
        if z2 == 0 goto label15;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label15:
        goto label10;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label10 with label09;
    }

    public final int AssignmentOperator() throws bsh.ParseException
    {
        bsh.ParseException $r3;
        bsh.Parser r0;
        bsh.Token $r2;
        int $i0, $i1, $i2, $i4, $i6;

        r0 := @this: bsh.Parser;

        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label01;

        $i1 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label02;

     label01:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

     label02:
        tableswitch($i1)
        {
            case 81: goto label03;
            case 82: goto label18;
            case 83: goto label18;
            case 84: goto label18;
            case 85: goto label18;
            case 86: goto label18;
            case 87: goto label18;
            case 88: goto label18;
            case 89: goto label18;
            case 90: goto label18;
            case 91: goto label18;
            case 92: goto label18;
            case 93: goto label18;
            case 94: goto label18;
            case 95: goto label18;
            case 96: goto label18;
            case 97: goto label18;
            case 98: goto label18;
            case 99: goto label18;
            case 100: goto label18;
            case 101: goto label18;
            case 102: goto label18;
            case 103: goto label18;
            case 104: goto label18;
            case 105: goto label18;
            case 106: goto label18;
            case 107: goto label18;
            case 108: goto label18;
            case 109: goto label18;
            case 110: goto label18;
            case 111: goto label18;
            case 112: goto label18;
            case 113: goto label18;
            case 114: goto label18;
            case 115: goto label18;
            case 116: goto label18;
            case 117: goto label18;
            case 118: goto label07;
            case 119: goto label08;
            case 120: goto label04;
            case 121: goto label05;
            case 122: goto label09;
            case 123: goto label18;
            case 124: goto label11;
            case 125: goto label18;
            case 126: goto label10;
            case 127: goto label06;
            case 128: goto label12;
            case 129: goto label13;
            case 130: goto label14;
            case 131: goto label15;
            case 132: goto label16;
            case 133: goto label17;
            default: goto label18;
        };

     label03:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(81);

        goto label19;

     label04:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(120);

        goto label19;

     label05:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(121);

        goto label19;

     label06:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(127);

        goto label19;

     label07:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(118);

        goto label19;

     label08:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(119);

        goto label19;

     label09:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(122);

        goto label19;

     label10:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(126);

        goto label19;

     label11:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(124);

        goto label19;

     label12:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(128);

        goto label19;

     label13:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(129);

        goto label19;

     label14:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(130);

        goto label19;

     label15:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(131);

        goto label19;

     label16:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(132);

        goto label19;

     label17:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(133);

        goto label19;

     label18:
        $i6 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i6);

        $r3 = new bsh.ParseException;

        specialinvoke $r3.<bsh.ParseException: void <init>()>();

        throw $r3;

     label19:
        $r2 = virtualinvoke r0.<bsh.Parser: bsh.Token getToken(int)>(0);

        $i2 = $r2.<bsh.Token: int kind>;

        return $i2;
    }

    public final void ConditionalExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        java.lang.Error $r8;
        bsh.ParseException $r9;
        bsh.Parser r0;
        int $i0, $i1, $i3;
        boolean $z0, $z1, z2;
        java.lang.RuntimeException $r10;
        bsh.BSHTernaryExpression $r12;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void ConditionalOrExpression()>();

        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label01;

        $i1 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label02;

     label01:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

     label02:
        lookupswitch($i1)
        {
            case 88: goto label03;
            default: goto label14;
        };

     label03:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(88);

        virtualinvoke r0.<bsh.Parser: void Expression()>();

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(89);

        $r12 = new bsh.BSHTernaryExpression;

        specialinvoke $r12.<bsh.BSHTernaryExpression: void <init>(int)>(14);

        z2 = 1;

        $r2 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r12);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r12);

     label04:
        virtualinvoke r0.<bsh.Parser: void ConditionalExpression()>();

     label05:
        goto label15;

     label06:
        goto label14;

     label07:
        $r6 := @caughtexception;

        if 1 == 0 goto label08;

        $r11 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r12);

        z2 = 0;

        goto label09;

     label08:
        $r7 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label09:
        $z0 = $r6 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label10;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label10:
        $z1 = $r6 instanceof bsh.ParseException;

        if $z1 == 0 goto label11;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label11:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label12:
        $r4 := @caughtexception;

        goto label17;

     label13:
        throw $r4;

     label14:
        return;

     label15:
        if 1 == 0 goto label16;

        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r12, 3);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label16:
        goto label06;

     label17:
        if z2 == 0 goto label18;

        $r5 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r12, 3);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label18:
        goto label13;

        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label06 with label12;
        catch java.lang.Throwable from label07 to label13 with label12;
    }

    public final void ConditionalOrExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r6;
        bsh.ParseException $r9;
        bsh.Parser r0;
        bsh.Token r8;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10;
        boolean z0;
        bsh.BSHBinaryExpression $r10;
        bsh.JJTParserState $r2, $r3, $r4, $r7;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void ConditionalAndExpression()>();

        goto label01;

     label01:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label02;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i3)
        {
            case 96: goto label04;
            case 97: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        goto label17;

     label06:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i8 = (int) -1;

        if $i1 != $i8 goto label07;

        $i4 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label08;

     label07:
        $i4 = r0.<bsh.Parser: int jj_ntk>;

     label08:
        lookupswitch($i4)
        {
            case 96: goto label09;
            case 97: goto label10;
            default: goto label11;
        };

     label09:
        r8 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(96);

        goto label12;

     label10:
        r8 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(97);

        goto label12;

     label11:
        $i10 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i10);

        $r9 = new bsh.ParseException;

        specialinvoke $r9.<bsh.ParseException: void <init>()>();

        throw $r9;

     label12:
        virtualinvoke r0.<bsh.Parser: void ConditionalAndExpression()>();

        $r10 = new bsh.BSHBinaryExpression;

        specialinvoke $r10.<bsh.BSHBinaryExpression: void <init>(int)>(15);

        z0 = 1;

        $r2 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r10);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r10);

     label13:
        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        z0 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

        $i2 = r8.<bsh.Token: int kind>;

        $r10.<bsh.BSHBinaryExpression: int kind> = $i2;

        goto label18;

     label14:
        goto label01;

     label15:
        $r6 := @caughtexception;

        goto label20;

     label16:
        throw $r6;

     label17:
        return;

     label18:
        if 0 == 0 goto label19;

        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label19:
        goto label14;

     label20:
        if z0 == 0 goto label21;

        $r7 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label21:
        goto label16;

        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public final void ConditionalAndExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r6;
        bsh.ParseException $r9;
        bsh.Parser r0;
        bsh.Token r8;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10;
        boolean z0;
        bsh.BSHBinaryExpression $r10;
        bsh.JJTParserState $r2, $r3, $r4, $r7;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void InclusiveOrExpression()>();

        goto label01;

     label01:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label02;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i3)
        {
            case 98: goto label04;
            case 99: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        goto label17;

     label06:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i8 = (int) -1;

        if $i1 != $i8 goto label07;

        $i4 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label08;

     label07:
        $i4 = r0.<bsh.Parser: int jj_ntk>;

     label08:
        lookupswitch($i4)
        {
            case 98: goto label09;
            case 99: goto label10;
            default: goto label11;
        };

     label09:
        r8 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(98);

        goto label12;

     label10:
        r8 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(99);

        goto label12;

     label11:
        $i10 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i10);

        $r9 = new bsh.ParseException;

        specialinvoke $r9.<bsh.ParseException: void <init>()>();

        throw $r9;

     label12:
        virtualinvoke r0.<bsh.Parser: void InclusiveOrExpression()>();

        $r10 = new bsh.BSHBinaryExpression;

        specialinvoke $r10.<bsh.BSHBinaryExpression: void <init>(int)>(15);

        z0 = 1;

        $r2 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r10);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r10);

     label13:
        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        z0 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

        $i2 = r8.<bsh.Token: int kind>;

        $r10.<bsh.BSHBinaryExpression: int kind> = $i2;

        goto label18;

     label14:
        goto label01;

     label15:
        $r6 := @caughtexception;

        goto label20;

     label16:
        throw $r6;

     label17:
        return;

     label18:
        if 0 == 0 goto label19;

        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label19:
        goto label14;

     label20:
        if z0 == 0 goto label21;

        $r7 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label21:
        goto label16;

        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public final void InclusiveOrExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r6;
        bsh.ParseException $r9;
        bsh.Parser r0;
        bsh.Token r8;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10;
        boolean z0;
        bsh.BSHBinaryExpression $r10;
        bsh.JJTParserState $r2, $r3, $r4, $r7;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void ExclusiveOrExpression()>();

        goto label01;

     label01:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label02;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i3)
        {
            case 108: goto label04;
            case 109: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        goto label17;

     label06:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i8 = (int) -1;

        if $i1 != $i8 goto label07;

        $i4 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label08;

     label07:
        $i4 = r0.<bsh.Parser: int jj_ntk>;

     label08:
        lookupswitch($i4)
        {
            case 108: goto label09;
            case 109: goto label10;
            default: goto label11;
        };

     label09:
        r8 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(108);

        goto label12;

     label10:
        r8 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(109);

        goto label12;

     label11:
        $i10 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i10);

        $r9 = new bsh.ParseException;

        specialinvoke $r9.<bsh.ParseException: void <init>()>();

        throw $r9;

     label12:
        virtualinvoke r0.<bsh.Parser: void ExclusiveOrExpression()>();

        $r10 = new bsh.BSHBinaryExpression;

        specialinvoke $r10.<bsh.BSHBinaryExpression: void <init>(int)>(15);

        z0 = 1;

        $r2 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r10);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r10);

     label13:
        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        z0 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

        $i2 = r8.<bsh.Token: int kind>;

        $r10.<bsh.BSHBinaryExpression: int kind> = $i2;

        goto label18;

     label14:
        goto label01;

     label15:
        $r6 := @caughtexception;

        goto label20;

     label16:
        throw $r6;

     label17:
        return;

     label18:
        if 0 == 0 goto label19;

        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label19:
        goto label14;

     label20:
        if z0 == 0 goto label21;

        $r7 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label21:
        goto label16;

        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public final void ExclusiveOrExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r6;
        bsh.BSHBinaryExpression $r8;
        bsh.Parser r0;
        bsh.Token $r1;
        int $i0, $i1, $i2, $i4;
        bsh.JJTParserState $r3, $r4, $r5, $r7;
        boolean z0;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void AndExpression()>();

        goto label01;

     label01:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label02;

        $i2 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i2 = r0.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i2)
        {
            case 110: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        goto label11;

     label06:
        $r1 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(110);

        virtualinvoke r0.<bsh.Parser: void AndExpression()>();

        $r8 = new bsh.BSHBinaryExpression;

        specialinvoke $r8.<bsh.BSHBinaryExpression: void <init>(int)>(15);

        z0 = 1;

        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r8);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r8);

     label07:
        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r8, 2);

        z0 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r8);

        $i1 = $r1.<bsh.Token: int kind>;

        $r8.<bsh.BSHBinaryExpression: int kind> = $i1;

        goto label12;

     label08:
        goto label01;

     label09:
        $r6 := @caughtexception;

        goto label14;

     label10:
        throw $r6;

     label11:
        return;

     label12:
        if 0 == 0 goto label13;

        $r5 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r8, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r8);

     label13:
        goto label08;

     label14:
        if z0 == 0 goto label15;

        $r7 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r8, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r8);

     label15:
        goto label10;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public final void AndExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r6;
        bsh.ParseException $r9;
        bsh.Parser r0;
        bsh.Token r8;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10;
        boolean z0;
        bsh.BSHBinaryExpression $r10;
        bsh.JJTParserState $r2, $r3, $r4, $r7;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void EqualityExpression()>();

        goto label01;

     label01:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label02;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i3)
        {
            case 106: goto label04;
            case 107: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        goto label17;

     label06:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i8 = (int) -1;

        if $i1 != $i8 goto label07;

        $i4 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label08;

     label07:
        $i4 = r0.<bsh.Parser: int jj_ntk>;

     label08:
        lookupswitch($i4)
        {
            case 106: goto label09;
            case 107: goto label10;
            default: goto label11;
        };

     label09:
        r8 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(106);

        goto label12;

     label10:
        r8 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(107);

        goto label12;

     label11:
        $i10 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i10);

        $r9 = new bsh.ParseException;

        specialinvoke $r9.<bsh.ParseException: void <init>()>();

        throw $r9;

     label12:
        virtualinvoke r0.<bsh.Parser: void EqualityExpression()>();

        $r10 = new bsh.BSHBinaryExpression;

        specialinvoke $r10.<bsh.BSHBinaryExpression: void <init>(int)>(15);

        z0 = 1;

        $r2 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r10);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r10);

     label13:
        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        z0 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

        $i2 = r8.<bsh.Token: int kind>;

        $r10.<bsh.BSHBinaryExpression: int kind> = $i2;

        goto label18;

     label14:
        goto label01;

     label15:
        $r6 := @caughtexception;

        goto label20;

     label16:
        throw $r6;

     label17:
        return;

     label18:
        if 0 == 0 goto label19;

        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label19:
        goto label14;

     label20:
        if z0 == 0 goto label21;

        $r7 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label21:
        goto label16;

        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public final void EqualityExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r6;
        bsh.ParseException $r9;
        bsh.Parser r0;
        bsh.Token r8;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10;
        boolean z0;
        bsh.BSHBinaryExpression $r10;
        bsh.JJTParserState $r2, $r3, $r4, $r7;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void InstanceOfExpression()>();

        goto label01;

     label01:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label02;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i3)
        {
            case 90: goto label04;
            case 95: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        goto label17;

     label06:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i8 = (int) -1;

        if $i1 != $i8 goto label07;

        $i4 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label08;

     label07:
        $i4 = r0.<bsh.Parser: int jj_ntk>;

     label08:
        lookupswitch($i4)
        {
            case 90: goto label09;
            case 95: goto label10;
            default: goto label11;
        };

     label09:
        r8 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(90);

        goto label12;

     label10:
        r8 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(95);

        goto label12;

     label11:
        $i10 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i10);

        $r9 = new bsh.ParseException;

        specialinvoke $r9.<bsh.ParseException: void <init>()>();

        throw $r9;

     label12:
        virtualinvoke r0.<bsh.Parser: void InstanceOfExpression()>();

        $r10 = new bsh.BSHBinaryExpression;

        specialinvoke $r10.<bsh.BSHBinaryExpression: void <init>(int)>(15);

        z0 = 1;

        $r2 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r10);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r10);

     label13:
        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        z0 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

        $i2 = r8.<bsh.Token: int kind>;

        $r10.<bsh.BSHBinaryExpression: int kind> = $i2;

        goto label18;

     label14:
        goto label01;

     label15:
        $r6 := @caughtexception;

        goto label20;

     label16:
        throw $r6;

     label17:
        return;

     label18:
        if 0 == 0 goto label19;

        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label19:
        goto label14;

     label20:
        if z0 == 0 goto label21;

        $r7 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label21:
        goto label16;

        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public final void InstanceOfExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r6;
        bsh.BSHBinaryExpression $r8;
        bsh.Parser r0;
        bsh.Token $r1;
        int $i0, $i1, $i2, $i4;
        bsh.JJTParserState $r3, $r4, $r5, $r7;
        boolean z0;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void RelationalExpression()>();

        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label01;

        $i2 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label02;

     label01:
        $i2 = r0.<bsh.Parser: int jj_ntk>;

     label02:
        lookupswitch($i2)
        {
            case 35: goto label03;
            default: goto label08;
        };

     label03:
        $r1 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(35);

        virtualinvoke r0.<bsh.Parser: void Type()>();

        $r8 = new bsh.BSHBinaryExpression;

        specialinvoke $r8.<bsh.BSHBinaryExpression: void <init>(int)>(15);

        z0 = 1;

        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r8);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r8);

     label04:
        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r8, 2);

        z0 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r8);

        $i1 = $r1.<bsh.Token: int kind>;

        $r8.<bsh.BSHBinaryExpression: int kind> = $i1;

        goto label09;

     label05:
        goto label08;

     label06:
        $r6 := @caughtexception;

        goto label11;

     label07:
        throw $r6;

     label08:
        return;

     label09:
        if 0 == 0 goto label10;

        $r5 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r8, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r8);

     label10:
        goto label05;

     label11:
        if z0 == 0 goto label12;

        $r7 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r8, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r8);

     label12:
        goto label07;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public final void RelationalExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r3;
        bsh.ParseException $r9;
        bsh.Parser r0;
        bsh.Token r5;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10;
        boolean z0;
        bsh.BSHBinaryExpression $r10;
        bsh.JJTParserState $r1, $r4, $r7, $r8;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void ShiftExpression()>();

        goto label01;

     label01:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label02;

        $i2 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i2 = r0.<bsh.Parser: int jj_ntk>;

     label03:
        tableswitch($i2)
        {
            case 82: goto label04;
            case 83: goto label04;
            case 84: goto label04;
            case 85: goto label04;
            case 86: goto label05;
            case 87: goto label05;
            case 88: goto label05;
            case 89: goto label05;
            case 90: goto label05;
            case 91: goto label04;
            case 92: goto label04;
            case 93: goto label04;
            case 94: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        goto label23;

     label06:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i8 = (int) -1;

        if $i1 != $i8 goto label07;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label08;

     label07:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label08:
        tableswitch($i3)
        {
            case 82: goto label11;
            case 83: goto label12;
            case 84: goto label09;
            case 85: goto label10;
            case 86: goto label17;
            case 87: goto label17;
            case 88: goto label17;
            case 89: goto label17;
            case 90: goto label17;
            case 91: goto label13;
            case 92: goto label14;
            case 93: goto label15;
            case 94: goto label16;
            default: goto label17;
        };

     label09:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(84);

        goto label18;

     label10:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(85);

        goto label18;

     label11:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(82);

        goto label18;

     label12:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(83);

        goto label18;

     label13:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(91);

        goto label18;

     label14:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(92);

        goto label18;

     label15:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(93);

        goto label18;

     label16:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(94);

        goto label18;

     label17:
        $i10 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i10);

        $r9 = new bsh.ParseException;

        specialinvoke $r9.<bsh.ParseException: void <init>()>();

        throw $r9;

     label18:
        virtualinvoke r0.<bsh.Parser: void ShiftExpression()>();

        $r10 = new bsh.BSHBinaryExpression;

        specialinvoke $r10.<bsh.BSHBinaryExpression: void <init>(int)>(15);

        z0 = 1;

        $r7 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r10);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r10);

     label19:
        $r8 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        z0 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

        $i4 = r5.<bsh.Token: int kind>;

        $r10.<bsh.BSHBinaryExpression: int kind> = $i4;

        goto label24;

     label20:
        goto label01;

     label21:
        $r3 := @caughtexception;

        goto label26;

     label22:
        throw $r3;

     label23:
        return;

     label24:
        if 0 == 0 goto label25;

        $r1 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r1.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label25:
        goto label20;

     label26:
        if z0 == 0 goto label27;

        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label27:
        goto label22;

        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    public final void ShiftExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r3;
        bsh.ParseException $r9;
        bsh.Parser r0;
        bsh.Token r5;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10;
        boolean z0;
        bsh.BSHBinaryExpression $r10;
        bsh.JJTParserState $r1, $r4, $r7, $r8;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void AdditiveExpression()>();

        goto label01;

     label01:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label02;

        $i2 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i2 = r0.<bsh.Parser: int jj_ntk>;

     label03:
        tableswitch($i2)
        {
            case 112: goto label04;
            case 113: goto label04;
            case 114: goto label04;
            case 115: goto label04;
            case 116: goto label04;
            case 117: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        goto label21;

     label06:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i8 = (int) -1;

        if $i1 != $i8 goto label07;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label08;

     label07:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label08:
        tableswitch($i3)
        {
            case 112: goto label09;
            case 113: goto label10;
            case 114: goto label11;
            case 115: goto label12;
            case 116: goto label13;
            case 117: goto label14;
            default: goto label15;
        };

     label09:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(112);

        goto label16;

     label10:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(113);

        goto label16;

     label11:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(114);

        goto label16;

     label12:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(115);

        goto label16;

     label13:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(116);

        goto label16;

     label14:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(117);

        goto label16;

     label15:
        $i10 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i10);

        $r9 = new bsh.ParseException;

        specialinvoke $r9.<bsh.ParseException: void <init>()>();

        throw $r9;

     label16:
        virtualinvoke r0.<bsh.Parser: void AdditiveExpression()>();

        $r10 = new bsh.BSHBinaryExpression;

        specialinvoke $r10.<bsh.BSHBinaryExpression: void <init>(int)>(15);

        z0 = 1;

        $r7 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r10);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r10);

     label17:
        $r8 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        z0 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

        $i4 = r5.<bsh.Token: int kind>;

        $r10.<bsh.BSHBinaryExpression: int kind> = $i4;

        goto label22;

     label18:
        goto label01;

     label19:
        $r3 := @caughtexception;

        goto label24;

     label20:
        throw $r3;

     label21:
        return;

     label22:
        if 0 == 0 goto label23;

        $r1 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r1.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label23:
        goto label18;

     label24:
        if z0 == 0 goto label25;

        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label25:
        goto label20;

        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    public final void AdditiveExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r6;
        bsh.ParseException $r9;
        bsh.Parser r0;
        bsh.Token r8;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10;
        boolean z0;
        bsh.BSHBinaryExpression $r10;
        bsh.JJTParserState $r2, $r3, $r4, $r7;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void MultiplicativeExpression()>();

        goto label01;

     label01:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label02;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i3)
        {
            case 102: goto label04;
            case 103: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        goto label17;

     label06:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i8 = (int) -1;

        if $i1 != $i8 goto label07;

        $i4 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label08;

     label07:
        $i4 = r0.<bsh.Parser: int jj_ntk>;

     label08:
        lookupswitch($i4)
        {
            case 102: goto label09;
            case 103: goto label10;
            default: goto label11;
        };

     label09:
        r8 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(102);

        goto label12;

     label10:
        r8 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(103);

        goto label12;

     label11:
        $i10 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i10);

        $r9 = new bsh.ParseException;

        specialinvoke $r9.<bsh.ParseException: void <init>()>();

        throw $r9;

     label12:
        virtualinvoke r0.<bsh.Parser: void MultiplicativeExpression()>();

        $r10 = new bsh.BSHBinaryExpression;

        specialinvoke $r10.<bsh.BSHBinaryExpression: void <init>(int)>(15);

        z0 = 1;

        $r2 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r10);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r10);

     label13:
        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        z0 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

        $i2 = r8.<bsh.Token: int kind>;

        $r10.<bsh.BSHBinaryExpression: int kind> = $i2;

        goto label18;

     label14:
        goto label01;

     label15:
        $r6 := @caughtexception;

        goto label20;

     label16:
        throw $r6;

     label17:
        return;

     label18:
        if 0 == 0 goto label19;

        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label19:
        goto label14;

     label20:
        if z0 == 0 goto label21;

        $r7 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label21:
        goto label16;

        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public final void MultiplicativeExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r3;
        bsh.ParseException $r9;
        bsh.Parser r0;
        bsh.Token r5;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10;
        boolean z0;
        bsh.BSHBinaryExpression $r10;
        bsh.JJTParserState $r1, $r4, $r7, $r8;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void UnaryExpression()>();

        goto label01;

     label01:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label02;

        $i2 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i2 = r0.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i2)
        {
            case 104: goto label04;
            case 105: goto label04;
            case 111: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        goto label18;

     label06:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i8 = (int) -1;

        if $i1 != $i8 goto label07;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label08;

     label07:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label08:
        lookupswitch($i3)
        {
            case 104: goto label09;
            case 105: goto label10;
            case 111: goto label11;
            default: goto label12;
        };

     label09:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(104);

        goto label13;

     label10:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(105);

        goto label13;

     label11:
        r5 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(111);

        goto label13;

     label12:
        $i10 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i10);

        $r9 = new bsh.ParseException;

        specialinvoke $r9.<bsh.ParseException: void <init>()>();

        throw $r9;

     label13:
        virtualinvoke r0.<bsh.Parser: void UnaryExpression()>();

        $r10 = new bsh.BSHBinaryExpression;

        specialinvoke $r10.<bsh.BSHBinaryExpression: void <init>(int)>(15);

        z0 = 1;

        $r7 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r10);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r10);

     label14:
        $r8 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        z0 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

        $i4 = r5.<bsh.Token: int kind>;

        $r10.<bsh.BSHBinaryExpression: int kind> = $i4;

        goto label19;

     label15:
        goto label01;

     label16:
        $r3 := @caughtexception;

        goto label21;

     label17:
        throw $r3;

     label18:
        return;

     label19:
        if 0 == 0 goto label20;

        $r1 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r1.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label20:
        goto label15;

     label21:
        if z0 == 0 goto label22;

        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r10, 2);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r10);

     label22:
        goto label17;

        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    public final void UnaryExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r7;
        bsh.ParseException $r10, $r12;
        bsh.Parser r0;
        bsh.Token r9;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10, $i12;
        boolean z0;
        bsh.BSHUnaryExpression $r11;
        bsh.JJTParserState $r2, $r3, $r4, $r8;

        r0 := @this: bsh.Parser;

        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label01;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label02;

     label01:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label02:
        tableswitch($i3)
        {
            case 11: goto label16;
            case 12: goto label17;
            case 13: goto label17;
            case 14: goto label16;
            case 15: goto label17;
            case 16: goto label17;
            case 17: goto label16;
            case 18: goto label17;
            case 19: goto label17;
            case 20: goto label17;
            case 21: goto label17;
            case 22: goto label16;
            case 23: goto label17;
            case 24: goto label17;
            case 25: goto label17;
            case 26: goto label16;
            case 27: goto label17;
            case 28: goto label17;
            case 29: goto label16;
            case 30: goto label17;
            case 31: goto label17;
            case 32: goto label17;
            case 33: goto label17;
            case 34: goto label17;
            case 35: goto label17;
            case 36: goto label16;
            case 37: goto label17;
            case 38: goto label16;
            case 39: goto label17;
            case 40: goto label16;
            case 41: goto label16;
            case 42: goto label17;
            case 43: goto label17;
            case 44: goto label17;
            case 45: goto label17;
            case 46: goto label17;
            case 47: goto label16;
            case 48: goto label17;
            case 49: goto label17;
            case 50: goto label17;
            case 51: goto label17;
            case 52: goto label17;
            case 53: goto label17;
            case 54: goto label17;
            case 55: goto label16;
            case 56: goto label17;
            case 57: goto label16;
            case 58: goto label17;
            case 59: goto label17;
            case 60: goto label16;
            case 61: goto label17;
            case 62: goto label17;
            case 63: goto label17;
            case 64: goto label16;
            case 65: goto label17;
            case 66: goto label16;
            case 67: goto label16;
            case 68: goto label17;
            case 69: goto label16;
            case 70: goto label17;
            case 71: goto label17;
            case 72: goto label16;
            case 73: goto label17;
            case 74: goto label17;
            case 75: goto label17;
            case 76: goto label17;
            case 77: goto label17;
            case 78: goto label17;
            case 79: goto label17;
            case 80: goto label17;
            case 81: goto label17;
            case 82: goto label17;
            case 83: goto label17;
            case 84: goto label17;
            case 85: goto label17;
            case 86: goto label16;
            case 87: goto label16;
            case 88: goto label17;
            case 89: goto label17;
            case 90: goto label17;
            case 91: goto label17;
            case 92: goto label17;
            case 93: goto label17;
            case 94: goto label17;
            case 95: goto label17;
            case 96: goto label17;
            case 97: goto label17;
            case 98: goto label17;
            case 99: goto label17;
            case 100: goto label14;
            case 101: goto label15;
            case 102: goto label03;
            case 103: goto label03;
            default: goto label17;
        };

     label03:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i8 = (int) -1;

        if $i1 != $i8 goto label04;

        $i4 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label05;

     label04:
        $i4 = r0.<bsh.Parser: int jj_ntk>;

     label05:
        lookupswitch($i4)
        {
            case 102: goto label06;
            case 103: goto label07;
            default: goto label08;
        };

     label06:
        r9 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(102);

        goto label09;

     label07:
        r9 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(103);

        goto label09;

     label08:
        $i10 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i10);

        $r10 = new bsh.ParseException;

        specialinvoke $r10.<bsh.ParseException: void <init>()>();

        throw $r10;

     label09:
        virtualinvoke r0.<bsh.Parser: void UnaryExpression()>();

        $r11 = new bsh.BSHUnaryExpression;

        specialinvoke $r11.<bsh.BSHUnaryExpression: void <init>(int)>(16);

        z0 = 1;

        $r2 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r11);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r11);

     label10:
        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r11, 1);

        z0 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r11);

        $i2 = r9.<bsh.Token: int kind>;

        $r11.<bsh.BSHUnaryExpression: int kind> = $i2;

        goto label19;

     label11:
        goto label18;

     label12:
        $r7 := @caughtexception;

        goto label21;

     label13:
        throw $r7;

     label14:
        virtualinvoke r0.<bsh.Parser: void PreIncrementExpression()>();

        goto label18;

     label15:
        virtualinvoke r0.<bsh.Parser: void PreDecrementExpression()>();

        goto label18;

     label16:
        virtualinvoke r0.<bsh.Parser: void UnaryExpressionNotPlusMinus()>();

        goto label18;

     label17:
        $i12 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i12);

        $r12 = new bsh.ParseException;

        specialinvoke $r12.<bsh.ParseException: void <init>()>();

        throw $r12;

     label18:
        return;

     label19:
        if 0 == 0 goto label20;

        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r11, 1);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r11);

     label20:
        goto label11;

     label21:
        if z0 == 0 goto label22;

        $r8 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r11, 1);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r11);

     label22:
        goto label13;

        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public final void PreIncrementExpression() throws bsh.ParseException
    {
        bsh.BSHUnaryExpression $r2;
        java.lang.Throwable $r6;
        bsh.Parser r0;
        bsh.Token $r1;
        int $i0;
        bsh.JJTParserState $r3, $r4, $r5, $r7;
        boolean z0;

        r0 := @this: bsh.Parser;

        $r1 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(100);

        virtualinvoke r0.<bsh.Parser: void PrimaryExpression()>();

        $r2 = new bsh.BSHUnaryExpression;

        specialinvoke $r2.<bsh.BSHUnaryExpression: void <init>(int)>(16);

        z0 = 1;

        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r2);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r2);

     label1:
        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r2, 1);

        z0 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r2);

        $i0 = $r1.<bsh.Token: int kind>;

        $r2.<bsh.BSHUnaryExpression: int kind> = $i0;

        goto label6;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        goto label8;

     label4:
        throw $r6;

     label5:
        return;

     label6:
        if 0 == 0 goto label7;

        $r5 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r2, 1);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r2);

     label7:
        goto label2;

     label8:
        if z0 == 0 goto label9;

        $r7 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r2, 1);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r2);

     label9:
        goto label4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void PreDecrementExpression() throws bsh.ParseException
    {
        bsh.BSHUnaryExpression $r2;
        java.lang.Throwable $r6;
        bsh.Parser r0;
        bsh.Token $r1;
        int $i0;
        bsh.JJTParserState $r3, $r4, $r5, $r7;
        boolean z0;

        r0 := @this: bsh.Parser;

        $r1 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(101);

        virtualinvoke r0.<bsh.Parser: void PrimaryExpression()>();

        $r2 = new bsh.BSHUnaryExpression;

        specialinvoke $r2.<bsh.BSHUnaryExpression: void <init>(int)>(16);

        z0 = 1;

        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r2);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r2);

     label1:
        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r2, 1);

        z0 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r2);

        $i0 = $r1.<bsh.Token: int kind>;

        $r2.<bsh.BSHUnaryExpression: int kind> = $i0;

        goto label6;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        goto label8;

     label4:
        throw $r6;

     label5:
        return;

     label6:
        if 0 == 0 goto label7;

        $r5 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r2, 1);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r2);

     label7:
        goto label2;

     label8:
        if z0 == 0 goto label9;

        $r7 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r2, 1);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r2);

     label9:
        goto label4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void UnaryExpressionNotPlusMinus() throws bsh.ParseException
    {
        java.lang.Throwable $r7;
        bsh.ParseException $r10, $r12;
        bsh.Parser r0;
        bsh.Token r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12, $i14, $i16;
        boolean $z0, z1;
        bsh.BSHUnaryExpression $r11;
        bsh.JJTParserState $r2, $r3, $r4, $r8;

        r0 := @this: bsh.Parser;

        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i8 = (int) -1;

        if $i0 != $i8 goto label01;

        $i4 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label02;

     label01:
        $i4 = r0.<bsh.Parser: int jj_ntk>;

     label02:
        lookupswitch($i4)
        {
            case 86: goto label03;
            case 87: goto label03;
            default: goto label14;
        };

     label03:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i10 = (int) -1;

        if $i1 != $i10 goto label04;

        $i5 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label05;

     label04:
        $i5 = r0.<bsh.Parser: int jj_ntk>;

     label05:
        lookupswitch($i5)
        {
            case 86: goto label07;
            case 87: goto label06;
            default: goto label08;
        };

     label06:
        r9 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(87);

        goto label09;

     label07:
        r9 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(86);

        goto label09;

     label08:
        $i12 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i12);

        $r10 = new bsh.ParseException;

        specialinvoke $r10.<bsh.ParseException: void <init>()>();

        throw $r10;

     label09:
        virtualinvoke r0.<bsh.Parser: void UnaryExpression()>();

        $r11 = new bsh.BSHUnaryExpression;

        specialinvoke $r11.<bsh.BSHUnaryExpression: void <init>(int)>(16);

        z1 = 1;

        $r2 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r11);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r11);

     label10:
        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r11, 1);

        z1 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r11);

        $i2 = r9.<bsh.Token: int kind>;

        $r11.<bsh.BSHUnaryExpression: int kind> = $i2;

        goto label21;

     label11:
        goto label20;

     label12:
        $r7 := @caughtexception;

        goto label23;

     label13:
        throw $r7;

     label14:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_2_9(int)>(2147483647);

        if $z0 == 0 goto label15;

        virtualinvoke r0.<bsh.Parser: void CastExpression()>();

        goto label20;

     label15:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

        $i14 = (int) -1;

        if $i3 != $i14 goto label16;

        $i6 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label17;

     label16:
        $i6 = r0.<bsh.Parser: int jj_ntk>;

     label17:
        tableswitch($i6)
        {
            case 11: goto label18;
            case 12: goto label19;
            case 13: goto label19;
            case 14: goto label18;
            case 15: goto label19;
            case 16: goto label19;
            case 17: goto label18;
            case 18: goto label19;
            case 19: goto label19;
            case 20: goto label19;
            case 21: goto label19;
            case 22: goto label18;
            case 23: goto label19;
            case 24: goto label19;
            case 25: goto label19;
            case 26: goto label18;
            case 27: goto label19;
            case 28: goto label19;
            case 29: goto label18;
            case 30: goto label19;
            case 31: goto label19;
            case 32: goto label19;
            case 33: goto label19;
            case 34: goto label19;
            case 35: goto label19;
            case 36: goto label18;
            case 37: goto label19;
            case 38: goto label18;
            case 39: goto label19;
            case 40: goto label18;
            case 41: goto label18;
            case 42: goto label19;
            case 43: goto label19;
            case 44: goto label19;
            case 45: goto label19;
            case 46: goto label19;
            case 47: goto label18;
            case 48: goto label19;
            case 49: goto label19;
            case 50: goto label19;
            case 51: goto label19;
            case 52: goto label19;
            case 53: goto label19;
            case 54: goto label19;
            case 55: goto label18;
            case 56: goto label19;
            case 57: goto label18;
            case 58: goto label19;
            case 59: goto label19;
            case 60: goto label18;
            case 61: goto label19;
            case 62: goto label19;
            case 63: goto label19;
            case 64: goto label18;
            case 65: goto label19;
            case 66: goto label18;
            case 67: goto label18;
            case 68: goto label19;
            case 69: goto label18;
            case 70: goto label19;
            case 71: goto label19;
            case 72: goto label18;
            default: goto label19;
        };

     label18:
        virtualinvoke r0.<bsh.Parser: void PostfixExpression()>();

        goto label20;

     label19:
        $i16 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i16);

        $r12 = new bsh.ParseException;

        specialinvoke $r12.<bsh.ParseException: void <init>()>();

        throw $r12;

     label20:
        return;

     label21:
        if 0 == 0 goto label22;

        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r11, 1);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r11);

     label22:
        goto label11;

     label23:
        if z1 == 0 goto label24;

        $r8 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r11, 1);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r11);

     label24:
        goto label13;

        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public final void CastLookahead() throws bsh.ParseException
    {
        bsh.ParseException $r3, $r4;
        bsh.Parser r0;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i9, $i11;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_2_10(int)>(2);

        if $z0 == 0 goto label01;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        virtualinvoke r0.<bsh.Parser: void PrimitiveType()>();

        goto label16;

     label01:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_2_11(int)>(2147483647);

        if $z1 == 0 goto label02;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        virtualinvoke r0.<bsh.Parser: void AmbiguousName()>();

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(76);

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(77);

        goto label16;

     label02:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label03;

        $i2 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label04;

     label03:
        $i2 = r0.<bsh.Parser: int jj_ntk>;

     label04:
        lookupswitch($i2)
        {
            case 72: goto label05;
            default: goto label15;
        };

     label05:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        virtualinvoke r0.<bsh.Parser: void AmbiguousName()>();

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i7 = (int) -1;

        if $i1 != $i7 goto label06;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label07;

     label06:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label07:
        lookupswitch($i3)
        {
            case 26: goto label13;
            case 40: goto label12;
            case 41: goto label13;
            case 55: goto label13;
            case 57: goto label13;
            case 60: goto label13;
            case 64: goto label13;
            case 66: goto label13;
            case 67: goto label13;
            case 69: goto label11;
            case 72: goto label10;
            case 86: goto label09;
            case 87: goto label08;
            default: goto label14;
        };

     label08:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(87);

        goto label16;

     label09:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(86);

        goto label16;

     label10:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        goto label16;

     label11:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        goto label16;

     label12:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(40);

        goto label16;

     label13:
        virtualinvoke r0.<bsh.Parser: void Literal()>();

        goto label16;

     label14:
        $i9 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i9);

        $r3 = new bsh.ParseException;

        specialinvoke $r3.<bsh.ParseException: void <init>()>();

        throw $r3;

     label15:
        $i11 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i11);

        $r4 = new bsh.ParseException;

        specialinvoke $r4.<bsh.ParseException: void <init>()>();

        throw $r4;

     label16:
        return;
    }

    public final void PostfixExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r7;
        bsh.ParseException $r10, $r12;
        bsh.Parser r0;
        bsh.Token r9;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10, $i12;
        boolean $z0, z1;
        bsh.BSHUnaryExpression $r11;
        bsh.JJTParserState $r3, $r4, $r5, $r8;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_2_12(int)>(2147483647);

        if $z0 == 0 goto label11;

        virtualinvoke r0.<bsh.Parser: void PrimaryExpression()>();

        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i6 = (int) -1;

        if $i1 != $i6 goto label01;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label02;

     label01:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label02:
        lookupswitch($i3)
        {
            case 100: goto label03;
            case 101: goto label04;
            default: goto label05;
        };

     label03:
        r9 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(100);

        goto label06;

     label04:
        r9 = specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(101);

        goto label06;

     label05:
        $i8 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i8);

        $r10 = new bsh.ParseException;

        specialinvoke $r10.<bsh.ParseException: void <init>()>();

        throw $r10;

     label06:
        $r11 = new bsh.BSHUnaryExpression;

        specialinvoke $r11.<bsh.BSHUnaryExpression: void <init>(int)>(16);

        z1 = 1;

        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r11);

        virtualinvoke r0.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r11);

     label07:
        $r4 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r11, 1);

        z1 = 0;

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r11);

        $i2 = r9.<bsh.Token: int kind>;

        $r11.<bsh.BSHUnaryExpression: int kind> = $i2;

        $r11.<bsh.BSHUnaryExpression: boolean postfix> = 1;

        goto label17;

     label08:
        goto label16;

     label09:
        $r7 := @caughtexception;

        goto label19;

     label10:
        throw $r7;

     label11:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i10 = (int) -1;

        if $i0 != $i10 goto label12;

        $i4 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label13;

     label12:
        $i4 = r0.<bsh.Parser: int jj_ntk>;

     label13:
        tableswitch($i4)
        {
            case 11: goto label14;
            case 12: goto label15;
            case 13: goto label15;
            case 14: goto label14;
            case 15: goto label15;
            case 16: goto label15;
            case 17: goto label14;
            case 18: goto label15;
            case 19: goto label15;
            case 20: goto label15;
            case 21: goto label15;
            case 22: goto label14;
            case 23: goto label15;
            case 24: goto label15;
            case 25: goto label15;
            case 26: goto label14;
            case 27: goto label15;
            case 28: goto label15;
            case 29: goto label14;
            case 30: goto label15;
            case 31: goto label15;
            case 32: goto label15;
            case 33: goto label15;
            case 34: goto label15;
            case 35: goto label15;
            case 36: goto label14;
            case 37: goto label15;
            case 38: goto label14;
            case 39: goto label15;
            case 40: goto label14;
            case 41: goto label14;
            case 42: goto label15;
            case 43: goto label15;
            case 44: goto label15;
            case 45: goto label15;
            case 46: goto label15;
            case 47: goto label14;
            case 48: goto label15;
            case 49: goto label15;
            case 50: goto label15;
            case 51: goto label15;
            case 52: goto label15;
            case 53: goto label15;
            case 54: goto label15;
            case 55: goto label14;
            case 56: goto label15;
            case 57: goto label14;
            case 58: goto label15;
            case 59: goto label15;
            case 60: goto label14;
            case 61: goto label15;
            case 62: goto label15;
            case 63: goto label15;
            case 64: goto label14;
            case 65: goto label15;
            case 66: goto label14;
            case 67: goto label14;
            case 68: goto label15;
            case 69: goto label14;
            case 70: goto label15;
            case 71: goto label15;
            case 72: goto label14;
            default: goto label15;
        };

     label14:
        virtualinvoke r0.<bsh.Parser: void PrimaryExpression()>();

        goto label16;

     label15:
        $i12 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i12);

        $r12 = new bsh.ParseException;

        specialinvoke $r12.<bsh.ParseException: void <init>()>();

        throw $r12;

     label16:
        return;

     label17:
        if 0 == 0 goto label18;

        $r5 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r11, 1);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r11);

     label18:
        goto label08;

     label19:
        if z1 == 0 goto label20;

        $r8 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: void closeNodeScope(bsh.Node,int)>($r11, 1);

        virtualinvoke r0.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r11);

     label20:
        goto label10;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public final void CastExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r5, $r7;
        java.lang.Error $r9;
        bsh.ParseException $r10, $r14;
        bsh.Parser r1;
        int $i0, $i1, $i3, $i5;
        boolean $z0, $z1, $z2, z3;
        bsh.BSHCastExpression $r13;
        java.lang.RuntimeException $r11;
        bsh.JJTParserState $r2, $r3, $r6, $r8, $r12;

        r1 := @this: bsh.Parser;

        $r13 = new bsh.BSHCastExpression;

        specialinvoke $r13.<bsh.BSHCastExpression: void <init>(int)>(17);

        z3 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r13);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r13);

     label01:
        $z0 = specialinvoke r1.<bsh.Parser: boolean jj_2_13(int)>(2147483647);

        if $z0 == 0 goto label02;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        virtualinvoke r1.<bsh.Parser: void Type()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

        virtualinvoke r1.<bsh.Parser: void UnaryExpression()>();

        goto label07;

     label02:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label03;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label04;

     label03:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label04:
        lookupswitch($i1)
        {
            case 72: goto label05;
            default: goto label06;
        };

     label05:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        virtualinvoke r1.<bsh.Parser: void Type()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

        virtualinvoke r1.<bsh.Parser: void UnaryExpressionNotPlusMinus()>();

        goto label07;

     label06:
        $i5 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i5);

        $r14 = new bsh.ParseException;

        specialinvoke $r14.<bsh.ParseException: void <init>()>();

        throw $r14;

     label07:
        goto label17;

     label08:
        goto label16;

     label09:
        $r7 := @caughtexception;

        if 1 == 0 goto label10;

        $r12 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r12.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r13);

        z3 = 0;

        goto label11;

     label10:
        $r8 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: bsh.Node popNode()>();

     label11:
        $z1 = $r7 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label12;

        $r11 = (java.lang.RuntimeException) $r7;

        throw $r11;

     label12:
        $z2 = $r7 instanceof bsh.ParseException;

        if $z2 == 0 goto label13;

        $r10 = (bsh.ParseException) $r7;

        throw $r10;

     label13:
        $r9 = (java.lang.Error) $r7;

        throw $r9;

     label14:
        $r5 := @caughtexception;

        goto label19;

     label15:
        throw $r5;

     label16:
        return;

     label17:
        if 1 == 0 goto label18;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r13, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r13);

     label18:
        goto label08;

     label19:
        if z3 == 0 goto label20;

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r13, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r13);

     label20:
        goto label15;

        catch java.lang.Throwable from label01 to label07 with label09;
        catch java.lang.Throwable from label01 to label08 with label14;
        catch java.lang.Throwable from label09 to label15 with label14;
    }

    public final void PrimaryExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        java.lang.Error $r8;
        bsh.ParseException $r9;
        bsh.Parser r1;
        int $i0, $i1, $i3;
        boolean $z0, $z1, z2;
        java.lang.RuntimeException $r10;
        bsh.BSHPrimaryExpression $r12;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;

        r1 := @this: bsh.Parser;

        $r12 = new bsh.BSHPrimaryExpression;

        specialinvoke $r12.<bsh.BSHPrimaryExpression: void <init>(int)>(18);

        z2 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r12);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r12);

     label01:
        virtualinvoke r1.<bsh.Parser: void PrimaryPrefix()>();

        goto label02;

     label02:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label03;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label04;

     label03:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label04:
        lookupswitch($i1)
        {
            case 74: goto label05;
            case 76: goto label05;
            case 80: goto label05;
            default: goto label06;
        };

     label05:
        goto label07;

     label06:
        goto label08;

     label07:
        virtualinvoke r1.<bsh.Parser: void PrimarySuffix()>();

        goto label02;

     label08:
        goto label18;

     label09:
        goto label17;

     label10:
        $r6 := @caughtexception;

        if 1 == 0 goto label11;

        $r11 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r12);

        z2 = 0;

        goto label12;

     label11:
        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label12:
        $z0 = $r6 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label13;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label13:
        $z1 = $r6 instanceof bsh.ParseException;

        if $z1 == 0 goto label14;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label14:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label15:
        $r4 := @caughtexception;

        goto label20;

     label16:
        throw $r4;

     label17:
        return;

     label18:
        if 1 == 0 goto label19;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label19:
        goto label09;

     label20:
        if z2 == 0 goto label21;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label21:
        goto label16;

        catch java.lang.Throwable from label01 to label08 with label10;
        catch java.lang.Throwable from label01 to label09 with label15;
        catch java.lang.Throwable from label10 to label16 with label15;
    }

    public final void MethodInvocation() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        java.lang.Error $r8;
        java.lang.RuntimeException $r10;
        bsh.ParseException $r9;
        bsh.BSHMethodInvocation $r0;
        bsh.Parser r1;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;
        boolean $z0, $z1, z2;

        r1 := @this: bsh.Parser;

        $r0 = new bsh.BSHMethodInvocation;

        specialinvoke $r0.<bsh.BSHMethodInvocation: void <init>(int)>(19);

        z2 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r0);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r0);

     label01:
        virtualinvoke r1.<bsh.Parser: void AmbiguousName()>();

        virtualinvoke r1.<bsh.Parser: void Arguments()>();

     label02:
        goto label12;

     label03:
        goto label11;

     label04:
        $r6 := @caughtexception;

        if 1 == 0 goto label05;

        $r11 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r0);

        z2 = 0;

        goto label06;

     label05:
        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label06:
        $z0 = $r6 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label07;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label07:
        $z1 = $r6 instanceof bsh.ParseException;

        if $z1 == 0 goto label08;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label08:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label09:
        $r4 := @caughtexception;

        goto label14;

     label10:
        throw $r4;

     label11:
        return;

     label12:
        if 1 == 0 goto label13;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label13:
        goto label03;

     label14:
        if z2 == 0 goto label15;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label15:
        goto label10;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label10 with label09;
    }

    public final void PrimaryPrefix() throws bsh.ParseException
    {
        bsh.ParseException $r2;
        bsh.Parser r0;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i9;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label01;

        $i2 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label02;

     label01:
        $i2 = r0.<bsh.Parser: int jj_ntk>;

     label02:
        lookupswitch($i2)
        {
            case 26: goto label03;
            case 40: goto label05;
            case 41: goto label03;
            case 55: goto label03;
            case 57: goto label03;
            case 60: goto label03;
            case 64: goto label03;
            case 66: goto label03;
            case 67: goto label03;
            case 72: goto label04;
            default: goto label06;
        };

     label03:
        virtualinvoke r0.<bsh.Parser: void Literal()>();

        goto label13;

     label04:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        virtualinvoke r0.<bsh.Parser: void Expression()>();

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

        goto label13;

     label05:
        virtualinvoke r0.<bsh.Parser: void AllocationExpression()>();

        goto label13;

     label06:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_2_14(int)>(2147483647);

        if $z0 == 0 goto label07;

        virtualinvoke r0.<bsh.Parser: void MethodInvocation()>();

        goto label13;

     label07:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_2_15(int)>(2147483647);

        if $z1 == 0 goto label08;

        virtualinvoke r0.<bsh.Parser: void Type()>();

        goto label13;

     label08:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i7 = (int) -1;

        if $i1 != $i7 goto label09;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label10;

     label09:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label10:
        lookupswitch($i3)
        {
            case 69: goto label11;
            default: goto label12;
        };

     label11:
        virtualinvoke r0.<bsh.Parser: void AmbiguousName()>();

        goto label13;

     label12:
        $i9 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i9);

        $r2 = new bsh.ParseException;

        specialinvoke $r2.<bsh.ParseException: void <init>()>();

        throw $r2;

     label13:
        return;
    }

    public final void PrimarySuffix() throws bsh.ParseException
    {
        bsh.Parser r1;
        boolean $z0, $z1, $z2, z3, z4, z5;
        bsh.BSHPrimarySuffix $r19;
        bsh.JJTParserState $r2, $r4, $r6, $r7, $r8, $r10, $r12, $r14, $r18;
        java.lang.Throwable $r11, $r13;
        java.lang.Error $r15;
        bsh.ParseException $r16, $r20;
        bsh.Token $r3;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i9;
        java.lang.String $r5;
        java.lang.RuntimeException $r17;

        r1 := @this: bsh.Parser;

        $r19 = new bsh.BSHPrimarySuffix;

        specialinvoke $r19.<bsh.BSHPrimarySuffix: void <init>(int)>(20);

        z3 = 1;

        z5 = 1;

        z4 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r19);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r19);

     label01:
        $z0 = specialinvoke r1.<bsh.Parser: boolean jj_2_16(int)>(2);

        if $z0 == 0 goto label02;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(80);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(13);

        $r10 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r10.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

        $r19.<bsh.BSHPrimarySuffix: int operation> = 0;

        goto label13;

     label02:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label03;

        $i2 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label04;

     label03:
        $i2 = r1.<bsh.Parser: int jj_ntk>;

     label04:
        lookupswitch($i2)
        {
            case 74: goto label11;
            case 76: goto label05;
            case 80: goto label06;
            default: goto label12;
        };

     label05:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(76);

        virtualinvoke r1.<bsh.Parser: void Expression()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(77);

        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

        $r19.<bsh.BSHPrimarySuffix: int operation> = 1;

        goto label13;

     label06:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(80);

        $r3 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        $i1 = r1.<bsh.Parser: int jj_ntk>;

        $i7 = (int) -1;

        if $i1 != $i7 goto label07;

        $i3 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label08;

     label07:
        $i3 = r1.<bsh.Parser: int jj_ntk>;

     label08:
        lookupswitch($i3)
        {
            case 72: goto label09;
            default: goto label10;
        };

     label09:
        virtualinvoke r1.<bsh.Parser: void Arguments()>();

        goto label10;

     label10:
        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

        $r19.<bsh.BSHPrimarySuffix: int operation> = 2;

        $r5 = $r3.<bsh.Token: java.lang.String image>;

        $r19.<bsh.BSHPrimarySuffix: java.lang.String field> = $r5;

        goto label13;

     label11:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(74);

        virtualinvoke r1.<bsh.Parser: void Expression()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(75);

        $r8 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

        $r19.<bsh.BSHPrimarySuffix: int operation> = 3;

        goto label13;

     label12:
        $i9 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i9);

        $r20 = new bsh.ParseException;

        specialinvoke $r20.<bsh.ParseException: void <init>()>();

        throw $r20;

     label13:
        goto label23;

     label14:
        goto label22;

     label15:
        $r13 := @caughtexception;

        if z5 == 0 goto label16;

        $r18 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r18.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r19);

        z3 = 0;

        z4 = 0;

        goto label17;

     label16:
        $r14 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r14.<bsh.JJTParserState: bsh.Node popNode()>();

     label17:
        $z1 = $r13 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label18;

        $r17 = (java.lang.RuntimeException) $r13;

        throw $r17;

     label18:
        $z2 = $r13 instanceof bsh.ParseException;

        if $z2 == 0 goto label19;

        $r16 = (bsh.ParseException) $r13;

        throw $r16;

     label19:
        $r15 = (java.lang.Error) $r13;

        throw $r15;

     label20:
        $r11 := @caughtexception;

        goto label25;

     label21:
        throw $r11;

     label22:
        return;

     label23:
        if 0 == 0 goto label24;

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

     label24:
        goto label14;

     label25:
        if z4 == 0 goto label26;

        $r12 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r12.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

     label26:
        goto label21;

        catch java.lang.Throwable from label01 to label13 with label15;
        catch java.lang.Throwable from label01 to label14 with label20;
        catch java.lang.Throwable from label15 to label21 with label20;
    }

    public final void Literal() throws bsh.ParseException
    {
        java.lang.Float $r70;
        java.lang.Integer $r25;
        bsh.Parser r1;
        java.lang.Long $r66;
        java.lang.Exception $r41, $r48;
        bsh.BSHLiteral $r65;
        java.lang.Throwable $r33, $r35;
        java.lang.Double $r72;
        java.lang.Error $r37;
        long $l17;
        bsh.Token $r3, $r9, $r14, $r19;
        java.lang.StringBuffer $r43, $r45, $r50, $r52, $r57, $r58, $r69, $r74, $r75;
        java.lang.String $r5, $r6, $r7, $r11, $r12, $r13, $r16, $r21, $r44, $r46, $r51, $r53, $r59, r61, r62;
        java.lang.NumberFormatException $r55;
        java.lang.RuntimeException $r39;
        boolean $z0, $z1, $z2, z3, z4, z5;
        float $f0;
        bsh.JJTParserState $r2, $r4, $r8, $r10, $r15, $r20, $r26, $r28, $r30, $r34, $r36, $r40;
        bsh.ParseException $r38, $r47, $r54, $r60, $r77;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29;
        double $d0;
        char $c7, $c14;
        bsh.Primitive $r27, $r29, $r67, $r68, $r71, $r73, $r76;

        r1 := @this: bsh.Parser;

        $r65 = new bsh.BSHLiteral;

        specialinvoke $r65.<bsh.BSHLiteral: void <init>(int)>(21);

        z3 = 1;

        z5 = 1;

        z4 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r65);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r65);

     label01:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i21 = (int) -1;

        if $i0 != $i21 goto label02;

        $i19 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i19 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i19)
        {
            case 26: goto label22;
            case 41: goto label23;
            case 55: goto label22;
            case 57: goto label24;
            case 60: goto label04;
            case 64: goto label09;
            case 66: goto label14;
            case 67: goto label18;
            default: goto label25;
        };

     label04:
        $r19 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(60);

        $r20 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r20.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r65, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r65);

        r61 = $r19.<bsh.Token: java.lang.String image>;

        $i12 = virtualinvoke r61.<java.lang.String: int length()>();

        $i13 = $i12 - 1;

        $c14 = virtualinvoke r61.<java.lang.String: char charAt(int)>($i13);

        $i22 = (int) $c14;

        if $i22 == 108 goto label05;

        $i23 = (int) $c14;

        if $i23 != 76 goto label06;

     label05:
        $i15 = virtualinvoke r61.<java.lang.String: int length()>();

        $i16 = $i15 - 1;

        $r21 = virtualinvoke r61.<java.lang.String: java.lang.String substring(int,int)>(0, $i16);

        $r67 = new bsh.Primitive;

        $r66 = new java.lang.Long;

        specialinvoke $r66.<java.lang.Long: void <init>(java.lang.String)>($r21);

        $l17 = virtualinvoke $r66.<java.lang.Long: long longValue()>();

        specialinvoke $r67.<bsh.Primitive: void <init>(long)>($l17);

        $r65.<bsh.BSHLiteral: java.lang.Object value> = $r67;

        goto label26;

     label06:
        $r68 = new bsh.Primitive;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(r61);

        $i18 = virtualinvoke $r25.<java.lang.Integer: int intValue()>();

        specialinvoke $r68.<bsh.Primitive: void <init>(int)>($i18);

        $r65.<bsh.BSHLiteral: java.lang.Object value> = $r68;

     label07:
        goto label26;

     label08:
        $r55 := @caughtexception;

        $r69 = new java.lang.StringBuffer;

        specialinvoke $r69.<java.lang.StringBuffer: void <init>()>();

        $r57 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error or number too big for integer type: ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r61);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.String toString()>();

        $r60 = virtualinvoke r1.<bsh.Parser: bsh.ParseException createParseException(java.lang.String)>($r59);

        throw $r60;

     label09:
        $r14 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(64);

        $r15 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r15.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r65, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r65);

        r62 = $r14.<bsh.Token: java.lang.String image>;

        $i5 = virtualinvoke r62.<java.lang.String: int length()>();

        $i6 = $i5 - 1;

        $c7 = virtualinvoke r62.<java.lang.String: char charAt(int)>($i6);

        $i24 = (int) $c7;

        if $i24 == 102 goto label10;

        $i25 = (int) $c7;

        if $i25 != 70 goto label11;

     label10:
        $i8 = virtualinvoke r62.<java.lang.String: int length()>();

        $i9 = $i8 - 1;

        $r16 = virtualinvoke r62.<java.lang.String: java.lang.String substring(int,int)>(0, $i9);

        $r71 = new bsh.Primitive;

        $r70 = new java.lang.Float;

        specialinvoke $r70.<java.lang.Float: void <init>(java.lang.String)>($r16);

        $f0 = virtualinvoke $r70.<java.lang.Float: float floatValue()>();

        specialinvoke $r71.<bsh.Primitive: void <init>(float)>($f0);

        $r65.<bsh.BSHLiteral: java.lang.Object value> = $r71;

        goto label26;

     label11:
        $i26 = (int) $c7;

        if $i26 == 100 goto label12;

        $i27 = (int) $c7;

        if $i27 != 68 goto label13;

     label12:
        $i10 = virtualinvoke r62.<java.lang.String: int length()>();

        $i11 = $i10 - 1;

        r62 = virtualinvoke r62.<java.lang.String: java.lang.String substring(int,int)>(0, $i11);

     label13:
        $r73 = new bsh.Primitive;

        $r72 = new java.lang.Double;

        specialinvoke $r72.<java.lang.Double: void <init>(java.lang.String)>(r62);

        $d0 = virtualinvoke $r72.<java.lang.Double: double doubleValue()>();

        specialinvoke $r73.<bsh.Primitive: void <init>(double)>($d0);

        $r65.<bsh.BSHLiteral: java.lang.Object value> = $r73;

        goto label26;

     label14:
        $r9 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(66);

        $r10 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r10.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r65, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r65);

     label15:
        $r12 = $r9.<bsh.Token: java.lang.String image>;

        $r11 = $r9.<bsh.Token: java.lang.String image>;

        $i3 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String substring(int,int)>(1, $i4);

        virtualinvoke $r65.<bsh.BSHLiteral: void charSetup(java.lang.String)>($r13);

     label16:
        goto label26;

     label17:
        $r48 := @caughtexception;

        $r74 = new java.lang.StringBuffer;

        specialinvoke $r74.<java.lang.StringBuffer: void <init>()>();

        $r50 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error parsing character: ");

        $r51 = $r9.<bsh.Token: java.lang.String image>;

        $r52 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

        $r54 = virtualinvoke r1.<bsh.Parser: bsh.ParseException createParseException(java.lang.String)>($r53);

        throw $r54;

     label18:
        $r3 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(67);

        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r65, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r65);

     label19:
        $r6 = $r3.<bsh.Token: java.lang.String image>;

        $r5 = $r3.<bsh.Token: java.lang.String image>;

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(1, $i2);

        virtualinvoke $r65.<bsh.BSHLiteral: void stringSetup(java.lang.String)>($r7);

     label20:
        goto label26;

     label21:
        $r41 := @caughtexception;

        $r75 = new java.lang.StringBuffer;

        specialinvoke $r75.<java.lang.StringBuffer: void <init>()>();

        $r43 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error parsing string: ");

        $r44 = $r3.<bsh.Token: java.lang.String image>;

        $r45 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        $r47 = virtualinvoke r1.<bsh.Parser: bsh.ParseException createParseException(java.lang.String)>($r46);

        throw $r47;

     label22:
        $z0 = virtualinvoke r1.<bsh.Parser: boolean BooleanLiteral()>();

        $r30 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r30.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r65, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r65);

        $r76 = new bsh.Primitive;

        specialinvoke $r76.<bsh.Primitive: void <init>(boolean)>($z0);

        $r65.<bsh.BSHLiteral: java.lang.Object value> = $r76;

        goto label26;

     label23:
        virtualinvoke r1.<bsh.Parser: void NullLiteral()>();

        $r28 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r28.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r65, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r65);

        $r29 = <bsh.Primitive: bsh.Primitive NULL>;

        $r65.<bsh.BSHLiteral: java.lang.Object value> = $r29;

        goto label26;

     label24:
        virtualinvoke r1.<bsh.Parser: void VoidLiteral()>();

        $r26 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r26.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r65, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r65);

        $r27 = <bsh.Primitive: bsh.Primitive VOID>;

        $r65.<bsh.BSHLiteral: java.lang.Object value> = $r27;

        goto label26;

     label25:
        $i29 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i29);

        $r77 = new bsh.ParseException;

        specialinvoke $r77.<bsh.ParseException: void <init>()>();

        throw $r77;

     label26:
        goto label36;

     label27:
        goto label35;

     label28:
        $r35 := @caughtexception;

        if z4 == 0 goto label29;

        $r40 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r40.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r65);

        z3 = 0;

        z5 = 0;

        goto label30;

     label29:
        $r36 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r36.<bsh.JJTParserState: bsh.Node popNode()>();

     label30:
        $z1 = $r35 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label31;

        $r39 = (java.lang.RuntimeException) $r35;

        throw $r39;

     label31:
        $z2 = $r35 instanceof bsh.ParseException;

        if $z2 == 0 goto label32;

        $r38 = (bsh.ParseException) $r35;

        throw $r38;

     label32:
        $r37 = (java.lang.Error) $r35;

        throw $r37;

     label33:
        $r33 := @caughtexception;

        goto label38;

     label34:
        throw $r33;

     label35:
        return;

     label36:
        if 0 == 0 goto label37;

        $r8 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r65, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r65);

     label37:
        goto label27;

     label38:
        if z5 == 0 goto label39;

        $r34 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r34.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r65, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r65);

     label39:
        goto label34;

        catch java.lang.NumberFormatException from label06 to label07 with label08;
        catch java.lang.Exception from label15 to label16 with label17;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Throwable from label01 to label26 with label28;
        catch java.lang.Throwable from label01 to label27 with label33;
        catch java.lang.Throwable from label28 to label34 with label33;
    }

    public final boolean BooleanLiteral() throws bsh.ParseException
    {
        bsh.Parser r0;
        int $i0, $i1, $i3, $i5;
        bsh.ParseException $r2;

        r0 := @this: bsh.Parser;

        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $i1 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label2;

     label1:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

     label2:
        lookupswitch($i1)
        {
            case 26: goto label4;
            case 55: goto label3;
            default: goto label5;
        };

     label3:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(55);

        return 1;

     label4:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(26);

        return 0;

     label5:
        $i5 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i5);

        $r2 = new bsh.ParseException;

        specialinvoke $r2.<bsh.ParseException: void <init>()>();

        throw $r2;
    }

    public final void NullLiteral() throws bsh.ParseException
    {
        bsh.Parser r0;

        r0 := @this: bsh.Parser;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(41);

        return;
    }

    public final void VoidLiteral() throws bsh.ParseException
    {
        bsh.Parser r0;

        r0 := @this: bsh.Parser;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(57);

        return;
    }

    public final void Arguments() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        java.lang.Error $r8;
        bsh.ParseException $r9;
        bsh.Parser r1;
        bsh.BSHArguments $r12;
        int $i0, $i1, $i3;
        boolean $z0, $z1, z2;
        java.lang.RuntimeException $r10;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;

        r1 := @this: bsh.Parser;

        $r12 = new bsh.BSHArguments;

        specialinvoke $r12.<bsh.BSHArguments: void <init>(int)>(22);

        z2 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r12);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r12);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label02;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        tableswitch($i1)
        {
            case 11: goto label04;
            case 12: goto label05;
            case 13: goto label05;
            case 14: goto label04;
            case 15: goto label05;
            case 16: goto label05;
            case 17: goto label04;
            case 18: goto label05;
            case 19: goto label05;
            case 20: goto label05;
            case 21: goto label05;
            case 22: goto label04;
            case 23: goto label05;
            case 24: goto label05;
            case 25: goto label05;
            case 26: goto label04;
            case 27: goto label05;
            case 28: goto label05;
            case 29: goto label04;
            case 30: goto label05;
            case 31: goto label05;
            case 32: goto label05;
            case 33: goto label05;
            case 34: goto label05;
            case 35: goto label05;
            case 36: goto label04;
            case 37: goto label05;
            case 38: goto label04;
            case 39: goto label05;
            case 40: goto label04;
            case 41: goto label04;
            case 42: goto label05;
            case 43: goto label05;
            case 44: goto label05;
            case 45: goto label05;
            case 46: goto label05;
            case 47: goto label04;
            case 48: goto label05;
            case 49: goto label05;
            case 50: goto label05;
            case 51: goto label05;
            case 52: goto label05;
            case 53: goto label05;
            case 54: goto label05;
            case 55: goto label04;
            case 56: goto label05;
            case 57: goto label04;
            case 58: goto label05;
            case 59: goto label05;
            case 60: goto label04;
            case 61: goto label05;
            case 62: goto label05;
            case 63: goto label05;
            case 64: goto label04;
            case 65: goto label05;
            case 66: goto label04;
            case 67: goto label04;
            case 68: goto label05;
            case 69: goto label04;
            case 70: goto label05;
            case 71: goto label05;
            case 72: goto label04;
            case 73: goto label05;
            case 74: goto label05;
            case 75: goto label05;
            case 76: goto label05;
            case 77: goto label05;
            case 78: goto label05;
            case 79: goto label05;
            case 80: goto label05;
            case 81: goto label05;
            case 82: goto label05;
            case 83: goto label05;
            case 84: goto label05;
            case 85: goto label05;
            case 86: goto label04;
            case 87: goto label04;
            case 88: goto label05;
            case 89: goto label05;
            case 90: goto label05;
            case 91: goto label05;
            case 92: goto label05;
            case 93: goto label05;
            case 94: goto label05;
            case 95: goto label05;
            case 96: goto label05;
            case 97: goto label05;
            case 98: goto label05;
            case 99: goto label05;
            case 100: goto label04;
            case 101: goto label04;
            case 102: goto label04;
            case 103: goto label04;
            default: goto label05;
        };

     label04:
        virtualinvoke r1.<bsh.Parser: void ArgumentList()>();

        goto label05;

     label05:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

     label06:
        goto label16;

     label07:
        goto label15;

     label08:
        $r6 := @caughtexception;

        if 1 == 0 goto label09;

        $r11 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r12);

        z2 = 0;

        goto label10;

     label09:
        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label10:
        $z0 = $r6 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label11;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label11:
        $z1 = $r6 instanceof bsh.ParseException;

        if $z1 == 0 goto label12;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label12:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label13:
        $r4 := @caughtexception;

        goto label18;

     label14:
        throw $r4;

     label15:
        return;

     label16:
        if 1 == 0 goto label17;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label17:
        goto label07;

     label18:
        if z2 == 0 goto label19;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label19:
        goto label14;

        catch java.lang.Throwable from label01 to label06 with label08;
        catch java.lang.Throwable from label01 to label07 with label13;
        catch java.lang.Throwable from label08 to label14 with label13;
    }

    public final void ArgumentList() throws bsh.ParseException
    {
        bsh.Parser r0;
        int $i0, $i1, $i3;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void Expression()>();

        goto label1;

     label1:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        $i1 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label3;

     label2:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

     label3:
        lookupswitch($i1)
        {
            case 79: goto label4;
            default: goto label5;
        };

     label4:
        goto label6;

     label5:
        goto label7;

     label6:
        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(79);

        virtualinvoke r0.<bsh.Parser: void Expression()>();

        goto label1;

     label7:
        return;
    }

    public final void AllocationExpression() throws bsh.ParseException
    {
        java.lang.Throwable $r6, $r8;
        java.lang.Error $r10;
        bsh.ParseException $r11, $r15, $r16;
        bsh.Parser r1;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i9, $i11;
        boolean $z0, $z1, $z2, $z3, z4;
        bsh.BSHAllocationExpression $r14;
        java.lang.RuntimeException $r12;
        bsh.JJTParserState $r2, $r3, $r7, $r9, $r13;

        r1 := @this: bsh.Parser;

        $r14 = new bsh.BSHAllocationExpression;

        specialinvoke $r14.<bsh.BSHAllocationExpression: void <init>(int)>(23);

        z4 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r14);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r14);

     label01:
        $z0 = specialinvoke r1.<bsh.Parser: boolean jj_2_18(int)>(2);

        if $z0 == 0 goto label02;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(40);

        virtualinvoke r1.<bsh.Parser: void PrimitiveType()>();

        virtualinvoke r1.<bsh.Parser: void ArrayDimensions()>();

        goto label12;

     label02:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label03;

        $i2 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label04;

     label03:
        $i2 = r1.<bsh.Parser: int jj_ntk>;

     label04:
        lookupswitch($i2)
        {
            case 40: goto label05;
            default: goto label11;
        };

     label05:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(40);

        virtualinvoke r1.<bsh.Parser: void AmbiguousName()>();

        $i1 = r1.<bsh.Parser: int jj_ntk>;

        $i7 = (int) -1;

        if $i1 != $i7 goto label06;

        $i3 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label07;

     label06:
        $i3 = r1.<bsh.Parser: int jj_ntk>;

     label07:
        lookupswitch($i3)
        {
            case 72: goto label09;
            case 76: goto label08;
            default: goto label10;
        };

     label08:
        virtualinvoke r1.<bsh.Parser: void ArrayDimensions()>();

        goto label12;

     label09:
        virtualinvoke r1.<bsh.Parser: void Arguments()>();

        $z1 = specialinvoke r1.<bsh.Parser: boolean jj_2_17(int)>(2);

        if $z1 == 0 goto label12;

        virtualinvoke r1.<bsh.Parser: void Block()>();

        goto label12;

     label10:
        $i9 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i9);

        $r15 = new bsh.ParseException;

        specialinvoke $r15.<bsh.ParseException: void <init>()>();

        throw $r15;

     label11:
        $i11 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i11);

        $r16 = new bsh.ParseException;

        specialinvoke $r16.<bsh.ParseException: void <init>()>();

        throw $r16;

     label12:
        goto label22;

     label13:
        goto label21;

     label14:
        $r8 := @caughtexception;

        if 1 == 0 goto label15;

        $r13 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r13.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r14);

        z4 = 0;

        goto label16;

     label15:
        $r9 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r9.<bsh.JJTParserState: bsh.Node popNode()>();

     label16:
        $z2 = $r8 instanceof java.lang.RuntimeException;

        if $z2 == 0 goto label17;

        $r12 = (java.lang.RuntimeException) $r8;

        throw $r12;

     label17:
        $z3 = $r8 instanceof bsh.ParseException;

        if $z3 == 0 goto label18;

        $r11 = (bsh.ParseException) $r8;

        throw $r11;

     label18:
        $r10 = (java.lang.Error) $r8;

        throw $r10;

     label19:
        $r6 := @caughtexception;

        goto label24;

     label20:
        throw $r6;

     label21:
        return;

     label22:
        if 1 == 0 goto label23;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r14, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r14);

     label23:
        goto label13;

     label24:
        if z4 == 0 goto label25;

        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r14, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r14);

     label25:
        goto label20;

        catch java.lang.Throwable from label01 to label12 with label14;
        catch java.lang.Throwable from label01 to label13 with label19;
        catch java.lang.Throwable from label14 to label20 with label19;
    }

    public final void ArrayDimensions() throws bsh.ParseException
    {
        java.lang.Throwable $r5, $r7;
        java.lang.Error $r9;
        bsh.ParseException $r10, $r14;
        bsh.Parser r1;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i9;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.lang.RuntimeException $r11;
        bsh.JJTParserState $r2, $r3, $r6, $r8, $r12;
        bsh.BSHArrayDimensions $r13;

        r1 := @this: bsh.Parser;

        $r13 = new bsh.BSHArrayDimensions;

        specialinvoke $r13.<bsh.BSHArrayDimensions: void <init>(int)>(24);

        z5 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r13);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r13);

     label01:
        $z0 = specialinvoke r1.<bsh.Parser: boolean jj_2_21(int)>(2);

        if $z0 == 0 goto label04;

        goto label02;

     label02:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(76);

        virtualinvoke r1.<bsh.Parser: void Expression()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(77);

        virtualinvoke $r13.<bsh.BSHArrayDimensions: void addDefinedDimension()>();

        $z1 = specialinvoke r1.<bsh.Parser: boolean jj_2_19(int)>(2);

        if $z1 == 0 goto label03;

        goto label02;

     label03:
        $z2 = specialinvoke r1.<bsh.Parser: boolean jj_2_20(int)>(2);

        if $z2 == 0 goto label15;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(76);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(77);

        virtualinvoke $r13.<bsh.BSHArrayDimensions: void addUndefinedDimension()>();

        goto label03;

     label04:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label05;

        $i2 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label06;

     label05:
        $i2 = r1.<bsh.Parser: int jj_ntk>;

     label06:
        lookupswitch($i2)
        {
            case 76: goto label07;
            default: goto label14;
        };

     label07:
        goto label08;

     label08:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(76);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(77);

        virtualinvoke $r13.<bsh.BSHArrayDimensions: void addUndefinedDimension()>();

        $i1 = r1.<bsh.Parser: int jj_ntk>;

        $i7 = (int) -1;

        if $i1 != $i7 goto label09;

        $i3 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label10;

     label09:
        $i3 = r1.<bsh.Parser: int jj_ntk>;

     label10:
        lookupswitch($i3)
        {
            case 76: goto label11;
            default: goto label12;
        };

     label11:
        goto label08;

     label12:
        goto label13;

     label13:
        virtualinvoke r1.<bsh.Parser: void ArrayInitializer()>();

        goto label15;

     label14:
        $i9 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i9);

        $r14 = new bsh.ParseException;

        specialinvoke $r14.<bsh.ParseException: void <init>()>();

        throw $r14;

     label15:
        goto label25;

     label16:
        goto label24;

     label17:
        $r7 := @caughtexception;

        if 1 == 0 goto label18;

        $r12 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r12.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r13);

        z5 = 0;

        goto label19;

     label18:
        $r8 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: bsh.Node popNode()>();

     label19:
        $z3 = $r7 instanceof java.lang.RuntimeException;

        if $z3 == 0 goto label20;

        $r11 = (java.lang.RuntimeException) $r7;

        throw $r11;

     label20:
        $z4 = $r7 instanceof bsh.ParseException;

        if $z4 == 0 goto label21;

        $r10 = (bsh.ParseException) $r7;

        throw $r10;

     label21:
        $r9 = (java.lang.Error) $r7;

        throw $r9;

     label22:
        $r5 := @caughtexception;

        goto label27;

     label23:
        throw $r5;

     label24:
        return;

     label25:
        if 1 == 0 goto label26;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r13, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r13);

     label26:
        goto label16;

     label27:
        if z5 == 0 goto label28;

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r13, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r13);

     label28:
        goto label23;

        catch java.lang.Throwable from label01 to label15 with label17;
        catch java.lang.Throwable from label01 to label16 with label22;
        catch java.lang.Throwable from label17 to label23 with label22;
    }

    public final void Statement() throws bsh.ParseException
    {
        bsh.ParseException $r2;
        bsh.Parser r0;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i9;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_2_22(int)>(2);

        if $z0 == 0 goto label01;

        virtualinvoke r0.<bsh.Parser: void LabeledStatement()>();

        goto label23;

     label01:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label02;

        $i2 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i2 = r0.<bsh.Parser: int jj_ntk>;

     label03:
        tableswitch($i2)
        {
            case 11: goto label06;
            case 12: goto label11;
            case 13: goto label11;
            case 14: goto label06;
            case 15: goto label11;
            case 16: goto label11;
            case 17: goto label06;
            case 18: goto label11;
            case 19: goto label11;
            case 20: goto label11;
            case 21: goto label10;
            case 22: goto label06;
            case 23: goto label11;
            case 24: goto label11;
            case 25: goto label11;
            case 26: goto label06;
            case 27: goto label11;
            case 28: goto label11;
            case 29: goto label06;
            case 30: goto label11;
            case 31: goto label11;
            case 32: goto label08;
            case 33: goto label11;
            case 34: goto label11;
            case 35: goto label11;
            case 36: goto label06;
            case 37: goto label11;
            case 38: goto label06;
            case 39: goto label11;
            case 40: goto label06;
            case 41: goto label06;
            case 42: goto label11;
            case 43: goto label11;
            case 44: goto label11;
            case 45: goto label11;
            case 46: goto label11;
            case 47: goto label06;
            case 48: goto label11;
            case 49: goto label11;
            case 50: goto label07;
            case 51: goto label11;
            case 52: goto label11;
            case 53: goto label11;
            case 54: goto label11;
            case 55: goto label06;
            case 56: goto label11;
            case 57: goto label06;
            case 58: goto label11;
            case 59: goto label09;
            case 60: goto label06;
            case 61: goto label11;
            case 62: goto label11;
            case 63: goto label11;
            case 64: goto label06;
            case 65: goto label11;
            case 66: goto label06;
            case 67: goto label06;
            case 68: goto label11;
            case 69: goto label06;
            case 70: goto label11;
            case 71: goto label11;
            case 72: goto label06;
            case 73: goto label11;
            case 74: goto label04;
            case 75: goto label11;
            case 76: goto label11;
            case 77: goto label11;
            case 78: goto label05;
            case 79: goto label11;
            case 80: goto label11;
            case 81: goto label11;
            case 82: goto label11;
            case 83: goto label11;
            case 84: goto label11;
            case 85: goto label11;
            case 86: goto label06;
            case 87: goto label06;
            case 88: goto label11;
            case 89: goto label11;
            case 90: goto label11;
            case 91: goto label11;
            case 92: goto label11;
            case 93: goto label11;
            case 94: goto label11;
            case 95: goto label11;
            case 96: goto label11;
            case 97: goto label11;
            case 98: goto label11;
            case 99: goto label11;
            case 100: goto label06;
            case 101: goto label06;
            case 102: goto label06;
            case 103: goto label06;
            default: goto label11;
        };

     label04:
        virtualinvoke r0.<bsh.Parser: void Block()>();

        goto label23;

     label05:
        virtualinvoke r0.<bsh.Parser: void EmptyStatement()>();

        goto label23;

     label06:
        virtualinvoke r0.<bsh.Parser: void StatementExpression()>();

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(78);

        goto label23;

     label07:
        virtualinvoke r0.<bsh.Parser: void SwitchStatement()>();

        goto label23;

     label08:
        virtualinvoke r0.<bsh.Parser: void IfStatement()>();

        goto label23;

     label09:
        virtualinvoke r0.<bsh.Parser: void WhileStatement()>();

        goto label23;

     label10:
        virtualinvoke r0.<bsh.Parser: void DoStatement()>();

        goto label23;

     label11:
        $z1 = virtualinvoke r0.<bsh.Parser: boolean isRegularForStatement()>();

        if $z1 == 0 goto label12;

        virtualinvoke r0.<bsh.Parser: void ForStatement()>();

        goto label23;

     label12:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

        $i7 = (int) -1;

        if $i1 != $i7 goto label13;

        $i3 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label14;

     label13:
        $i3 = r0.<bsh.Parser: int jj_ntk>;

     label14:
        lookupswitch($i3)
        {
            case 12: goto label16;
            case 19: goto label17;
            case 30: goto label15;
            case 46: goto label18;
            case 51: goto label19;
            case 53: goto label20;
            case 56: goto label21;
            default: goto label22;
        };

     label15:
        virtualinvoke r0.<bsh.Parser: void EnhancedForStatement()>();

        goto label23;

     label16:
        virtualinvoke r0.<bsh.Parser: void BreakStatement()>();

        goto label23;

     label17:
        virtualinvoke r0.<bsh.Parser: void ContinueStatement()>();

        goto label23;

     label18:
        virtualinvoke r0.<bsh.Parser: void ReturnStatement()>();

        goto label23;

     label19:
        virtualinvoke r0.<bsh.Parser: void SynchronizedStatement()>();

        goto label23;

     label20:
        virtualinvoke r0.<bsh.Parser: void ThrowStatement()>();

        goto label23;

     label21:
        virtualinvoke r0.<bsh.Parser: void TryStatement()>();

        goto label23;

     label22:
        $i9 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i9);

        $r2 = new bsh.ParseException;

        specialinvoke $r2.<bsh.ParseException: void <init>()>();

        throw $r2;

     label23:
        return;
    }

    public final void LabeledStatement() throws bsh.ParseException
    {
        bsh.Parser r0;

        r0 := @this: bsh.Parser;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(89);

        virtualinvoke r0.<bsh.Parser: void Statement()>();

        return;
    }

    public final void Block() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        bsh.BSHBlock $r0;
        java.lang.Error $r8;
        bsh.ParseException $r9;
        bsh.Parser r1;
        boolean $z0, $z1, $z2, z3;
        java.lang.RuntimeException $r10;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;

        r1 := @this: bsh.Parser;

        $r0 = new bsh.BSHBlock;

        specialinvoke $r0.<bsh.BSHBlock: void <init>(int)>(25);

        z3 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r0);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r0);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(74);

        goto label02;

     label02:
        $z0 = specialinvoke r1.<bsh.Parser: boolean jj_2_23(int)>(1);

        if $z0 == 0 goto label03;

        virtualinvoke r1.<bsh.Parser: void BlockStatement()>();

        goto label02;

     label03:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(75);

     label04:
        goto label14;

     label05:
        goto label13;

     label06:
        $r6 := @caughtexception;

        if 1 == 0 goto label07;

        $r11 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r0);

        z3 = 0;

        goto label08;

     label07:
        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label08:
        $z1 = $r6 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label09;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label09:
        $z2 = $r6 instanceof bsh.ParseException;

        if $z2 == 0 goto label10;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label10:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label11:
        $r4 := @caughtexception;

        goto label16;

     label12:
        throw $r4;

     label13:
        return;

     label14:
        if 1 == 0 goto label15;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label15:
        goto label05;

     label16:
        if z3 == 0 goto label17;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label17:
        goto label12;

        catch java.lang.Throwable from label01 to label04 with label06;
        catch java.lang.Throwable from label01 to label05 with label11;
        catch java.lang.Throwable from label06 to label12 with label11;
    }

    public final void BlockStatement() throws bsh.ParseException
    {
        bsh.ParseException $r2;
        bsh.Parser r0;
        int $i0, $i1, $i3, $i5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_2_24(int)>(2147483647);

        if $z0 == 0 goto label01;

        virtualinvoke r0.<bsh.Parser: void ClassDeclaration()>();

        goto label12;

     label01:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_2_25(int)>(2147483647);

        if $z1 == 0 goto label02;

        virtualinvoke r0.<bsh.Parser: void MethodDeclaration()>();

        goto label12;

     label02:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_2_26(int)>(2147483647);

        if $z2 == 0 goto label03;

        virtualinvoke r0.<bsh.Parser: void MethodDeclaration()>();

        goto label12;

     label03:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_2_27(int)>(2147483647);

        if $z3 == 0 goto label04;

        virtualinvoke r0.<bsh.Parser: void TypedVariableDeclaration()>();

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(78);

        goto label12;

     label04:
        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_2_28(int)>(1);

        if $z4 == 0 goto label05;

        virtualinvoke r0.<bsh.Parser: void Statement()>();

        goto label12;

     label05:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label06;

        $i1 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label07;

     label06:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

     label07:
        lookupswitch($i1)
        {
            case 34: goto label08;
            case 42: goto label09;
            case 48: goto label08;
            case 68: goto label10;
            default: goto label11;
        };

     label08:
        virtualinvoke r0.<bsh.Parser: void ImportDeclaration()>();

        goto label12;

     label09:
        virtualinvoke r0.<bsh.Parser: void PackageDeclaration()>();

        goto label12;

     label10:
        virtualinvoke r0.<bsh.Parser: void FormalComment()>();

        goto label12;

     label11:
        $i5 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i5);

        $r2 = new bsh.ParseException;

        specialinvoke $r2.<bsh.ParseException: void <init>()>();

        throw $r2;

     label12:
        return;
    }

    public final void FormalComment() throws bsh.ParseException
    {
        java.lang.Throwable $r7;
        bsh.Parser r1;
        bsh.Token $r3;
        bsh.BSHFormalComment $r0;
        bsh.JJTParserState $r2, $r4, $r6, $r8;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, z3;

        r1 := @this: bsh.Parser;

        $r0 = new bsh.BSHFormalComment;

        specialinvoke $r0.<bsh.BSHFormalComment: void <init>(int)>(26);

        z3 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r0);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r0);

     label1:
        $r3 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(68);

        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        $z0 = r1.<bsh.Parser: boolean retainComments>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, $z0);

        z3 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

        $r5 = $r3.<bsh.Token: java.lang.String image>;

        $r0.<bsh.BSHFormalComment: java.lang.String text> = $r5;

        goto label6;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        goto label8;

     label4:
        throw $r7;

     label5:
        return;

     label6:
        if 0 == 0 goto label7;

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        $z1 = r1.<bsh.Parser: boolean retainComments>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, $z1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label7:
        goto label2;

     label8:
        if z3 == 0 goto label9;

        $r8 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        $z2 = r1.<bsh.Parser: boolean retainComments>;

        virtualinvoke $r8.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, $z2);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label9:
        goto label4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void EmptyStatement() throws bsh.ParseException
    {
        bsh.Parser r0;

        r0 := @this: bsh.Parser;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>(78);

        return;
    }

    public final void StatementExpression() throws bsh.ParseException
    {
        bsh.Parser r0;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void Expression()>();

        return;
    }

    public final void SwitchStatement() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        java.lang.Error $r8;
        bsh.ParseException $r9;
        bsh.Parser r1;
        int $i0, $i1, $i3;
        boolean $z0, $z1, $z2, z3;
        java.lang.RuntimeException $r10;
        bsh.BSHSwitchStatement $r12;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;

        r1 := @this: bsh.Parser;

        $r12 = new bsh.BSHSwitchStatement;

        specialinvoke $r12.<bsh.BSHSwitchStatement: void <init>(int)>(27);

        z3 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r12);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r12);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(50);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        virtualinvoke r1.<bsh.Parser: void Expression()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(74);

        goto label02;

     label02:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label03;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label04;

     label03:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label04:
        lookupswitch($i1)
        {
            case 15: goto label05;
            case 20: goto label05;
            default: goto label06;
        };

     label05:
        goto label07;

     label06:
        goto label09;

     label07:
        virtualinvoke r1.<bsh.Parser: void SwitchLabel()>();

        goto label08;

     label08:
        $z0 = specialinvoke r1.<bsh.Parser: boolean jj_2_29(int)>(1);

        if $z0 == 0 goto label02;

        virtualinvoke r1.<bsh.Parser: void BlockStatement()>();

        goto label08;

     label09:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(75);

     label10:
        goto label20;

     label11:
        goto label19;

     label12:
        $r6 := @caughtexception;

        if 1 == 0 goto label13;

        $r11 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r12);

        z3 = 0;

        goto label14;

     label13:
        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label14:
        $z1 = $r6 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label15;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label15:
        $z2 = $r6 instanceof bsh.ParseException;

        if $z2 == 0 goto label16;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label16:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label17:
        $r4 := @caughtexception;

        goto label22;

     label18:
        throw $r4;

     label19:
        return;

     label20:
        if 1 == 0 goto label21;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label21:
        goto label11;

     label22:
        if z3 == 0 goto label23;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label23:
        goto label18;

        catch java.lang.Throwable from label01 to label10 with label12;
        catch java.lang.Throwable from label01 to label11 with label17;
        catch java.lang.Throwable from label12 to label18 with label17;
    }

    public final void SwitchLabel() throws bsh.ParseException
    {
        java.lang.Throwable $r6, $r8;
        java.lang.Error $r10;
        bsh.ParseException $r11, $r15;
        bsh.Parser r1;
        bsh.BSHSwitchLabel $r14;
        int $i0, $i1, $i3, $i5;
        boolean $z0, $z1, z2, z3, z4, z5;
        java.lang.RuntimeException $r12;
        bsh.JJTParserState $r2, $r3, $r4, $r7, $r9, $r13;

        r1 := @this: bsh.Parser;

        $r14 = new bsh.BSHSwitchLabel;

        specialinvoke $r14.<bsh.BSHSwitchLabel: void <init>(int)>(28);

        z2 = 1;

        z5 = 1;

        z4 = 1;

        z3 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r14);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r14);

     label01:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label02;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i1)
        {
            case 15: goto label04;
            case 20: goto label05;
            default: goto label06;
        };

     label04:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(15);

        virtualinvoke r1.<bsh.Parser: void Expression()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(89);

        goto label07;

     label05:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(20);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(89);

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r14, 1);

        z2 = 0;

        z5 = 0;

        z4 = 0;

        z3 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r14);

        $r14.<bsh.BSHSwitchLabel: boolean isDefault> = 1;

        goto label07;

     label06:
        $i5 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i5);

        $r15 = new bsh.ParseException;

        specialinvoke $r15.<bsh.ParseException: void <init>()>();

        throw $r15;

     label07:
        goto label17;

     label08:
        goto label16;

     label09:
        $r8 := @caughtexception;

        if z4 == 0 goto label10;

        $r13 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r13.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r14);

        z2 = 0;

        z3 = 0;

        goto label11;

     label10:
        $r9 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r9.<bsh.JJTParserState: bsh.Node popNode()>();

     label11:
        $z0 = $r8 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label12;

        $r12 = (java.lang.RuntimeException) $r8;

        throw $r12;

     label12:
        $z1 = $r8 instanceof bsh.ParseException;

        if $z1 == 0 goto label13;

        $r11 = (bsh.ParseException) $r8;

        throw $r11;

     label13:
        $r10 = (java.lang.Error) $r8;

        throw $r10;

     label14:
        $r6 := @caughtexception;

        goto label19;

     label15:
        throw $r6;

     label16:
        return;

     label17:
        if z5 == 0 goto label18;

        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r14, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r14);

     label18:
        goto label08;

     label19:
        if z3 == 0 goto label20;

        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r14, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r14);

     label20:
        goto label15;

        catch java.lang.Throwable from label01 to label07 with label09;
        catch java.lang.Throwable from label01 to label08 with label14;
        catch java.lang.Throwable from label09 to label15 with label14;
    }

    public final void IfStatement() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        java.lang.Error $r8;
        bsh.BSHIfStatement $r12;
        bsh.ParseException $r9;
        bsh.Parser r1;
        int $i0, $i1, $i3;
        boolean $z0, $z1, z2;
        java.lang.RuntimeException $r10;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;

        r1 := @this: bsh.Parser;

        $r12 = new bsh.BSHIfStatement;

        specialinvoke $r12.<bsh.BSHIfStatement: void <init>(int)>(29);

        z2 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r12);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r12);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(32);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        virtualinvoke r1.<bsh.Parser: void Expression()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

        virtualinvoke r1.<bsh.Parser: void Statement()>();

        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label02;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i1)
        {
            case 23: goto label04;
            default: goto label05;
        };

     label04:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(23);

        virtualinvoke r1.<bsh.Parser: void Statement()>();

        goto label05;

     label05:
        goto label15;

     label06:
        goto label14;

     label07:
        $r6 := @caughtexception;

        if 1 == 0 goto label08;

        $r11 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r12);

        z2 = 0;

        goto label09;

     label08:
        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label09:
        $z0 = $r6 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label10;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label10:
        $z1 = $r6 instanceof bsh.ParseException;

        if $z1 == 0 goto label11;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label11:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label12:
        $r4 := @caughtexception;

        goto label17;

     label13:
        throw $r4;

     label14:
        return;

     label15:
        if 1 == 0 goto label16;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label16:
        goto label06;

     label17:
        if z2 == 0 goto label18;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label18:
        goto label13;

        catch java.lang.Throwable from label01 to label05 with label07;
        catch java.lang.Throwable from label01 to label06 with label12;
        catch java.lang.Throwable from label07 to label13 with label12;
    }

    public final void WhileStatement() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        java.lang.Error $r8;
        java.lang.RuntimeException $r10;
        bsh.ParseException $r9;
        bsh.BSHWhileStatement $r0;
        bsh.Parser r1;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;
        boolean $z0, $z1, z2;

        r1 := @this: bsh.Parser;

        $r0 = new bsh.BSHWhileStatement;

        specialinvoke $r0.<bsh.BSHWhileStatement: void <init>(int)>(30);

        z2 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r0);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r0);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(59);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        virtualinvoke r1.<bsh.Parser: void Expression()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

        virtualinvoke r1.<bsh.Parser: void Statement()>();

     label02:
        goto label12;

     label03:
        goto label11;

     label04:
        $r6 := @caughtexception;

        if 1 == 0 goto label05;

        $r11 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r0);

        z2 = 0;

        goto label06;

     label05:
        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label06:
        $z0 = $r6 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label07;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label07:
        $z1 = $r6 instanceof bsh.ParseException;

        if $z1 == 0 goto label08;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label08:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label09:
        $r4 := @caughtexception;

        goto label14;

     label10:
        throw $r4;

     label11:
        return;

     label12:
        if 1 == 0 goto label13;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label13:
        goto label03;

     label14:
        if z2 == 0 goto label15;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label15:
        goto label10;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label10 with label09;
    }

    public final void DoStatement() throws bsh.ParseException
    {
        java.lang.Throwable $r5, $r7;
        java.lang.Error $r9;
        bsh.ParseException $r10;
        bsh.Parser r1;
        boolean $z0, $z1, z2, z3, z4;
        java.lang.RuntimeException $r11;
        bsh.BSHWhileStatement $r0;
        bsh.JJTParserState $r2, $r3, $r4, $r6, $r8, $r12;

        r1 := @this: bsh.Parser;

        $r0 = new bsh.BSHWhileStatement;

        specialinvoke $r0.<bsh.BSHWhileStatement: void <init>(int)>(30);

        z2 = 1;

        z4 = 1;

        z3 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r0);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r0);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(21);

        virtualinvoke r1.<bsh.Parser: void Statement()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(59);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        virtualinvoke r1.<bsh.Parser: void Expression()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(78);

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        z2 = 0;

        z4 = 0;

        z3 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

        $r0.<bsh.BSHWhileStatement: boolean isDoStatement> = 1;

     label02:
        goto label12;

     label03:
        goto label11;

     label04:
        $r7 := @caughtexception;

        if z3 == 0 goto label05;

        $r12 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r12.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r0);

        z2 = 0;

        z4 = 0;

        goto label06;

     label05:
        $r8 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: bsh.Node popNode()>();

     label06:
        $z0 = $r7 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label07;

        $r11 = (java.lang.RuntimeException) $r7;

        throw $r11;

     label07:
        $z1 = $r7 instanceof bsh.ParseException;

        if $z1 == 0 goto label08;

        $r10 = (bsh.ParseException) $r7;

        throw $r10;

     label08:
        $r9 = (java.lang.Error) $r7;

        throw $r9;

     label09:
        $r5 := @caughtexception;

        goto label14;

     label10:
        throw $r5;

     label11:
        return;

     label12:
        if 0 == 0 goto label13;

        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label13:
        goto label03;

     label14:
        if z4 == 0 goto label15;

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label15:
        goto label10;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label10 with label09;
    }

    public final void ForStatement() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        java.lang.Error $r8;
        bsh.ParseException $r9;
        bsh.BSHForStatement $r12;
        bsh.Parser r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11;
        boolean $z0, $z1, z2;
        java.lang.RuntimeException $r10;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;

        r1 := @this: bsh.Parser;

        $r12 = new bsh.BSHForStatement;

        specialinvoke $r12.<bsh.BSHForStatement: void <init>(int)>(31);

        z2 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r12);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r12);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(30);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i7 = (int) -1;

        if $i0 != $i7 goto label02;

        $i3 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i3 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        tableswitch($i3)
        {
            case 10: goto label04;
            case 11: goto label04;
            case 12: goto label05;
            case 13: goto label05;
            case 14: goto label04;
            case 15: goto label05;
            case 16: goto label05;
            case 17: goto label04;
            case 18: goto label05;
            case 19: goto label05;
            case 20: goto label05;
            case 21: goto label05;
            case 22: goto label04;
            case 23: goto label05;
            case 24: goto label05;
            case 25: goto label05;
            case 26: goto label04;
            case 27: goto label04;
            case 28: goto label05;
            case 29: goto label04;
            case 30: goto label05;
            case 31: goto label05;
            case 32: goto label05;
            case 33: goto label05;
            case 34: goto label05;
            case 35: goto label05;
            case 36: goto label04;
            case 37: goto label05;
            case 38: goto label04;
            case 39: goto label04;
            case 40: goto label04;
            case 41: goto label04;
            case 42: goto label05;
            case 43: goto label04;
            case 44: goto label04;
            case 45: goto label04;
            case 46: goto label05;
            case 47: goto label04;
            case 48: goto label04;
            case 49: goto label04;
            case 50: goto label05;
            case 51: goto label04;
            case 52: goto label04;
            case 53: goto label05;
            case 54: goto label05;
            case 55: goto label04;
            case 56: goto label05;
            case 57: goto label04;
            case 58: goto label04;
            case 59: goto label05;
            case 60: goto label04;
            case 61: goto label05;
            case 62: goto label05;
            case 63: goto label05;
            case 64: goto label04;
            case 65: goto label05;
            case 66: goto label04;
            case 67: goto label04;
            case 68: goto label05;
            case 69: goto label04;
            case 70: goto label05;
            case 71: goto label05;
            case 72: goto label04;
            case 73: goto label05;
            case 74: goto label05;
            case 75: goto label05;
            case 76: goto label05;
            case 77: goto label05;
            case 78: goto label05;
            case 79: goto label05;
            case 80: goto label05;
            case 81: goto label05;
            case 82: goto label05;
            case 83: goto label05;
            case 84: goto label05;
            case 85: goto label05;
            case 86: goto label04;
            case 87: goto label04;
            case 88: goto label05;
            case 89: goto label05;
            case 90: goto label05;
            case 91: goto label05;
            case 92: goto label05;
            case 93: goto label05;
            case 94: goto label05;
            case 95: goto label05;
            case 96: goto label05;
            case 97: goto label05;
            case 98: goto label05;
            case 99: goto label05;
            case 100: goto label04;
            case 101: goto label04;
            case 102: goto label04;
            case 103: goto label04;
            default: goto label05;
        };

     label04:
        virtualinvoke r1.<bsh.Parser: void ForInit()>();

        $r12.<bsh.BSHForStatement: boolean hasForInit> = 1;

        goto label05;

     label05:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(78);

        $i1 = r1.<bsh.Parser: int jj_ntk>;

        $i9 = (int) -1;

        if $i1 != $i9 goto label06;

        $i4 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label07;

     label06:
        $i4 = r1.<bsh.Parser: int jj_ntk>;

     label07:
        tableswitch($i4)
        {
            case 11: goto label08;
            case 12: goto label09;
            case 13: goto label09;
            case 14: goto label08;
            case 15: goto label09;
            case 16: goto label09;
            case 17: goto label08;
            case 18: goto label09;
            case 19: goto label09;
            case 20: goto label09;
            case 21: goto label09;
            case 22: goto label08;
            case 23: goto label09;
            case 24: goto label09;
            case 25: goto label09;
            case 26: goto label08;
            case 27: goto label09;
            case 28: goto label09;
            case 29: goto label08;
            case 30: goto label09;
            case 31: goto label09;
            case 32: goto label09;
            case 33: goto label09;
            case 34: goto label09;
            case 35: goto label09;
            case 36: goto label08;
            case 37: goto label09;
            case 38: goto label08;
            case 39: goto label09;
            case 40: goto label08;
            case 41: goto label08;
            case 42: goto label09;
            case 43: goto label09;
            case 44: goto label09;
            case 45: goto label09;
            case 46: goto label09;
            case 47: goto label08;
            case 48: goto label09;
            case 49: goto label09;
            case 50: goto label09;
            case 51: goto label09;
            case 52: goto label09;
            case 53: goto label09;
            case 54: goto label09;
            case 55: goto label08;
            case 56: goto label09;
            case 57: goto label08;
            case 58: goto label09;
            case 59: goto label09;
            case 60: goto label08;
            case 61: goto label09;
            case 62: goto label09;
            case 63: goto label09;
            case 64: goto label08;
            case 65: goto label09;
            case 66: goto label08;
            case 67: goto label08;
            case 68: goto label09;
            case 69: goto label08;
            case 70: goto label09;
            case 71: goto label09;
            case 72: goto label08;
            case 73: goto label09;
            case 74: goto label09;
            case 75: goto label09;
            case 76: goto label09;
            case 77: goto label09;
            case 78: goto label09;
            case 79: goto label09;
            case 80: goto label09;
            case 81: goto label09;
            case 82: goto label09;
            case 83: goto label09;
            case 84: goto label09;
            case 85: goto label09;
            case 86: goto label08;
            case 87: goto label08;
            case 88: goto label09;
            case 89: goto label09;
            case 90: goto label09;
            case 91: goto label09;
            case 92: goto label09;
            case 93: goto label09;
            case 94: goto label09;
            case 95: goto label09;
            case 96: goto label09;
            case 97: goto label09;
            case 98: goto label09;
            case 99: goto label09;
            case 100: goto label08;
            case 101: goto label08;
            case 102: goto label08;
            case 103: goto label08;
            default: goto label09;
        };

     label08:
        virtualinvoke r1.<bsh.Parser: void Expression()>();

        $r12.<bsh.BSHForStatement: boolean hasExpression> = 1;

        goto label09;

     label09:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(78);

        $i2 = r1.<bsh.Parser: int jj_ntk>;

        $i11 = (int) -1;

        if $i2 != $i11 goto label10;

        $i5 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label11;

     label10:
        $i5 = r1.<bsh.Parser: int jj_ntk>;

     label11:
        tableswitch($i5)
        {
            case 11: goto label12;
            case 12: goto label13;
            case 13: goto label13;
            case 14: goto label12;
            case 15: goto label13;
            case 16: goto label13;
            case 17: goto label12;
            case 18: goto label13;
            case 19: goto label13;
            case 20: goto label13;
            case 21: goto label13;
            case 22: goto label12;
            case 23: goto label13;
            case 24: goto label13;
            case 25: goto label13;
            case 26: goto label12;
            case 27: goto label13;
            case 28: goto label13;
            case 29: goto label12;
            case 30: goto label13;
            case 31: goto label13;
            case 32: goto label13;
            case 33: goto label13;
            case 34: goto label13;
            case 35: goto label13;
            case 36: goto label12;
            case 37: goto label13;
            case 38: goto label12;
            case 39: goto label13;
            case 40: goto label12;
            case 41: goto label12;
            case 42: goto label13;
            case 43: goto label13;
            case 44: goto label13;
            case 45: goto label13;
            case 46: goto label13;
            case 47: goto label12;
            case 48: goto label13;
            case 49: goto label13;
            case 50: goto label13;
            case 51: goto label13;
            case 52: goto label13;
            case 53: goto label13;
            case 54: goto label13;
            case 55: goto label12;
            case 56: goto label13;
            case 57: goto label12;
            case 58: goto label13;
            case 59: goto label13;
            case 60: goto label12;
            case 61: goto label13;
            case 62: goto label13;
            case 63: goto label13;
            case 64: goto label12;
            case 65: goto label13;
            case 66: goto label12;
            case 67: goto label12;
            case 68: goto label13;
            case 69: goto label12;
            case 70: goto label13;
            case 71: goto label13;
            case 72: goto label12;
            case 73: goto label13;
            case 74: goto label13;
            case 75: goto label13;
            case 76: goto label13;
            case 77: goto label13;
            case 78: goto label13;
            case 79: goto label13;
            case 80: goto label13;
            case 81: goto label13;
            case 82: goto label13;
            case 83: goto label13;
            case 84: goto label13;
            case 85: goto label13;
            case 86: goto label12;
            case 87: goto label12;
            case 88: goto label13;
            case 89: goto label13;
            case 90: goto label13;
            case 91: goto label13;
            case 92: goto label13;
            case 93: goto label13;
            case 94: goto label13;
            case 95: goto label13;
            case 96: goto label13;
            case 97: goto label13;
            case 98: goto label13;
            case 99: goto label13;
            case 100: goto label12;
            case 101: goto label12;
            case 102: goto label12;
            case 103: goto label12;
            default: goto label13;
        };

     label12:
        virtualinvoke r1.<bsh.Parser: void ForUpdate()>();

        $r12.<bsh.BSHForStatement: boolean hasForUpdate> = 1;

        goto label13;

     label13:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

        virtualinvoke r1.<bsh.Parser: void Statement()>();

     label14:
        goto label24;

     label15:
        goto label23;

     label16:
        $r6 := @caughtexception;

        if 1 == 0 goto label17;

        $r11 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r12);

        z2 = 0;

        goto label18;

     label17:
        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label18:
        $z0 = $r6 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label19;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label19:
        $z1 = $r6 instanceof bsh.ParseException;

        if $z1 == 0 goto label20;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label20:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label21:
        $r4 := @caughtexception;

        goto label26;

     label22:
        throw $r4;

     label23:
        return;

     label24:
        if 1 == 0 goto label25;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label25:
        goto label15;

     label26:
        if z2 == 0 goto label27;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label27:
        goto label22;

        catch java.lang.Throwable from label01 to label14 with label16;
        catch java.lang.Throwable from label01 to label15 with label21;
        catch java.lang.Throwable from label16 to label22 with label21;
    }

    public final void EnhancedForStatement() throws bsh.ParseException
    {
        java.lang.Throwable $r11, $r13;
        java.lang.Error $r15;
        bsh.ParseException $r16, $r20;
        bsh.Parser r1;
        bsh.Token $r3, $r8;
        int $i0, $i1, $i3, $i5;
        java.lang.String $r5, $r10;
        boolean $z0, $z1, $z2, z3, z4, z5;
        java.lang.RuntimeException $r17;
        bsh.JJTParserState $r2, $r4, $r6, $r9, $r12, $r14, $r18;
        bsh.BSHEnhancedForStatement $r19;

        r1 := @this: bsh.Parser;

        $r19 = new bsh.BSHEnhancedForStatement;

        specialinvoke $r19.<bsh.BSHEnhancedForStatement: void <init>(int)>(32);

        z3 = 1;

        z5 = 1;

        z4 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r19);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r19);

     label01:
        $z0 = specialinvoke r1.<bsh.Parser: boolean jj_2_30(int)>(4);

        if $z0 == 0 goto label02;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(30);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        $r8 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(89);

        virtualinvoke r1.<bsh.Parser: void Expression()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

        virtualinvoke r1.<bsh.Parser: void Statement()>();

        $r9 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r9.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

        $r10 = $r8.<bsh.Token: java.lang.String image>;

        $r19.<bsh.BSHEnhancedForStatement: java.lang.String varName> = $r10;

        goto label07;

     label02:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label03;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label04;

     label03:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label04:
        lookupswitch($i1)
        {
            case 30: goto label05;
            default: goto label06;
        };

     label05:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(30);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        virtualinvoke r1.<bsh.Parser: void Type()>();

        $r3 = specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(89);

        virtualinvoke r1.<bsh.Parser: void Expression()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

        virtualinvoke r1.<bsh.Parser: void Statement()>();

        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

        $r5 = $r3.<bsh.Token: java.lang.String image>;

        $r19.<bsh.BSHEnhancedForStatement: java.lang.String varName> = $r5;

        goto label07;

     label06:
        $i5 = (int) -1;

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>($i5);

        $r20 = new bsh.ParseException;

        specialinvoke $r20.<bsh.ParseException: void <init>()>();

        throw $r20;

     label07:
        goto label17;

     label08:
        goto label16;

     label09:
        $r13 := @caughtexception;

        if z4 == 0 goto label10;

        $r18 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r18.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r19);

        z3 = 0;

        z5 = 0;

        goto label11;

     label10:
        $r14 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r14.<bsh.JJTParserState: bsh.Node popNode()>();

     label11:
        $z1 = $r13 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label12;

        $r17 = (java.lang.RuntimeException) $r13;

        throw $r17;

     label12:
        $z2 = $r13 instanceof bsh.ParseException;

        if $z2 == 0 goto label13;

        $r16 = (bsh.ParseException) $r13;

        throw $r16;

     label13:
        $r15 = (java.lang.Error) $r13;

        throw $r15;

     label14:
        $r11 := @caughtexception;

        goto label19;

     label15:
        throw $r11;

     label16:
        return;

     label17:
        if 0 == 0 goto label18;

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

     label18:
        goto label08;

     label19:
        if z5 == 0 goto label20;

        $r12 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r12.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r19, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r19);

     label20:
        goto label15;

        catch java.lang.Throwable from label01 to label07 with label09;
        catch java.lang.Throwable from label01 to label08 with label14;
        catch java.lang.Throwable from label09 to label15 with label14;
    }

    public final void ForInit() throws bsh.ParseException
    {
        bsh.Parser r0;
        int $i0, $i1, $i3, $i5;
        bsh.ParseException $r2;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_2_31(int)>(2147483647);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<bsh.Parser: void TypedVariableDeclaration()>();

        goto label6;

     label1:
        $i0 = r0.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        $i1 = specialinvoke r0.<bsh.Parser: int jj_ntk()>();

        goto label3;

     label2:
        $i1 = r0.<bsh.Parser: int jj_ntk>;

     label3:
        tableswitch($i1)
        {
            case 11: goto label4;
            case 12: goto label5;
            case 13: goto label5;
            case 14: goto label4;
            case 15: goto label5;
            case 16: goto label5;
            case 17: goto label4;
            case 18: goto label5;
            case 19: goto label5;
            case 20: goto label5;
            case 21: goto label5;
            case 22: goto label4;
            case 23: goto label5;
            case 24: goto label5;
            case 25: goto label5;
            case 26: goto label4;
            case 27: goto label5;
            case 28: goto label5;
            case 29: goto label4;
            case 30: goto label5;
            case 31: goto label5;
            case 32: goto label5;
            case 33: goto label5;
            case 34: goto label5;
            case 35: goto label5;
            case 36: goto label4;
            case 37: goto label5;
            case 38: goto label4;
            case 39: goto label5;
            case 40: goto label4;
            case 41: goto label4;
            case 42: goto label5;
            case 43: goto label5;
            case 44: goto label5;
            case 45: goto label5;
            case 46: goto label5;
            case 47: goto label4;
            case 48: goto label5;
            case 49: goto label5;
            case 50: goto label5;
            case 51: goto label5;
            case 52: goto label5;
            case 53: goto label5;
            case 54: goto label5;
            case 55: goto label4;
            case 56: goto label5;
            case 57: goto label4;
            case 58: goto label5;
            case 59: goto label5;
            case 60: goto label4;
            case 61: goto label5;
            case 62: goto label5;
            case 63: goto label5;
            case 64: goto label4;
            case 65: goto label5;
            case 66: goto label4;
            case 67: goto label4;
            case 68: goto label5;
            case 69: goto label4;
            case 70: goto label5;
            case 71: goto label5;
            case 72: goto label4;
            case 73: goto label5;
            case 74: goto label5;
            case 75: goto label5;
            case 76: goto label5;
            case 77: goto label5;
            case 78: goto label5;
            case 79: goto label5;
            case 80: goto label5;
            case 81: goto label5;
            case 82: goto label5;
            case 83: goto label5;
            case 84: goto label5;
            case 85: goto label5;
            case 86: goto label4;
            case 87: goto label4;
            case 88: goto label5;
            case 89: goto label5;
            case 90: goto label5;
            case 91: goto label5;
            case 92: goto label5;
            case 93: goto label5;
            case 94: goto label5;
            case 95: goto label5;
            case 96: goto label5;
            case 97: goto label5;
            case 98: goto label5;
            case 99: goto label5;
            case 100: goto label4;
            case 101: goto label4;
            case 102: goto label4;
            case 103: goto label4;
            default: goto label5;
        };

     label4:
        virtualinvoke r0.<bsh.Parser: void StatementExpressionList()>();

        goto label6;

     label5:
        $i5 = (int) -1;

        specialinvoke r0.<bsh.Parser: bsh.Token jj_consume_token(int)>($i5);

        $r2 = new bsh.ParseException;

        specialinvoke $r2.<bsh.ParseException: void <init>()>();

        throw $r2;

     label6:
        return;
    }

    public final void TypedVariableDeclaration() throws bsh.ParseException
    {
        java.lang.Throwable $r6, $r8;
        java.lang.Error $r10;
        bsh.ParseException $r11;
        bsh.Parser r1;
        bsh.Modifiers $r3;
        int $i0, $i1, $i3;
        bsh.BSHTypedVariableDeclaration $r14;
        boolean $z0, $z1, z2, z3, z4;
        java.lang.RuntimeException $r12;
        bsh.JJTParserState $r2, $r4, $r5, $r7, $r9, $r13;

        r1 := @this: bsh.Parser;

        $r14 = new bsh.BSHTypedVariableDeclaration;

        specialinvoke $r14.<bsh.BSHTypedVariableDeclaration: void <init>(int)>(33);

        z2 = 1;

        z4 = 1;

        z3 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r14);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r14);

     label01:
        $r3 = virtualinvoke r1.<bsh.Parser: bsh.Modifiers Modifiers(int,boolean)>(2, 0);

        virtualinvoke r1.<bsh.Parser: void Type()>();

        virtualinvoke r1.<bsh.Parser: void VariableDeclarator()>();

        goto label02;

     label02:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label03;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label04;

     label03:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label04:
        lookupswitch($i1)
        {
            case 79: goto label05;
            default: goto label06;
        };

     label05:
        goto label07;

     label06:
        goto label08;

     label07:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(79);

        virtualinvoke r1.<bsh.Parser: void VariableDeclarator()>();

        goto label02;

     label08:
        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r14, 1);

        z2 = 0;

        z4 = 0;

        z3 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r14);

        $r14.<bsh.BSHTypedVariableDeclaration: bsh.Modifiers modifiers> = $r3;

     label09:
        goto label19;

     label10:
        goto label18;

     label11:
        $r8 := @caughtexception;

        if z4 == 0 goto label12;

        $r13 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r13.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r14);

        z2 = 0;

        z3 = 0;

        goto label13;

     label12:
        $r9 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r9.<bsh.JJTParserState: bsh.Node popNode()>();

     label13:
        $z0 = $r8 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label14;

        $r12 = (java.lang.RuntimeException) $r8;

        throw $r12;

     label14:
        $z1 = $r8 instanceof bsh.ParseException;

        if $z1 == 0 goto label15;

        $r11 = (bsh.ParseException) $r8;

        throw $r11;

     label15:
        $r10 = (java.lang.Error) $r8;

        throw $r10;

     label16:
        $r6 := @caughtexception;

        goto label21;

     label17:
        throw $r6;

     label18:
        return;

     label19:
        if 0 == 0 goto label20;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r14, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r14);

     label20:
        goto label10;

     label21:
        if z3 == 0 goto label22;

        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r14, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r14);

     label22:
        goto label17;

        catch java.lang.Throwable from label01 to label09 with label11;
        catch java.lang.Throwable from label01 to label10 with label16;
        catch java.lang.Throwable from label11 to label17 with label16;
    }

    public final void StatementExpressionList() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        java.lang.Error $r8;
        bsh.ParseException $r9;
        bsh.Parser r1;
        bsh.BSHStatementExpressionList $r12;
        int $i0, $i1, $i3;
        boolean $z0, $z1, z2;
        java.lang.RuntimeException $r10;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;

        r1 := @this: bsh.Parser;

        $r12 = new bsh.BSHStatementExpressionList;

        specialinvoke $r12.<bsh.BSHStatementExpressionList: void <init>(int)>(34);

        z2 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r12);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r12);

     label01:
        virtualinvoke r1.<bsh.Parser: void StatementExpression()>();

        goto label02;

     label02:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label03;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label04;

     label03:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label04:
        lookupswitch($i1)
        {
            case 79: goto label05;
            default: goto label06;
        };

     label05:
        goto label07;

     label06:
        goto label08;

     label07:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(79);

        virtualinvoke r1.<bsh.Parser: void StatementExpression()>();

        goto label02;

     label08:
        goto label18;

     label09:
        goto label17;

     label10:
        $r6 := @caughtexception;

        if 1 == 0 goto label11;

        $r11 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r12);

        z2 = 0;

        goto label12;

     label11:
        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label12:
        $z0 = $r6 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label13;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label13:
        $z1 = $r6 instanceof bsh.ParseException;

        if $z1 == 0 goto label14;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label14:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label15:
        $r4 := @caughtexception;

        goto label20;

     label16:
        throw $r4;

     label17:
        return;

     label18:
        if 1 == 0 goto label19;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label19:
        goto label09;

     label20:
        if z2 == 0 goto label21;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r12, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r12);

     label21:
        goto label16;

        catch java.lang.Throwable from label01 to label08 with label10;
        catch java.lang.Throwable from label01 to label09 with label15;
        catch java.lang.Throwable from label10 to label16 with label15;
    }

    public final void ForUpdate() throws bsh.ParseException
    {
        bsh.Parser r0;

        r0 := @this: bsh.Parser;

        virtualinvoke r0.<bsh.Parser: void StatementExpressionList()>();

        return;
    }

    public final void BreakStatement() throws bsh.ParseException
    {
        java.lang.Throwable $r5;
        bsh.Parser r1;
        int $i0, $i1, $i3;
        bsh.JJTParserState $r2, $r3, $r4, $r6;
        bsh.BSHReturnStatement $r7;
        boolean z0;

        r1 := @this: bsh.Parser;

        $r7 = new bsh.BSHReturnStatement;

        specialinvoke $r7.<bsh.BSHReturnStatement: void <init>(int)>(35);

        z0 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r7);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r7);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(12);

        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label02;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i1)
        {
            case 69: goto label04;
            default: goto label05;
        };

     label04:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        goto label05;

     label05:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(78);

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r7, 1);

        z0 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r7);

        $r7.<bsh.BSHReturnStatement: int kind> = 12;

        goto label10;

     label06:
        goto label09;

     label07:
        $r5 := @caughtexception;

        goto label12;

     label08:
        throw $r5;

     label09:
        return;

     label10:
        if 0 == 0 goto label11;

        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r7, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r7);

     label11:
        goto label06;

     label12:
        if z0 == 0 goto label13;

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r7, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r7);

     label13:
        goto label08;

        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public final void ContinueStatement() throws bsh.ParseException
    {
        java.lang.Throwable $r5;
        bsh.Parser r1;
        int $i0, $i1, $i3;
        bsh.JJTParserState $r2, $r3, $r4, $r6;
        bsh.BSHReturnStatement $r7;
        boolean z0;

        r1 := @this: bsh.Parser;

        $r7 = new bsh.BSHReturnStatement;

        specialinvoke $r7.<bsh.BSHReturnStatement: void <init>(int)>(35);

        z0 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r7);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r7);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(19);

        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label02;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        lookupswitch($i1)
        {
            case 69: goto label04;
            default: goto label05;
        };

     label04:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(69);

        goto label05;

     label05:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(78);

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r7, 1);

        z0 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r7);

        $r7.<bsh.BSHReturnStatement: int kind> = 19;

        goto label10;

     label06:
        goto label09;

     label07:
        $r5 := @caughtexception;

        goto label12;

     label08:
        throw $r5;

     label09:
        return;

     label10:
        if 0 == 0 goto label11;

        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r7, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r7);

     label11:
        goto label06;

     label12:
        if z0 == 0 goto label13;

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r7, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r7);

     label13:
        goto label08;

        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public final void ReturnStatement() throws bsh.ParseException
    {
        java.lang.Throwable $r5, $r7;
        java.lang.Error $r9;
        bsh.ParseException $r10;
        bsh.Parser r1;
        int $i0, $i1, $i3;
        boolean $z0, $z1, z2, z3, z4;
        java.lang.RuntimeException $r11;
        bsh.JJTParserState $r2, $r3, $r4, $r6, $r8, $r12;
        bsh.BSHReturnStatement $r13;

        r1 := @this: bsh.Parser;

        $r13 = new bsh.BSHReturnStatement;

        specialinvoke $r13.<bsh.BSHReturnStatement: void <init>(int)>(35);

        z2 = 1;

        z4 = 1;

        z3 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r13);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r13);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(46);

        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label02;

        $i1 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label03;

     label02:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

     label03:
        tableswitch($i1)
        {
            case 11: goto label04;
            case 12: goto label05;
            case 13: goto label05;
            case 14: goto label04;
            case 15: goto label05;
            case 16: goto label05;
            case 17: goto label04;
            case 18: goto label05;
            case 19: goto label05;
            case 20: goto label05;
            case 21: goto label05;
            case 22: goto label04;
            case 23: goto label05;
            case 24: goto label05;
            case 25: goto label05;
            case 26: goto label04;
            case 27: goto label05;
            case 28: goto label05;
            case 29: goto label04;
            case 30: goto label05;
            case 31: goto label05;
            case 32: goto label05;
            case 33: goto label05;
            case 34: goto label05;
            case 35: goto label05;
            case 36: goto label04;
            case 37: goto label05;
            case 38: goto label04;
            case 39: goto label05;
            case 40: goto label04;
            case 41: goto label04;
            case 42: goto label05;
            case 43: goto label05;
            case 44: goto label05;
            case 45: goto label05;
            case 46: goto label05;
            case 47: goto label04;
            case 48: goto label05;
            case 49: goto label05;
            case 50: goto label05;
            case 51: goto label05;
            case 52: goto label05;
            case 53: goto label05;
            case 54: goto label05;
            case 55: goto label04;
            case 56: goto label05;
            case 57: goto label04;
            case 58: goto label05;
            case 59: goto label05;
            case 60: goto label04;
            case 61: goto label05;
            case 62: goto label05;
            case 63: goto label05;
            case 64: goto label04;
            case 65: goto label05;
            case 66: goto label04;
            case 67: goto label04;
            case 68: goto label05;
            case 69: goto label04;
            case 70: goto label05;
            case 71: goto label05;
            case 72: goto label04;
            case 73: goto label05;
            case 74: goto label05;
            case 75: goto label05;
            case 76: goto label05;
            case 77: goto label05;
            case 78: goto label05;
            case 79: goto label05;
            case 80: goto label05;
            case 81: goto label05;
            case 82: goto label05;
            case 83: goto label05;
            case 84: goto label05;
            case 85: goto label05;
            case 86: goto label04;
            case 87: goto label04;
            case 88: goto label05;
            case 89: goto label05;
            case 90: goto label05;
            case 91: goto label05;
            case 92: goto label05;
            case 93: goto label05;
            case 94: goto label05;
            case 95: goto label05;
            case 96: goto label05;
            case 97: goto label05;
            case 98: goto label05;
            case 99: goto label05;
            case 100: goto label04;
            case 101: goto label04;
            case 102: goto label04;
            case 103: goto label04;
            default: goto label05;
        };

     label04:
        virtualinvoke r1.<bsh.Parser: void Expression()>();

        goto label05;

     label05:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(78);

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r13, 1);

        z2 = 0;

        z4 = 0;

        z3 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r13);

        $r13.<bsh.BSHReturnStatement: int kind> = 46;

     label06:
        goto label16;

     label07:
        goto label15;

     label08:
        $r7 := @caughtexception;

        if z3 == 0 goto label09;

        $r12 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r12.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r13);

        z2 = 0;

        z4 = 0;

        goto label10;

     label09:
        $r8 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: bsh.Node popNode()>();

     label10:
        $z0 = $r7 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label11;

        $r11 = (java.lang.RuntimeException) $r7;

        throw $r11;

     label11:
        $z1 = $r7 instanceof bsh.ParseException;

        if $z1 == 0 goto label12;

        $r10 = (bsh.ParseException) $r7;

        throw $r10;

     label12:
        $r9 = (java.lang.Error) $r7;

        throw $r9;

     label13:
        $r5 := @caughtexception;

        goto label18;

     label14:
        throw $r5;

     label15:
        return;

     label16:
        if 0 == 0 goto label17;

        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r13, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r13);

     label17:
        goto label07;

     label18:
        if z4 == 0 goto label19;

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r13, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r13);

     label19:
        goto label14;

        catch java.lang.Throwable from label01 to label06 with label08;
        catch java.lang.Throwable from label01 to label07 with label13;
        catch java.lang.Throwable from label08 to label14 with label13;
    }

    public final void SynchronizedStatement() throws bsh.ParseException
    {
        java.lang.Throwable $r5, $r7;
        bsh.BSHBlock $r0;
        java.lang.Error $r9;
        bsh.ParseException $r10;
        bsh.Parser r1;
        boolean $z0, $z1, z2, z3, z4;
        java.lang.RuntimeException $r11;
        bsh.JJTParserState $r2, $r3, $r4, $r6, $r8, $r12;

        r1 := @this: bsh.Parser;

        $r0 = new bsh.BSHBlock;

        specialinvoke $r0.<bsh.BSHBlock: void <init>(int)>(25);

        z2 = 1;

        z4 = 1;

        z3 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r0);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r0);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(51);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        virtualinvoke r1.<bsh.Parser: void Expression()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

        virtualinvoke r1.<bsh.Parser: void Block()>();

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        z2 = 0;

        z4 = 0;

        z3 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

        $r0.<bsh.BSHBlock: boolean isSynchronized> = 1;

     label02:
        goto label12;

     label03:
        goto label11;

     label04:
        $r7 := @caughtexception;

        if z3 == 0 goto label05;

        $r12 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r12.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r0);

        z2 = 0;

        z4 = 0;

        goto label06;

     label05:
        $r8 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r8.<bsh.JJTParserState: bsh.Node popNode()>();

     label06:
        $z0 = $r7 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label07;

        $r11 = (java.lang.RuntimeException) $r7;

        throw $r11;

     label07:
        $z1 = $r7 instanceof bsh.ParseException;

        if $z1 == 0 goto label08;

        $r10 = (bsh.ParseException) $r7;

        throw $r10;

     label08:
        $r9 = (java.lang.Error) $r7;

        throw $r9;

     label09:
        $r5 := @caughtexception;

        goto label14;

     label10:
        throw $r5;

     label11:
        return;

     label12:
        if 0 == 0 goto label13;

        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label13:
        goto label03;

     label14:
        if z4 == 0 goto label15;

        $r6 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label15:
        goto label10;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label10 with label09;
    }

    public final void ThrowStatement() throws bsh.ParseException
    {
        java.lang.Throwable $r4, $r6;
        bsh.BSHThrowStatement $r0;
        java.lang.Error $r8;
        java.lang.RuntimeException $r10;
        bsh.ParseException $r9;
        bsh.Parser r1;
        bsh.JJTParserState $r2, $r3, $r5, $r7, $r11;
        boolean $z0, $z1, z2;

        r1 := @this: bsh.Parser;

        $r0 = new bsh.BSHThrowStatement;

        specialinvoke $r0.<bsh.BSHThrowStatement: void <init>(int)>(36);

        z2 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r0);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r0);

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(53);

        virtualinvoke r1.<bsh.Parser: void Expression()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(78);

     label02:
        goto label12;

     label03:
        goto label11;

     label04:
        $r6 := @caughtexception;

        if 1 == 0 goto label05;

        $r11 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r11.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r0);

        z2 = 0;

        goto label06;

     label05:
        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: bsh.Node popNode()>();

     label06:
        $z0 = $r6 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label07;

        $r10 = (java.lang.RuntimeException) $r6;

        throw $r10;

     label07:
        $z1 = $r6 instanceof bsh.ParseException;

        if $z1 == 0 goto label08;

        $r9 = (bsh.ParseException) $r6;

        throw $r9;

     label08:
        $r8 = (java.lang.Error) $r6;

        throw $r8;

     label09:
        $r4 := @caughtexception;

        goto label14;

     label10:
        throw $r4;

     label11:
        return;

     label12:
        if 1 == 0 goto label13;

        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label13:
        goto label03;

     label14:
        if z2 == 0 goto label15;

        $r5 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r5.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r0, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r0);

     label15:
        goto label10;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label10 with label09;
    }

    public final void TryStatement() throws bsh.ParseException
    {
        java.lang.Throwable $r6, $r8;
        java.lang.Error $r10;
        bsh.ParseException $r5, $r11;
        bsh.Parser r1;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        boolean $z0, $z1, z2, z3, z4, z5;
        java.lang.RuntimeException $r12;
        bsh.JJTParserState $r2, $r3, $r4, $r7, $r9, $r13;
        bsh.BSHTryStatement $r14;

        r1 := @this: bsh.Parser;

        $r14 = new bsh.BSHTryStatement;

        specialinvoke $r14.<bsh.BSHTryStatement: void <init>(int)>(37);

        z2 = 1;

        z5 = 1;

        z4 = 1;

        $r2 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r2.<bsh.JJTParserState: void openNodeScope(bsh.Node)>($r14);

        virtualinvoke r1.<bsh.Parser: void jjtreeOpenNodeScope(bsh.Node)>($r14);

        z3 = 0;

     label01:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(56);

        virtualinvoke r1.<bsh.Parser: void Block()>();

        goto label02;

     label02:
        $i0 = r1.<bsh.Parser: int jj_ntk>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label03;

        $i2 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label04;

     label03:
        $i2 = r1.<bsh.Parser: int jj_ntk>;

     label04:
        lookupswitch($i2)
        {
            case 16: goto label05;
            default: goto label06;
        };

     label05:
        goto label07;

     label06:
        goto label08;

     label07:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(16);

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(72);

        virtualinvoke r1.<bsh.Parser: void FormalParameter()>();

        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(73);

        virtualinvoke r1.<bsh.Parser: void Block()>();

        z3 = 1;

        goto label02;

     label08:
        $i1 = r1.<bsh.Parser: int jj_ntk>;

        $i7 = (int) -1;

        if $i1 != $i7 goto label09;

        $i3 = specialinvoke r1.<bsh.Parser: int jj_ntk()>();

        goto label10;

     label09:
        $i3 = r1.<bsh.Parser: int jj_ntk>;

     label10:
        lookupswitch($i3)
        {
            case 28: goto label11;
            default: goto label12;
        };

     label11:
        specialinvoke r1.<bsh.Parser: bsh.Token jj_consume_token(int)>(28);

        virtualinvoke r1.<bsh.Parser: void Block()>();

        z3 = 1;

        goto label12;

     label12:
        $r3 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r14, 1);

        z2 = 0;

        z5 = 0;

        z4 = 0;

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r14);

        if z3 != 0 goto label13;

        $r5 = virtualinvoke r1.<bsh.Parser: bsh.ParseException generateParseException()>();

        throw $r5;

     label13:
        goto label23;

     label14:
        goto label22;

     label15:
        $r8 := @caughtexception;

        if z4 == 0 goto label16;

        $r13 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r13.<bsh.JJTParserState: void clearNodeScope(bsh.Node)>($r14);

        z2 = 0;

        z5 = 0;

        goto label17;

     label16:
        $r9 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r9.<bsh.JJTParserState: bsh.Node popNode()>();

     label17:
        $z0 = $r8 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label18;

        $r12 = (java.lang.RuntimeException) $r8;

        throw $r12;

     label18:
        $z1 = $r8 instanceof bsh.ParseException;

        if $z1 == 0 goto label19;

        $r11 = (bsh.ParseException) $r8;

        throw $r11;

     label19:
        $r10 = (java.lang.Error) $r8;

        throw $r10;

     label20:
        $r6 := @caughtexception;

        goto label25;

     label21:
        throw $r6;

     label22:
        return;

     label23:
        if 0 == 0 goto label24;

        $r4 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r4.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r14, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r14);

     label24:
        goto label14;

     label25:
        if z5 == 0 goto label26;

        $r7 = r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r7.<bsh.JJTParserState: void closeNodeScope(bsh.Node,boolean)>($r14, 1);

        virtualinvoke r1.<bsh.Parser: void jjtreeCloseNodeScope(bsh.Node)>($r14);

     label26:
        goto label21;

        catch java.lang.Throwable from label01 to label13 with label15;
        catch java.lang.Throwable from label01 to label14 with label20;
        catch java.lang.Throwable from label15 to label21 with label20;
    }

    private final boolean jj_2_1(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_1()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_2(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_2()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_3(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_3()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_4(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_4()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_5(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_5()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_6(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_6()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_7(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_7()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_8(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_8()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_9(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_9()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_10(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_10()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_11(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_11()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_12(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_12()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_13(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_13()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_14(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_14()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_15(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_15()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_16(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_16()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_17(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_17()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_18(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_18()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_19(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_19()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_20(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_20()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_21(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_21()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_22(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_22()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_23(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_23()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_24(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_24()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_25(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_25()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_26(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_26()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_27(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_27()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_28(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_28()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_29(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_29()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_30(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_30()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_2_31(int)
    {
        bsh.Parser r0;
        bsh.Token $r1;
        int i0;
        boolean $z0, $z1;
        bsh.Parser$LookaheadSuccess $r2;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        r0.<bsh.Parser: int jj_la> = i0;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r1;

     label1:
        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_31()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 1;

        catch bsh.Parser$LookaheadSuccess from label1 to label3 with label4;
    }

    private final boolean jj_3R_46()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_91()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_28()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_46()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_47()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_48()>();

        if $z2 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_49()>();

        if $z3 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_3_28()>();

        if $z4 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_3R_50()>();

        if $z5 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_3R_51()>();

        if $z6 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z7 = specialinvoke r0.<bsh.Parser: boolean jj_3R_52()>();

        if $z7 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3_23()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_28()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_161()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_164()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_169()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_38()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(74);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3_23()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(75);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_158()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_161()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_167()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_40()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(89);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_45()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_156()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(88);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(89);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_108()>();

        if $z3 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private final boolean jj_3R_165()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(108);

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(109);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_158()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_153()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_158()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_165()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_90()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_124()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_89()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_123()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_88()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_122()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_162()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(98);

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(99);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_153()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_87()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_121()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_148()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_153()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_162()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_86()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_120()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_85()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_119()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_84()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_118()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_159()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(96);

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(97);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_148()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_83()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_117()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_135()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_148()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_159()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_82()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_116()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_81()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_115()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_80()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_114()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_108()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_135()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_156()>();

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

     label2:
        return 0;
    }

    private final boolean jj_3R_79()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_113()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_78()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_112()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(78);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3_17()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_38()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_77()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_38()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_45()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_22()>();

        if $z0 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_77()>();

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(78);

        if $z2 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_78()>();

        if $z3 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_3R_79()>();

        if $z4 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_3R_80()>();

        if $z5 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_3R_81()>();

        if $z6 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z7 = specialinvoke r0.<bsh.Parser: boolean jj_3R_82()>();

        if $z7 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        r0.<bsh.Parser: boolean lookingAhead> = 1;

        $z8 = virtualinvoke r0.<bsh.Parser: boolean isRegularForStatement()>();

        r0.<bsh.Parser: boolean jj_semLA> = $z8;

        r0.<bsh.Parser: boolean lookingAhead> = 0;

        $z9 = r0.<bsh.Parser: boolean jj_semLA>;

        if $z9 == 0 goto label1;

        $z17 = specialinvoke r0.<bsh.Parser: boolean jj_3R_83()>();

        if $z17 == 0 goto label2;

     label1:
        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z10 = specialinvoke r0.<bsh.Parser: boolean jj_3R_84()>();

        if $z10 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z11 = specialinvoke r0.<bsh.Parser: boolean jj_3R_85()>();

        if $z11 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z12 = specialinvoke r0.<bsh.Parser: boolean jj_3R_86()>();

        if $z12 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z13 = specialinvoke r0.<bsh.Parser: boolean jj_3R_87()>();

        if $z13 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z14 = specialinvoke r0.<bsh.Parser: boolean jj_3R_88()>();

        if $z14 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z15 = specialinvoke r0.<bsh.Parser: boolean jj_3R_89()>();

        if $z15 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z16 = specialinvoke r0.<bsh.Parser: boolean jj_3R_90()>();

        if $z16 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3_22()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_40()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_34()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(81);

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(120);

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(121);

        if $z2 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(127);

        if $z3 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(118);

        if $z4 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(119);

        if $z5 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(122);

        if $z6 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z7 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(126);

        if $z7 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z8 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(124);

        if $z8 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z9 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(128);

        if $z9 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z10 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(129);

        if $z10 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z11 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(130);

        if $z11 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z12 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(131);

        if $z12 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z13 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(132);

        if $z13 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z14 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(133);

        if $z14 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_111()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(79);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_29()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_160()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(76);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(77);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_152()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_69()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3_17()>();

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

     label2:
        return 0;
    }

    private final boolean jj_3R_157()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_160()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_160()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_97()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3_8()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_33()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_34()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3_20()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(76);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(77);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_151()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_150()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3_19()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(76);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(77);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_107()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_33()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_34()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3_21()
    {
        bsh.Parser r0;
        bsh.Token $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_19()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3_19()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        $r2 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3_20()>();

        if $z2 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r2;

        goto label3;

     label3:
        return 0;
    }

    private final boolean jj_3R_150()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_21()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_157()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_71()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_108()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_39()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_70()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_71()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_70()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_107()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_145()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(40);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_29()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_151()>();

        if $z2 == 0 goto label3;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_152()>();

        if $z3 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3_18()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(40);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_36()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_150()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_130()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_18()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_145()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_147()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(79);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_76()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_29()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_111()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_134()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_147()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_106()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_134()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3_7()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(80);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_69()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_106()>();

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_29()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3_7()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_68()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(22);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_67()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(29);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_155()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(26);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_66()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(38);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_65()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(36);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_154()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(55);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_149()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_154()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_155()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_64()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(47);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_56()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_29()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_63()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(14);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_62()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(17);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_61()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(11);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_36()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_61()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_62()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_63()>();

        if $z2 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_64()>();

        if $z3 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_3R_65()>();

        if $z4 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_3R_66()>();

        if $z5 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_3R_67()>();

        if $z6 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z7 = specialinvoke r0.<bsh.Parser: boolean jj_3R_68()>();

        if $z7 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_144()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(57);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_74()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_32()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_42()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_73()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_74()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_73()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(57);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_143()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(41);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3_6()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(76);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(77);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_142()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_149()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_55()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_36()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_110()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(79);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_109()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_141()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(67);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_32()
    {
        bsh.Parser r0;
        bsh.Token r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_55()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_56()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3_6()>();

        if $z2 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r2;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_140()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(66);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_190()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(28);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_38()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3_4()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(79);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_31()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_189()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(16);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_109()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_3R_38()>();

        if $z4 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    private final boolean jj_3R_136()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3_5()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_32()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_75()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_109()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_110()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_109()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_5()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_136()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_124()
    {
        bsh.Parser r0;
        bsh.Token $r1, r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(56);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_38()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_189()>();

        if $z2 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label3;

     label3:
        r2 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_190()>();

        if $z3 == 0 goto label4;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r2;

     label4:
        return 0;
    }

    private final boolean jj_3R_43()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_75()>();

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_163()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_31()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3_4()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_139()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(64);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_97()
    {
        bsh.Parser r0;
        bsh.Token $r1, r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(74);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r2 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_163()>();

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r2;

     label2:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(79);

        if $z2 == 0 goto label3;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(75);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private final boolean jj_3R_30()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(80);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(104);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_123()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(53);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(78);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_180()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(81);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_31()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_54()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_188()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_53()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_97()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_31()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_53()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_54()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_122()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(51);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_3R_38()>();

        if $z4 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    private final boolean jj_3R_177()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(79);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_176()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_210()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(79);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_112()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_121()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(46);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_188()>();

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(78);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_129()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_138()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_139()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_140()>();

        if $z2 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_141()>();

        if $z3 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_3R_142()>();

        if $z4 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_3R_143()>();

        if $z5 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_3R_144()>();

        if $z6 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_138()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(60);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_146()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_69()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_176()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_180()>();

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

     label2:
        return 0;
    }

    private final boolean jj_3R_105()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_129()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_120()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(19);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(78);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_119()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(12);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(78);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_195()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_205()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_128()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(34);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(104);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(78);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_133()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(74);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(75);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_205()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_112()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_210()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_132()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(80);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_146()>();

        if $z2 == 0 goto label3;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

     label3:
        return 0;
    }

    private final boolean jj_3_3()
    {
        bsh.Parser r0;
        bsh.Token r1, r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(48);

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(34);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_29()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        r2 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_30()>();

        if $z3 == 0 goto label4;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r2;

     label4:
        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(78);

        if $z4 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    private final boolean jj_3R_94()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_3()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_128()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_93()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_41()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_32()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_176()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_177()>();

        if $z3 == 0 goto label3;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label4;

     label4:
        return 0;
    }

    private final boolean jj_3R_131()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(76);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(77);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_95()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(42);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_29()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3_2()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_175()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_38()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3_16()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(80);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(13);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_104()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_16()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_131()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_132()>();

        if $z2 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_133()>();

        if $z3 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_174()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(54);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_76()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3_15()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_32()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(80);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(13);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3_31()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_41()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_32()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3_14()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_37()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_126()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_127()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_42()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_92()
    {
        bsh.Parser r0;
        bsh.Token $r1, r2, r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_41()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r2 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_126()>();

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r2;

        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_3R_127()>();

        if $z6 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_43()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        r3 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_174()>();

        if $z3 == 0 goto label4;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r3;

     label4:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_3R_175()>();

        if $z4 == 0 goto label5;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(78);

        if $z5 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    private final boolean jj_3R_204()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_205()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_103()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_29()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_203()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_93()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_194()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_203()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_204()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_102()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_32()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_58()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_104()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_125()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(37);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_101()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_37()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_100()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_130()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_99()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_137()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(30);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_32()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(89);

        if $z4 == 0 goto label5;

        return 1;

     label5:
        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z5 == 0 goto label6;

        return 1;

     label6:
        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z6 == 0 goto label7;

        return 1;

     label7:
        $z7 = specialinvoke r0.<bsh.Parser: boolean jj_3R_45()>();

        if $z7 == 0 goto label8;

        return 1;

     label8:
        return 0;
    }

    private final boolean jj_3R_184()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(23);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_45()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_173()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(33);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_76()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_57()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_98()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_99()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_100()>();

        if $z2 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_101()>();

        if $z3 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_3R_102()>();

        if $z4 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_3R_103()>();

        if $z5 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_98()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_129()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_172()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(25);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_29()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3_30()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(30);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(89);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z4 == 0 goto label5;

        return 1;

     label5:
        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z5 == 0 goto label6;

        return 1;

     label6:
        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_3R_45()>();

        if $z6 == 0 goto label7;

        return 1;

     label7:
        return 0;
    }

    private final boolean jj_3R_118()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_30()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_137()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_37()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_29()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_69()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_185()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_194()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_91()
    {
        bsh.Parser r0;
        bsh.Token $r1, r2, r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_41()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r2 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(13);

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r2;

        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_3R_125()>();

        if $z6 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        r3 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_172()>();

        if $z3 == 0 goto label4;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r3;

     label4:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_3R_173()>();

        if $z4 == 0 goto label5;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

     label5:
        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_3R_38()>();

        if $z5 == 0 goto label6;

        return 1;

     label6:
        return 0;
    }

    private final boolean jj_3_13()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_36()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_187()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_195()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_186()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_33()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_57()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_58()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_217()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_32()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_208()>();

        if $z3 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private final boolean jj_3R_216()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_32()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_191()>();

        if $z3 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private final boolean jj_3R_117()
    {
        bsh.Parser r0;
        bsh.Token r1, r2, r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(30);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_185()>();

        if $z2 == 0 goto label3;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(78);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        r2 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_3R_186()>();

        if $z4 == 0 goto label5;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r2;

     label5:
        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(78);

        if $z5 == 0 goto label6;

        return 1;

     label6:
        r3 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_3R_187()>();

        if $z6 == 0 goto label7;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r3;

     label7:
        $z7 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z7 == 0 goto label8;

        return 1;

     label8:
        $z8 = specialinvoke r0.<bsh.Parser: boolean jj_3R_45()>();

        if $z8 == 0 goto label9;

        return 1;

     label9:
        return 0;
    }

    private final boolean jj_3R_214()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_216()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_217()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3_12()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_33()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(100);

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(101);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_219()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_33()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_116()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(21);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_45()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(59);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z4 == 0 goto label5;

        return 1;

     label5:
        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z5 == 0 goto label6;

        return 1;

     label6:
        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(78);

        if $z6 == 0 goto label7;

        return 1;

     label7:
        return 0;
    }

    private final boolean jj_3_11()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_29()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(76);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_218()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_33()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(100);

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(101);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_215()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_218()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_219()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_72()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(43);

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(44);

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(45);

        if $z2 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(51);

        if $z3 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(27);

        if $z4 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(39);

        if $z5 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(52);

        if $z6 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z7 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(58);

        if $z7 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z8 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(10);

        if $z8 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z9 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(48);

        if $z9 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z10 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(49);

        if $z10 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_115()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(59);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_3R_45()>();

        if $z4 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    private final boolean jj_3R_60()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_29()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(87);

        if $z3 == 0 goto label4;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(86);

        if $z4 == 0 goto label4;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z5 == 0 goto label4;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z6 == 0 goto label4;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z7 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(40);

        if $z7 == 0 goto label4;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z8 = specialinvoke r0.<bsh.Parser: boolean jj_3R_105()>();

        if $z8 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private final boolean jj_3R_59()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_29()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(76);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(77);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private final boolean jj_3_9()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_35()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3_29()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_28()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_114()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(32);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_3R_45()>();

        if $z4 == 0 goto label5;

        return 1;

     label5:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_3R_184()>();

        if $z5 == 0 goto label6;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

     label6:
        return 0;
    }

    private final boolean jj_3R_41()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0;

        r0 := @this: bsh.Parser;

        goto label1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_72()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_35()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3_10()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_59()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_60()>();

        if $z2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3_10()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_36()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_213()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_215()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_212()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_214()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_202()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(20);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(89);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_211()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(87);

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(86);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_191()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_208()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_211()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_212()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_213()>();

        if $z2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_201()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(15);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(89);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_193()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_201()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_202()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_183()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_193()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3_29()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_207()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(101);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_33()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3_1()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_28()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_113()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(50);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(73);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(74);

        if $z4 == 0 goto label5;

        return 1;

     label5:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_3R_183()>();

        if $z5 == 0 goto label5;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label6;

     label6:
        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(75);

        if $z6 == 0 goto label7;

        return 1;

     label7:
        return 0;
    }

    private final boolean jj_3R_209()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(104);

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(105);

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(111);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_191()>();

        if $z3 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_206()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(100);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_33()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_199()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_208()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_198()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_207()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_197()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_206()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_196()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(102);

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(103);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_191()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_191()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_196()>();

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_197()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_198()>();

        if $z2 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_199()>();

        if $z3 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_44()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(54);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_76()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_112()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_39()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_181()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_191()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_209()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_200()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(102);

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(103);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_181()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_178()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_181()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_200()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_96()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(68);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_192()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(112);

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(113);

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(114);

        if $z2 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(115);

        if $z3 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(116);

        if $z4 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(117);

        if $z5 == 0 goto label1;

        return 1;

     label1:
        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_3R_178()>();

        if $z6 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_171()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(90);

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(95);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_166()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_170()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_178()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_192()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_52()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_96()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_182()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(84);

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(85);

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(82);

        if $z2 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(83);

        if $z3 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(91);

        if $z4 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z5 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(92);

        if $z5 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z6 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(93);

        if $z6 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z7 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(94);

        if $z7 == 0 goto label1;

        return 1;

     label1:
        $z8 = specialinvoke r0.<bsh.Parser: boolean jj_3R_170()>();

        if $z8 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3_27()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_41()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_32()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private final boolean jj_3R_51()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_95()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_168()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_170()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_182()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_50()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_94()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3_26()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_41()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_3R_43()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_3R_44()>();

        if $z3 == 0 goto label4;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

     label4:
        $z4 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(74);

        if $z4 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    private final boolean jj_3R_179()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(35);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_32()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3_28()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_45()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_166()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_168()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_179()>();

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

     label2:
        return 0;
    }

    private final boolean jj_3_25()
    {
        bsh.Parser r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_41()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_42()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(69);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(72);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private final boolean jj_3R_49()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_93()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(78);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3_24()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_41()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(13);

        if $z1 == 0 goto label2;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(37);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_167()
    {
        bsh.Parser r0;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(110);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_161()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean jj_3R_48()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_92()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_164()
    {
        bsh.Parser r0;
        bsh.Token $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_166()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_171()>();

        if $z1 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r1;

        goto label2;

     label2:
        return 0;
    }

    private final boolean jj_3R_47()
    {
        bsh.Parser r0;
        boolean $z0;

        r0 := @this: bsh.Parser;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_3R_92()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean jj_3R_169()
    {
        bsh.Parser r0;
        bsh.Token r1;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.Parser;

        r1 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $z0 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(106);

        if $z0 == 0 goto label1;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = r1;

        $z2 = specialinvoke r0.<bsh.Parser: boolean jj_scan_token(int)>(107);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<bsh.Parser: boolean jj_3R_164()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public void <init>(java.io.InputStream)
    {
        bsh.Parser$LookaheadSuccess $r9;
        bsh.Parser r0;
        bsh.JavaCharStream $r6, $r10;
        bsh.ParserTokenManager $r11;
        bsh.Token $r12;
        int $i1;
        bsh.JJTParserState $r8;
        java.io.InputStream r4;

        r0 := @this: bsh.Parser;

        r4 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r8 = new bsh.JJTParserState;

        specialinvoke $r8.<bsh.JJTParserState: void <init>()>();

        r0.<bsh.Parser: bsh.JJTParserState jjtree> = $r8;

        r0.<bsh.Parser: boolean retainComments> = 0;

        r0.<bsh.Parser: boolean lookingAhead> = 0;

        $r9 = new bsh.Parser$LookaheadSuccess;

        specialinvoke $r9.<bsh.Parser$LookaheadSuccess: void <init>(bsh.Parser$1)>(null);

        r0.<bsh.Parser: bsh.Parser$LookaheadSuccess jj_ls> = $r9;

        $r10 = new bsh.JavaCharStream;

        specialinvoke $r10.<bsh.JavaCharStream: void <init>(java.io.InputStream,int,int)>(r4, 1, 1);

        r0.<bsh.Parser: bsh.JavaCharStream jj_input_stream> = $r10;

        $r11 = new bsh.ParserTokenManager;

        $r6 = r0.<bsh.Parser: bsh.JavaCharStream jj_input_stream>;

        specialinvoke $r11.<bsh.ParserTokenManager: void <init>(bsh.JavaCharStream)>($r6);

        r0.<bsh.Parser: bsh.ParserTokenManager token_source> = $r11;

        $r12 = new bsh.Token;

        specialinvoke $r12.<bsh.Token: void <init>()>();

        r0.<bsh.Parser: bsh.Token token> = $r12;

        $i1 = (int) -1;

        r0.<bsh.Parser: int jj_ntk> = $i1;

        return;
    }

    public void ReInit(java.io.InputStream)
    {
        bsh.Parser r0;
        bsh.JavaCharStream $r2, $r3;
        bsh.ParserTokenManager $r4;
        bsh.Token $r7;
        int $i1;
        bsh.JJTParserState $r6;
        java.io.InputStream r1;

        r0 := @this: bsh.Parser;

        r1 := @parameter0: java.io.InputStream;

        $r2 = r0.<bsh.Parser: bsh.JavaCharStream jj_input_stream>;

        virtualinvoke $r2.<bsh.JavaCharStream: void ReInit(java.io.InputStream,int,int)>(r1, 1, 1);

        $r4 = r0.<bsh.Parser: bsh.ParserTokenManager token_source>;

        $r3 = r0.<bsh.Parser: bsh.JavaCharStream jj_input_stream>;

        virtualinvoke $r4.<bsh.ParserTokenManager: void ReInit(bsh.JavaCharStream)>($r3);

        $r7 = new bsh.Token;

        specialinvoke $r7.<bsh.Token: void <init>()>();

        r0.<bsh.Parser: bsh.Token token> = $r7;

        $i1 = (int) -1;

        r0.<bsh.Parser: int jj_ntk> = $i1;

        $r6 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void reset()>();

        return;
    }

    public void <init>(java.io.Reader)
    {
        java.io.Reader r4;
        bsh.Parser$LookaheadSuccess $r9;
        bsh.Parser r0;
        bsh.JavaCharStream $r6, $r10;
        bsh.ParserTokenManager $r11;
        bsh.Token $r12;
        int $i1;
        bsh.JJTParserState $r8;

        r0 := @this: bsh.Parser;

        r4 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r8 = new bsh.JJTParserState;

        specialinvoke $r8.<bsh.JJTParserState: void <init>()>();

        r0.<bsh.Parser: bsh.JJTParserState jjtree> = $r8;

        r0.<bsh.Parser: boolean retainComments> = 0;

        r0.<bsh.Parser: boolean lookingAhead> = 0;

        $r9 = new bsh.Parser$LookaheadSuccess;

        specialinvoke $r9.<bsh.Parser$LookaheadSuccess: void <init>(bsh.Parser$1)>(null);

        r0.<bsh.Parser: bsh.Parser$LookaheadSuccess jj_ls> = $r9;

        $r10 = new bsh.JavaCharStream;

        specialinvoke $r10.<bsh.JavaCharStream: void <init>(java.io.Reader,int,int)>(r4, 1, 1);

        r0.<bsh.Parser: bsh.JavaCharStream jj_input_stream> = $r10;

        $r11 = new bsh.ParserTokenManager;

        $r6 = r0.<bsh.Parser: bsh.JavaCharStream jj_input_stream>;

        specialinvoke $r11.<bsh.ParserTokenManager: void <init>(bsh.JavaCharStream)>($r6);

        r0.<bsh.Parser: bsh.ParserTokenManager token_source> = $r11;

        $r12 = new bsh.Token;

        specialinvoke $r12.<bsh.Token: void <init>()>();

        r0.<bsh.Parser: bsh.Token token> = $r12;

        $i1 = (int) -1;

        r0.<bsh.Parser: int jj_ntk> = $i1;

        return;
    }

    public void ReInit(java.io.Reader)
    {
        java.io.Reader r1;
        bsh.Parser r0;
        bsh.JavaCharStream $r2, $r3;
        bsh.ParserTokenManager $r4;
        bsh.Token $r7;
        int $i1;
        bsh.JJTParserState $r6;

        r0 := @this: bsh.Parser;

        r1 := @parameter0: java.io.Reader;

        $r2 = r0.<bsh.Parser: bsh.JavaCharStream jj_input_stream>;

        virtualinvoke $r2.<bsh.JavaCharStream: void ReInit(java.io.Reader,int,int)>(r1, 1, 1);

        $r4 = r0.<bsh.Parser: bsh.ParserTokenManager token_source>;

        $r3 = r0.<bsh.Parser: bsh.JavaCharStream jj_input_stream>;

        virtualinvoke $r4.<bsh.ParserTokenManager: void ReInit(bsh.JavaCharStream)>($r3);

        $r7 = new bsh.Token;

        specialinvoke $r7.<bsh.Token: void <init>()>();

        r0.<bsh.Parser: bsh.Token token> = $r7;

        $i1 = (int) -1;

        r0.<bsh.Parser: int jj_ntk> = $i1;

        $r6 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r6.<bsh.JJTParserState: void reset()>();

        return;
    }

    public void <init>(bsh.ParserTokenManager)
    {
        bsh.Parser r0;
        bsh.ParserTokenManager r3;
        bsh.Token $r7;
        int $i1;
        bsh.JJTParserState $r5;
        bsh.Parser$LookaheadSuccess $r6;

        r0 := @this: bsh.Parser;

        r3 := @parameter0: bsh.ParserTokenManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new bsh.JJTParserState;

        specialinvoke $r5.<bsh.JJTParserState: void <init>()>();

        r0.<bsh.Parser: bsh.JJTParserState jjtree> = $r5;

        r0.<bsh.Parser: boolean retainComments> = 0;

        r0.<bsh.Parser: boolean lookingAhead> = 0;

        $r6 = new bsh.Parser$LookaheadSuccess;

        specialinvoke $r6.<bsh.Parser$LookaheadSuccess: void <init>(bsh.Parser$1)>(null);

        r0.<bsh.Parser: bsh.Parser$LookaheadSuccess jj_ls> = $r6;

        r0.<bsh.Parser: bsh.ParserTokenManager token_source> = r3;

        $r7 = new bsh.Token;

        specialinvoke $r7.<bsh.Token: void <init>()>();

        r0.<bsh.Parser: bsh.Token token> = $r7;

        $i1 = (int) -1;

        r0.<bsh.Parser: int jj_ntk> = $i1;

        return;
    }

    public void ReInit(bsh.ParserTokenManager)
    {
        bsh.Parser r0;
        bsh.ParserTokenManager r1;
        bsh.Token $r4;
        int $i1;
        bsh.JJTParserState $r3;

        r0 := @this: bsh.Parser;

        r1 := @parameter0: bsh.ParserTokenManager;

        r0.<bsh.Parser: bsh.ParserTokenManager token_source> = r1;

        $r4 = new bsh.Token;

        specialinvoke $r4.<bsh.Token: void <init>()>();

        r0.<bsh.Parser: bsh.Token token> = $r4;

        $i1 = (int) -1;

        r0.<bsh.Parser: int jj_ntk> = $i1;

        $r3 = r0.<bsh.Parser: bsh.JJTParserState jjtree>;

        virtualinvoke $r3.<bsh.JJTParserState: void reset()>();

        return;
    }

    private final bsh.Token jj_consume_token(int) throws bsh.ParseException
    {
        bsh.ParseException $r7;
        bsh.Parser r0;
        bsh.ParserTokenManager $r3;
        bsh.Token $r1, $r2, $r4, $r5, $r6, $r8, $r9, $r10;
        int i0, $i1, $i3;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        $r2 = $r1.<bsh.Token: bsh.Token next>;

        if $r2 == null goto label1;

        $r9 = r0.<bsh.Parser: bsh.Token token>;

        $r10 = $r9.<bsh.Token: bsh.Token next>;

        r0.<bsh.Parser: bsh.Token token> = $r10;

        goto label2;

     label1:
        $r4 = r0.<bsh.Parser: bsh.Token token>;

        $r3 = r0.<bsh.Parser: bsh.ParserTokenManager token_source>;

        $r5 = virtualinvoke $r3.<bsh.ParserTokenManager: bsh.Token getNextToken()>();

        $r4.<bsh.Token: bsh.Token next> = $r5;

        r0.<bsh.Parser: bsh.Token token> = $r5;

     label2:
        $i3 = (int) -1;

        r0.<bsh.Parser: int jj_ntk> = $i3;

        $r6 = r0.<bsh.Parser: bsh.Token token>;

        $i1 = $r6.<bsh.Token: int kind>;

        if $i1 != i0 goto label3;

        $r8 = r0.<bsh.Parser: bsh.Token token>;

        return $r8;

     label3:
        r0.<bsh.Parser: bsh.Token token> = $r1;

        $r7 = virtualinvoke r0.<bsh.Parser: bsh.ParseException generateParseException()>();

        throw $r7;
    }

    private final boolean jj_scan_token(int)
    {
        bsh.Parser$LookaheadSuccess $r7;
        bsh.Parser r0;
        bsh.ParserTokenManager $r12;
        bsh.Token $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r13, $r14, $r15;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        $r2 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $r1 = r0.<bsh.Parser: bsh.Token jj_lastpos>;

        if $r2 != $r1 goto label2;

        $i2 = r0.<bsh.Parser: int jj_la>;

        $i3 = $i2 - 1;

        r0.<bsh.Parser: int jj_la> = $i3;

        $r8 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $r9 = $r8.<bsh.Token: bsh.Token next>;

        if $r9 != null goto label1;

        $r13 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $r12 = r0.<bsh.Parser: bsh.ParserTokenManager token_source>;

        $r14 = virtualinvoke $r12.<bsh.ParserTokenManager: bsh.Token getNextToken()>();

        $r13.<bsh.Token: bsh.Token next> = $r14;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r14;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r14;

        goto label3;

     label1:
        $r10 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $r11 = $r10.<bsh.Token: bsh.Token next>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r11;

        r0.<bsh.Parser: bsh.Token jj_lastpos> = $r11;

        goto label3;

     label2:
        $r3 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $r4 = $r3.<bsh.Token: bsh.Token next>;

        r0.<bsh.Parser: bsh.Token jj_scanpos> = $r4;

     label3:
        $r15 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $i4 = $r15.<bsh.Token: int kind>;

        if $i4 == i0 goto label4;

        return 1;

     label4:
        $i1 = r0.<bsh.Parser: int jj_la>;

        if $i1 != 0 goto label5;

        $r6 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        $r5 = r0.<bsh.Parser: bsh.Token jj_lastpos>;

        if $r6 != $r5 goto label5;

        $r7 = r0.<bsh.Parser: bsh.Parser$LookaheadSuccess jj_ls>;

        throw $r7;

     label5:
        return 0;
    }

    public final bsh.Token getNextToken()
    {
        bsh.Parser r0;
        bsh.ParserTokenManager $r3;
        bsh.Token $r1, $r2, $r4, $r5, $r6, $r7, $r8;
        int $i1;

        r0 := @this: bsh.Parser;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        $r2 = $r1.<bsh.Token: bsh.Token next>;

        if $r2 == null goto label1;

        $r7 = r0.<bsh.Parser: bsh.Token token>;

        $r8 = $r7.<bsh.Token: bsh.Token next>;

        r0.<bsh.Parser: bsh.Token token> = $r8;

        goto label2;

     label1:
        $r4 = r0.<bsh.Parser: bsh.Token token>;

        $r3 = r0.<bsh.Parser: bsh.ParserTokenManager token_source>;

        $r5 = virtualinvoke $r3.<bsh.ParserTokenManager: bsh.Token getNextToken()>();

        $r4.<bsh.Token: bsh.Token next> = $r5;

        r0.<bsh.Parser: bsh.Token token> = $r5;

     label2:
        $i1 = (int) -1;

        r0.<bsh.Parser: int jj_ntk> = $i1;

        $r6 = r0.<bsh.Parser: bsh.Token token>;

        return $r6;
    }

    public final bsh.Token getToken(int)
    {
        bsh.Parser r0;
        bsh.ParserTokenManager $r2;
        bsh.Token $r1, $r3, $r4, r5;
        int i0, i1;
        boolean $z0;

        r0 := @this: bsh.Parser;

        i0 := @parameter0: int;

        $z0 = r0.<bsh.Parser: boolean lookingAhead>;

        if $z0 == 0 goto label1;

        $r4 = r0.<bsh.Parser: bsh.Token jj_scanpos>;

        goto label2;

     label1:
        $r4 = r0.<bsh.Parser: bsh.Token token>;

     label2:
        r5 = $r4;

        i1 = 0;

        goto label6;

     label3:
        $r1 = r5.<bsh.Token: bsh.Token next>;

        if $r1 == null goto label4;

        r5 = r5.<bsh.Token: bsh.Token next>;

        goto label5;

     label4:
        $r2 = r0.<bsh.Parser: bsh.ParserTokenManager token_source>;

        $r3 = virtualinvoke $r2.<bsh.ParserTokenManager: bsh.Token getNextToken()>();

        r5.<bsh.Token: bsh.Token next> = $r3;

        r5 = $r3;

     label5:
        i1 = i1 + 1;

     label6:
        if i1 < i0 goto label3;

        return r5;
    }

    private final int jj_ntk()
    {
        bsh.Parser r0;
        bsh.ParserTokenManager $r4;
        bsh.Token $r1, $r2, $r3, $r5, $r6;
        int $i0, $i1;

        r0 := @this: bsh.Parser;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        $r2 = $r1.<bsh.Token: bsh.Token next>;

        r0.<bsh.Parser: bsh.Token jj_nt> = $r2;

        if $r2 != null goto label1;

        $r5 = r0.<bsh.Parser: bsh.Token token>;

        $r4 = r0.<bsh.Parser: bsh.ParserTokenManager token_source>;

        $r6 = virtualinvoke $r4.<bsh.ParserTokenManager: bsh.Token getNextToken()>();

        $r5.<bsh.Token: bsh.Token next> = $r6;

        $i1 = $r6.<bsh.Token: int kind>;

        r0.<bsh.Parser: int jj_ntk> = $i1;

        return $i1;

     label1:
        $r3 = r0.<bsh.Parser: bsh.Token jj_nt>;

        $i0 = $r3.<bsh.Token: int kind>;

        r0.<bsh.Parser: int jj_ntk> = $i0;

        return $i0;
    }

    public bsh.ParseException generateParseException()
    {
        java.lang.String[] $r12;
        bsh.ParseException $r3;
        bsh.Parser r0;
        bsh.Token $r1, r2;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int i0, i1, $i2;
        java.lang.String $r11, $r13;

        r0 := @this: bsh.Parser;

        $r1 = r0.<bsh.Parser: bsh.Token token>;

        r2 = $r1.<bsh.Token: bsh.Token next>;

        i0 = r2.<bsh.Token: int beginLine>;

        i1 = r2.<bsh.Token: int beginColumn>;

        $i2 = r2.<bsh.Token: int kind>;

        if $i2 != 0 goto label1;

        $r12 = <bsh.ParserConstants: java.lang.String[] tokenImage>;

        $r13 = $r12[0];

        goto label2;

     label1:
        $r13 = r2.<bsh.Token: java.lang.String image>;

     label2:
        $r3 = new bsh.ParseException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Parse error at line ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", column ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".  Encountered: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<bsh.ParseException: void <init>(java.lang.String)>($r11);

        return $r3;
    }

    public final void enable_tracing()
    {
        bsh.Parser r0;

        r0 := @this: bsh.Parser;

        return;
    }

    public final void disable_tracing()
    {
        bsh.Parser r0;

        r0 := @this: bsh.Parser;

        return;
    }
}
