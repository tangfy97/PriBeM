public abstract class org.fife.print.RPrintUtilities extends java.lang.Object
{
    private static int currentDocLineNumber;
    private static int numDocLines;
    private static javax.swing.text.Element rootElement;
    private static final char[] breakChars;
    private static int xOffset;
    private static int tabSizeInSpaces;
    private static java.awt.FontMetrics fm;

    public void <init>()
    {
        org.fife.print.RPrintUtilities r0;

        r0 := @this: org.fife.print.RPrintUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int getLineBreakPoint(java.lang.String, int)
    {
        char $c3;
        int $i0, i1, $i2, $i4, i5, i6, $i7, $i9, $i10, $i12;
        char[] $r0, $r2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $i9 = (int) -1;

        i5 = $i9;

        i6 = 0;

     label1:
        $r0 = <org.fife.print.RPrintUtilities: char[] breakChars>;

        $i0 = lengthof $r0;

        if i6 >= $i0 goto label3;

        $r2 = <org.fife.print.RPrintUtilities: char[] breakChars>;

        $c3 = $r2[i6];

        $i2 = i1 - 1;

        $i10 = (int) $c3;

        $i4 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int,int)>($i10, $i2);

        if $i4 <= i5 goto label2;

        i5 = $i4;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        $i12 = (int) -1;

        if i5 != $i12 goto label4;

        $i7 = i1 - 1;

        goto label5;

     label4:
        $i7 = i5;

     label5:
        return $i7;
    }

    public static int printDocumentMonospaced(java.awt.Graphics, javax.swing.text.Document, int, int, java.awt.print.PageFormat, int)
    {
        java.awt.Color $r1;
        javax.swing.text.BadLocationException $r20;
        java.lang.StringBuffer $r18, $r19, $r24;
        java.lang.String $r13, $r14, $r15, $r16, r21, r22;
        java.awt.FontMetrics $r3, $r4, $r5, $r7;
        java.awt.print.PageFormat r6;
        java.awt.Font $r23;
        java.awt.Graphics r0;
        javax.swing.text.Document r8;
        int i0, i1, $i2, $i3, $i4, i5, $i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32, i33, i34, i35, i36, $i37, $i39;
        double $d0, $d1, $d2, $d3;
        javax.swing.text.Element $r9, $r10, $r11, $r12;

        r0 := @parameter0: java.awt.Graphics;

        r8 := @parameter1: javax.swing.text.Document;

        i0 := @parameter2: int;

        i8 := @parameter3: int;

        r6 := @parameter4: java.awt.print.PageFormat;

        i1 := @parameter5: int;

        $r1 = <java.awt.Color: java.awt.Color BLACK>;

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        $r23 = new java.awt.Font;

        specialinvoke $r23.<java.awt.Font: void <init>(java.lang.String,int,int)>("Monospaced", 0, i0);

        virtualinvoke r0.<java.awt.Graphics: void setFont(java.awt.Font)>($r23);

        <org.fife.print.RPrintUtilities: int tabSizeInSpaces> = i1;

        $r3 = virtualinvoke r0.<java.awt.Graphics: java.awt.FontMetrics getFontMetrics()>();

        <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm> = $r3;

        $r4 = <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm>;

        $i2 = virtualinvoke $r4.<java.awt.FontMetrics: int charWidth(char)>(119);

        $r5 = <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm>;

        $i3 = virtualinvoke $r5.<java.awt.FontMetrics: int getHeight()>();

        $d0 = virtualinvoke r6.<java.awt.print.PageFormat: double getImageableWidth()>();

        $i4 = (int) $d0;

        i5 = $i4 / $i2;

        $d1 = virtualinvoke r6.<java.awt.print.PageFormat: double getImageableHeight()>();

        $i6 = (int) $d1;

        i7 = $i6 / $i3;

        i9 = i7 * i8;

        $d2 = virtualinvoke r6.<java.awt.print.PageFormat: double getImageableX()>();

        $i10 = (int) $d2;

        <org.fife.print.RPrintUtilities: int xOffset> = $i10;

        $d3 = virtualinvoke r6.<java.awt.print.PageFormat: double getImageableY()>();

        $i11 = (int) $d3;

        $r7 = <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm>;

        $i12 = virtualinvoke $r7.<java.awt.FontMetrics: int getAscent()>();

        $i13 = $i11 + $i12;

        i33 = $i13 + 1;

        i34 = 0;

        <org.fife.print.RPrintUtilities: int currentDocLineNumber> = 0;

        $r9 = interfaceinvoke r8.<javax.swing.text.Document: javax.swing.text.Element getDefaultRootElement()>();

        <org.fife.print.RPrintUtilities: javax.swing.text.Element rootElement> = $r9;

        $r10 = <org.fife.print.RPrintUtilities: javax.swing.text.Element rootElement>;

        $i14 = interfaceinvoke $r10.<javax.swing.text.Element: int getElementCount()>();

        <org.fife.print.RPrintUtilities: int numDocLines> = $i14;

     label01:
        $i16 = <org.fife.print.RPrintUtilities: int currentDocLineNumber>;

        $i15 = <org.fife.print.RPrintUtilities: int numDocLines>;

        if $i16 >= $i15 goto label14;

        $r11 = <org.fife.print.RPrintUtilities: javax.swing.text.Element rootElement>;

        $i17 = <org.fife.print.RPrintUtilities: int currentDocLineNumber>;

        $r12 = interfaceinvoke $r11.<javax.swing.text.Element: javax.swing.text.Element getElement(int)>($i17);

        $i18 = interfaceinvoke $r12.<javax.swing.text.Element: int getStartOffset()>();

     label02:
        $i19 = interfaceinvoke $r12.<javax.swing.text.Element: int getEndOffset()>();

        $i20 = $i19 - $i18;

        $r13 = interfaceinvoke r8.<javax.swing.text.Document: java.lang.String getText(int,int)>($i18, $i20);

     label03:
        goto label05;

     label04:
        $r20 := @caughtexception;

        virtualinvoke $r20.<javax.swing.text.BadLocationException: void printStackTrace()>();

        return 1;

     label05:
        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\n", "");

        r21 = $r14;

        $i21 = <org.fife.print.RPrintUtilities: int tabSizeInSpaces>;

        if $i21 != 0 goto label06;

        r21 = virtualinvoke $r14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\t", "");

        goto label10;

     label06:
        i35 = virtualinvoke $r14.<java.lang.String: int indexOf(int)>(9);

     label07:
        $i39 = (int) -1;

        if i35 <= $i39 goto label10;

        $i31 = <org.fife.print.RPrintUtilities: int tabSizeInSpaces>;

        $i29 = <org.fife.print.RPrintUtilities: int tabSizeInSpaces>;

        $i30 = i35 % $i29;

        i32 = $i31 - $i30;

        r22 = "";

        i36 = 0;

     label08:
        if i36 >= i32 goto label09;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r22);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        i36 = i36 + 1;

        goto label08;

     label09:
        $r16 = virtualinvoke r21.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("\t", r22);

        r21 = $r16;

        i35 = virtualinvoke $r16.<java.lang.String: int indexOf(int)>(9);

        goto label07;

     label10:
        $i37 = virtualinvoke r21.<java.lang.String: int length()>();

        if $i37 <= i5 goto label12;

        i34 = i34 + 1;

        if i34 <= i9 goto label11;

        $r15 = virtualinvoke r21.<java.lang.String: java.lang.String substring(int,int)>(0, i5);

        $i27 = <org.fife.print.RPrintUtilities: int xOffset>;

        virtualinvoke r0.<java.awt.Graphics: void drawString(java.lang.String,int,int)>($r15, $i27, i33);

        i33 = i33 + $i3;

        $i28 = i9 + i7;

        if i34 != $i28 goto label11;

        return 0;

     label11:
        $i26 = virtualinvoke r21.<java.lang.String: int length()>();

        r21 = virtualinvoke r21.<java.lang.String: java.lang.String substring(int,int)>(i5, $i26);

        goto label10;

     label12:
        $i22 = <org.fife.print.RPrintUtilities: int currentDocLineNumber>;

        $i23 = $i22 + 1;

        <org.fife.print.RPrintUtilities: int currentDocLineNumber> = $i23;

        i34 = i34 + 1;

        if i34 <= i9 goto label13;

        $i24 = <org.fife.print.RPrintUtilities: int xOffset>;

        virtualinvoke r0.<java.awt.Graphics: void drawString(java.lang.String,int,int)>(r21, $i24, i33);

        i33 = i33 + $i3;

        $i25 = i9 + i7;

        if i34 != $i25 goto label13;

        return 0;

     label13:
        goto label01;

     label14:
        if i34 <= i9 goto label15;

        return 0;

     label15:
        return 1;

        catch javax.swing.text.BadLocationException from label02 to label03 with label04;
    }

    public static int printDocumentMonospacedWordWrap(java.awt.Graphics, javax.swing.text.Document, int, int, java.awt.print.PageFormat, int)
    {
        java.awt.Color $r1;
        javax.swing.text.BadLocationException $r20;
        java.lang.StringBuffer $r18, $r19, $r24;
        java.lang.String $r13, $r14, $r15, $r16, r21, r22;
        java.awt.FontMetrics $r3, $r4, $r5, $r7;
        java.awt.print.PageFormat r6;
        java.awt.Font $r23;
        java.awt.Graphics r0;
        javax.swing.text.Document r8;
        int i0, i1, $i2, $i3, $i4, i5, $i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33, i34, i35, i36, i37, $i38, i39, $i41;
        double $d0, $d1, $d2, $d3;
        javax.swing.text.Element $r9, $r10, $r11, $r12;

        r0 := @parameter0: java.awt.Graphics;

        r8 := @parameter1: javax.swing.text.Document;

        i0 := @parameter2: int;

        i8 := @parameter3: int;

        r6 := @parameter4: java.awt.print.PageFormat;

        i1 := @parameter5: int;

        $r1 = <java.awt.Color: java.awt.Color BLACK>;

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        $r23 = new java.awt.Font;

        specialinvoke $r23.<java.awt.Font: void <init>(java.lang.String,int,int)>("Monospaced", 0, i0);

        virtualinvoke r0.<java.awt.Graphics: void setFont(java.awt.Font)>($r23);

        <org.fife.print.RPrintUtilities: int tabSizeInSpaces> = i1;

        $r3 = virtualinvoke r0.<java.awt.Graphics: java.awt.FontMetrics getFontMetrics()>();

        <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm> = $r3;

        $r4 = <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm>;

        $i2 = virtualinvoke $r4.<java.awt.FontMetrics: int charWidth(char)>(119);

        $r5 = <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm>;

        $i3 = virtualinvoke $r5.<java.awt.FontMetrics: int getHeight()>();

        $d0 = virtualinvoke r6.<java.awt.print.PageFormat: double getImageableWidth()>();

        $i4 = (int) $d0;

        i5 = $i4 / $i2;

        $d1 = virtualinvoke r6.<java.awt.print.PageFormat: double getImageableHeight()>();

        $i6 = (int) $d1;

        i7 = $i6 / $i3;

        i9 = i7 * i8;

        $d2 = virtualinvoke r6.<java.awt.print.PageFormat: double getImageableX()>();

        $i10 = (int) $d2;

        <org.fife.print.RPrintUtilities: int xOffset> = $i10;

        $d3 = virtualinvoke r6.<java.awt.print.PageFormat: double getImageableY()>();

        $i11 = (int) $d3;

        $r7 = <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm>;

        $i12 = virtualinvoke $r7.<java.awt.FontMetrics: int getAscent()>();

        $i13 = $i11 + $i12;

        i34 = $i13 + 1;

        i35 = 0;

        <org.fife.print.RPrintUtilities: int currentDocLineNumber> = 0;

        $r9 = interfaceinvoke r8.<javax.swing.text.Document: javax.swing.text.Element getDefaultRootElement()>();

        <org.fife.print.RPrintUtilities: javax.swing.text.Element rootElement> = $r9;

        $r10 = <org.fife.print.RPrintUtilities: javax.swing.text.Element rootElement>;

        $i14 = interfaceinvoke $r10.<javax.swing.text.Element: int getElementCount()>();

        <org.fife.print.RPrintUtilities: int numDocLines> = $i14;

     label01:
        $i16 = <org.fife.print.RPrintUtilities: int currentDocLineNumber>;

        $i15 = <org.fife.print.RPrintUtilities: int numDocLines>;

        if $i16 >= $i15 goto label14;

        $r11 = <org.fife.print.RPrintUtilities: javax.swing.text.Element rootElement>;

        $i17 = <org.fife.print.RPrintUtilities: int currentDocLineNumber>;

        $r12 = interfaceinvoke $r11.<javax.swing.text.Element: javax.swing.text.Element getElement(int)>($i17);

        $i18 = interfaceinvoke $r12.<javax.swing.text.Element: int getStartOffset()>();

     label02:
        $i19 = interfaceinvoke $r12.<javax.swing.text.Element: int getEndOffset()>();

        $i20 = $i19 - $i18;

        $r13 = interfaceinvoke r8.<javax.swing.text.Document: java.lang.String getText(int,int)>($i18, $i20);

     label03:
        goto label05;

     label04:
        $r20 := @caughtexception;

        virtualinvoke $r20.<javax.swing.text.BadLocationException: void printStackTrace()>();

        return 1;

     label05:
        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\n", "");

        r21 = $r14;

        $i21 = <org.fife.print.RPrintUtilities: int tabSizeInSpaces>;

        if $i21 != 0 goto label06;

        r21 = virtualinvoke $r14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\t", "");

        goto label10;

     label06:
        i36 = virtualinvoke $r14.<java.lang.String: int indexOf(int)>(9);

     label07:
        $i41 = (int) -1;

        if i36 <= $i41 goto label10;

        $i32 = <org.fife.print.RPrintUtilities: int tabSizeInSpaces>;

        $i30 = <org.fife.print.RPrintUtilities: int tabSizeInSpaces>;

        $i31 = i36 % $i30;

        i33 = $i32 - $i31;

        r22 = "";

        i37 = 0;

     label08:
        if i37 >= i33 goto label09;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r22);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        i37 = i37 + 1;

        goto label08;

     label09:
        $r16 = virtualinvoke r21.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("\t", r22);

        r21 = $r16;

        i36 = virtualinvoke $r16.<java.lang.String: int indexOf(int)>(9);

        goto label07;

     label10:
        $i38 = virtualinvoke r21.<java.lang.String: int length()>();

        if $i38 <= i5 goto label12;

        $i26 = staticinvoke <org.fife.print.RPrintUtilities: int getLineBreakPoint(java.lang.String,int)>(r21, i5);

        i39 = $i26 + 1;

        i35 = i35 + 1;

        if i35 <= i9 goto label11;

        $r15 = virtualinvoke r21.<java.lang.String: java.lang.String substring(int,int)>(0, i39);

        $i28 = <org.fife.print.RPrintUtilities: int xOffset>;

        virtualinvoke r0.<java.awt.Graphics: void drawString(java.lang.String,int,int)>($r15, $i28, i34);

        i34 = i34 + $i3;

        $i29 = i9 + i7;

        if i35 != $i29 goto label11;

        return 0;

     label11:
        $i27 = virtualinvoke r21.<java.lang.String: int length()>();

        r21 = virtualinvoke r21.<java.lang.String: java.lang.String substring(int,int)>(i39, $i27);

        goto label10;

     label12:
        $i22 = <org.fife.print.RPrintUtilities: int currentDocLineNumber>;

        $i23 = $i22 + 1;

        <org.fife.print.RPrintUtilities: int currentDocLineNumber> = $i23;

        i35 = i35 + 1;

        if i35 <= i9 goto label13;

        $i24 = <org.fife.print.RPrintUtilities: int xOffset>;

        virtualinvoke r0.<java.awt.Graphics: void drawString(java.lang.String,int,int)>(r21, $i24, i34);

        i34 = i34 + $i3;

        $i25 = i9 + i7;

        if i35 != $i25 goto label13;

        return 0;

     label13:
        goto label01;

     label14:
        if i35 <= i9 goto label15;

        return 0;

     label15:
        return 1;

        catch javax.swing.text.BadLocationException from label02 to label03 with label04;
    }

    public static int printDocumentWordWrap(java.awt.Graphics, javax.swing.text.JTextComponent, java.awt.Font, int, java.awt.print.PageFormat, int)
    {
        java.awt.Color $r1;
        javax.swing.text.BadLocationException $r23, $r41, $r43;
        org.fife.print.RPrintUtilities$RPrintTabExpander $r51;
        java.lang.StringBuffer $r27, $r28, $r29, $r30, $r31, $r32, $r36, $r37, $r38, $r39, $r46, $r47, $r53, $r54, $r55;
        java.lang.String $r18, $r33, $r40, $r48;
        java.awt.FontMetrics $r4, $r5, $r8, $r16, $r20, $r21;
        char[] $r19, $r22;
        java.awt.print.PageFormat r6;
        boolean $z0, $z1, $z2;
        java.awt.Font r2, $r49;
        java.awt.Graphics r0;
        javax.swing.text.Document $r9;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35, i36, $i37, $i38, i39, i40, i41, i42, $i44, $i46, $i47, $i49, $i51;
        double $d0, $d1, $d2, $d3;
        java.io.PrintStream $r24, $r26, $r35, $r42, $r45;
        char $c22;
        javax.swing.text.JTextComponent r3;
        javax.swing.text.Segment $r15, $r17, r50, $r52;
        javax.swing.text.Element $r10, $r11, $r13, $r14;

        r0 := @parameter0: java.awt.Graphics;

        r3 := @parameter1: javax.swing.text.JTextComponent;

        r2 := @parameter2: java.awt.Font;

        i3 := @parameter3: int;

        r6 := @parameter4: java.awt.print.PageFormat;

        i0 := @parameter5: int;

        $r1 = <java.awt.Color: java.awt.Color BLACK>;

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        if r2 == null goto label01;

        $r49 = r2;

        goto label02;

     label01:
        $r49 = virtualinvoke r3.<javax.swing.text.JTextComponent: java.awt.Font getFont()>();

     label02:
        virtualinvoke r0.<java.awt.Graphics: void setFont(java.awt.Font)>($r49);

        <org.fife.print.RPrintUtilities: int tabSizeInSpaces> = i0;

        $r4 = virtualinvoke r0.<java.awt.Graphics: java.awt.FontMetrics getFontMetrics()>();

        <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm> = $r4;

        $r5 = <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm>;

        $i1 = virtualinvoke $r5.<java.awt.FontMetrics: int getHeight()>();

        $d0 = virtualinvoke r6.<java.awt.print.PageFormat: double getImageableWidth()>();

        $i28 = (int) $d0;

        $d1 = virtualinvoke r6.<java.awt.print.PageFormat: double getImageableHeight()>();

        $i2 = (int) $d1;

        $i29 = $i2 / $i1;

        $i30 = $i29 * i3;

        $r51 = new org.fife.print.RPrintUtilities$RPrintTabExpander;

        specialinvoke $r51.<org.fife.print.RPrintUtilities$RPrintTabExpander: void <init>()>();

        $d2 = virtualinvoke r6.<java.awt.print.PageFormat: double getImageableX()>();

        $i4 = (int) $d2;

        <org.fife.print.RPrintUtilities: int xOffset> = $i4;

        $d3 = virtualinvoke r6.<java.awt.print.PageFormat: double getImageableY()>();

        $i5 = (int) $d3;

        $r8 = <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm>;

        $i6 = virtualinvoke $r8.<java.awt.FontMetrics: int getAscent()>();

        $i7 = $i5 + $i6;

        i34 = $i7 + 1;

        i35 = 0;

        $r9 = virtualinvoke r3.<javax.swing.text.JTextComponent: javax.swing.text.Document getDocument()>();

        $r10 = interfaceinvoke $r9.<javax.swing.text.Document: javax.swing.text.Element getDefaultRootElement()>();

        <org.fife.print.RPrintUtilities: javax.swing.text.Element rootElement> = $r10;

        $r11 = <org.fife.print.RPrintUtilities: javax.swing.text.Element rootElement>;

        $i8 = interfaceinvoke $r11.<javax.swing.text.Element: int getElementCount()>();

        <org.fife.print.RPrintUtilities: int numDocLines> = $i8;

        <org.fife.print.RPrintUtilities: int currentDocLineNumber> = 0;

        i36 = 0;

     label03:
        $i37 = <org.fife.print.RPrintUtilities: int currentDocLineNumber>;

        $i38 = <org.fife.print.RPrintUtilities: int numDocLines>;

        if $i37 >= $i38 goto label29;

        $r52 = new javax.swing.text.Segment;

        specialinvoke $r52.<javax.swing.text.Segment: void <init>()>();

        $r13 = <org.fife.print.RPrintUtilities: javax.swing.text.Element rootElement>;

        $i9 = <org.fife.print.RPrintUtilities: int currentDocLineNumber>;

        $r14 = interfaceinvoke $r13.<javax.swing.text.Element: javax.swing.text.Element getElement(int)>($i9);

        $i10 = interfaceinvoke $r14.<javax.swing.text.Element: int getStartOffset()>();

        $i11 = interfaceinvoke $r14.<javax.swing.text.Element: int getEndOffset()>();

     label04:
        $i14 = $i10 + i36;

        $i12 = $i10 + i36;

        $i13 = $i11 - $i12;

        interfaceinvoke $r9.<javax.swing.text.Document: void getText(int,int,javax.swing.text.Segment)>($i14, $i13, $r52);

     label05:
        goto label07;

     label06:
        $r43 := @caughtexception;

        $r45 = <java.lang.System: java.io.PrintStream err>;

        $r53 = new java.lang.StringBuffer;

        specialinvoke $r53.<java.lang.StringBuffer: void <init>()>();

        $r46 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("BadLocationException in print (where there shouldn\'t be one!): ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r43);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r45.<java.io.PrintStream: void println(java.lang.String)>($r48);

        return 1;

     label07:
        $r15 = staticinvoke <org.fife.print.RPrintUtilities: javax.swing.text.Segment removeEndingWhitespace(javax.swing.text.Segment)>($r52);

        r50 = $r15;

        $r16 = <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm>;

        $i15 = staticinvoke <javax.swing.text.Utilities: int getTabbedTextWidth(javax.swing.text.Segment,java.awt.FontMetrics,int,javax.swing.text.TabExpander,int)>($r15, $r16, 0, $r51, 0);

        i39 = $i15;

        if $i15 > $i28 goto label08;

        $i26 = <org.fife.print.RPrintUtilities: int currentDocLineNumber>;

        $i27 = $i26 + 1;

        <org.fife.print.RPrintUtilities: int currentDocLineNumber> = $i27;

        i36 = 0;

        goto label27;

     label08:
        $i44 = (int) -1;

        i40 = $i44;

     label09:
        if i39 <= $i28 goto label26;

        $r17 = staticinvoke <org.fife.print.RPrintUtilities: javax.swing.text.Segment removeEndingWhitespace(javax.swing.text.Segment)>(r50);

        r50 = $r17;

        $i46 = (int) -1;

        i40 = $i46;

        $r18 = virtualinvoke $r17.<javax.swing.text.Segment: java.lang.String toString()>();

        i41 = 0;

     label10:
        $r19 = <org.fife.print.RPrintUtilities: char[] breakChars>;

        $i18 = lengthof $r19;

        if i41 >= $i18 goto label16;

        $r22 = <org.fife.print.RPrintUtilities: char[] breakChars>;

        $c22 = $r22[i41];

        $i47 = (int) $c22;

        $i23 = virtualinvoke $r18.<java.lang.String: int lastIndexOf(int)>($i47);

        i24 = $i23 + 1;

        if i24 <= 0 goto label15;

        if i24 <= i40 goto label11;

        $z0 = 1;

        goto label12;

     label11:
        $z0 = 0;

     label12:
        $i25 = virtualinvoke $r18.<java.lang.String: int length()>();

        if i24 == $i25 goto label13;

        $z1 = 1;

        goto label14;

     label13:
        $z1 = 0;

     label14:
        $z2 = $z0 & $z1;

        if $z2 == 0 goto label15;

        i40 = i24;

     label15:
        i41 = i41 + 1;

        goto label10;

     label16:
        $i49 = (int) -1;

        if i40 != $i49 goto label22;

        i42 = 0;

     label17:
        i42 = i42 + 1;

     label18:
        $i20 = $i10 + i36;

        interfaceinvoke $r9.<javax.swing.text.Document: void getText(int,int,javax.swing.text.Segment)>($i20, i42, $r17);

     label19:
        goto label21;

     label20:
        $r41 := @caughtexception;

        $r42 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r42.<java.io.PrintStream: void println(java.lang.Object)>($r41);

        return 1;

     label21:
        $r21 = <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm>;

        $i21 = staticinvoke <javax.swing.text.Utilities: int getTabbedTextWidth(javax.swing.text.Segment,java.awt.FontMetrics,int,javax.swing.text.TabExpander,int)>($r17, $r21, 0, $r51, 0);

        if $i21 <= $i28 goto label17;

        $i51 = (int) -1;

        i40 = i42 + $i51;

     label22:
        $i19 = $i10 + i36;

        interfaceinvoke $r9.<javax.swing.text.Document: void getText(int,int,javax.swing.text.Segment)>($i19, i40, $r17);

     label23:
        goto label25;

     label24:
        $r23 := @caughtexception;

        $r24 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>("BadLocationException in print (a):");

        $r26 = <java.lang.System: java.io.PrintStream err>;

        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("==> currentLineStart: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i10);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; startingOffset: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i36);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; currentPos: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i40);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>($r33);

        $r35 = <java.lang.System: java.io.PrintStream err>;

        $r55 = new java.lang.StringBuffer;

        specialinvoke $r55.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("==> Range: ");

        $i31 = $i10 + i36;

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i31);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - ");

        $i32 = $i10 + i36;

        $i33 = $i32 + i40;

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i33);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>($r40);

        virtualinvoke $r23.<javax.swing.text.BadLocationException: void printStackTrace()>();

        return 1;

     label25:
        $r20 = <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm>;

        i39 = staticinvoke <javax.swing.text.Utilities: int getTabbedTextWidth(javax.swing.text.Segment,java.awt.FontMetrics,int,javax.swing.text.TabExpander,int)>($r17, $r20, 0, $r51, 0);

        goto label09;

     label26:
        i36 = i36 + i40;

     label27:
        i35 = i35 + 1;

        if i35 <= $i30 goto label28;

        $i16 = <org.fife.print.RPrintUtilities: int xOffset>;

        staticinvoke <javax.swing.text.Utilities: int drawTabbedText(javax.swing.text.Segment,int,int,java.awt.Graphics,javax.swing.text.TabExpander,int)>(r50, $i16, i34, r0, $r51, 0);

        i34 = i34 + $i1;

        $i17 = $i30 + $i29;

        if i35 != $i17 goto label28;

        return 0;

     label28:
        goto label03;

     label29:
        if i35 <= $i30 goto label30;

        return 0;

     label30:
        return 1;

        catch javax.swing.text.BadLocationException from label04 to label05 with label06;
        catch javax.swing.text.BadLocationException from label18 to label19 with label20;
        catch javax.swing.text.BadLocationException from label22 to label23 with label24;
    }

    private static javax.swing.text.Segment removeEndingWhitespace(javax.swing.text.Segment)
    {
        int $i0, $i1, $i2, $i3, $i4, i5, $i7, $i8, $i9, $i11;
        java.lang.String $r1, $r2;
        char c6;
        char[] $r4;
        javax.swing.text.Segment r0, $r5;

        r0 := @parameter0: javax.swing.text.Segment;

        i5 = 0;

        $i0 = virtualinvoke r0.<javax.swing.text.Segment: int getEndIndex()>();

        $i1 = $i0 - 1;

        c6 = virtualinvoke r0.<javax.swing.text.Segment: char setIndex(int)>($i1);

     label1:
        $i7 = (int) c6;

        if $i7 == 32 goto label2;

        $i8 = (int) c6;

        if $i8 != 9 goto label3;

     label2:
        $i9 = (int) c6;

        $i11 = (int) 65535;

        if $i9 == $i11 goto label3;

        i5 = i5 + 1;

        c6 = virtualinvoke r0.<javax.swing.text.Segment: char previous()>();

        goto label1;

     label3:
        $r1 = virtualinvoke r0.<javax.swing.text.Segment: java.lang.String toString()>();

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = $i2 - i5;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $r5 = new javax.swing.text.Segment;

        $r4 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $i4 = virtualinvoke $r2.<java.lang.String: int length()>();

        specialinvoke $r5.<javax.swing.text.Segment: void <init>(char[],int,int)>($r4, 0, $i4);

        return $r5;
    }

    static int access$000()
    {
        int $i0;

        $i0 = <org.fife.print.RPrintUtilities: int tabSizeInSpaces>;

        return $i0;
    }

    static java.awt.FontMetrics access$100()
    {
        java.awt.FontMetrics $r0;

        $r0 = <org.fife.print.RPrintUtilities: java.awt.FontMetrics fm>;

        return $r0;
    }

    static int access$200()
    {
        int $i0;

        $i0 = <org.fife.print.RPrintUtilities: int xOffset>;

        return $i0;
    }

    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[7];

        $r0[0] = 32;

        $r0[1] = 9;

        $r0[2] = 44;

        $r0[3] = 46;

        $r0[4] = 59;

        $r0[5] = 63;

        $r0[6] = 33;

        <org.fife.print.RPrintUtilities: char[] breakChars> = $r0;

        return;
    }
}
