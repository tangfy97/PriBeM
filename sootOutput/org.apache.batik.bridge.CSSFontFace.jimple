public class org.apache.batik.bridge.CSSFontFace extends org.apache.batik.bridge.FontFace implements org.apache.batik.util.SVGConstants
{
    org.apache.batik.gvt.font.GVTFontFamily fontFamily;

    public void <init>(java.util.List, java.lang.String, float, java.lang.String, java.lang.String, java.lang.String, java.lang.String, float, java.lang.String, float, float, float, float, float, float, float, float)
    {
        java.lang.String r2, r3, r4, r5, r6, r7;
        java.util.List r1;
        org.apache.batik.bridge.CSSFontFace r0;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9;

        r0 := @this: org.apache.batik.bridge.CSSFontFace;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        f1 := @parameter7: float;

        r7 := @parameter8: java.lang.String;

        f2 := @parameter9: float;

        f3 := @parameter10: float;

        f4 := @parameter11: float;

        f5 := @parameter12: float;

        f6 := @parameter13: float;

        f7 := @parameter14: float;

        f8 := @parameter15: float;

        f9 := @parameter16: float;

        specialinvoke r0.<org.apache.batik.bridge.FontFace: void <init>(java.util.List,java.lang.String,float,java.lang.String,java.lang.String,java.lang.String,java.lang.String,float,java.lang.String,float,float,float,float,float,float,float,float)>(r1, r2, f0, r3, r4, r5, r6, f1, r7, f2, f3, f4, f5, f6, f7, f8, f9);

        r0.<org.apache.batik.bridge.CSSFontFace: org.apache.batik.gvt.font.GVTFontFamily fontFamily> = null;

        return;
    }

    protected void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.bridge.CSSFontFace r0;

        r0 := @this: org.apache.batik.bridge.CSSFontFace;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.batik.bridge.FontFace: void <init>(java.lang.String)>(r1);

        r0.<org.apache.batik.bridge.CSSFontFace: org.apache.batik.gvt.font.GVTFontFamily fontFamily> = null;

        return;
    }

    public static org.apache.batik.bridge.CSSFontFace createCSSFontFace(org.apache.batik.css.engine.CSSEngine, org.apache.batik.css.engine.FontFaceRule)
    {
        org.apache.batik.css.engine.CSSEngine r2;
        short $s0, $s1;
        org.apache.batik.css.engine.StyleMap $r1;
        int $i2, i3, $i4;
        java.lang.String $r3, $r19, $r20, $r21, $r22;
        java.util.LinkedList $r24, $r25;
        org.apache.batik.css.engine.FontFaceRule r0;
        org.apache.batik.css.engine.value.Value $r5, $r6, $r7, $r8, $r9, $r11, $r14;
        java.util.List $r13, $r17;
        org.apache.batik.util.ParsedURL $r10;
        org.apache.batik.bridge.CSSFontFace $r23;
        java.lang.Object $r15, $r18;

        r2 := @parameter0: org.apache.batik.css.engine.CSSEngine;

        r0 := @parameter1: org.apache.batik.css.engine.FontFaceRule;

        $r1 = virtualinvoke r0.<org.apache.batik.css.engine.FontFaceRule: org.apache.batik.css.engine.StyleMap getStyleMap()>();

        $r3 = staticinvoke <org.apache.batik.bridge.CSSFontFace: java.lang.String getStringProp(org.apache.batik.css.engine.StyleMap,org.apache.batik.css.engine.CSSEngine,int)>($r1, r2, 21);

        $r23 = new org.apache.batik.bridge.CSSFontFace;

        specialinvoke $r23.<org.apache.batik.bridge.CSSFontFace: void <init>(java.lang.String)>($r3);

        $r5 = virtualinvoke $r1.<org.apache.batik.css.engine.StyleMap: org.apache.batik.css.engine.value.Value getValue(int)>(27);

        if $r5 == null goto label1;

        $r22 = interfaceinvoke $r5.<org.apache.batik.css.engine.value.Value: java.lang.String getCssText()>();

        $r23.<org.apache.batik.gvt.font.GVTFontFace: java.lang.String fontWeight> = $r22;

     label1:
        $r6 = virtualinvoke $r1.<org.apache.batik.css.engine.StyleMap: org.apache.batik.css.engine.value.Value getValue(int)>(25);

        if $r6 == null goto label2;

        $r21 = interfaceinvoke $r6.<org.apache.batik.css.engine.value.Value: java.lang.String getCssText()>();

        $r23.<org.apache.batik.gvt.font.GVTFontFace: java.lang.String fontStyle> = $r21;

     label2:
        $r7 = virtualinvoke $r1.<org.apache.batik.css.engine.StyleMap: org.apache.batik.css.engine.value.Value getValue(int)>(26);

        if $r7 == null goto label3;

        $r20 = interfaceinvoke $r7.<org.apache.batik.css.engine.value.Value: java.lang.String getCssText()>();

        $r23.<org.apache.batik.gvt.font.GVTFontFace: java.lang.String fontVariant> = $r20;

     label3:
        $r8 = virtualinvoke $r1.<org.apache.batik.css.engine.StyleMap: org.apache.batik.css.engine.value.Value getValue(int)>(24);

        if $r8 == null goto label4;

        $r19 = interfaceinvoke $r8.<org.apache.batik.css.engine.value.Value: java.lang.String getCssText()>();

        $r23.<org.apache.batik.gvt.font.GVTFontFace: java.lang.String fontStretch> = $r19;

     label4:
        $r9 = virtualinvoke $r1.<org.apache.batik.css.engine.StyleMap: org.apache.batik.css.engine.value.Value getValue(int)>(41);

        $r10 = virtualinvoke r0.<org.apache.batik.css.engine.FontFaceRule: org.apache.batik.util.ParsedURL getURL()>();

        if $r9 == null goto label8;

        $r11 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NONE_VALUE>;

        if $r9 == $r11 goto label8;

        $s0 = interfaceinvoke $r9.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        if $s0 != 1 goto label5;

        $r24 = new java.util.LinkedList;

        specialinvoke $r24.<java.util.LinkedList: void <init>()>();

        $r23.<org.apache.batik.bridge.FontFace: java.util.List srcs> = $r24;

        $r17 = $r23.<org.apache.batik.bridge.FontFace: java.util.List srcs>;

        $r18 = staticinvoke <org.apache.batik.bridge.CSSFontFace: java.lang.Object getSrcValue(org.apache.batik.css.engine.value.Value,org.apache.batik.util.ParsedURL)>($r9, $r10);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r18);

        goto label8;

     label5:
        $s1 = interfaceinvoke $r9.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        $i4 = (int) $s1;

        if $i4 != 2 goto label8;

        $r25 = new java.util.LinkedList;

        specialinvoke $r25.<java.util.LinkedList: void <init>()>();

        $r23.<org.apache.batik.bridge.FontFace: java.util.List srcs> = $r25;

        i3 = 0;

        goto label7;

     label6:
        $r13 = $r23.<org.apache.batik.bridge.FontFace: java.util.List srcs>;

        $r14 = interfaceinvoke $r9.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(i3);

        $r15 = staticinvoke <org.apache.batik.bridge.CSSFontFace: java.lang.Object getSrcValue(org.apache.batik.css.engine.value.Value,org.apache.batik.util.ParsedURL)>($r14, $r10);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r15);

        i3 = i3 + 1;

     label7:
        $i2 = interfaceinvoke $r9.<org.apache.batik.css.engine.value.Value: int getLength()>();

        if i3 < $i2 goto label6;

     label8:
        return $r23;
    }

    public static java.lang.Object getSrcValue(org.apache.batik.css.engine.value.Value, org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.css.engine.value.Value r0;
        short $s0, $s1, $s2;
        org.apache.batik.util.ParsedURL r2, $r7, $r8;
        int $i3, $i4;
        java.lang.String $r1, $r4, $r6;

        r0 := @parameter0: org.apache.batik.css.engine.value.Value;

        r2 := @parameter1: org.apache.batik.util.ParsedURL;

        $s0 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        if $s0 == 1 goto label1;

        return null;

     label1:
        $s1 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i3 = (int) $s1;

        if $i3 != 20 goto label3;

        if r2 == null goto label2;

        $r7 = new org.apache.batik.util.ParsedURL;

        $r6 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        specialinvoke $r7.<org.apache.batik.util.ParsedURL: void <init>(org.apache.batik.util.ParsedURL,java.lang.String)>(r2, $r6);

        return $r7;

     label2:
        $r8 = new org.apache.batik.util.ParsedURL;

        $r4 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        specialinvoke $r8.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String)>($r4);

        return $r8;

     label3:
        $s2 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i4 = (int) $s2;

        if $i4 != 19 goto label4;

        $r1 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        return $r1;

     label4:
        return null;
    }

    public static java.lang.String getStringProp(org.apache.batik.css.engine.StyleMap, org.apache.batik.css.engine.CSSEngine, int)
    {
        org.apache.batik.css.engine.value.ValueManager[] $r3;
        org.apache.batik.css.engine.value.Value $r1, r6;
        org.apache.batik.css.engine.CSSEngine r2;
        short $s1;
        org.apache.batik.css.engine.value.ValueManager r5;
        org.apache.batik.css.engine.StyleMap r0;
        int i0, $i2;
        java.lang.String $r4;

        r0 := @parameter0: org.apache.batik.css.engine.StyleMap;

        r2 := @parameter1: org.apache.batik.css.engine.CSSEngine;

        i0 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.apache.batik.css.engine.StyleMap: org.apache.batik.css.engine.value.Value getValue(int)>(i0);

        r6 = $r1;

        $r3 = virtualinvoke r2.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.value.ValueManager[] getValueManagers()>();

        if $r1 != null goto label2;

        r5 = $r3[i0];

        r6 = interfaceinvoke r5.<org.apache.batik.css.engine.value.ValueManager: org.apache.batik.css.engine.value.Value getDefaultValue()>();

        goto label2;

     label1:
        r6 = interfaceinvoke r6.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(0);

     label2:
        $s1 = interfaceinvoke r6.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        $i2 = (int) $s1;

        if $i2 == 2 goto label1;

        $r4 = interfaceinvoke r6.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        return $r4;
    }

    public static float getFloatProp(org.apache.batik.css.engine.StyleMap, org.apache.batik.css.engine.CSSEngine, int)
    {
        org.apache.batik.css.engine.value.ValueManager[] $r3;
        org.apache.batik.css.engine.value.Value $r1, r5;
        org.apache.batik.css.engine.CSSEngine r2;
        short $s1;
        org.apache.batik.css.engine.value.ValueManager r4;
        org.apache.batik.css.engine.StyleMap r0;
        int i0, $i2;
        float $f0;

        r0 := @parameter0: org.apache.batik.css.engine.StyleMap;

        r2 := @parameter1: org.apache.batik.css.engine.CSSEngine;

        i0 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.apache.batik.css.engine.StyleMap: org.apache.batik.css.engine.value.Value getValue(int)>(i0);

        r5 = $r1;

        $r3 = virtualinvoke r2.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.value.ValueManager[] getValueManagers()>();

        if $r1 != null goto label2;

        r4 = $r3[i0];

        r5 = interfaceinvoke r4.<org.apache.batik.css.engine.value.ValueManager: org.apache.batik.css.engine.value.Value getDefaultValue()>();

        goto label2;

     label1:
        r5 = interfaceinvoke r5.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(0);

     label2:
        $s1 = interfaceinvoke r5.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        $i2 = (int) $s1;

        if $i2 == 2 goto label1;

        $f0 = interfaceinvoke r5.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        return $f0;
    }

    public org.apache.batik.gvt.font.GVTFontFamily getFontFamily(org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.bridge.CSSFontFace r0;
        org.apache.batik.bridge.BridgeContext r2;
        org.apache.batik.gvt.font.GVTFontFamily $r1, $r3, $r4, $r5;

        r0 := @this: org.apache.batik.bridge.CSSFontFace;

        r2 := @parameter0: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.CSSFontFace: org.apache.batik.gvt.font.GVTFontFamily fontFamily>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.batik.bridge.CSSFontFace: org.apache.batik.gvt.font.GVTFontFamily fontFamily>;

        return $r5;

     label1:
        $r3 = specialinvoke r0.<org.apache.batik.bridge.FontFace: org.apache.batik.gvt.font.GVTFontFamily getFontFamily(org.apache.batik.bridge.BridgeContext)>(r2);

        r0.<org.apache.batik.bridge.CSSFontFace: org.apache.batik.gvt.font.GVTFontFamily fontFamily> = $r3;

        $r4 = r0.<org.apache.batik.bridge.CSSFontFace: org.apache.batik.gvt.font.GVTFontFamily fontFamily>;

        return $r4;
    }
}
