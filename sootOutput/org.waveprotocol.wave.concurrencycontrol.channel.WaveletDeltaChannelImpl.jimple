public class org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel
{
    private final org.waveprotocol.wave.common.logging.LoggerBundle logger;
    private org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State state;
    private final org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel channel;
    private org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver receiver;
    private int connectionTag;
    private org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter transmitter;
    private org.waveprotocol.wave.model.operation.wave.WaveletDelta transmitDelta;
    private org.waveprotocol.wave.model.operation.wave.WaveletDelta lastTransmitDelta;
    private org.waveprotocol.wave.model.version.HashedVersion lastAckedVersion;
    private long lastServerVersion;
    private final java.util.List queue;

    public void <init>(org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel, org.waveprotocol.wave.common.logging.LoggerBundle)
    {
        java.lang.Object[] $r5;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State $r1;
        java.util.LinkedList $r2;
        org.waveprotocol.wave.common.logging.LoggerBundle r4;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r3 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel;

        r4 := @parameter1: org.waveprotocol.wave.common.logging.LoggerBundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State INITIAL>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State state> = $r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: int connectionTag> = 0;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta lastTransmitDelta> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.version.HashedVersion lastAckedVersion> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion> = -1L;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List queue> = $r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel channel> = r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger> = r4;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = "New delta channel created";

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void logTrace(java.lang.Object[])>($r5);

        return;
    }

    public void reset(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void internalReset()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver receiver> = r1;

        return;
    }

    public void send(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter)
    {
        java.lang.IllegalStateException $r4;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter r3;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State $r1, $r2, $r7;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r9;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r3 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State state>;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State CONNECTED>;

        if $r2 == $r1 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending message over a channel that is not connected. state: ");

        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State state>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter transmitter> = r3;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void tryTransmit()>();

        return;
    }

    public void onWaveletSnapshot(org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        java.lang.IllegalStateException $r6;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r3;
        long $l0;
        byte $b1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State $r1, $r2, $r9;
        org.waveprotocol.wave.model.version.HashedVersion r4, r5;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r11;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r4 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r5 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State state>;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State INITIAL>;

        if $r2 == $r1 goto label1;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received a snapshot in a state that is not initial. state: ");

        $r9 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State state>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label1:
        $l0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Expected no last version for initial state");

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void processConnectSnapshotMessage(org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r3, r4, r5);

        return;
    }

    public void onWaveletUpdate(java.util.List, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        long $l2, $l4;
        java.util.List r3;
        byte $b3, $b5;
        int[] $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State $r1;
        int $i0, $i1, $i6;
        org.waveprotocol.wave.model.version.HashedVersion r4, r5;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r3 := @parameter0: java.util.List;

        r4 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r5 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        $r2 = <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$2: int[] $SwitchMap$org$waveprotocol$wave$concurrencycontrol$channel$WaveletDeltaChannelImpl$State>;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State state>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State: int ordinal()>();

        $i1 = $r2[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label4;
            default: goto label7;
        };

     label1:
        $l4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion>;

        $b5 = $l4 cmp -1L;

        if $b5 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Expected no last version for initial state");

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void processConnectUpdateMessage(java.util.List,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r3, r4, r5);

        goto label7;

     label4:
        $l2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion>;

        $b3 = $l2 cmp 0L;

        $i6 = (int) $b3;

        if $i6 < 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Expected last server version > 0");

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void processUpdateMessage(java.util.List,org.waveprotocol.wave.model.version.HashedVersion)>(r3, r4);

     label7:
        return;
    }

    private void processConnect(org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r8;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver $r5, $r6;
        long $l2;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r7;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r1;
        org.waveprotocol.wave.model.version.HashedVersion r0, r3, r4, r9;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State $r2;
        int $i0, $i1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r4 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        r0 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r3 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        if r0 != null goto label1;

        $r7 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r8 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r7.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>("Channel connect message lacks committed version", $r8);

        throw $r7;

     label1:
        $r2 = <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State CONNECTED>;

        r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State state> = $r2;

        $i0 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: int connectionTag>;

        $i1 = $i0 + 1;

        r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: int connectionTag> = $i1;

        if r3 == null goto label2;

        r9 = r3;

        goto label3;

     label2:
        r9 = r4;

     label3:
        $l2 = virtualinvoke r4.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion> = $l2;

        $r5 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver receiver>;

        if $r5 == null goto label4;

        $r6 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver receiver>;

        interfaceinvoke $r6.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver: void onConnection(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r4, r9);

     label4:
        specialinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void processLastCommittedVersion(org.waveprotocol.wave.model.version.HashedVersion)>(r0);

        specialinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void flushServerMessages()>();

        return;
    }

    private void processConnectSnapshotMessage(org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        java.lang.Object[] $r3;
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r16;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        long $l0;
        java.lang.Long $r6;
        org.waveprotocol.wave.model.version.HashedVersion $r1, r7, r8;
        java.lang.String $r15;
        org.waveprotocol.wave.model.id.WaveId $r4;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r0;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r9;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r2;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r7 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r8 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        if r0 != null goto label1;

        $r9 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delta channel: invalid first wave stream message: null, last committed version: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("currentSignedVersion: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r9.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>($r15, $r16);

        throw $r9;

     label1:
        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        $r3 = newarray (java.lang.Object)[6];

        $r3[0] = "Delta channel connecting, wavelet id ";

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r3[1] = $r4;

        $r3[2] = "/";

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r3[3] = $r5;

        $r3[4] = ", version ";

        $l0 = virtualinvoke $r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r3[5] = $r6;

        specialinvoke r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void logTrace(java.lang.Object[])>($r3);

        specialinvoke r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void processConnect(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>($r1, r7, r8);

        return;
    }

    private void processConnectUpdateMessage(java.util.List, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        byte[] $r6;
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r2, $r19;
        java.lang.Object[] $r9;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r4;
        long $l2, $l3, $l5;
        java.lang.Long $r10, $r12;
        int $i0, $i1, $i4;
        org.waveprotocol.wave.model.version.HashedVersion $r5, $r7, r11, r13;
        java.lang.String $r18;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r1, $r14;
        java.util.List r0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r8;
        java.lang.Object $r3;
        java.lang.StringBuilder $r15, $r16, $r17;

        r8 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r0 := @parameter0: java.util.List;

        r13 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r11 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r2 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>("Delta channel: no deltas in first wave stream message", $r2);

        throw $r1;

     label2:
        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r3;

        $i1 = virtualinvoke r4.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: int size()>();

        if $i1 == 0 goto label3;

        $r14 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delta channel: invalid first wave stream message, expected no ops, got ");

        $i4 = virtualinvoke r4.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: int size()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r14.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>($r18, $r19);

        throw $r14;

     label3:
        $l2 = virtualinvoke r4.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getAppliedAtVersion()>();

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.version.HashedVersion: byte[] getHistoryHash()>();

        $r7 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion of(long,byte[])>($l2, $r6);

        $r9 = newarray (java.lang.Object)[4];

        $r9[0] = "Delta channel reconnecting, connect version ";

        $l3 = virtualinvoke $r7.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r9[1] = $r10;

        $r9[2] = " current version ";

        if r11 == null goto label4;

        $l5 = virtualinvoke r11.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        goto label5;

     label4:
        $l5 = virtualinvoke $r7.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

     label5:
        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r9[3] = $r12;

        specialinvoke r8.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void logTrace(java.lang.Object[])>($r9);

        specialinvoke r8.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void processConnect(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>($r7, r13, r11);

        return;
    }

    private void processUpdateMessage(java.util.List, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r11;
        long $l2;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r3;
        java.util.List r0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r1;
        org.waveprotocol.wave.model.version.HashedVersion r2;
        int $i0, $i1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        if r0 == null goto label2;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        if r2 != null goto label1;

        $r3 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delta channel: invalid non-first wave stream message: count ");

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deltas (lastServerVersion: ");

        $l2 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>($r10, $r11);

        throw $r3;

     label1:
        specialinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void processDeltas(java.util.List)>(r0);

     label2:
        specialinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void processLastCommittedVersion(org.waveprotocol.wave.model.version.HashedVersion)>(r2);

        specialinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void flushServerMessages()>();

        return;
    }

    private void processLastCommittedVersion(org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r1;
        org.waveprotocol.wave.model.version.HashedVersion r0;
        long $l0, $l1, $l2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        if r0 == null goto label1;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l1 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion>;

        $l2 = staticinvoke <java.lang.Math: long max(long,long)>($l0, $l1);

        $r2 = new org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed;

        specialinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed: void <init>(long,long)>($l2, $l0);

        specialinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: int onServerMessage(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)>($r2);

     label1:
        return;
    }

    private void processDeltas(java.util.List) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta $r5;
        java.util.Iterator $r1;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r3;
        java.util.List r0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r4;
        int $i0;
        java.lang.Object $r2;
        boolean $z0;

        r4 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r2;

        specialinvoke r4.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void logDelta(java.lang.String,org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>("Incoming", r3);

        $r5 = new org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta;

        specialinvoke $r5.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta: void <init>(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>(r3);

        $i0 = specialinvoke r4.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: int onServerMessage(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)>($r5);

        specialinvoke r4.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void checkForMissingMessages(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage,int)>($r5, $i0);

        goto label1;

     label2:
        return;
    }

    private int onServerMessage(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r19;
        long $l0, $l1, $l5, $l6;
        byte $b2;
        int $i3, $i4, i7, $i8, $i10;
        java.lang.String $r14, $r18;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage r0, $r6;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r21;
        java.util.List $r2, $r3, $r4;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r1;
        java.lang.Object $r5;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r20;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long startVersion()>();

        $l1 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion>;

        $b2 = $l0 cmp $l1;

        $i8 = (int) $b2;

        if $i8 >= 0 goto label1;

        $r21 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delta channel: out of sequence server message with version ");

        $l5 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long startVersion()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r14 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.lang.String toString()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; lastServerVersion: ");

        $l6 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r21.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>($r18, $r19);

        throw $r21;

     label1:
        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List queue>;

        i7 = interfaceinvoke $r2.<java.util.List: int size()>();

     label2:
        if i7 <= 0 goto label3;

        $r4 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List queue>;

        $i3 = i7 - 1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i3);

        $r6 = (org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage) $r5;

        $i4 = virtualinvoke $r6.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: int compareTo(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)>(r0);

        if $i4 <= 0 goto label3;

        $i10 = (int) -1;

        i7 = i7 + $i10;

        goto label2;

     label3:
        $r3 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List queue>;

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>(i7, r0);

        return i7;
    }

    private void flushServerMessages() throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        java.lang.Object[] $r9;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver $r8, $r10;
        long $l0, $l1, $l3, $l4, $l6, $l7, $l8;
        byte $b2, $b5;
        int $i9;
        java.lang.String $r16;
        boolean $z0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage $r4, r7;
        java.util.List $r1, $r2, $r5;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;
        java.lang.Object $r3, $r6;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r17;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

     label1:
        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List queue>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List queue>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage) $r3;

        $l0 = virtualinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long startVersion()>();

        $l1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label4;

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List queue>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object remove(int)>(0);

        r7 = (org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage) $r6;

        $l3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long access$100(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)>(r7);

        $l4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion>;

        $b5 = $l3 cmp $l4;

        $i9 = (int) $b5;

        if $i9 >= 0 goto label2;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delta channel queue is out of order. Message endVersion ");

        $l7 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long access$100(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)>(r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lastServerVersion ");

        $l8 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.Object)>($r16);

     label2:
        $l6 = virtualinvoke r7.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long endVersion()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion> = $l6;

        $r8 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver receiver>;

        if $r8 == null goto label3;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = "Releasing message ";

        $r9[1] = r7;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void logTrace(java.lang.Object[])>($r9);

        $r10 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver receiver>;

        virtualinvoke r7.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: void deliverTo(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver)>($r10);

     label3:
        goto label1;

     label4:
        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void tryTransmit()>();

        return;
    }

    private void checkForMissingMessages(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage, int) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        byte $b3, $b6;
        boolean $z0;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r32, $r34;
        java.util.List $r1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r31, $r33;
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r14, $r29;
        long $l2, $l5, $l8, l9;
        int i0, $i1, $i4, $i7, $i10, $i11;
        java.lang.String $r13, $r28;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage r3, r30;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta $r15, $r25;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;
        java.lang.Object $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r3 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        l9 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion>;

        goto label2;

     label1:
        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List queue>;

        $i1 = i0 - 1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        r30 = (org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage) $r2;

        l9 = virtualinvoke r30.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long endVersion()>();

     label2:
        $l2 = virtualinvoke r3.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long startVersion()>();

        $l8 = $l2 - l9;

        $b3 = $l8 cmp 0L;

        $i10 = (int) $b3;

        if $i10 <= 0 goto label4;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: boolean deltaIsInFlight()>();

        if $z0 == 0 goto label3;

        if i0 != 0 goto label3;

        $r15 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta transmitDelta>;

        $i4 = virtualinvoke $r15.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: int size()>();

        $l5 = (long) $i4;

        $b6 = $l8 cmp $l5;

        $i11 = (int) $b6;

        if $i11 <= 0 goto label4;

        $r32 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Message missing! Incoming message ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected version ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l9);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", gap ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", in-flight delta has ");

        $r25 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta transmitDelta>;

        $i7 = virtualinvoke $r25.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: int size()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ops");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r32.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>($r28, $r29);

        throw $r32;

     label3:
        $r34 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Message missing! Incoming message ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected version ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l9);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", gap ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", no in-flight delta");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r34.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>($r13, $r14);

        throw $r34;

     label4:
        return;
    }

    private void tryTransmit()
    {
        java.lang.Object[] $r9;
        org.waveprotocol.wave.common.logging.Logger $r6;
        int $i0;
        java.lang.String $r12, $r14, $r19;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel $r8;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1 $r7;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta $r4;
        org.waveprotocol.wave.common.logging.LoggerBundle $r5;
        java.util.List $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State $r1, $r2, $r17;
        java.lang.StringBuilder $r10, $r11, $r13, $r15, $r16, $r18;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State state>;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State CONNECTED>;

        if $r2 == $r1 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot send to delta channel in state ");

        $r17 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State state>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.Object)>($r19);

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List queue>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: boolean deltaIsInFlight()>();

        if $z1 == 0 goto label3;

        return;

     label3:
        $r4 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta takeArgs()>();

        if $r4 != null goto label4;

        return;

     label4:
        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z2 = interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z2 == 0 goto label5;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Outgoing ");

        $r12 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.lang.String summariseDelta(org.waveprotocol.wave.model.operation.wave.WaveletDelta)>($r4);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9[0] = $r14;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void logTrace(java.lang.Object[])>($r9);

     label5:
        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta transmitDelta> = $r4;

        $i0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: int connectionTag>;

        $r8 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel channel>;

        $r7 = new org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1;

        specialinvoke $r7.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl,int)>(r0, $i0);

        interfaceinvoke $r8.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel: void submit(org.waveprotocol.wave.model.operation.wave.WaveletDelta,org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback)>($r4, $r7);

        return;
    }

    private org.waveprotocol.wave.model.operation.wave.WaveletDelta takeArgs()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta $r4;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter$ClientMessage $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter transmitter>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter transmitter>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter$ClientMessage takeMessage()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter transmitter> = null;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter$ClientMessage: org.waveprotocol.wave.model.operation.wave.WaveletDelta getDelta()>();

        return $r4;
    }

    private boolean deltaIsInFlight()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletDelta $r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta transmitDelta>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void internalReset()
    {
        java.util.List $r3;
        java.lang.Object[] $r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "Delta channel reset";

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void logTrace(java.lang.Object[])>($r1);

        $r2 = <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State INITIAL>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State state> = $r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Transmitter transmitter> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta transmitDelta> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion> = -1L;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List queue>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        return;
    }

    public java.lang.String toString()
    {
        java.util.List $r27, $r30;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State $r3;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r16, $r17, $r20, $r21, $r22, $r24, $r25, $r26, $r28, $r29, $r31, $r32;
        long $l1;
        int $i0, $i2;
        org.waveprotocol.wave.model.version.HashedVersion $r23;
        java.lang.String $r11, $r19, $r33;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta $r10, $r18;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r2;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delta Channel State = [state:");

        $r3 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State state>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[connectionTag:");

        $i0 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: int connectionTag>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] \n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[transmitDelta:");

        $r10 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta transmitDelta>;

        $r11 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.lang.String summariseDelta(org.waveprotocol.wave.model.operation.wave.WaveletDelta)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] \n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[lastServerVersion:");

        $l1 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[lastTransmitDelta:");

        $r18 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta lastTransmitDelta>;

        $r19 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.lang.String summariseDelta(org.waveprotocol.wave.model.operation.wave.WaveletDelta)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] \n");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[lastAckedVersion: ");

        $r23 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.version.HashedVersion lastAckedVersion>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] \n");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[queue (");

        $r27 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List queue>;

        $i2 = interfaceinvoke $r27.<java.util.List: int size()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" msgs):");

        $r30 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List queue>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r33;
    }

    private void logDelta(java.lang.String, org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)
    {
        java.lang.Object[] $r3;
        org.waveprotocol.wave.common.logging.Logger $r2;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r7;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;
        java.lang.StringBuilder $r4, $r6, $r9;
        java.lang.String r5, $r8, $r10;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r5 := @parameter0: java.lang.String;

        r7 := @parameter1: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z0 == 0 goto label1;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r8 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.lang.String summariseDelta(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>(r7);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3[0] = $r10;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void logTrace(java.lang.Object[])>($r3);

     label1:
        return;
    }

    private transient void logTrace(java.lang.Object[])
    {
        java.lang.Object[] r4;
        org.waveprotocol.wave.common.logging.Logger $r2, $r6;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1, $r5;
        java.lang.StringBuffer $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;
        int i0, i1;
        java.lang.Object r8;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r4 := @parameter0: java.lang.Object[];

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z0 == 0 goto label3;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r8 = r4[i1];

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r7 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r7);

     label3:
        return;
    }

    private static java.lang.String summariseDelta(org.waveprotocol.wave.model.operation.wave.WaveletDelta)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r10;
        java.util.Iterator $r7;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r0;
        org.waveprotocol.wave.model.version.HashedVersion $r3;
        int $i0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r12;
        java.lang.Object $r9;
        java.lang.String $r8, $r11;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        if r0 != null goto label1;

        return "null";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("delta ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("version: ");

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ops: ");

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: int size()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r9;

        $r11 = virtualinvoke r10.<java.lang.Object: java.lang.String toString()>();

        $r12 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        goto label2;

     label3:
        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private static java.lang.String summariseDelta(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r12;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r0;
        long $l0;
        org.waveprotocol.wave.model.version.HashedVersion $r5;
        int $i1;
        java.lang.String $r10, $r13;
        boolean $z0;
        java.util.Iterator $r9;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r14;
        java.lang.Object $r11;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        if r0 != null goto label1;

        return "null";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("delta ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("applied-version: ");

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getAppliedAtVersion()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("end-version: ");

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ops: ");

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: int size()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r11;

        $r13 = virtualinvoke r12.<java.lang.Object: java.lang.String toString()>();

        $r14 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        goto label2;

     label3:
        $r10 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public java.lang.String debugGetProfilingInfo()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r6, $r7;
        java.lang.String $r3, $r8;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel $r2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel channel>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel: java.lang.String debugGetProfilingInfo()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n ====== Delta Channel Info ====== \n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    static java.lang.String access$000(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)
    {
        java.lang.String $r1;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r0;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.lang.String summariseDelta(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>(r0);

        return $r1;
    }

    static org.waveprotocol.wave.model.version.HashedVersion access$202(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.version.HashedVersion r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.version.HashedVersion lastAckedVersion> = r1;

        return r1;
    }

    static int access$300(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl, org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage r1;
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r1 := @parameter1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: int onServerMessage(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)>(r1);

        return $i0;
    }

    static long access$400(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)
    {
        long $l0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        $l0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long lastServerVersion>;

        return $l0;
    }

    static org.waveprotocol.wave.model.operation.wave.WaveletDelta access$502(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl, org.waveprotocol.wave.model.operation.wave.WaveletDelta)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta lastTransmitDelta> = r1;

        return r1;
    }

    static org.waveprotocol.wave.model.operation.wave.WaveletDelta access$600(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletDelta $r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta transmitDelta>;

        return $r1;
    }

    static org.waveprotocol.wave.model.operation.wave.WaveletDelta access$602(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl, org.waveprotocol.wave.model.operation.wave.WaveletDelta)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta transmitDelta> = r1;

        return r1;
    }

    static void access$700(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void flushServerMessages()>();

        return;
    }

    static java.util.List access$800(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)
    {
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List queue>;

        return $r1;
    }

    static org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State access$900(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State $r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State state>;

        return $r1;
    }

    static void access$1000(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl, java.lang.Object[])
    {
        java.lang.Object[] r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        r1 := @parameter1: java.lang.Object[];

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void logTrace(java.lang.Object[])>(r1);

        return;
    }

    static int access$1100(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        $i0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: int connectionTag>;

        return $i0;
    }
}
