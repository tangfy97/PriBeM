public class org.apache.lucene.analysis.payloads.IdentityEncoder extends org.apache.lucene.analysis.payloads.AbstractEncoder implements org.apache.lucene.analysis.payloads.PayloadEncoder
{
    protected java.nio.charset.Charset charset;

    public void <init>()
    {
        java.nio.charset.Charset $r1;
        org.apache.lucene.analysis.payloads.IdentityEncoder r0;

        r0 := @this: org.apache.lucene.analysis.payloads.IdentityEncoder;

        specialinvoke r0.<org.apache.lucene.analysis.payloads.AbstractEncoder: void <init>()>();

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        r0.<org.apache.lucene.analysis.payloads.IdentityEncoder: java.nio.charset.Charset charset> = $r1;

        return;
    }

    public void <init>(java.nio.charset.Charset)
    {
        java.nio.charset.Charset $r1, r2;
        org.apache.lucene.analysis.payloads.IdentityEncoder r0;

        r0 := @this: org.apache.lucene.analysis.payloads.IdentityEncoder;

        r2 := @parameter0: java.nio.charset.Charset;

        specialinvoke r0.<org.apache.lucene.analysis.payloads.AbstractEncoder: void <init>()>();

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        r0.<org.apache.lucene.analysis.payloads.IdentityEncoder: java.nio.charset.Charset charset> = $r1;

        r0.<org.apache.lucene.analysis.payloads.IdentityEncoder: java.nio.charset.Charset charset> = r2;

        return;
    }

    public org.apache.lucene.util.BytesRef encode(char[], int, int)
    {
        byte[] r5, $r8;
        org.apache.lucene.analysis.payloads.IdentityEncoder r0;
        java.nio.ByteBuffer $r4;
        java.nio.charset.Charset $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        java.nio.CharBuffer $r3;
        org.apache.lucene.util.BytesRef $r6, $r7;
        char[] r1;

        r0 := @this: org.apache.lucene.analysis.payloads.IdentityEncoder;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.lucene.analysis.payloads.IdentityEncoder: java.nio.charset.Charset charset>;

        $r3 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>(r1, i0, i1);

        $r4 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>($r3);

        $z0 = virtualinvoke $r4.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label1;

        $r7 = new org.apache.lucene.util.BytesRef;

        $r8 = virtualinvoke $r4.<java.nio.ByteBuffer: byte[] array()>();

        $i3 = virtualinvoke $r4.<java.nio.ByteBuffer: int arrayOffset()>();

        $i4 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>();

        $i5 = $i3 + $i4;

        $i6 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        specialinvoke $r7.<org.apache.lucene.util.BytesRef: void <init>(byte[],int,int)>($r8, $i5, $i6);

        return $r7;

     label1:
        $i2 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        r5 = newarray (byte)[$i2];

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r5);

        $r6 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r6.<org.apache.lucene.util.BytesRef: void <init>(byte[])>(r5);

        return $r6;
    }
}
