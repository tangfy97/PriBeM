class org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream extends javax.servlet.ServletInputStream
{
    private final javax.servlet.ServletInputStream is;
    final org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper this$1;

    private void <init>(org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper, javax.servlet.ServletInputStream)
    {
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream r0;
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper r1;
        javax.servlet.ServletInputStream r2;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream;

        r1 := @parameter0: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper;

        r2 := @parameter1: javax.servlet.ServletInputStream;

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper this$1> = r1;

        specialinvoke r0.<javax.servlet.ServletInputStream: void <init>()>();

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream: javax.servlet.ServletInputStream is> = r2;

        return;
    }

    public int read() throws java.io.IOException
    {
        java.io.ByteArrayOutputStream $r3;
        javax.servlet.ServletInputStream $r1;
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream r0;
        int $i0, $i2;
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper $r2;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream;

        $r1 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream: javax.servlet.ServletInputStream is>;

        $i0 = virtualinvoke $r1.<javax.servlet.ServletInputStream: int read()>();

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r2 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper this$1>;

        $r3 = staticinvoke <org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: java.io.ByteArrayOutputStream access$0(org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper)>($r2);

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(int)>($i0);

     label1:
        return $i0;
    }

    void <init>(org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper, javax.servlet.ServletInputStream, org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream)
    {
        javax.servlet.ServletInputStream r2;
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream r0, r3;
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper r1;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream;

        r1 := @parameter0: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper;

        r2 := @parameter1: javax.servlet.ServletInputStream;

        r3 := @parameter2: org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream;

        specialinvoke r0.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper$RequestCachingInputStream: void <init>(org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper,javax.servlet.ServletInputStream)>(r1, r2);

        return;
    }
}
