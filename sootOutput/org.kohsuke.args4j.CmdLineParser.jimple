public final class org.kohsuke.args4j.CmdLineParser extends java.lang.Object
{
    private final java.util.List options;
    private final java.util.List arguments;
    private final java.util.List readonlyArguments;
    static java.lang.Class class$org$kohsuke$args4j$CmdLineOption;

    public void <init>()
    {
        org.kohsuke.args4j.CmdLineParser r0;
        java.util.List $r3, $r4;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.kohsuke.args4j.CmdLineParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(50);

        r0.<org.kohsuke.args4j.CmdLineParser: java.util.List options> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(50);

        r0.<org.kohsuke.args4j.CmdLineParser: java.util.List arguments> = $r2;

        $r3 = r0.<org.kohsuke.args4j.CmdLineParser: java.util.List arguments>;

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        r0.<org.kohsuke.args4j.CmdLineParser: java.util.List readonlyArguments> = $r4;

        return;
    }

    public org.kohsuke.args4j.CmdLineOption addOption(org.kohsuke.args4j.CmdLineOption)
    {
        org.kohsuke.args4j.CmdLineParser r0;
        org.kohsuke.args4j.CmdLineOption r1;
        java.util.List $r2;

        r0 := @this: org.kohsuke.args4j.CmdLineParser;

        r1 := @parameter0: org.kohsuke.args4j.CmdLineOption;

        $r2 = r0.<org.kohsuke.args4j.CmdLineParser: java.util.List options>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r1;
    }

    public void addOptionClass(java.lang.Object)
    {
        int $i0, $i1, i2;
        boolean $z0;
        org.kohsuke.args4j.CmdLineParser r6;
        java.lang.IllegalAccessException $r11;
        org.kohsuke.args4j.CmdLineOption $r9;
        java.lang.reflect.Field $r4, $r7;
        java.lang.IllegalArgumentException $r10, $r12;
        java.lang.reflect.Field[] $r2;
        java.lang.Object r0, $r8;
        java.lang.Class $r1, $r3, $r5, $r13;

        r6 := @this: org.kohsuke.args4j.CmdLineParser;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label01;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r10;

     label01:
        i2 = 0;

     label02:
        $i1 = lengthof $r2;

        if i2 >= $i1 goto label10;

        $r3 = <org.kohsuke.args4j.CmdLineParser: java.lang.Class class$org$kohsuke$args4j$CmdLineOption>;

        if $r3 != null goto label03;

        $r13 = staticinvoke <org.kohsuke.args4j.CmdLineParser: java.lang.Class class$(java.lang.String)>("org.kohsuke.args4j.CmdLineOption");

        <org.kohsuke.args4j.CmdLineParser: java.lang.Class class$org$kohsuke$args4j$CmdLineOption> = $r13;

        goto label04;

     label03:
        $r13 = <org.kohsuke.args4j.CmdLineParser: java.lang.Class class$org$kohsuke$args4j$CmdLineOption>;

     label04:
        $r4 = $r2[i2];

        $r5 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r13.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label09;

     label05:
        $r7 = $r2[i2];

        $r8 = virtualinvoke $r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r9 = (org.kohsuke.args4j.CmdLineOption) $r8;

        virtualinvoke r6.<org.kohsuke.args4j.CmdLineParser: org.kohsuke.args4j.CmdLineOption addOption(org.kohsuke.args4j.CmdLineOption)>($r9);

     label06:
        goto label09;

     label07:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Throwable: void printStackTrace()>();

        goto label09;

     label08:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Throwable: void printStackTrace()>();

     label09:
        i2 = i2 + 1;

        goto label02;

     label10:
        return;

        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.IllegalAccessException from label05 to label06 with label08;
    }

    public void parse(java.lang.String[]) throws org.kohsuke.args4j.CmdLineException
    {
        java.lang.String[] r2;
        org.kohsuke.args4j.UndefinedOptionException $r7;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.kohsuke.args4j.CmdLineParser r1;
        org.kohsuke.args4j.CmdLineOption r10;
        java.util.List $r4, $r5, $r6, $r8;
        java.lang.Object $r9;
        org.kohsuke.args4j.CmdLineParser$CmdLineImpl $r0;

        r1 := @this: org.kohsuke.args4j.CmdLineParser;

        r2 := @parameter0: java.lang.String[];

        $r0 = new org.kohsuke.args4j.CmdLineParser$CmdLineImpl;

        specialinvoke $r0.<org.kohsuke.args4j.CmdLineParser$CmdLineImpl: void <init>(org.kohsuke.args4j.CmdLineParser,java.lang.String[])>(r1, r2);

     label01:
        $z0 = staticinvoke <org.kohsuke.args4j.CmdLineParser$CmdLineImpl: boolean access$000(org.kohsuke.args4j.CmdLineParser$CmdLineImpl)>($r0);

        if $z0 == 0 goto label10;

        $r3 = virtualinvoke $r0.<org.kohsuke.args4j.CmdLineParser$CmdLineImpl: java.lang.String getOptionName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 <= 1 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        $z2 = $z1 & $z4;

        if $z2 == 0 goto label08;

        i5 = 0;

     label04:
        $r5 = r1.<org.kohsuke.args4j.CmdLineParser: java.util.List options>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i5 >= $i1 goto label06;

        $r8 = r1.<org.kohsuke.args4j.CmdLineParser: java.util.List options>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i5);

        r10 = (org.kohsuke.args4j.CmdLineOption) $r9;

        $z3 = interfaceinvoke r10.<org.kohsuke.args4j.CmdLineOption: boolean accepts(java.lang.String)>($r3);

        if $z3 == 0 goto label05;

        $i3 = interfaceinvoke r10.<org.kohsuke.args4j.CmdLineOption: int parseArguments(org.kohsuke.args4j.CmdLineParser,org.kohsuke.args4j.CmdLineOption$Parameters)>(r1, $r0);

        $i4 = $i3 + 1;

        staticinvoke <org.kohsuke.args4j.CmdLineParser$CmdLineImpl: void access$100(org.kohsuke.args4j.CmdLineParser$CmdLineImpl,int)>($r0, $i4);

        goto label06;

     label05:
        i5 = i5 + 1;

        goto label04;

     label06:
        $r6 = r1.<org.kohsuke.args4j.CmdLineParser: java.util.List options>;

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i5 != $i2 goto label07;

        $r7 = new org.kohsuke.args4j.UndefinedOptionException;

        specialinvoke $r7.<org.kohsuke.args4j.UndefinedOptionException: void <init>(java.lang.String)>($r3);

        throw $r7;

     label07:
        goto label09;

     label08:
        $r4 = r1.<org.kohsuke.args4j.CmdLineParser: java.util.List arguments>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        staticinvoke <org.kohsuke.args4j.CmdLineParser$CmdLineImpl: void access$100(org.kohsuke.args4j.CmdLineParser$CmdLineImpl,int)>($r0, 1);

     label09:
        goto label01;

     label10:
        return;
    }

    public java.util.List getArguments()
    {
        org.kohsuke.args4j.CmdLineParser r0;
        java.util.List $r1;

        r0 := @this: org.kohsuke.args4j.CmdLineParser;

        $r1 = r0.<org.kohsuke.args4j.CmdLineParser: java.util.List readonlyArguments>;

        return $r1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
