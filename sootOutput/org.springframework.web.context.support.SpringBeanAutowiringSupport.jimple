public abstract class org.springframework.web.context.support.SpringBeanAutowiringSupport extends java.lang.Object
{
    private static final org.apache.commons.logging.Log logger;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/web/context/support/SpringBeanAutowiringSupport;");

        <org.springframework.web.context.support.SpringBeanAutowiringSupport: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.web.context.support.SpringBeanAutowiringSupport r0;

        r0 := @this: org.springframework.web.context.support.SpringBeanAutowiringSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.web.context.support.SpringBeanAutowiringSupport: void processInjectionBasedOnCurrentContext(java.lang.Object)>(r0);

        return;
    }

    public static void processInjectionBasedOnCurrentContext(java.lang.Object)
    {
        org.springframework.web.context.WebApplicationContext $r1;
        org.springframework.beans.factory.config.AutowireCapableBeanFactory $r12;
        org.springframework.beans.factory.'annotation'.AutowiredAnnotationBeanPostProcessor $r11;
        java.lang.Object r0;
        org.apache.commons.logging.Log $r2, $r4;
        java.lang.StringBuilder $r3, $r7, $r8, $r9;
        java.lang.Class $r5;
        java.lang.String $r6, $r10;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Target object must not be null");

        $r1 = staticinvoke <org.springframework.web.context.ContextLoader: org.springframework.web.context.WebApplicationContext getCurrentWebApplicationContext()>();

        if $r1 == null goto label1;

        $r11 = new org.springframework.beans.factory.'annotation'.AutowiredAnnotationBeanPostProcessor;

        specialinvoke $r11.<org.springframework.beans.factory.'annotation'.AutowiredAnnotationBeanPostProcessor: void <init>()>();

        $r12 = interfaceinvoke $r1.<org.springframework.web.context.WebApplicationContext: org.springframework.beans.factory.config.AutowireCapableBeanFactory getAutowireCapableBeanFactory()>();

        virtualinvoke $r11.<org.springframework.beans.factory.'annotation'.AutowiredAnnotationBeanPostProcessor: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>($r12);

        virtualinvoke $r11.<org.springframework.beans.factory.'annotation'.AutowiredAnnotationBeanPostProcessor: void processInjection(java.lang.Object)>(r0);

        goto label2;

     label1:
        $r2 = <org.springframework.web.context.support.SpringBeanAutowiringSupport: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r4 = <org.springframework.web.context.support.SpringBeanAutowiringSupport: org.apache.commons.logging.Log logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Current WebApplicationContext is not available for processing of ");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Make sure this class gets constructed in a Spring web application. Proceeding without injection.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

     label2:
        return;
    }

    public static void processInjectionBasedOnServletContext(java.lang.Object, javax.servlet.ServletContext)
    {
        org.springframework.beans.factory.'annotation'.AutowiredAnnotationBeanPostProcessor $r3;
        org.springframework.web.context.WebApplicationContext $r2;
        org.springframework.beans.factory.config.AutowireCapableBeanFactory $r4;
        java.lang.Object r0;
        javax.servlet.ServletContext r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: javax.servlet.ServletContext;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Target object must not be null");

        $r2 = staticinvoke <org.springframework.web.context.support.WebApplicationContextUtils: org.springframework.web.context.WebApplicationContext getRequiredWebApplicationContext(javax.servlet.ServletContext)>(r1);

        $r3 = new org.springframework.beans.factory.'annotation'.AutowiredAnnotationBeanPostProcessor;

        specialinvoke $r3.<org.springframework.beans.factory.'annotation'.AutowiredAnnotationBeanPostProcessor: void <init>()>();

        $r4 = interfaceinvoke $r2.<org.springframework.web.context.WebApplicationContext: org.springframework.beans.factory.config.AutowireCapableBeanFactory getAutowireCapableBeanFactory()>();

        virtualinvoke $r3.<org.springframework.beans.factory.'annotation'.AutowiredAnnotationBeanPostProcessor: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>($r4);

        virtualinvoke $r3.<org.springframework.beans.factory.'annotation'.AutowiredAnnotationBeanPostProcessor: void processInjection(java.lang.Object)>(r0);

        return;
    }
}
