public class org.apache.log4j.config.PropertyPrinter extends java.lang.Object implements org.apache.log4j.config.PropertyGetter$PropertyCallback
{
    protected int numAppenders;
    protected java.util.Hashtable appenderNames;
    protected java.util.Hashtable layoutNames;
    protected java.io.PrintWriter out;
    protected boolean doCapitalize;

    public void <init>(java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        org.apache.log4j.config.PropertyPrinter r0;

        r0 := @this: org.apache.log4j.config.PropertyPrinter;

        r1 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<org.apache.log4j.config.PropertyPrinter: void <init>(java.io.PrintWriter,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.io.PrintWriter, boolean)
    {
        java.io.PrintWriter r3;
        org.apache.log4j.config.PropertyPrinter r0;
        java.util.Hashtable $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.log4j.config.PropertyPrinter;

        r3 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.config.PropertyPrinter: int numAppenders> = 0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.log4j.config.PropertyPrinter: java.util.Hashtable appenderNames> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.log4j.config.PropertyPrinter: java.util.Hashtable layoutNames> = $r2;

        r0.<org.apache.log4j.config.PropertyPrinter: java.io.PrintWriter out> = r3;

        r0.<org.apache.log4j.config.PropertyPrinter: boolean doCapitalize> = z0;

        virtualinvoke r0.<org.apache.log4j.config.PropertyPrinter: void print(java.io.PrintWriter)>(r3);

        virtualinvoke r3.<java.io.PrintWriter: void flush()>();

        return;
    }

    protected java.lang.String genAppName()
    {
        org.apache.log4j.config.PropertyPrinter r2;
        java.lang.StringBuffer $r0, $r1, $r3;
        int $i0, $i1;
        java.lang.String $r4;

        r2 := @this: org.apache.log4j.config.PropertyPrinter;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("A");

        $i0 = r2.<org.apache.log4j.config.PropertyPrinter: int numAppenders>;

        $i1 = $i0 + 1;

        r2.<org.apache.log4j.config.PropertyPrinter: int numAppenders> = $i1;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    protected boolean isGenAppName(java.lang.String)
    {
        org.apache.log4j.config.PropertyPrinter r1;
        char $c1, $c3, $c4;
        int $i0, $i2, i5, $i6, $i7, $i8;
        java.lang.String r0;

        r1 := @this: org.apache.log4j.config.PropertyPrinter;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 < 2 goto label1;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i6 = (int) $c1;

        if $i6 == 65 goto label2;

     label1:
        return 0;

     label2:
        i5 = 0;

     label3:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 >= $i2 goto label6;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i7 = (int) $c3;

        if $i7 < 48 goto label4;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i8 = (int) $c4;

        if $i8 <= 57 goto label5;

     label4:
        return 0;

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        return 1;
    }

    public void print(java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        org.apache.log4j.config.PropertyPrinter r0;
        org.apache.log4j.Logger $r2, $r5;
        java.util.Enumeration $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.apache.log4j.config.PropertyPrinter;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        virtualinvoke r0.<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>(r1, $r2);

        $r3 = staticinvoke <org.apache.log4j.LogManager: java.util.Enumeration getCurrentLoggers()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r5 = (org.apache.log4j.Logger) $r4;

        virtualinvoke r0.<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>(r1, $r5);

        goto label1;

     label2:
        return;
    }

    protected void printOptions(java.io.PrintWriter, org.apache.log4j.Category)
    {
        org.apache.log4j.config.PropertyPrinter r22;
        java.util.Enumeration $r1;
        org.apache.log4j.Logger $r3, $r8;
        org.apache.log4j.Level $r2;
        org.apache.log4j.Category r0;
        boolean $z0, $z1, $z2;
        java.io.PrintWriter r9;
        org.apache.log4j.Layout $r27, $r42;
        org.apache.log4j.Appender r35;
        java.lang.StringBuffer $r4, $r5, $r7, $r10, $r11, $r13, $r14, $r16, $r17, $r18, $r19, $r28, $r29, $r30, $r31, $r38, $r39, $r40, $r43, $r44, $r45, $r46;
        java.lang.String $r6, $r12, $r15, $r20, $r25, $r26, $r32, $r33, r34, r36, $r41, $r47;
        java.util.Hashtable $r23, $r37;
        java.lang.Object $r21, $r24;

        r22 := @this: org.apache.log4j.config.PropertyPrinter;

        r9 := @parameter0: java.io.PrintWriter;

        r0 := @parameter1: org.apache.log4j.Category;

        $r1 = virtualinvoke r0.<org.apache.log4j.Category: java.util.Enumeration getAllAppenders()>();

        $r2 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getLevel()>();

        if $r2 != null goto label01;

        $r33 = "";

        goto label02;

     label01:
        $r33 = virtualinvoke $r2.<org.apache.log4j.Priority: java.lang.String toString()>();

     label02:
        r34 = $r33;

     label03:
        $z2 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 == 0 goto label07;

        $r21 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r35 = (org.apache.log4j.Appender) $r21;

        $r23 = r22.<org.apache.log4j.config.PropertyPrinter: java.util.Hashtable appenderNames>;

        $r24 = virtualinvoke $r23.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r35);

        $r25 = (java.lang.String) $r24;

        r36 = $r25;

        if $r25 != null goto label06;

        $r26 = interfaceinvoke r35.<org.apache.log4j.Appender: java.lang.String getName()>();

        r36 = $r26;

        if $r26 == null goto label04;

        $z1 = virtualinvoke r22.<org.apache.log4j.config.PropertyPrinter: boolean isGenAppName(java.lang.String)>($r26);

        if $z1 == 0 goto label05;

     label04:
        r36 = virtualinvoke r22.<org.apache.log4j.config.PropertyPrinter: java.lang.String genAppName()>();

     label05:
        $r37 = r22.<org.apache.log4j.config.PropertyPrinter: java.util.Hashtable appenderNames>;

        virtualinvoke $r37.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r35, r36);

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("log4j.appender.");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r36);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r22.<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>(r9, r35, $r41);

        $r42 = interfaceinvoke r35.<org.apache.log4j.Appender: org.apache.log4j.Layout getLayout()>();

        if $r42 == null goto label06;

        $r27 = interfaceinvoke r35.<org.apache.log4j.Appender: org.apache.log4j.Layout getLayout()>();

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("log4j.appender.");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r36);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".layout");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r22.<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>(r9, $r27, $r32);

     label06:
        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r34);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r36);

        r34 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label03;

     label07:
        $r3 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        if r0 != $r3 goto label08;

        $r47 = "log4j.rootLogger";

        goto label09;

     label08:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("log4j.logger.");

        $r6 = virtualinvoke r0.<org.apache.log4j.Category: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r47 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

     label09:
        if r34 == "" goto label10;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r47);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r34);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r9.<java.io.PrintWriter: void println(java.lang.String)>($r20);

     label10:
        $z0 = virtualinvoke r0.<org.apache.log4j.Category: boolean getAdditivity()>();

        if $z0 != 0 goto label11;

        $r8 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        if r0 == $r8 goto label11;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("log4j.additivity.");

        $r12 = virtualinvoke r0.<org.apache.log4j.Category: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=false");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r9.<java.io.PrintWriter: void println(java.lang.String)>($r15);

     label11:
        return;
    }

    protected void printOptions(java.io.PrintWriter, org.apache.log4j.Logger)
    {
        java.io.PrintWriter r1;
        org.apache.log4j.config.PropertyPrinter r0;
        org.apache.log4j.Logger r2;

        r0 := @this: org.apache.log4j.config.PropertyPrinter;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: org.apache.log4j.Logger;

        virtualinvoke r0.<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Category)>(r1, r2);

        return;
    }

    protected void printOptions(java.io.PrintWriter, java.lang.Object, java.lang.String)
    {
        java.io.PrintWriter r0;
        org.apache.log4j.config.PropertyPrinter r10;
        java.lang.StringBuffer $r1, $r3, $r4, $r8, $r11, $r12, $r13;
        java.lang.Object r5;
        java.lang.Class $r6;
        java.lang.String r2, $r7, $r9, $r14;

        r10 := @this: org.apache.log4j.config.PropertyPrinter;

        r0 := @parameter0: java.io.PrintWriter;

        r5 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

        $r6 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.config.PropertyGetter: void getProperties(java.lang.Object,org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>(r5, r10, $r14);

        return;
    }

    public void foundProperty(java.lang.Object, java.lang.String, java.lang.String, java.lang.Object)
    {
        org.apache.log4j.config.PropertyPrinter r1;
        java.lang.StringBuffer $r2, $r5, $r6, $r7, $r10;
        java.lang.String r4, $r9, $r11, $r12, r13;
        boolean $z0, $z1, $z2;
        java.io.PrintWriter $r3;
        java.lang.Object r0, r8;

        r1 := @this: org.apache.log4j.config.PropertyPrinter;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.String;

        r13 := @parameter2: java.lang.String;

        r8 := @parameter3: java.lang.Object;

        $z0 = r0 instanceof org.apache.log4j.Appender;

        if $z0 == 0 goto label1;

        $r12 = "name";

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z2 == 0 goto label1;

        return;

     label1:
        $z1 = r1.<org.apache.log4j.config.PropertyPrinter: boolean doCapitalize>;

        if $z1 == 0 goto label2;

        r13 = staticinvoke <org.apache.log4j.config.PropertyPrinter: java.lang.String capitalize(java.lang.String)>(r13);

     label2:
        $r3 = r1.<org.apache.log4j.config.PropertyPrinter: java.io.PrintWriter out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r13);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

        $r9 = virtualinvoke r8.<java.lang.Object: java.lang.String toString()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        return;
    }

    public static java.lang.String capitalize(java.lang.String)
    {
        char $c0, $c2, $c3, $c4;
        java.lang.StringBuffer $r1;
        int $i1;
        java.lang.String r0, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c0);

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 == 1 goto label1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        $z1 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c4);

        if $z1 == 0 goto label2;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>(r0);

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $c3 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c2);

        virtualinvoke $r1.<java.lang.StringBuffer: void setCharAt(int,char)>(0, $c3);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label2:
        return r0;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintWriter $r1;
        java.io.PrintStream $r2;
        org.apache.log4j.config.PropertyPrinter $r0;
        java.lang.String[] r3;

        r3 := @parameter0: java.lang.String[];

        $r0 = new org.apache.log4j.config.PropertyPrinter;

        $r1 = new java.io.PrintWriter;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r2);

        specialinvoke $r0.<org.apache.log4j.config.PropertyPrinter: void <init>(java.io.PrintWriter)>($r1);

        return;
    }
}
