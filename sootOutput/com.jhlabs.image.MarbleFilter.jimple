public class com.jhlabs.image.MarbleFilter extends com.jhlabs.image.TransformFilter
{
    public float[] sinTable;
    public float[] cosTable;
    public float xScale;
    public float yScale;
    public float amount;
    public float turbulence;

    public void <init>()
    {
        com.jhlabs.image.MarbleFilter r0;

        r0 := @this: com.jhlabs.image.MarbleFilter;

        specialinvoke r0.<com.jhlabs.image.TransformFilter: void <init>()>();

        r0.<com.jhlabs.image.MarbleFilter: float xScale> = 4.0F;

        r0.<com.jhlabs.image.MarbleFilter: float yScale> = 4.0F;

        r0.<com.jhlabs.image.MarbleFilter: float amount> = 1.0F;

        r0.<com.jhlabs.image.MarbleFilter: float turbulence> = 1.0F;

        virtualinvoke r0.<com.jhlabs.image.TransformFilter: void setEdgeAction(int)>(1);

        return;
    }

    public void setXScale(float)
    {
        float f0;
        com.jhlabs.image.MarbleFilter r0;

        r0 := @this: com.jhlabs.image.MarbleFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MarbleFilter: float xScale> = f0;

        return;
    }

    public float getXScale()
    {
        float $f0;
        com.jhlabs.image.MarbleFilter r0;

        r0 := @this: com.jhlabs.image.MarbleFilter;

        $f0 = r0.<com.jhlabs.image.MarbleFilter: float xScale>;

        return $f0;
    }

    public void setYScale(float)
    {
        float f0;
        com.jhlabs.image.MarbleFilter r0;

        r0 := @this: com.jhlabs.image.MarbleFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MarbleFilter: float yScale> = f0;

        return;
    }

    public float getYScale()
    {
        float $f0;
        com.jhlabs.image.MarbleFilter r0;

        r0 := @this: com.jhlabs.image.MarbleFilter;

        $f0 = r0.<com.jhlabs.image.MarbleFilter: float yScale>;

        return $f0;
    }

    public void setAmount(float)
    {
        float f0;
        com.jhlabs.image.MarbleFilter r0;

        r0 := @this: com.jhlabs.image.MarbleFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MarbleFilter: float amount> = f0;

        return;
    }

    public float getAmount()
    {
        float $f0;
        com.jhlabs.image.MarbleFilter r0;

        r0 := @this: com.jhlabs.image.MarbleFilter;

        $f0 = r0.<com.jhlabs.image.MarbleFilter: float amount>;

        return $f0;
    }

    public void setTurbulence(float)
    {
        float f0;
        com.jhlabs.image.MarbleFilter r0;

        r0 := @this: com.jhlabs.image.MarbleFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MarbleFilter: float turbulence> = f0;

        return;
    }

    public float getTurbulence()
    {
        float $f0;
        com.jhlabs.image.MarbleFilter r0;

        r0 := @this: com.jhlabs.image.MarbleFilter;

        $f0 = r0.<com.jhlabs.image.MarbleFilter: float turbulence>;

        return $f0;
    }

    private void initialize()
    {
        float[] $r1, $r2, $r3, $r4;
        com.jhlabs.image.MarbleFilter r0;
        int i0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        float $f0, $f1, $f2, $f3, f4, $f5, $f6, $f7, $f8, $f9;

        r0 := @this: com.jhlabs.image.MarbleFilter;

        $r1 = newarray (float)[256];

        r0.<com.jhlabs.image.MarbleFilter: float[] sinTable> = $r1;

        $r2 = newarray (float)[256];

        r0.<com.jhlabs.image.MarbleFilter: float[] cosTable> = $r2;

        i0 = 0;

     label1:
        if i0 >= 256 goto label2;

        $f0 = (float) i0;

        $f1 = 6.2831855F * $f0;

        $f3 = $f1 / 256.0F;

        $f2 = r0.<com.jhlabs.image.MarbleFilter: float turbulence>;

        f4 = $f3 * $f2;

        $r3 = r0.<com.jhlabs.image.MarbleFilter: float[] sinTable>;

        $f5 = r0.<com.jhlabs.image.MarbleFilter: float yScale>;

        $f6 = neg $f5;

        $d1 = (double) $f6;

        $d0 = (double) f4;

        $d2 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $d3 = $d1 * $d2;

        $f7 = (float) $d3;

        $r3[i0] = $f7;

        $r4 = r0.<com.jhlabs.image.MarbleFilter: float[] cosTable>;

        $f8 = r0.<com.jhlabs.image.MarbleFilter: float yScale>;

        $d5 = (double) $f8;

        $d4 = (double) f4;

        $d6 = staticinvoke <java.lang.Math: double cos(double)>($d4);

        $d7 = $d5 * $d6;

        $f9 = (float) $d7;

        $r4[i0] = $f9;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private int displacementMap(int, int)
    {
        com.jhlabs.image.MarbleFilter r0;
        int i0, i1, $i2, $i3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;

        r0 := @this: com.jhlabs.image.MarbleFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $f1 = (float) i0;

        $f0 = r0.<com.jhlabs.image.MarbleFilter: float xScale>;

        $f5 = $f1 / $f0;

        $f3 = (float) i1;

        $f2 = r0.<com.jhlabs.image.MarbleFilter: float xScale>;

        $f4 = $f3 / $f2;

        $f6 = staticinvoke <com.jhlabs.math.Noise: float noise2(float,float)>($f5, $f4);

        $f7 = 1.0F + $f6;

        $f8 = 127.0F * $f7;

        $i2 = (int) $f8;

        $i3 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i2);

        return $i3;
    }

    protected void transformInverse(int, int, float[])
    {
        float[] r1, $r2, $r3;
        com.jhlabs.image.MarbleFilter r0;
        int i0, i1, $i2;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: com.jhlabs.image.MarbleFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

        $i2 = specialinvoke r0.<com.jhlabs.image.MarbleFilter: int displacementMap(int,int)>(i0, i1);

        $f1 = (float) i0;

        $r2 = r0.<com.jhlabs.image.MarbleFilter: float[] sinTable>;

        $f0 = $r2[$i2];

        $f2 = $f1 + $f0;

        r1[0] = $f2;

        $f4 = (float) i1;

        $r3 = r0.<com.jhlabs.image.MarbleFilter: float[] cosTable>;

        $f3 = $r3[$i2];

        $f5 = $f4 + $f3;

        r1[1] = $f5;

        return;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r1, r2, $r3;
        com.jhlabs.image.MarbleFilter r0;

        r0 := @this: com.jhlabs.image.MarbleFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r2 := @parameter1: java.awt.image.BufferedImage;

        specialinvoke r0.<com.jhlabs.image.MarbleFilter: void initialize()>();

        $r3 = specialinvoke r0.<com.jhlabs.image.TransformFilter: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(r1, r2);

        return $r3;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.MarbleFilter r0;

        r0 := @this: com.jhlabs.image.MarbleFilter;

        return "Distort/Marble...";
    }
}
