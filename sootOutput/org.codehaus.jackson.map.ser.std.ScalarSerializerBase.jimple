public abstract class org.codehaus.jackson.map.ser.std.ScalarSerializerBase extends org.codehaus.jackson.map.ser.std.SerializerBase
{

    protected void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.ser.std.ScalarSerializerBase r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.ScalarSerializerBase;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: void <init>(java.lang.Class)>(r1);

        return;
    }

    protected void <init>(java.lang.Class, boolean)
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.ser.std.ScalarSerializerBase r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.ScalarSerializerBase;

        r1 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: void <init>(java.lang.Class)>(r1);

        return;
    }

    public void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.TypeSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.ser.std.ScalarSerializerBase r3;
        org.codehaus.jackson.map.SerializerProvider r4;
        java.lang.Object r1;

        r3 := @this: org.codehaus.jackson.map.ser.std.ScalarSerializerBase;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r4 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r0 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        virtualinvoke r3.<org.codehaus.jackson.map.ser.std.ScalarSerializerBase: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, r2, r4);

        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type) throws org.codehaus.jackson.map.JsonMappingException
    {
        java.lang.reflect.Type r3;
        org.codehaus.jackson.map.ser.std.ScalarSerializerBase r0;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.ScalarSerializerBase;

        r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r3 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.ScalarSerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("string", 1);

        return $r1;
    }
}
