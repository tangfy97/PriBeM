public class com.mycila.inject.internal.asm.tree.LineNumberNode extends com.mycila.inject.internal.asm.tree.AbstractInsnNode
{
    public int line;
    public com.mycila.inject.internal.asm.tree.LabelNode start;

    public void <init>(int, com.mycila.inject.internal.asm.tree.LabelNode)
    {
        com.mycila.inject.internal.asm.tree.LabelNode r1;
        com.mycila.inject.internal.asm.tree.LineNumberNode r0;
        int i0, $i2;

        r0 := @this: com.mycila.inject.internal.asm.tree.LineNumberNode;

        i0 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.asm.tree.LabelNode;

        $i2 = (int) -1;

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: void <init>(int)>($i2);

        r0.<com.mycila.inject.internal.asm.tree.LineNumberNode: int line> = i0;

        r0.<com.mycila.inject.internal.asm.tree.LineNumberNode: com.mycila.inject.internal.asm.tree.LabelNode start> = r1;

        return;
    }

    public int getType()
    {
        com.mycila.inject.internal.asm.tree.LineNumberNode r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.LineNumberNode;

        return 14;
    }

    public void accept(com.mycila.inject.internal.asm.MethodVisitor)
    {
        com.mycila.inject.internal.asm.tree.LabelNode $r2;
        com.mycila.inject.internal.asm.MethodVisitor r0;
        com.mycila.inject.internal.asm.tree.LineNumberNode r1;
        int $i0;
        com.mycila.inject.internal.asm.Label $r3;

        r1 := @this: com.mycila.inject.internal.asm.tree.LineNumberNode;

        r0 := @parameter0: com.mycila.inject.internal.asm.MethodVisitor;

        $i0 = r1.<com.mycila.inject.internal.asm.tree.LineNumberNode: int line>;

        $r2 = r1.<com.mycila.inject.internal.asm.tree.LineNumberNode: com.mycila.inject.internal.asm.tree.LabelNode start>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.asm.tree.LabelNode: com.mycila.inject.internal.asm.Label getLabel()>();

        interfaceinvoke r0.<com.mycila.inject.internal.asm.MethodVisitor: void visitLineNumber(int,com.mycila.inject.internal.asm.Label)>($i0, $r3);

        return;
    }

    public com.mycila.inject.internal.asm.tree.AbstractInsnNode clone(java.util.Map)
    {
        com.mycila.inject.internal.asm.tree.LabelNode $r3, $r4;
        java.util.Map r2;
        com.mycila.inject.internal.asm.tree.LineNumberNode $r0, r1;
        int $i0;

        r1 := @this: com.mycila.inject.internal.asm.tree.LineNumberNode;

        r2 := @parameter0: java.util.Map;

        $r0 = new com.mycila.inject.internal.asm.tree.LineNumberNode;

        $i0 = r1.<com.mycila.inject.internal.asm.tree.LineNumberNode: int line>;

        $r3 = r1.<com.mycila.inject.internal.asm.tree.LineNumberNode: com.mycila.inject.internal.asm.tree.LabelNode start>;

        $r4 = staticinvoke <com.mycila.inject.internal.asm.tree.LineNumberNode: com.mycila.inject.internal.asm.tree.LabelNode clone(com.mycila.inject.internal.asm.tree.LabelNode,java.util.Map)>($r3, r2);

        specialinvoke $r0.<com.mycila.inject.internal.asm.tree.LineNumberNode: void <init>(int,com.mycila.inject.internal.asm.tree.LabelNode)>($i0, $r4);

        return $r0;
    }
}
