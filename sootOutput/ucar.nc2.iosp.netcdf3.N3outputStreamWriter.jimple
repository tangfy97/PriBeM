public class ucar.nc2.iosp.netcdf3.N3outputStreamWriter extends ucar.nc2.iosp.netcdf3.N3streamWriter
{
    private int recno;
    private boolean first;
    static final boolean $assertionsDisabled;

    public void <init>(ucar.nc2.NetcdfFile)
    {
        ucar.nc2.NetcdfFile r1;
        ucar.nc2.iosp.netcdf3.N3outputStreamWriter r0;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3outputStreamWriter;

        r1 := @parameter0: ucar.nc2.NetcdfFile;

        specialinvoke r0.<ucar.nc2.iosp.netcdf3.N3streamWriter: void <init>(ucar.nc2.NetcdfFile)>(r1);

        r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: int recno> = 0;

        r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: boolean first> = 1;

        return;
    }

    public void writeDataAll(java.io.DataOutputStream) throws java.io.IOException
    {
        ucar.ma2.StructureDataIterator $r6;
        ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo r26, r52;
        java.io.DataOutputStream r7;
        byte $b15;
        java.lang.StringBuilder $r10, $r12, $r13, $r14, $r19, $r21, $r22, $r23, $r30, $r33, $r34, $r35, $r36, $r41, $r43, $r44, $r45, $r46, $r47, $r49;
        long $l3, $l4, $l5, $l6, $l8, $l9, $l10, $l13, $l14;
        java.lang.AssertionError $r51;
        ucar.nc2.Structure r54;
        java.lang.String $r15, $r24, $r28, $r32, $r37, $r48, $r50;
        ucar.ma2.Array $r29, $r40;
        ucar.nc2.iosp.netcdf3.N3outputStreamWriter r0;
        ucar.ma2.StructureData $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, z12, z13;
        java.util.List $r1, $r17;
        ucar.nc2.NetcdfFile $r3, $r4, $r8, $r9, $r38;
        int $i0, $i1, $i2, $i7, $i11, $i12, i16, i17, i18;
        ucar.nc2.Variable $r5, r27, r53;
        java.io.PrintStream $r11, $r20, $r31, $r42;
        java.util.Iterator $r2, $r18;
        java.lang.Object $r25, $r39;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3outputStreamWriter;

        r7 := @parameter0: java.io.DataOutputStream;

        $r1 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: java.util.List vinfoList>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r39 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r52 = (ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo) $r39;

        $z8 = r52.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: boolean isRecord>;

        if $z8 != 0 goto label04;

        r53 = r52.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: ucar.nc2.Variable v>;

        $z9 = <ucar.nc2.iosp.netcdf3.N3outputStreamWriter: boolean $assertionsDisabled>;

        if $z9 != 0 goto label02;

        $l14 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos>;

        $i12 = r52.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: int offset>;

        $l13 = (long) $i12;

        $b15 = $l14 cmp $l13;

        if $b15 == 0 goto label02;

        $r51 = new java.lang.AssertionError;

        specialinvoke $r51.<java.lang.AssertionError: void <init>()>();

        throw $r51;

     label02:
        $z10 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: boolean debugPos>;

        if $z10 == 0 goto label03;

        $r42 = <java.lang.System: java.io.PrintStream out>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" writing at ");

        $l10 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos>;

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be ");

        $i11 = r52.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: int offset>;

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r48 = virtualinvoke r53.<ucar.nc2.Variable: java.lang.String getName()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r42.<java.io.PrintStream: void println(java.lang.String)>($r50);

     label03:
        $r40 = virtualinvoke r53.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $i2 = specialinvoke r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: int writeDataFast(ucar.nc2.Variable,java.io.DataOutputStream,ucar.ma2.Array)>(r53, r7, $r40);

        $l4 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos>;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos> = $l5;

        $l6 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos>;

        $i7 = virtualinvoke r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: int pad(java.io.DataOutputStream,int,byte)>(r7, $i2, 0);

        $l8 = (long) $i7;

        $l9 = $l6 + $l8;

        r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos> = $l9;

     label04:
        goto label01;

     label05:
        $r3 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: ucar.nc2.NetcdfFile ncfile>;

        $z1 = virtualinvoke $r3.<ucar.nc2.NetcdfFile: boolean hasUnlimitedDimension()>();

        if $z1 == 0 goto label06;

        $r38 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: ucar.nc2.NetcdfFile ncfile>;

        virtualinvoke $r38.<ucar.nc2.NetcdfFile: java.lang.Object sendIospMessage(java.lang.Object)>("AddRecordStructure");

     label06:
        if $z1 == 0 goto label14;

        z11 = 1;

        z13 = 1;

        z12 = 1;

        i16 = 0;

        $r4 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: ucar.nc2.NetcdfFile ncfile>;

        $r5 = virtualinvoke $r4.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>("record");

        r54 = (ucar.nc2.Structure) $r5;

        $r6 = virtualinvoke r54.<ucar.nc2.Structure: ucar.ma2.StructureDataIterator getStructureIterator()>();

     label07:
        $z2 = interfaceinvoke $r6.<ucar.ma2.StructureDataIterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r16 = interfaceinvoke $r6.<ucar.ma2.StructureDataIterator: ucar.ma2.StructureData next()>();

        i17 = 0;

        $r17 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: java.util.List vinfoList>;

        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z4 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r25 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r26 = (ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo) $r25;

        $z6 = r26.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: boolean isRecord>;

        if $z6 == 0 goto label09;

        r27 = r26.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: ucar.nc2.Variable v>;

        $r28 = virtualinvoke r27.<ucar.nc2.Variable: java.lang.String getName()>();

        $r29 = virtualinvoke $r16.<ucar.ma2.StructureData: ucar.ma2.Array getArray(java.lang.String)>($r28);

        $i0 = specialinvoke r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: int writeDataFast(ucar.nc2.Variable,java.io.DataOutputStream,ucar.ma2.Array)>(r27, r7, $r29);

        i18 = i17 + $i0;

        $i1 = virtualinvoke r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: int pad(java.io.DataOutputStream,int,byte)>(r7, $i0, 0);

        i17 = i18 + $i1;

        if z12 == 0 goto label09;

        $z7 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: boolean debugWriteData>;

        if $z7 == 0 goto label09;

        $r31 = <java.lang.System: java.io.PrintStream out>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke r27.<ucar.nc2.Variable: java.lang.String getName()>();

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" wrote ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r37);

     label09:
        goto label08;

     label10:
        if z13 == 0 goto label11;

        $z5 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: boolean debugWriteData>;

        if $z5 == 0 goto label11;

        $r20 = <java.lang.System: java.io.PrintStream out>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wrote ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r24);

        z11 = 0;

        z13 = 0;

        z12 = 0;

     label11:
        i16 = i16 + 1;

        goto label07;

     label12:
        $z3 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: boolean debugWriteData>;

        if $z3 == 0 goto label13;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wrote ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" records");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label13:
        virtualinvoke r7.<java.io.DataOutputStream: void flush()>();

        $r8 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: ucar.nc2.NetcdfFile ncfile>;

        virtualinvoke $r8.<ucar.nc2.NetcdfFile: java.lang.Object sendIospMessage(java.lang.Object)>("RemoveRecordStructure");

        $r9 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: ucar.nc2.NetcdfFile ncfile>;

        virtualinvoke $r9.<ucar.nc2.NetcdfFile: void finish()>();

     label14:
        return;
    }

    public void writeNonRecordData(ucar.nc2.Variable, java.io.DataOutputStream, ucar.ma2.Array) throws java.io.IOException
    {
        byte[] r7;
        java.lang.IllegalStateException $r8;
        ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo r4;
        ucar.nc2.iosp.netcdf3.N3outputStreamWriter r0;
        byte $b3;
        java.io.DataOutputStream r5;
        java.util.Map $r2;
        boolean $z0;
        java.lang.StringBuilder $r9, $r11, $r13, $r14, $r15, $r16, $r17;
        long $l1, $l2, $l4, $l5, $l6, $l10, $l11, $l12, $l13;
        int $i0, $i7, $i8, $i9, $i14;
        ucar.nc2.Variable r1;
        java.lang.String $r12, $r18;
        java.io.PrintStream $r10;
        ucar.ma2.Array r6;
        java.lang.Object $r3;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3outputStreamWriter;

        r1 := @parameter0: ucar.nc2.Variable;

        r5 := @parameter1: java.io.DataOutputStream;

        r6 := @parameter2: ucar.ma2.Array;

        $r2 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: java.util.Map vinfoMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo) $r3;

        $z0 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: boolean debugWriteData>;

        if $z0 == 0 goto label1;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Write ");

        $r12 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at filePos= ");

        $l13 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l13);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vinfo.offset= ");

        $i14 = r4.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: int offset>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label1:
        $l2 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos>;

        $i0 = r4.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: int offset>;

        $l1 = (long) $i0;

        $b3 = $l2 cmp $l1;

        if $b3 == 0 goto label2;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label2:
        $l4 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos>;

        $l5 = specialinvoke r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long writeData(ucar.nc2.Variable,java.io.DataOutputStream,ucar.ma2.Array)>(r1, r5, r6);

        $l6 = $l4 + $l5;

        r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos> = $l6;

        $i7 = r4.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: int pad>;

        if $i7 <= 0 goto label3;

        $i8 = r4.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: int pad>;

        r7 = newarray (byte)[$i8];

        virtualinvoke r5.<java.io.DataOutputStream: void write(byte[])>(r7);

        $l11 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos>;

        $i9 = r4.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: int pad>;

        $l10 = (long) $i9;

        $l12 = $l11 + $l10;

        r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos> = $l12;

     label3:
        return;
    }

    public void writeRecordData(java.io.DataOutputStream, java.util.List) throws java.io.IOException
    {
        byte[] r6;
        java.lang.IllegalStateException $r15;
        ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo $r26;
        ucar.nc2.iosp.netcdf3.N3outputStreamWriter r0;
        byte $b7;
        java.io.DataOutputStream r5;
        java.util.Map $r24;
        boolean $z0, $z1, $z2, $z3;
        java.util.List r1;
        java.lang.StringBuilder $r7, $r9, $r11, $r12, $r13, $r16, $r18, $r19, $r20, $r21;
        long l5, $l6, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19;
        int $i0, $i1, $i2, $i3, $i4, $i8, $i9, $i10, $i11, $i20;
        ucar.nc2.Variable r4;
        java.lang.String $r10, $r14, $r22;
        java.io.PrintStream $r8, $r17;
        java.util.Iterator $r2;
        ucar.ma2.Array $r23;
        java.lang.Object $r3, $r25;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3outputStreamWriter;

        r5 := @parameter0: java.io.DataOutputStream;

        r1 := @parameter1: java.util.List;

        $i3 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: int recStart>;

        $i1 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: int recno>;

        $i0 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: int recSize>;

        $i2 = $i1 * $i0;

        $i4 = $i3 + $i2;

        l5 = (long) $i4;

        $z0 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: boolean debugWriteData>;

        if $z0 == 0 goto label1;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Write record at filePos= ");

        $l16 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l16);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be= ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r22);

     label1:
        $l6 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos>;

        $b7 = $l6 cmp l5;

        if $b7 == 0 goto label2;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>()>();

        throw $r15;

     label2:
        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Variable) $r3;

        $z2 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: boolean first>;

        if $z2 == 0 goto label4;

        $z3 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: boolean debugWriteData>;

        if $z3 == 0 goto label4;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  write record var ");

        $r10 = virtualinvoke r4.<ucar.nc2.Variable: java.lang.String getNameAndDimensions()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" filePos=");

        $l15 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l15);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label4:
        $l17 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos>;

        $r23 = virtualinvoke r4.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $l18 = specialinvoke r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long writeData(ucar.nc2.Variable,java.io.DataOutputStream,ucar.ma2.Array)>(r4, r5, $r23);

        $l19 = $l17 + $l18;

        r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos> = $l19;

        $r24 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: java.util.Map vinfoMap>;

        $r25 = interfaceinvoke $r24.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r26 = (ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo) $r25;

        $i20 = $r26.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: int pad>;

        if $i20 <= 0 goto label5;

        $i10 = $r26.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: int pad>;

        r6 = newarray (byte)[$i10];

        virtualinvoke r5.<java.io.DataOutputStream: void write(byte[])>(r6);

        $l13 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos>;

        $i11 = $r26.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: int pad>;

        $l12 = (long) $i11;

        $l14 = $l13 + $l12;

        r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: long filePos> = $l14;

     label5:
        goto label3;

     label6:
        r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: boolean first> = 0;

        $i8 = r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: int recno>;

        $i9 = $i8 + 1;

        r0.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: int recno> = $i9;

        return;
    }

    private long writeData(ucar.nc2.Variable, java.io.DataOutputStream, ucar.ma2.Array) throws java.io.IOException
    {
        java.lang.IllegalStateException $r18;
        ucar.nc2.iosp.netcdf3.N3outputStreamWriter r16;
        java.io.DataOutputStream r15;
        byte $b11, $b13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        ucar.ma2.DataType $r1, $r4, $r5, $r6, $r7, $r8, $r9;
        float $f0;
        java.lang.StringBuilder $r12, $r13, $r17;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l7, $l8, $l10, $l12;
        short $s9;
        int $i6, $i14, $i15, $i16;
        ucar.nc2.Variable r0;
        java.lang.String $r14;
        double $d0;
        ucar.ma2.IndexIterator $r3;
        ucar.ma2.Array r2;

        r16 := @this: ucar.nc2.iosp.netcdf3.N3outputStreamWriter;

        r0 := @parameter0: ucar.nc2.Variable;

        r15 := @parameter1: java.io.DataOutputStream;

        r2 := @parameter2: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r3 = virtualinvoke r2.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r1 != $r4 goto label03;

     label01:
        $z5 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z5 == 0 goto label02;

        $b13 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: byte getByteNext()>();

        $i14 = (int) $b13;

        virtualinvoke r15.<java.io.DataOutputStream: void write(int)>($i14);

        goto label01;

     label02:
        $l12 = virtualinvoke r2.<ucar.ma2.Array: long getSize()>();

        return $l12;

     label03:
        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r1 != $r5 goto label06;

     label04:
        $z4 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z4 == 0 goto label05;

        $b11 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: byte getByteNext()>();

        $i15 = (int) $b11;

        virtualinvoke r15.<java.io.DataOutputStream: void write(int)>($i15);

        goto label04;

     label05:
        $l10 = virtualinvoke r2.<ucar.ma2.Array: long getSize()>();

        return $l10;

     label06:
        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r1 != $r6 goto label09;

     label07:
        $z3 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $s9 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: short getShortNext()>();

        $i16 = (int) $s9;

        virtualinvoke r15.<java.io.DataOutputStream: void writeShort(int)>($i16);

        goto label07;

     label08:
        $l7 = virtualinvoke r2.<ucar.ma2.Array: long getSize()>();

        $l8 = 2L * $l7;

        return $l8;

     label09:
        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r1 != $r7 goto label12;

     label10:
        $z2 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $i6 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: int getIntNext()>();

        virtualinvoke r15.<java.io.DataOutputStream: void writeInt(int)>($i6);

        goto label10;

     label11:
        $l4 = virtualinvoke r2.<ucar.ma2.Array: long getSize()>();

        $l5 = 4L * $l4;

        return $l5;

     label12:
        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r1 != $r8 goto label15;

     label13:
        $z1 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $f0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: float getFloatNext()>();

        virtualinvoke r15.<java.io.DataOutputStream: void writeFloat(float)>($f0);

        goto label13;

     label14:
        $l2 = virtualinvoke r2.<ucar.ma2.Array: long getSize()>();

        $l3 = 4L * $l2;

        return $l3;

     label15:
        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r1 != $r9 goto label18;

     label16:
        $z0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label17;

        $d0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        virtualinvoke r15.<java.io.DataOutputStream: void writeDouble(double)>($d0);

        goto label16;

     label17:
        $l0 = virtualinvoke r2.<ucar.ma2.Array: long getSize()>();

        $l1 = 8L * $l0;

        return $l1;

     label18:
        $r18 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dataType= ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r18;
    }

    private int writeDataFast(ucar.nc2.Variable, java.io.DataOutputStream, ucar.ma2.Array) throws java.io.IOException
    {
        byte[] $r31, $r34, r36;
        java.io.DataOutputStream r17;
        byte $b16, $b19;
        java.lang.StringBuilder $r10, $r11, $r41;
        double[] $r16, r40;
        float[] $r20, r39;
        short $s13;
        java.lang.String $r12;
        ucar.ma2.Array r13;
        char[] $r29, $r30;
        java.lang.IllegalStateException $r42;
        ucar.nc2.iosp.netcdf3.N3outputStreamWriter r35;
        int[] $r23, r38;
        ucar.ma2.DataType $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        float $f0;
        short[] $r26, r37;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i17, $i18, i20, i21, i22, i23, i24, i25, $i26, $i27, $i28;
        ucar.nc2.Variable r0;
        double $d0;
        java.lang.Class $r14, $r18, $r21, $r24, $r27, $r32;
        java.lang.Object $r15, $r19, $r22, $r25, $r28, $r33;

        r35 := @this: ucar.nc2.iosp.netcdf3.N3outputStreamWriter;

        r0 := @parameter0: ucar.nc2.Variable;

        r17 := @parameter1: java.io.DataOutputStream;

        r13 := @parameter2: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r1 != $r2 goto label03;

        $r32 = <java.lang.Byte: java.lang.Class TYPE>;

        $r33 = virtualinvoke r13.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r32);

        $r34 = (byte[]) $r33;

        r36 = (byte[]) $r34;

        i20 = 0;

     label01:
        $i17 = lengthof r36;

        if i20 >= $i17 goto label02;

        $b19 = r36[i20];

        $i26 = (int) $b19;

        virtualinvoke r17.<java.io.DataOutputStream: void write(int)>($i26);

        i20 = i20 + 1;

        goto label01;

     label02:
        $i18 = lengthof r36;

        return $i18;

     label03:
        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r1 != $r3 goto label06;

        $r27 = <java.lang.Character: java.lang.Class TYPE>;

        $r28 = virtualinvoke r13.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r27);

        $r29 = (char[]) $r28;

        $r30 = (char[]) $r29;

        $r31 = staticinvoke <ucar.nc2.iosp.IospHelper: byte[] convertCharToByte(char[])>($r30);

        i21 = 0;

     label04:
        $i14 = lengthof $r31;

        if i21 >= $i14 goto label05;

        $b16 = $r31[i21];

        $i27 = (int) $b16;

        virtualinvoke r17.<java.io.DataOutputStream: void write(int)>($i27);

        i21 = i21 + 1;

        goto label04;

     label05:
        $i15 = lengthof $r31;

        return $i15;

     label06:
        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r1 != $r4 goto label09;

        $r24 = <java.lang.Short: java.lang.Class TYPE>;

        $r25 = virtualinvoke r13.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r24);

        $r26 = (short[]) $r25;

        r37 = (short[]) $r26;

        i22 = 0;

     label07:
        $i10 = lengthof r37;

        if i22 >= $i10 goto label08;

        $s13 = r37[i22];

        $i28 = (int) $s13;

        virtualinvoke r17.<java.io.DataOutputStream: void writeShort(int)>($i28);

        i22 = i22 + 1;

        goto label07;

     label08:
        $i11 = lengthof r37;

        $i12 = 2 * $i11;

        return $i12;

     label09:
        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r1 != $r5 goto label12;

        $r21 = <java.lang.Integer: java.lang.Class TYPE>;

        $r22 = virtualinvoke r13.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r21);

        $r23 = (int[]) $r22;

        r38 = (int[]) $r23;

        i23 = 0;

     label10:
        $i6 = lengthof r38;

        if i23 >= $i6 goto label11;

        $i9 = r38[i23];

        virtualinvoke r17.<java.io.DataOutputStream: void writeInt(int)>($i9);

        i23 = i23 + 1;

        goto label10;

     label11:
        $i7 = lengthof r38;

        $i8 = 4 * $i7;

        return $i8;

     label12:
        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r1 != $r6 goto label15;

        $r18 = <java.lang.Float: java.lang.Class TYPE>;

        $r19 = virtualinvoke r13.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r18);

        $r20 = (float[]) $r19;

        r39 = (float[]) $r20;

        i24 = 0;

     label13:
        $i3 = lengthof r39;

        if i24 >= $i3 goto label14;

        $f0 = r39[i24];

        virtualinvoke r17.<java.io.DataOutputStream: void writeFloat(float)>($f0);

        i24 = i24 + 1;

        goto label13;

     label14:
        $i4 = lengthof r39;

        $i5 = 4 * $i4;

        return $i5;

     label15:
        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r1 != $r7 goto label18;

        $r14 = <java.lang.Double: java.lang.Class TYPE>;

        $r15 = virtualinvoke r13.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r14);

        $r16 = (double[]) $r15;

        r40 = (double[]) $r16;

        i25 = 0;

     label16:
        $i0 = lengthof r40;

        if i25 >= $i0 goto label17;

        $d0 = r40[i25];

        virtualinvoke r17.<java.io.DataOutputStream: void writeDouble(double)>($d0);

        i25 = i25 + 1;

        goto label16;

     label17:
        $i1 = lengthof r40;

        $i2 = 8 * $i1;

        return $i2;

     label18:
        $r42 = new java.lang.IllegalStateException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dataType= ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r42;
    }

    public static void writeFromFile(ucar.nc2.NetcdfFile, java.lang.String) throws java.io.IOException
    {
        java.io.FileOutputStream $r2;
        ucar.nc2.iosp.netcdf3.N3outputStreamWriter $r4;
        java.io.BufferedOutputStream $r1;
        java.io.DataOutputStream $r0;
        int $i0;
        ucar.nc2.Dimension $r6, $r7;
        java.lang.String r3;
        ucar.nc2.NetcdfFile r5;

        r5 := @parameter0: ucar.nc2.NetcdfFile;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.io.DataOutputStream;

        $r1 = new java.io.BufferedOutputStream;

        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.lang.String)>(r3);

        specialinvoke $r1.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>($r2, 10000);

        specialinvoke $r0.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r1);

        $r4 = new ucar.nc2.iosp.netcdf3.N3outputStreamWriter;

        specialinvoke $r4.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: void <init>(ucar.nc2.NetcdfFile)>(r5);

        $r6 = virtualinvoke r5.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension getUnlimitedDimension()>();

        if $r6 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r7 = virtualinvoke r5.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension getUnlimitedDimension()>();

        $i0 = virtualinvoke $r7.<ucar.nc2.Dimension: int getLength()>();

     label2:
        virtualinvoke $r4.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: void writeHeader(java.io.DataOutputStream,int)>($r0, $i0);

        virtualinvoke $r4.<ucar.nc2.iosp.netcdf3.N3outputStreamWriter: void writeDataAll(java.io.DataOutputStream)>($r0);

        virtualinvoke $r0.<java.io.DataOutputStream: void close()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r1;
        ucar.nc2.NetcdfFile $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <ucar.nc2.NetcdfFile: ucar.nc2.NetcdfFile open(java.lang.String)>("C:/data/metars/Surface_METAR_20070331_0000.nc");

        staticinvoke <ucar.nc2.iosp.netcdf3.N3outputStreamWriter: void writeFromFile(ucar.nc2.NetcdfFile,java.lang.String)>($r0, "C:/temp/streamOut.nc");

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/iosp/netcdf3/N3outputStreamWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.iosp.netcdf3.N3outputStreamWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
