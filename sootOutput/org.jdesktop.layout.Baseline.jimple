public class org.jdesktop.layout.Baseline extends java.lang.Object
{
    static final int BRB_NONE;
    public static final int BRB_CONSTANT_ASCENT;
    public static final int BRB_CONSTANT_DESCENT;
    public static final int BRB_CENTER_OFFSET;
    public static final int BRB_OTHER;
    private static final java.awt.Rectangle viewRect;
    private static final java.awt.Rectangle textRect;
    private static final java.awt.Rectangle iconRect;
    private static final int EDGE_SPACING;
    private static final int TEXT_SPACING;
    private static final java.awt.Insets EMPTY_INSETS;
    private static javax.swing.JLabel TABLE_LABEL;
    private static javax.swing.JLabel LIST_LABEL;
    private static javax.swing.JLabel TREE_LABEL;
    private static java.lang.Class CLASSIC_WINDOWS;
    private static boolean checkedForClassic;
    private static java.lang.Class WINDOWS_CLASS;
    private static boolean checkedForWindows;
    private static boolean inSandbox;
    private static boolean checkedForOcean;
    private static boolean usingOcean;
    private static final java.util.Map BASELINE_MAP;
    private static final java.util.Map BRB_I_MAP;
    private static final java.lang.reflect.Method COMPONENT_BASELINE_METHOD;
    private static final java.lang.reflect.Method COMPONENT_BRB_METHOD;
    private static final java.lang.Object ENUM_BRB_CENTER_OFFSET;
    private static final java.lang.Object ENUM_BRB_CONSTANT_ASCENT;
    private static final java.lang.Object ENUM_BRB_CONSTANT_DESCENT;
    private static final java.lang.Object ENUM_BRB_OTHER;
    private static javax.swing.JList brbList;
    private static javax.swing.ListCellRenderer brbListCellRenderer;
    static java.lang.Class class$java$awt$Component;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$jdesktop$layout$Baseline;
    static java.lang.Class class$javax$swing$plaf$metal$MetalLookAndFeel;

    private static java.lang.Object getFieldValue(java.lang.Class, java.lang.String) throws java.lang.IllegalAccessException, java.lang.NoSuchFieldException
    {
        java.lang.Class r0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.lang.reflect.Field $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        return $r3;
    }

    static int getBaselineResizeBehavior(java.awt.Component)
    {
        javax.swing.JComponent $r1;
        int $i0;
        java.awt.Component r0;
        boolean $z0;

        r0 := @parameter0: java.awt.Component;

        $z0 = r0 instanceof javax.swing.JComponent;

        if $z0 == 0 goto label1;

        $r1 = (javax.swing.JComponent) r0;

        $i0 = staticinvoke <org.jdesktop.layout.Baseline: int getBaselineResizeBehavior(javax.swing.JComponent)>($r1);

        return $i0;

     label1:
        return 4;
    }

    public static int getBaselineResizeBehavior(javax.swing.JComponent)
    {
        javax.swing.JComboBox $r15;
        java.lang.reflect.Method $r1, $r2;
        javax.swing.JSlider $r9;
        javax.swing.JTable $r5;
        javax.swing.JPanel $r11;
        javax.swing.JTextField $r17;
        javax.swing.JTabbedPane $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r3;
        javax.swing.AbstractButton $r16;
        javax.swing.JProgressBar $r10;
        javax.swing.JComponent r0;
        javax.swing.JSpinner $r8;
        javax.swing.JList $r12;
        javax.swing.JTree $r4;
        javax.swing.JScrollPane $r7;
        javax.swing.JLabel $r13;
        javax.swing.JTextArea $r14;

        r0 := @parameter0: javax.swing.JComponent;

        $r1 = staticinvoke <org.jdesktop.layout.Baseline: java.lang.reflect.Method getBRBIMethod(java.awt.Component)>(r0);

        if $r1 == null goto label01;

        $i13 = staticinvoke <org.jdesktop.layout.Baseline: int invokeBRBIMethod(java.lang.reflect.Method,java.awt.Component)>($r1, r0);

        return $i13;

     label01:
        $r2 = <org.jdesktop.layout.Baseline: java.lang.reflect.Method COMPONENT_BRB_METHOD>;

        if $r2 == null goto label02;

        $i12 = staticinvoke <org.jdesktop.layout.Baseline: int getBaselineResizeBehaviorUsingMustang(javax.swing.JComponent)>(r0);

        return $i12;

     label02:
        $r3 = virtualinvoke r0.<javax.swing.JComponent: java.lang.String getUIClassID()>();

        if $r3 == "ButtonUI" goto label03;

        if $r3 == "CheckBoxUI" goto label03;

        if $r3 == "RadioButtonUI" goto label03;

        if $r3 != "ToggleButtonUI" goto label04;

     label03:
        $r16 = (javax.swing.AbstractButton) r0;

        $i14 = staticinvoke <org.jdesktop.layout.Baseline: int getButtonBaselineResizeBehavior(javax.swing.AbstractButton)>($r16);

        return $i14;

     label04:
        if $r3 != "ComboBoxUI" goto label05;

        $r15 = (javax.swing.JComboBox) r0;

        $i11 = staticinvoke <org.jdesktop.layout.Baseline: int getComboBoxBaselineResizeBehavior(javax.swing.JComboBox)>($r15);

        return $i11;

     label05:
        if $r3 != "TextAreaUI" goto label06;

        $r14 = (javax.swing.JTextArea) r0;

        $i10 = staticinvoke <org.jdesktop.layout.Baseline: int getTextAreaBaselineResizeBehavior(javax.swing.JTextArea)>($r14);

        return $i10;

     label06:
        if $r3 == "TextFieldUI" goto label07;

        if $r3 == "FormattedTextFieldUI" goto label07;

        if $r3 != "PasswordFieldUI" goto label08;

     label07:
        $r17 = (javax.swing.JTextField) r0;

        $i15 = staticinvoke <org.jdesktop.layout.Baseline: int getSingleLineTextBaselineResizeBehavior(javax.swing.JTextField)>($r17);

        return $i15;

     label08:
        if $r3 != "LabelUI" goto label09;

        $r13 = (javax.swing.JLabel) r0;

        $i9 = staticinvoke <org.jdesktop.layout.Baseline: int getLabelBaselineResizeBehavior(javax.swing.JLabel)>($r13);

        return $i9;

     label09:
        if $r3 != "ListUI" goto label10;

        $r12 = (javax.swing.JList) r0;

        $i8 = staticinvoke <org.jdesktop.layout.Baseline: int getListBaselineResizeBehavior(javax.swing.JList)>($r12);

        return $i8;

     label10:
        if $r3 != "PanelUI" goto label11;

        $r11 = (javax.swing.JPanel) r0;

        $i7 = staticinvoke <org.jdesktop.layout.Baseline: int getPanelBaselineResizeBehavior(javax.swing.JPanel)>($r11);

        return $i7;

     label11:
        if $r3 != "ProgressBarUI" goto label12;

        $r10 = (javax.swing.JProgressBar) r0;

        $i6 = staticinvoke <org.jdesktop.layout.Baseline: int getProgressBarBaselineResizeBehavior(javax.swing.JProgressBar)>($r10);

        return $i6;

     label12:
        if $r3 != "SliderUI" goto label13;

        $r9 = (javax.swing.JSlider) r0;

        $i5 = staticinvoke <org.jdesktop.layout.Baseline: int getSliderBaselineResizeBehavior(javax.swing.JSlider)>($r9);

        return $i5;

     label13:
        if $r3 != "SpinnerUI" goto label14;

        $r8 = (javax.swing.JSpinner) r0;

        $i4 = staticinvoke <org.jdesktop.layout.Baseline: int getSpinnerBaselineResizeBehavior(javax.swing.JSpinner)>($r8);

        return $i4;

     label14:
        if $r3 != "ScrollPaneUI" goto label15;

        $r7 = (javax.swing.JScrollPane) r0;

        $i3 = staticinvoke <org.jdesktop.layout.Baseline: int getScrollPaneBaselineBaselineResizeBehavior(javax.swing.JScrollPane)>($r7);

        return $i3;

     label15:
        if $r3 != "TabbedPaneUI" goto label16;

        $r6 = (javax.swing.JTabbedPane) r0;

        $i2 = staticinvoke <org.jdesktop.layout.Baseline: int getTabbedPaneBaselineResizeBehavior(javax.swing.JTabbedPane)>($r6);

        return $i2;

     label16:
        if $r3 != "TableUI" goto label17;

        $r5 = (javax.swing.JTable) r0;

        $i1 = staticinvoke <org.jdesktop.layout.Baseline: int getTableBaselineResizeBehavior(javax.swing.JTable)>($r5);

        return $i1;

     label17:
        if $r3 != "TreeUI" goto label18;

        $r4 = (javax.swing.JTree) r0;

        $i0 = staticinvoke <org.jdesktop.layout.Baseline: int getTreeBaselineResizeBehavior(javax.swing.JTree)>($r4);

        return $i0;

     label18:
        return 4;
    }

    private static int getBaselineResizeBehaviorUsingMustang(javax.swing.JComponent)
    {
        javax.swing.JComponent r0;
        java.lang.IllegalAccessException $r10;
        java.lang.AssertionError $r7, $r9, $r11;
        java.lang.IllegalArgumentException $r8;
        java.lang.reflect.InvocationTargetException $r6;
        java.lang.Object $r2, $r3, $r4, $r5;
        java.lang.reflect.Method $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: javax.swing.JComponent;

     label01:
        $r1 = <org.jdesktop.layout.Baseline: java.lang.reflect.Method COMPONENT_BRB_METHOD>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, null);

        $r3 = <org.jdesktop.layout.Baseline: java.lang.Object ENUM_BRB_CENTER_OFFSET>;

        if $r2 != $r3 goto label03;

     label02:
        return 3;

     label03:
        $r4 = <org.jdesktop.layout.Baseline: java.lang.Object ENUM_BRB_CONSTANT_ASCENT>;

        if $r2 != $r4 goto label05;

     label04:
        return 1;

     label05:
        $r5 = <org.jdesktop.layout.Baseline: java.lang.Object ENUM_BRB_CONSTANT_DESCENT>;

        if $r2 != $r5 goto label07;

     label06:
        return 2;

     label07:
        goto label13;

     label08:
        $r10 := @caughtexception;

        $z2 = <org.jdesktop.layout.Baseline: boolean $assertionsDisabled>;

        if $z2 != 0 goto label09;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label09:
        goto label13;

     label10:
        $r8 := @caughtexception;

        $z1 = <org.jdesktop.layout.Baseline: boolean $assertionsDisabled>;

        if $z1 != 0 goto label11;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label11:
        goto label13;

     label12:
        $r6 := @caughtexception;

        $z0 = <org.jdesktop.layout.Baseline: boolean $assertionsDisabled>;

        if $z0 != 0 goto label13;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label13:
        return 4;

        catch java.lang.IllegalAccessException from label01 to label02 with label08;
        catch java.lang.IllegalAccessException from label03 to label04 with label08;
        catch java.lang.IllegalAccessException from label05 to label06 with label08;
        catch java.lang.IllegalArgumentException from label01 to label02 with label10;
        catch java.lang.IllegalArgumentException from label03 to label04 with label10;
        catch java.lang.IllegalArgumentException from label05 to label06 with label10;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label12;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label12;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label12;
    }

    private static java.lang.reflect.Method getBRBIMethod(java.awt.Component)
    {
        java.lang.reflect.Method[] $r2;
        java.util.Map $r3, $r8, $r9, $r10;
        int $i0, $i1, i2, $i4;
        java.lang.String $r5, $r6;
        java.lang.reflect.Method r4, r13;
        boolean $z0, $z1;
        java.lang.Class[] $r7;
        java.awt.Component r0;
        java.lang.Class $r1, r12;
        java.lang.Object $r11;

        r0 := @parameter0: java.awt.Component;

        r12 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        if r12 == null goto label3;

        $r9 = <org.jdesktop.layout.Baseline: java.util.Map BRB_I_MAP>;

        $z1 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r12);

        if $z1 == 0 goto label2;

        $r10 = <org.jdesktop.layout.Baseline: java.util.Map BRB_I_MAP>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r13 = (java.lang.reflect.Method) $r11;

        return r13;

     label2:
        r12 = virtualinvoke r12.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label3:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $i0 = lengthof $r2;

        i2 = $i0 - 1;

     label4:
        if i2 < 0 goto label6;

        r4 = $r2[i2];

        $r5 = "getBaselineResizeBehaviorInt";

        $r6 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label5;

        $r7 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r7;

        if $i1 != 0 goto label5;

        $r8 = <org.jdesktop.layout.Baseline: java.util.Map BRB_I_MAP>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r4);

        return r4;

     label5:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label4;

     label6:
        $r3 = <org.jdesktop.layout.Baseline: java.util.Map BRB_I_MAP>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, null);

        return null;
    }

    private static int invokeBRBIMethod(java.lang.reflect.Method, java.awt.Component)
    {
        java.lang.IllegalAccessException $r6;
        java.lang.IllegalArgumentException $r5;
        java.awt.Component r1;
        java.lang.Integer $r3;
        java.lang.reflect.InvocationTargetException $r4;
        int i0;
        java.lang.Object $r2;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.awt.Component;

        i0 = 4;

     label1:
        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, null);

        $r3 = (java.lang.Integer) $r2;

        i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

     label2:
        goto label6;

     label3:
        $r6 := @caughtexception;

        goto label6;

     label4:
        $r5 := @caughtexception;

        goto label6;

     label5:
        $r4 := @caughtexception;

     label6:
        return i0;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    private static int getTreeBaselineResizeBehavior(javax.swing.JTree)
    {
        javax.swing.JTree r0;

        r0 := @parameter0: javax.swing.JTree;

        return 1;
    }

    private static int getSingleLineTextBaselineResizeBehavior(javax.swing.JTextField)
    {
        javax.swing.JTextField r0;

        r0 := @parameter0: javax.swing.JTextField;

        return 3;
    }

    private static int getTextAreaBaselineResizeBehavior(javax.swing.JTextArea)
    {
        javax.swing.JTextArea r0;

        r0 := @parameter0: javax.swing.JTextArea;

        return 1;
    }

    private static int getTableBaselineResizeBehavior(javax.swing.JTable)
    {
        javax.swing.JTable r0;

        r0 := @parameter0: javax.swing.JTable;

        return 1;
    }

    private static int getTabbedPaneBaselineResizeBehavior(javax.swing.JTabbedPane)
    {
        int $i0;
        javax.swing.JTabbedPane r0;

        r0 := @parameter0: javax.swing.JTabbedPane;

        $i0 = virtualinvoke r0.<javax.swing.JTabbedPane: int getTabPlacement()>();

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label1;
            default: goto label3;
        };

     label1:
        return 1;

     label2:
        return 2;

     label3:
        return 4;
    }

    private static int getSpinnerBaselineResizeBehavior(javax.swing.JSpinner)
    {
        javax.swing.JComponent $r1;
        int $i0;
        javax.swing.JSpinner r0;

        r0 := @parameter0: javax.swing.JSpinner;

        $r1 = virtualinvoke r0.<javax.swing.JSpinner: javax.swing.JComponent getEditor()>();

        $i0 = staticinvoke <org.jdesktop.layout.Baseline: int getBaselineResizeBehavior(javax.swing.JComponent)>($r1);

        return $i0;
    }

    private static int getSliderBaselineResizeBehavior(javax.swing.JSlider)
    {
        javax.swing.JSlider r0;

        r0 := @parameter0: javax.swing.JSlider;

        return 4;
    }

    private static int getScrollPaneBaselineBaselineResizeBehavior(javax.swing.JScrollPane)
    {
        javax.swing.JScrollPane r0;

        r0 := @parameter0: javax.swing.JScrollPane;

        return 1;
    }

    private static int getProgressBarBaselineResizeBehavior(javax.swing.JProgressBar)
    {
        int $i0;
        javax.swing.JProgressBar r0;
        boolean $z0;

        r0 := @parameter0: javax.swing.JProgressBar;

        $z0 = virtualinvoke r0.<javax.swing.JProgressBar: boolean isStringPainted()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<javax.swing.JProgressBar: int getOrientation()>();

        if $i0 != 0 goto label1;

        return 3;

     label1:
        return 4;
    }

    private static int getPanelBaselineResizeBehavior(javax.swing.JPanel)
    {
        int $i0;
        javax.swing.border.TitledBorder $r2;
        javax.swing.JPanel r0;
        javax.swing.border.Border $r1;
        boolean $z0;

        r0 := @parameter0: javax.swing.JPanel;

        $r1 = virtualinvoke r0.<javax.swing.JPanel: javax.swing.border.Border getBorder()>();

        $z0 = $r1 instanceof javax.swing.border.TitledBorder;

        if $z0 == 0 goto label3;

        $r2 = (javax.swing.border.TitledBorder) $r1;

        $i0 = virtualinvoke $r2.<javax.swing.border.TitledBorder: int getTitlePosition()>();

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            default: goto label3;
        };

     label1:
        return 1;

     label2:
        return 2;

     label3:
        return 4;
    }

    private static int getListBaselineResizeBehavior(javax.swing.JList)
    {
        javax.swing.JList r0;

        r0 := @parameter0: javax.swing.JList;

        return 1;
    }

    private static int getLabelBaselineResizeBehavior(javax.swing.JLabel)
    {
        int $i0;
        java.lang.Object $r1;
        javax.swing.JLabel r0;

        r0 := @parameter0: javax.swing.JLabel;

        $r1 = virtualinvoke r0.<javax.swing.JLabel: java.lang.Object getClientProperty(java.lang.Object)>("html");

        if $r1 == null goto label1;

        return 4;

     label1:
        $i0 = virtualinvoke r0.<javax.swing.JLabel: int getVerticalAlignment()>();

        tableswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label2;
            case 2: goto label5;
            case 3: goto label3;
            default: goto label5;
        };

     label2:
        return 1;

     label3:
        return 2;

     label4:
        return 3;

     label5:
        return 4;
    }

    private static int getButtonBaselineResizeBehavior(javax.swing.AbstractButton)
    {
        int $i0;
        java.lang.Object $r1;
        javax.swing.AbstractButton r0;

        r0 := @parameter0: javax.swing.AbstractButton;

        $r1 = virtualinvoke r0.<javax.swing.AbstractButton: java.lang.Object getClientProperty(java.lang.Object)>("html");

        if $r1 == null goto label1;

        return 4;

     label1:
        $i0 = virtualinvoke r0.<javax.swing.AbstractButton: int getVerticalAlignment()>();

        tableswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label2;
            case 2: goto label5;
            case 3: goto label3;
            default: goto label5;
        };

     label2:
        return 1;

     label3:
        return 2;

     label4:
        return 3;

     label5:
        return 4;
    }

    private static int getComboBoxBaselineResizeBehavior(javax.swing.JComboBox)
    {
        javax.swing.ComboBoxEditor $r10;
        int $i0, $i1, $i2, $i4;
        javax.swing.JComboBox r0;
        boolean $z0;
        javax.swing.DefaultListCellRenderer $r15;
        javax.swing.JList $r3, $r4, $r16;
        javax.swing.ComboBoxModel $r2, $r7;
        java.awt.Component $r5, $r11;
        javax.swing.ListCellRenderer $r1, $r8, r12;
        java.lang.Object r13, $r14;

        r0 := @parameter0: javax.swing.JComboBox;

        $z0 = virtualinvoke r0.<javax.swing.JComboBox: boolean isEditable()>();

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r0.<javax.swing.JComboBox: javax.swing.ComboBoxEditor getEditor()>();

        $r11 = interfaceinvoke $r10.<javax.swing.ComboBoxEditor: java.awt.Component getEditorComponent()>();

        $i2 = staticinvoke <org.jdesktop.layout.Baseline: int getBaselineResizeBehavior(java.awt.Component)>($r11);

        return $i2;

     label1:
        $r1 = virtualinvoke r0.<javax.swing.JComboBox: javax.swing.ListCellRenderer getRenderer()>();

        r12 = $r1;

        if $r1 != null goto label3;

        $r8 = <org.jdesktop.layout.Baseline: javax.swing.ListCellRenderer brbListCellRenderer>;

        if $r8 != null goto label2;

        $r15 = new javax.swing.DefaultListCellRenderer;

        specialinvoke $r15.<javax.swing.DefaultListCellRenderer: void <init>()>();

        <org.jdesktop.layout.Baseline: javax.swing.ListCellRenderer brbListCellRenderer> = $r15;

     label2:
        r12 = <org.jdesktop.layout.Baseline: javax.swing.ListCellRenderer brbListCellRenderer>;

     label3:
        r13 = null;

        $r14 = virtualinvoke r0.<javax.swing.JComboBox: java.lang.Object getPrototypeDisplayValue()>();

        if $r14 == null goto label4;

        r13 = $r14;

        goto label5;

     label4:
        $r2 = virtualinvoke r0.<javax.swing.JComboBox: javax.swing.ComboBoxModel getModel()>();

        $i0 = interfaceinvoke $r2.<javax.swing.ComboBoxModel: int getSize()>();

        if $i0 <= 0 goto label5;

        $r7 = virtualinvoke r0.<javax.swing.JComboBox: javax.swing.ComboBoxModel getModel()>();

        r13 = interfaceinvoke $r7.<javax.swing.ComboBoxModel: java.lang.Object getElementAt(int)>(0);

     label5:
        if r13 == null goto label7;

        $r3 = <org.jdesktop.layout.Baseline: javax.swing.JList brbList>;

        if $r3 != null goto label6;

        $r16 = new javax.swing.JList;

        specialinvoke $r16.<javax.swing.JList: void <init>()>();

        <org.jdesktop.layout.Baseline: javax.swing.JList brbList> = $r16;

     label6:
        $r4 = <org.jdesktop.layout.Baseline: javax.swing.JList brbList>;

        $i4 = (int) -1;

        $r5 = interfaceinvoke r12.<javax.swing.ListCellRenderer: java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)>($r4, r13, $i4, 0, 0);

        $i1 = staticinvoke <org.jdesktop.layout.Baseline: int getBaselineResizeBehavior(java.awt.Component)>($r5);

        return $i1;

     label7:
        return 4;
    }

    public static int getBaseline(javax.swing.JComponent)
    {
        javax.swing.JComponent r0;
        java.awt.Dimension $r1;
        int $i0, $i1, $i2;

        r0 := @parameter0: javax.swing.JComponent;

        $r1 = virtualinvoke r0.<javax.swing.JComponent: java.awt.Dimension getPreferredSize()>();

        $i1 = $r1.<java.awt.Dimension: int width>;

        $i0 = $r1.<java.awt.Dimension: int height>;

        $i2 = staticinvoke <org.jdesktop.layout.Baseline: int getBaseline(javax.swing.JComponent,int,int)>(r0, $i1, $i0);

        return $i2;
    }

    private static java.lang.reflect.Method getBaselineMethod(javax.swing.JComponent)
    {
        java.lang.reflect.Method[] $r3;
        java.util.Map $r4, $r13, $r14, $r15;
        int $i0, $i1, i2, $i4;
        java.lang.String $r6, $r7;
        java.lang.reflect.Method $r0, r5, $r17, r19;
        boolean $z0, $z1;
        javax.swing.JComponent r1;
        java.lang.Class[] $r8;
        java.lang.Class $r2, $r9, $r10, $r11, $r12, r18;
        java.lang.Object $r16;

        r1 := @parameter0: javax.swing.JComponent;

        $r0 = <org.jdesktop.layout.Baseline: java.lang.reflect.Method COMPONENT_BASELINE_METHOD>;

        if $r0 == null goto label1;

        $r17 = <org.jdesktop.layout.Baseline: java.lang.reflect.Method COMPONENT_BASELINE_METHOD>;

        return $r17;

     label1:
        r18 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        if r18 == null goto label4;

        $r14 = <org.jdesktop.layout.Baseline: java.util.Map BASELINE_MAP>;

        $z1 = interfaceinvoke $r14.<java.util.Map: boolean containsKey(java.lang.Object)>(r18);

        if $z1 == 0 goto label3;

        $r15 = <org.jdesktop.layout.Baseline: java.util.Map BASELINE_MAP>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r18);

        r19 = (java.lang.reflect.Method) $r16;

        return r19;

     label3:
        r18 = virtualinvoke r18.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label2;

     label4:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $i0 = lengthof $r3;

        i2 = $i0 - 1;

     label5:
        if i2 < 0 goto label7;

        r5 = $r3[i2];

        $r6 = "getBaseline";

        $r7 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label6;

        $r8 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r8;

        if $i1 != 2 goto label6;

        $r10 = $r8[0];

        $r9 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r10 != $r9 goto label6;

        $r12 = $r8[1];

        $r11 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r12 != $r11 goto label6;

        $r13 = <org.jdesktop.layout.Baseline: java.util.Map BASELINE_MAP>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r5);

        return r5;

     label6:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label5;

     label7:
        $r4 = <org.jdesktop.layout.Baseline: java.util.Map BASELINE_MAP>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, null);

        return null;
    }

    private static int invokeBaseline(java.lang.reflect.Method, javax.swing.JComponent, int, int)
    {
        javax.swing.JComponent r1;
        java.lang.IllegalAccessException $r9;
        java.lang.Object[] $r2;
        java.lang.IllegalArgumentException $r8;
        java.lang.Integer $r6, $r10, $r11;
        java.lang.reflect.InvocationTargetException $r7;
        int i0, i1, i2, $i4;
        java.lang.Object $r5;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: javax.swing.JComponent;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i4 = (int) -1;

        i2 = $i4;

     label1:
        $r2 = newarray (java.lang.Object)[2];

        $r10 = new java.lang.Integer;

        specialinvoke $r10.<java.lang.Integer: void <init>(int)>(i0);

        $r2[0] = $r10;

        $r11 = new java.lang.Integer;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>(i1);

        $r2[1] = $r11;

        $r5 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r2);

        $r6 = (java.lang.Integer) $r5;

        i2 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label2:
        goto label6;

     label3:
        $r9 := @caughtexception;

        goto label6;

     label4:
        $r8 := @caughtexception;

        goto label6;

     label5:
        $r7 := @caughtexception;

     label6:
        return i2;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    private static boolean isKnownLookAndFeel()
    {
        javax.swing.LookAndFeel $r0;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;

        $r0 = staticinvoke <javax.swing.UIManager: javax.swing.LookAndFeel getLookAndFeel()>();

        $r1 = virtualinvoke $r0.<javax.swing.LookAndFeel: java.lang.String getID()>();

        if $r1 == "GTK" goto label1;

        if $r1 == "Aqua" goto label1;

        $z0 = staticinvoke <org.jdesktop.layout.Baseline: boolean isMetal(javax.swing.LookAndFeel)>($r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.jdesktop.layout.Baseline: boolean isWindows(javax.swing.LookAndFeel)>($r0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static int getBaseline(javax.swing.JComponent, int, int)
    {
        javax.swing.JComboBox $r15;
        java.lang.reflect.Method $r1;
        org.jdesktop.layout.Baseline $r16;
        boolean $z0, $z1;
        javax.swing.JSlider $r9;
        javax.swing.JTable $r5;
        javax.swing.JPanel $r11;
        javax.swing.JTabbedPane $r6;
        int i0, $i1, $i2, i3, $i4, $i5, i6, $i7, $i9, $i11, $i13;
        java.lang.String $r3;
        javax.swing.AbstractButton $r17;
        javax.swing.JProgressBar $r10;
        javax.swing.JComponent r0;
        javax.swing.JSpinner $r8;
        javax.swing.JList $r12;
        javax.swing.JTree $r4;
        javax.swing.text.JTextComponent $r18;
        javax.swing.JScrollPane $r7;
        javax.swing.JLabel $r13;
        java.lang.Object $r2;
        javax.swing.JTextArea $r14;

        r0 := @parameter0: javax.swing.JComponent;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $r1 = staticinvoke <org.jdesktop.layout.Baseline: java.lang.reflect.Method getBaselineMethod(javax.swing.JComponent)>(r0);

        if $r1 == null goto label01;

        $i5 = staticinvoke <org.jdesktop.layout.Baseline: int invokeBaseline(java.lang.reflect.Method,javax.swing.JComponent,int,int)>($r1, r0, i3, i0);

        return $i5;

     label01:
        $r2 = staticinvoke <javax.swing.UIManager: java.lang.Object get(java.lang.Object)>("Baseline.instance");

        if $r2 == null goto label02;

        $z1 = $r2 instanceof org.jdesktop.layout.Baseline;

        if $z1 == 0 goto label02;

        $r16 = (org.jdesktop.layout.Baseline) $r2;

        $i4 = virtualinvoke $r16.<org.jdesktop.layout.Baseline: int getComponentBaseline(javax.swing.JComponent,int,int)>(r0, i3, i0);

        return $i4;

     label02:
        $z0 = staticinvoke <org.jdesktop.layout.Baseline: boolean isKnownLookAndFeel()>();

        if $z0 != 0 goto label03;

        $i9 = (int) -1;

        return $i9;

     label03:
        $r3 = virtualinvoke r0.<javax.swing.JComponent: java.lang.String getUIClassID()>();

        $i11 = (int) -1;

        i6 = $i11;

        if $r3 == "ButtonUI" goto label04;

        if $r3 == "CheckBoxUI" goto label04;

        if $r3 == "RadioButtonUI" goto label04;

        if $r3 != "ToggleButtonUI" goto label05;

     label04:
        $r17 = (javax.swing.AbstractButton) r0;

        i6 = staticinvoke <org.jdesktop.layout.Baseline: int getButtonBaseline(javax.swing.AbstractButton,int)>($r17, i0);

        goto label19;

     label05:
        if $r3 != "ComboBoxUI" goto label06;

        $r15 = (javax.swing.JComboBox) r0;

        $i2 = staticinvoke <org.jdesktop.layout.Baseline: int getComboBoxBaseline(javax.swing.JComboBox,int)>($r15, i0);

        return $i2;

     label06:
        if $r3 != "TextAreaUI" goto label07;

        $r14 = (javax.swing.JTextArea) r0;

        $i1 = staticinvoke <org.jdesktop.layout.Baseline: int getTextAreaBaseline(javax.swing.JTextArea,int)>($r14, i0);

        return $i1;

     label07:
        if $r3 == "FormattedTextFieldUI" goto label08;

        if $r3 == "PasswordFieldUI" goto label08;

        if $r3 != "TextFieldUI" goto label09;

     label08:
        $r18 = (javax.swing.text.JTextComponent) r0;

        i6 = staticinvoke <org.jdesktop.layout.Baseline: int getSingleLineTextBaseline(javax.swing.text.JTextComponent,int)>($r18, i0);

        goto label19;

     label09:
        if $r3 != "LabelUI" goto label10;

        $r13 = (javax.swing.JLabel) r0;

        i6 = staticinvoke <org.jdesktop.layout.Baseline: int getLabelBaseline(javax.swing.JLabel,int)>($r13, i0);

        goto label19;

     label10:
        if $r3 != "ListUI" goto label11;

        $r12 = (javax.swing.JList) r0;

        i6 = staticinvoke <org.jdesktop.layout.Baseline: int getListBaseline(javax.swing.JList,int)>($r12, i0);

        goto label19;

     label11:
        if $r3 != "PanelUI" goto label12;

        $r11 = (javax.swing.JPanel) r0;

        i6 = staticinvoke <org.jdesktop.layout.Baseline: int getPanelBaseline(javax.swing.JPanel,int)>($r11, i0);

        goto label19;

     label12:
        if $r3 != "ProgressBarUI" goto label13;

        $r10 = (javax.swing.JProgressBar) r0;

        i6 = staticinvoke <org.jdesktop.layout.Baseline: int getProgressBarBaseline(javax.swing.JProgressBar,int)>($r10, i0);

        goto label19;

     label13:
        if $r3 != "SliderUI" goto label14;

        $r9 = (javax.swing.JSlider) r0;

        i6 = staticinvoke <org.jdesktop.layout.Baseline: int getSliderBaseline(javax.swing.JSlider,int)>($r9, i0);

        goto label19;

     label14:
        if $r3 != "SpinnerUI" goto label15;

        $r8 = (javax.swing.JSpinner) r0;

        i6 = staticinvoke <org.jdesktop.layout.Baseline: int getSpinnerBaseline(javax.swing.JSpinner,int)>($r8, i0);

        goto label19;

     label15:
        if $r3 != "ScrollPaneUI" goto label16;

        $r7 = (javax.swing.JScrollPane) r0;

        i6 = staticinvoke <org.jdesktop.layout.Baseline: int getScrollPaneBaseline(javax.swing.JScrollPane,int)>($r7, i0);

        goto label19;

     label16:
        if $r3 != "TabbedPaneUI" goto label17;

        $r6 = (javax.swing.JTabbedPane) r0;

        i6 = staticinvoke <org.jdesktop.layout.Baseline: int getTabbedPaneBaseline(javax.swing.JTabbedPane,int)>($r6, i0);

        goto label19;

     label17:
        if $r3 != "TableUI" goto label18;

        $r5 = (javax.swing.JTable) r0;

        i6 = staticinvoke <org.jdesktop.layout.Baseline: int getTableBaseline(javax.swing.JTable,int)>($r5, i0);

        goto label19;

     label18:
        if $r3 != "TreeUI" goto label19;

        $r4 = (javax.swing.JTree) r0;

        i6 = staticinvoke <org.jdesktop.layout.Baseline: int getTreeBaseline(javax.swing.JTree,int)>($r4, i0);

     label19:
        $i13 = (int) -1;

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>(i6, $i13);

        return $i7;
    }

    private static java.awt.Insets rotateInsets(java.awt.Insets, int)
    {
        java.awt.Insets $r0, r1, $r2, $r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;

        r1 := @parameter0: java.awt.Insets;

        i0 := @parameter1: int;

        tableswitch(i0)
        {
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label3;
            default: goto label4;
        };

     label1:
        $r3 = new java.awt.Insets;

        $i12 = r1.<java.awt.Insets: int left>;

        $i11 = r1.<java.awt.Insets: int top>;

        $i10 = r1.<java.awt.Insets: int right>;

        $i9 = r1.<java.awt.Insets: int bottom>;

        specialinvoke $r3.<java.awt.Insets: void <init>(int,int,int,int)>($i12, $i11, $i10, $i9);

        return $r3;

     label2:
        $r2 = new java.awt.Insets;

        $i8 = r1.<java.awt.Insets: int bottom>;

        $i7 = r1.<java.awt.Insets: int left>;

        $i6 = r1.<java.awt.Insets: int top>;

        $i5 = r1.<java.awt.Insets: int right>;

        specialinvoke $r2.<java.awt.Insets: void <init>(int,int,int,int)>($i8, $i7, $i6, $i5);

        return $r2;

     label3:
        $r0 = new java.awt.Insets;

        $i4 = r1.<java.awt.Insets: int left>;

        $i3 = r1.<java.awt.Insets: int bottom>;

        $i2 = r1.<java.awt.Insets: int right>;

        $i1 = r1.<java.awt.Insets: int top>;

        specialinvoke $r0.<java.awt.Insets: void <init>(int,int,int,int)>($i4, $i3, $i2, $i1);

        return $r0;

     label4:
        $r4 = new java.awt.Insets;

        $i16 = r1.<java.awt.Insets: int top>;

        $i15 = r1.<java.awt.Insets: int left>;

        $i14 = r1.<java.awt.Insets: int bottom>;

        $i13 = r1.<java.awt.Insets: int right>;

        specialinvoke $r4.<java.awt.Insets: void <init>(int,int,int,int)>($i16, $i15, $i14, $i13);

        return $r4;
    }

    private static int getMaxTabHeight(javax.swing.JTabbedPane)
    {
        java.awt.Insets $r3;
        javax.swing.JTabbedPane r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, $i10;
        boolean $z0, z1;
        java.awt.Font $r1;
        javax.swing.Icon $r4;
        java.awt.FontMetrics $r2;

        r0 := @parameter0: javax.swing.JTabbedPane;

        $r1 = virtualinvoke r0.<javax.swing.JTabbedPane: java.awt.Font getFont()>();

        $r2 = virtualinvoke r0.<javax.swing.JTabbedPane: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r1);

        $i0 = virtualinvoke $r2.<java.awt.FontMetrics: int getHeight()>();

        i6 = $i0;

        z1 = 0;

        $i1 = virtualinvoke r0.<javax.swing.JTabbedPane: int getTabCount()>();

        i7 = $i1 - 1;

     label1:
        if i7 < 0 goto label3;

        $r4 = virtualinvoke r0.<javax.swing.JTabbedPane: javax.swing.Icon getIconAt(int)>(i7);

        if $r4 == null goto label2;

        $i5 = interfaceinvoke $r4.<javax.swing.Icon: int getIconHeight()>();

        i6 = staticinvoke <java.lang.Math: int max(int,int)>(i6, $i5);

        if $i5 <= $i0 goto label2;

        z1 = 1;

     label2:
        $i10 = (int) -1;

        i7 = i7 + $i10;

        goto label1;

     label3:
        $r3 = staticinvoke <javax.swing.UIManager: java.awt.Insets getInsets(java.lang.Object)>("TabbedPane.tabInsets");

        i8 = i6 + 2;

        $z0 = staticinvoke <org.jdesktop.layout.Baseline: boolean isMetal()>();

        if $z0 == 0 goto label4;

        if z1 != 0 goto label5;

     label4:
        $i3 = $r3.<java.awt.Insets: int top>;

        $i2 = $r3.<java.awt.Insets: int bottom>;

        $i4 = $i3 + $i2;

        i8 = i8 + $i4;

     label5:
        return i8;
    }

    private static int getTabbedPaneBaseline(javax.swing.JTabbedPane, int)
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        java.awt.Font $r4;
        java.awt.Rectangle $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.awt.Insets $r1, $r2, $r3;
        javax.swing.JTabbedPane r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, $i22, i23, i24, i25, i26, $i28, $i30, $i32, $i34;
        java.awt.FontMetrics $r5;

        r0 := @parameter0: javax.swing.JTabbedPane;

        i21 := @parameter1: int;

        $i0 = virtualinvoke r0.<javax.swing.JTabbedPane: int getTabCount()>();

        if $i0 <= 0 goto label11;

        $z0 = staticinvoke <org.jdesktop.layout.Baseline: boolean isAqua()>();

        if $z0 == 0 goto label01;

        $i22 = staticinvoke <org.jdesktop.layout.Baseline: int getAquaTabbedPaneBaseline(javax.swing.JTabbedPane,int)>(r0, i21);

        return $i22;

     label01:
        $r1 = virtualinvoke r0.<javax.swing.JTabbedPane: java.awt.Insets getInsets()>();

        staticinvoke <javax.swing.UIManager: java.awt.Insets getInsets(java.lang.Object)>("TabbedPane.contentBorderInsets");

        $r2 = staticinvoke <javax.swing.UIManager: java.awt.Insets getInsets(java.lang.Object)>("TabbedPane.tabAreaInsets");

        $i1 = virtualinvoke r0.<javax.swing.JTabbedPane: int getTabPlacement()>();

        $r3 = staticinvoke <org.jdesktop.layout.Baseline: java.awt.Insets rotateInsets(java.awt.Insets,int)>($r2, $i1);

        $r4 = virtualinvoke r0.<javax.swing.JTabbedPane: java.awt.Font getFont()>();

        $r5 = virtualinvoke r0.<javax.swing.JTabbedPane: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r4);

        $i2 = staticinvoke <org.jdesktop.layout.Baseline: int getMaxTabHeight(javax.swing.JTabbedPane)>(r0);

        $r6 = <org.jdesktop.layout.Baseline: java.awt.Rectangle iconRect>;

        virtualinvoke $r6.<java.awt.Rectangle: void setBounds(int,int,int,int)>(0, 0, 0, 0);

        $r7 = <org.jdesktop.layout.Baseline: java.awt.Rectangle textRect>;

        virtualinvoke $r7.<java.awt.Rectangle: void setBounds(int,int,int,int)>(0, 0, 0, 0);

        $r8 = <org.jdesktop.layout.Baseline: java.awt.Rectangle viewRect>;

        virtualinvoke $r8.<java.awt.Rectangle: void setBounds(int,int,int,int)>(0, 0, 32767, $i2);

        $r11 = <org.jdesktop.layout.Baseline: java.awt.Rectangle viewRect>;

        $r10 = <org.jdesktop.layout.Baseline: java.awt.Rectangle iconRect>;

        $r9 = <org.jdesktop.layout.Baseline: java.awt.Rectangle textRect>;

        staticinvoke <javax.swing.SwingUtilities: java.lang.String layoutCompoundLabel(javax.swing.JComponent,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)>(r0, $r5, "A", null, 0, 0, 0, 11, $r11, $r10, $r9, 0);

        $r12 = <org.jdesktop.layout.Baseline: java.awt.Rectangle textRect>;

        $i3 = $r12.<java.awt.Rectangle: int y>;

        $i4 = virtualinvoke $r5.<java.awt.FontMetrics: int getAscent()>();

        i23 = $i3 + $i4;

        $i5 = virtualinvoke r0.<javax.swing.JTabbedPane: int getTabPlacement()>();

        tableswitch($i5)
        {
            case 1: goto label02;
            case 2: goto label08;
            case 3: goto label05;
            case 4: goto label08;
            default: goto label11;
        };

     label02:
        $i18 = $r1.<java.awt.Insets: int top>;

        $i17 = $r3.<java.awt.Insets: int top>;

        $i19 = $i18 + $i17;

        i24 = i23 + $i19;

        $z4 = staticinvoke <org.jdesktop.layout.Baseline: boolean isWindows()>();

        if $z4 == 0 goto label04;

        $i20 = virtualinvoke r0.<javax.swing.JTabbedPane: int getTabCount()>();

        if $i20 <= 1 goto label03;

        i24 = i24 + 1;

        goto label04;

     label03:
        $i28 = (int) -1;

        i24 = i24 + $i28;

     label04:
        return i24;

     label05:
        $i6 = virtualinvoke r0.<javax.swing.JTabbedPane: int getHeight()>();

        $i7 = $r1.<java.awt.Insets: int bottom>;

        $i9 = $i6 - $i7;

        $i8 = $r3.<java.awt.Insets: int bottom>;

        $i10 = $i9 - $i8;

        $i11 = $i10 - $i2;

        i25 = $i11 + i23;

        $z1 = staticinvoke <org.jdesktop.layout.Baseline: boolean isWindows()>();

        if $z1 == 0 goto label07;

        $i12 = virtualinvoke r0.<javax.swing.JTabbedPane: int getTabCount()>();

        if $i12 <= 1 goto label06;

        $i30 = (int) -1;

        i25 = i25 + $i30;

        goto label07;

     label06:
        i25 = i25 + 1;

     label07:
        return i25;

     label08:
        $z2 = staticinvoke <org.jdesktop.layout.Baseline: boolean isAqua()>();

        if $z2 == 0 goto label09;

        $i32 = (int) -1;

        return $i32;

     label09:
        $i14 = $r1.<java.awt.Insets: int top>;

        $i13 = $r3.<java.awt.Insets: int top>;

        $i15 = $i14 + $i13;

        i26 = i23 + $i15;

        $z3 = staticinvoke <org.jdesktop.layout.Baseline: boolean isWindows()>();

        if $z3 == 0 goto label10;

        $i16 = $i2 % 2;

        i26 = i26 + $i16;

     label10:
        return i26;

     label11:
        $i34 = (int) -1;

        return $i34;
    }

    private static int getAquaTabbedPaneBaseline(javax.swing.JTabbedPane, int)
    {
        byte b18, b19;
        javax.swing.JTabbedPane r0;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i21, $i23;
        java.awt.Font $r1, $r3, $r4;
        java.awt.FontMetrics $r2;

        r0 := @parameter0: javax.swing.JTabbedPane;

        i3 := @parameter1: int;

        $r1 = virtualinvoke r0.<javax.swing.JTabbedPane: java.awt.Font getFont()>();

        $r2 = virtualinvoke r0.<javax.swing.JTabbedPane: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r1);

        $i0 = virtualinvoke $r2.<java.awt.FontMetrics: int getAscent()>();

        $i1 = virtualinvoke r0.<javax.swing.JTabbedPane: int getTabPlacement()>();

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label6;
            case 3: goto label3;
            case 4: goto label6;
            default: goto label7;
        };

     label1:
        b18 = 5;

        $r4 = virtualinvoke r0.<javax.swing.JTabbedPane: java.awt.Font getFont()>();

        $i11 = virtualinvoke $r4.<java.awt.Font: int getSize()>();

        if $i11 <= 12 goto label2;

        b18 = 6;

     label2:
        $i12 = virtualinvoke $r2.<java.awt.FontMetrics: int getHeight()>();

        $i16 = 20 - $i12;

        $i17 = $i16 / 2;

        $i13 = b18 + $i17;

        $i14 = $i13 + $i0;

        $i15 = $i14 - 1;

        return $i15;

     label3:
        $r3 = virtualinvoke r0.<javax.swing.JTabbedPane: java.awt.Font getFont()>();

        $i2 = virtualinvoke $r3.<java.awt.Font: int getSize()>();

        if $i2 <= 12 goto label4;

        b19 = 6;

        goto label5;

     label4:
        b19 = 4;

     label5:
        $i4 = virtualinvoke $r2.<java.awt.FontMetrics: int getHeight()>();

        $i5 = 20 - $i4;

        $i6 = $i5 / 2;

        $i7 = $i6 + $i0;

        $i8 = 20 - $i7;

        $i9 = i3 - $i8;

        $i10 = $i9 - b19;

        return $i10;

     label6:
        $i21 = (int) -1;

        return $i21;

     label7:
        $i23 = (int) -1;

        return $i23;
    }

    private static int getSliderBaseline(javax.swing.JSlider, int)
    {
        java.lang.Integer $r6, $r11, $r13, r14;
        javax.swing.plaf.SliderUI $r8;
        long $l21, $l22, $l23;
        java.awt.FontMetrics $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.awt.Font $r1;
        javax.swing.Icon $r7, $r12;
        java.awt.Dimension $r9;
        javax.swing.JSlider r0;
        java.awt.Insets $r3, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, i47, i48, i49, i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, i62, i63, i64, $i65, i66, $i67, $i68, $i69, i70, i71, i72, i73, i74, $i76, $i78, $i80;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, d14;
        java.lang.Object $r4, $r10;

        r0 := @parameter0: javax.swing.JSlider;

        i7 := @parameter1: int;

        $z0 = virtualinvoke r0.<javax.swing.JSlider: boolean getPaintLabels()>();

        if $z0 == 0 goto label19;

        $z1 = staticinvoke <org.jdesktop.layout.Baseline: boolean isGTK()>();

        if $z1 != 0 goto label19;

        $z2 = staticinvoke <org.jdesktop.layout.Baseline: boolean isAqua()>();

        $r1 = virtualinvoke r0.<javax.swing.JSlider: java.awt.Font getFont()>();

        $r2 = virtualinvoke r0.<javax.swing.JSlider: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r1);

        $r3 = virtualinvoke r0.<javax.swing.JSlider: java.awt.Insets getInsets()>();

        $r4 = staticinvoke <javax.swing.UIManager: java.lang.Object get(java.lang.Object)>("Slider.focusInsets");

        r5 = (java.awt.Insets) $r4;

        $i0 = virtualinvoke r0.<javax.swing.JSlider: int getOrientation()>();

        if $i0 != 0 goto label09;

        i47 = 8;

        $i38 = $r3.<java.awt.Insets: int top>;

        $i40 = i7 - $i38;

        $i39 = $r3.<java.awt.Insets: int bottom>;

        $i42 = $i40 - $i39;

        $i41 = r5.<java.awt.Insets: int top>;

        $i44 = $i42 - $i41;

        $i43 = r5.<java.awt.Insets: int bottom>;

        i48 = $i44 - $i43;

        i49 = 20;

        $z5 = staticinvoke <org.jdesktop.layout.Baseline: boolean isMetal()>();

        if $z5 == 0 goto label01;

        $r10 = staticinvoke <javax.swing.UIManager: java.lang.Object get(java.lang.Object)>("Slider.majorTickLength");

        $r11 = (java.lang.Integer) $r10;

        $i46 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        i47 = $i46 + 5;

        $r12 = staticinvoke <javax.swing.UIManager: javax.swing.Icon getIcon(java.lang.Object)>("Slider.horizontalThumbIcon");

        i49 = interfaceinvoke $r12.<javax.swing.Icon: int getIconHeight()>();

        goto label02;

     label01:
        $z6 = staticinvoke <org.jdesktop.layout.Baseline: boolean isWindows()>();

        if $z6 == 0 goto label02;

        $z10 = staticinvoke <org.jdesktop.layout.Baseline: boolean isXP()>();

        if $z10 == 0 goto label02;

        i49 = 21;

     label02:
        i50 = i49;

        if $z2 != 0 goto label03;

        $z9 = virtualinvoke r0.<javax.swing.JSlider: boolean getPaintTicks()>();

        if $z9 == 0 goto label04;

     label03:
        i50 = i50 + i47;

     label04:
        $i51 = virtualinvoke $r2.<java.awt.FontMetrics: int getAscent()>();

        $i52 = virtualinvoke $r2.<java.awt.FontMetrics: int getDescent()>();

        $i53 = $i51 + $i52;

        $i54 = i50 + $i53;

        $i55 = $r3.<java.awt.Insets: int top>;

        $i56 = r5.<java.awt.Insets: int top>;

        $i57 = $i55 + $i56;

        $i58 = i48 - $i54;

        $i59 = $i58 - 1;

        $i60 = $i59 / 2;

        $i61 = $i57 + $i60;

        i62 = $i61;

        if $z2 == 0 goto label07;

        $z8 = virtualinvoke r0.<javax.swing.JSlider: boolean getPaintTicks()>();

        if $z8 == 0 goto label06;

        $r8 = virtualinvoke r0.<javax.swing.JSlider: javax.swing.plaf.SliderUI getUI()>();

        $r9 = virtualinvoke $r8.<javax.swing.plaf.SliderUI: java.awt.Dimension getPreferredSize(javax.swing.JComponent)>(r0);

        i63 = $r9.<java.awt.Dimension: int height>;

        i64 = i7 - i63;

        if i64 <= 0 goto label05;

        $i45 = staticinvoke <java.lang.Math: int min(int,int)>(1, i64);

        i62 = $i61 - $i45;

     label05:
        goto label07;

     label06:
        $i76 = (int) -1;

        i62 = $i61 + $i76;

     label07:
        $i65 = i62 + i49;

        i66 = i47;

        if $z2 != 0 goto label08;

        $z7 = virtualinvoke r0.<javax.swing.JSlider: boolean getPaintTicks()>();

        if $z7 != 0 goto label08;

        i66 = 0;

     label08:
        $i67 = $i65 + i66;

        $i68 = virtualinvoke $r2.<java.awt.FontMetrics: int getAscent()>();

        $i69 = $i67 + $i68;

        return $i69;

     label09:
        $z3 = virtualinvoke r0.<javax.swing.JSlider: boolean getInverted()>();

        if $z3 == 0 goto label10;

        $r13 = staticinvoke <org.jdesktop.layout.Baseline: java.lang.Integer getMinSliderValue(javax.swing.JSlider)>(r0);

        goto label11;

     label10:
        $r13 = staticinvoke <org.jdesktop.layout.Baseline: java.lang.Integer getMaxSliderValue(javax.swing.JSlider)>(r0);

     label11:
        r14 = $r13;

        if $r13 == null goto label19;

        i70 = 11;

        $z4 = staticinvoke <org.jdesktop.layout.Baseline: boolean isMetal()>();

        if $z4 == 0 goto label12;

        $r7 = staticinvoke <javax.swing.UIManager: javax.swing.Icon getIcon(java.lang.Object)>("Slider.verticalThumbIcon");

        i70 = interfaceinvoke $r7.<javax.swing.Icon: int getIconHeight()>();

     label12:
        $i1 = virtualinvoke $r2.<java.awt.FontMetrics: int getHeight()>();

        $i3 = $i1 / 2;

        $i2 = i70 / 2;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i2);

        $i6 = r5.<java.awt.Insets: int top>;

        $i5 = $r3.<java.awt.Insets: int top>;

        $i34 = $i6 + $i5;

        $i35 = $i34 + $i4;

        i71 = $i35;

        $i8 = r5.<java.awt.Insets: int top>;

        $i10 = i7 - $i8;

        $i9 = r5.<java.awt.Insets: int bottom>;

        $i12 = $i10 - $i9;

        $i11 = $r3.<java.awt.Insets: int top>;

        $i14 = $i12 - $i11;

        $i13 = $r3.<java.awt.Insets: int bottom>;

        $i15 = $i14 - $i13;

        $i16 = $i15 - $i4;

        $i36 = $i16 - $i4;

        $r6 = staticinvoke <org.jdesktop.layout.Baseline: java.lang.Integer getMaxSliderValue(javax.swing.JSlider)>(r0);

        virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $i17 = virtualinvoke r0.<javax.swing.JSlider: int getMinimum()>();

        $i18 = virtualinvoke r0.<javax.swing.JSlider: int getMaximum()>();

        $d1 = (double) $i18;

        $d0 = (double) $i17;

        $d12 = $d1 - $d0;

        $d2 = (double) $i36;

        $d13 = $d2 / $d12;

        $i19 = $i36 - 1;

        $i37 = $i35 + $i19;

        i72 = $i37;

        if $z2 == 0 goto label13;

        $i78 = (int) -3;

        i71 = $i35 + $i78;

        i72 = $i37 + 6;

     label13:
        i73 = i71;

        if $z3 != 0 goto label14;

        $d9 = (double) $i18;

        $i33 = virtualinvoke r14.<java.lang.Integer: int intValue()>();

        $d10 = (double) $i33;

        $d11 = $d9 - $d10;

        d14 = $d13 * $d11;

        goto label15;

     label14:
        $i20 = virtualinvoke r14.<java.lang.Integer: int intValue()>();

        $d4 = (double) $i20;

        $d3 = (double) $i17;

        $d5 = $d4 - $d3;

        d14 = $d13 * $d5;

     label15:
        if $z2 == 0 goto label16;

        $d6 = (double) i73;

        $d7 = staticinvoke <java.lang.Math: double floor(double)>(d14);

        $d8 = $d6 + $d7;

        i74 = (int) $d8;

        goto label17;

     label16:
        $l21 = (long) i73;

        $l22 = staticinvoke <java.lang.Math: long round(double)>(d14);

        $l23 = $l21 + $l22;

        i74 = (int) $l23;

     label17:
        $i24 = staticinvoke <java.lang.Math: int max(int,int)>(i71, i74);

        $i25 = staticinvoke <java.lang.Math: int min(int,int)>(i72, $i24);

        if $z2 == 0 goto label18;

        $i31 = virtualinvoke $r2.<java.awt.FontMetrics: int getAscent()>();

        $i32 = $i25 + $i31;

        return $i32;

     label18:
        $i26 = virtualinvoke $r2.<java.awt.FontMetrics: int getHeight()>();

        $i27 = $i26 / 2;

        $i28 = $i25 - $i27;

        $i29 = virtualinvoke $r2.<java.awt.FontMetrics: int getAscent()>();

        $i30 = $i28 + $i29;

        return $i30;

     label19:
        $i80 = (int) -1;

        return $i80;
    }

    private static java.lang.Integer getMaxSliderValue(javax.swing.JSlider)
    {
        java.util.Enumeration $r2;
        java.lang.Integer $r3, $r5;
        javax.swing.JSlider r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r4;
        java.util.Dictionary $r1;
        boolean $z0;

        r0 := @parameter0: javax.swing.JSlider;

        $r1 = virtualinvoke r0.<javax.swing.JSlider: java.util.Dictionary getLabelTable()>();

        if $r1 == null goto label4;

        $r2 = virtualinvoke $r1.<java.util.Dictionary: java.util.Enumeration keys()>();

        $i0 = virtualinvoke r0.<javax.swing.JSlider: int getMinimum()>();

        i4 = $i0 - 1;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r5 = (java.lang.Integer) $r4;

        $i3 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        i4 = staticinvoke <java.lang.Math: int max(int,int)>(i4, $i3);

        goto label1;

     label2:
        $i1 = virtualinvoke r0.<javax.swing.JSlider: int getMinimum()>();

        $i2 = $i1 - 1;

        if i4 != $i2 goto label3;

        return null;

     label3:
        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i4);

        return $r3;

     label4:
        return null;
    }

    private static java.lang.Integer getMinSliderValue(javax.swing.JSlider)
    {
        java.util.Enumeration $r2;
        java.lang.Integer $r3, $r5;
        javax.swing.JSlider r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r4;
        java.util.Dictionary $r1;
        boolean $z0;

        r0 := @parameter0: javax.swing.JSlider;

        $r1 = virtualinvoke r0.<javax.swing.JSlider: java.util.Dictionary getLabelTable()>();

        if $r1 == null goto label4;

        $r2 = virtualinvoke $r1.<java.util.Dictionary: java.util.Enumeration keys()>();

        $i0 = virtualinvoke r0.<javax.swing.JSlider: int getMaximum()>();

        i4 = $i0 + 1;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r5 = (java.lang.Integer) $r4;

        $i3 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i4, $i3);

        goto label1;

     label2:
        $i1 = virtualinvoke r0.<javax.swing.JSlider: int getMaximum()>();

        $i2 = $i1 + 1;

        if i4 != $i2 goto label3;

        return null;

     label3:
        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i4);

        return $r3;

     label4:
        return null;
    }

    private static int getProgressBarBaseline(javax.swing.JProgressBar, int)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.awt.Font $r1;
        java.awt.Insets $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i28, $i30, $i32, $i34, $i36;
        javax.swing.JProgressBar r0;
        java.awt.FontMetrics $r2;

        r0 := @parameter0: javax.swing.JProgressBar;

        i14 := @parameter1: int;

        $z0 = virtualinvoke r0.<javax.swing.JProgressBar: boolean isStringPainted()>();

        if $z0 == 0 goto label7;

        $i0 = virtualinvoke r0.<javax.swing.JProgressBar: int getOrientation()>();

        if $i0 != 0 goto label7;

        $r1 = virtualinvoke r0.<javax.swing.JProgressBar: java.awt.Font getFont()>();

        $r2 = virtualinvoke r0.<javax.swing.JProgressBar: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r1);

        $r3 = virtualinvoke r0.<javax.swing.JProgressBar: java.awt.Insets getInsets()>();

        i15 = $r3.<java.awt.Insets: int top>;

        $z1 = staticinvoke <org.jdesktop.layout.Baseline: boolean isWindows()>();

        if $z1 == 0 goto label2;

        $z5 = staticinvoke <org.jdesktop.layout.Baseline: boolean isXP()>();

        if $z5 == 0 goto label2;

        $z6 = virtualinvoke r0.<javax.swing.JProgressBar: boolean isIndeterminate()>();

        if $z6 == 0 goto label1;

        $i26 = (int) -1;

        i15 = $i26;

        $i28 = (int) -1;

        i16 = i14 + $i28;

        goto label6;

     label1:
        i15 = 0;

        $i30 = (int) -3;

        i16 = i14 + $i30;

        goto label6;

     label2:
        $z2 = staticinvoke <org.jdesktop.layout.Baseline: boolean isGTK()>();

        if $z2 == 0 goto label3;

        $i7 = virtualinvoke $r2.<java.awt.FontMetrics: int getAscent()>();

        $i8 = i14 - $i7;

        $i9 = virtualinvoke $r2.<java.awt.FontMetrics: int getDescent()>();

        $i10 = $i8 - $i9;

        $i11 = $i10 / 2;

        $i12 = virtualinvoke $r2.<java.awt.FontMetrics: int getAscent()>();

        $i13 = $i11 + $i12;

        return $i13;

     label3:
        $z3 = staticinvoke <org.jdesktop.layout.Baseline: boolean isAqua()>();

        if $z3 == 0 goto label5;

        $z4 = virtualinvoke r0.<javax.swing.JProgressBar: boolean isIndeterminate()>();

        if $z4 == 0 goto label4;

        $i32 = (int) -1;

        return $i32;

     label4:
        $i34 = (int) -1;

        i15 = i15 + $i34;

        $i5 = $r3.<java.awt.Insets: int top>;

        $i4 = $r3.<java.awt.Insets: int bottom>;

        $i6 = $i5 + $i4;

        i16 = i14 - $i6;

        goto label6;

     label5:
        $i2 = $r3.<java.awt.Insets: int top>;

        $i1 = $r3.<java.awt.Insets: int bottom>;

        $i3 = $i2 + $i1;

        i16 = i14 - $i3;

     label6:
        $i17 = virtualinvoke $r2.<java.awt.FontMetrics: int getAscent()>();

        $i18 = i16 + $i17;

        $i19 = virtualinvoke $r2.<java.awt.FontMetrics: int getLeading()>();

        $i20 = $i18 - $i19;

        $i21 = virtualinvoke $r2.<java.awt.FontMetrics: int getDescent()>();

        $i22 = $i20 - $i21;

        $i23 = $i22 / 2;

        $i24 = i15 + $i23;

        return $i24;

     label7:
        $i36 = (int) -1;

        return $i36;
    }

    private static int getTreeBaseline(javax.swing.JTree, int)
    {
        java.awt.Insets $r3;
        java.awt.Font $r2;
        javax.swing.Icon $r7;
        javax.swing.JTree r0;
        java.awt.Dimension $r4;
        javax.swing.JLabel $r1, $r5, $r6, $r8;
        int $i0, $i1, $i2, $i3, i4, i5;

        r0 := @parameter0: javax.swing.JTree;

        i4 := @parameter1: int;

        $i0 = virtualinvoke r0.<javax.swing.JTree: int getRowHeight()>();

        i5 = $i0;

        $r1 = <org.jdesktop.layout.Baseline: javax.swing.JLabel TREE_LABEL>;

        if $r1 != null goto label1;

        $r5 = new javax.swing.JLabel;

        specialinvoke $r5.<javax.swing.JLabel: void <init>(java.lang.String)>("X");

        <org.jdesktop.layout.Baseline: javax.swing.JLabel TREE_LABEL> = $r5;

        $r6 = <org.jdesktop.layout.Baseline: javax.swing.JLabel TREE_LABEL>;

        $r7 = staticinvoke <javax.swing.UIManager: javax.swing.Icon getIcon(java.lang.Object)>("Tree.closedIcon");

        virtualinvoke $r6.<javax.swing.JLabel: void setIcon(javax.swing.Icon)>($r7);

     label1:
        $r8 = <org.jdesktop.layout.Baseline: javax.swing.JLabel TREE_LABEL>;

        $r2 = virtualinvoke r0.<javax.swing.JTree: java.awt.Font getFont()>();

        virtualinvoke $r8.<javax.swing.JLabel: void setFont(java.awt.Font)>($r2);

        if $i0 > 0 goto label2;

        $r4 = virtualinvoke $r8.<javax.swing.JLabel: java.awt.Dimension getPreferredSize()>();

        i5 = $r4.<java.awt.Dimension: int height>;

     label2:
        $i1 = staticinvoke <org.jdesktop.layout.Baseline: int getLabelBaseline(javax.swing.JLabel,int)>($r8, i5);

        $r3 = virtualinvoke r0.<javax.swing.JTree: java.awt.Insets getInsets()>();

        $i2 = $r3.<java.awt.Insets: int top>;

        $i3 = $i1 + $i2;

        return $i3;
    }

    private static int getTableBaseline(javax.swing.JTable, int)
    {
        java.awt.Font $r2;
        javax.swing.JLabel $r0, $r3, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        javax.swing.JTable r1;
        javax.swing.border.EmptyBorder $r4;

        r1 := @parameter0: javax.swing.JTable;

        i6 := @parameter1: int;

        $r0 = <org.jdesktop.layout.Baseline: javax.swing.JLabel TABLE_LABEL>;

        if $r0 != null goto label1;

        $r3 = new javax.swing.JLabel;

        specialinvoke $r3.<javax.swing.JLabel: void <init>(java.lang.String)>("");

        <org.jdesktop.layout.Baseline: javax.swing.JLabel TABLE_LABEL> = $r3;

        $r5 = <org.jdesktop.layout.Baseline: javax.swing.JLabel TABLE_LABEL>;

        $r4 = new javax.swing.border.EmptyBorder;

        specialinvoke $r4.<javax.swing.border.EmptyBorder: void <init>(int,int,int,int)>(1, 1, 1, 1);

        virtualinvoke $r5.<javax.swing.JLabel: void setBorder(javax.swing.border.Border)>($r4);

     label1:
        $r6 = <org.jdesktop.layout.Baseline: javax.swing.JLabel TABLE_LABEL>;

        $r2 = virtualinvoke r1.<javax.swing.JTable: java.awt.Font getFont()>();

        virtualinvoke $r6.<javax.swing.JLabel: void setFont(java.awt.Font)>($r2);

        $i0 = virtualinvoke r1.<javax.swing.JTable: int getRowMargin()>();

        $i1 = virtualinvoke r1.<javax.swing.JTable: int getRowHeight()>();

        $i2 = $i1 - $i0;

        $i3 = staticinvoke <org.jdesktop.layout.Baseline: int getLabelBaseline(javax.swing.JLabel,int)>($r6, $i2);

        $i4 = $i0 / 2;

        $i5 = $i3 + $i4;

        return $i5;
    }

    private static int getTextAreaBaseline(javax.swing.JTextArea, int)
    {
        java.awt.Insets $r1;
        java.awt.Font $r2;
        java.awt.FontMetrics $r3;
        int $i0, $i1, $i2, i3;
        javax.swing.JTextArea r0;

        r0 := @parameter0: javax.swing.JTextArea;

        i3 := @parameter1: int;

        $r1 = virtualinvoke r0.<javax.swing.JTextArea: java.awt.Insets getInsets()>();

        $r2 = virtualinvoke r0.<javax.swing.JTextArea: java.awt.Font getFont()>();

        $r3 = virtualinvoke r0.<javax.swing.JTextArea: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r2);

        $i0 = $r1.<java.awt.Insets: int top>;

        $i1 = virtualinvoke $r3.<java.awt.FontMetrics: int getAscent()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    private static int getListBaseline(javax.swing.JList, int)
    {
        java.awt.Insets $r3;
        int $i0, $i1, $i2, $i3, i4, i5, $i7;
        java.awt.Font $r2;
        javax.swing.JList r0;
        java.awt.Dimension $r4;
        javax.swing.JLabel $r1, $r7, $r8, $r9;
        javax.swing.border.EmptyBorder $r10;

        r0 := @parameter0: javax.swing.JList;

        i4 := @parameter1: int;

        $i0 = virtualinvoke r0.<javax.swing.JList: int getFixedCellHeight()>();

        i5 = $i0;

        $r1 = <org.jdesktop.layout.Baseline: javax.swing.JLabel LIST_LABEL>;

        if $r1 != null goto label1;

        $r9 = new javax.swing.JLabel;

        specialinvoke $r9.<javax.swing.JLabel: void <init>(java.lang.String)>("X");

        <org.jdesktop.layout.Baseline: javax.swing.JLabel LIST_LABEL> = $r9;

        $r7 = <org.jdesktop.layout.Baseline: javax.swing.JLabel LIST_LABEL>;

        $r10 = new javax.swing.border.EmptyBorder;

        specialinvoke $r10.<javax.swing.border.EmptyBorder: void <init>(int,int,int,int)>(1, 1, 1, 1);

        virtualinvoke $r7.<javax.swing.JLabel: void setBorder(javax.swing.border.Border)>($r10);

     label1:
        $r8 = <org.jdesktop.layout.Baseline: javax.swing.JLabel LIST_LABEL>;

        $r2 = virtualinvoke r0.<javax.swing.JList: java.awt.Font getFont()>();

        virtualinvoke $r8.<javax.swing.JLabel: void setFont(java.awt.Font)>($r2);

        $i7 = (int) -1;

        if $i0 != $i7 goto label2;

        $r4 = virtualinvoke $r8.<javax.swing.JLabel: java.awt.Dimension getPreferredSize()>();

        i5 = $r4.<java.awt.Dimension: int height>;

     label2:
        $i1 = staticinvoke <org.jdesktop.layout.Baseline: int getLabelBaseline(javax.swing.JLabel,int)>($r8, i5);

        $r3 = virtualinvoke r0.<javax.swing.JList: java.awt.Insets getInsets()>();

        $i2 = $r3.<java.awt.Insets: int top>;

        $i3 = $i1 + $i2;

        return $i3;
    }

    private static int getScrollPaneBaseline(javax.swing.JScrollPane, int)
    {
        javax.swing.JComponent $r3;
        java.awt.Component $r2;
        javax.swing.JScrollPane r0;
        int $i0, $i1, $i2, i3, $i5;
        javax.swing.JViewport $r1, $r4;
        boolean $z0;

        r0 := @parameter0: javax.swing.JScrollPane;

        i3 := @parameter1: int;

        $r1 = virtualinvoke r0.<javax.swing.JScrollPane: javax.swing.JViewport getViewport()>();

        $r2 = virtualinvoke $r1.<javax.swing.JViewport: java.awt.Component getView()>();

        $z0 = $r2 instanceof javax.swing.JComponent;

        if $z0 == 0 goto label1;

        $r3 = (javax.swing.JComponent) $r2;

        $i0 = staticinvoke <org.jdesktop.layout.Baseline: int getBaseline(javax.swing.JComponent)>($r3);

        if $i0 <= 0 goto label1;

        $r4 = virtualinvoke r0.<javax.swing.JScrollPane: javax.swing.JViewport getViewport()>();

        $i1 = virtualinvoke $r4.<javax.swing.JViewport: int getY()>();

        $i2 = $i0 + $i1;

        return $i2;

     label1:
        $i5 = (int) -1;

        return $i5;
    }

    private static int getPanelBaseline(javax.swing.JPanel, int)
    {
        javax.swing.border.Border $r1, $r12;
        javax.swing.border.TitledBorder r2, $r8;
        boolean $z0, $z1;
        java.awt.Font $r6, $r9, r11, $r14;
        javax.swing.JPanel r0;
        java.awt.Insets r13;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, i43, i44, i45, $i47;
        java.lang.String $r3, $r4, $r5;
        java.awt.FontMetrics $r7;

        r0 := @parameter0: javax.swing.JPanel;

        i3 := @parameter1: int;

        $r1 = virtualinvoke r0.<javax.swing.JPanel: javax.swing.border.Border getBorder()>();

        $z0 = $r1 instanceof javax.swing.border.TitledBorder;

        if $z0 == 0 goto label10;

        r2 = (javax.swing.border.TitledBorder) $r1;

        $r3 = virtualinvoke r2.<javax.swing.border.TitledBorder: java.lang.String getTitle()>();

        if $r3 == null goto label10;

        $r4 = "";

        $r5 = virtualinvoke r2.<javax.swing.border.TitledBorder: java.lang.String getTitle()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label10;

        $r6 = virtualinvoke r2.<javax.swing.border.TitledBorder: java.awt.Font getTitleFont()>();

        r11 = $r6;

        if $r6 != null goto label01;

        $r9 = virtualinvoke r0.<javax.swing.JPanel: java.awt.Font getFont()>();

        r11 = $r9;

        if $r9 != null goto label01;

        $r14 = new java.awt.Font;

        specialinvoke $r14.<java.awt.Font: void <init>(java.lang.String,int,int)>("Dialog", 0, 12);

        r11 = $r14;

     label01:
        $r12 = virtualinvoke r2.<javax.swing.border.TitledBorder: javax.swing.border.Border getBorder()>();

        if $r12 == null goto label02;

        r13 = interfaceinvoke $r12.<javax.swing.border.Border: java.awt.Insets getBorderInsets(java.awt.Component)>(r0);

        goto label03;

     label02:
        r13 = <org.jdesktop.layout.Baseline: java.awt.Insets EMPTY_INSETS>;

     label03:
        $r7 = virtualinvoke r0.<javax.swing.JPanel: java.awt.FontMetrics getFontMetrics(java.awt.Font)>(r11);

        $i0 = virtualinvoke $r7.<java.awt.FontMetrics: int getHeight()>();

        $i1 = virtualinvoke $r7.<java.awt.FontMetrics: int getDescent()>();

        $i2 = virtualinvoke $r7.<java.awt.FontMetrics: int getAscent()>();

        $i42 = i3 - 4;

        $r8 = (javax.swing.border.TitledBorder) $r1;

        $i4 = virtualinvoke $r8.<javax.swing.border.TitledBorder: int getTitlePosition()>();

        tableswitch($i4)
        {
            case 0: goto label05;
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label07;
            case 5: goto label08;
            case 6: goto label09;
            default: goto label10;
        };

     label04:
        $i25 = $i2 + $i1;

        $i26 = staticinvoke <java.lang.Math: int max(int,int)>(2, 4);

        $i27 = $i26 - 2;

        i43 = $i25 + $i27;

        $i29 = 2 + i43;

        $i28 = $i1 + 2;

        $i30 = $i29 - $i28;

        return $i30;

     label05:
        $i31 = $i2 / 2;

        $i32 = $i31 + 2;

        $i33 = $i32 - 2;

        $i34 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i33);

        $i35 = 2 + $i34;

        $i40 = $i35 - $i1;

        $i36 = r13.<java.awt.Insets: int top>;

        $i37 = $i36 + $i2;

        $i38 = $i37 + $i1;

        $i39 = $i38 / 2;

        $i41 = $i40 + $i39;

        return $i41;

     label06:
        $i21 = r13.<java.awt.Insets: int top>;

        $i22 = 2 + $i21;

        $i23 = $i22 + $i2;

        $i24 = $i23 + 2;

        return $i24;

     label07:
        $i19 = 2 + $i42;

        $i16 = r13.<java.awt.Insets: int bottom>;

        $i17 = $i16 + $i1;

        $i18 = $i17 + 2;

        $i20 = $i19 - $i18;

        return $i20;

     label08:
        $i8 = $i0 / 2;

        i44 = $i42 - $i8;

        $i9 = 2 + i44;

        $i14 = $i9 - $i1;

        $i11 = $i2 + $i1;

        $i10 = r13.<java.awt.Insets: int bottom>;

        $i12 = $i11 - $i10;

        $i13 = $i12 / 2;

        $i15 = $i14 + $i13;

        return $i15;

     label09:
        i45 = $i42 - $i0;

        $i5 = 2 + i45;

        $i6 = $i5 + $i2;

        $i7 = $i6 + 2;

        return $i7;

     label10:
        $i47 = (int) -1;

        return $i47;
    }

    private static int getSpinnerBaseline(javax.swing.JSpinner, int)
    {
        java.awt.Insets $r2, $r6, $r7;
        javax.swing.JSpinner$DefaultEditor r8;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, $i15;
        boolean $z0;
        javax.swing.JComponent $r1;
        javax.swing.JSpinner r0;
        javax.swing.JFormattedTextField $r5;
        java.awt.Font $r3;
        java.awt.FontMetrics $r4;

        r0 := @parameter0: javax.swing.JSpinner;

        i12 := @parameter1: int;

        $r1 = virtualinvoke r0.<javax.swing.JSpinner: javax.swing.JComponent getEditor()>();

        $z0 = $r1 instanceof javax.swing.JSpinner$DefaultEditor;

        if $z0 == 0 goto label2;

        r8 = (javax.swing.JSpinner$DefaultEditor) $r1;

        $r5 = virtualinvoke r8.<javax.swing.JSpinner$DefaultEditor: javax.swing.JFormattedTextField getTextField()>();

        $r6 = virtualinvoke r0.<javax.swing.JSpinner: java.awt.Insets getInsets()>();

        $r7 = virtualinvoke r8.<javax.swing.JSpinner$DefaultEditor: java.awt.Insets getInsets()>();

        $i4 = $r6.<java.awt.Insets: int top>;

        $i3 = $r7.<java.awt.Insets: int top>;

        i5 = $i4 + $i3;

        $i6 = $r6.<java.awt.Insets: int bottom>;

        $i8 = i5 + $i6;

        $i7 = $r7.<java.awt.Insets: int bottom>;

        $i9 = $i8 + $i7;

        i13 = i12 - $i9;

        if i13 > 0 goto label1;

        $i15 = (int) -1;

        return $i15;

     label1:
        $i10 = staticinvoke <org.jdesktop.layout.Baseline: int getSingleLineTextBaseline(javax.swing.text.JTextComponent,int)>($r5, i13);

        $i11 = i5 + $i10;

        return $i11;

     label2:
        $r2 = virtualinvoke r0.<javax.swing.JSpinner: java.awt.Insets getInsets()>();

        $r3 = virtualinvoke r0.<javax.swing.JSpinner: java.awt.Font getFont()>();

        $r4 = virtualinvoke r0.<javax.swing.JSpinner: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r3);

        $i0 = $r2.<java.awt.Insets: int top>;

        $i1 = virtualinvoke $r4.<java.awt.FontMetrics: int getAscent()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    private static int getLabelBaseline(javax.swing.JLabel, int)
    {
        java.awt.Rectangle $r3, $r4, $r5, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        java.awt.Font $r1;
        javax.swing.Icon $r7;
        java.awt.FontMetrics $r2;
        javax.swing.JLabel r0;

        r0 := @parameter0: javax.swing.JLabel;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<javax.swing.JLabel: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<javax.swing.JLabel: javax.swing.Icon getIcon()>();

        goto label2;

     label1:
        $r7 = virtualinvoke r0.<javax.swing.JLabel: javax.swing.Icon getDisabledIcon()>();

     label2:
        $r1 = virtualinvoke r0.<javax.swing.JLabel: java.awt.Font getFont()>();

        $r2 = virtualinvoke r0.<javax.swing.JLabel: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r1);

        staticinvoke <org.jdesktop.layout.Baseline: void resetRects(javax.swing.JComponent,int)>(r0, i0);

        $i1 = virtualinvoke r0.<javax.swing.JLabel: int getVerticalAlignment()>();

        $i2 = virtualinvoke r0.<javax.swing.JLabel: int getHorizontalAlignment()>();

        $i3 = virtualinvoke r0.<javax.swing.JLabel: int getVerticalTextPosition()>();

        $i4 = virtualinvoke r0.<javax.swing.JLabel: int getHorizontalTextPosition()>();

        $r3 = <org.jdesktop.layout.Baseline: java.awt.Rectangle viewRect>;

        $r4 = <org.jdesktop.layout.Baseline: java.awt.Rectangle iconRect>;

        $r5 = <org.jdesktop.layout.Baseline: java.awt.Rectangle textRect>;

        $i5 = virtualinvoke r0.<javax.swing.JLabel: int getIconTextGap()>();

        staticinvoke <javax.swing.SwingUtilities: java.lang.String layoutCompoundLabel(javax.swing.JComponent,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)>(r0, $r2, "a", $r7, $i1, $i2, $i3, $i4, $r3, $r4, $r5, $i5);

        $r6 = <org.jdesktop.layout.Baseline: java.awt.Rectangle textRect>;

        $i6 = $r6.<java.awt.Rectangle: int y>;

        $i7 = virtualinvoke $r2.<java.awt.FontMetrics: int getAscent()>();

        $i8 = $i6 + $i7;

        return $i8;
    }

    private static int getComboBoxBaseline(javax.swing.JComboBox, int)
    {
        java.lang.Float $r6;
        byte $b7;
        javax.swing.JComboBox r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.awt.Font $r2;
        java.awt.Component $r8, $r9;
        float $f0;
        java.awt.Insets $r1;
        javax.swing.ComboBoxEditor $r7;
        javax.swing.JTextField r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, i10, i11, i12, i13, $i15, $i16, $i18;
        java.lang.String $r5;
        double $d0;
        javax.swing.ListCellRenderer $r11;
        java.awt.FontMetrics $r3;
        javax.swing.JLabel $r4;

        r0 := @parameter0: javax.swing.JComboBox;

        i10 := @parameter1: int;

        $r1 = virtualinvoke r0.<javax.swing.JComboBox: java.awt.Insets getInsets()>();

        i11 = $r1.<java.awt.Insets: int top>;

        $i1 = $r1.<java.awt.Insets: int top>;

        $i0 = $r1.<java.awt.Insets: int bottom>;

        $i2 = $i1 + $i0;

        i12 = i10 - $i2;

        $z0 = virtualinvoke r0.<javax.swing.JComboBox: boolean isEditable()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<javax.swing.JComboBox: javax.swing.ComboBoxEditor getEditor()>();

        if $r7 == null goto label1;

        $r8 = interfaceinvoke $r7.<javax.swing.ComboBoxEditor: java.awt.Component getEditorComponent()>();

        $z4 = $r8 instanceof javax.swing.JTextField;

        if $z4 == 0 goto label1;

        $r9 = interfaceinvoke $r7.<javax.swing.ComboBoxEditor: java.awt.Component getEditorComponent()>();

        r10 = (javax.swing.JTextField) $r9;

        $i8 = staticinvoke <org.jdesktop.layout.Baseline: int getSingleLineTextBaseline(javax.swing.text.JTextComponent,int)>(r10, i12);

        $i9 = i11 + $i8;

        return $i9;

     label1:
        $z5 = staticinvoke <org.jdesktop.layout.Baseline: boolean isMetal()>();

        if $z5 == 0 goto label2;

        $z3 = staticinvoke <org.jdesktop.layout.Baseline: boolean isOceanTheme()>();

        if $z3 == 0 goto label3;

        i11 = i11 + 2;

        $i15 = (int) -4;

        i12 = i12 + $i15;

        goto label3;

     label2:
        $z1 = staticinvoke <org.jdesktop.layout.Baseline: boolean isWindows()>();

        if $z1 == 0 goto label3;

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.version");

        if $r5 == null goto label3;

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r5);

        $f0 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        $d0 = (double) $f0;

        $b7 = $d0 cmpl 4.0;

        $i16 = (int) $b7;

        if $i16 <= 0 goto label3;

        i11 = i11 + 2;

        $i18 = (int) -4;

        i12 = i12 + $i18;

     label3:
        $r11 = virtualinvoke r0.<javax.swing.JComboBox: javax.swing.ListCellRenderer getRenderer()>();

        $z6 = $r11 instanceof javax.swing.JLabel;

        if $z6 == 0 goto label5;

        $r4 = (javax.swing.JLabel) $r11;

        $i5 = staticinvoke <org.jdesktop.layout.Baseline: int getLabelBaseline(javax.swing.JLabel,int)>($r4, i12);

        i13 = i11 + $i5;

        $z2 = staticinvoke <org.jdesktop.layout.Baseline: boolean isAqua()>();

        if $z2 == 0 goto label4;

        $i6 = i13 - 1;

        return $i6;

     label4:
        return i13;

     label5:
        $r2 = virtualinvoke r0.<javax.swing.JComboBox: java.awt.Font getFont()>();

        $r3 = virtualinvoke r0.<javax.swing.JComboBox: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r2);

        $i3 = virtualinvoke $r3.<java.awt.FontMetrics: int getAscent()>();

        $i4 = i11 + $i3;

        return $i4;
    }

    private static int getSingleLineTextBaseline(javax.swing.text.JTextComponent, int)
    {
        java.awt.Insets $r3;
        javax.swing.plaf.TextUI $r1;
        int $i0, i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, i10, i11, $i13;
        java.awt.Font $r5;
        javax.swing.text.JTextComponent r0;
        java.awt.FontMetrics $r6;
        javax.swing.text.View $r2, $r4;
        float $f0;

        r0 := @parameter0: javax.swing.text.JTextComponent;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<javax.swing.text.JTextComponent: javax.swing.plaf.TextUI getUI()>();

        $r2 = virtualinvoke $r1.<javax.swing.plaf.TextUI: javax.swing.text.View getRootView(javax.swing.text.JTextComponent)>(r0);

        $i0 = virtualinvoke $r2.<javax.swing.text.View: int getViewCount()>();

        if $i0 <= 0 goto label2;

        $r3 = virtualinvoke r0.<javax.swing.text.JTextComponent: java.awt.Insets getInsets()>();

        $i2 = $r3.<java.awt.Insets: int top>;

        $i4 = i1 - $i2;

        $i3 = $r3.<java.awt.Insets: int bottom>;

        i5 = $i4 - $i3;

        i10 = $r3.<java.awt.Insets: int top>;

        $r4 = virtualinvoke $r2.<javax.swing.text.View: javax.swing.text.View getView(int)>(0);

        $f0 = virtualinvoke $r4.<javax.swing.text.View: float getPreferredSpan(int)>(1);

        i6 = (int) $f0;

        if i5 == i6 goto label1;

        i11 = i5 - i6;

        $i8 = i11 / 2;

        i10 = i10 + $i8;

     label1:
        $r5 = virtualinvoke r0.<javax.swing.text.JTextComponent: java.awt.Font getFont()>();

        $r6 = virtualinvoke r0.<javax.swing.text.JTextComponent: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r5);

        $i7 = virtualinvoke $r6.<java.awt.FontMetrics: int getAscent()>();

        $i9 = i10 + $i7;

        return $i9;

     label2:
        $i13 = (int) -1;

        return $i13;
    }

    private static int getButtonBaseline(javax.swing.AbstractButton, int)
    {
        java.awt.Rectangle $r5, $r6, $r7, $r8, $r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;
        javax.swing.AbstractButton r0;
        java.lang.String $r3;
        boolean $z0, $z1;
        java.awt.Font $r1;
        javax.swing.Icon $r4;
        java.awt.FontMetrics $r2;

        r0 := @parameter0: javax.swing.AbstractButton;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<javax.swing.AbstractButton: java.awt.Font getFont()>();

        $r2 = virtualinvoke r0.<javax.swing.AbstractButton: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r1);

        staticinvoke <org.jdesktop.layout.Baseline: void resetRects(javax.swing.JComponent,int)>(r0, i0);

        $r3 = virtualinvoke r0.<javax.swing.AbstractButton: java.lang.String getText()>();

        if $r3 == null goto label1;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("<html>");

        if $z1 == 0 goto label1;

        $i14 = (int) -1;

        return $i14;

     label1:
        $r4 = virtualinvoke r0.<javax.swing.AbstractButton: javax.swing.Icon getIcon()>();

        $i1 = virtualinvoke r0.<javax.swing.AbstractButton: int getVerticalAlignment()>();

        $i2 = virtualinvoke r0.<javax.swing.AbstractButton: int getHorizontalAlignment()>();

        $i3 = virtualinvoke r0.<javax.swing.AbstractButton: int getVerticalTextPosition()>();

        $i4 = virtualinvoke r0.<javax.swing.AbstractButton: int getHorizontalTextPosition()>();

        $r5 = <org.jdesktop.layout.Baseline: java.awt.Rectangle viewRect>;

        $r6 = <org.jdesktop.layout.Baseline: java.awt.Rectangle iconRect>;

        $r7 = <org.jdesktop.layout.Baseline: java.awt.Rectangle textRect>;

        if $r3 != null goto label2;

        $i12 = 0;

        goto label3;

     label2:
        $i12 = virtualinvoke r0.<javax.swing.AbstractButton: int getIconTextGap()>();

     label3:
        staticinvoke <javax.swing.SwingUtilities: java.lang.String layoutCompoundLabel(javax.swing.JComponent,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)>(r0, $r2, "a", $r4, $i1, $i2, $i3, $i4, $r5, $r6, $r7, $i12);

        $z0 = staticinvoke <org.jdesktop.layout.Baseline: boolean isAqua()>();

        if $z0 == 0 goto label4;

        $r9 = <org.jdesktop.layout.Baseline: java.awt.Rectangle textRect>;

        $i8 = $r9.<java.awt.Rectangle: int y>;

        $i9 = virtualinvoke $r2.<java.awt.FontMetrics: int getAscent()>();

        $i10 = $i8 + $i9;

        $i11 = $i10 + 1;

        return $i11;

     label4:
        $r8 = <org.jdesktop.layout.Baseline: java.awt.Rectangle textRect>;

        $i5 = $r8.<java.awt.Rectangle: int y>;

        $i6 = virtualinvoke $r2.<java.awt.FontMetrics: int getAscent()>();

        $i7 = $i5 + $i6;

        return $i7;
    }

    private static void resetRects(javax.swing.JComponent, int)
    {
        java.awt.Rectangle $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.awt.Insets $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11;
        javax.swing.JComponent r0;

        r0 := @parameter0: javax.swing.JComponent;

        i7 := @parameter1: int;

        $r1 = virtualinvoke r0.<javax.swing.JComponent: java.awt.Insets getInsets()>();

        $r2 = <org.jdesktop.layout.Baseline: java.awt.Rectangle viewRect>;

        $i0 = $r1.<java.awt.Insets: int left>;

        $r2.<java.awt.Rectangle: int x> = $i0;

        $r3 = <org.jdesktop.layout.Baseline: java.awt.Rectangle viewRect>;

        $i1 = $r1.<java.awt.Insets: int top>;

        $r3.<java.awt.Rectangle: int y> = $i1;

        $r4 = <org.jdesktop.layout.Baseline: java.awt.Rectangle viewRect>;

        $i2 = virtualinvoke r0.<javax.swing.JComponent: int getWidth()>();

        $i4 = $r1.<java.awt.Insets: int right>;

        $r5 = <org.jdesktop.layout.Baseline: java.awt.Rectangle viewRect>;

        $i3 = $r5.<java.awt.Rectangle: int x>;

        $i5 = $i4 + $i3;

        $i6 = $i2 - $i5;

        $r4.<java.awt.Rectangle: int width> = $i6;

        $r7 = <org.jdesktop.layout.Baseline: java.awt.Rectangle viewRect>;

        $i9 = $r1.<java.awt.Insets: int bottom>;

        $r6 = <org.jdesktop.layout.Baseline: java.awt.Rectangle viewRect>;

        $i8 = $r6.<java.awt.Rectangle: int y>;

        $i10 = $i9 + $i8;

        $i11 = i7 - $i10;

        $r7.<java.awt.Rectangle: int height> = $i11;

        $r9 = <org.jdesktop.layout.Baseline: java.awt.Rectangle textRect>;

        $r10 = <org.jdesktop.layout.Baseline: java.awt.Rectangle textRect>;

        $r11 = <org.jdesktop.layout.Baseline: java.awt.Rectangle textRect>;

        $r8 = <org.jdesktop.layout.Baseline: java.awt.Rectangle textRect>;

        $r8.<java.awt.Rectangle: int height> = 0;

        $r11.<java.awt.Rectangle: int width> = 0;

        $r10.<java.awt.Rectangle: int y> = 0;

        $r9.<java.awt.Rectangle: int x> = 0;

        $r13 = <org.jdesktop.layout.Baseline: java.awt.Rectangle iconRect>;

        $r14 = <org.jdesktop.layout.Baseline: java.awt.Rectangle iconRect>;

        $r15 = <org.jdesktop.layout.Baseline: java.awt.Rectangle iconRect>;

        $r12 = <org.jdesktop.layout.Baseline: java.awt.Rectangle iconRect>;

        $r12.<java.awt.Rectangle: int height> = 0;

        $r15.<java.awt.Rectangle: int width> = 0;

        $r14.<java.awt.Rectangle: int y> = 0;

        $r13.<java.awt.Rectangle: int x> = 0;

        return;
    }

    private static boolean isOceanTheme()
    {
        java.lang.reflect.Field $r1;
        java.lang.Exception $r6;
        java.lang.Class $r0, $r4, $r7;
        java.lang.Object $r2;
        java.lang.String $r3, $r5;
        boolean $z0, $z1, $z2, $z3;

        $z0 = <org.jdesktop.layout.Baseline: boolean inSandbox>;

        if $z0 != 0 goto label6;

     label1:
        $r0 = <org.jdesktop.layout.Baseline: java.lang.Class class$javax$swing$plaf$metal$MetalLookAndFeel>;

        if $r0 != null goto label2;

        $r7 = staticinvoke <org.jdesktop.layout.Baseline: java.lang.Class class$(java.lang.String)>("javax.swing.plaf.metal.MetalLookAndFeel");

        <org.jdesktop.layout.Baseline: java.lang.Class class$javax$swing$plaf$metal$MetalLookAndFeel> = $r7;

        goto label3;

     label2:
        $r7 = <org.jdesktop.layout.Baseline: java.lang.Class class$javax$swing$plaf$metal$MetalLookAndFeel>;

     label3:
        $r1 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("currentTheme");

        virtualinvoke $r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r2 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r3 = "javax.swing.plaf.metal.OceanTheme";

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

     label4:
        return $z3;

     label5:
        $r6 := @caughtexception;

        <org.jdesktop.layout.Baseline: boolean inSandbox> = 1;

     label6:
        $z1 = <org.jdesktop.layout.Baseline: boolean checkedForOcean>;

        if $z1 != 0 goto label7;

        <org.jdesktop.layout.Baseline: boolean checkedForOcean> = 1;

        staticinvoke <org.jdesktop.layout.Baseline: void checkForOcean()>();

     label7:
        $z2 = <org.jdesktop.layout.Baseline: boolean usingOcean>;

        return $z2;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    private static void checkForOcean()
    {
        java.lang.NumberFormatException $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10;
        java.lang.String $r0, r2, r3;
        boolean $z0;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.specification.version");

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(46);

        $i8 = (int) -1;

        if $i0 == $i8 goto label03;

        r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i2 = $i0 + 1;

        $i3 = virtualinvoke $r0.<java.lang.String: int indexOf(int,int)>(46, $i2);

        $i10 = (int) -1;

        if $i3 != $i10 goto label01;

        $i5 = $i0 + 1;

        r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i5);

        goto label02;

     label01:
        $i4 = $i0 + 1;

        r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i4, $i3);

     label02:
        goto label04;

     label03:
        r2 = $r0;

        r3 = null;

     label04:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        if r3 == null goto label05;

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r3);

        goto label06;

     label05:
        $i6 = 0;

     label06:
        if $i1 > 1 goto label07;

        if $i6 <= 4 goto label08;

     label07:
        $z0 = 1;

        goto label09;

     label08:
        $z0 = 0;

     label09:
        <org.jdesktop.layout.Baseline: boolean usingOcean> = $z0;

     label10:
        goto label12;

     label11:
        $r1 := @caughtexception;

     label12:
        return;

        catch java.lang.NumberFormatException from label04 to label10 with label11;
    }

    private static boolean isWindows()
    {
        javax.swing.LookAndFeel $r0;
        boolean $z0;

        $r0 = staticinvoke <javax.swing.UIManager: javax.swing.LookAndFeel getLookAndFeel()>();

        $z0 = staticinvoke <org.jdesktop.layout.Baseline: boolean isWindows(javax.swing.LookAndFeel)>($r0);

        return $z0;
    }

    private static boolean isWindows(javax.swing.LookAndFeel)
    {
        javax.swing.LookAndFeel r0;
        java.lang.Class $r2, $r3, $r5;
        java.lang.ClassNotFoundException $r4;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: javax.swing.LookAndFeel;

        $r1 = virtualinvoke r0.<javax.swing.LookAndFeel: java.lang.String getID()>();

        if $r1 != "Windows" goto label1;

        return 1;

     label1:
        $z0 = <org.jdesktop.layout.Baseline: boolean checkedForWindows>;

        if $z0 != 0 goto label6;

     label2:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");

        <org.jdesktop.layout.Baseline: java.lang.Class WINDOWS_CLASS> = $r3;

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        <org.jdesktop.layout.Baseline: boolean checkedForWindows> = 1;

     label6:
        $r5 = <org.jdesktop.layout.Baseline: java.lang.Class WINDOWS_CLASS>;

        if $r5 == null goto label7;

        $r2 = <org.jdesktop.layout.Baseline: java.lang.Class WINDOWS_CLASS>;

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z1 == 0 goto label7;

        $z2 = 1;

        goto label8;

     label7:
        $z2 = 0;

     label8:
        return $z2;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
    }

    private static boolean isMetal()
    {
        javax.swing.LookAndFeel $r0;
        boolean $z0;

        $r0 = staticinvoke <javax.swing.UIManager: javax.swing.LookAndFeel getLookAndFeel()>();

        $z0 = staticinvoke <org.jdesktop.layout.Baseline: boolean isMetal(javax.swing.LookAndFeel)>($r0);

        return $z0;
    }

    private static boolean isMetal(javax.swing.LookAndFeel)
    {
        javax.swing.LookAndFeel r0;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @parameter0: javax.swing.LookAndFeel;

        $r1 = virtualinvoke r0.<javax.swing.LookAndFeel: java.lang.String getID()>();

        if $r1 == "Metal" goto label1;

        $z0 = r0 instanceof javax.swing.plaf.metal.MetalLookAndFeel;

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static boolean isGTK()
    {
        javax.swing.LookAndFeel $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 = staticinvoke <javax.swing.UIManager: javax.swing.LookAndFeel getLookAndFeel()>();

        $r1 = virtualinvoke $r0.<javax.swing.LookAndFeel: java.lang.String getID()>();

        if $r1 != "GTK" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isAqua()
    {
        javax.swing.LookAndFeel $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 = staticinvoke <javax.swing.UIManager: javax.swing.LookAndFeel getLookAndFeel()>();

        $r1 = virtualinvoke $r0.<javax.swing.LookAndFeel: java.lang.String getID()>();

        if $r1 != "Aqua" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isXP()
    {
        javax.swing.LookAndFeel $r3;
        java.lang.Boolean $r4, r8;
        java.lang.Object $r1;
        java.lang.Class $r2, $r5, $r7;
        java.lang.ClassNotFoundException $r6;
        boolean $z0, $z1, $z2;
        java.awt.Toolkit $r0;

        $z0 = <org.jdesktop.layout.Baseline: boolean checkedForClassic>;

        if $z0 != 0 goto label5;

     label1:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel");

        <org.jdesktop.layout.Baseline: java.lang.Class CLASSIC_WINDOWS> = $r5;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        <org.jdesktop.layout.Baseline: boolean checkedForClassic> = 1;

     label5:
        $r7 = <org.jdesktop.layout.Baseline: java.lang.Class CLASSIC_WINDOWS>;

        if $r7 == null goto label6;

        $r2 = <org.jdesktop.layout.Baseline: java.lang.Class CLASSIC_WINDOWS>;

        $r3 = staticinvoke <javax.swing.UIManager: javax.swing.LookAndFeel getLookAndFeel()>();

        $z2 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>($r3);

        if $z2 == 0 goto label6;

        return 0;

     label6:
        $r0 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r1 = virtualinvoke $r0.<java.awt.Toolkit: java.lang.Object getDesktopProperty(java.lang.String)>("win.xpstyle.themeActive");

        $r4 = (java.lang.Boolean) $r1;

        r8 = $r4;

        if $r4 != null goto label7;

        r8 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label7:
        $z1 = virtualinvoke r8.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    protected void <init>()
    {
        org.jdesktop.layout.Baseline r0;

        r0 := @this: org.jdesktop.layout.Baseline;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getComponentBaseline(javax.swing.JComponent, int, int)
    {
        javax.swing.JComponent r1;
        int i0, i1, $i3;
        org.jdesktop.layout.Baseline r0;

        r0 := @this: org.jdesktop.layout.Baseline;

        r1 := @parameter0: javax.swing.JComponent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = (int) -1;

        return $i3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.awt.Rectangle $r1, $r2, $r3;
        java.awt.Insets $r4;
        java.lang.NoSuchMethodException $r19;
        java.util.HashMap $r5, $r7;
        java.lang.NoSuchFieldException $r17;
        java.util.Map $r6, $r8;
        java.lang.reflect.Method r21, r22;
        boolean $z0, $z1;
        java.lang.IllegalAccessException $r16;
        java.lang.Class[] $r10, $r14;
        java.lang.Class $r0, $r9, $r11, $r12, $r13, $r15, $r20, $r27, $r28;
        java.lang.ClassNotFoundException $r18;
        java.lang.Object r23, r24, r25, r26;

        <org.jdesktop.layout.Baseline: int TEXT_SPACING> = 2;

        <org.jdesktop.layout.Baseline: int EDGE_SPACING> = 2;

        <org.jdesktop.layout.Baseline: int BRB_OTHER> = 4;

        <org.jdesktop.layout.Baseline: int BRB_CENTER_OFFSET> = 3;

        <org.jdesktop.layout.Baseline: int BRB_CONSTANT_DESCENT> = 2;

        <org.jdesktop.layout.Baseline: int BRB_CONSTANT_ASCENT> = 1;

        <org.jdesktop.layout.Baseline: int BRB_NONE> = 0;

        $r0 = <org.jdesktop.layout.Baseline: java.lang.Class class$org$jdesktop$layout$Baseline>;

        if $r0 != null goto label01;

        $r20 = staticinvoke <org.jdesktop.layout.Baseline: java.lang.Class class$(java.lang.String)>("org.jdesktop.layout.Baseline");

        <org.jdesktop.layout.Baseline: java.lang.Class class$org$jdesktop$layout$Baseline> = $r20;

        goto label02;

     label01:
        $r20 = <org.jdesktop.layout.Baseline: java.lang.Class class$org$jdesktop$layout$Baseline>;

     label02:
        $z0 = virtualinvoke $r20.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        <org.jdesktop.layout.Baseline: boolean $assertionsDisabled> = $z1;

        $r1 = new java.awt.Rectangle;

        specialinvoke $r1.<java.awt.Rectangle: void <init>()>();

        <org.jdesktop.layout.Baseline: java.awt.Rectangle viewRect> = $r1;

        $r2 = new java.awt.Rectangle;

        specialinvoke $r2.<java.awt.Rectangle: void <init>()>();

        <org.jdesktop.layout.Baseline: java.awt.Rectangle textRect> = $r2;

        $r3 = new java.awt.Rectangle;

        specialinvoke $r3.<java.awt.Rectangle: void <init>()>();

        <org.jdesktop.layout.Baseline: java.awt.Rectangle iconRect> = $r3;

        $r4 = new java.awt.Insets;

        specialinvoke $r4.<java.awt.Insets: void <init>(int,int,int,int)>(0, 0, 0, 0);

        <org.jdesktop.layout.Baseline: java.awt.Insets EMPTY_INSETS> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>(int)>(1);

        $r6 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r5);

        <org.jdesktop.layout.Baseline: java.util.Map BASELINE_MAP> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>(int)>(1);

        $r8 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r7);

        <org.jdesktop.layout.Baseline: java.util.Map BRB_I_MAP> = $r8;

        r21 = null;

        r22 = null;

        r23 = null;

        r24 = null;

        r25 = null;

        r26 = null;

     label05:
        $r9 = <org.jdesktop.layout.Baseline: java.lang.Class class$java$awt$Component>;

        if $r9 != null goto label06;

        $r27 = staticinvoke <org.jdesktop.layout.Baseline: java.lang.Class class$(java.lang.String)>("java.awt.Component");

        <org.jdesktop.layout.Baseline: java.lang.Class class$java$awt$Component> = $r27;

        goto label07;

     label06:
        $r27 = <org.jdesktop.layout.Baseline: java.lang.Class class$java$awt$Component>;

     label07:
        $r10 = newarray (java.lang.Class)[2];

        $r11 = <java.lang.Integer: java.lang.Class TYPE>;

        $r10[0] = $r11;

        $r12 = <java.lang.Integer: java.lang.Class TYPE>;

        $r10[1] = $r12;

        r21 = virtualinvoke $r27.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getBaseline", $r10);

        $r13 = <org.jdesktop.layout.Baseline: java.lang.Class class$java$awt$Component>;

        if $r13 != null goto label08;

        $r28 = staticinvoke <org.jdesktop.layout.Baseline: java.lang.Class class$(java.lang.String)>("java.awt.Component");

        <org.jdesktop.layout.Baseline: java.lang.Class class$java$awt$Component> = $r28;

        goto label09;

     label08:
        $r28 = <org.jdesktop.layout.Baseline: java.lang.Class class$java$awt$Component>;

     label09:
        $r14 = newarray (java.lang.Class)[0];

        r22 = virtualinvoke $r28.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getBaselineResizeBehavior", $r14);

        $r15 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.awt.Component$BaselineResizeBehavior");

        r23 = staticinvoke <org.jdesktop.layout.Baseline: java.lang.Object getFieldValue(java.lang.Class,java.lang.String)>($r15, "CENTER_OFFSET");

        r24 = staticinvoke <org.jdesktop.layout.Baseline: java.lang.Object getFieldValue(java.lang.Class,java.lang.String)>($r15, "CONSTANT_ASCENT");

        r25 = staticinvoke <org.jdesktop.layout.Baseline: java.lang.Object getFieldValue(java.lang.Class,java.lang.String)>($r15, "CONSTANT_DESCENT");

        r26 = staticinvoke <org.jdesktop.layout.Baseline: java.lang.Object getFieldValue(java.lang.Class,java.lang.String)>($r15, "OTHER");

     label10:
        goto label15;

     label11:
        $r19 := @caughtexception;

        goto label15;

     label12:
        $r18 := @caughtexception;

        goto label15;

     label13:
        $r17 := @caughtexception;

        goto label15;

     label14:
        $r16 := @caughtexception;

     label15:
        if r21 == null goto label16;

        if r22 == null goto label16;

        if r23 == null goto label16;

        if r25 == null goto label16;

        if r24 == null goto label16;

        if r26 != null goto label17;

     label16:
        r22 = null;

        r21 = null;

        r26 = null;

        r25 = null;

        r24 = null;

        r23 = null;

     label17:
        <org.jdesktop.layout.Baseline: java.lang.reflect.Method COMPONENT_BASELINE_METHOD> = r21;

        <org.jdesktop.layout.Baseline: java.lang.reflect.Method COMPONENT_BRB_METHOD> = r22;

        <org.jdesktop.layout.Baseline: java.lang.Object ENUM_BRB_CENTER_OFFSET> = r23;

        <org.jdesktop.layout.Baseline: java.lang.Object ENUM_BRB_CONSTANT_ASCENT> = r24;

        <org.jdesktop.layout.Baseline: java.lang.Object ENUM_BRB_CONSTANT_DESCENT> = r25;

        <org.jdesktop.layout.Baseline: java.lang.Object ENUM_BRB_OTHER> = r26;

        return;

        catch java.lang.NoSuchMethodException from label05 to label10 with label11;
        catch java.lang.ClassNotFoundException from label05 to label10 with label12;
        catch java.lang.NoSuchFieldException from label05 to label10 with label13;
        catch java.lang.IllegalAccessException from label05 to label10 with label14;
    }
}
