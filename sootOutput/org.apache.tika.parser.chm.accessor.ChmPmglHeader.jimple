public class org.apache.tika.parser.chm.accessor.ChmPmglHeader extends java.lang.Object implements org.apache.tika.parser.chm.accessor.ChmAccessor
{
    private static final long serialVersionUID;
    private byte[] signature;
    private long free_space;
    private long unknown_0008;
    private int block_prev;
    private int block_next;
    private int dataRemained;
    private int currentPlace;

    public void <init>()
    {
        byte[] $r2;
        java.lang.String $r1;
        java.lang.AssertionError $r4;
        java.io.UnsupportedEncodingException $r3;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int currentPlace> = 0;

     label1:
        $r1 = "PMGL";

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: byte[] signature> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("UTF-8 not supported.");

        throw $r4;

     label4:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private int getDataRemained()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int dataRemained>;

        return $i0;
    }

    private void setDataRemained(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int dataRemained> = i0;

        return;
    }

    private int getCurrentPlace()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int currentPlace>;

        return $i0;
    }

    private void setCurrentPlace(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int currentPlace> = i0;

        return;
    }

    public long getFreeSpace()
    {
        long $l0;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: long free_space>;

        return $l0;
    }

    public void setFreeSpace(long)
    {
        long l0;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: long free_space> = l0;

        return;
    }

    public java.lang.String toString()
    {
        byte[] $r5;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r4;
        java.lang.StringBuilder $r0, $r1, $r2, $r6, $r7, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r24, $r25, $r26, $r28;
        java.io.UnsupportedEncodingException $r31;
        long $l0, $l1;
        java.lang.AssertionError $r32;
        int $i2, $i3;
        java.lang.String $r3, $r8, $r13, $r18, $r23, $r27, $r29, $r30;

        r4 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("signatute:=");

        $r3 = new java.lang.String;

        $r5 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: byte[] getSignature()>();

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, "UTF-8");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label2:
        goto label4;

     label3:
        $r31 := @caughtexception;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>("UTF-8 not supported.");

        throw $r32;

     label4:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("free space:=");

        $l0 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: long getFreeSpace()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown0008:=");

        $l1 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: long getUnknown0008()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prev block:=");

        $i2 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getBlockPrev()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("next block:=");

        $i3 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getBlockNext()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r27 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r30 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r30;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    protected void unmarshalCharArray(byte[], org.apache.tika.parser.chm.accessor.ChmPmglHeader, int) throws org.apache.tika.exception.TikaException
    {
        byte[] r0, $r3;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r1, r2;
        int $i0, i1, $i2, $i3, $i4, $i5;

        r1 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        r0 := @parameter0: byte[];

        r2 := @parameter1: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        i1 := @parameter2: int;

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertByteArrayNotNull(byte[])>(r0);

        $i0 = lengthof r0;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: void setDataRemained(int)>($i0);

        $r3 = r2.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: byte[] signature>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r3, 0, i1);

        $i2 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getCurrentPlace()>();

        $i3 = $i2 + i1;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: void setCurrentPlace(int)>($i3);

        $i4 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getDataRemained()>();

        $i5 = $i4 - i1;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: void setDataRemained(int)>($i5);

        return;
    }

    private int unmarshalInt32(byte[], int) throws org.apache.tika.exception.TikaException
    {
        byte[] r0;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r1;
        byte $b2, $b5, $b10, $b15;
        org.apache.tika.exception.TikaException $r3;
        int $i0, $i1, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, i21, i22, $i23, $i24, $i25, $i26;

        r1 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        r0 := @parameter0: byte[];

        i21 := @parameter1: int;

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertByteArrayNotNull(byte[])>(r0);

        $i0 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getDataRemained()>();

        if 4 <= $i0 goto label1;

        $r3 = new org.apache.tika.exception.TikaException;

        specialinvoke $r3.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("4 > dataLenght");

        throw $r3;

     label1:
        $i1 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getCurrentPlace()>();

        $b2 = r0[$i1];

        $i3 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getCurrentPlace()>();

        $i4 = $i3 + 1;

        $b5 = r0[$i4];

        $i23 = (int) $b5;

        $i6 = $i23 << 8;

        $i24 = (int) $b2;

        $i7 = $i24 | $i6;

        $i8 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getCurrentPlace()>();

        $i9 = $i8 + 2;

        $b10 = r0[$i9];

        $i25 = (int) $b10;

        $i11 = $i25 << 16;

        $i12 = $i7 | $i11;

        $i13 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getCurrentPlace()>();

        $i14 = $i13 + 3;

        $b15 = r0[$i14];

        $i26 = (int) $b15;

        $i16 = $i26 << 24;

        i22 = $i12 | $i16;

        $i17 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getCurrentPlace()>();

        $i18 = $i17 + 4;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: void setCurrentPlace(int)>($i18);

        $i19 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getDataRemained()>();

        $i20 = $i19 - 4;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: void setDataRemained(int)>($i20);

        return i22;
    }

    private long unmarshalUInt32(byte[], long) throws org.apache.tika.parser.chm.exception.ChmParsingException
    {
        byte[] r0;
        long l22, l23;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r1;
        org.apache.tika.parser.chm.exception.ChmParsingException $r3;
        byte $b2, $b5, $b10, $b15;
        int $i0, $i1, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i24, $i25, $i26, $i27;

        r1 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        r0 := @parameter0: byte[];

        l22 := @parameter1: long;

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertByteArrayNotNull(byte[])>(r0);

        $i0 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getDataRemained()>();

        if 4 <= $i0 goto label1;

        $r3 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r3.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("4 > dataLenght");

        throw $r3;

     label1:
        $i1 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getCurrentPlace()>();

        $b2 = r0[$i1];

        $i3 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getCurrentPlace()>();

        $i4 = $i3 + 1;

        $b5 = r0[$i4];

        $i24 = (int) $b5;

        $i6 = $i24 << 8;

        $i25 = (int) $b2;

        $i7 = $i25 | $i6;

        $i8 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getCurrentPlace()>();

        $i9 = $i8 + 2;

        $b10 = r0[$i9];

        $i26 = (int) $b10;

        $i11 = $i26 << 16;

        $i12 = $i7 | $i11;

        $i13 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getCurrentPlace()>();

        $i14 = $i13 + 3;

        $b15 = r0[$i14];

        $i27 = (int) $b15;

        $i16 = $i27 << 24;

        $i17 = $i12 | $i16;

        l23 = (long) $i17;

        $i18 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getDataRemained()>();

        $i19 = $i18 - 4;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: void setDataRemained(int)>($i19);

        $i20 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getCurrentPlace()>();

        $i21 = $i20 + 4;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: void setCurrentPlace(int)>($i21);

        return l23;
    }

    public void parse(byte[], org.apache.tika.parser.chm.accessor.ChmPmglHeader) throws org.apache.tika.exception.TikaException
    {
        byte[] r0, $r3;
        long $l1, $l2, $l3, $l4;
        java.lang.AssertionError $r19;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r1, r20;
        org.apache.tika.parser.chm.exception.ChmParsingException $r4;
        org.apache.tika.exception.TikaException $r11;
        int $i0, $i5, $i6, $i7, $i8;
        java.lang.String $r2, $r7, $r10, $r14, $r17;
        boolean $z0;
        java.lang.StringBuilder $r5, $r8, $r9, $r12, $r15, $r16;
        java.lang.Class $r6, $r13;
        java.io.UnsupportedEncodingException $r18;

        r20 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        $i0 = lengthof r0;

        if $i0 >= 20 goto label1;

        $r11 = new org.apache.tika.exception.TikaException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = class "Lorg/apache/tika/parser/chm/accessor/ChmPmglHeader;";

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" we only know how to deal with a 0x14 byte structures");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label1:
        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: void unmarshalCharArray(byte[],org.apache.tika.parser.chm.accessor.ChmPmglHeader,int)>(r0, r1, 4);

        $l1 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: long getFreeSpace()>();

        $l2 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: long unmarshalUInt32(byte[],long)>(r0, $l1);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: void setFreeSpace(long)>($l2);

        $l3 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: long getUnknown0008()>();

        $l4 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: long unmarshalUInt32(byte[],long)>(r0, $l3);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: void setUnknown0008(long)>($l4);

        $i5 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getBlockPrev()>();

        $i6 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int unmarshalInt32(byte[],int)>(r0, $i5);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: void setBlockPrev(int)>($i6);

        $i7 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int getBlockNext()>();

        $i8 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int unmarshalInt32(byte[],int)>(r0, $i7);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: void setBlockNext(int)>($i8);

     label2:
        $r2 = new java.lang.String;

        $r3 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: byte[] getSignature()>();

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r3, "UTF-8");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("PMGL");

        if $z0 != 0 goto label3;

        $r4 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = class "Lorg/apache/tika/parser/chm/accessor/ChmPmglHeader;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pmgl != pmgl.signature");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label3:
        goto label5;

     label4:
        $r18 := @caughtexception;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>("UTF-8 not supported.");

        throw $r19;

     label5:
        return;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }

    public byte[] getSignature()
    {
        byte[] $r1;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        $r1 = r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: byte[] signature>;

        return $r1;
    }

    protected void setSignature(byte[])
    {
        byte[] r1;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        r1 := @parameter0: byte[];

        r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: byte[] signature> = r1;

        return;
    }

    public long getUnknown0008()
    {
        long $l0;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: long unknown_0008>;

        return $l0;
    }

    protected void setUnknown0008(long)
    {
        long l0;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: long unknown_0008> = l0;

        return;
    }

    public int getBlockPrev()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int block_prev>;

        return $i0;
    }

    protected void setBlockPrev(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int block_prev> = i0;

        return;
    }

    public int getBlockNext()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int block_next>;

        return $i0;
    }

    protected void setBlockNext(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: int block_next> = i0;

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        return;
    }

    public volatile void parse(byte[], java.lang.Object) throws org.apache.tika.exception.TikaException
    {
        byte[] r1;
        java.lang.Object r2;
        org.apache.tika.parser.chm.accessor.ChmPmglHeader r0, $r3;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmglHeader;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.Object;

        $r3 = (org.apache.tika.parser.chm.accessor.ChmPmglHeader) r2;

        virtualinvoke r0.<org.apache.tika.parser.chm.accessor.ChmPmglHeader: void parse(byte[],org.apache.tika.parser.chm.accessor.ChmPmglHeader)>(r1, $r3);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.tika.parser.chm.accessor.ChmPmglHeader: long serialVersionUID> = -6139486487475923593L;

        return;
    }
}
