public class org.codehaus.jackson.map.deser.std.StdDeserializer$StackTraceElementDeserializer extends org.codehaus.jackson.map.deser.std.StdScalarDeserializer
{

    public void <init>()
    {
        org.codehaus.jackson.map.deser.std.StdDeserializer$StackTraceElementDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer$StackTraceElementDeserializer;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.StdScalarDeserializer: void <init>(java.lang.Class)>(class "Ljava/lang/StackTraceElement;");

        return;
    }

    public java.lang.StackTraceElement deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r7, $r8;
        org.codehaus.jackson.map.deser.std.StdDeserializer$StackTraceElementDeserializer r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r18, $r19, $r20, $r26;
        org.codehaus.jackson.map.DeserializationContext r3;
        org.codehaus.jackson.map.JsonMappingException $r6, $r22;
        int i0, $i2;
        java.lang.StackTraceElement $r27;
        java.lang.String $r10, $r11, $r12, $r13, $r14, $r15, $r21, r23, r24, r25;
        org.codehaus.jackson.JsonParser r0;
        java.lang.Class $r5, $r16;

        r4 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer$StackTraceElementDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r3 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r1 != $r2 goto label10;

        r23 = "";

        r24 = "";

        r25 = "";

        $i2 = (int) -1;

        i0 = $i2;

     label01:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextValue()>();

        $r8 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        if $r7 == $r8 goto label09;

        $r10 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getCurrentName()>();

        $r11 = "className";

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label02;

        r23 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        goto label08;

     label02:
        $r12 = "fileName";

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label03;

        r25 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        goto label08;

     label03:
        $r13 = "lineNumber";

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label05;

        $z5 = virtualinvoke $r7.<org.codehaus.jackson.JsonToken: boolean isNumeric()>();

        if $z5 == 0 goto label04;

        i0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        goto label08;

     label04:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-numeric token (");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") for property \'lineNumber\'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException 'from'(org.codehaus.jackson.JsonParser,java.lang.String)>(r0, $r21);

        throw $r22;

     label05:
        $r14 = "methodName";

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label06;

        r24 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        goto label08;

     label06:
        $r15 = "nativeMethod";

        $z4 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z4 == 0 goto label07;

        goto label08;

     label07:
        $r16 = r4.<org.codehaus.jackson.map.deser.std.StdDeserializer$StackTraceElementDeserializer: java.lang.Class _valueClass>;

        virtualinvoke r4.<org.codehaus.jackson.map.deser.std.StdDeserializer$StackTraceElementDeserializer: void handleUnknownProperty(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,java.lang.Object,java.lang.String)>(r0, r3, $r16, $r10);

     label08:
        goto label01;

     label09:
        $r27 = new java.lang.StackTraceElement;

        specialinvoke $r27.<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>(r23, r24, r25, i0);

        return $r27;

     label10:
        $r5 = r4.<org.codehaus.jackson.map.deser.std.StdDeserializer$StackTraceElementDeserializer: java.lang.Class _valueClass>;

        $r6 = virtualinvoke r3.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r5, $r1);

        throw $r6;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.std.StdDeserializer$StackTraceElementDeserializer r0;
        java.lang.StackTraceElement $r3;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer$StackTraceElementDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.StdDeserializer$StackTraceElementDeserializer: java.lang.StackTraceElement deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }
}
