public final class org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs extends org.apache.lucene.util.fst.Outputs
{
    private static final java.lang.Long NO_OUTPUT;
    private final boolean doShare;
    private static final org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs singletonShare;
    private static final org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs singletonNoShare;
    static final boolean $assertionsDisabled;

    private void <init>(boolean)
    {
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r0;
        boolean z0;

        r0 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.lucene.util.fst.Outputs: void <init>()>();

        r0.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean doShare> = z0;

        return;
    }

    public static org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs getSingleton(boolean)
    {
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r0 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs singletonShare>;

        goto label2;

     label1:
        $r0 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs singletonNoShare>;

     label2:
        return $r0;
    }

    public java.lang.Long get(long)
    {
        byte $b1;
        java.lang.Long $r0, $r1;
        long l0;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r2;

        r2 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r1 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        return $r1;

     label1:
        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        return $r0;
    }

    public org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs get(long, long)
    {
        long l0, l1;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r1;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs $r0;

        r1 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r0 = new org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs;

        specialinvoke $r0.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: void <init>(long,long)>(l0, l1);

        return $r0;
    }

    public java.lang.Long common(java.lang.Object, java.lang.Object)
    {
        long $l0, $l1, $l2, $l3, $l5;
        java.lang.AssertionError $r14, $r15, $r16, $r17;
        byte $b4, $b6;
        java.lang.Long $r2, $r3, $r4, $r6, $r7, $r10, $r11;
        int $i7, $i8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object r0, r1;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r5;

        r5 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z7 = specialinvoke r5.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean valid(java.lang.Object,boolean)>(r0, 0);

        if $z7 != 0 goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label1:
        $z1 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z6 = specialinvoke r5.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean valid(java.lang.Object,boolean)>(r1, 0);

        if $z6 != 0 goto label2;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label2:
        $r10 = (java.lang.Long) r0;

        $r11 = (java.lang.Long) r1;

        $r2 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        if $r10 == $r2 goto label3;

        $r4 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        if $r11 != $r4 goto label4;

     label3:
        $r3 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        return $r3;

     label4:
        $z2 = r5.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean doShare>;

        if $z2 == 0 goto label7;

        $z4 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z4 != 0 goto label5;

        $l5 = virtualinvoke $r10.<java.lang.Long: long longValue()>();

        $b6 = $l5 cmp 0L;

        $i7 = (int) $b6;

        if $i7 > 0 goto label5;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label5:
        $z5 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z5 != 0 goto label6;

        $l3 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

        $b4 = $l3 cmp 0L;

        $i8 = (int) $b4;

        if $i8 > 0 goto label6;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label6:
        $l0 = virtualinvoke $r10.<java.lang.Long: long longValue()>();

        $l1 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l1);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        return $r7;

     label7:
        $z3 = virtualinvoke $r10.<java.lang.Long: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label8;

        return $r10;

     label8:
        $r6 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        return $r6;
    }

    public java.lang.Long subtract(java.lang.Object, java.lang.Object)
    {
        long $l0, $l1, $l2, $l3, $l4;
        java.lang.AssertionError $r11, $r12, $r13;
        byte $b5;
        java.lang.Long $r2, $r3, $r4, $r7, $r8;
        int $i6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object r0, r1;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r6;

        r6 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z5 = specialinvoke r6.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean valid(java.lang.Object,boolean)>(r0, 0);

        if $z5 != 0 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $z1 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z4 = specialinvoke r6.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean valid(java.lang.Object,boolean)>(r1, 0);

        if $z4 != 0 goto label2;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label2:
        $r7 = (java.lang.Long) r0;

        $r8 = (java.lang.Long) r1;

        $z2 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $l3 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $l4 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        $b5 = $l3 cmp $l4;

        $i6 = (int) $b5;

        if $i6 >= 0 goto label3;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label3:
        $r2 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        if $r8 != $r2 goto label4;

        return $r7;

     label4:
        $z3 = virtualinvoke $r7.<java.lang.Long: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label5;

        $r4 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        return $r4;

     label5:
        $l0 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $l1 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        $l2 = $l0 - $l1;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        return $r3;
    }

    public java.lang.Object add(java.lang.Object, java.lang.Object)
    {
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7;
        java.lang.AssertionError $r8, $r9;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs $r2, r11;
        java.lang.Long $r3, $r4, $r5, $r7, r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object r0, r1;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r6;

        r6 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z4 = specialinvoke r6.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean valid(java.lang.Object,boolean)>(r0, 0);

        if $z4 != 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $z1 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z3 = specialinvoke r6.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean valid(java.lang.Object,boolean)>(r1, 1);

        if $z3 != 0 goto label2;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label2:
        $r7 = (java.lang.Long) r0;

        $z2 = r1 instanceof java.lang.Long;

        if $z2 == 0 goto label5;

        r10 = (java.lang.Long) r1;

        $r3 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        if $r7 != $r3 goto label3;

        return r10;

     label3:
        $r4 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        if r10 != $r4 goto label4;

        return $r7;

     label4:
        $l5 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $l6 = virtualinvoke r10.<java.lang.Long: long longValue()>();

        $l7 = $l5 + $l6;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        return $r5;

     label5:
        r11 = (org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs) r1;

        $l0 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $r2 = new org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs;

        $l1 = r11.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long first>;

        $l4 = $l1 + $l0;

        $l2 = r11.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long second>;

        $l3 = $l2 + $l0;

        specialinvoke $r2.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: void <init>(long,long)>($l4, $l3);

        return $r2;
    }

    public void write(java.lang.Object, org.apache.lucene.store.DataOutput) throws java.io.IOException
    {
        org.apache.lucene.store.DataOutput r1;
        long $l0, $l1, $l2, $l3, $l4, $l5;
        java.lang.AssertionError $r3;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs r5;
        java.lang.Long r4;
        java.lang.Object r0;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r2;
        boolean $z0, $z1, $z2;

        r2 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.lucene.store.DataOutput;

        $z0 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = specialinvoke r2.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean valid(java.lang.Object,boolean)>(r0, 1);

        if $z2 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z1 = r0 instanceof java.lang.Long;

        if $z1 == 0 goto label2;

        r4 = (java.lang.Long) r0;

        $l4 = virtualinvoke r4.<java.lang.Long: long longValue()>();

        $l5 = $l4 << 1;

        virtualinvoke r1.<org.apache.lucene.store.DataOutput: void writeVLong(long)>($l5);

        goto label3;

     label2:
        r5 = (org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs) r0;

        $l0 = r5.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long first>;

        $l1 = $l0 << 1;

        $l2 = $l1 | 1L;

        virtualinvoke r1.<org.apache.lucene.store.DataOutput: void writeVLong(long)>($l2);

        $l3 = r5.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long second>;

        virtualinvoke r1.<org.apache.lucene.store.DataOutput: void writeVLong(long)>($l3);

     label3:
        return;
    }

    public java.lang.Object read(org.apache.lucene.store.DataInput) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r0;
        long $l0, $l1, $l3, l5, l6;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs $r1;
        byte $b2, $b4;
        java.lang.Long $r2, $r3;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r4;

        r4 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        r0 := @parameter0: org.apache.lucene.store.DataInput;

        $l0 = virtualinvoke r0.<org.apache.lucene.store.DataInput: long readVLong()>();

        $l1 = $l0 & 1L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label2;

        l5 = $l0 >>> 1;

        $b4 = l5 cmp 0L;

        if $b4 != 0 goto label1;

        $r3 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        return $r3;

     label1:
        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        return $r2;

     label2:
        l6 = $l0 >>> 1;

        $l3 = virtualinvoke r0.<org.apache.lucene.store.DataInput: long readVLong()>();

        $r1 = new org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs;

        specialinvoke $r1.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: void <init>(long,long)>(l6, $l3);

        return $r1;
    }

    private boolean valid(java.lang.Long)
    {
        long $l0;
        java.lang.AssertionError $r6, $r7, $r8;
        byte $b1;
        java.lang.Long r0, $r1;
        int $i2;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r5;
        boolean $z0, $z1, $z2, $z3;

        r5 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        r0 := @parameter0: java.lang.Long;

        $z0 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $z1 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z3 = r0 instanceof java.lang.Long;

        if $z3 != 0 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $z2 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r1 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        if r0 == $r1 goto label3;

        $l0 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 > 0 goto label3;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label3:
        return 1;
    }

    private boolean valid(java.lang.Object, boolean)
    {
        java.lang.AssertionError $r4;
        java.lang.Long $r2, $r3;
        java.lang.Object r0;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;

        r1 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        r0 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label2;

        $z3 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z3 != 0 goto label1;

        $z5 = r0 instanceof java.lang.Long;

        if $z5 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r3 = (java.lang.Long) r0;

        $z4 = specialinvoke r1.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean valid(java.lang.Long)>($r3);

        return $z4;

     label2:
        $z1 = r0 instanceof org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs;

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $r2 = (java.lang.Long) r0;

        $z2 = specialinvoke r1.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean valid(java.lang.Long)>($r2);

        return $z2;
    }

    public java.lang.Object getNoOutput()
    {
        java.lang.Long $r0;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r1;

        r1 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        $r0 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        return $r0;
    }

    public java.lang.String outputToString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r1;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r2;

        r2 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.Object merge(java.lang.Object, java.lang.Object)
    {
        long $l0, $l1;
        java.lang.AssertionError $r6, $r7;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs $r0;
        java.lang.Long $r2, $r4;
        java.lang.Object r1, r3;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r5;
        boolean $z0, $z1, $z2, $z3;

        r5 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $z0 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z3 = specialinvoke r5.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean valid(java.lang.Object,boolean)>(r1, 0);

        if $z3 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $z1 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z2 = specialinvoke r5.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean valid(java.lang.Object,boolean)>(r3, 0);

        if $z2 != 0 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $r0 = new org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs;

        $r2 = (java.lang.Long) r1;

        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        $r4 = (java.lang.Long) r3;

        $l1 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        specialinvoke $r0.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: void <init>(long,long)>($l0, $l1);

        return $r0;
    }

    public volatile java.lang.Object subtract(java.lang.Object, java.lang.Object)
    {
        java.lang.Long $r3;
        java.lang.Object r1, r2;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r0;

        r0 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long subtract(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public volatile java.lang.Object common(java.lang.Object, java.lang.Object)
    {
        java.lang.Long $r3;
        java.lang.Object r1, r2;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs r0;

        r0 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long common(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Long $r1;
        java.lang.Class $r0;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs $r2, $r3;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/fst/UpToTwoPositiveIntOutputs;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: boolean $assertionsDisabled> = $z1;

        $r1 = new java.lang.Long;

        specialinvoke $r1.<java.lang.Long: void <init>(long)>(0L);

        <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: java.lang.Long NO_OUTPUT> = $r1;

        $r2 = new org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        specialinvoke $r2.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: void <init>(boolean)>(1);

        <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs singletonShare> = $r2;

        $r3 = new org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs;

        specialinvoke $r3.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: void <init>(boolean)>(0);

        <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs singletonNoShare> = $r3;

        return;
    }
}
