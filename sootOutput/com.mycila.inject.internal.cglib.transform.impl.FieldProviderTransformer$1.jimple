class com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1 extends java.lang.Object implements com.mycila.inject.internal.cglib.core.ProcessSwitchCallback
{
    private final java.lang.String[] val$names;
    private final com.mycila.inject.internal.cglib.core.CodeEmitter val$e;
    private final com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer this$0;

    void <init>(com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer, java.lang.String[], com.mycila.inject.internal.cglib.core.CodeEmitter)
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r1;
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1 r0;
        java.lang.String[] r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r3;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1;

        r1 := @parameter0: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: com.mycila.inject.internal.cglib.core.CodeEmitter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer this$0> = r1;

        r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1: java.lang.String[] val$names> = r2;

        r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e> = r3;

        return;
    }

    public void processCase(int, com.mycila.inject.internal.asm.Label) throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer $r1;
        com.mycila.inject.internal.asm.Type r6;
        java.lang.String[] $r3, $r8;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r7, $r10, $r11;
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1 r0;
        java.util.Map $r2;
        int i0;
        com.mycila.inject.internal.asm.Label r12;
        java.lang.Object $r5;
        java.lang.String $r4, $r9;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1;

        i0 := @parameter0: int;

        r12 := @parameter1: com.mycila.inject.internal.asm.Label;

        $r1 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer this$0>;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: java.util.Map access$000(com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer)>($r1);

        $r3 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1: java.lang.String[] val$names>;

        $r4 = $r3[i0];

        $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (com.mycila.inject.internal.asm.Type) $r5;

        $r7 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.CodeEmitter: void unbox(com.mycila.inject.internal.asm.Type)>(r6);

        $r10 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $r8 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1: java.lang.String[] val$names>;

        $r9 = $r8[i0];

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>($r9);

        $r11 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        return;
    }

    public void processDefault() throws java.lang.Exception
    {
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r1;
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1 r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1;

        $r1 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.asm.Type access$100()>();

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void throw_exception(com.mycila.inject.internal.asm.Type,java.lang.String)>($r2, "Unknown field index");

        return;
    }
}
