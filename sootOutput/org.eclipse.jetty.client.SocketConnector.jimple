class org.eclipse.jetty.client.SocketConnector extends org.eclipse.jetty.util.component.AbstractLifeCycle implements org.eclipse.jetty.client.HttpClient$Connector
{
    private static final org.eclipse.jetty.util.log.Logger LOG;
    private final org.eclipse.jetty.client.HttpClient _httpClient;

    void <init>(org.eclipse.jetty.client.HttpClient)
    {
        org.eclipse.jetty.client.HttpClient r1;
        org.eclipse.jetty.client.SocketConnector r0;

        r0 := @this: org.eclipse.jetty.client.SocketConnector;

        r1 := @parameter0: org.eclipse.jetty.client.HttpClient;

        specialinvoke r0.<org.eclipse.jetty.util.component.AbstractLifeCycle: void <init>()>();

        r0.<org.eclipse.jetty.client.SocketConnector: org.eclipse.jetty.client.HttpClient _httpClient> = r1;

        return;
    }

    public void startConnection(org.eclipse.jetty.client.HttpDestination) throws java.io.IOException
    {
        java.net.Socket r2, $r17;
        org.eclipse.jetty.io.Buffers $r9, $r11;
        org.eclipse.jetty.util.ssl.SslContextFactory $r16;
        org.eclipse.jetty.client.BlockingHttpConnection $r7;
        org.eclipse.jetty.client.Address $r18;
        org.eclipse.jetty.client.HttpClient $r5, $r8, $r10, $r12, $r15;
        int $i0;
        org.eclipse.jetty.client.HttpDestination r0;
        boolean $z0, $z1;
        java.net.InetSocketAddress $r3;
        org.eclipse.jetty.util.thread.ThreadPool $r13;
        javax.net.SocketFactory $r1;
        org.eclipse.jetty.io.bio.SocketEndPoint $r6;
        org.eclipse.jetty.client.SocketConnector$1 $r14;
        org.eclipse.jetty.client.SocketConnector r4;

        r4 := @this: org.eclipse.jetty.client.SocketConnector;

        r0 := @parameter0: org.eclipse.jetty.client.HttpDestination;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.client.HttpDestination: boolean isSecure()>();

        if $z0 == 0 goto label1;

        $r15 = r4.<org.eclipse.jetty.client.SocketConnector: org.eclipse.jetty.client.HttpClient _httpClient>;

        $r16 = virtualinvoke $r15.<org.eclipse.jetty.client.HttpClient: org.eclipse.jetty.util.ssl.SslContextFactory getSslContextFactory()>();

        $r17 = virtualinvoke $r16.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLSocket newSslSocket()>();

        goto label2;

     label1:
        $r1 = staticinvoke <javax.net.SocketFactory: javax.net.SocketFactory getDefault()>();

        $r17 = virtualinvoke $r1.<javax.net.SocketFactory: java.net.Socket createSocket()>();

     label2:
        r2 = $r17;

        virtualinvoke $r17.<java.net.Socket: void setSoTimeout(int)>(0);

        virtualinvoke $r17.<java.net.Socket: void setTcpNoDelay(boolean)>(1);

        $z1 = virtualinvoke r0.<org.eclipse.jetty.client.HttpDestination: boolean isProxied()>();

        if $z1 == 0 goto label3;

        $r18 = virtualinvoke r0.<org.eclipse.jetty.client.HttpDestination: org.eclipse.jetty.client.Address getProxy()>();

        goto label4;

     label3:
        $r18 = virtualinvoke r0.<org.eclipse.jetty.client.HttpDestination: org.eclipse.jetty.client.Address getAddress()>();

     label4:
        $r3 = virtualinvoke $r18.<org.eclipse.jetty.client.Address: java.net.InetSocketAddress toSocketAddress()>();

        $r5 = r4.<org.eclipse.jetty.client.SocketConnector: org.eclipse.jetty.client.HttpClient _httpClient>;

        $i0 = virtualinvoke $r5.<org.eclipse.jetty.client.HttpClient: int getConnectTimeout()>();

        virtualinvoke r2.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r3, $i0);

        $r6 = new org.eclipse.jetty.io.bio.SocketEndPoint;

        specialinvoke $r6.<org.eclipse.jetty.io.bio.SocketEndPoint: void <init>(java.net.Socket)>(r2);

        $r7 = new org.eclipse.jetty.client.BlockingHttpConnection;

        $r8 = r4.<org.eclipse.jetty.client.SocketConnector: org.eclipse.jetty.client.HttpClient _httpClient>;

        $r9 = virtualinvoke $r8.<org.eclipse.jetty.client.HttpClient: org.eclipse.jetty.io.Buffers getRequestBuffers()>();

        $r10 = r4.<org.eclipse.jetty.client.SocketConnector: org.eclipse.jetty.client.HttpClient _httpClient>;

        $r11 = virtualinvoke $r10.<org.eclipse.jetty.client.HttpClient: org.eclipse.jetty.io.Buffers getResponseBuffers()>();

        specialinvoke $r7.<org.eclipse.jetty.client.BlockingHttpConnection: void <init>(org.eclipse.jetty.io.Buffers,org.eclipse.jetty.io.Buffers,org.eclipse.jetty.io.EndPoint)>($r9, $r11, $r6);

        virtualinvoke $r7.<org.eclipse.jetty.client.AbstractHttpConnection: void setDestination(org.eclipse.jetty.client.HttpDestination)>(r0);

        virtualinvoke r0.<org.eclipse.jetty.client.HttpDestination: void onNewConnection(org.eclipse.jetty.client.AbstractHttpConnection)>($r7);

        $r12 = r4.<org.eclipse.jetty.client.SocketConnector: org.eclipse.jetty.client.HttpClient _httpClient>;

        $r13 = virtualinvoke $r12.<org.eclipse.jetty.client.HttpClient: org.eclipse.jetty.util.thread.ThreadPool getThreadPool()>();

        $r14 = new org.eclipse.jetty.client.SocketConnector$1;

        specialinvoke $r14.<org.eclipse.jetty.client.SocketConnector$1: void <init>(org.eclipse.jetty.client.SocketConnector,org.eclipse.jetty.client.AbstractHttpConnection,org.eclipse.jetty.client.HttpDestination)>(r4, $r7, r0);

        interfaceinvoke $r13.<org.eclipse.jetty.util.thread.ThreadPool: boolean dispatch(java.lang.Runnable)>($r14);

        return;
    }

    static org.eclipse.jetty.util.log.Logger access$000()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = <org.eclipse.jetty.client.SocketConnector: org.eclipse.jetty.util.log.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/client/SocketConnector;");

        <org.eclipse.jetty.client.SocketConnector: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        return;
    }
}
