public final class org.joda.time.DateMidnight extends org.joda.time.base.BaseDateTime implements org.joda.time.ReadableDateTime, java.io.Serializable
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.joda.time.DateMidnight r0;

        r0 := @this: org.joda.time.DateMidnight;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>()>();

        return;
    }

    public void <init>(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r1;
        org.joda.time.DateMidnight r0;

        r0 := @this: org.joda.time.DateMidnight;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.DateTimeZone)>(r1);

        return;
    }

    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.Chronology r1;
        org.joda.time.DateMidnight r0;

        r0 := @this: org.joda.time.DateMidnight;

        r1 := @parameter0: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.Chronology)>(r1);

        return;
    }

    public void <init>(long)
    {
        long l0;
        org.joda.time.DateMidnight r0;

        r0 := @this: org.joda.time.DateMidnight;

        l0 := @parameter0: long;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long)>(l0);

        return;
    }

    public void <init>(long, org.joda.time.DateTimeZone)
    {
        long l0;
        org.joda.time.DateTimeZone r1;
        org.joda.time.DateMidnight r0;

        r0 := @this: org.joda.time.DateMidnight;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>(l0, r1);

        return;
    }

    public void <init>(long, org.joda.time.Chronology)
    {
        org.joda.time.Chronology r1;
        long l0;
        org.joda.time.DateMidnight r0;

        r0 := @this: org.joda.time.DateMidnight;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>(l0, r1);

        return;
    }

    public void <init>(java.lang.Object)
    {
        java.lang.Object r1;
        org.joda.time.DateMidnight r0;

        r0 := @this: org.joda.time.DateMidnight;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>(r1, null);

        return;
    }

    public void <init>(java.lang.Object, org.joda.time.DateTimeZone)
    {
        java.lang.Object r1;
        org.joda.time.DateTimeZone r2;
        org.joda.time.DateMidnight r0;

        r0 := @this: org.joda.time.DateMidnight;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>(r1, r2);

        return;
    }

    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.Chronology r2, $r3;
        java.lang.Object r1;
        org.joda.time.DateMidnight r0;

        r0 := @this: org.joda.time.DateMidnight;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r2);

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>(r1, $r3);

        return;
    }

    public void <init>(int, int, int)
    {
        int i0, i1, i2;
        org.joda.time.DateMidnight r0;

        r0 := @this: org.joda.time.DateMidnight;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int)>(i0, i1, i2, 0, 0, 0, 0);

        return;
    }

    public void <init>(int, int, int, org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r1;
        int i0, i1, i2;
        org.joda.time.DateMidnight r0;

        r0 := @this: org.joda.time.DateMidnight;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.DateTimeZone)>(i0, i1, i2, 0, 0, 0, 0, r1);

        return;
    }

    public void <init>(int, int, int, org.joda.time.Chronology)
    {
        int i0, i1, i2;
        org.joda.time.Chronology r1;
        org.joda.time.DateMidnight r0;

        r0 := @this: org.joda.time.DateMidnight;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(i0, i1, i2, 0, 0, 0, 0, r1);

        return;
    }

    protected long checkInstant(long, org.joda.time.Chronology)
    {
        org.joda.time.Chronology r0;
        org.joda.time.DateTimeField $r1;
        long l0, $l1;
        org.joda.time.DateMidnight r2;

        r2 := @this: org.joda.time.DateMidnight;

        l0 := @parameter0: long;

        r0 := @parameter1: org.joda.time.Chronology;

        $r1 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>(l0);

        return $l1;
    }

    public org.joda.time.DateMidnight withMillis(long)
    {
        byte $b2;
        org.joda.time.Chronology $r1;
        long $l0, $l1, l3;
        org.joda.time.DateMidnight r0, $r2;

        r0 := @this: org.joda.time.DateMidnight;

        l3 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long checkInstant(long,org.joda.time.Chronology)>(l3, $r1);

        $l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r2 = new org.joda.time.DateMidnight;

        specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

     label2:
        return $r2;
    }

    public org.joda.time.DateMidnight withChronology(org.joda.time.Chronology)
    {
        org.joda.time.Chronology r0, $r2;
        long $l0;
        org.joda.time.DateMidnight r1, $r3;

        r1 := @this: org.joda.time.DateMidnight;

        r0 := @parameter0: org.joda.time.Chronology;

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        if r0 != $r2 goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = new org.joda.time.DateMidnight;

        $l0 = virtualinvoke r1.<org.joda.time.DateMidnight: long getMillis()>();

        specialinvoke $r3.<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>($l0, r0);

     label2:
        return $r3;
    }

    public org.joda.time.DateMidnight withZoneRetainFields(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r0, $r2, $r3, r7;
        org.joda.time.Chronology $r5, $r6;
        long $l0, $l1;
        org.joda.time.DateMidnight r1, $r4;

        r1 := @this: org.joda.time.DateMidnight;

        r7 := @parameter0: org.joda.time.DateTimeZone;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r7);

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.DateTimeZone getZone()>();

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>($r2);

        if $r0 != $r3 goto label1;

        return r1;

     label1:
        $l0 = virtualinvoke r1.<org.joda.time.DateMidnight: long getMillis()>();

        $l1 = virtualinvoke $r3.<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>($r0, $l0);

        $r4 = new org.joda.time.DateMidnight;

        $r5 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r0);

        specialinvoke $r4.<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>($l1, $r6);

        return $r4;
    }

    public org.joda.time.DateMidnight withFields(org.joda.time.ReadablePartial)
    {
        org.joda.time.ReadablePartial r0;
        org.joda.time.Chronology $r2;
        long $l0, $l1;
        org.joda.time.DateMidnight r1, $r3;

        r1 := @this: org.joda.time.DateMidnight;

        r0 := @parameter0: org.joda.time.ReadablePartial;

        if r0 != null goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r1.<org.joda.time.DateMidnight: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, $l0);

        $r3 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l1);

        return $r3;
    }

    public org.joda.time.DateMidnight withField(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.Chronology $r2;
        long $l0, $l2;
        java.lang.IllegalArgumentException $r5;
        int i1;
        org.joda.time.DateTimeFieldType r0;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateMidnight r1, $r4;

        r1 := @this: org.joda.time.DateMidnight;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        i1 := @parameter1: int;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null");

        throw $r5;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r0.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r2);

        $l0 = virtualinvoke r1.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r4 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r4;
    }

    public org.joda.time.DateMidnight withFieldAdded(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.DurationField $r3;
        org.joda.time.Chronology $r2;
        long $l1, $l2;
        java.lang.IllegalArgumentException $r5;
        org.joda.time.DurationFieldType r0;
        int i0;
        org.joda.time.DateMidnight r1, $r4;

        r1 := @this: org.joda.time.DateMidnight;

        r0 := @parameter0: org.joda.time.DurationFieldType;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null");

        throw $r5;

     label1:
        if i0 != 0 goto label2;

        return r1;

     label2:
        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r0.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r2);

        $l1 = virtualinvoke r1.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r3.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        $r4 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r4;
    }

    public org.joda.time.DateMidnight withDurationAdded(long, int)
    {
        org.joda.time.Chronology $r1;
        long l0, $l3, $l4;
        byte $b1;
        int i2;
        org.joda.time.DateMidnight r0, $r2;

        r0 := @this: org.joda.time.DateMidnight;

        l0 := @parameter0: long;

        i2 := @parameter1: int;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        if i2 != 0 goto label2;

     label1:
        return r0;

     label2:
        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $l3 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l4 = virtualinvoke $r1.<org.joda.time.Chronology: long add(long,long,int)>($l3, l0, i2);

        $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l4);

        return $r2;
    }

    public org.joda.time.DateMidnight withDurationAdded(org.joda.time.ReadableDuration, int)
    {
        org.joda.time.ReadableDuration r0;
        int i0;
        long $l1;
        org.joda.time.DateMidnight r1, $r2;

        r1 := @this: org.joda.time.DateMidnight;

        r0 := @parameter0: org.joda.time.ReadableDuration;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        if i0 != 0 goto label2;

     label1:
        return r1;

     label2:
        $l1 = interfaceinvoke r0.<org.joda.time.ReadableDuration: long getMillis()>();

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withDurationAdded(long,int)>($l1, i0);

        return $r2;
    }

    public org.joda.time.DateMidnight withPeriodAdded(org.joda.time.ReadablePeriod, int)
    {
        org.joda.time.ReadablePeriod r0;
        int i0;
        org.joda.time.Chronology $r2;
        long $l1, $l2;
        org.joda.time.DateMidnight r1, $r3;

        r1 := @this: org.joda.time.DateMidnight;

        r0 := @parameter0: org.joda.time.ReadablePeriod;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        if i0 != 0 goto label2;

     label1:
        return r1;

     label2:
        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $l1 = virtualinvoke r1.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r0, $l1, i0);

        $r3 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight plus(long)
    {
        long l0;
        org.joda.time.DateMidnight r0, $r1;

        r0 := @this: org.joda.time.DateMidnight;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withDurationAdded(long,int)>(l0, 1);

        return $r1;
    }

    public org.joda.time.DateMidnight plus(org.joda.time.ReadableDuration)
    {
        org.joda.time.ReadableDuration r1;
        org.joda.time.DateMidnight r0, $r2;

        r0 := @this: org.joda.time.DateMidnight;

        r1 := @parameter0: org.joda.time.ReadableDuration;

        $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withDurationAdded(org.joda.time.ReadableDuration,int)>(r1, 1);

        return $r2;
    }

    public org.joda.time.DateMidnight plus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod r1;
        org.joda.time.DateMidnight r0, $r2;

        r0 := @this: org.joda.time.DateMidnight;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, 1);

        return $r2;
    }

    public org.joda.time.DateMidnight plusYears(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight plusMonths(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight plusWeeks(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight plusDays(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight minus(long)
    {
        int $i2;
        long l0;
        org.joda.time.DateMidnight r0, $r1;

        r0 := @this: org.joda.time.DateMidnight;

        l0 := @parameter0: long;

        $i2 = (int) -1;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withDurationAdded(long,int)>(l0, $i2);

        return $r1;
    }

    public org.joda.time.DateMidnight minus(org.joda.time.ReadableDuration)
    {
        org.joda.time.ReadableDuration r1;
        int $i1;
        org.joda.time.DateMidnight r0, $r2;

        r0 := @this: org.joda.time.DateMidnight;

        r1 := @parameter0: org.joda.time.ReadableDuration;

        $i1 = (int) -1;

        $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withDurationAdded(org.joda.time.ReadableDuration,int)>(r1, $i1);

        return $r2;
    }

    public org.joda.time.DateMidnight minus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod r1;
        int $i1;
        org.joda.time.DateMidnight r0, $r2;

        r0 := @this: org.joda.time.DateMidnight;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $i1 = (int) -1;

        $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, $i1);

        return $r2;
    }

    public org.joda.time.DateMidnight minusYears(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight minusMonths(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight minusWeeks(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight minusDays(int)
    {
        org.joda.time.DurationField $r2;
        int i0;
        org.joda.time.Chronology $r1;
        long $l1, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight$Property property(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.Chronology $r2;
        java.lang.IllegalArgumentException $r5, $r11;
        org.joda.time.DateMidnight$Property $r4;
        java.lang.StringBuffer $r6, $r7, $r8, $r9;
        org.joda.time.DateTimeFieldType r0;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateMidnight r1;
        java.lang.String $r10;
        boolean $z0;

        r1 := @this: org.joda.time.DateMidnight;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The DateTimeFieldType must not be null");

        throw $r11;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r0.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r2);

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeField: boolean isSupported()>();

        if $z0 != 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Field \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not supported");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        $r4 = new org.joda.time.DateMidnight$Property;

        specialinvoke $r4.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r1, $r3);

        return $r4;
    }

    public org.joda.time.YearMonthDay toYearMonthDay()
    {
        org.joda.time.YearMonthDay $r0;
        org.joda.time.Chronology $r2;
        long $l0;
        org.joda.time.DateMidnight r1;

        r1 := @this: org.joda.time.DateMidnight;

        $r0 = new org.joda.time.YearMonthDay;

        $l0 = virtualinvoke r1.<org.joda.time.DateMidnight: long getMillis()>();

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        specialinvoke $r0.<org.joda.time.YearMonthDay: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r0;
    }

    public org.joda.time.LocalDate toLocalDate()
    {
        org.joda.time.LocalDate $r0;
        org.joda.time.Chronology $r2;
        long $l0;
        org.joda.time.DateMidnight r1;

        r1 := @this: org.joda.time.DateMidnight;

        $r0 = new org.joda.time.LocalDate;

        $l0 = virtualinvoke r1.<org.joda.time.DateMidnight: long getMillis()>();

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        specialinvoke $r0.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r0;
    }

    public org.joda.time.Interval toInterval()
    {
        org.joda.time.Interval $r4;
        org.joda.time.DurationField $r3;
        org.joda.time.DurationFieldType $r2;
        org.joda.time.Chronology $r1;
        long $l0, $l1;
        org.joda.time.DateMidnight r0;

        r0 := @this: org.joda.time.DateMidnight;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        $r3 = virtualinvoke $r2.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r1);

        $l1 = virtualinvoke $r3.<org.joda.time.DurationField: long add(long,int)>($l0, 1);

        $r4 = new org.joda.time.Interval;

        specialinvoke $r4.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, $r1);

        return $r4;
    }

    public org.joda.time.DateMidnight withEra(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight withCenturyOfEra(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight withYearOfEra(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight withYearOfCentury(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight withYear(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight withWeekyear(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight withMonthOfYear(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight withWeekOfWeekyear(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight withDayOfYear(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight withDayOfMonth(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight withDayOfWeek(int)
    {
        org.joda.time.Chronology $r1;
        int i1;
        org.joda.time.DateTimeField $r2;
        long $l0, $l2;
        org.joda.time.DateMidnight r0, $r3;

        r0 := @this: org.joda.time.DateMidnight;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, i1);

        $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.DateMidnight$Property era()
    {
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateMidnight r1;
        org.joda.time.DateMidnight$Property $r0;

        r1 := @this: org.joda.time.DateMidnight;

        $r0 = new org.joda.time.DateMidnight$Property;

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>();

        specialinvoke $r0.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.DateMidnight$Property centuryOfEra()
    {
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateMidnight r1;
        org.joda.time.DateMidnight$Property $r0;

        r1 := @this: org.joda.time.DateMidnight;

        $r0 = new org.joda.time.DateMidnight$Property;

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>();

        specialinvoke $r0.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.DateMidnight$Property yearOfCentury()
    {
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateMidnight r1;
        org.joda.time.DateMidnight$Property $r0;

        r1 := @this: org.joda.time.DateMidnight;

        $r0 = new org.joda.time.DateMidnight$Property;

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>();

        specialinvoke $r0.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.DateMidnight$Property yearOfEra()
    {
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateMidnight r1;
        org.joda.time.DateMidnight$Property $r0;

        r1 := @this: org.joda.time.DateMidnight;

        $r0 = new org.joda.time.DateMidnight$Property;

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>();

        specialinvoke $r0.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.DateMidnight$Property year()
    {
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateMidnight r1;
        org.joda.time.DateMidnight$Property $r0;

        r1 := @this: org.joda.time.DateMidnight;

        $r0 = new org.joda.time.DateMidnight$Property;

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        specialinvoke $r0.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.DateMidnight$Property weekyear()
    {
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateMidnight r1;
        org.joda.time.DateMidnight$Property $r0;

        r1 := @this: org.joda.time.DateMidnight;

        $r0 = new org.joda.time.DateMidnight$Property;

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        specialinvoke $r0.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.DateMidnight$Property monthOfYear()
    {
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateMidnight r1;
        org.joda.time.DateMidnight$Property $r0;

        r1 := @this: org.joda.time.DateMidnight;

        $r0 = new org.joda.time.DateMidnight$Property;

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        specialinvoke $r0.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.DateMidnight$Property weekOfWeekyear()
    {
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateMidnight r1;
        org.joda.time.DateMidnight$Property $r0;

        r1 := @this: org.joda.time.DateMidnight;

        $r0 = new org.joda.time.DateMidnight$Property;

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        specialinvoke $r0.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.DateMidnight$Property dayOfYear()
    {
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateMidnight r1;
        org.joda.time.DateMidnight$Property $r0;

        r1 := @this: org.joda.time.DateMidnight;

        $r0 = new org.joda.time.DateMidnight$Property;

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        specialinvoke $r0.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.DateMidnight$Property dayOfMonth()
    {
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateMidnight r1;
        org.joda.time.DateMidnight$Property $r0;

        r1 := @this: org.joda.time.DateMidnight;

        $r0 = new org.joda.time.DateMidnight$Property;

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        specialinvoke $r0.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public org.joda.time.DateMidnight$Property dayOfWeek()
    {
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateMidnight r1;
        org.joda.time.DateMidnight$Property $r0;

        r1 := @this: org.joda.time.DateMidnight;

        $r0 = new org.joda.time.DateMidnight$Property;

        $r2 = virtualinvoke r1.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        specialinvoke $r0.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r1, $r3);

        return $r0;
    }

    public static void <clinit>()
    {
        <org.joda.time.DateMidnight: long serialVersionUID> = 156371964018738L;

        return;
    }
}
