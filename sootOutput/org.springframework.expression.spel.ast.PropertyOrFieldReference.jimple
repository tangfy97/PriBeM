public class org.springframework.expression.spel.ast.PropertyOrFieldReference extends org.springframework.expression.spel.ast.SpelNodeImpl
{
    private final boolean nullSafe;
    private final java.lang.String name;
    private volatile org.springframework.expression.PropertyAccessor cachedReadAccessor;
    private volatile org.springframework.expression.PropertyAccessor cachedWriteAccessor;

    public void <init>(boolean, java.lang.String, int)
    {
        org.springframework.expression.spel.ast.PropertyOrFieldReference r0;
        int i0;
        java.lang.String r2;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1;
        boolean z0;

        r0 := @this: org.springframework.expression.spel.ast.PropertyOrFieldReference;

        z0 := @parameter0: boolean;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r1 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[0];

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, $r1);

        r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean nullSafe> = z0;

        r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name> = r2;

        return;
    }

    public boolean isNullSafe()
    {
        org.springframework.expression.spel.ast.PropertyOrFieldReference r0;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.ast.PropertyOrFieldReference;

        $z0 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean nullSafe>;

        return $z0;
    }

    public java.lang.String getName()
    {
        org.springframework.expression.spel.ast.PropertyOrFieldReference r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.expression.spel.ast.PropertyOrFieldReference;

        $r1 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>;

        return $r1;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        java.util.Map r54;
        org.springframework.expression.spel.ExpressionState r1;
        org.springframework.expression.spel.SpelEvaluationException $r25, $r31, $r37, $r41, $r45, $r49;
        java.lang.Object[] $r26, $r32, $r38, $r42, $r46, $r50;
        java.lang.String $r2, $r12, $r13, $r16, $r17, $r22, $r23;
        org.springframework.expression.TypedValue $r3, r52;
        org.springframework.expression.spel.SpelMessage $r27, $r33, $r39, $r43, $r47, $r51;
        java.lang.Class[] $r6;
        java.lang.InstantiationException $r30, $r40, $r48;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.IllegalAccessException $r24, $r36, $r44;
        java.util.List r53;
        org.springframework.core.convert.TypeDescriptor $r7, $r19, $r28, $r34;
        org.springframework.expression.spel.ast.PropertyOrFieldReference r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.springframework.expression.spel.SpelParserConfiguration $r5;
        java.lang.Object $r4, $r11, $r15, $r21;
        java.lang.Class $r8, $r9, $r10, $r14, $r18, $r20, $r29, $r35;

        r0 := @this: org.springframework.expression.spel.ast.PropertyOrFieldReference;

        r1 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r2 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>;

        $r3 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r2);

        r52 = $r3;

        $r4 = virtualinvoke $r3.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        if $r4 != null goto label14;

        $r5 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>();

        $z0 = virtualinvoke $r5.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowNullReferences()>();

        if $z0 == 0 goto label14;

        $r6 = newarray (java.lang.Class)[2];

        $r6[0] = class "Lorg/springframework/expression/spel/ast/Indexer;";

        $r6[1] = class "Lorg/springframework/expression/spel/ast/PropertyOrFieldReference;";

        $z1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean nextChildIs(java.lang.Class[])>($r6);

        if $z1 == 0 goto label14;

        $r7 = virtualinvoke $r3.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r8 = virtualinvoke $r7.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $z2 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/util/List;");

        if $z2 != 0 goto label01;

        $r18 = virtualinvoke $r7.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $z6 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/util/Map;");

        if $z6 == 0 goto label10;

     label01:
        $r9 = virtualinvoke $r7.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $z3 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/util/List;");

        if $z3 == 0 goto label06;

     label02:
        $z5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1);

        if $z5 == 0 goto label14;

        $r14 = class "Ljava/util/ArrayList;";

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.Object newInstance()>();

        r53 = (java.util.List) $r15;

        $r16 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>;

        specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r16, r53);

        $r17 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>;

        r52 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r17);

     label03:
        goto label14;

     label04:
        $r48 := @caughtexception;

        $r49 = new org.springframework.expression.spel.SpelEvaluationException;

        $i5 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>();

        $r51 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>;

        $r50 = newarray (java.lang.Object)[0];

        specialinvoke $r49.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i5, $r48, $r51, $r50);

        throw $r49;

     label05:
        $r44 := @caughtexception;

        $r45 = new org.springframework.expression.spel.SpelEvaluationException;

        $i4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>();

        $r47 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_LIST_FOR_INDEXING>;

        $r46 = newarray (java.lang.Object)[0];

        specialinvoke $r45.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i4, $r44, $r47, $r46);

        throw $r45;

     label06:
        $z4 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1);

        if $z4 == 0 goto label14;

        $r10 = class "Ljava/util/HashMap;";

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.Object newInstance()>();

        r54 = (java.util.Map) $r11;

        $r12 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>;

        specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r12, r54);

        $r13 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>;

        r52 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r13);

     label07:
        goto label14;

     label08:
        $r40 := @caughtexception;

        $r41 = new org.springframework.expression.spel.SpelEvaluationException;

        $i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>();

        $r43 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>;

        $r42 = newarray (java.lang.Object)[0];

        specialinvoke $r41.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r40, $r43, $r42);

        throw $r41;

     label09:
        $r36 := @caughtexception;

        $r37 = new org.springframework.expression.spel.SpelEvaluationException;

        $i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>();

        $r39 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_CREATE_MAP_FOR_INDEXING>;

        $r38 = newarray (java.lang.Object)[0];

        specialinvoke $r37.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r36, $r39, $r38);

        throw $r37;

     label10:
        $z7 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r1);

        if $z7 == 0 goto label14;

        $r19 = virtualinvoke $r3.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r20 = virtualinvoke $r19.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.Object newInstance()>();

        $r22 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>;

        specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r22, $r21);

        $r23 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>;

        r52 = specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState,java.lang.String)>(r1, $r23);

     label11:
        goto label14;

     label12:
        $r30 := @caughtexception;

        $r31 = new org.springframework.expression.spel.SpelEvaluationException;

        $i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>();

        $r33 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>;

        $r32 = newarray (java.lang.Object)[1];

        $r34 = virtualinvoke $r3.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r35 = virtualinvoke $r34.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $r32[0] = $r35;

        specialinvoke $r31.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r30, $r33, $r32);

        throw $r31;

     label13:
        $r24 := @caughtexception;

        $r25 = new org.springframework.expression.spel.SpelEvaluationException;

        $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>();

        $r27 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_DYNAMICALLY_CREATE_OBJECT>;

        $r26 = newarray (java.lang.Object)[1];

        $r28 = virtualinvoke $r3.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r29 = virtualinvoke $r28.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $r26[0] = $r29;

        specialinvoke $r25.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r24, $r27, $r26);

        throw $r25;

     label14:
        return r52;

        catch java.lang.InstantiationException from label02 to label03 with label04;
        catch java.lang.IllegalAccessException from label02 to label03 with label05;
        catch java.lang.InstantiationException from label06 to label07 with label08;
        catch java.lang.IllegalAccessException from label06 to label07 with label09;
        catch java.lang.InstantiationException from label10 to label11 with label12;
        catch java.lang.IllegalAccessException from label10 to label11 with label13;
    }

    public void setValue(org.springframework.expression.spel.ExpressionState, java.lang.Object) throws org.springframework.expression.spel.SpelEvaluationException
    {
        org.springframework.expression.spel.ast.PropertyOrFieldReference r0;
        org.springframework.expression.spel.ExpressionState r1;
        java.lang.Object r2;
        java.lang.String $r3;

        r0 := @this: org.springframework.expression.spel.ast.PropertyOrFieldReference;

        r1 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>;

        specialinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void writeProperty(org.springframework.expression.spel.ExpressionState,java.lang.String,java.lang.Object)>(r1, $r3, r2);

        return;
    }

    public boolean isWritable(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.spel.SpelEvaluationException
    {
        org.springframework.expression.spel.ast.PropertyOrFieldReference r0;
        org.springframework.expression.spel.ExpressionState r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.ast.PropertyOrFieldReference;

        r1 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r2 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>;

        $z0 = virtualinvoke r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean isWritableProperty(java.lang.String,org.springframework.expression.spel.ExpressionState)>($r2, r1);

        return $z0;
    }

    public java.lang.String toStringAST()
    {
        org.springframework.expression.spel.ast.PropertyOrFieldReference r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.expression.spel.ast.PropertyOrFieldReference;

        $r1 = r0.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String name>;

        return $r1;
    }

    private org.springframework.expression.TypedValue readProperty(org.springframework.expression.spel.ExpressionState, java.lang.String) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.support.ReflectivePropertyAccessor $r22;
        org.springframework.expression.PropertyAccessor $r27, r35;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.expression.AccessException $r29, $r34;
        org.springframework.expression.EvaluationContext $r7, $r24;
        java.util.List $r6;
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.spel.SpelEvaluationException $r9, $r14, $r30;
        java.lang.Object[] $r10, $r15, $r31;
        org.springframework.expression.spel.ast.PropertyOrFieldReference r3;
        int $i0;
        java.lang.String r11, $r13, $r33;
        org.springframework.expression.TypedValue $r1, $r21, $r26, $r28;
        org.springframework.expression.spel.SpelMessage $r12, $r16, $r32;
        java.util.Iterator $r17;
        java.lang.Object $r2, $r4, $r8, $r18, $r19, $r20, $r23, $r25;
        java.lang.Class $r5;

        r3 := @this: org.springframework.expression.spel.ast.PropertyOrFieldReference;

        r0 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r11 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>();

        $r2 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        if $r2 != null goto label01;

        $z3 = r3.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean nullSafe>;

        if $z3 == 0 goto label01;

        $r28 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>;

        return $r28;

     label01:
        $r27 = r3.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor cachedReadAccessor>;

        if $r27 == null goto label05;

     label02:
        $r24 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r25 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r26 = interfaceinvoke $r27.<org.springframework.expression.PropertyAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>($r24, $r25, r11);

     label03:
        return $r26;

     label04:
        $r34 := @caughtexception;

        r3.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor cachedReadAccessor> = null;

     label05:
        $r4 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r5 = virtualinvoke r3.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.Class getObjectClass(java.lang.Object)>($r4);

        $r6 = specialinvoke r3.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Class,org.springframework.expression.spel.ExpressionState)>($r5, r0);

        $r7 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        if $r6 == null goto label13;

     label06:
        $r17 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        goto label10;

     label07:
        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r35 = (org.springframework.expression.PropertyAccessor) $r18;

        $r19 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $z1 = interfaceinvoke r35.<org.springframework.expression.PropertyAccessor: boolean canRead(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>($r7, $r19, r11);

        if $z1 == 0 goto label10;

        $z2 = r35 instanceof org.springframework.expression.spel.support.ReflectivePropertyAccessor;

        if $z2 == 0 goto label08;

        $r22 = (org.springframework.expression.spel.support.ReflectivePropertyAccessor) r35;

        $r23 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        r35 = virtualinvoke $r22.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: org.springframework.expression.PropertyAccessor createOptimalAccessor(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>($r7, $r23, r11);

     label08:
        r3.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor cachedReadAccessor> = r35;

        $r20 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r21 = interfaceinvoke r35.<org.springframework.expression.PropertyAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>($r7, $r20, r11);

     label09:
        return $r21;

     label10:
        $z0 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label07;

     label11:
        goto label13;

     label12:
        $r29 := @caughtexception;

        $r30 = new org.springframework.expression.spel.SpelEvaluationException;

        $r32 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage EXCEPTION_DURING_PROPERTY_READ>;

        $r31 = newarray (java.lang.Object)[2];

        $r31[0] = r11;

        $r33 = virtualinvoke $r29.<org.springframework.expression.AccessException: java.lang.String getMessage()>();

        $r31[1] = $r33;

        specialinvoke $r30.<org.springframework.expression.spel.SpelEvaluationException: void <init>(java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r29, $r32, $r31);

        throw $r30;

     label13:
        $r8 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        if $r8 != null goto label14;

        $r14 = new org.springframework.expression.spel.SpelEvaluationException;

        $r16 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage PROPERTY_OR_FIELD_NOT_READABLE_ON_NULL>;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r11;

        specialinvoke $r14.<org.springframework.expression.spel.SpelEvaluationException: void <init>(org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r16, $r15);

        throw $r14;

     label14:
        $r9 = new org.springframework.expression.spel.SpelEvaluationException;

        $i0 = virtualinvoke r3.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>();

        $r12 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage PROPERTY_OR_FIELD_NOT_READABLE>;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = r11;

        $r13 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatClassNameForMessage(java.lang.Class)>($r5);

        $r10[1] = $r13;

        specialinvoke $r9.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r12, $r10);

        throw $r9;

        catch org.springframework.expression.AccessException from label02 to label03 with label04;
        catch org.springframework.expression.AccessException from label06 to label09 with label12;
        catch org.springframework.expression.AccessException from label10 to label11 with label12;
    }

    private void writeProperty(org.springframework.expression.spel.ExpressionState, java.lang.String, java.lang.Object) throws org.springframework.expression.spel.SpelEvaluationException
    {
        org.springframework.expression.PropertyAccessor $r24, r31;
        boolean $z0, $z1, $z2;
        org.springframework.expression.AccessException $r25, $r30;
        org.springframework.expression.EvaluationContext $r2, $r22;
        java.util.List $r7;
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.spel.SpelEvaluationException $r9, $r14, $r26;
        java.lang.Object[] $r10, $r15, $r27;
        org.springframework.expression.spel.ast.PropertyOrFieldReference r4;
        int $i0, $i1, $i2;
        java.lang.String r11, $r13, $r29;
        org.springframework.expression.TypedValue $r1;
        org.springframework.expression.spel.SpelMessage $r12, $r16, $r28;
        java.util.Iterator $r17;
        java.lang.Object $r3, $r5, $r8, $r18, $r19, $r20, r21, $r23;
        java.lang.Class $r6;

        r4 := @this: org.springframework.expression.spel.ast.PropertyOrFieldReference;

        r0 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r11 := @parameter1: java.lang.String;

        r21 := @parameter2: java.lang.Object;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>();

        $r2 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r3 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        if $r3 != null goto label01;

        $z2 = r4.<org.springframework.expression.spel.ast.PropertyOrFieldReference: boolean nullSafe>;

        if $z2 == 0 goto label01;

        return;

     label01:
        $r24 = r4.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor cachedWriteAccessor>;

        if $r24 == null goto label05;

     label02:
        $r22 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r23 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        interfaceinvoke $r24.<org.springframework.expression.PropertyAccessor: void write(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String,java.lang.Object)>($r22, $r23, r11, r21);

     label03:
        return;

     label04:
        $r30 := @caughtexception;

        r4.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor cachedWriteAccessor> = null;

     label05:
        $r5 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r6 = virtualinvoke r4.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.Class getObjectClass(java.lang.Object)>($r5);

        $r7 = specialinvoke r4.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Class,org.springframework.expression.spel.ExpressionState)>($r6, r0);

        if $r7 == null goto label12;

     label06:
        $r17 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        goto label09;

     label07:
        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r31 = (org.springframework.expression.PropertyAccessor) $r18;

        $r19 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $z1 = interfaceinvoke r31.<org.springframework.expression.PropertyAccessor: boolean canWrite(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>($r2, $r19, r11);

        if $z1 == 0 goto label09;

        r4.<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.PropertyAccessor cachedWriteAccessor> = r31;

        $r20 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        interfaceinvoke r31.<org.springframework.expression.PropertyAccessor: void write(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String,java.lang.Object)>($r2, $r20, r11, r21);

     label08:
        return;

     label09:
        $z0 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label07;

     label10:
        goto label12;

     label11:
        $r25 := @caughtexception;

        $r26 = new org.springframework.expression.spel.SpelEvaluationException;

        $i2 = virtualinvoke r4.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>();

        $r28 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage EXCEPTION_DURING_PROPERTY_WRITE>;

        $r27 = newarray (java.lang.Object)[2];

        $r27[0] = r11;

        $r29 = virtualinvoke $r25.<org.springframework.expression.AccessException: java.lang.String getMessage()>();

        $r27[1] = $r29;

        specialinvoke $r26.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r25, $r28, $r27);

        throw $r26;

     label12:
        $r8 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        if $r8 != null goto label13;

        $r14 = new org.springframework.expression.spel.SpelEvaluationException;

        $i1 = virtualinvoke r4.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>();

        $r16 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage PROPERTY_OR_FIELD_NOT_WRITABLE_ON_NULL>;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r11;

        specialinvoke $r14.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r16, $r15);

        throw $r14;

     label13:
        $r9 = new org.springframework.expression.spel.SpelEvaluationException;

        $i0 = virtualinvoke r4.<org.springframework.expression.spel.ast.PropertyOrFieldReference: int getStartPosition()>();

        $r12 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage PROPERTY_OR_FIELD_NOT_WRITABLE>;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = r11;

        $r13 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatClassNameForMessage(java.lang.Class)>($r6);

        $r10[1] = $r13;

        specialinvoke $r9.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r12, $r10);

        throw $r9;

        catch org.springframework.expression.AccessException from label02 to label03 with label04;
        catch org.springframework.expression.AccessException from label06 to label08 with label11;
        catch org.springframework.expression.AccessException from label09 to label10 with label11;
    }

    public boolean isWritableProperty(java.lang.String, org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.spel.SpelEvaluationException
    {
        org.springframework.expression.PropertyAccessor r9;
        java.util.Iterator $r7;
        org.springframework.expression.AccessException $r11;
        org.springframework.expression.EvaluationContext $r3;
        java.util.List $r6;
        org.springframework.expression.spel.ast.PropertyOrFieldReference r4;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object $r2, $r8;
        java.lang.Class $r5;
        java.lang.String r10;
        org.springframework.expression.TypedValue $r1;
        boolean $z0, $z1;

        r4 := @this: org.springframework.expression.spel.ast.PropertyOrFieldReference;

        r10 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>();

        $r2 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r3 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r5 = virtualinvoke r4.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.Class getObjectClass(java.lang.Object)>($r2);

        $r6 = specialinvoke r4.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Class,org.springframework.expression.spel.ExpressionState)>($r5, r0);

        if $r6 == null goto label6;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        goto label5;

     label1:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.springframework.expression.PropertyAccessor) $r8;

     label2:
        $z0 = interfaceinvoke r9.<org.springframework.expression.PropertyAccessor: boolean canWrite(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>($r3, $r2, r10);

        if $z0 == 0 goto label5;

     label3:
        return 1;

     label4:
        $r11 := @caughtexception;

     label5:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

     label6:
        return 0;

        catch org.springframework.expression.AccessException from label2 to label3 with label4;
    }

    private java.util.List getPropertyAccessorsToTry(java.lang.Class, org.springframework.expression.spel.ExpressionState)
    {
        org.springframework.expression.PropertyAccessor r11;
        java.util.ArrayList $r0, $r1, $r9;
        int i0, $i1, i2, i3;
        org.springframework.expression.spel.ast.PropertyOrFieldReference r10;
        boolean $z0, $z1;
        java.util.Iterator $r4;
        java.lang.Class[] $r6;
        java.util.List $r3;
        org.springframework.expression.spel.ExpressionState r2;
        java.lang.Object $r5;
        java.lang.Class r7, r8;

        r10 := @this: org.springframework.expression.spel.ast.PropertyOrFieldReference;

        r7 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.expression.spel.ExpressionState;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: java.util.List getPropertyAccessors()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label7;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.springframework.expression.PropertyAccessor) $r5;

        $r6 = interfaceinvoke r11.<org.springframework.expression.PropertyAccessor: java.lang.Class[] getSpecificTargetClasses()>();

        if $r6 != null goto label2;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r11);

        goto label7;

     label2:
        if r7 == null goto label7;

        i2 = 0;

        i0 = lengthof $r6;

        i3 = 0;

        goto label6;

     label3:
        r8 = $r6[i3];

        if r8 != r7 goto label4;

        $i1 = i2;

        i2 = i2 + 1;

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>($i1, r11);

        goto label5;

     label4:
        $z0 = virtualinvoke r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r7);

        if $z0 == 0 goto label5;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r11);

     label5:
        i3 = i3 + 1;

     label6:
        if i3 < i0 goto label3;

     label7:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>($r0);

        interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>($r1);

        return $r9;
    }
}
