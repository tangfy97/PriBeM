public abstract class org.springframework.scripting.bsh.BshScriptUtils extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.scripting.bsh.BshScriptUtils r0;

        r0 := @this: org.springframework.scripting.bsh.BshScriptUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object createBshObject(java.lang.String) throws bsh.EvalError
    {
        java.lang.Object $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.scripting.bsh.BshScriptUtils: java.lang.Object createBshObject(java.lang.String,java.lang.Class[],java.lang.ClassLoader)>(r0, null, null);

        return $r1;
    }

    public static java.lang.Object createBshObject(java.lang.String, java.lang.Class[]) throws bsh.EvalError
    {
        java.lang.Class[] r1;
        java.lang.Object $r3;
        java.lang.String r0;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class[];

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        $r3 = staticinvoke <org.springframework.scripting.bsh.BshScriptUtils: java.lang.Object createBshObject(java.lang.String,java.lang.Class[],java.lang.ClassLoader)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.Object createBshObject(java.lang.String, java.lang.Class[], java.lang.ClassLoader) throws bsh.EvalError
    {
        java.lang.Throwable $r6;
        java.lang.IllegalStateException $r7;
        java.lang.Class[] r1;
        java.lang.Object $r3, $r5;
        java.lang.Class r4;
        java.lang.StringBuilder $r8, $r10, $r11, $r12;
        java.lang.String r0, $r9, $r13;
        java.lang.ClassLoader r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class[];

        r2 := @parameter2: java.lang.ClassLoader;

        $r3 = staticinvoke <org.springframework.scripting.bsh.BshScriptUtils: java.lang.Object evaluateBshScript(java.lang.String,java.lang.Class[],java.lang.ClassLoader)>(r0, r1, r2);

        $z0 = $r3 instanceof java.lang.Class;

        if $z0 == 0 goto label4;

        r4 = (java.lang.Class) $r3;

     label1:
        $r5 = virtualinvoke r4.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate script class [");

        $r9 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Root cause is ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label4:
        return $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static java.lang.Class determineBshObjectType(java.lang.String) throws bsh.EvalError
    {
        bsh.Interpreter $r1;
        java.lang.Object $r2;
        java.lang.Class $r3, $r4;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "Script source must not be empty");

        $r1 = new bsh.Interpreter;

        specialinvoke $r1.<bsh.Interpreter: void <init>()>();

        $r2 = virtualinvoke $r1.<bsh.Interpreter: java.lang.Object eval(java.lang.String)>(r0);

        $z0 = $r2 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r4 = (java.lang.Class) $r2;

        return $r4;

     label1:
        if $r2 == null goto label2;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        return $r3;

     label2:
        return null;
    }

    static java.lang.Object evaluateBshScript(java.lang.String, java.lang.Class[], java.lang.ClassLoader) throws bsh.EvalError
    {
        bsh.Interpreter $r1;
        java.lang.Class[] r3;
        org.springframework.scripting.bsh.BshScriptUtils$BshObjectInvocationHandler $r7;
        java.lang.Object $r2, $r4, $r8;
        java.lang.String r0;
        java.lang.ClassLoader r6;
        bsh.XThis r5;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class[];

        r6 := @parameter2: java.lang.ClassLoader;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "Script source must not be empty");

        $r1 = new bsh.Interpreter;

        specialinvoke $r1.<bsh.Interpreter: void <init>()>();

        $r2 = virtualinvoke $r1.<bsh.Interpreter: java.lang.Object eval(java.lang.String)>(r0);

        if $r2 == null goto label1;

        return $r2;

     label1:
        staticinvoke <org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>(r3, "Given script requires a script proxy: At least one script interface is required.");

        $r4 = virtualinvoke $r1.<bsh.Interpreter: java.lang.Object eval(java.lang.String)>("return this");

        r5 = (bsh.XThis) $r4;

        $r7 = new org.springframework.scripting.bsh.BshScriptUtils$BshObjectInvocationHandler;

        specialinvoke $r7.<org.springframework.scripting.bsh.BshScriptUtils$BshObjectInvocationHandler: void <init>(bsh.XThis)>(r5);

        $r8 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>(r6, r3, $r7);

        return $r8;
    }
}
