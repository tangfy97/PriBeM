public class ucar.nc2.dataset.conv.ModisSatellite extends ucar.nc2.dataset.CoordSysBuilder
{

    public static boolean isMine(ucar.nc2.NetcdfFile)
    {
        ucar.nc2.NetcdfFile r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: ucar.nc2.NetcdfFile;

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "SATNAME", null);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Aqua");

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r2 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "INTRUMENT_NAME", null);

        if $r2 == null goto label3;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("modis");

        if $z1 != 0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public void <init>()
    {
        ucar.nc2.dataset.conv.ModisSatellite r0;

        r0 := @this: ucar.nc2.dataset.conv.ModisSatellite;

        specialinvoke r0.<ucar.nc2.dataset.CoordSysBuilder: void <init>()>();

        r0.<ucar.nc2.dataset.conv.ModisSatellite: java.lang.String conventionName> = "ModisSatellite";

        return;
    }

    public void augmentDataset(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        java.util.Date $r8;
        long $l5, $l6;
        ucar.nc2.util.CancelTask r11;
        ucar.ma2.ArrayLong$D0 $r15;
        int $i0, $i1, i2, i3, $i4, $i8, $i10;
        ucar.nc2.Variable r12;
        boolean $z0, $z1;
        double $d0, $d1, $d2, d3, d4, d5, d6;
        ucar.nc2.dataset.conv.ModisSatellite r10;
        ucar.nc2.dataset.VariableDS $r14;
        java.util.Iterator $r2;
        java.util.GregorianCalendar $r13;
        java.util.TimeZone $r4;
        ucar.ma2.DataType $r6;
        java.util.List $r1;
        java.lang.Object $r9;
        ucar.nc2.dataset.NetcdfDataset r0;

        r10 := @this: ucar.nc2.dataset.conv.ModisSatellite;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r11 := @parameter1: ucar.nc2.util.CancelTask;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.util.List getVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r12 = (ucar.nc2.Variable) $r9;

        specialinvoke r10.<ucar.nc2.dataset.conv.ModisSatellite: void checkIfAxis(ucar.nc2.Variable)>(r12);

        goto label1;

     label2:
        $i8 = (int) -1;

        $i0 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: int readAttributeInteger(ucar.nc2.Variable,java.lang.String,int)>(null, "YEAR", $i8);

        $i10 = (int) -1;

        $i1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: int readAttributeInteger(ucar.nc2.Variable,java.lang.String,int)>(null, "DAY", $i10);

        $d0 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(null, "TIME", #NaN);

        if $i0 <= 0 goto label3;

        if $i1 <= 0 goto label3;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z1 != 0 goto label3;

        $r13 = new java.util.GregorianCalendar;

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        specialinvoke $r13.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r4);

        virtualinvoke $r13.<java.util.Calendar: void clear()>();

        virtualinvoke $r13.<java.util.Calendar: void set(int,int)>(1, $i0);

        virtualinvoke $r13.<java.util.Calendar: void set(int,int)>(6, $i1);

        i2 = (int) $d0;

        virtualinvoke $r13.<java.util.Calendar: void set(int,int)>(11, i2);

        $d1 = (double) i2;

        d3 = $d0 - $d1;

        d4 = d3 * 60.0;

        i3 = (int) d4;

        virtualinvoke $r13.<java.util.Calendar: void set(int,int)>(12, i3);

        $d2 = (double) i3;

        d5 = d4 - $d2;

        d6 = d5 * 60.0;

        $i4 = (int) d6;

        virtualinvoke $r13.<java.util.Calendar: void set(int,int)>(13, $i4);

        $r14 = new ucar.nc2.dataset.VariableDS;

        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        specialinvoke $r14.<ucar.nc2.dataset.VariableDS: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String,ucar.ma2.DataType,java.lang.String,java.lang.String,java.lang.String)>(r0, null, null, "timeFromAtts", $r6, "", "seconds since 1970-01-01 00:00", "time generated from global attributes");

        virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r14);

        $r15 = new ucar.ma2.ArrayLong$D0;

        specialinvoke $r15.<ucar.ma2.ArrayLong$D0: void <init>()>();

        $r8 = virtualinvoke $r13.<java.util.Calendar: java.util.Date getTime()>();

        $l5 = virtualinvoke $r8.<java.util.Date: long getTime()>();

        $l6 = $l5 / 1000L;

        virtualinvoke $r15.<ucar.ma2.ArrayLong$D0: void set(long)>($l6);

        virtualinvoke $r14.<ucar.nc2.dataset.VariableDS: void setCachedData(ucar.ma2.Array,boolean)>($r15, 1);

     label3:
        virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: void finish()>();

        return;
    }

    private void checkIfAxis(ucar.nc2.Variable)
    {
        ucar.nc2.dataset.conv.ModisSatellite r8;
        ucar.nc2.Attribute $r2, $r5;
        ucar.nc2.constants.AxisType $r3, $r6;
        ucar.nc2.Variable r0;
        java.lang.String $r1, $r4, $r7;
        boolean $z0, $z1;

        r8 := @this: ucar.nc2.dataset.conv.ModisSatellite;

        r0 := @parameter0: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Longitude");

        if $z0 == 0 goto label1;

        $r5 = new ucar.nc2.Attribute;

        $r6 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lon>;

        $r7 = virtualinvoke $r6.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r5.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r7);

        virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r5);

        goto label2;

     label1:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Latitude");

        if $z1 == 0 goto label2;

        $r2 = new ucar.nc2.Attribute;

        $r3 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lat>;

        $r4 = virtualinvoke $r3.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r2.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r4);

        virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r2);

     label2:
        return;
    }
}
