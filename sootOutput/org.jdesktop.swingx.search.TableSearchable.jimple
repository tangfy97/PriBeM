public class org.jdesktop.swingx.search.TableSearchable extends org.jdesktop.swingx.search.AbstractSearchable
{
    protected org.jdesktop.swingx.JXTable table;

    public void <init>(org.jdesktop.swingx.JXTable)
    {
        org.jdesktop.swingx.search.TableSearchable r0;
        org.jdesktop.swingx.JXTable r1;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        r1 := @parameter0: org.jdesktop.swingx.JXTable;

        specialinvoke r0.<org.jdesktop.swingx.search.AbstractSearchable: void <init>()>();

        r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table> = r1;

        return;
    }

    protected void findMatchAndUpdateState(java.util.regex.Pattern, int, boolean)
    {
        org.jdesktop.swingx.search.AbstractSearchable$SearchResult $r2, $r3, r4;
        int i0, $i1, i2, i3, $i5, $i7;
        java.util.regex.Pattern r1;
        org.jdesktop.swingx.search.TableSearchable r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        r1 := @parameter0: java.util.regex.Pattern;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r4 = null;

        if z0 == 0 goto label3;

        i2 = i0;

     label1:
        $i5 = (int) -1;

        if i2 < $i5 goto label2;

        if r4 != null goto label2;

        $r3 = specialinvoke r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult findMatchBackwardsInRow(java.util.regex.Pattern,int)>(r1, i2);

        r4 = $r3;

        virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: void updateState(org.jdesktop.swingx.search.AbstractSearchable$SearchResult)>($r3);

        $i7 = (int) -1;

        i2 = i2 + $i7;

        goto label1;

     label2:
        goto label5;

     label3:
        i3 = i0;

     label4:
        $i1 = virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: int getSize()>();

        if i3 > $i1 goto label5;

        if r4 != null goto label5;

        $r2 = specialinvoke r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult findMatchForwardInRow(java.util.regex.Pattern,int)>(r1, i3);

        r4 = $r2;

        virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: void updateState(org.jdesktop.swingx.search.AbstractSearchable$SearchResult)>($r2);

        i3 = i3 + 1;

        goto label4;

     label5:
        return;
    }

    protected org.jdesktop.swingx.search.AbstractSearchable$SearchResult findExtendedMatch(java.util.regex.Pattern, int)
    {
        org.jdesktop.swingx.search.AbstractSearchable$SearchResult $r2, $r3;
        int i0, $i1;
        java.util.regex.Pattern r1;
        org.jdesktop.swingx.search.TableSearchable r0;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        r1 := @parameter0: java.util.regex.Pattern;

        i0 := @parameter1: int;

        $r2 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        $i1 = $r2.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn>;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult findMatchAt(java.util.regex.Pattern,int,int)>(r1, i0, $i1);

        return $r3;
    }

    private org.jdesktop.swingx.search.AbstractSearchable$SearchResult findMatchForwardInRow(java.util.regex.Pattern, int)
    {
        org.jdesktop.swingx.JXTable $r3;
        org.jdesktop.swingx.search.AbstractSearchable$SearchResult $r1, $r2, $r5;
        int $i0, i1, $i2, $i3, i4;
        java.util.regex.Pattern r4;
        org.jdesktop.swingx.search.TableSearchable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        r4 := @parameter0: java.util.regex.Pattern;

        i1 := @parameter1: int;

        $r1 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        $i0 = $r1.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn>;

        if $i0 >= 0 goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        $i3 = $r2.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn>;

     label2:
        $z0 = virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: boolean isValidIndex(int)>(i1);

        if $z0 == 0 goto label5;

        i4 = $i3;

     label3:
        $r3 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        $i2 = virtualinvoke $r3.<org.jdesktop.swingx.JXTable: int getColumnCount()>();

        if i4 >= $i2 goto label5;

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult findMatchAt(java.util.regex.Pattern,int,int)>(r4, i1, i4);

        if $r5 == null goto label4;

        return $r5;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        return null;
    }

    private org.jdesktop.swingx.search.AbstractSearchable$SearchResult findMatchBackwardsInRow(java.util.regex.Pattern, int)
    {
        org.jdesktop.swingx.JXTable $r5;
        org.jdesktop.swingx.search.AbstractSearchable$SearchResult $r1, $r2, $r4;
        int $i0, i1, $i2, $i3, i4, $i6;
        java.util.regex.Pattern r3;
        org.jdesktop.swingx.search.TableSearchable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        r3 := @parameter0: java.util.regex.Pattern;

        i1 := @parameter1: int;

        $r1 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        $i0 = $r1.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn>;

        if $i0 >= 0 goto label1;

        $r5 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        $i2 = virtualinvoke $r5.<org.jdesktop.swingx.JXTable: int getColumnCount()>();

        $i3 = $i2 - 1;

        goto label2;

     label1:
        $r2 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        $i3 = $r2.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn>;

     label2:
        $z0 = virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: boolean isValidIndex(int)>(i1);

        if $z0 == 0 goto label5;

        i4 = $i3;

     label3:
        if i4 < 0 goto label5;

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult findMatchAt(java.util.regex.Pattern,int,int)>(r3, i1, i4);

        if $r4 == null goto label4;

        return $r4;

     label4:
        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label3;

     label5:
        return null;
    }

    protected org.jdesktop.swingx.search.AbstractSearchable$SearchResult findMatchAt(java.util.regex.Pattern, int, int)
    {
        org.jdesktop.swingx.JXTable $r1;
        org.jdesktop.swingx.search.AbstractSearchable$SearchResult $r5;
        java.util.regex.Matcher $r4;
        int i0, i1, $i2;
        java.lang.String $r2;
        java.util.regex.Pattern r3;
        org.jdesktop.swingx.search.TableSearchable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        r3 := @parameter0: java.util.regex.Pattern;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.JXTable: java.lang.String getStringAt(int,int)>(i0, i1);

        if $r2 == null goto label1;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i2 <= 0 goto label1;

        $r4 = virtualinvoke r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult createSearchResult(java.util.regex.Matcher,int,int)>($r4, i0, i1);

        return $r5;

     label1:
        return null;
    }

    protected int adjustStartPosition(int, boolean)
    {
        org.jdesktop.swingx.search.AbstractSearchable$SearchResult $r1;
        int i0, $i1, $i3;
        org.jdesktop.swingx.search.TableSearchable r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        $i3 = (int) -1;

        $r1.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn> = $i3;

        $i1 = specialinvoke r0.<org.jdesktop.swingx.search.AbstractSearchable: int adjustStartPosition(int,boolean)>(i0, z0);

        return $i1;
    }

    protected int moveStartPosition(int, boolean)
    {
        org.jdesktop.swingx.search.AbstractSearchable$SearchResult $r1, $r2, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i9, $i11;
        boolean z0;
        org.jdesktop.swingx.JXTable $r3;
        org.jdesktop.swingx.search.TableSearchable r0;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        i7 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r5 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        $i4 = $r5.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn>;

        $i5 = $i4 - 1;

        $r5.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn> = $i5;

        $r6 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        $i6 = $r6.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn>;

        if $i6 >= 0 goto label2;

        $i9 = (int) -1;

        i7 = i7 + $i9;

        goto label2;

     label1:
        $r1 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        $i0 = $r1.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn>;

        $i1 = $i0 + 1;

        $r1.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn> = $i1;

        $r2 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        $i2 = $r2.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn>;

        $r3 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        $i3 = virtualinvoke $r3.<org.jdesktop.swingx.JXTable: int getColumnCount()>();

        if $i2 < $i3 goto label2;

        $r4 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        $i11 = (int) -1;

        $r4.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn> = $i11;

        i7 = i7 + 1;

     label2:
        return i7;
    }

    protected boolean isEqualStartIndex(int)
    {
        org.jdesktop.swingx.search.AbstractSearchable$SearchResult $r1;
        int i0, $i1;
        org.jdesktop.swingx.search.TableSearchable r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.search.AbstractSearchable: boolean isEqualStartIndex(int)>(i0);

        if $z0 == 0 goto label1;

        $r1 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        $i1 = $r1.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn>;

        $z1 = specialinvoke r0.<org.jdesktop.swingx.search.TableSearchable: boolean isValidColumn(int)>($i1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private boolean isValidColumn(int)
    {
        int i0, $i1;
        org.jdesktop.swingx.search.TableSearchable r0;
        org.jdesktop.swingx.JXTable $r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        $i1 = virtualinvoke $r1.<org.jdesktop.swingx.JXTable: int getColumnCount()>();

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected int getSize()
    {
        int $i0;
        org.jdesktop.swingx.search.TableSearchable r0;
        org.jdesktop.swingx.JXTable $r1;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        $r1 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        $i0 = virtualinvoke $r1.<org.jdesktop.swingx.JXTable: int getRowCount()>();

        return $i0;
    }

    public org.jdesktop.swingx.JXTable getTarget()
    {
        org.jdesktop.swingx.search.TableSearchable r0;
        org.jdesktop.swingx.JXTable $r1;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        $r1 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        return $r1;
    }

    protected void moveMatchByHighlighter()
    {
        org.jdesktop.swingx.decorator.AbstractHighlighter $r1;
        org.jdesktop.swingx.JXTable $r4;
        org.jdesktop.swingx.search.AbstractSearchable$SearchResult $r2, $r3;
        int $i0, $i1;
        org.jdesktop.swingx.search.TableSearchable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.decorator.AbstractHighlighter getConfiguredMatchHighlighter()>();

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: boolean hasMatch()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: void ensureInsertedSearchHighlighters(org.jdesktop.swingx.decorator.Highlighter)>($r1);

        $r4 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        $r2 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        $i1 = $r2.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundRow>;

        $r3 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        $i0 = $r3.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn>;

        virtualinvoke $r4.<org.jdesktop.swingx.JXTable: void scrollCellToVisible(int,int)>($i1, $i0);

        return;
    }

    protected int convertColumnIndexToModel(int)
    {
        int i0, $i1;
        org.jdesktop.swingx.search.TableSearchable r0;
        org.jdesktop.swingx.JXTable $r1;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable getTarget()>();

        $i1 = virtualinvoke $r1.<org.jdesktop.swingx.JXTable: int convertColumnIndexToModel(int)>(i0);

        return $i1;
    }

    protected void moveMatchBySelection()
    {
        java.awt.Rectangle $r6;
        org.jdesktop.swingx.JXTable $r3, $r4, $r5, $r7;
        org.jdesktop.swingx.search.AbstractSearchable$SearchResult $r1, $r2;
        int i0, i1;
        org.jdesktop.swingx.search.TableSearchable r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: boolean hasMatch()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        i0 = $r1.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundRow>;

        $r2 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.search.AbstractSearchable$SearchResult lastSearchResult>;

        i1 = $r2.<org.jdesktop.swingx.search.AbstractSearchable$SearchResult: int foundColumn>;

        $r3 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        virtualinvoke $r3.<org.jdesktop.swingx.JXTable: void changeSelection(int,int,boolean,boolean)>(i0, i1, 0, 0);

        $r4 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        $z1 = virtualinvoke $r4.<org.jdesktop.swingx.JXTable: boolean getAutoscrolls()>();

        if $z1 != 0 goto label2;

        $r5 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        $r6 = virtualinvoke $r5.<org.jdesktop.swingx.JXTable: java.awt.Rectangle getCellRect(int,int,boolean)>(i0, i1, 1);

        if $r6 == null goto label2;

        $r7 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        virtualinvoke $r7.<org.jdesktop.swingx.JXTable: void scrollRectToVisible(java.awt.Rectangle)>($r6);

     label2:
        return;
    }

    protected void moveMatchMarker()
    {
        org.jdesktop.swingx.search.TableSearchable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: boolean markByHighlighter()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: void moveMatchByHighlighter()>();

        goto label2;

     label1:
        virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: void moveMatchBySelection()>();

     label2:
        return;
    }

    protected void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)
    {
        org.jdesktop.swingx.decorator.Highlighter r1;
        org.jdesktop.swingx.search.TableSearchable r0;
        org.jdesktop.swingx.JXTable $r2;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        r1 := @parameter0: org.jdesktop.swingx.decorator.Highlighter;

        $r2 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTable: void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)>(r1);

        return;
    }

    protected org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()
    {
        org.jdesktop.swingx.search.TableSearchable r0;
        org.jdesktop.swingx.JXTable $r1;
        org.jdesktop.swingx.decorator.Highlighter[] $r2;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        $r1 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        return $r2;
    }

    protected void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)
    {
        org.jdesktop.swingx.decorator.Highlighter r1;
        org.jdesktop.swingx.search.TableSearchable r0;
        org.jdesktop.swingx.JXTable $r2;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        r1 := @parameter0: org.jdesktop.swingx.decorator.Highlighter;

        $r2 = r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable table>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTable: void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)>(r1);

        return;
    }

    public volatile javax.swing.JComponent getTarget()
    {
        org.jdesktop.swingx.search.TableSearchable r0;
        org.jdesktop.swingx.JXTable $r1;

        r0 := @this: org.jdesktop.swingx.search.TableSearchable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.search.TableSearchable: org.jdesktop.swingx.JXTable getTarget()>();

        return $r1;
    }
}
