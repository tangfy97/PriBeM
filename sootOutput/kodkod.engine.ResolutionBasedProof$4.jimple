final class kodkod.engine.ResolutionBasedProof$4 extends java.lang.Object implements kodkod.engine.fol2sat.RecordFilter
{
    final kodkod.util.ints.IntSet coreUnits;
    final java.util.Set roots;
    final kodkod.engine.ResolutionBasedProof this$0;

    void <init>(kodkod.engine.ResolutionBasedProof)
    {
        kodkod.engine.ResolutionBasedProof r1;
        kodkod.engine.satlab.ResolutionTrace $r3;
        kodkod.engine.ResolutionBasedProof$4 r0;
        kodkod.util.ints.IntSet $r4;
        kodkod.engine.satlab.SATProver $r2;
        kodkod.engine.fol2sat.TranslationLog $r5;
        java.util.Set $r6;

        r0 := @this: kodkod.engine.ResolutionBasedProof$4;

        r1 := @parameter0: kodkod.engine.ResolutionBasedProof;

        r0.<kodkod.engine.ResolutionBasedProof$4: kodkod.engine.ResolutionBasedProof this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <kodkod.engine.ResolutionBasedProof: kodkod.engine.satlab.SATProver access$0(kodkod.engine.ResolutionBasedProof)>(r1);

        $r3 = interfaceinvoke $r2.<kodkod.engine.satlab.SATProver: kodkod.engine.satlab.ResolutionTrace proof()>();

        $r4 = staticinvoke <kodkod.engine.ucore.StrategyUtils: kodkod.util.ints.IntSet coreUnits(kodkod.engine.satlab.ResolutionTrace)>($r3);

        r0.<kodkod.engine.ResolutionBasedProof$4: kodkod.util.ints.IntSet coreUnits> = $r4;

        $r5 = virtualinvoke r1.<kodkod.engine.ResolutionBasedProof: kodkod.engine.fol2sat.TranslationLog log()>();

        $r6 = virtualinvoke $r5.<kodkod.engine.fol2sat.TranslationLog: java.util.Set roots()>();

        r0.<kodkod.engine.ResolutionBasedProof$4: java.util.Set roots> = $r6;

        return;
    }

    public boolean accept(kodkod.ast.Node, kodkod.ast.Formula, int, java.util.Map)
    {
        kodkod.engine.ResolutionBasedProof$4 r0;
        kodkod.ast.Formula r1;
        kodkod.util.ints.IntSet $r3;
        java.util.Set $r2;
        kodkod.ast.Node r4;
        java.util.Map r5;
        int i0, $i1;
        boolean $z0, $z1;

        r0 := @this: kodkod.engine.ResolutionBasedProof$4;

        r4 := @parameter0: kodkod.ast.Node;

        r1 := @parameter1: kodkod.ast.Formula;

        i0 := @parameter2: int;

        r5 := @parameter3: java.util.Map;

        $r2 = r0.<kodkod.engine.ResolutionBasedProof$4: java.util.Set roots>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<kodkod.engine.ResolutionBasedProof$4: kodkod.util.ints.IntSet coreUnits>;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        $z1 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean contains(int)>($i1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
