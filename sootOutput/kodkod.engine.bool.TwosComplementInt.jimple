final class kodkod.engine.bool.TwosComplementInt extends kodkod.engine.bool.Int
{
    private final kodkod.engine.bool.BooleanValue[] bits;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/engine/bool/TwosComplementInt;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.engine.bool.TwosComplementInt: boolean $assertionsDisabled> = $z1;

        return;
    }

    private void <init>(kodkod.engine.bool.BooleanFactory, kodkod.engine.bool.BooleanValue[])
    {
        kodkod.engine.bool.BooleanValue[] r2;
        kodkod.engine.bool.TwosComplementInt r0;
        kodkod.engine.bool.BooleanFactory r1;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.BooleanFactory;

        r2 := @parameter1: kodkod.engine.bool.BooleanValue[];

        specialinvoke r0.<kodkod.engine.bool.Int: void <init>(kodkod.engine.bool.BooleanFactory)>(r1);

        r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits> = r2;

        return;
    }

    void <init>(kodkod.engine.bool.BooleanFactory, int, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanValue r3, $r5;
        kodkod.engine.bool.BooleanFactory r1;
        kodkod.engine.bool.BooleanValue[] $r2, $r4;
        int i0, $i1, $i2, $i3, $i4, i5;
        kodkod.engine.bool.TwosComplementInt r0;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.BooleanFactory;

        i0 := @parameter1: int;

        r3 := @parameter2: kodkod.engine.bool.BooleanValue;

        specialinvoke r0.<kodkod.engine.bool.Int: void <init>(kodkod.engine.bool.BooleanFactory)>(r1);

        $i1 = specialinvoke r0.<kodkod.engine.bool.TwosComplementInt: int bitwidth(int)>(i0);

        $r2 = newarray (kodkod.engine.bool.BooleanValue)[$i1];

        r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits> = $r2;

        i5 = 0;

        goto label4;

     label1:
        $r4 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $i4 = i5;

        $i2 = 1 << i5;

        $i3 = i0 & $i2;

        if $i3 != 0 goto label2;

        $r5 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        goto label3;

     label2:
        $r5 = r3;

     label3:
        $r4[$i4] = $r5;

        i5 = i5 + 1;

     label4:
        if i5 < $i1 goto label1;

        return;
    }

    private int bitwidth(int)
    {
        kodkod.engine.bool.BooleanFactory $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        kodkod.engine.bool.TwosComplementInt r0;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $i6 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i8 = 33 - $i6;

        $r2 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $i7 = $r2.<kodkod.engine.bool.BooleanFactory: int bitwidth>;

        $i9 = staticinvoke <java.lang.StrictMath: int min(int,int)>($i8, $i7);

        return $i9;

     label1:
        if i0 >= 0 goto label2;

        $i11 = (int) -1;

        $i1 = i0 ^ $i11;

        $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i1);

        $i4 = 33 - $i2;

        $r1 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $i3 = $r1.<kodkod.engine.bool.BooleanFactory: int bitwidth>;

        $i5 = staticinvoke <java.lang.StrictMath: int min(int,int)>($i4, $i3);

        return $i5;

     label2:
        return 1;
    }

    public final boolean isConstant()
    {
        kodkod.engine.bool.BooleanValue $r1;
        kodkod.engine.bool.BooleanConstant $r2, $r3;
        int $i0, i1, $i3;
        kodkod.engine.bool.TwosComplementInt r0;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: int width()>();

        i1 = $i0 - 1;

        goto label3;

     label1:
        $r1 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i1);

        $r2 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if $r1 == $r2 goto label2;

        $r3 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if $r1 == $r3 goto label2;

        return 0;

     label2:
        $i3 = (int) -1;

        i1 = i1 + $i3;

     label3:
        if i1 >= 0 goto label1;

        return 1;
    }

    public final java.util.List twosComplementBits()
    {
        kodkod.engine.bool.TwosComplementInt$1 $r0;
        kodkod.engine.bool.TwosComplementInt r1;

        r1 := @this: kodkod.engine.bool.TwosComplementInt;

        $r0 = new kodkod.engine.bool.TwosComplementInt$1;

        specialinvoke $r0.<kodkod.engine.bool.TwosComplementInt$1: void <init>(kodkod.engine.bool.TwosComplementInt)>(r1);

        return $r0;
    }

    public int width()
    {
        int $i0;
        kodkod.engine.bool.BooleanValue[] $r1;
        kodkod.engine.bool.TwosComplementInt r0;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        $r1 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public final int value()
    {
        java.lang.IllegalStateException $r8, $r19;
        kodkod.engine.bool.BooleanConstant $r3, $r6, $r14, $r17;
        kodkod.engine.bool.BooleanValue $r4, $r7, $r15, $r18;
        int $i0, i1, $i2, $i3, i4, i5;
        java.lang.String $r12, $r23;
        kodkod.engine.bool.TwosComplementInt r0;
        kodkod.engine.bool.BooleanValue[] $r1, $r2, $r5, $r13, $r16;
        java.lang.StringBuilder $r9, $r10, $r11, $r20, $r21, $r22;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        i4 = 0;

        $r1 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $i0 = lengthof $r1;

        i1 = $i0 - 1;

        i5 = 0;

        goto label4;

     label1:
        $r2 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r4 = $r2[i5];

        $r3 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if $r4 != $r3 goto label2;

        $i2 = 1 << i5;

        i4 = i4 + $i2;

        goto label3;

     label2:
        $r5 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r7 = $r5[i5];

        $r6 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if $r7 == $r6 goto label3;

        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not constant.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label3:
        i5 = i5 + 1;

     label4:
        if i5 < i1 goto label1;

        $r13 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r15 = $r13[i1];

        $r14 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if $r15 != $r14 goto label5;

        $i3 = 1 << i1;

        i4 = i4 - $i3;

        goto label6;

     label5:
        $r16 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r18 = $r16[i1];

        $r17 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if $r18 == $r17 goto label6;

        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not constant.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label6:
        return i4;
    }

    public final kodkod.engine.bool.BooleanValue bit(int)
    {
        kodkod.engine.bool.BooleanValue $r3;
        kodkod.engine.bool.BooleanValue[] $r1, $r2;
        int i0, $i1, $i2, $i3;
        kodkod.engine.bool.TwosComplementInt r0;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        i0 := @parameter0: int;

        $r2 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r1 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $i1 = lengthof $r1;

        $i2 = $i1 - 1;

        $i3 = staticinvoke <java.lang.StrictMath: int min(int,int)>(i0, $i2);

        $r3 = $r2[$i3];

        return $r3;
    }

    public final kodkod.engine.bool.BooleanValue eq(kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.Operator$Nary $r2;
        kodkod.engine.bool.BooleanValue $r5, $r6, $r7, $r8, $r12;
        kodkod.engine.bool.BooleanConstant $r9, $r10;
        kodkod.engine.bool.BooleanAccumulator $r3;
        int $i0, $i1, $i2, i3;
        kodkod.engine.bool.TwosComplementInt r0;
        kodkod.engine.bool.Int r1;
        kodkod.engine.bool.BooleanFactory $r4, $r11;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: void validate(kodkod.engine.bool.Int)>(r1);

        $r2 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r3 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r2);

        i3 = 0;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: int width()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.Int: int width()>();

        $i2 = staticinvoke <java.lang.StrictMath: int max(int,int)>($i0, $i1);

        goto label3;

     label1:
        $r4 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r5 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r6 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r7 = virtualinvoke $r4.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue iff(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r5, $r6);

        $r8 = virtualinvoke $r3.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r7);

        $r9 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if $r8 != $r9 goto label2;

        $r10 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        return $r10;

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < $i2 goto label1;

        $r11 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r12 = virtualinvoke $r11.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r3);

        return $r12;
    }

    public final kodkod.engine.bool.BooleanValue lt(kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.Operator$Nary $r3;
        kodkod.engine.bool.BooleanValue $r2, $r6, $r7, $r8, $r11, $r12;
        kodkod.engine.bool.BooleanAccumulator $r4;
        int $i0, $i1, $i2, i3;
        kodkod.engine.bool.TwosComplementInt r0;
        kodkod.engine.bool.Int r1;
        kodkod.engine.bool.BooleanFactory $r5, $r9, $r10;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        $r2 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue lte(kodkod.engine.bool.Int)>(r1);

        $r3 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r4 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r3);

        i3 = 0;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: int width()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.Int: int width()>();

        $i2 = staticinvoke <java.lang.StrictMath: int max(int,int)>($i0, $i1);

        goto label2;

     label1:
        $r5 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r6 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r7 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r8 = virtualinvoke $r5.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue xor(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r6, $r7);

        virtualinvoke $r4.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r8);

        i3 = i3 + 1;

     label2:
        if i3 < $i2 goto label1;

        $r10 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r9 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r11 = virtualinvoke $r9.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r4);

        $r12 = virtualinvoke $r10.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r2, $r11);

        return $r12;
    }

    public kodkod.engine.bool.BooleanValue lte(kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.Operator$Nary $r2;
        kodkod.engine.bool.BooleanValue $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r15, $r16, $r19, $r21, r22;
        kodkod.engine.bool.BooleanAccumulator $r3;
        int $i0, $i1, $i2, i3, i4, $i6;
        kodkod.engine.bool.TwosComplementInt r0;
        kodkod.engine.bool.Int r1;
        kodkod.engine.bool.BooleanFactory $r4, $r8, $r13, $r14, $r17, $r18, $r20;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: void validate(kodkod.engine.bool.Int)>(r1);

        $r2 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r3 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r2);

        $i0 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: int width()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.Int: int width()>();

        $i2 = staticinvoke <java.lang.StrictMath: int max(int,int)>($i0, $i1);

        i3 = $i2 - 1;

        $r4 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r5 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r6 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r7 = virtualinvoke $r4.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue implies(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r5, $r6);

        virtualinvoke $r3.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r7);

        $r8 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r9 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r10 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        r22 = virtualinvoke $r8.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue iff(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r9, $r10);

        i4 = i3 - 1;

        goto label2;

     label1:
        $r11 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i4);

        $r12 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i4);

        $r14 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r13 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r15 = virtualinvoke $r13.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue implies(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r11, $r12);

        $r16 = virtualinvoke $r14.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue implies(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r22, $r15);

        virtualinvoke $r3.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r16);

        $r18 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r17 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r19 = virtualinvoke $r17.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue iff(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r11, $r12);

        r22 = virtualinvoke $r18.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r22, $r19);

        $i6 = (int) -1;

        i4 = i4 + $i6;

     label2:
        if i4 >= 0 goto label1;

        $r20 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r21 = virtualinvoke $r20.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r3);

        return $r21;
    }

    public kodkod.engine.bool.Int plus(kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.BooleanValue $r4, $r5, $r7, r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        kodkod.engine.bool.TwosComplementInt r0, $r9;
        kodkod.engine.bool.Int r1;
        kodkod.engine.bool.BooleanFactory $r2, $r6, $r8, $r10;
        kodkod.engine.bool.BooleanValue[] r3;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: void validate(kodkod.engine.bool.Int)>(r1);

        $i0 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: int width()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.Int: int width()>();

        $i2 = staticinvoke <java.lang.StrictMath: int max(int,int)>($i0, $i1);

        $i4 = $i2 + 1;

        $r2 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $i3 = $r2.<kodkod.engine.bool.BooleanFactory: int bitwidth>;

        $i5 = staticinvoke <java.lang.StrictMath: int min(int,int)>($i4, $i3);

        r3 = newarray (kodkod.engine.bool.BooleanValue)[$i5];

        r11 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        i6 = 0;

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i6);

        $r5 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i6);

        $r6 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r7 = virtualinvoke $r6.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue sum(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r4, $r5, r11);

        r3[i6] = $r7;

        $r8 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        r11 = virtualinvoke $r8.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue carry(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r4, $r5, r11);

        i6 = i6 + 1;

     label2:
        if i6 < $i5 goto label1;

        $r9 = new kodkod.engine.bool.TwosComplementInt;

        $r10 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        specialinvoke $r9.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r10, r3);

        return $r9;
    }

    public kodkod.engine.bool.Int minus(kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.BooleanValue $r4, $r5, $r6, $r8, r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        kodkod.engine.bool.TwosComplementInt r0, $r10;
        kodkod.engine.bool.Int r1;
        kodkod.engine.bool.BooleanFactory $r2, $r7, $r9, $r11;
        kodkod.engine.bool.BooleanValue[] r3;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: void validate(kodkod.engine.bool.Int)>(r1);

        $i0 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: int width()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.Int: int width()>();

        $i2 = staticinvoke <java.lang.StrictMath: int max(int,int)>($i0, $i1);

        $i4 = $i2 + 1;

        $r2 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $i3 = $r2.<kodkod.engine.bool.BooleanFactory: int bitwidth>;

        $i5 = staticinvoke <java.lang.StrictMath: int min(int,int)>($i4, $i3);

        r3 = newarray (kodkod.engine.bool.BooleanValue)[$i5];

        r12 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        i6 = 0;

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i6);

        $r5 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i6);

        $r6 = virtualinvoke $r5.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r7 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r8 = virtualinvoke $r7.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue sum(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r4, $r6, r12);

        r3[i6] = $r8;

        $r9 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        r12 = virtualinvoke $r9.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue carry(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r4, $r6, r12);

        i6 = i6 + 1;

     label2:
        if i6 < $i5 goto label1;

        $r10 = new kodkod.engine.bool.TwosComplementInt;

        $r11 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        specialinvoke $r10.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r11, r3);

        return $r10;
    }

    private kodkod.engine.bool.BooleanValue addAndCarry(int, kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanValue r2, r3, r4, $r7, $r9;
        kodkod.engine.bool.BooleanFactory $r5, $r8;
        kodkod.engine.bool.BooleanValue[] $r1, $r6;
        int i0;
        kodkod.engine.bool.TwosComplementInt r0;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        i0 := @parameter0: int;

        r3 := @parameter1: kodkod.engine.bool.BooleanValue;

        r4 := @parameter2: kodkod.engine.bool.BooleanValue;

        $r1 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        r2 = $r1[i0];

        $r6 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r5 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r7 = virtualinvoke $r5.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue sum(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r2, r3, r4);

        $r6[i0] = $r7;

        $r8 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r9 = virtualinvoke $r8.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue carry(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r2, r3, r4);

        return $r9;
    }

    public kodkod.engine.bool.Int multiply(kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.BooleanValue $r6, $r8, $r9, $r10, $r12, $r13, $r15, $r16, $r17, $r18, r20;
        kodkod.engine.bool.BooleanConstant $r19;
        kodkod.engine.bool.TwosComplementInt r0, $r4;
        kodkod.engine.bool.BooleanFactory $r2, $r5, $r7, $r11, $r14;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7, i8, i9, i10;
        kodkod.engine.bool.Int r1;
        kodkod.engine.bool.BooleanValue[] r3;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: void validate(kodkod.engine.bool.Int)>(r1);

        $i0 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: int width()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.Int: int width()>();

        $i3 = $i0 + $i1;

        $r2 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $i2 = $r2.<kodkod.engine.bool.BooleanFactory: int bitwidth>;

        $i4 = staticinvoke <java.lang.StrictMath: int min(int,int)>($i3, $i2);

        r3 = newarray (kodkod.engine.bool.BooleanValue)[$i4];

        $r4 = new kodkod.engine.bool.TwosComplementInt;

        $r5 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        specialinvoke $r4.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r5, r3);

        $r6 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(0);

        i7 = 0;

        goto label2;

     label1:
        $r7 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r8 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i7);

        $r9 = virtualinvoke $r7.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r6, $r8);

        r3[i7] = $r9;

        i7 = i7 + 1;

     label2:
        if i7 < $i4 goto label1;

        i8 = $i4 - 1;

        i9 = 1;

        goto label6;

     label3:
        r20 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        $r10 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i9);

        i10 = 0;

        i5 = $i4 - i9;

        goto label5;

     label4:
        $i6 = i10 + i9;

        $r11 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r12 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i10);

        $r13 = virtualinvoke $r11.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r10, $r12);

        r20 = specialinvoke $r4.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue addAndCarry(int,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($i6, $r13, r20);

        i10 = i10 + 1;

     label5:
        if i10 < i5 goto label4;

        i9 = i9 + 1;

     label6:
        if i9 < i8 goto label3;

        $r14 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r15 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i8);

        $r16 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(0);

        $r17 = virtualinvoke $r14.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r15, $r16);

        $r18 = virtualinvoke $r17.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r19 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        specialinvoke $r4.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue addAndCarry(int,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(i8, $r18, $r19);

        return $r4;
    }

    private kodkod.engine.bool.BooleanValue[] extend(int)
    {
        kodkod.engine.bool.BooleanValue $r3, r5;
        kodkod.engine.bool.BooleanValue[] r0, $r2, $r4;
        int i0, $i1, $i2, i3, i4;
        kodkod.engine.bool.TwosComplementInt r1;

        r1 := @this: kodkod.engine.bool.TwosComplementInt;

        i0 := @parameter0: int;

        r0 = newarray (kodkod.engine.bool.BooleanValue)[i0];

        $i1 = virtualinvoke r1.<kodkod.engine.bool.TwosComplementInt: int width()>();

        i3 = 0;

        goto label2;

     label1:
        $r2 = r1.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r3 = $r2[i3];

        r0[i3] = $r3;

        i3 = i3 + 1;

     label2:
        if i3 < $i1 goto label1;

        $r4 = r1.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $i2 = $i1 - 1;

        r5 = $r4[$i2];

        i4 = $i1;

        goto label4;

     label3:
        r0[i4] = r5;

        i4 = i4 + 1;

     label4:
        if i4 < i0 goto label3;

        return r0;
    }

    private kodkod.engine.bool.BooleanValue[] nonRestoringDivision(kodkod.engine.bool.Int, boolean)
    {
        kodkod.engine.bool.Operator$Nary $r7, $r21, $r33;
        kodkod.engine.bool.BooleanAccumulator $r9, $r25, $r35;
        java.lang.AssertionError $r61;
        kodkod.engine.bool.BooleanValue[] $r2, r3, r4, r68;
        kodkod.engine.bool.BooleanValue $r6, $r10, $r11, $r13, $r16, $r17, $r19, $r26, $r27, $r30, $r31, $r32, $r36, $r37, $r38, $r40, $r41, $r42, $r46, $r47, $r48, $r50, $r55, $r56, $r59, r62, r63, r64, r65, r66, r67;
        kodkod.engine.bool.BooleanConstant $r14, $r52;
        kodkod.engine.bool.TwosComplementInt r0;
        boolean $z0, z1;
        kodkod.engine.bool.BooleanFactory $r1, $r8, $r12, $r15, $r18, $r20, $r22, $r23, $r24, $r28, $r29, $r34, $r39, $r43, $r44, $r45, $r49, $r51, $r53, $r54, $r57, $r58, $r60;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18;
        kodkod.engine.bool.Int r5;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r5 := @parameter0: kodkod.engine.bool.Int;

        z1 := @parameter1: boolean;

        $r1 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        i0 = $r1.<kodkod.engine.bool.BooleanFactory: int bitwidth>;

        $i1 = i0 * 2;

        i2 = $i1 + 1;

        $r2 = specialinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] extend(int)>(i2);

        r3 = newarray (kodkod.engine.bool.BooleanValue)[i0];

        r4 = newarray (kodkod.engine.bool.BooleanValue)[i0];

        $r6 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i0);

        i12 = 0;

        i13 = 0;

        goto label04;

     label01:
        $r8 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r7 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r9 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue[])>($r7, $r2);

        $r10 = virtualinvoke $r8.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r9);

        r4[i13] = $r10;

        $i3 = i12 + i2;

        $i4 = $i3 - 1;

        i14 = $i4 % i2;

        $r12 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r11 = $r2[i14];

        $r13 = virtualinvoke $r12.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue iff(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r11, $r6);

        $i5 = i0 - i13;

        $i6 = $i5 - 1;

        r3[$i6] = $r13;

        $r14 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        $r2[i14] = $r14;

        i12 = i14;

        r62 = $r13;

        i15 = 0;

        $i7 = i14 + i0;

        i16 = $i7 % i2;

        goto label03;

     label02:
        $r15 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r16 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i15);

        $r17 = virtualinvoke $r15.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue xor(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r13, $r16);

        r63 = $r2[i16];

        $r18 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r19 = virtualinvoke $r18.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue sum(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r63, $r17, r62);

        $r2[i16] = $r19;

        $r20 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        r62 = virtualinvoke $r20.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue carry(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r63, $r17, r62);

        i15 = i15 + 1;

        $i8 = i16 + 1;

        i16 = $i8 % i2;

     label03:
        if i15 <= i0 goto label02;

        i13 = i13 + 1;

     label04:
        if i13 < i0 goto label01;

        $z0 = <kodkod.engine.bool.TwosComplementInt: boolean $assertionsDisabled>;

        if $z0 != 0 goto label05;

        $i10 = i12 + i0;

        $i11 = $i10 % i2;

        if $i11 == 0 goto label05;

        $r61 = new java.lang.AssertionError;

        specialinvoke $r61.<java.lang.AssertionError: void <init>()>();

        throw $r61;

     label05:
        $r22 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r23 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r24 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r21 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r25 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue[])>($r21, r4);

        $r26 = virtualinvoke $r24.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r25);

        $r27 = virtualinvoke $r23.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue not(kodkod.engine.bool.BooleanValue)>($r26);

        $r28 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r29 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r30 = $r2[i0];

        $r31 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i0);

        $r32 = virtualinvoke $r29.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue xor(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r30, $r31);

        $r34 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r33 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r35 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue[])>($r33, $r2);

        $r36 = virtualinvoke $r34.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r35);

        $r37 = virtualinvoke $r28.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r32, $r36);

        $r38 = virtualinvoke $r22.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r27, $r37);

        $r39 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r40 = $r2[i0];

        $r41 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i0);

        $r42 = virtualinvoke $r39.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue iff(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r40, $r41);

        if z1 == 0 goto label08;

        $i9 = i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r3, 1, $i9);

        $r52 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        r3[0] = $r52;

        $r54 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r53 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r55 = virtualinvoke $r53.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue not(kodkod.engine.bool.BooleanValue)>($r42);

        $r56 = virtualinvoke $r54.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r38, $r55);

        $r57 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        r64 = virtualinvoke $r57.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r38, $r42);

        i17 = 0;

        goto label07;

     label06:
        r65 = r3[i17];

        $r58 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r59 = virtualinvoke $r58.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue sum(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r65, $r56, r64);

        r3[i17] = $r59;

        $r60 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        r64 = virtualinvoke $r60.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue carry(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r65, $r56, r64);

        i17 = i17 + 1;

     label07:
        if i17 < i0 goto label06;

        return r3;

     label08:
        $r43 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        r66 = virtualinvoke $r43.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r38, $r42);

        i18 = 0;

        goto label10;

     label09:
        $r44 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r45 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r46 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i18);

        $r47 = virtualinvoke $r45.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue xor(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r42, $r46);

        $r48 = virtualinvoke $r44.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r38, $r47);

        r67 = $r2[i18];

        $r49 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r50 = virtualinvoke $r49.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue sum(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r67, $r48, r66);

        $r2[i18] = $r50;

        $r51 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        r66 = virtualinvoke $r51.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue carry(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r67, $r48, r66);

        i18 = i18 + 1;

     label10:
        if i18 <= i0 goto label09;

        r68 = newarray (kodkod.engine.bool.BooleanValue)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r68, 0, i0);

        return r68;
    }

    public kodkod.engine.bool.Int divide(kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.Int r1;
        kodkod.engine.bool.BooleanFactory $r3;
        kodkod.engine.bool.BooleanValue[] $r4;
        kodkod.engine.bool.TwosComplementInt r0, $r2;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: void validate(kodkod.engine.bool.Int)>(r1);

        $r2 = new kodkod.engine.bool.TwosComplementInt;

        $r3 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r4 = specialinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] nonRestoringDivision(kodkod.engine.bool.Int,boolean)>(r1, 1);

        specialinvoke $r2.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r3, $r4);

        return $r2;
    }

    public kodkod.engine.bool.Int modulo(kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.Int r1;
        kodkod.engine.bool.BooleanFactory $r3;
        kodkod.engine.bool.BooleanValue[] $r4;
        kodkod.engine.bool.TwosComplementInt r0, $r2;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: void validate(kodkod.engine.bool.Int)>(r1);

        $r2 = new kodkod.engine.bool.TwosComplementInt;

        $r3 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r4 = specialinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] nonRestoringDivision(kodkod.engine.bool.Int,boolean)>(r1, 0);

        specialinvoke $r2.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r3, $r4);

        return $r2;
    }

    public kodkod.engine.bool.Int choice(kodkod.engine.bool.BooleanValue, kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.BooleanValue r3, $r5, $r6, $r7;
        kodkod.engine.bool.Int r1;
        kodkod.engine.bool.BooleanFactory $r4, $r9;
        kodkod.engine.bool.BooleanValue[] r2;
        int $i0, $i1, $i2, i3;
        kodkod.engine.bool.TwosComplementInt r0, $r8;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r3 := @parameter0: kodkod.engine.bool.BooleanValue;

        r1 := @parameter1: kodkod.engine.bool.Int;

        virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: void validate(kodkod.engine.bool.Int)>(r1);

        $i0 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: int width()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.Int: int width()>();

        $i2 = staticinvoke <java.lang.StrictMath: int max(int,int)>($i0, $i1);

        r2 = newarray (kodkod.engine.bool.BooleanValue)[$i2];

        i3 = 0;

        goto label2;

     label1:
        $r4 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r5 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r6 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r7 = virtualinvoke $r4.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue ite(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r3, $r5, $r6);

        r2[i3] = $r7;

        i3 = i3 + 1;

     label2:
        if i3 < $i2 goto label1;

        $r8 = new kodkod.engine.bool.TwosComplementInt;

        $r9 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        specialinvoke $r8.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r9, r2);

        return $r8;
    }

    public kodkod.engine.bool.Int and(kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.BooleanValue $r4, $r5, $r6;
        kodkod.engine.bool.Int r1;
        kodkod.engine.bool.BooleanFactory $r3, $r8;
        kodkod.engine.bool.BooleanValue[] r2;
        int $i0, $i1, $i2, i3;
        kodkod.engine.bool.TwosComplementInt r0, $r7;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: void validate(kodkod.engine.bool.Int)>(r1);

        $i0 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: int width()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.Int: int width()>();

        $i2 = staticinvoke <java.lang.StrictMath: int max(int,int)>($i0, $i1);

        r2 = newarray (kodkod.engine.bool.BooleanValue)[$i2];

        i3 = 0;

        goto label2;

     label1:
        $r3 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r4 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r5 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r6 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r4, $r5);

        r2[i3] = $r6;

        i3 = i3 + 1;

     label2:
        if i3 < $i2 goto label1;

        $r7 = new kodkod.engine.bool.TwosComplementInt;

        $r8 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        specialinvoke $r7.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r8, r2);

        return $r7;
    }

    public kodkod.engine.bool.Int or(kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.BooleanValue $r4, $r5, $r6;
        kodkod.engine.bool.Int r1;
        kodkod.engine.bool.BooleanFactory $r3, $r8;
        kodkod.engine.bool.BooleanValue[] r2;
        int $i0, $i1, $i2, i3;
        kodkod.engine.bool.TwosComplementInt r0, $r7;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: void validate(kodkod.engine.bool.Int)>(r1);

        $i0 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: int width()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.Int: int width()>();

        $i2 = staticinvoke <java.lang.StrictMath: int max(int,int)>($i0, $i1);

        r2 = newarray (kodkod.engine.bool.BooleanValue)[$i2];

        i3 = 0;

        goto label2;

     label1:
        $r3 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r4 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r5 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r6 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r4, $r5);

        r2[i3] = $r6;

        i3 = i3 + 1;

     label2:
        if i3 < $i2 goto label1;

        $r7 = new kodkod.engine.bool.TwosComplementInt;

        $r8 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        specialinvoke $r7.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r8, r2);

        return $r7;
    }

    public kodkod.engine.bool.Int xor(kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.BooleanValue $r4, $r5, $r6;
        kodkod.engine.bool.Int r1;
        kodkod.engine.bool.BooleanFactory $r3, $r8;
        kodkod.engine.bool.BooleanValue[] r2;
        int $i0, $i1, $i2, i3;
        kodkod.engine.bool.TwosComplementInt r0, $r7;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: void validate(kodkod.engine.bool.Int)>(r1);

        $i0 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: int width()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.Int: int width()>();

        $i2 = staticinvoke <java.lang.StrictMath: int max(int,int)>($i0, $i1);

        r2 = newarray (kodkod.engine.bool.BooleanValue)[$i2];

        i3 = 0;

        goto label2;

     label1:
        $r3 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r4 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r5 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i3);

        $r6 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue xor(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r4, $r5);

        r2[i3] = $r6;

        i3 = i3 + 1;

     label2:
        if i3 < $i2 goto label1;

        $r7 = new kodkod.engine.bool.TwosComplementInt;

        $r8 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        specialinvoke $r7.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r8, r2);

        return $r7;
    }

    public kodkod.engine.bool.Int shl(kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.BooleanValue $r6, $r10, $r11, $r12;
        int i0, $i1, $i2, i3, i4, $i5, $i6, i7, i8, $i10;
        kodkod.engine.bool.TwosComplementInt r0, $r13;
        kodkod.engine.bool.Int r1;
        kodkod.engine.bool.BooleanFactory $r2, $r4, $r8;
        kodkod.engine.bool.BooleanValue[] $r5, $r7, $r9;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: void validate(kodkod.engine.bool.Int)>(r1);

        $r2 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        i0 = $r2.<kodkod.engine.bool.BooleanFactory: int bitwidth>;

        $r13 = new kodkod.engine.bool.TwosComplementInt;

        $r4 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r5 = specialinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] extend(int)>(i0);

        specialinvoke $r13.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r4, $r5);

        $i1 = i0 - 1;

        $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i1);

        i3 = 32 - $i2;

        i7 = 0;

        goto label6;

     label1:
        i4 = 1 << i7;

        $r6 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i7);

        i8 = i0 - 1;

        goto label5;

     label2:
        $r7 = $r13.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $i6 = i8;

        $r8 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        if i8 >= i4 goto label3;

        $r12 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        goto label4;

     label3:
        $i5 = i8 - i4;

        $r12 = virtualinvoke $r13.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>($i5);

     label4:
        $r9 = $r13.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r10 = $r9[i8];

        $r11 = virtualinvoke $r8.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue ite(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r6, $r12, $r10);

        $r7[$i6] = $r11;

        $i10 = (int) -1;

        i8 = i8 + $i10;

     label5:
        if i8 >= 0 goto label2;

        i7 = i7 + 1;

     label6:
        if i7 < i3 goto label1;

        return $r13;
    }

    private kodkod.engine.bool.Int shr(kodkod.engine.bool.Int, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanValue $r6, r7, $r9, $r12, $r13;
        int i0, $i1, $i2, i3, i4, i5, $i6, $i7, i8, i9;
        kodkod.engine.bool.TwosComplementInt r0, $r3;
        kodkod.engine.bool.Int r1;
        kodkod.engine.bool.BooleanFactory $r2, $r4, $r10;
        kodkod.engine.bool.BooleanValue[] $r5, $r8, $r11;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        r7 := @parameter1: kodkod.engine.bool.BooleanValue;

        virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: void validate(kodkod.engine.bool.Int)>(r1);

        $r2 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        i0 = $r2.<kodkod.engine.bool.BooleanFactory: int bitwidth>;

        $r3 = new kodkod.engine.bool.TwosComplementInt;

        $r4 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r5 = specialinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] extend(int)>(i0);

        specialinvoke $r3.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r4, $r5);

        $i1 = i0 - 1;

        $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i1);

        i3 = 32 - $i2;

        i8 = 0;

        goto label6;

     label1:
        i4 = 1 << i8;

        i5 = i0 - i4;

        $r6 = virtualinvoke r1.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i8);

        i9 = 0;

        goto label5;

     label2:
        $r11 = $r3.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $i7 = i9;

        $r10 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        if i9 >= i5 goto label3;

        $i6 = i9 + i4;

        $r13 = virtualinvoke $r3.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>($i6);

        goto label4;

     label3:
        $r13 = r7;

     label4:
        $r8 = $r3.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r9 = $r8[i9];

        $r12 = virtualinvoke $r10.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue ite(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r6, $r13, $r9);

        $r11[$i7] = $r12;

        i9 = i9 + 1;

     label5:
        if i9 < i0 goto label2;

        i8 = i8 + 1;

     label6:
        if i8 < i3 goto label1;

        return $r3;
    }

    public kodkod.engine.bool.Int shr(kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.BooleanConstant $r2;
        kodkod.engine.bool.Int r1, $r3;
        kodkod.engine.bool.TwosComplementInt r0;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        $r2 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        $r3 = specialinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.Int shr(kodkod.engine.bool.Int,kodkod.engine.bool.BooleanValue)>(r1, $r2);

        return $r3;
    }

    public kodkod.engine.bool.Int sha(kodkod.engine.bool.Int)
    {
        kodkod.engine.bool.BooleanValue $r4;
        kodkod.engine.bool.Int r1, $r5;
        kodkod.engine.bool.BooleanValue[] $r2, $r3;
        int $i0, $i1;
        kodkod.engine.bool.TwosComplementInt r0;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int;

        $r3 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r2 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $i0 = lengthof $r2;

        $i1 = $i0 - 1;

        $r4 = $r3[$i1];

        $r5 = specialinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.Int shr(kodkod.engine.bool.Int,kodkod.engine.bool.BooleanValue)>(r1, $r4);

        return $r5;
    }

    public kodkod.engine.bool.Int negate()
    {
        kodkod.engine.bool.BooleanConstant $r3;
        kodkod.engine.bool.BooleanFactory $r4;
        kodkod.engine.bool.Int $r5;
        kodkod.engine.bool.BooleanValue[] $r2;
        kodkod.engine.bool.TwosComplementInt $r0, r1;

        r1 := @this: kodkod.engine.bool.TwosComplementInt;

        $r0 = new kodkod.engine.bool.TwosComplementInt;

        $r4 = r1.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r2 = newarray (kodkod.engine.bool.BooleanValue)[1];

        $r3 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        $r2[0] = $r3;

        specialinvoke $r0.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r4, $r2);

        $r5 = virtualinvoke $r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.Int minus(kodkod.engine.bool.Int)>(r1);

        return $r5;
    }

    public kodkod.engine.bool.Int not()
    {
        kodkod.engine.bool.BooleanValue $r3, $r5;
        kodkod.engine.bool.BooleanFactory $r4, $r7;
        kodkod.engine.bool.BooleanValue[] r1, $r2;
        int $i0, i1;
        kodkod.engine.bool.TwosComplementInt r0, $r6;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: int width()>();

        r1 = newarray (kodkod.engine.bool.BooleanValue)[$i0];

        i1 = 0;

        goto label2;

     label1:
        $r4 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r2 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r3 = $r2[i1];

        $r5 = virtualinvoke $r4.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue not(kodkod.engine.bool.BooleanValue)>($r3);

        r1[i1] = $r5;

        i1 = i1 + 1;

     label2:
        if i1 < $i0 goto label1;

        $r6 = new kodkod.engine.bool.TwosComplementInt;

        $r7 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        specialinvoke $r6.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r7, r1);

        return $r6;
    }

    public kodkod.engine.bool.Int abs()
    {
        kodkod.engine.bool.BooleanValue $r3, $r5;
        kodkod.engine.bool.BooleanFactory $r4;
        kodkod.engine.bool.Int $r6, $r7;
        kodkod.engine.bool.BooleanValue[] $r1, $r2;
        int $i0, $i1;
        kodkod.engine.bool.TwosComplementInt r0;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        $r4 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r2 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r1 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        $r3 = $r2[$i1];

        $r5 = virtualinvoke $r4.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue not(kodkod.engine.bool.BooleanValue)>($r3);

        $r6 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.Int negate()>();

        $r7 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.Int choice(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.Int)>($r5, $r6);

        return $r7;
    }

    public kodkod.engine.bool.Int sgn()
    {
        kodkod.engine.bool.Operator$Nary $r3;
        kodkod.engine.bool.BooleanValue $r6, $r9;
        kodkod.engine.bool.BooleanFactory $r4, $r11;
        kodkod.engine.bool.BooleanAccumulator $r5;
        kodkod.engine.bool.BooleanValue[] r0, $r2, $r7, $r8;
        int $i0, $i1;
        kodkod.engine.bool.TwosComplementInt r1, $r10;

        r1 := @this: kodkod.engine.bool.TwosComplementInt;

        r0 = newarray (kodkod.engine.bool.BooleanValue)[2];

        $r4 = r1.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r3 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r2 = r1.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r5 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue[])>($r3, $r2);

        $r6 = virtualinvoke $r4.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r5);

        r0[0] = $r6;

        $r8 = r1.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r7 = r1.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $i0 = lengthof $r7;

        $i1 = $i0 - 1;

        $r9 = $r8[$i1];

        r0[1] = $r9;

        $r10 = new kodkod.engine.bool.TwosComplementInt;

        $r11 = r1.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        specialinvoke $r10.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r11, r0);

        return $r10;
    }

    public java.lang.String toString()
    {
        kodkod.engine.bool.BooleanValue[] $r2;
        java.lang.StringBuilder $r0, $r4;
        java.lang.String $r3, $r5;
        kodkod.engine.bool.TwosComplementInt r1;

        r1 := @this: kodkod.engine.bool.TwosComplementInt;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("b");

        $r2 = r1.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue[] bits>;

        $r3 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r2);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private transient kodkod.engine.bool.Int apply(boolean, kodkod.engine.bool.Int[])
    {
        java.lang.Object[] $r2;
        kodkod.engine.bool.Int[] r0, $r1, r3;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        kodkod.engine.bool.TwosComplementInt r4;
        boolean z0;
        kodkod.engine.bool.Int $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r4 := @this: kodkod.engine.bool.TwosComplementInt;

        z0 := @parameter0: boolean;

        r0 := @parameter1: kodkod.engine.bool.Int[];

        $i0 = lengthof r0;

        $i1 = $i0 + 1;

        $r1 = newarray (kodkod.engine.bool.Int)[$i1];

        $i2 = lengthof r0;

        $r2 = staticinvoke <kodkod.util.collections.Containers: java.lang.Object[] copy(java.lang.Object[],int,java.lang.Object[],int,int)>(r0, 0, $r1, 1, $i2);

        r3 = (kodkod.engine.bool.Int[]) $r2;

        r3[0] = r4;

        i10 = lengthof r3;

        goto label7;

     label1:
        i3 = i10 - 1;

        i11 = 0;

        goto label5;

     label2:
        $i5 = i11 / 2;

        if z0 == 0 goto label3;

        $r8 = r3[i11];

        $i6 = i11 + 1;

        $r7 = r3[$i6];

        $r11 = virtualinvoke $r8.<kodkod.engine.bool.Int: kodkod.engine.bool.Int plus(kodkod.engine.bool.Int)>($r7);

        goto label4;

     label3:
        $r6 = r3[i11];

        $i4 = i11 + 1;

        $r5 = r3[$i4];

        $r11 = virtualinvoke $r6.<kodkod.engine.bool.Int: kodkod.engine.bool.Int multiply(kodkod.engine.bool.Int)>($r5);

     label4:
        r3[$i5] = $r11;

        i11 = i11 + 2;

     label5:
        if i11 < i3 goto label2;

        $i7 = i3 % 2;

        if $i7 != 0 goto label6;

        $i9 = i3 / 2;

        $r9 = r3[i3];

        r3[$i9] = $r9;

     label6:
        $i8 = i10 / 2;

        i10 = i10 - $i8;

     label7:
        if i10 > 1 goto label1;

        $r10 = r3[0];

        return $r10;
    }

    public transient kodkod.engine.bool.Int plus(kodkod.engine.bool.Int[])
    {
        kodkod.engine.bool.Int[] r1;
        kodkod.engine.bool.TwosComplementInt r0;
        kodkod.engine.bool.Int $r2;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int[];

        $r2 = specialinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.Int apply(boolean,kodkod.engine.bool.Int[])>(1, r1);

        return $r2;
    }

    public transient kodkod.engine.bool.Int multiply(kodkod.engine.bool.Int[])
    {
        kodkod.engine.bool.Int[] r1;
        kodkod.engine.bool.TwosComplementInt r0;
        kodkod.engine.bool.Int $r2;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int[];

        $r2 = specialinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.Int apply(boolean,kodkod.engine.bool.Int[])>(0, r1);

        return $r2;
    }

    private transient kodkod.engine.bool.Int apply(kodkod.engine.bool.Operator$Nary, kodkod.engine.bool.Int[])
    {
        kodkod.engine.bool.Operator$Nary r2;
        kodkod.engine.bool.BooleanConstant $r3;
        kodkod.engine.bool.BooleanValue $r5, $r8, $r9, $r11;
        kodkod.engine.bool.BooleanAccumulator $r6;
        kodkod.engine.bool.Int[] r1;
        int $i0, i1, i2, i3, i4, i5, i6;
        kodkod.engine.bool.TwosComplementInt r0, $r12;
        kodkod.engine.bool.Int r7, r14;
        kodkod.engine.bool.BooleanFactory $r10, $r13;
        kodkod.engine.bool.BooleanValue[] $r4, r15;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r2 := @parameter0: kodkod.engine.bool.Operator$Nary;

        r1 := @parameter1: kodkod.engine.bool.Int[];

        i2 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: int width()>();

        i3 = 0;

        i4 = lengthof r1;

        goto label2;

     label1:
        r14 = r1[i3];

        virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: void validate(kodkod.engine.bool.Int)>(r14);

        $i0 = virtualinvoke r14.<kodkod.engine.bool.Int: int width()>();

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i2, $i0);

        i3 = i3 + 1;

     label2:
        if i3 < i4 goto label1;

        r15 = newarray (kodkod.engine.bool.BooleanValue)[i2];

        $r3 = virtualinvoke r2.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        i5 = 0;

        goto label8;

     label3:
        $r4 = newarray (kodkod.engine.bool.BooleanValue)[1];

        $r5 = virtualinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanValue bit(int)>(i5);

        $r4[0] = $r5;

        $r6 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue[])>(r2, $r4);

        i6 = 0;

        i1 = lengthof r1;

        goto label6;

     label4:
        r7 = r1[i6];

        $r8 = virtualinvoke r7.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue bit(int)>(i5);

        $r9 = virtualinvoke $r6.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r8);

        if $r9 != $r3 goto label5;

        goto label7;

     label5:
        i6 = i6 + 1;

     label6:
        if i6 < i1 goto label4;

     label7:
        $r10 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        $r11 = virtualinvoke $r10.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r6);

        r15[i5] = $r11;

        i5 = i5 + 1;

     label8:
        if i5 < i2 goto label3;

        $r12 = new kodkod.engine.bool.TwosComplementInt;

        $r13 = r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.BooleanFactory factory>;

        specialinvoke $r12.<kodkod.engine.bool.TwosComplementInt: void <init>(kodkod.engine.bool.BooleanFactory,kodkod.engine.bool.BooleanValue[])>($r13, r15);

        return $r12;
    }

    public transient kodkod.engine.bool.Int and(kodkod.engine.bool.Int[])
    {
        kodkod.engine.bool.Int[] r1;
        kodkod.engine.bool.Operator$Nary $r2;
        kodkod.engine.bool.Int $r3;
        kodkod.engine.bool.TwosComplementInt r0;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int[];

        $r2 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r3 = specialinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.Int apply(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.Int[])>($r2, r1);

        return $r3;
    }

    public transient kodkod.engine.bool.Int or(kodkod.engine.bool.Int[])
    {
        kodkod.engine.bool.Int[] r1;
        kodkod.engine.bool.Operator$Nary $r2;
        kodkod.engine.bool.Int $r3;
        kodkod.engine.bool.TwosComplementInt r0;

        r0 := @this: kodkod.engine.bool.TwosComplementInt;

        r1 := @parameter0: kodkod.engine.bool.Int[];

        $r2 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r3 = specialinvoke r0.<kodkod.engine.bool.TwosComplementInt: kodkod.engine.bool.Int apply(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.Int[])>($r2, r1);

        return $r3;
    }
}
