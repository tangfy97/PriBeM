class com.sun.xml.bind.v2.model.impl.TypeRefImpl extends java.lang.Object implements com.sun.xml.bind.v2.model.core.TypeRef
{
    private final javax.xml.namespace.QName elementName;
    private final java.lang.Object type;
    protected final com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl owner;
    private com.sun.xml.bind.v2.model.core.NonElement ref;
    private final boolean isNillable;
    private java.lang.String defaultValue;
    static final boolean $assertionsDisabled;

    public void <init>(com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl, javax.xml.namespace.QName, java.lang.Object, boolean, java.lang.String)
    {
        com.sun.xml.bind.v2.model.impl.TypeRefImpl r0;
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl r1;
        java.lang.AssertionError $r5, $r6, $r7;
        java.lang.Object r3;
        javax.xml.namespace.QName r2;
        java.lang.String r4;
        boolean z0, $z1, $z2, $z3;

        r0 := @this: com.sun.xml.bind.v2.model.impl.TypeRefImpl;

        r1 := @parameter0: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl;

        r2 := @parameter1: javax.xml.namespace.QName;

        r3 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        r4 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl owner> = r1;

        r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: javax.xml.namespace.QName elementName> = r2;

        r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: java.lang.Object type> = r3;

        r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: boolean isNillable> = z0;

        r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: java.lang.String defaultValue> = r4;

        $z1 = <com.sun.xml.bind.v2.model.impl.TypeRefImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        if r1 != null goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $z2 = <com.sun.xml.bind.v2.model.impl.TypeRefImpl: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        if r2 != null goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $z3 = <com.sun.xml.bind.v2.model.impl.TypeRefImpl: boolean $assertionsDisabled>;

        if $z3 != 0 goto label3;

        if r3 != null goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        return;
    }

    public com.sun.xml.bind.v2.model.core.NonElement getTarget()
    {
        com.sun.xml.bind.v2.model.impl.TypeRefImpl r0;
        com.sun.xml.bind.v2.model.core.NonElement $r1, $r2;

        r0 := @this: com.sun.xml.bind.v2.model.impl.TypeRefImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: com.sun.xml.bind.v2.model.core.NonElement ref>;

        if $r1 != null goto label1;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: void calcRef()>();

     label1:
        $r2 = r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: com.sun.xml.bind.v2.model.core.NonElement ref>;

        return $r2;
    }

    public javax.xml.namespace.QName getTagName()
    {
        com.sun.xml.bind.v2.model.impl.TypeRefImpl r0;
        javax.xml.namespace.QName $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.TypeRefImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: javax.xml.namespace.QName elementName>;

        return $r1;
    }

    public boolean isNillable()
    {
        com.sun.xml.bind.v2.model.impl.TypeRefImpl r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.TypeRefImpl;

        $z0 = r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: boolean isNillable>;

        return $z0;
    }

    public java.lang.String getDefaultValue()
    {
        com.sun.xml.bind.v2.model.impl.TypeRefImpl r0;
        java.lang.String $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.TypeRefImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: java.lang.String defaultValue>;

        return $r1;
    }

    protected void link()
    {
        com.sun.xml.bind.v2.model.impl.TypeRefImpl r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.TypeRefImpl;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: void calcRef()>();

        return;
    }

    private void calcRef()
    {
        com.sun.xml.bind.v2.model.impl.TypeRefImpl r0;
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl $r1, $r3;
        com.sun.xml.bind.v2.model.core.NonElement $r6, $r7;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r2;
        java.lang.AssertionError $r8;
        java.lang.Object $r4;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r5;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.TypeRefImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl owner>;

        $r2 = $r1.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r5 = $r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r4 = r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: java.lang.Object type>;

        $r3 = r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl owner>;

        $r6 = virtualinvoke $r5.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.NonElement getTypeInfo(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r4, $r3);

        r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: com.sun.xml.bind.v2.model.core.NonElement ref> = $r6;

        $z0 = <com.sun.xml.bind.v2.model.impl.TypeRefImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r7 = r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: com.sun.xml.bind.v2.model.core.NonElement ref>;

        if $r7 != null goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        return;
    }

    public com.sun.xml.bind.v2.model.core.PropertyInfo getSource()
    {
        com.sun.xml.bind.v2.model.impl.TypeRefImpl r0;
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.TypeRefImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl owner>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/model/impl/TypeRefImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.model.impl.TypeRefImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
