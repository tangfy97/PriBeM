class com.jidesoft.plaf.windows.XPStyle$SkinPainter extends sun.swing.CachedPainter
{

    void <init>()
    {
        com.jidesoft.plaf.windows.XPStyle$SkinPainter r0;

        r0 := @this: com.jidesoft.plaf.windows.XPStyle$SkinPainter;

        specialinvoke r0.<sun.swing.CachedPainter: void <init>(int)>(30);

        virtualinvoke r0.<com.jidesoft.plaf.windows.XPStyle$SkinPainter: void flush()>();

        return;
    }

    public void flush()
    {
        com.jidesoft.plaf.windows.XPStyle$SkinPainter r0;

        r0 := @this: com.jidesoft.plaf.windows.XPStyle$SkinPainter;

        specialinvoke r0.<sun.swing.CachedPainter: void flush()>();

        return;
    }

    protected void paintToImage(java.awt.Component, java.awt.Image, java.awt.Graphics, int, int, java.lang.Object[])
    {
        java.lang.Integer $r9;
        int[] $r11, $r12, $r23;
        com.jidesoft.plaf.windows.TMSchema$State r34, r37;
        boolean $z0, $z1, $z2, z3;
        java.awt.Image r3;
        java.awt.image.BufferedImage $r16, $r26;
        java.awt.Component r30;
        java.lang.Exception $r27;
        com.jidesoft.plaf.windows.XPStyle$Skin r32, r35;
        java.awt.Graphics r29;
        java.awt.image.DataBuffer $r5, $r22;
        java.lang.Object[] r0, $r8, $r15;
        com.jidesoft.plaf.windows.TMSchema$Part r33, r36;
        com.jidesoft.plaf.windows.XPStyle$SkinPainter r28;
        sun.awt.image.CachingSurfaceManager r31;
        sun.awt.image.SurfaceManager $r20;
        java.awt.image.DataBufferInt $r17, $r25;
        int $i0, $i1, i2, i3, $i4, $i5;
        java.lang.String $r13, $r24;
        java.lang.Class[] $r6, $r14;
        java.lang.Object $r1, $r2, $r10, $r18, $r19;
        java.awt.image.WritableRaster $r4, $r21;
        java.lang.Class $r7;

        r28 := @this: com.jidesoft.plaf.windows.XPStyle$SkinPainter;

        r30 := @parameter0: java.awt.Component;

        r3 := @parameter1: java.awt.Image;

        r29 := @parameter2: java.awt.Graphics;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r0 := @parameter5: java.lang.Object[];

        $z0 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk7Above()>();

        if $z0 != 0 goto label05;

        r31 = null;

        z3 = 0;

        $r18 = r0[0];

        r32 = (com.jidesoft.plaf.windows.XPStyle$Skin) $r18;

        r33 = r32.<com.jidesoft.plaf.windows.XPStyle$Skin: com.jidesoft.plaf.windows.TMSchema$Part part>;

        $r19 = r0[1];

        r34 = (com.jidesoft.plaf.windows.TMSchema$State) $r19;

        if r34 != null goto label01;

        r34 = r32.<com.jidesoft.plaf.windows.XPStyle$Skin: com.jidesoft.plaf.windows.TMSchema$State state>;

     label01:
        if r30 != null goto label02;

        r30 = r32.<com.jidesoft.plaf.windows.XPStyle$Skin: java.awt.Component component>;

     label02:
        $r26 = (java.awt.image.BufferedImage) r3;

        $r20 = staticinvoke <sun.awt.image.SurfaceManager: sun.awt.image.SurfaceManager getManager(java.awt.Image)>($r26);

        $z1 = $r20 instanceof sun.awt.image.CachingSurfaceManager;

        if $z1 == 0 goto label03;

        r31 = (sun.awt.image.CachingSurfaceManager) $r20;

        z3 = virtualinvoke r31.<sun.awt.image.CachingSurfaceManager: boolean isLocalAccelerationEnabled()>();

     label03:
        $r21 = virtualinvoke $r26.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r22 = virtualinvoke $r21.<java.awt.image.WritableRaster: java.awt.image.DataBuffer getDataBuffer()>();

        $r25 = (java.awt.image.DataBufferInt) $r22;

        $r23 = virtualinvoke $r25.<java.awt.image.DataBufferInt: int[] getData()>();

        $r24 = virtualinvoke r33.<com.jidesoft.plaf.windows.TMSchema$Part: java.lang.String getControlName(java.awt.Component)>(r30);

        $i4 = virtualinvoke r33.<com.jidesoft.plaf.windows.TMSchema$Part: int getValue()>();

        $i5 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$State: int getValue(com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r33, r34);

        staticinvoke <sun.awt.windows.ThemeReader: void paintBackground(int[],java.lang.String,int,int,int,int,int,int,int)>($r23, $r24, $i4, $i5, 0, 0, i2, i3, i2);

        if r31 == null goto label04;

        $z2 = virtualinvoke r31.<sun.awt.image.CachingSurfaceManager: boolean isLocalAccelerationEnabled()>();

        if z3 == $z2 goto label04;

        virtualinvoke r31.<sun.awt.image.CachingSurfaceManager: void setLocalAccelerationEnabled(boolean)>(z3);

        virtualinvoke r31.<sun.awt.image.CachingSurfaceManager: void rasterChanged()>();

     label04:
        goto label11;

     label05:
        $r1 = r0[0];

        r35 = (com.jidesoft.plaf.windows.XPStyle$Skin) $r1;

        r36 = r35.<com.jidesoft.plaf.windows.XPStyle$Skin: com.jidesoft.plaf.windows.TMSchema$Part part>;

        $r2 = r0[1];

        r37 = (com.jidesoft.plaf.windows.TMSchema$State) $r2;

        if r37 != null goto label06;

        r37 = r35.<com.jidesoft.plaf.windows.XPStyle$Skin: com.jidesoft.plaf.windows.TMSchema$State state>;

     label06:
        if r30 != null goto label07;

        r30 = r35.<com.jidesoft.plaf.windows.XPStyle$Skin: java.awt.Component component>;

     label07:
        $r16 = (java.awt.image.BufferedImage) r3;

        $r4 = virtualinvoke $r16.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r5 = virtualinvoke $r4.<java.awt.image.WritableRaster: java.awt.image.DataBuffer getDataBuffer()>();

        $r17 = (java.awt.image.DataBufferInt) $r5;

     label08:
        $r6 = newarray (java.lang.Class)[2];

        $r6[0] = class "Ljava/awt/image/DataBufferInt;";

        $r7 = <java.lang.Integer: java.lang.Class TYPE>;

        $r6[1] = $r7;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = $r17;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r8[1] = $r9;

        $r10 = staticinvoke <com.jidesoft.utils.ReflectionUtils: java.lang.Object callStatic(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Object[])>(class "Lsun/awt/image/SunWritableRaster;", "stealData", $r6, $r8);

        $r11 = (int[]) $r10;

        $r12 = (int[]) $r11;

        $r13 = virtualinvoke r36.<com.jidesoft.plaf.windows.TMSchema$Part: java.lang.String getControlName(java.awt.Component)>(r30);

        $i0 = virtualinvoke r36.<com.jidesoft.plaf.windows.TMSchema$Part: int getValue()>();

        $i1 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$State: int getValue(com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r36, r37);

        staticinvoke <sun.awt.windows.ThemeReader: void paintBackground(int[],java.lang.String,int,int,int,int,int,int,int)>($r12, $r13, $i0, $i1, 0, 0, i2, i3, i2);

        $r14 = newarray (java.lang.Class)[1];

        $r14[0] = class "Ljava/awt/image/DataBuffer;";

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = $r17;

        staticinvoke <com.jidesoft.utils.ReflectionUtils: java.lang.Object callStatic(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Object[])>(class "Lsun/awt/image/SunWritableRaster;", "markDirty", $r14, $r15);

     label09:
        goto label11;

     label10:
        $r27 := @caughtexception;

        virtualinvoke $r27.<java.lang.Exception: void printStackTrace()>();

     label11:
        return;

        catch java.lang.Exception from label08 to label09 with label10;
    }

    protected java.awt.Image createImage(java.awt.Component, int, int, java.awt.GraphicsConfiguration, java.lang.Object[])
    {
        java.awt.GraphicsConfiguration r3;
        java.lang.Object[] r4;
        java.awt.image.BufferedImage $r0;
        int i0, i1;
        com.jidesoft.plaf.windows.XPStyle$SkinPainter r1;
        java.awt.Component r2;

        r1 := @this: com.jidesoft.plaf.windows.XPStyle$SkinPainter;

        r2 := @parameter0: java.awt.Component;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: java.awt.GraphicsConfiguration;

        r4 := @parameter4: java.lang.Object[];

        $r0 = new java.awt.image.BufferedImage;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 2);

        return $r0;
    }
}
