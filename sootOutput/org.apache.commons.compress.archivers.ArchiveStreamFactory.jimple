public class org.apache.commons.compress.archivers.ArchiveStreamFactory extends java.lang.Object
{
    public static final java.lang.String AR;
    public static final java.lang.String ARJ;
    public static final java.lang.String CPIO;
    public static final java.lang.String DUMP;
    public static final java.lang.String JAR;
    public static final java.lang.String TAR;
    public static final java.lang.String ZIP;
    public static final java.lang.String SEVEN_Z;
    private java.lang.String entryEncoding;

    public void <init>()
    {
        org.apache.commons.compress.archivers.ArchiveStreamFactory r0;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveStreamFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding> = null;

        return;
    }

    public java.lang.String getEntryEncoding()
    {
        java.lang.String $r1;
        org.apache.commons.compress.archivers.ArchiveStreamFactory r0;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveStreamFactory;

        $r1 = r0.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        return $r1;
    }

    public void setEntryEncoding(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.compress.archivers.ArchiveStreamFactory r0;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveStreamFactory;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding> = r1;

        return;
    }

    public org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.lang.String, java.io.InputStream) throws org.apache.commons.compress.archivers.ArchiveException
    {
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream $r23, $r24;
        org.apache.commons.compress.archivers.ArchiveException $r10;
        org.apache.commons.compress.archivers.StreamingNotSupportedException $r16;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream $r36, $r37;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream $r39;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream $r28, $r29;
        java.lang.String r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r15, $r18, $r21, $r22, $r25, $r27, $r30, $r31, $r34, $r35, $r38;
        org.apache.commons.compress.archivers.ArchiveStreamFactory r17;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream $r32, $r33;
        java.lang.IllegalArgumentException $r40, $r41;
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream $r19, $r20;
        java.io.InputStream r1;

        r17 := @this: org.apache.commons.compress.archivers.ArchiveStreamFactory;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.InputStream;

        if r0 != null goto label01;

        $r41 = new java.lang.IllegalArgumentException;

        specialinvoke $r41.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Archivername must not be null.");

        throw $r41;

     label01:
        if r1 != null goto label02;

        $r40 = new java.lang.IllegalArgumentException;

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InputStream must not be null.");

        throw $r40;

     label02:
        $r2 = "ar";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label03;

        $r39 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream;

        specialinvoke $r39.<org.apache.commons.compress.archivers.ar.ArArchiveInputStream: void <init>(java.io.InputStream)>(r1);

        return $r39;

     label03:
        $r3 = "arj";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label05;

        $r35 = r17.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        if $r35 == null goto label04;

        $r37 = new org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        $r38 = r17.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        specialinvoke $r37.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void <init>(java.io.InputStream,java.lang.String)>(r1, $r38);

        return $r37;

     label04:
        $r36 = new org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        specialinvoke $r36.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void <init>(java.io.InputStream)>(r1);

        return $r36;

     label05:
        $r4 = "zip";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 == 0 goto label07;

        $r31 = r17.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        if $r31 == null goto label06;

        $r33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        $r34 = r17.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        specialinvoke $r33.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void <init>(java.io.InputStream,java.lang.String)>(r1, $r34);

        return $r33;

     label06:
        $r32 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        specialinvoke $r32.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void <init>(java.io.InputStream)>(r1);

        return $r32;

     label07:
        $r5 = "tar";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label09;

        $r27 = r17.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        if $r27 == null goto label08;

        $r29 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $r30 = r17.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        specialinvoke $r29.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream,java.lang.String)>(r1, $r30);

        return $r29;

     label08:
        $r28 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        specialinvoke $r28.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream)>(r1);

        return $r28;

     label09:
        $r6 = "jar";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z4 == 0 goto label10;

        $r26 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream;

        specialinvoke $r26.<org.apache.commons.compress.archivers.jar.JarArchiveInputStream: void <init>(java.io.InputStream)>(r1);

        return $r26;

     label10:
        $r7 = "cpio";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z5 == 0 goto label12;

        $r22 = r17.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        if $r22 == null goto label11;

        $r24 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        $r25 = r17.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        specialinvoke $r24.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void <init>(java.io.InputStream,java.lang.String)>(r1, $r25);

        return $r24;

     label11:
        $r23 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        specialinvoke $r23.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void <init>(java.io.InputStream)>(r1);

        return $r23;

     label12:
        $r8 = "dump";

        $z6 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z6 == 0 goto label14;

        $r18 = r17.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        if $r18 == null goto label13;

        $r20 = new org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        $r21 = r17.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        specialinvoke $r20.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: void <init>(java.io.InputStream,java.lang.String)>(r1, $r21);

        return $r20;

     label13:
        $r19 = new org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        specialinvoke $r19.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: void <init>(java.io.InputStream)>(r1);

        return $r19;

     label14:
        $r9 = "7z";

        $z7 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z7 == 0 goto label15;

        $r16 = new org.apache.commons.compress.archivers.StreamingNotSupportedException;

        specialinvoke $r16.<org.apache.commons.compress.archivers.StreamingNotSupportedException: void <init>(java.lang.String)>("7z");

        throw $r16;

     label15:
        $r10 = new org.apache.commons.compress.archivers.ArchiveException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Archiver: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.commons.compress.archivers.ArchiveException: void <init>(java.lang.String)>($r15);

        throw $r10;
    }

    public org.apache.commons.compress.archivers.ArchiveOutputStream createArchiveOutputStream(java.lang.String, java.io.OutputStream) throws org.apache.commons.compress.archivers.ArchiveException
    {
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream $r22, $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.commons.compress.archivers.ArchiveException $r8;
        org.apache.commons.compress.archivers.StreamingNotSupportedException $r14;
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream $r28;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream $r20;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream $r17, $r18;
        java.lang.String r0, $r2, $r3, $r4, $r5, $r6, $r7, $r13, $r16, $r19, $r21, $r24, $r26, $r27;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream $r25;
        org.apache.commons.compress.archivers.ArchiveStreamFactory r15;
        java.io.OutputStream r1;
        java.lang.IllegalArgumentException $r29, $r30;

        r15 := @this: org.apache.commons.compress.archivers.ArchiveStreamFactory;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.OutputStream;

        if r0 != null goto label01;

        $r30 = new java.lang.IllegalArgumentException;

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Archivername must not be null.");

        throw $r30;

     label01:
        if r1 != null goto label02;

        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("OutputStream must not be null.");

        throw $r29;

     label02:
        $r2 = "ar";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label03;

        $r28 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;

        specialinvoke $r28.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: void <init>(java.io.OutputStream)>(r1);

        return $r28;

     label03:
        $r3 = "zip";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label05;

        $r25 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

        specialinvoke $r25.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void <init>(java.io.OutputStream)>(r1);

        $r26 = r15.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        if $r26 == null goto label04;

        $r27 = r15.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        virtualinvoke $r25.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: void setEncoding(java.lang.String)>($r27);

     label04:
        return $r25;

     label05:
        $r4 = "tar";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 == 0 goto label07;

        $r21 = r15.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        if $r21 == null goto label06;

        $r23 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        $r24 = r15.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        specialinvoke $r23.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void <init>(java.io.OutputStream,java.lang.String)>(r1, $r24);

        return $r23;

     label06:
        $r22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        specialinvoke $r22.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void <init>(java.io.OutputStream)>(r1);

        return $r22;

     label07:
        $r5 = "jar";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label08;

        $r20 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;

        specialinvoke $r20.<org.apache.commons.compress.archivers.jar.JarArchiveOutputStream: void <init>(java.io.OutputStream)>(r1);

        return $r20;

     label08:
        $r6 = "cpio";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z4 == 0 goto label10;

        $r16 = r15.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        if $r16 == null goto label09;

        $r18 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        $r19 = r15.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        specialinvoke $r18.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void <init>(java.io.OutputStream,java.lang.String)>(r1, $r19);

        return $r18;

     label09:
        $r17 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        specialinvoke $r17.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void <init>(java.io.OutputStream)>(r1);

        return $r17;

     label10:
        $r7 = "7z";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z5 == 0 goto label11;

        $r14 = new org.apache.commons.compress.archivers.StreamingNotSupportedException;

        specialinvoke $r14.<org.apache.commons.compress.archivers.StreamingNotSupportedException: void <init>(java.lang.String)>("7z");

        throw $r14;

     label11:
        $r8 = new org.apache.commons.compress.archivers.ArchiveException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Archiver: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.commons.compress.archivers.ArchiveException: void <init>(java.lang.String)>($r13);

        throw $r8;
    }

    public org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream) throws org.apache.commons.compress.archivers.ArchiveException
    {
        byte[] r1, r2, r3;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream $r19;
        java.io.ByteArrayInputStream $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream $r17;
        org.apache.commons.compress.archivers.ArchiveException $r4, $r27;
        org.apache.commons.compress.archivers.StreamingNotSupportedException $r15;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream $r16;
        java.lang.Exception $r29;
        java.lang.Throwable $r28;
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream $r18;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream $r5, $r8, $r11, $r12, r30;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r10, $r13, $r20, $r23;
        org.apache.commons.compress.archivers.ArchiveStreamFactory r9;
        java.io.IOException $r26;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream $r21, $r22;
        java.lang.IllegalArgumentException $r24, $r25;
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream $r14;
        java.io.InputStream r0;

        r9 := @this: org.apache.commons.compress.archivers.ArchiveStreamFactory;

        r0 := @parameter0: java.io.InputStream;

        if r0 != null goto label01;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Stream must not be null.");

        throw $r25;

     label01:
        $z0 = virtualinvoke r0.<java.io.InputStream: boolean markSupported()>();

        if $z0 != 0 goto label02;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Mark is not supported.");

        throw $r24;

     label02:
        r1 = newarray (byte)[12];

        $i0 = lengthof r1;

        virtualinvoke r0.<java.io.InputStream: void mark(int)>($i0);

     label03:
        $i1 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[])>(r0, r1);

        virtualinvoke r0.<java.io.InputStream: void reset()>();

        $z1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean matches(byte[],int)>(r1, $i1);

        if $z1 == 0 goto label07;

        $r20 = r9.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        if $r20 == null goto label05;

        $r22 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        $r23 = r9.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        specialinvoke $r22.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void <init>(java.io.InputStream,java.lang.String)>(r0, $r23);

     label04:
        return $r22;

     label05:
        $r21 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        specialinvoke $r21.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void <init>(java.io.InputStream)>(r0);

     label06:
        return $r21;

     label07:
        $z2 = staticinvoke <org.apache.commons.compress.archivers.jar.JarArchiveInputStream: boolean matches(byte[],int)>(r1, $i1);

        if $z2 == 0 goto label09;

        $r19 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream;

        specialinvoke $r19.<org.apache.commons.compress.archivers.jar.JarArchiveInputStream: void <init>(java.io.InputStream)>(r0);

     label08:
        return $r19;

     label09:
        $z3 = staticinvoke <org.apache.commons.compress.archivers.ar.ArArchiveInputStream: boolean matches(byte[],int)>(r1, $i1);

        if $z3 == 0 goto label11;

        $r18 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream;

        specialinvoke $r18.<org.apache.commons.compress.archivers.ar.ArArchiveInputStream: void <init>(java.io.InputStream)>(r0);

     label10:
        return $r18;

     label11:
        $z4 = staticinvoke <org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: boolean matches(byte[],int)>(r1, $i1);

        if $z4 == 0 goto label13;

        $r17 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        specialinvoke $r17.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void <init>(java.io.InputStream)>(r0);

     label12:
        return $r17;

     label13:
        $z5 = staticinvoke <org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: boolean matches(byte[],int)>(r1, $i1);

        if $z5 == 0 goto label15;

        $r16 = new org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        specialinvoke $r16.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void <init>(java.io.InputStream)>(r0);

     label14:
        return $r16;

     label15:
        $z6 = staticinvoke <org.apache.commons.compress.archivers.sevenz.SevenZFile: boolean matches(byte[],int)>(r1, $i1);

        if $z6 == 0 goto label16;

        $r15 = new org.apache.commons.compress.archivers.StreamingNotSupportedException;

        specialinvoke $r15.<org.apache.commons.compress.archivers.StreamingNotSupportedException: void <init>(java.lang.String)>("7z");

        throw $r15;

     label16:
        r2 = newarray (byte)[32];

        $i2 = lengthof r2;

        virtualinvoke r0.<java.io.InputStream: void mark(int)>($i2);

        $i3 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[])>(r0, r2);

        virtualinvoke r0.<java.io.InputStream: void reset()>();

        $z7 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: boolean matches(byte[],int)>(r2, $i3);

        if $z7 == 0 goto label18;

        $r14 = new org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        specialinvoke $r14.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: void <init>(java.io.InputStream)>(r0);

     label17:
        return $r14;

     label18:
        r3 = newarray (byte)[512];

        $i4 = lengthof r3;

        virtualinvoke r0.<java.io.InputStream: void mark(int)>($i4);

        $i5 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[])>(r0, r3);

        virtualinvoke r0.<java.io.InputStream: void reset()>();

        $z8 = staticinvoke <org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean matches(byte[],int)>(r3, $i5);

        if $z8 == 0 goto label22;

        $r10 = r9.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        if $r10 == null goto label20;

        $r12 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $r13 = r9.<org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String entryEncoding>;

        specialinvoke $r12.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream,java.lang.String)>(r0, $r13);

     label19:
        return $r12;

     label20:
        $r11 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        specialinvoke $r11.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream)>(r0);

     label21:
        return $r11;

     label22:
        if $i5 < 512 goto label31;

        r30 = null;

     label23:
        $r5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        $r6 = new java.io.ByteArrayInputStream;

        specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[])>(r3);

        specialinvoke $r5.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream)>($r6);

        r30 = $r5;

        $r7 = virtualinvoke $r5.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()>();

        $z9 = virtualinvoke $r7.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isCheckSumOK()>();

        if $z9 == 0 goto label26;

        $r8 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        specialinvoke $r8.<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream)>(r0);

     label24:
        staticinvoke <org.apache.commons.compress.utils.IOUtils: void closeQuietly(java.io.Closeable)>($r5);

     label25:
        return $r8;

     label26:
        staticinvoke <org.apache.commons.compress.utils.IOUtils: void closeQuietly(java.io.Closeable)>($r5);

        goto label31;

     label27:
        $r29 := @caughtexception;

     label28:
        staticinvoke <org.apache.commons.compress.utils.IOUtils: void closeQuietly(java.io.Closeable)>(r30);

        goto label31;

     label29:
        $r28 := @caughtexception;

     label30:
        staticinvoke <org.apache.commons.compress.utils.IOUtils: void closeQuietly(java.io.Closeable)>(r30);

        throw $r28;

     label31:
        goto label33;

     label32:
        $r26 := @caughtexception;

        $r27 = new org.apache.commons.compress.archivers.ArchiveException;

        specialinvoke $r27.<org.apache.commons.compress.archivers.ArchiveException: void <init>(java.lang.String,java.lang.Exception)>("Could not use reset and mark operations.", $r26);

        throw $r27;

     label33:
        $r4 = new org.apache.commons.compress.archivers.ArchiveException;

        specialinvoke $r4.<org.apache.commons.compress.archivers.ArchiveException: void <init>(java.lang.String)>("No Archiver found for the stream signature");

        throw $r4;

        catch java.lang.Exception from label23 to label24 with label27;
        catch java.lang.Throwable from label23 to label24 with label29;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label29 to label30 with label29;
        catch java.io.IOException from label03 to label04 with label32;
        catch java.io.IOException from label05 to label06 with label32;
        catch java.io.IOException from label07 to label08 with label32;
        catch java.io.IOException from label09 to label10 with label32;
        catch java.io.IOException from label11 to label12 with label32;
        catch java.io.IOException from label13 to label14 with label32;
        catch java.io.IOException from label15 to label17 with label32;
        catch java.io.IOException from label18 to label19 with label32;
        catch java.io.IOException from label20 to label21 with label32;
        catch java.io.IOException from label22 to label25 with label32;
        catch java.io.IOException from label26 to label31 with label32;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String SEVEN_Z> = "7z";

        <org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String ZIP> = "zip";

        <org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String TAR> = "tar";

        <org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String JAR> = "jar";

        <org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String DUMP> = "dump";

        <org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String CPIO> = "cpio";

        <org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String ARJ> = "arj";

        <org.apache.commons.compress.archivers.ArchiveStreamFactory: java.lang.String AR> = "ar";

        return;
    }
}
