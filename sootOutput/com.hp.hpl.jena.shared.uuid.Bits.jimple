public final class com.hp.hpl.jena.shared.uuid.Bits extends java.lang.Object
{
    public static final boolean CHECK;
    private static int LongLen;

    public void <init>()
    {
        com.hp.hpl.jena.shared.uuid.Bits r0;

        r0 := @this: com.hp.hpl.jena.shared.uuid.Bits;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final long unpack(long, int, int)
    {
        long l1, $l8, $l9;
        int i0, $i2, $i3, $i4, i5, $i6, $i7;

        l1 := @parameter0: long;

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 != 0 goto label1;

        return 0L;

     label1:
        $i2 = <com.hp.hpl.jena.shared.uuid.Bits: int LongLen>;

        $i3 = $i2 - i0;

        $l8 = l1 << $i3;

        $i4 = <com.hp.hpl.jena.shared.uuid.Bits: int LongLen>;

        $i6 = $i4 - i0;

        $i7 = $i6 + i5;

        $l9 = $l8 >>> $i7;

        return $l9;
    }

    public static final long pack(long, long, int, int)
    {
        int i0, i1;
        long $l2, l3, $l4, l5, l6;

        l5 := @parameter0: long;

        l3 := @parameter1: long;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $l2 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: long clear$(long,int,int)>(l5, i0, i1);

        $l4 = l3 << i0;

        l6 = $l2 | $l4;

        return l6;
    }

    public static final long unpack(java.lang.String, int, int)
    {
        int i0, i1;
        long $l2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r1, 16);

        return $l2;
    }

    public static final long set(long, int)
    {
        int i1;
        long l0, $l2;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l2 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: long set$(long,int)>(l0, i1);

        return $l2;
    }

    public static final long set(long, int, int)
    {
        int i1, i2;
        long l0, $l3;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $l3 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: long set$(long,int,int)>(l0, i1, i2);

        return $l3;
    }

    public static final boolean test(long, boolean, int)
    {
        int i1;
        long l0;
        boolean z0, $z1;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        $z1 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: boolean test$(long,boolean,int)>(l0, z0, i1);

        return $z1;
    }

    public static final boolean test(long, long, int, int)
    {
        int i2, i3;
        long l0, l1;
        boolean $z0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $z0 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: boolean test$(long,long,int,int)>(l0, l1, i2, i3);

        return $z0;
    }

    public static final long access(long, int, int)
    {
        int i1, i2;
        long l0, $l3;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $l3 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: long access$(long,int,int)>(l0, i1, i2);

        return $l3;
    }

    public static final long clear(long, int, int)
    {
        int i1, i2;
        long l0, $l3;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $l3 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: long clear$(long,int,int)>(l0, i1, i2);

        return $l3;
    }

    public static final long mask(int, int)
    {
        int i0, i1;
        long $l2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l2 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: long mask$(int,int)>(i0, i1);

        return $l2;
    }

    public static final long maskZero(int, int)
    {
        int i0, i1;
        long $l2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l2 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: long maskZero$(int,int)>(i0, i1);

        return $l2;
    }

    private static final long clear$(long, int, int)
    {
        int i0, i1;
        long $l2, l3, l4;

        l3 := @parameter0: long;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $l2 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: long maskZero$(int,int)>(i0, i1);

        l4 = l3 & $l2;

        return l4;
    }

    private static final long set$(long, int)
    {
        int i0;
        long $l1, l2, $l3;

        l2 := @parameter0: long;

        i0 := @parameter1: int;

        $l1 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: long mask$(int)>(i0);

        $l3 = l2 | $l1;

        return $l3;
    }

    private static final long set$(long, int, int)
    {
        int i0, i1;
        long $l2, l3, $l4;

        l3 := @parameter0: long;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $l2 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: long mask$(int,int)>(i0, i1);

        $l4 = l3 | $l2;

        return $l4;
    }

    private static boolean test$(long, boolean, int)
    {
        int i1;
        long l0;
        boolean z0, $z1, $z2;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        $z1 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: boolean access$(long,int)>(l0, i1);

        if z0 != $z1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static boolean test$(long, long, int, int)
    {
        byte $b5;
        int i1, i2;
        long l0, $l3, l4;
        boolean $z0;

        l0 := @parameter0: long;

        l4 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $l3 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: long access$(long,int,int)>(l0, i1, i2);

        $b5 = $l3 cmp l4;

        if $b5 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final boolean access$(long, int)
    {
        byte $b4;
        int i0;
        long $l1, l2, $l3;
        boolean $z0;

        l2 := @parameter0: long;

        i0 := @parameter1: int;

        $l1 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: long mask$(int)>(i0);

        $l3 = l2 & $l1;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final long access$(long, int, int)
    {
        long l0, $l8, $l9, $l10;
        int i1, $i2, $i3, $i4, i5, $i6, $i7;

        l0 := @parameter0: long;

        i5 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = <com.hp.hpl.jena.shared.uuid.Bits: int LongLen>;

        $i3 = $i2 - i1;

        $l8 = l0 << $i3;

        $i4 = <com.hp.hpl.jena.shared.uuid.Bits: int LongLen>;

        $i6 = $i4 - i1;

        $i7 = $i6 + i5;

        $l9 = $l8 >>> $i7;

        $l10 = $l9 << i5;

        return $l10;
    }

    private static final long mask$(int)
    {
        int i0;
        long $l1;

        i0 := @parameter0: int;

        $l1 = 1L << i0;

        return $l1;
    }

    private static final long mask$(int, int)
    {
        long $l7, $l8, $l9;
        int i0, $i1, $i2, $i3, i4, $i5, $i6;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return 0L;

     label1:
        $i1 = <com.hp.hpl.jena.shared.uuid.Bits: int LongLen>;

        $i2 = $i1 - i0;

        $l7 = -1L << $i2;

        $i3 = <com.hp.hpl.jena.shared.uuid.Bits: int LongLen>;

        $i5 = $i3 - i0;

        $i6 = $i5 + i4;

        $l8 = $l7 >>> $i6;

        $l9 = $l8 << i4;

        return $l9;
    }

    private static final long maskZero$(int, int)
    {
        int i0, i1;
        long $l2, $l3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l2 = staticinvoke <com.hp.hpl.jena.shared.uuid.Bits: long mask$(int,int)>(i0, i1);

        $l3 = $l2 ^ -1L;

        return $l3;
    }

    private static final void check(long)
    {
        long l0, $l3;
        java.lang.IllegalArgumentException $r6;
        byte $b1, $b4;
        int $i2, $i5, $i6;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i5 = (int) $b1;

        if $i5 < 0 goto label1;

        $i2 = <com.hp.hpl.jena.shared.uuid.Bits: int LongLen>;

        $l3 = (long) $i2;

        $b4 = l0 cmp $l3;

        $i6 = (int) $b4;

        if $i6 < 0 goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal bit index: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r6;

     label2:
        return;
    }

    private static final void check(long, long)
    {
        byte $b1, $b4, $b6, $b9, $b10;
        java.lang.StringBuilder $r2, $r3, $r7, $r8, $r12, $r13, $r14, $r15, $r16, $r18, $r20, $r22;
        long l0, $l3, l5, $l8;
        int $i2, $i7, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r4, $r9, $r17;
        java.lang.IllegalArgumentException $r19, $r21, $r23;

        l0 := @parameter0: long;

        l5 := @parameter1: long;

        $b1 = l0 cmp 0L;

        $i11 = (int) $b1;

        if $i11 < 0 goto label1;

        $i2 = <com.hp.hpl.jena.shared.uuid.Bits: int LongLen>;

        $l3 = (long) $i2;

        $b4 = l0 cmp $l3;

        $i12 = (int) $b4;

        if $i12 < 0 goto label2;

     label1:
        $r19 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal start: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r19;

     label2:
        $b6 = l5 cmp 0L;

        $i13 = (int) $b6;

        if $i13 < 0 goto label3;

        $i7 = <com.hp.hpl.jena.shared.uuid.Bits: int LongLen>;

        $l8 = (long) $i7;

        $b9 = l5 cmp $l8;

        $i14 = (int) $b9;

        if $i14 <= 0 goto label4;

     label3:
        $r21 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal finish: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r21;

     label4:
        $b10 = l0 cmp l5;

        $i15 = (int) $b10;

        if $i15 <= 0 goto label5;

        $r23 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal range: (");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r23;

     label5:
        return;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.shared.uuid.Bits: boolean CHECK> = 0;

        <com.hp.hpl.jena.shared.uuid.Bits: int LongLen> = 64;

        return;
    }
}
