public final class org.apache.commons.lang.math.IntRange extends org.apache.commons.lang.math.Range implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final int min;
    private final int max;
    private transient java.lang.Integer minObject;
    private transient java.lang.Integer maxObject;
    private transient int hashCode;
    private transient java.lang.String toString;

    public void <init>(int)
    {
        int i0;
        org.apache.commons.lang.math.IntRange r0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.lang.math.Range: void <init>()>();

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer minObject> = null;

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer maxObject> = null;

        r0.<org.apache.commons.lang.math.IntRange: int hashCode> = 0;

        r0.<org.apache.commons.lang.math.IntRange: java.lang.String toString> = null;

        r0.<org.apache.commons.lang.math.IntRange: int min> = i0;

        r0.<org.apache.commons.lang.math.IntRange: int max> = i0;

        return;
    }

    public void <init>(java.lang.Number)
    {
        java.lang.IllegalArgumentException $r4;
        java.lang.Integer $r2, $r3;
        int $i0, $i1;
        java.lang.Number r1;
        org.apache.commons.lang.math.IntRange r0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        r1 := @parameter0: java.lang.Number;

        specialinvoke r0.<org.apache.commons.lang.math.Range: void <init>()>();

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer minObject> = null;

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer maxObject> = null;

        r0.<org.apache.commons.lang.math.IntRange: int hashCode> = 0;

        r0.<org.apache.commons.lang.math.IntRange: java.lang.String toString> = null;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number must not be null");

        throw $r4;

     label1:
        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        r0.<org.apache.commons.lang.math.IntRange: int min> = $i0;

        $i1 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        r0.<org.apache.commons.lang.math.IntRange: int max> = $i1;

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label2;

        $r2 = (java.lang.Integer) r1;

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer minObject> = $r2;

        $r3 = (java.lang.Integer) r1;

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer maxObject> = $r3;

     label2:
        return;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        org.apache.commons.lang.math.IntRange r0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.lang.math.Range: void <init>()>();

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer minObject> = null;

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer maxObject> = null;

        r0.<org.apache.commons.lang.math.IntRange: int hashCode> = 0;

        r0.<org.apache.commons.lang.math.IntRange: java.lang.String toString> = null;

        if i0 >= i1 goto label1;

        r0.<org.apache.commons.lang.math.IntRange: int min> = i0;

        r0.<org.apache.commons.lang.math.IntRange: int max> = i1;

        goto label2;

     label1:
        r0.<org.apache.commons.lang.math.IntRange: int min> = i1;

        r0.<org.apache.commons.lang.math.IntRange: int max> = i0;

     label2:
        return;
    }

    public void <init>(java.lang.Number, java.lang.Number)
    {
        java.lang.IllegalArgumentException $r2;
        java.lang.Integer $r4, $r5, $r6, $r7;
        int $i0, $i1;
        java.lang.Number r1, r3;
        org.apache.commons.lang.math.IntRange r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        r1 := @parameter0: java.lang.Number;

        r3 := @parameter1: java.lang.Number;

        specialinvoke r0.<org.apache.commons.lang.math.Range: void <init>()>();

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer minObject> = null;

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer maxObject> = null;

        r0.<org.apache.commons.lang.math.IntRange: int hashCode> = 0;

        r0.<org.apache.commons.lang.math.IntRange: java.lang.String toString> = null;

        if r1 == null goto label1;

        if r3 != null goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The numbers must not be null");

        throw $r2;

     label2:
        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r3.<java.lang.Number: int intValue()>();

        if $i1 >= $i0 goto label4;

        r0.<org.apache.commons.lang.math.IntRange: int min> = $i1;

        r0.<org.apache.commons.lang.math.IntRange: int max> = $i0;

        $z2 = r3 instanceof java.lang.Integer;

        if $z2 == 0 goto label3;

        $r7 = (java.lang.Integer) r3;

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer minObject> = $r7;

     label3:
        $z3 = r1 instanceof java.lang.Integer;

        if $z3 == 0 goto label6;

        $r6 = (java.lang.Integer) r1;

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer maxObject> = $r6;

        goto label6;

     label4:
        r0.<org.apache.commons.lang.math.IntRange: int min> = $i0;

        r0.<org.apache.commons.lang.math.IntRange: int max> = $i1;

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label5;

        $r5 = (java.lang.Integer) r1;

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer minObject> = $r5;

     label5:
        $z1 = r3 instanceof java.lang.Integer;

        if $z1 == 0 goto label6;

        $r4 = (java.lang.Integer) r3;

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer maxObject> = $r4;

     label6:
        return;
    }

    public java.lang.Number getMinimumNumber()
    {
        int $i0;
        java.lang.Integer $r1, $r2, $r3;
        org.apache.commons.lang.math.IntRange r0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        $r1 = r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer minObject>;

        if $r1 != null goto label1;

        $r3 = new java.lang.Integer;

        $i0 = r0.<org.apache.commons.lang.math.IntRange: int min>;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i0);

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer minObject> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer minObject>;

        return $r2;
    }

    public long getMinimumLong()
    {
        int $i0;
        long $l1;
        org.apache.commons.lang.math.IntRange r0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        $i0 = r0.<org.apache.commons.lang.math.IntRange: int min>;

        $l1 = (long) $i0;

        return $l1;
    }

    public int getMinimumInteger()
    {
        int $i0;
        org.apache.commons.lang.math.IntRange r0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        $i0 = r0.<org.apache.commons.lang.math.IntRange: int min>;

        return $i0;
    }

    public double getMinimumDouble()
    {
        int $i0;
        org.apache.commons.lang.math.IntRange r0;
        double $d0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        $i0 = r0.<org.apache.commons.lang.math.IntRange: int min>;

        $d0 = (double) $i0;

        return $d0;
    }

    public float getMinimumFloat()
    {
        int $i0;
        float $f0;
        org.apache.commons.lang.math.IntRange r0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        $i0 = r0.<org.apache.commons.lang.math.IntRange: int min>;

        $f0 = (float) $i0;

        return $f0;
    }

    public java.lang.Number getMaximumNumber()
    {
        int $i0;
        java.lang.Integer $r1, $r2, $r3;
        org.apache.commons.lang.math.IntRange r0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        $r1 = r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer maxObject>;

        if $r1 != null goto label1;

        $r3 = new java.lang.Integer;

        $i0 = r0.<org.apache.commons.lang.math.IntRange: int max>;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i0);

        r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer maxObject> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.lang.math.IntRange: java.lang.Integer maxObject>;

        return $r2;
    }

    public long getMaximumLong()
    {
        int $i0;
        long $l1;
        org.apache.commons.lang.math.IntRange r0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        $i0 = r0.<org.apache.commons.lang.math.IntRange: int max>;

        $l1 = (long) $i0;

        return $l1;
    }

    public int getMaximumInteger()
    {
        int $i0;
        org.apache.commons.lang.math.IntRange r0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        $i0 = r0.<org.apache.commons.lang.math.IntRange: int max>;

        return $i0;
    }

    public double getMaximumDouble()
    {
        int $i0;
        org.apache.commons.lang.math.IntRange r0;
        double $d0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        $i0 = r0.<org.apache.commons.lang.math.IntRange: int max>;

        $d0 = (double) $i0;

        return $d0;
    }

    public float getMaximumFloat()
    {
        int $i0;
        float $f0;
        org.apache.commons.lang.math.IntRange r0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        $i0 = r0.<org.apache.commons.lang.math.IntRange: int max>;

        $f0 = (float) $i0;

        return $f0;
    }

    public boolean containsNumber(java.lang.Number)
    {
        int $i0;
        java.lang.Number r0;
        org.apache.commons.lang.math.IntRange r1;
        boolean $z0;

        r1 := @this: org.apache.commons.lang.math.IntRange;

        r0 := @parameter0: java.lang.Number;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        $z0 = virtualinvoke r1.<org.apache.commons.lang.math.IntRange: boolean containsInteger(int)>($i0);

        return $z0;
    }

    public boolean containsInteger(int)
    {
        int i0, $i1, $i2;
        org.apache.commons.lang.math.IntRange r0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.lang.math.IntRange: int min>;

        if i0 < $i1 goto label1;

        $i2 = r0.<org.apache.commons.lang.math.IntRange: int max>;

        if i0 > $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsRange(org.apache.commons.lang.math.Range)
    {
        int $i0, $i1;
        org.apache.commons.lang.math.Range r0;
        org.apache.commons.lang.math.IntRange r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.commons.lang.math.IntRange;

        r0 := @parameter0: org.apache.commons.lang.math.Range;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.commons.lang.math.Range: int getMinimumInteger()>();

        $z0 = virtualinvoke r1.<org.apache.commons.lang.math.IntRange: boolean containsInteger(int)>($i0);

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: int getMaximumInteger()>();

        $z1 = virtualinvoke r1.<org.apache.commons.lang.math.IntRange: boolean containsInteger(int)>($i1);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean overlapsRange(org.apache.commons.lang.math.Range)
    {
        org.apache.commons.lang.math.Range r0;
        int $i0, $i1, $i2;
        org.apache.commons.lang.math.IntRange r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.apache.commons.lang.math.IntRange;

        r0 := @parameter0: org.apache.commons.lang.math.Range;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = r1.<org.apache.commons.lang.math.IntRange: int min>;

        $z0 = virtualinvoke r0.<org.apache.commons.lang.math.Range: boolean containsInteger(int)>($i0);

        if $z0 != 0 goto label2;

        $i1 = r1.<org.apache.commons.lang.math.IntRange: int max>;

        $z1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: boolean containsInteger(int)>($i1);

        if $z1 != 0 goto label2;

        $i2 = virtualinvoke r0.<org.apache.commons.lang.math.Range: int getMinimumInteger()>();

        $z2 = virtualinvoke r1.<org.apache.commons.lang.math.IntRange: boolean containsInteger(int)>($i2);

        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public boolean equals(java.lang.Object)
    {
        int $i0, $i1, $i2, $i3;
        java.lang.Object r0;
        org.apache.commons.lang.math.IntRange r1, r2;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.lang.math.IntRange;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.apache.commons.lang.math.IntRange;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.lang.math.IntRange) r0;

        $i1 = r1.<org.apache.commons.lang.math.IntRange: int min>;

        $i0 = r2.<org.apache.commons.lang.math.IntRange: int min>;

        if $i1 != $i0 goto label3;

        $i3 = r1.<org.apache.commons.lang.math.IntRange: int max>;

        $i2 = r2.<org.apache.commons.lang.math.IntRange: int max>;

        if $i3 != $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.Class $r1;
        org.apache.commons.lang.math.IntRange r0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        $i0 = r0.<org.apache.commons.lang.math.IntRange: int hashCode>;

        if $i0 != 0 goto label1;

        r0.<org.apache.commons.lang.math.IntRange: int hashCode> = 17;

        $i2 = r0.<org.apache.commons.lang.math.IntRange: int hashCode>;

        $i3 = 37 * $i2;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i4 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i5 = $i3 + $i4;

        r0.<org.apache.commons.lang.math.IntRange: int hashCode> = $i5;

        $i6 = r0.<org.apache.commons.lang.math.IntRange: int hashCode>;

        $i8 = 37 * $i6;

        $i7 = r0.<org.apache.commons.lang.math.IntRange: int min>;

        $i9 = $i8 + $i7;

        r0.<org.apache.commons.lang.math.IntRange: int hashCode> = $i9;

        $i10 = r0.<org.apache.commons.lang.math.IntRange: int hashCode>;

        $i12 = 37 * $i10;

        $i11 = r0.<org.apache.commons.lang.math.IntRange: int max>;

        $i13 = $i12 + $i11;

        r0.<org.apache.commons.lang.math.IntRange: int hashCode> = $i13;

     label1:
        $i1 = r0.<org.apache.commons.lang.math.IntRange: int hashCode>;

        return $i1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r3;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r4;
        org.apache.commons.lang.math.IntRange r0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        $r1 = r0.<org.apache.commons.lang.math.IntRange: java.lang.String toString>;

        if $r1 != null goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>(32);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Range[");

        $i0 = r0.<org.apache.commons.lang.math.IntRange: int min>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        $i1 = r0.<org.apache.commons.lang.math.IntRange: int max>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.commons.lang.math.IntRange: java.lang.String toString> = $r4;

     label1:
        $r2 = r0.<org.apache.commons.lang.math.IntRange: java.lang.String toString>;

        return $r2;
    }

    public int[] toArray()
    {
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        org.apache.commons.lang.math.IntRange r0;

        r0 := @this: org.apache.commons.lang.math.IntRange;

        $i1 = r0.<org.apache.commons.lang.math.IntRange: int max>;

        $i0 = r0.<org.apache.commons.lang.math.IntRange: int min>;

        $i2 = $i1 - $i0;

        $i3 = $i2 + 1;

        r1 = newarray (int)[$i3];

        i7 = 0;

     label1:
        $i4 = lengthof r1;

        if i7 >= $i4 goto label2;

        $i5 = r0.<org.apache.commons.lang.math.IntRange: int min>;

        $i6 = $i5 + i7;

        r1[i7] = $i6;

        i7 = i7 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.lang.math.IntRange: long serialVersionUID> = 71849363892730L;

        return;
    }
}
