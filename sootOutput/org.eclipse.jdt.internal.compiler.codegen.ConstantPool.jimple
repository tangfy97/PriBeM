public class org.eclipse.jdt.internal.compiler.codegen.ConstantPool extends java.lang.Object implements org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants, org.eclipse.jdt.internal.compiler.lookup.TypeIds
{
    public static final int DOUBLE_INITIAL_SIZE;
    public static final int FLOAT_INITIAL_SIZE;
    public static final int INT_INITIAL_SIZE;
    public static final int LONG_INITIAL_SIZE;
    public static final int UTF8_INITIAL_SIZE;
    public static final int STRING_INITIAL_SIZE;
    public static final int METHODS_AND_FIELDS_INITIAL_SIZE;
    public static final int CLASS_INITIAL_SIZE;
    public static final int NAMEANDTYPE_INITIAL_SIZE;
    public static final int CONSTANTPOOL_INITIAL_SIZE;
    public static final int CONSTANTPOOL_GROW_SIZE;
    protected org.eclipse.jdt.internal.compiler.codegen.DoubleCache doubleCache;
    protected org.eclipse.jdt.internal.compiler.codegen.FloatCache floatCache;
    protected org.eclipse.jdt.internal.compiler.codegen.IntegerCache intCache;
    protected org.eclipse.jdt.internal.compiler.codegen.LongCache longCache;
    public org.eclipse.jdt.internal.compiler.codegen.CharArrayCache UTF8Cache;
    protected org.eclipse.jdt.internal.compiler.codegen.CharArrayCache stringCache;
    protected org.eclipse.jdt.internal.compiler.util.HashtableOfObject methodsAndFieldsCache;
    protected org.eclipse.jdt.internal.compiler.codegen.CharArrayCache classCache;
    protected org.eclipse.jdt.internal.compiler.util.HashtableOfObject nameAndTypeCacheForFieldsAndMethods;
    public byte[] poolContent;
    public int currentIndex;
    public int currentOffset;
    public int[] offsets;
    public org.eclipse.jdt.internal.compiler.ClassFile classFile;
    public static final char[] Append;
    public static final char[] ARRAY_NEWINSTANCE_NAME;
    public static final char[] ARRAY_NEWINSTANCE_SIGNATURE;
    public static final char[] ArrayCopy;
    public static final char[] ArrayCopySignature;
    public static final char[] ArrayJavaLangClassConstantPoolName;
    public static final char[] ArrayJavaLangObjectConstantPoolName;
    public static final char[] booleanBooleanSignature;
    public static final char[] BooleanConstrSignature;
    public static final char[] BOOLEANVALUE_BOOLEAN_METHOD_NAME;
    public static final char[] BOOLEANVALUE_BOOLEAN_METHOD_SIGNATURE;
    public static final char[] byteByteSignature;
    public static final char[] ByteConstrSignature;
    public static final char[] BYTEVALUE_BYTE_METHOD_NAME;
    public static final char[] BYTEVALUE_BYTE_METHOD_SIGNATURE;
    public static final char[] charCharacterSignature;
    public static final char[] CharConstrSignature;
    public static final char[] CHARVALUE_CHARACTER_METHOD_NAME;
    public static final char[] CHARVALUE_CHARACTER_METHOD_SIGNATURE;
    public static final char[] Clinit;
    public static final char[] DefaultConstructorSignature;
    public static final char[] ClinitSignature;
    public static final char[] DesiredAssertionStatus;
    public static final char[] DesiredAssertionStatusSignature;
    public static final char[] DoubleConstrSignature;
    public static final char[] doubleDoubleSignature;
    public static final char[] DOUBLEVALUE_DOUBLE_METHOD_NAME;
    public static final char[] DOUBLEVALUE_DOUBLE_METHOD_SIGNATURE;
    public static final char[] Exit;
    public static final char[] ExitIntSignature;
    public static final char[] FloatConstrSignature;
    public static final char[] floatFloatSignature;
    public static final char[] FLOATVALUE_FLOAT_METHOD_NAME;
    public static final char[] FLOATVALUE_FLOAT_METHOD_SIGNATURE;
    public static final char[] ForName;
    public static final char[] ForNameSignature;
    public static final char[] GET_BOOLEAN_METHOD_NAME;
    public static final char[] GET_BOOLEAN_METHOD_SIGNATURE;
    public static final char[] GET_BYTE_METHOD_NAME;
    public static final char[] GET_BYTE_METHOD_SIGNATURE;
    public static final char[] GET_CHAR_METHOD_NAME;
    public static final char[] GET_CHAR_METHOD_SIGNATURE;
    public static final char[] GET_DOUBLE_METHOD_NAME;
    public static final char[] GET_DOUBLE_METHOD_SIGNATURE;
    public static final char[] GET_FLOAT_METHOD_NAME;
    public static final char[] GET_FLOAT_METHOD_SIGNATURE;
    public static final char[] GET_INT_METHOD_NAME;
    public static final char[] GET_INT_METHOD_SIGNATURE;
    public static final char[] GET_LONG_METHOD_NAME;
    public static final char[] GET_LONG_METHOD_SIGNATURE;
    public static final char[] GET_OBJECT_METHOD_NAME;
    public static final char[] GET_OBJECT_METHOD_SIGNATURE;
    public static final char[] GET_SHORT_METHOD_NAME;
    public static final char[] GET_SHORT_METHOD_SIGNATURE;
    public static final char[] GetClass;
    public static final char[] GetClassSignature;
    public static final char[] GetComponentType;
    public static final char[] GetComponentTypeSignature;
    public static final char[] GetConstructor;
    public static final char[] GetConstructorSignature;
    public static final char[] GETDECLAREDCONSTRUCTOR_NAME;
    public static final char[] GETDECLAREDCONSTRUCTOR_SIGNATURE;
    public static final char[] GETDECLAREDFIELD_NAME;
    public static final char[] GETDECLAREDFIELD_SIGNATURE;
    public static final char[] GETDECLAREDMETHOD_NAME;
    public static final char[] GETDECLAREDMETHOD_SIGNATURE;
    public static final char[] GetMessage;
    public static final char[] GetMessageSignature;
    public static final char[] HasNext;
    public static final char[] HasNextSignature;
    public static final char[] Init;
    public static final char[] IntConstrSignature;
    public static final char[] Intern;
    public static final char[] InternSignature;
    public static final char[] IntIntegerSignature;
    public static final char[] INTVALUE_INTEGER_METHOD_NAME;
    public static final char[] INTVALUE_INTEGER_METHOD_SIGNATURE;
    public static final char[] INVOKE_METHOD_METHOD_NAME;
    public static final char[] INVOKE_METHOD_METHOD_SIGNATURE;
    public static final char[][] JAVA_LANG_REFLECT_ACCESSIBLEOBJECT;
    public static final char[][] JAVA_LANG_REFLECT_ARRAY;
    public static final char[] JavaIoPrintStreamSignature;
    public static final char[] JavaLangAssertionErrorConstantPoolName;
    public static final char[] JavaLangBooleanConstantPoolName;
    public static final char[] JavaLangByteConstantPoolName;
    public static final char[] JavaLangCharacterConstantPoolName;
    public static final char[] JavaLangClassConstantPoolName;
    public static final char[] JavaLangClassNotFoundExceptionConstantPoolName;
    public static final char[] JavaLangClassSignature;
    public static final char[] JavaLangDoubleConstantPoolName;
    public static final char[] JavaLangEnumConstantPoolName;
    public static final char[] JavaLangErrorConstantPoolName;
    public static final char[] JavaLangExceptionConstantPoolName;
    public static final char[] JavaLangFloatConstantPoolName;
    public static final char[] JavaLangIntegerConstantPoolName;
    public static final char[] JavaLangLongConstantPoolName;
    public static final char[] JavaLangNoClassDefFoundErrorConstantPoolName;
    public static final char[] JavaLangNoSuchFieldErrorConstantPoolName;
    public static final char[] JavaLangObjectConstantPoolName;
    public static final char[] JAVALANGREFLECTACCESSIBLEOBJECT_CONSTANTPOOLNAME;
    public static final char[] JAVALANGREFLECTARRAY_CONSTANTPOOLNAME;
    public static final char[] JavaLangReflectConstructorConstantPoolName;
    public static final char[] JavaLangReflectConstructorNewInstanceSignature;
    public static final char[] JAVALANGREFLECTFIELD_CONSTANTPOOLNAME;
    public static final char[] JAVALANGREFLECTMETHOD_CONSTANTPOOLNAME;
    public static final char[] JavaLangShortConstantPoolName;
    public static final char[] JavaLangStringBufferConstantPoolName;
    public static final char[] JavaLangStringBuilderConstantPoolName;
    public static final char[] JavaLangStringConstantPoolName;
    public static final char[] JavaLangStringSignature;
    public static final char[] JavaLangObjectSignature;
    public static final char[] JavaLangSystemConstantPoolName;
    public static final char[] JavaLangThrowableConstantPoolName;
    public static final char[] JavaLangVoidConstantPoolName;
    public static final char[] JavaUtilIteratorConstantPoolName;
    public static final char[] LongConstrSignature;
    public static final char[] longLongSignature;
    public static final char[] LONGVALUE_LONG_METHOD_NAME;
    public static final char[] LONGVALUE_LONG_METHOD_SIGNATURE;
    public static final char[] NewInstance;
    public static final char[] NewInstanceSignature;
    public static final char[] Next;
    public static final char[] NextSignature;
    public static final char[] ObjectConstrSignature;
    public static final char[] ObjectSignature;
    public static final char[] Ordinal;
    public static final char[] OrdinalSignature;
    public static final char[] Out;
    public static final char[] SET_BOOLEAN_METHOD_NAME;
    public static final char[] SET_BOOLEAN_METHOD_SIGNATURE;
    public static final char[] SET_BYTE_METHOD_NAME;
    public static final char[] SET_BYTE_METHOD_SIGNATURE;
    public static final char[] SET_CHAR_METHOD_NAME;
    public static final char[] SET_CHAR_METHOD_SIGNATURE;
    public static final char[] SET_DOUBLE_METHOD_NAME;
    public static final char[] SET_DOUBLE_METHOD_SIGNATURE;
    public static final char[] SET_FLOAT_METHOD_NAME;
    public static final char[] SET_FLOAT_METHOD_SIGNATURE;
    public static final char[] SET_INT_METHOD_NAME;
    public static final char[] SET_INT_METHOD_SIGNATURE;
    public static final char[] SET_LONG_METHOD_NAME;
    public static final char[] SET_LONG_METHOD_SIGNATURE;
    public static final char[] SET_OBJECT_METHOD_NAME;
    public static final char[] SET_OBJECT_METHOD_SIGNATURE;
    public static final char[] SET_SHORT_METHOD_NAME;
    public static final char[] SET_SHORT_METHOD_SIGNATURE;
    public static final char[] SETACCESSIBLE_NAME;
    public static final char[] SETACCESSIBLE_SIGNATURE;
    public static final char[] ShortConstrSignature;
    public static final char[] shortShortSignature;
    public static final char[] SHORTVALUE_SHORT_METHOD_NAME;
    public static final char[] SHORTVALUE_SHORT_METHOD_SIGNATURE;
    public static final char[] StringBufferAppendBooleanSignature;
    public static final char[] StringBufferAppendCharSignature;
    public static final char[] StringBufferAppendDoubleSignature;
    public static final char[] StringBufferAppendFloatSignature;
    public static final char[] StringBufferAppendIntSignature;
    public static final char[] StringBufferAppendLongSignature;
    public static final char[] StringBufferAppendObjectSignature;
    public static final char[] StringBufferAppendStringSignature;
    public static final char[] StringBuilderAppendBooleanSignature;
    public static final char[] StringBuilderAppendCharSignature;
    public static final char[] StringBuilderAppendDoubleSignature;
    public static final char[] StringBuilderAppendFloatSignature;
    public static final char[] StringBuilderAppendIntSignature;
    public static final char[] StringBuilderAppendLongSignature;
    public static final char[] StringBuilderAppendObjectSignature;
    public static final char[] StringBuilderAppendStringSignature;
    public static final char[] StringConstructorSignature;
    public static final char[] This;
    public static final char[] ToString;
    public static final char[] ToStringSignature;
    public static final char[] TYPE;
    public static final char[] ValueOf;
    public static final char[] ValueOfBooleanSignature;
    public static final char[] ValueOfCharSignature;
    public static final char[] ValueOfDoubleSignature;
    public static final char[] ValueOfFloatSignature;
    public static final char[] ValueOfIntSignature;
    public static final char[] ValueOfLongSignature;
    public static final char[] ValueOfObjectSignature;
    public static final char[] ValueOfStringClassSignature;
    public static final char[] JAVA_LANG_ANNOTATION_DOCUMENTED;
    public static final char[] JAVA_LANG_ANNOTATION_ELEMENTTYPE;
    public static final char[] JAVA_LANG_ANNOTATION_RETENTION;
    public static final char[] JAVA_LANG_ANNOTATION_RETENTIONPOLICY;
    public static final char[] JAVA_LANG_ANNOTATION_TARGET;
    public static final char[] JAVA_LANG_DEPRECATED;
    public static final char[] JAVA_LANG_ANNOTATION_INHERITED;

    static void <clinit>()
    {
        java.lang.String $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r43, $r45, $r47, $r49, $r51, $r53, $r55, $r57, $r59, $r61, $r63, $r65, $r67, $r69, $r71, $r73, $r75, $r77, $r79, $r81, $r83, $r85, $r87, $r89, $r91, $r93, $r95, $r97, $r99, $r101, $r103, $r105, $r107, $r109, $r111, $r114, $r116, $r118, $r120, $r122, $r124, $r126, $r128, $r130, $r132, $r134, $r136, $r138, $r140, $r142, $r145, $r147, $r149, $r151, $r153, $r159, $r165, $r167, $r169, $r171, $r173, $r175, $r177, $r179, $r181, $r183, $r185, $r187, $r189, $r191, $r193, $r195, $r197, $r199, $r201, $r203, $r205, $r207, $r209, $r211, $r213, $r215, $r217, $r219, $r221, $r223, $r225, $r227, $r229, $r231, $r233, $r235, $r237, $r239, $r241, $r243, $r245, $r247, $r249, $r251, $r253, $r255, $r257, $r259, $r261, $r263, $r265, $r267, $r269, $r271, $r273, $r275, $r277, $r279, $r281, $r283, $r285, $r287, $r289, $r291, $r293, $r295, $r297, $r299, $r301, $r303, $r305, $r307, $r309, $r311, $r313, $r315, $r317, $r319, $r321, $r323, $r325, $r327, $r329, $r331, $r333, $r335, $r337, $r339, $r341, $r343, $r345, $r348, $r350, $r352, $r354, $r356, $r358, $r360, $r362, $r364, $r366, $r368, $r370, $r372, $r374, $r376, $r378, $r380;
        char[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r42, $r44, $r46, $r48, $r50, $r52, $r54, $r56, $r58, $r60, $r62, $r64, $r66, $r68, $r70, $r72, $r74, $r76, $r78, $r80, $r82, $r84, $r86, $r88, $r90, $r92, $r94, $r96, $r98, $r100, $r102, $r104, $r106, $r108, $r110, $r112, $r113, $r115, $r117, $r119, $r121, $r123, $r125, $r127, $r129, $r131, $r133, $r135, $r137, $r139, $r141, $r143, $r144, $r146, $r148, $r150, $r152, $r154, $r156, $r157, $r158, $r160, $r162, $r163, $r164, $r166, $r168, $r170, $r172, $r174, $r176, $r178, $r180, $r182, $r184, $r186, $r188, $r190, $r192, $r194, $r196, $r198, $r200, $r202, $r204, $r206, $r208, $r210, $r212, $r214, $r216, $r218, $r220, $r222, $r224, $r226, $r228, $r230, $r232, $r234, $r236, $r238, $r240, $r242, $r244, $r246, $r248, $r250, $r252, $r254, $r256, $r258, $r260, $r262, $r264, $r266, $r268, $r270, $r272, $r274, $r276, $r278, $r280, $r282, $r284, $r286, $r288, $r290, $r292, $r294, $r296, $r298, $r300, $r302, $r304, $r306, $r308, $r310, $r312, $r314, $r316, $r318, $r320, $r322, $r324, $r326, $r328, $r330, $r332, $r334, $r336, $r338, $r340, $r342, $r344, $r346, $r347, $r349, $r351, $r353, $r355, $r357, $r359, $r361, $r363, $r365, $r367, $r369, $r371, $r373, $r375, $r377, $r379, $r381;
        char[][] $r155, $r161;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int CONSTANTPOOL_GROW_SIZE> = 6000;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int CONSTANTPOOL_INITIAL_SIZE> = 2000;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int NAMEANDTYPE_INITIAL_SIZE> = 272;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int CLASS_INITIAL_SIZE> = 86;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int METHODS_AND_FIELDS_INITIAL_SIZE> = 450;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int STRING_INITIAL_SIZE> = 761;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int UTF8_INITIAL_SIZE> = 778;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int LONG_INITIAL_SIZE> = 5;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int INT_INITIAL_SIZE> = 248;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int FLOAT_INITIAL_SIZE> = 3;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int DOUBLE_INITIAL_SIZE> = 5;

        $r0 = "append";

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] Append> = $r1;

        $r2 = "newInstance";

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ARRAY_NEWINSTANCE_NAME> = $r3;

        $r4 = "(Ljava/lang/Class;[I)Ljava/lang/Object;";

        $r5 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ARRAY_NEWINSTANCE_SIGNATURE> = $r5;

        $r6 = "arraycopy";

        $r7 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ArrayCopy> = $r7;

        $r8 = "(Ljava/lang/Object;ILjava/lang/Object;II)V";

        $r9 = virtualinvoke $r8.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ArrayCopySignature> = $r9;

        $r10 = "[Ljava/lang/Class;";

        $r11 = virtualinvoke $r10.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ArrayJavaLangClassConstantPoolName> = $r11;

        $r12 = "[Ljava/lang/Object;";

        $r13 = virtualinvoke $r12.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ArrayJavaLangObjectConstantPoolName> = $r13;

        $r14 = "(Z)Ljava/lang/Boolean;";

        $r15 = virtualinvoke $r14.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] booleanBooleanSignature> = $r15;

        $r16 = "(Z)V";

        $r17 = virtualinvoke $r16.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] BooleanConstrSignature> = $r17;

        $r18 = "booleanValue";

        $r19 = virtualinvoke $r18.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] BOOLEANVALUE_BOOLEAN_METHOD_NAME> = $r19;

        $r20 = "()Z";

        $r21 = virtualinvoke $r20.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] BOOLEANVALUE_BOOLEAN_METHOD_SIGNATURE> = $r21;

        $r22 = "(B)Ljava/lang/Byte;";

        $r23 = virtualinvoke $r22.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] byteByteSignature> = $r23;

        $r24 = "(B)V";

        $r25 = virtualinvoke $r24.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ByteConstrSignature> = $r25;

        $r26 = "byteValue";

        $r27 = virtualinvoke $r26.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] BYTEVALUE_BYTE_METHOD_NAME> = $r27;

        $r28 = "()B";

        $r29 = virtualinvoke $r28.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] BYTEVALUE_BYTE_METHOD_SIGNATURE> = $r29;

        $r30 = "(C)Ljava/lang/Character;";

        $r31 = virtualinvoke $r30.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] charCharacterSignature> = $r31;

        $r32 = "(C)V";

        $r33 = virtualinvoke $r32.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] CharConstrSignature> = $r33;

        $r34 = "charValue";

        $r35 = virtualinvoke $r34.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] CHARVALUE_CHARACTER_METHOD_NAME> = $r35;

        $r36 = "()C";

        $r37 = virtualinvoke $r36.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] CHARVALUE_CHARACTER_METHOD_SIGNATURE> = $r37;

        $r38 = "<clinit>";

        $r39 = virtualinvoke $r38.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] Clinit> = $r39;

        $r40 = "()V";

        $r41 = virtualinvoke $r40.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] DefaultConstructorSignature> = $r41;

        $r42 = <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] DefaultConstructorSignature>;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ClinitSignature> = $r42;

        $r43 = "desiredAssertionStatus";

        $r44 = virtualinvoke $r43.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] DesiredAssertionStatus> = $r44;

        $r45 = "()Z";

        $r46 = virtualinvoke $r45.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] DesiredAssertionStatusSignature> = $r46;

        $r47 = "(D)V";

        $r48 = virtualinvoke $r47.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] DoubleConstrSignature> = $r48;

        $r49 = "(D)Ljava/lang/Double;";

        $r50 = virtualinvoke $r49.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] doubleDoubleSignature> = $r50;

        $r51 = "doubleValue";

        $r52 = virtualinvoke $r51.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] DOUBLEVALUE_DOUBLE_METHOD_NAME> = $r52;

        $r53 = "()D";

        $r54 = virtualinvoke $r53.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] DOUBLEVALUE_DOUBLE_METHOD_SIGNATURE> = $r54;

        $r55 = "exit";

        $r56 = virtualinvoke $r55.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] Exit> = $r56;

        $r57 = "(I)V";

        $r58 = virtualinvoke $r57.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ExitIntSignature> = $r58;

        $r59 = "(F)V";

        $r60 = virtualinvoke $r59.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] FloatConstrSignature> = $r60;

        $r61 = "(F)Ljava/lang/Float;";

        $r62 = virtualinvoke $r61.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] floatFloatSignature> = $r62;

        $r63 = "floatValue";

        $r64 = virtualinvoke $r63.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] FLOATVALUE_FLOAT_METHOD_NAME> = $r64;

        $r65 = "()F";

        $r66 = virtualinvoke $r65.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] FLOATVALUE_FLOAT_METHOD_SIGNATURE> = $r66;

        $r67 = "forName";

        $r68 = virtualinvoke $r67.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ForName> = $r68;

        $r69 = "(Ljava/lang/String;)Ljava/lang/Class;";

        $r70 = virtualinvoke $r69.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ForNameSignature> = $r70;

        $r71 = "getBoolean";

        $r72 = virtualinvoke $r71.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_BOOLEAN_METHOD_NAME> = $r72;

        $r73 = "(Ljava/lang/Object;)Z";

        $r74 = virtualinvoke $r73.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_BOOLEAN_METHOD_SIGNATURE> = $r74;

        $r75 = "getByte";

        $r76 = virtualinvoke $r75.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_BYTE_METHOD_NAME> = $r76;

        $r77 = "(Ljava/lang/Object;)B";

        $r78 = virtualinvoke $r77.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_BYTE_METHOD_SIGNATURE> = $r78;

        $r79 = "getChar";

        $r80 = virtualinvoke $r79.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_CHAR_METHOD_NAME> = $r80;

        $r81 = "(Ljava/lang/Object;)C";

        $r82 = virtualinvoke $r81.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_CHAR_METHOD_SIGNATURE> = $r82;

        $r83 = "getDouble";

        $r84 = virtualinvoke $r83.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_DOUBLE_METHOD_NAME> = $r84;

        $r85 = "(Ljava/lang/Object;)D";

        $r86 = virtualinvoke $r85.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_DOUBLE_METHOD_SIGNATURE> = $r86;

        $r87 = "getFloat";

        $r88 = virtualinvoke $r87.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_FLOAT_METHOD_NAME> = $r88;

        $r89 = "(Ljava/lang/Object;)F";

        $r90 = virtualinvoke $r89.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_FLOAT_METHOD_SIGNATURE> = $r90;

        $r91 = "getInt";

        $r92 = virtualinvoke $r91.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_INT_METHOD_NAME> = $r92;

        $r93 = "(Ljava/lang/Object;)I";

        $r94 = virtualinvoke $r93.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_INT_METHOD_SIGNATURE> = $r94;

        $r95 = "getLong";

        $r96 = virtualinvoke $r95.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_LONG_METHOD_NAME> = $r96;

        $r97 = "(Ljava/lang/Object;)J";

        $r98 = virtualinvoke $r97.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_LONG_METHOD_SIGNATURE> = $r98;

        $r99 = "get";

        $r100 = virtualinvoke $r99.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_OBJECT_METHOD_NAME> = $r100;

        $r101 = "(Ljava/lang/Object;)Ljava/lang/Object;";

        $r102 = virtualinvoke $r101.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_OBJECT_METHOD_SIGNATURE> = $r102;

        $r103 = "getShort";

        $r104 = virtualinvoke $r103.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_SHORT_METHOD_NAME> = $r104;

        $r105 = "(Ljava/lang/Object;)S";

        $r106 = virtualinvoke $r105.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GET_SHORT_METHOD_SIGNATURE> = $r106;

        $r107 = "getClass";

        $r108 = virtualinvoke $r107.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GetClass> = $r108;

        $r109 = "()Ljava/lang/Class;";

        $r110 = virtualinvoke $r109.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GetClassSignature> = $r110;

        $r111 = "getComponentType";

        $r112 = virtualinvoke $r111.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GetComponentType> = $r112;

        $r113 = <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GetClassSignature>;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GetComponentTypeSignature> = $r113;

        $r114 = "getConstructor";

        $r115 = virtualinvoke $r114.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GetConstructor> = $r115;

        $r116 = "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;";

        $r117 = virtualinvoke $r116.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GetConstructorSignature> = $r117;

        $r118 = "getDeclaredConstructor";

        $r119 = virtualinvoke $r118.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GETDECLAREDCONSTRUCTOR_NAME> = $r119;

        $r120 = "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;";

        $r121 = virtualinvoke $r120.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GETDECLAREDCONSTRUCTOR_SIGNATURE> = $r121;

        $r122 = "getDeclaredField";

        $r123 = virtualinvoke $r122.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GETDECLAREDFIELD_NAME> = $r123;

        $r124 = "(Ljava/lang/String;)Ljava/lang/reflect/Field;";

        $r125 = virtualinvoke $r124.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GETDECLAREDFIELD_SIGNATURE> = $r125;

        $r126 = "getDeclaredMethod";

        $r127 = virtualinvoke $r126.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GETDECLAREDMETHOD_NAME> = $r127;

        $r128 = "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;";

        $r129 = virtualinvoke $r128.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GETDECLAREDMETHOD_SIGNATURE> = $r129;

        $r130 = "getMessage";

        $r131 = virtualinvoke $r130.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GetMessage> = $r131;

        $r132 = "()Ljava/lang/String;";

        $r133 = virtualinvoke $r132.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GetMessageSignature> = $r133;

        $r134 = "hasNext";

        $r135 = virtualinvoke $r134.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] HasNext> = $r135;

        $r136 = "()Z";

        $r137 = virtualinvoke $r136.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] HasNextSignature> = $r137;

        $r138 = "<init>";

        $r139 = virtualinvoke $r138.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] Init> = $r139;

        $r140 = "(I)V";

        $r141 = virtualinvoke $r140.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] IntConstrSignature> = $r141;

        $r142 = "intern";

        $r143 = virtualinvoke $r142.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] Intern> = $r143;

        $r144 = <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GetMessageSignature>;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] InternSignature> = $r144;

        $r145 = "(I)Ljava/lang/Integer;";

        $r146 = virtualinvoke $r145.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] IntIntegerSignature> = $r146;

        $r147 = "intValue";

        $r148 = virtualinvoke $r147.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] INTVALUE_INTEGER_METHOD_NAME> = $r148;

        $r149 = "()I";

        $r150 = virtualinvoke $r149.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] INTVALUE_INTEGER_METHOD_SIGNATURE> = $r150;

        $r151 = "invoke";

        $r152 = virtualinvoke $r151.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] INVOKE_METHOD_METHOD_NAME> = $r152;

        $r153 = "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;";

        $r154 = virtualinvoke $r153.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] INVOKE_METHOD_METHOD_SIGNATURE> = $r154;

        $r155 = newarray (char[])[4];

        $r156 = <org.eclipse.jdt.internal.compiler.lookup.TypeConstants: char[] JAVA>;

        $r155[0] = $r156;

        $r157 = <org.eclipse.jdt.internal.compiler.lookup.TypeConstants: char[] LANG>;

        $r155[1] = $r157;

        $r158 = <org.eclipse.jdt.internal.compiler.lookup.TypeConstants: char[] REFLECT>;

        $r155[2] = $r158;

        $r159 = "AccessibleObject";

        $r160 = virtualinvoke $r159.<java.lang.String: char[] toCharArray()>();

        $r155[3] = $r160;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[][] JAVA_LANG_REFLECT_ACCESSIBLEOBJECT> = $r155;

        $r161 = newarray (char[])[4];

        $r162 = <org.eclipse.jdt.internal.compiler.lookup.TypeConstants: char[] JAVA>;

        $r161[0] = $r162;

        $r163 = <org.eclipse.jdt.internal.compiler.lookup.TypeConstants: char[] LANG>;

        $r161[1] = $r163;

        $r164 = <org.eclipse.jdt.internal.compiler.lookup.TypeConstants: char[] REFLECT>;

        $r161[2] = $r164;

        $r165 = "Array";

        $r166 = virtualinvoke $r165.<java.lang.String: char[] toCharArray()>();

        $r161[3] = $r166;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[][] JAVA_LANG_REFLECT_ARRAY> = $r161;

        $r167 = "Ljava/io/PrintStream;";

        $r168 = virtualinvoke $r167.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaIoPrintStreamSignature> = $r168;

        $r169 = "java/lang/AssertionError";

        $r170 = virtualinvoke $r169.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangAssertionErrorConstantPoolName> = $r170;

        $r171 = "java/lang/Boolean";

        $r172 = virtualinvoke $r171.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangBooleanConstantPoolName> = $r172;

        $r173 = "java/lang/Byte";

        $r174 = virtualinvoke $r173.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangByteConstantPoolName> = $r174;

        $r175 = "java/lang/Character";

        $r176 = virtualinvoke $r175.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangCharacterConstantPoolName> = $r176;

        $r177 = "java/lang/Class";

        $r178 = virtualinvoke $r177.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangClassConstantPoolName> = $r178;

        $r179 = "java/lang/ClassNotFoundException";

        $r180 = virtualinvoke $r179.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangClassNotFoundExceptionConstantPoolName> = $r180;

        $r181 = "Ljava/lang/Class;";

        $r182 = virtualinvoke $r181.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangClassSignature> = $r182;

        $r183 = "java/lang/Double";

        $r184 = virtualinvoke $r183.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangDoubleConstantPoolName> = $r184;

        $r185 = "java/lang/Enum";

        $r186 = virtualinvoke $r185.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangEnumConstantPoolName> = $r186;

        $r187 = "java/lang/Error";

        $r188 = virtualinvoke $r187.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangErrorConstantPoolName> = $r188;

        $r189 = "java/lang/Exception";

        $r190 = virtualinvoke $r189.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangExceptionConstantPoolName> = $r190;

        $r191 = "java/lang/Float";

        $r192 = virtualinvoke $r191.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangFloatConstantPoolName> = $r192;

        $r193 = "java/lang/Integer";

        $r194 = virtualinvoke $r193.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangIntegerConstantPoolName> = $r194;

        $r195 = "java/lang/Long";

        $r196 = virtualinvoke $r195.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangLongConstantPoolName> = $r196;

        $r197 = "java/lang/NoClassDefFoundError";

        $r198 = virtualinvoke $r197.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangNoClassDefFoundErrorConstantPoolName> = $r198;

        $r199 = "java/lang/NoSuchFieldError";

        $r200 = virtualinvoke $r199.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangNoSuchFieldErrorConstantPoolName> = $r200;

        $r201 = "java/lang/Object";

        $r202 = virtualinvoke $r201.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangObjectConstantPoolName> = $r202;

        $r203 = "java/lang/reflect/AccessibleObject";

        $r204 = virtualinvoke $r203.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JAVALANGREFLECTACCESSIBLEOBJECT_CONSTANTPOOLNAME> = $r204;

        $r205 = "java/lang/reflect/Array";

        $r206 = virtualinvoke $r205.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JAVALANGREFLECTARRAY_CONSTANTPOOLNAME> = $r206;

        $r207 = "java/lang/reflect/Constructor";

        $r208 = virtualinvoke $r207.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangReflectConstructorConstantPoolName> = $r208;

        $r209 = "([Ljava/lang/Object;)Ljava/lang/Object;";

        $r210 = virtualinvoke $r209.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangReflectConstructorNewInstanceSignature> = $r210;

        $r211 = "java/lang/reflect/Field";

        $r212 = virtualinvoke $r211.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JAVALANGREFLECTFIELD_CONSTANTPOOLNAME> = $r212;

        $r213 = "java/lang/reflect/Method";

        $r214 = virtualinvoke $r213.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JAVALANGREFLECTMETHOD_CONSTANTPOOLNAME> = $r214;

        $r215 = "java/lang/Short";

        $r216 = virtualinvoke $r215.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangShortConstantPoolName> = $r216;

        $r217 = "java/lang/StringBuffer";

        $r218 = virtualinvoke $r217.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangStringBufferConstantPoolName> = $r218;

        $r219 = "java/lang/StringBuilder";

        $r220 = virtualinvoke $r219.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangStringBuilderConstantPoolName> = $r220;

        $r221 = "java/lang/String";

        $r222 = virtualinvoke $r221.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangStringConstantPoolName> = $r222;

        $r223 = "Ljava/lang/String;";

        $r224 = virtualinvoke $r223.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangStringSignature> = $r224;

        $r225 = "Ljava/lang/Object;";

        $r226 = virtualinvoke $r225.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangObjectSignature> = $r226;

        $r227 = "java/lang/System";

        $r228 = virtualinvoke $r227.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangSystemConstantPoolName> = $r228;

        $r229 = "java/lang/Throwable";

        $r230 = virtualinvoke $r229.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangThrowableConstantPoolName> = $r230;

        $r231 = "java/lang/Void";

        $r232 = virtualinvoke $r231.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangVoidConstantPoolName> = $r232;

        $r233 = "java/util/Iterator";

        $r234 = virtualinvoke $r233.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaUtilIteratorConstantPoolName> = $r234;

        $r235 = "(J)V";

        $r236 = virtualinvoke $r235.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] LongConstrSignature> = $r236;

        $r237 = "(J)Ljava/lang/Long;";

        $r238 = virtualinvoke $r237.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] longLongSignature> = $r238;

        $r239 = "longValue";

        $r240 = virtualinvoke $r239.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] LONGVALUE_LONG_METHOD_NAME> = $r240;

        $r241 = "()J";

        $r242 = virtualinvoke $r241.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] LONGVALUE_LONG_METHOD_SIGNATURE> = $r242;

        $r243 = "newInstance";

        $r244 = virtualinvoke $r243.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] NewInstance> = $r244;

        $r245 = "(Ljava/lang/Class;[I)Ljava/lang/Object;";

        $r246 = virtualinvoke $r245.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] NewInstanceSignature> = $r246;

        $r247 = "next";

        $r248 = virtualinvoke $r247.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] Next> = $r248;

        $r249 = "()Ljava/lang/Object;";

        $r250 = virtualinvoke $r249.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] NextSignature> = $r250;

        $r251 = "(Ljava/lang/Object;)V";

        $r252 = virtualinvoke $r251.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ObjectConstrSignature> = $r252;

        $r253 = "Ljava/lang/Object;";

        $r254 = virtualinvoke $r253.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ObjectSignature> = $r254;

        $r255 = "ordinal";

        $r256 = virtualinvoke $r255.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] Ordinal> = $r256;

        $r257 = "()I";

        $r258 = virtualinvoke $r257.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] OrdinalSignature> = $r258;

        $r259 = "out";

        $r260 = virtualinvoke $r259.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] Out> = $r260;

        $r261 = "setBoolean";

        $r262 = virtualinvoke $r261.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_BOOLEAN_METHOD_NAME> = $r262;

        $r263 = "(Ljava/lang/Object;Z)V";

        $r264 = virtualinvoke $r263.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_BOOLEAN_METHOD_SIGNATURE> = $r264;

        $r265 = "setByte";

        $r266 = virtualinvoke $r265.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_BYTE_METHOD_NAME> = $r266;

        $r267 = "(Ljava/lang/Object;B)V";

        $r268 = virtualinvoke $r267.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_BYTE_METHOD_SIGNATURE> = $r268;

        $r269 = "setChar";

        $r270 = virtualinvoke $r269.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_CHAR_METHOD_NAME> = $r270;

        $r271 = "(Ljava/lang/Object;C)V";

        $r272 = virtualinvoke $r271.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_CHAR_METHOD_SIGNATURE> = $r272;

        $r273 = "setDouble";

        $r274 = virtualinvoke $r273.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_DOUBLE_METHOD_NAME> = $r274;

        $r275 = "(Ljava/lang/Object;D)V";

        $r276 = virtualinvoke $r275.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_DOUBLE_METHOD_SIGNATURE> = $r276;

        $r277 = "setFloat";

        $r278 = virtualinvoke $r277.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_FLOAT_METHOD_NAME> = $r278;

        $r279 = "(Ljava/lang/Object;F)V";

        $r280 = virtualinvoke $r279.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_FLOAT_METHOD_SIGNATURE> = $r280;

        $r281 = "setInt";

        $r282 = virtualinvoke $r281.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_INT_METHOD_NAME> = $r282;

        $r283 = "(Ljava/lang/Object;I)V";

        $r284 = virtualinvoke $r283.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_INT_METHOD_SIGNATURE> = $r284;

        $r285 = "setLong";

        $r286 = virtualinvoke $r285.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_LONG_METHOD_NAME> = $r286;

        $r287 = "(Ljava/lang/Object;J)V";

        $r288 = virtualinvoke $r287.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_LONG_METHOD_SIGNATURE> = $r288;

        $r289 = "set";

        $r290 = virtualinvoke $r289.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_OBJECT_METHOD_NAME> = $r290;

        $r291 = "(Ljava/lang/Object;Ljava/lang/Object;)V";

        $r292 = virtualinvoke $r291.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_OBJECT_METHOD_SIGNATURE> = $r292;

        $r293 = "setShort";

        $r294 = virtualinvoke $r293.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_SHORT_METHOD_NAME> = $r294;

        $r295 = "(Ljava/lang/Object;S)V";

        $r296 = virtualinvoke $r295.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SET_SHORT_METHOD_SIGNATURE> = $r296;

        $r297 = "setAccessible";

        $r298 = virtualinvoke $r297.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SETACCESSIBLE_NAME> = $r298;

        $r299 = "(Z)V";

        $r300 = virtualinvoke $r299.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SETACCESSIBLE_SIGNATURE> = $r300;

        $r301 = "(S)V";

        $r302 = virtualinvoke $r301.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ShortConstrSignature> = $r302;

        $r303 = "(S)Ljava/lang/Short;";

        $r304 = virtualinvoke $r303.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] shortShortSignature> = $r304;

        $r305 = "shortValue";

        $r306 = virtualinvoke $r305.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SHORTVALUE_SHORT_METHOD_NAME> = $r306;

        $r307 = "()S";

        $r308 = virtualinvoke $r307.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] SHORTVALUE_SHORT_METHOD_SIGNATURE> = $r308;

        $r309 = "(Z)Ljava/lang/StringBuffer;";

        $r310 = virtualinvoke $r309.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBufferAppendBooleanSignature> = $r310;

        $r311 = "(C)Ljava/lang/StringBuffer;";

        $r312 = virtualinvoke $r311.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBufferAppendCharSignature> = $r312;

        $r313 = "(D)Ljava/lang/StringBuffer;";

        $r314 = virtualinvoke $r313.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBufferAppendDoubleSignature> = $r314;

        $r315 = "(F)Ljava/lang/StringBuffer;";

        $r316 = virtualinvoke $r315.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBufferAppendFloatSignature> = $r316;

        $r317 = "(I)Ljava/lang/StringBuffer;";

        $r318 = virtualinvoke $r317.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBufferAppendIntSignature> = $r318;

        $r319 = "(J)Ljava/lang/StringBuffer;";

        $r320 = virtualinvoke $r319.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBufferAppendLongSignature> = $r320;

        $r321 = "(Ljava/lang/Object;)Ljava/lang/StringBuffer;";

        $r322 = virtualinvoke $r321.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBufferAppendObjectSignature> = $r322;

        $r323 = "(Ljava/lang/String;)Ljava/lang/StringBuffer;";

        $r324 = virtualinvoke $r323.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBufferAppendStringSignature> = $r324;

        $r325 = "(Z)Ljava/lang/StringBuilder;";

        $r326 = virtualinvoke $r325.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBuilderAppendBooleanSignature> = $r326;

        $r327 = "(C)Ljava/lang/StringBuilder;";

        $r328 = virtualinvoke $r327.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBuilderAppendCharSignature> = $r328;

        $r329 = "(D)Ljava/lang/StringBuilder;";

        $r330 = virtualinvoke $r329.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBuilderAppendDoubleSignature> = $r330;

        $r331 = "(F)Ljava/lang/StringBuilder;";

        $r332 = virtualinvoke $r331.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBuilderAppendFloatSignature> = $r332;

        $r333 = "(I)Ljava/lang/StringBuilder;";

        $r334 = virtualinvoke $r333.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBuilderAppendIntSignature> = $r334;

        $r335 = "(J)Ljava/lang/StringBuilder;";

        $r336 = virtualinvoke $r335.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBuilderAppendLongSignature> = $r336;

        $r337 = "(Ljava/lang/Object;)Ljava/lang/StringBuilder;";

        $r338 = virtualinvoke $r337.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBuilderAppendObjectSignature> = $r338;

        $r339 = "(Ljava/lang/String;)Ljava/lang/StringBuilder;";

        $r340 = virtualinvoke $r339.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringBuilderAppendStringSignature> = $r340;

        $r341 = "(Ljava/lang/String;)V";

        $r342 = virtualinvoke $r341.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] StringConstructorSignature> = $r342;

        $r343 = "this";

        $r344 = virtualinvoke $r343.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] This> = $r344;

        $r345 = "toString";

        $r346 = virtualinvoke $r345.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ToString> = $r346;

        $r347 = <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] GetMessageSignature>;

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ToStringSignature> = $r347;

        $r348 = "TYPE";

        $r349 = virtualinvoke $r348.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] TYPE> = $r349;

        $r350 = "valueOf";

        $r351 = virtualinvoke $r350.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ValueOf> = $r351;

        $r352 = "(Z)Ljava/lang/String;";

        $r353 = virtualinvoke $r352.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ValueOfBooleanSignature> = $r353;

        $r354 = "(C)Ljava/lang/String;";

        $r355 = virtualinvoke $r354.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ValueOfCharSignature> = $r355;

        $r356 = "(D)Ljava/lang/String;";

        $r357 = virtualinvoke $r356.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ValueOfDoubleSignature> = $r357;

        $r358 = "(F)Ljava/lang/String;";

        $r359 = virtualinvoke $r358.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ValueOfFloatSignature> = $r359;

        $r360 = "(I)Ljava/lang/String;";

        $r361 = virtualinvoke $r360.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ValueOfIntSignature> = $r361;

        $r362 = "(J)Ljava/lang/String;";

        $r363 = virtualinvoke $r362.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ValueOfLongSignature> = $r363;

        $r364 = "(Ljava/lang/Object;)Ljava/lang/String;";

        $r365 = virtualinvoke $r364.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ValueOfObjectSignature> = $r365;

        $r366 = "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;";

        $r367 = virtualinvoke $r366.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ValueOfStringClassSignature> = $r367;

        $r368 = "Ljava/lang/annotation/Documented;";

        $r369 = virtualinvoke $r368.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JAVA_LANG_ANNOTATION_DOCUMENTED> = $r369;

        $r370 = "Ljava/lang/annotation/ElementType;";

        $r371 = virtualinvoke $r370.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JAVA_LANG_ANNOTATION_ELEMENTTYPE> = $r371;

        $r372 = "Ljava/lang/annotation/Retention;";

        $r373 = virtualinvoke $r372.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JAVA_LANG_ANNOTATION_RETENTION> = $r373;

        $r374 = "Ljava/lang/annotation/RetentionPolicy;";

        $r375 = virtualinvoke $r374.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JAVA_LANG_ANNOTATION_RETENTIONPOLICY> = $r375;

        $r376 = "Ljava/lang/annotation/Target;";

        $r377 = virtualinvoke $r376.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JAVA_LANG_ANNOTATION_TARGET> = $r377;

        $r378 = "Ljava/lang/Deprecated;";

        $r379 = virtualinvoke $r378.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JAVA_LANG_DEPRECATED> = $r379;

        $r380 = "Ljava/lang/annotation/Inherited;";

        $r381 = virtualinvoke $r380.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JAVA_LANG_ANNOTATION_INHERITED> = $r381;

        return;
    }

    public void <init>(org.eclipse.jdt.internal.compiler.ClassFile)
    {
        org.eclipse.jdt.internal.compiler.ClassFile r7;
        org.eclipse.jdt.internal.compiler.codegen.CharArrayCache $r1, $r2, $r4;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObject $r3, $r5;
        int[] $r6;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r7 := @parameter0: org.eclipse.jdt.internal.compiler.ClassFile;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = 1;

        $r1 = new org.eclipse.jdt.internal.compiler.codegen.CharArrayCache;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void <init>(int)>(778);

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache UTF8Cache> = $r1;

        $r2 = new org.eclipse.jdt.internal.compiler.codegen.CharArrayCache;

        specialinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void <init>(int)>(761);

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache stringCache> = $r2;

        $r3 = new org.eclipse.jdt.internal.compiler.util.HashtableOfObject;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: void <init>(int)>(450);

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.util.HashtableOfObject methodsAndFieldsCache> = $r3;

        $r4 = new org.eclipse.jdt.internal.compiler.codegen.CharArrayCache;

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void <init>(int)>(86);

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache classCache> = $r4;

        $r5 = new org.eclipse.jdt.internal.compiler.util.HashtableOfObject;

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: void <init>(int)>(272);

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.util.HashtableOfObject nameAndTypeCacheForFieldsAndMethods> = $r5;

        $r6 = newarray (int)[5];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r6;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void initialize(org.eclipse.jdt.internal.compiler.ClassFile)>(r7);

        return;
    }

    public void initialize(org.eclipse.jdt.internal.compiler.ClassFile)
    {
        byte[] $r2;
        org.eclipse.jdt.internal.compiler.ClassFile r1;
        int $i0;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ClassFile;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ClassFile: byte[] header>;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent> = $r2;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.ClassFile: int headerOffset>;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i0;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile> = r1;

        return;
    }

    public byte[] dumpBytes()
    {
        byte[] $r1, $r2, $r3;
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r1 = newarray (byte)[$i0];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent> = $r1;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i1);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        return $r3;
    }

    public int literalIndex(byte[], char[])
    {
        byte[] r5, $r6, $r7, $r8, $r9;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r15;
        byte $b13, $b16;
        int[] $r3, $r4, $r10, $r11;
        org.eclipse.jdt.internal.compiler.ClassFile $r12, $r16;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r19;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r13, $r17;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r14, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, $i26;
        org.eclipse.jdt.internal.compiler.codegen.CharArrayCache $r2;
        char[] r1;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r5 := @parameter0: byte[];

        r1 := @parameter1: char[];

        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache UTF8Cache>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i1 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int putIfAbsent(char[],int)>(r1, $i0);

        i24 = $i1;

        if $i1 >= 0 goto label4;

        $i2 = neg $i1;

        i24 = $i2;

        $i26 = (int) 65535;

        if $i2 <= $i26 goto label1;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r15 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r16 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r17 = $r16.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r18 = $r17.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r19 = virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r19);

     label1:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i4 = $i3 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = $i4;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i23 = lengthof $r3;

        if $i23 > $i2 goto label2;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i21 = $i2 * 2;

        $r10 = newarray (int)[$i21];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, $r10, 0, $i23);

     label2:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r4[$i2] = $i5;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>(1);

        $i22 = lengthof r5;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i7 = $i6 + 2;

        $i9 = $i7 + $i22;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i8 = lengthof $r6;

        if $i9 < $i8 goto label3;

        $i20 = 2 + $i22;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>($i20);

     label3:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i11 = $i10 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i11;

        $i12 = $i22 >> 8;

        $b13 = (byte) $i12;

        $r7[$i10] = $b13;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i15 = $i14 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i15;

        $b16 = (byte) $i22;

        $r8[$i14] = $b16;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r9, $i17, $i22);

        $i18 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i19 = $i18 + $i22;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i19;

     label4:
        return i24;
    }

    public int literalIndex(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)
    {
        org.eclipse.jdt.internal.compiler.ClassFile $r4;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r0, $r1;
        int $i0;
        char[] $r3;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r2;
        boolean $z0;

        r2 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding leafComponentType()>();

        $z0 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isNestedType()>();

        if $z0 == 0 goto label1;

        $r4 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ClassFile: void recordInnerClasses(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r1);

     label1:
        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: char[] signature()>();

        $i0 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int literalIndex(char[])>($r3);

        return $i0;
    }

    public int literalIndex(char[])
    {
        byte[] $r5, $r6, $r7;
        byte $b26, $b27;
        short $s14, $s22;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r10, $r14, $r18, $r22, $r28, $r32;
        org.eclipse.jdt.internal.compiler.codegen.CharArrayCache $r2;
        char[] r1;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r11, $r19, $r29;
        int[] $r3, $r4, $r24, $r25;
        org.eclipse.jdt.internal.compiler.ClassFile $r8, $r12, $r16, $r20, $r26, $r30;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r15, $r23, $r33;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r9, $r13, $r17, $r21, $r27, $r31;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i15, $i16, $i17, $i18, $i19, $i20, $i23, $i24, $i25, $i28, $i29, $i30, $i31, $i32, i33, i34, i35, $i36, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i47, $i49;
        char c9, $c13, $c21;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r1 := @parameter0: char[];

        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache UTF8Cache>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i1 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int putIfAbsent(char[],int)>(r1, $i0);

        i33 = $i1;

        if $i1 >= 0 goto label11;

        $i2 = neg $i1;

        i33 = $i2;

        $i38 = (int) 65535;

        if $i2 <= $i38 goto label01;

        $r26 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r27 = $r26.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r28 = $r27.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r29 = virtualinvoke $r28.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r30 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r31 = $r30.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r32 = $r31.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r33 = virtualinvoke $r32.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r29.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r33);

     label01:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i32 = lengthof $r3;

        if $i32 > $i2 goto label02;

        $r25 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i30 = $i2 * 2;

        $r24 = newarray (int)[$i30];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r24;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r25, 0, $r24, 0, $i32);

     label02:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r4[$i2] = $i3;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>(1);

        $i31 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i6 = $i4 + 2;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i5 = lengthof $r5;

        if $i6 < $i5 goto label03;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(2);

     label03:
        $i7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i8 = $i7 + 2;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i8;

        i34 = 0;

        i35 = 0;

        goto label08;

     label04:
        c9 = r1[i35];

        $i39 = (int) c9;

        if $i39 < 1 goto label05;

        $i40 = (int) c9;

        if $i40 > 127 goto label05;

        $i41 = (int) c9;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>($i41);

        i34 = i34 + 1;

        goto label07;

     label05:
        $i42 = (int) c9;

        if $i42 <= 2047 goto label06;

        i34 = i34 + 3;

        $i43 = (int) c9;

        $i15 = $i43 >> 12;

        $i16 = $i15 & 15;

        $i17 = 224 | $i16;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>($i17);

        $i44 = (int) c9;

        $i18 = $i44 >> 6;

        $i19 = $i18 & 63;

        $i20 = 128 | $i19;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>($i20);

        $c21 = c9 & 63;

        $s22 = 128 | $c21;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>($s22);

        goto label07;

     label06:
        i34 = i34 + 2;

        $i45 = (int) c9;

        $i10 = $i45 >> 6;

        $i11 = $i10 & 31;

        $i12 = 192 | $i11;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>($i12);

        $c13 = c9 & 63;

        $s14 = 128 | $c13;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>($s14);

     label07:
        i35 = i35 + 1;

     label08:
        $i36 = lengthof r1;

        if i35 < $i36 goto label04;

        $i47 = (int) 65535;

        if i34 < $i47 goto label09;

        $i29 = $i31 - 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i29;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r17 = $r16.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r18 = $r17.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r19 = virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r20 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r21 = $r20.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r22 = $r21.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r23 = virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceForConstant(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r23);

     label09:
        $i49 = (int) 65535;

        if $i2 <= $i49 goto label10;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r9 = $r8.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r10 = $r9.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r11 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r12 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r15 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r15);

     label10:
        $i23 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i24 = $i23 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = $i24;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i25 = i34 >> 8;

        $b26 = (byte) $i25;

        $r6[$i31] = $b26;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i28 = $i31 + 1;

        $b27 = (byte) i34;

        $r7[$i28] = $b27;

     label11:
        return i33;
    }

    public int literalIndex(char[], byte[])
    {
        byte[] $r5, r6, $r7, $r8;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r14;
        byte $b13, $b14;
        int[] $r3, $r4, $r9, $r10;
        org.eclipse.jdt.internal.compiler.ClassFile $r11, $r15;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r18;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r12, $r16;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r13, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i15, $i16, $i17, i18, i19, $i21;
        org.eclipse.jdt.internal.compiler.codegen.CharArrayCache $r2;
        char[] r1;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r1 := @parameter0: char[];

        r6 := @parameter1: byte[];

        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache stringCache>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i1 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int putIfAbsent(char[],int)>(r1, $i0);

        i18 = $i1;

        if $i1 >= 0 goto label4;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i3 = $i2 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = $i3;

        $i4 = neg $i1;

        i18 = $i4;

        $i21 = (int) 65535;

        if $i4 <= $i21 goto label1;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r12 = $r11.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r14 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r15 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r16 = $r15.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r17 = $r16.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r18 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r18);

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i17 = lengthof $r3;

        if $i17 > $i4 goto label2;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i15 = $i4 * 2;

        $r9 = newarray (int)[$i15];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i17);

     label2:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r4[$i4] = $i5;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>(8);

        $i16 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i8 = $i6 + 2;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i7 = lengthof $r5;

        if $i8 < $i7 goto label3;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(2);

     label3:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i10 = $i9 + 2;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i10;

        $i11 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int literalIndex(byte[],char[])>(r6, r1);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i19 = $i16 + 1;

        $i12 = $i11 >> 8;

        $b13 = (byte) $i12;

        $r7[$i16] = $b13;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $b14 = (byte) $i11;

        $r8[i19] = $b14;

     label4:
        return i18;
    }

    public int literalIndex(double)
    {
        byte[] $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        byte $b13, $b18, $b23, $b28, $b33, $b38, $b43, $b47;
        org.eclipse.jdt.internal.compiler.codegen.DoubleCache $r1, $r2, $r25;
        long $l6, $l11, $l16, $l21, $l26, $l31, $l36, $l41;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r18, $r22;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r19;
        int[] $r3, $r4, $r14, $r15;
        org.eclipse.jdt.internal.compiler.ClassFile $r16, $r20;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r23;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r17, $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i12, $i14, $i15, $i17, $i19, $i20, $i22, $i24, $i25, $i27, $i29, $i30, $i32, $i34, $i35, $i37, $i39, $i40, $i42, $i44, $i45, $i46, $i48, $i49, $i50, i51, $i53;
        double d0;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        d0 := @parameter0: double;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.DoubleCache doubleCache>;

        if $r1 != null goto label1;

        $r25 = new org.eclipse.jdt.internal.compiler.codegen.DoubleCache;

        specialinvoke $r25.<org.eclipse.jdt.internal.compiler.codegen.DoubleCache: void <init>(int)>(5);

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.DoubleCache doubleCache> = $r25;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.DoubleCache doubleCache>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i1 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.DoubleCache: int putIfAbsent(double,int)>(d0, $i0);

        i51 = $i1;

        if $i1 >= 0 goto label5;

        $i2 = neg $i1;

        i51 = $i2;

        $i53 = (int) 65535;

        if $i2 <= $i53 goto label2;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r17 = $r16.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r18 = $r17.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r19 = virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r20 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r21 = $r20.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r22 = $r21.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r23 = virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r23);

     label2:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i4 = $i3 + 2;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = $i4;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i50 = lengthof $r3;

        if $i50 > $i2 goto label3;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i48 = $i2 * 2;

        $r14 = newarray (int)[$i48];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, $r14, 0, $i50);

     label3:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r4[$i2] = $i5;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>(6);

        $l6 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i49 = lengthof $r5;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i8 = $i7 + 8;

        if $i8 < $i49 goto label4;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(8);

     label4:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i10 = $i9 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i10;

        $l11 = $l6 >>> 56;

        $i12 = (int) $l11;

        $b13 = (byte) $i12;

        $r6[$i9] = $b13;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i15 = $i14 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i15;

        $l16 = $l6 >>> 48;

        $i17 = (int) $l16;

        $b18 = (byte) $i17;

        $r7[$i14] = $b18;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i19 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i20 = $i19 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i20;

        $l21 = $l6 >>> 40;

        $i22 = (int) $l21;

        $b23 = (byte) $i22;

        $r8[$i19] = $b23;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i24 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i25 = $i24 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i25;

        $l26 = $l6 >>> 32;

        $i27 = (int) $l26;

        $b28 = (byte) $i27;

        $r9[$i24] = $b28;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i29 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i30 = $i29 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i30;

        $l31 = $l6 >>> 24;

        $i32 = (int) $l31;

        $b33 = (byte) $i32;

        $r10[$i29] = $b33;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i34 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i35 = $i34 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i35;

        $l36 = $l6 >>> 16;

        $i37 = (int) $l36;

        $b38 = (byte) $i37;

        $r11[$i34] = $b38;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i39 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i40 = $i39 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i40;

        $l41 = $l6 >>> 8;

        $i42 = (int) $l41;

        $b43 = (byte) $i42;

        $r12[$i39] = $b43;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i44 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i45 = $i44 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i45;

        $i46 = (int) $l6;

        $b47 = (byte) $i46;

        $r13[$i44] = $b47;

     label5:
        return i51;
    }

    public int literalIndex(float)
    {
        byte[] $r5, $r6, $r7, $r8, $r9;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r15;
        byte $b13, $b17, $b21, $b24;
        int[] $r3, $r4, $r10, $r11;
        org.eclipse.jdt.internal.compiler.ClassFile $r12, $r16;
        float f0;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r19;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r13, $r17;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r14, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i18, $i19, $i20, $i22, $i23, $i25, $i26, i27, $i29;
        org.eclipse.jdt.internal.compiler.codegen.FloatCache $r1, $r2, $r21;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        f0 := @parameter0: float;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.FloatCache floatCache>;

        if $r1 != null goto label1;

        $r21 = new org.eclipse.jdt.internal.compiler.codegen.FloatCache;

        specialinvoke $r21.<org.eclipse.jdt.internal.compiler.codegen.FloatCache: void <init>(int)>(3);

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.FloatCache floatCache> = $r21;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.FloatCache floatCache>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i1 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.FloatCache: int putIfAbsent(float,int)>(f0, $i0);

        i27 = $i1;

        if $i1 >= 0 goto label5;

        $i2 = neg $i1;

        i27 = $i2;

        $i29 = (int) 65535;

        if $i2 <= $i29 goto label2;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r15 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r16 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r17 = $r16.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r18 = $r17.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r19 = virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r19);

     label2:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i4 = $i3 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = $i4;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i26 = lengthof $r3;

        if $i26 > $i2 goto label3;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i25 = $i2 * 2;

        $r10 = newarray (int)[$i25];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, $r10, 0, $i26);

     label3:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r4[$i2] = $i5;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>(4);

        $i6 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        $i7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i9 = $i7 + 4;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i8 = lengthof $r5;

        if $i9 < $i8 goto label4;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(4);

     label4:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i11 = $i10 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i11;

        $i12 = $i6 >>> 24;

        $b13 = (byte) $i12;

        $r6[$i10] = $b13;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i15 = $i14 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i15;

        $i16 = $i6 >>> 16;

        $b17 = (byte) $i16;

        $r7[$i14] = $b17;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i19 = $i18 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i19;

        $i20 = $i6 >>> 8;

        $b21 = (byte) $i20;

        $r8[$i18] = $b21;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i22 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i23 = $i22 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i23;

        $b24 = (byte) $i6;

        $r9[$i22] = $b24;

     label5:
        return i27;
    }

    public int literalIndex(int)
    {
        byte[] $r5, $r6, $r7, $r8, $r9;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r15;
        org.eclipse.jdt.internal.compiler.codegen.IntegerCache $r1, $r2, $r21;
        byte $b13, $b17, $b21, $b24;
        int[] $r3, $r4, $r10, $r11;
        org.eclipse.jdt.internal.compiler.ClassFile $r12, $r16;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r19;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r13, $r17;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r14, $r18;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i18, $i19, $i20, $i22, $i23, $i25, $i26, i27, $i29;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        i0 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.IntegerCache intCache>;

        if $r1 != null goto label1;

        $r21 = new org.eclipse.jdt.internal.compiler.codegen.IntegerCache;

        specialinvoke $r21.<org.eclipse.jdt.internal.compiler.codegen.IntegerCache: void <init>(int)>(248);

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.IntegerCache intCache> = $r21;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.IntegerCache intCache>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i2 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.IntegerCache: int putIfAbsent(int,int)>(i0, $i1);

        i27 = $i2;

        if $i2 >= 0 goto label5;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i4 = $i3 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = $i4;

        $i5 = neg $i2;

        i27 = $i5;

        $i29 = (int) 65535;

        if $i5 <= $i29 goto label2;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r15 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r16 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r17 = $r16.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r18 = $r17.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r19 = virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r19);

     label2:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i26 = lengthof $r3;

        if $i26 > $i5 goto label3;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i25 = $i5 * 2;

        $r10 = newarray (int)[$i25];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, $r10, 0, $i26);

     label3:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r4[$i5] = $i6;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>(3);

        $i7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i9 = $i7 + 4;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i8 = lengthof $r5;

        if $i9 < $i8 goto label4;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(4);

     label4:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i11 = $i10 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i11;

        $i12 = i0 >>> 24;

        $b13 = (byte) $i12;

        $r6[$i10] = $b13;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i15 = $i14 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i15;

        $i16 = i0 >>> 16;

        $b17 = (byte) $i16;

        $r7[$i14] = $b17;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i19 = $i18 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i19;

        $i20 = i0 >>> 8;

        $b21 = (byte) $i20;

        $r8[$i18] = $b21;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i22 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i23 = $i22 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i23;

        $b24 = (byte) i0;

        $r9[$i22] = $b24;

     label5:
        return i27;
    }

    public int literalIndex(long)
    {
        byte[] $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        byte $b14, $b19, $b24, $b29, $b34, $b39, $b44, $b48;
        org.eclipse.jdt.internal.compiler.codegen.LongCache $r1, $r2, $r25;
        long l0, $l12, $l17, $l22, $l27, $l32, $l37, $l42;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r18, $r22;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r19;
        int[] $r3, $r4, $r14, $r15;
        org.eclipse.jdt.internal.compiler.ClassFile $r16, $r20;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r23;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r17, $r21;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i15, $i16, $i18, $i20, $i21, $i23, $i25, $i26, $i28, $i30, $i31, $i33, $i35, $i36, $i38, $i40, $i41, $i43, $i45, $i46, $i47, $i49, $i50, i51, $i53;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        l0 := @parameter0: long;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.LongCache longCache>;

        if $r1 != null goto label1;

        $r25 = new org.eclipse.jdt.internal.compiler.codegen.LongCache;

        specialinvoke $r25.<org.eclipse.jdt.internal.compiler.codegen.LongCache: void <init>(int)>(5);

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.LongCache longCache> = $r25;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.LongCache longCache>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i2 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.LongCache: int putIfAbsent(long,int)>(l0, $i1);

        i51 = $i2;

        if $i2 >= 0 goto label5;

        $i3 = neg $i2;

        i51 = $i3;

        $i53 = (int) 65535;

        if $i3 <= $i53 goto label2;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r17 = $r16.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r18 = $r17.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r19 = virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r20 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r21 = $r20.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r22 = $r21.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r23 = virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r23);

     label2:
        $i4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i5 = $i4 + 2;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = $i5;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i50 = lengthof $r3;

        if $i50 > $i3 goto label3;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i49 = $i3 * 2;

        $r14 = newarray (int)[$i49];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, $r14, 0, $i50);

     label3:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r4[$i3] = $i6;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>(5);

        $i7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i9 = $i7 + 8;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i8 = lengthof $r5;

        if $i9 < $i8 goto label4;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(8);

     label4:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i11 = $i10 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i11;

        $l12 = l0 >>> 56;

        $i13 = (int) $l12;

        $b14 = (byte) $i13;

        $r6[$i10] = $b14;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i16 = $i15 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i16;

        $l17 = l0 >>> 48;

        $i18 = (int) $l17;

        $b19 = (byte) $i18;

        $r7[$i15] = $b19;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i21 = $i20 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i21;

        $l22 = l0 >>> 40;

        $i23 = (int) $l22;

        $b24 = (byte) $i23;

        $r8[$i20] = $b24;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i25 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i26 = $i25 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i26;

        $l27 = l0 >>> 32;

        $i28 = (int) $l27;

        $b29 = (byte) $i28;

        $r9[$i25] = $b29;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i30 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i31 = $i30 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i31;

        $l32 = l0 >>> 24;

        $i33 = (int) $l32;

        $b34 = (byte) $i33;

        $r10[$i30] = $b34;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i35 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i36 = $i35 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i36;

        $l37 = l0 >>> 16;

        $i38 = (int) $l37;

        $b39 = (byte) $i38;

        $r11[$i35] = $b39;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i40 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i41 = $i40 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i41;

        $l42 = l0 >>> 8;

        $i43 = (int) $l42;

        $b44 = (byte) $i43;

        $r12[$i40] = $b44;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i45 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i46 = $i45 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i46;

        $i47 = (int) l0;

        $b48 = (byte) $i47;

        $r13[$i45] = $b48;

     label5:
        return i51;
    }

    public int literalIndex(java.lang.String)
    {
        byte[] $r6, $r7, $r8;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r14;
        byte $b13, $b14;
        int[] $r4, $r5, $r9, $r10;
        org.eclipse.jdt.internal.compiler.ClassFile $r11, $r15;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r18;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r12, $r16;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r13, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i15, $i16, $i17, i18, i19, $i21;
        java.lang.String r0;
        org.eclipse.jdt.internal.compiler.codegen.CharArrayCache $r3;
        char[] $r1;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r2;

        r2 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r3 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache stringCache>;

        $i0 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i1 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int putIfAbsent(char[],int)>($r1, $i0);

        i18 = $i1;

        if $i1 >= 0 goto label4;

        $i2 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i3 = $i2 + 1;

        r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = $i3;

        $i4 = neg $i1;

        i18 = $i4;

        $i21 = (int) 65535;

        if $i4 <= $i21 goto label1;

        $r11 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r12 = $r11.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r14 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r15 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r16 = $r15.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r17 = $r16.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r18 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r18);

     label1:
        $r4 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i17 = lengthof $r4;

        if $i17 > $i4 goto label2;

        $r10 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i15 = $i4 * 2;

        $r9 = newarray (int)[$i15];

        r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i17);

     label2:
        $r5 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i5 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r5[$i4] = $i5;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>(8);

        $i16 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i6 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i8 = $i6 + 2;

        $r6 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i7 = lengthof $r6;

        if $i8 < $i7 goto label3;

        specialinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(2);

     label3:
        $i9 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i10 = $i9 + 2;

        r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i10;

        $i11 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int literalIndex(char[])>($r1);

        $r7 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i19 = $i16 + 1;

        $i12 = $i11 >> 8;

        $b13 = (byte) $i12;

        $r7[$i16] = $b13;

        $r8 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $b14 = (byte) $i11;

        $r8[i19] = $b14;

     label4:
        return i18;
    }

    public int literalIndexForType(char[])
    {
        byte[] $r5, $r6, $r7;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r13;
        byte $b13, $b14;
        int[] $r3, $r4, $r8, $r9;
        org.eclipse.jdt.internal.compiler.ClassFile $r10, $r14;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r17;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r11, $r15;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r12, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i15, $i16, $i17, i18, i19, $i21;
        org.eclipse.jdt.internal.compiler.codegen.CharArrayCache $r2;
        char[] r1;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r1 := @parameter0: char[];

        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache classCache>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i1 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int putIfAbsent(char[],int)>(r1, $i0);

        i18 = $i1;

        if $i1 >= 0 goto label4;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i3 = $i2 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = $i3;

        $i4 = neg $i1;

        i18 = $i4;

        $i21 = (int) 65535;

        if $i4 <= $i21 goto label1;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r11 = $r10.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r12 = $r11.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r13 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r14 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r15 = $r14.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r16 = $r15.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r17 = virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r17);

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i17 = lengthof $r3;

        if $i17 > $i4 goto label2;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i15 = $i4 * 2;

        $r8 = newarray (int)[$i15];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, 0, $i17);

     label2:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r4[$i4] = $i5;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>(7);

        $i16 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i8 = $i6 + 2;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i7 = lengthof $r5;

        if $i8 < $i7 goto label3;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(2);

     label3:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i10 = $i9 + 2;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i10;

        $i11 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int literalIndex(char[])>(r1);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i19 = $i16 + 1;

        $i12 = $i11 >> 8;

        $b13 = (byte) $i12;

        $r6[$i16] = $b13;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $b14 = (byte) $i11;

        $r7[i19] = $b14;

     label4:
        return i18;
    }

    public int literalIndexForType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)
    {
        org.eclipse.jdt.internal.compiler.ClassFile $r4;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r0, $r1;
        int $i0;
        char[] $r3;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r2;
        boolean $z0;

        r2 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding leafComponentType()>();

        $z0 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isNestedType()>();

        if $z0 == 0 goto label1;

        $r4 = r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ClassFile: void recordInnerClasses(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r1);

     label1:
        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: char[] constantPoolName()>();

        $i0 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int literalIndexForType(char[])>($r3);

        return $i0;
    }

    public int literalIndexForMethod(char[], char[], char[], boolean)
    {
        byte[] $r6, $r7, $r8, $r9, $r10;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r16;
        byte $b14, $b15, $b17, $b18, $b23;
        int[] $r4, $r5, $r11, $r12;
        boolean z0;
        org.eclipse.jdt.internal.compiler.ClassFile $r13, $r17;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r20;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r14, $r18;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r15, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16, $i19, $i20, $i21, i22, i24, i25, i26, $i28;
        char[] r1, r2, r3;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r1 := @parameter0: char[];

        r2 := @parameter1: char[];

        r3 := @parameter2: char[];

        z0 := @parameter3: boolean;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i1 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int putInCacheIfAbsent(char[],char[],char[],int)>(r1, r2, r3, $i0);

        i22 = $i1;

        if $i1 >= 0 goto label6;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i3 = $i2 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = $i3;

        $i4 = neg $i1;

        i22 = $i4;

        $i28 = (int) 65535;

        if $i4 <= $i28 goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r15 = $r14.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r16 = virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r17 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r18 = $r17.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r19 = $r18.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r20 = virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r20);

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i21 = lengthof $r4;

        if $i21 > $i4 goto label2;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i20 = $i4 * 2;

        $r11 = newarray (int)[$i20];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r11, 0, $i21);

     label2:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r5[$i4] = $i5;

        if z0 == 0 goto label3;

        $b23 = 11;

        goto label4;

     label3:
        $b23 = 10;

     label4:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>($b23);

        $i19 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i8 = $i6 + 4;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i7 = lengthof $r6;

        if $i8 < $i7 goto label5;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(4);

     label5:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i10 = $i9 + 4;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i10;

        $i11 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int literalIndexForType(char[])>(r1);

        $i12 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int literalIndexForNameAndType(char[],char[])>(r2, r3);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i24 = $i19 + 1;

        $i13 = $i11 >> 8;

        $b14 = (byte) $i13;

        $r7[$i19] = $b14;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i25 = i24 + 1;

        $b15 = (byte) $i11;

        $r8[i24] = $b15;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i26 = i25 + 1;

        $i16 = $i12 >> 8;

        $b17 = (byte) $i16;

        $r9[i25] = $b17;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $b18 = (byte) $i12;

        $r10[i26] = $b18;

     label6:
        return i22;
    }

    public int literalIndexForMethod(org.eclipse.jdt.internal.compiler.lookup.TypeBinding, char[], char[], boolean)
    {
        org.eclipse.jdt.internal.compiler.ClassFile $r5;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r0;
        int $i0;
        char[] $r2, r3, r4;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r1;
        boolean $z0, z1;

        r1 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        r3 := @parameter1: char[];

        r4 := @parameter2: char[];

        z1 := @parameter3: boolean;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isNestedType()>();

        if $z0 == 0 goto label1;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ClassFile: void recordInnerClasses(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r0);

     label1:
        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: char[] constantPoolName()>();

        $i0 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int literalIndexForMethod(char[],char[],char[],boolean)>($r2, r3, r4, z1);

        return $i0;
    }

    public int literalIndexForNameAndType(char[], char[])
    {
        byte[] $r5, $r6, $r7, $r8, $r9;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r15;
        byte $b14, $b15, $b17, $b18;
        int[] $r3, $r4, $r10, $r11;
        org.eclipse.jdt.internal.compiler.ClassFile $r12, $r16;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r19;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r13, $r17;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r14, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16, $i19, $i20, $i21, i22, i23, i24, i25, $i27;
        char[] r1, r2;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r1 := @parameter0: char[];

        r2 := @parameter1: char[];

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i1 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int putInNameAndTypeCacheIfAbsent(char[],char[],int)>(r1, r2, $i0);

        i22 = $i1;

        if $i1 >= 0 goto label4;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i3 = $i2 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = $i3;

        $i4 = neg $i1;

        i22 = $i4;

        $i27 = (int) 65535;

        if $i4 <= $i27 goto label1;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r15 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r16 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r17 = $r16.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r18 = $r17.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r19 = virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r19);

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i21 = lengthof $r3;

        if $i21 > $i4 goto label2;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i19 = $i4 * 2;

        $r10 = newarray (int)[$i19];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, $r10, 0, $i21);

     label2:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r4[$i4] = $i5;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>(12);

        $i20 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i8 = $i6 + 4;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i7 = lengthof $r5;

        if $i8 < $i7 goto label3;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(4);

     label3:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i10 = $i9 + 4;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i10;

        $i11 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int literalIndex(char[])>(r1);

        $i12 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int literalIndex(char[])>(r2);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i23 = $i20 + 1;

        $i13 = $i11 >> 8;

        $b14 = (byte) $i13;

        $r6[$i20] = $b14;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i24 = i23 + 1;

        $b15 = (byte) $i11;

        $r7[i23] = $b15;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i25 = i24 + 1;

        $i16 = $i12 >> 8;

        $b17 = (byte) $i16;

        $r8[i24] = $b17;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $b18 = (byte) $i12;

        $r9[i25] = $b18;

     label4:
        return i22;
    }

    public int literalIndexForField(char[], char[], char[])
    {
        byte[] $r6, $r7, $r8, $r9, $r10;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r16;
        byte $b14, $b15, $b17, $b18;
        int[] $r4, $r5, $r11, $r12;
        org.eclipse.jdt.internal.compiler.ClassFile $r13, $r17;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r20;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r14, $r18;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r15, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16, $i19, $i20, $i21, i22, i23, i24, i25, $i27;
        char[] r1, r2, r3;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r1 := @parameter0: char[];

        r2 := @parameter1: char[];

        r3 := @parameter2: char[];

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i1 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int putInCacheIfAbsent(char[],char[],char[],int)>(r1, r2, r3, $i0);

        i22 = $i1;

        if $i1 >= 0 goto label4;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i3 = $i2 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = $i3;

        $i4 = neg $i1;

        i22 = $i4;

        $i27 = (int) 65535;

        if $i4 <= $i27 goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r15 = $r14.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r16 = virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r17 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r18 = $r17.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r19 = $r18.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r20 = virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r20);

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i21 = lengthof $r4;

        if $i21 > $i4 goto label2;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i19 = $i4 * 2;

        $r11 = newarray (int)[$i19];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r11, 0, $i21);

     label2:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r5[$i4] = $i5;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>(9);

        $i20 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i8 = $i6 + 4;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i7 = lengthof $r6;

        if $i8 < $i7 goto label3;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(4);

     label3:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i10 = $i9 + 4;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i10;

        $i11 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int literalIndexForType(char[])>(r1);

        $i12 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int literalIndexForNameAndType(char[],char[])>(r2, r3);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i23 = $i20 + 1;

        $i13 = $i11 >> 8;

        $b14 = (byte) $i13;

        $r7[$i20] = $b14;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i24 = i23 + 1;

        $b15 = (byte) $i11;

        $r8[i23] = $b15;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i25 = i24 + 1;

        $i16 = $i12 >> 8;

        $b17 = (byte) $i16;

        $r9[i24] = $b17;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $b18 = (byte) $i12;

        $r10[i25] = $b18;

     label4:
        return i22;
    }

    public int literalIndexForLdc(char[])
    {
        byte[] $r5, $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        byte $b16, $b17, $b36, $b41, $b50, $b56, $b61, $b67, $b69, $b70;
        short $s40, $s60;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r29, $r33, $r39, $r43;
        org.eclipse.jdt.internal.compiler.codegen.CharArrayCache $r2, $r6, $r23, $r24;
        int[] $r3, $r4, $r9, $r10, $r25, $r26, $r35, $r36;
        org.eclipse.jdt.internal.compiler.ClassFile $r27, $r31, $r37, $r41;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r34, $r44;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r28, $r32, $r38, $r42;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i37, $i38, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i51, $i52, $i53, $i54, $i55, $i57, $i58, $i62, $i63, $i64, $i65, $i66, $i68, $i71, $i72, $i73, $i74, $i75, $i76, i77, i78, i79, i80, $i81, i82, i83, $i85, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i95;
        char[] r1;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r30, $r40;
        char c27, $c39, $c59;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r1 := @parameter0: char[];

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        i1 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache stringCache>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int putIfAbsent(char[],int)>(r1, $i2);

        i77 = $i3;

        if $i3 >= 0 goto label17;

        $i4 = neg $i3;

        i77 = $i4;

        $i85 = (int) 65535;

        if $i4 <= $i85 goto label01;

        $r37 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r38 = $r37.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r39 = $r38.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r40 = virtualinvoke $r39.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r41 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r42 = $r41.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r43 = $r42.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r44 = virtualinvoke $r43.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r40.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r44);

     label01:
        $i5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i6 = $i5 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = $i6;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i76 = lengthof $r3;

        if $i76 > $i4 goto label02;

        $r36 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i74 = $i4 * 2;

        $r35 = newarray (int)[$i74];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r35;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r36, 0, $r35, 0, $i76);

     label02:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r4[$i4] = $i7;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>(8);

        $i75 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i10 = $i8 + 2;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i9 = lengthof $r5;

        if $i10 < $i9 goto label03;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(2);

     label03:
        $i11 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i12 = $i11 + 2;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i12;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache UTF8Cache>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i14 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int putIfAbsent(char[],int)>(r1, $i13);

        i78 = $i14;

        if $i14 >= 0 goto label16;

        $i18 = neg $i14;

        i78 = $i18;

        $i87 = (int) 65535;

        if $i18 <= $i87 goto label04;

        $r27 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r28 = $r27.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r29 = $r28.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r30 = virtualinvoke $r29.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r31 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.ClassFile classFile>;

        $r32 = $r31.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $r33 = $r32.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r34 = virtualinvoke $r33.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        virtualinvoke $r30.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceInConstantPool(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r34);

     label04:
        $i19 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex>;

        $i20 = $i19 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = $i20;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i73 = lengthof $r9;

        if $i73 > $i18 goto label05;

        $r26 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i71 = $i18 * 2;

        $r25 = newarray (int)[$i71];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets> = $r25;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r26, 0, $r25, 0, $i73);

     label05:
        $r10 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int[] offsets>;

        $i21 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $r10[$i18] = $i21;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void writeU1(int)>(1);

        $i72 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i22 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i24 = $i22 + 2;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i23 = lengthof $r11;

        if $i24 < $i23 goto label06;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(2);

     label06:
        $i25 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i26 = $i25 + 2;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i26;

        i79 = 0;

        i80 = 0;

        goto label14;

     label07:
        c27 = r1[i80];

        $i88 = (int) c27;

        if $i88 < 1 goto label09;

        $i89 = (int) c27;

        if $i89 > 127 goto label09;

        i79 = i79 + 1;

        $i62 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i64 = $i62 + 1;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i63 = lengthof $r19;

        if $i64 < $i63 goto label08;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(1);

     label08:
        $r20 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i65 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i66 = $i65 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i66;

        $b67 = (byte) c27;

        $r20[$i65] = $b67;

        goto label13;

     label09:
        $i90 = (int) c27;

        if $i90 <= 2047 goto label11;

        i79 = i79 + 3;

        $i42 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i44 = $i42 + 3;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i43 = lengthof $r15;

        if $i44 < $i43 goto label10;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(3);

     label10:
        $r16 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i45 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i46 = $i45 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i46;

        $i91 = (int) c27;

        $i47 = $i91 >> 12;

        $i48 = $i47 & 15;

        $i49 = 224 | $i48;

        $b50 = (byte) $i49;

        $r16[$i45] = $b50;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i51 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i52 = $i51 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i52;

        $i92 = (int) c27;

        $i53 = $i92 >> 6;

        $i54 = $i53 & 63;

        $i55 = 128 | $i54;

        $b56 = (byte) $i55;

        $r17[$i51] = $b56;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i57 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i58 = $i57 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i58;

        $c59 = c27 & 63;

        $s60 = 128 | $c59;

        $b61 = (byte) $s60;

        $r18[$i57] = $b61;

        goto label13;

     label11:
        $i28 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i30 = $i28 + 2;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i29 = lengthof $r12;

        if $i30 < $i29 goto label12;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(2);

     label12:
        i79 = i79 + 2;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i31 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i32 = $i31 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i32;

        $i93 = (int) c27;

        $i33 = $i93 >> 6;

        $i34 = $i33 & 31;

        $i35 = 192 | $i34;

        $b36 = (byte) $i35;

        $r13[$i31] = $b36;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i37 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i38 = $i37 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i38;

        $c39 = c27 & 63;

        $s40 = 128 | $c39;

        $b41 = (byte) $s40;

        $r14[$i37] = $b41;

     label13:
        i80 = i80 + 1;

     label14:
        $i81 = lengthof r1;

        if i80 < $i81 goto label07;

        $i95 = (int) 65535;

        if i79 < $i95 goto label15;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = i1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = i0;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache stringCache>;

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void remove(char[])>(r1);

        $r24 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache UTF8Cache>;

        virtualinvoke $r24.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void remove(char[])>(r1);

        return 0;

     label15:
        $r21 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i82 = $i72 + 1;

        $i68 = i79 >> 8;

        $b69 = (byte) $i68;

        $r21[$i72] = $b69;

        $r22 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $b70 = (byte) i79;

        $r22[i82] = $b70;

     label16:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i83 = $i75 + 1;

        $i15 = i78 >> 8;

        $b16 = (byte) $i15;

        $r7[$i75] = $b16;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $b17 = (byte) i78;

        $r8[i83] = $b17;

     label17:
        return i77;
    }

    private int putInNameAndTypeCacheIfAbsent(char[], char[], int)
    {
        org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry $r9, r11;
        int i0, $i1, i2;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.codegen.CharArrayCache $r6, r12;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObject $r2, $r8, $r10;
        char[] r1, r4, $r5, $r7;
        java.lang.Object $r3;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r1 := @parameter0: char[];

        r4 := @parameter1: char[];

        i0 := @parameter2: int;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.util.HashtableOfObject nameAndTypeCacheForFieldsAndMethods>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: java.lang.Object get(char[])>(r1);

        if $r3 != null goto label1;

        $r9 = new org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry;

        specialinvoke $r9.<org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry: void <init>(char[],int)>(r4, i0);

        i2 = neg i0;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.util.HashtableOfObject nameAndTypeCacheForFieldsAndMethods>;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: java.lang.Object put(char[],java.lang.Object)>(r1, $r9);

        goto label4;

     label1:
        $z0 = $r3 instanceof org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry;

        if $z0 == 0 goto label3;

        r11 = (org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry) $r3;

        $r5 = r11.<org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry: char[] signature>;

        $z1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>(r4, $r5);

        if $z1 == 0 goto label2;

        i2 = r11.<org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry: int index>;

        goto label4;

     label2:
        $r6 = new org.eclipse.jdt.internal.compiler.codegen.CharArrayCache;

        specialinvoke $r6.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void <init>()>();

        $r7 = r11.<org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry: char[] signature>;

        $i1 = r11.<org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry: int index>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int putIfAbsent(char[],int)>($r7, $i1);

        i2 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int putIfAbsent(char[],int)>(r4, i0);

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.util.HashtableOfObject nameAndTypeCacheForFieldsAndMethods>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: java.lang.Object put(char[],java.lang.Object)>(r1, $r6);

        goto label4;

     label3:
        r12 = (org.eclipse.jdt.internal.compiler.codegen.CharArrayCache) $r3;

        i2 = virtualinvoke r12.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int putIfAbsent(char[],int)>(r4, i0);

     label4:
        return i2;
    }

    private int putInCacheIfAbsent(char[], char[], char[], int)
    {
        org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry $r10, $r13, r15;
        int i0, $i1, i2;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.codegen.CharArrayCache $r8, r16;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObject $r2, $r11, $r12, r14;
        char[] r1, r4, r6, $r7, $r9;
        java.lang.Object $r3, $r5;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        r1 := @parameter0: char[];

        r4 := @parameter1: char[];

        r6 := @parameter2: char[];

        i0 := @parameter3: int;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.util.HashtableOfObject methodsAndFieldsCache>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: java.lang.Object get(char[])>(r1);

        r14 = (org.eclipse.jdt.internal.compiler.util.HashtableOfObject) $r3;

        if r14 != null goto label1;

        $r11 = new org.eclipse.jdt.internal.compiler.util.HashtableOfObject;

        specialinvoke $r11.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: void <init>()>();

        $r12 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.util.HashtableOfObject methodsAndFieldsCache>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: java.lang.Object put(char[],java.lang.Object)>(r1, $r11);

        $r13 = new org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry;

        specialinvoke $r13.<org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry: void <init>(char[],int)>(r6, i0);

        i2 = neg i0;

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: java.lang.Object put(char[],java.lang.Object)>(r4, $r13);

        goto label5;

     label1:
        $r5 = virtualinvoke r14.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: java.lang.Object get(char[])>(r4);

        if $r5 != null goto label2;

        $r10 = new org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry;

        specialinvoke $r10.<org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry: void <init>(char[],int)>(r6, i0);

        i2 = neg i0;

        virtualinvoke r14.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: java.lang.Object put(char[],java.lang.Object)>(r4, $r10);

        goto label5;

     label2:
        $z0 = $r5 instanceof org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry;

        if $z0 == 0 goto label4;

        r15 = (org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry) $r5;

        $r7 = r15.<org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry: char[] signature>;

        $z1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>(r6, $r7);

        if $z1 == 0 goto label3;

        i2 = r15.<org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry: int index>;

        goto label5;

     label3:
        $r8 = new org.eclipse.jdt.internal.compiler.codegen.CharArrayCache;

        specialinvoke $r8.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void <init>()>();

        $r9 = r15.<org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry: char[] signature>;

        $i1 = r15.<org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry: int index>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int putIfAbsent(char[],int)>($r9, $i1);

        i2 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int putIfAbsent(char[],int)>(r6, i0);

        virtualinvoke r14.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: java.lang.Object put(char[],java.lang.Object)>(r4, $r8);

        goto label5;

     label4:
        r16 = (org.eclipse.jdt.internal.compiler.codegen.CharArrayCache) $r5;

        i2 = virtualinvoke r16.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int putIfAbsent(char[],int)>(r6, i0);

     label5:
        return i2;
    }

    public void resetForClinit(int, int)
    {
        int i0, i1, $i2, $i3, $i4;
        org.eclipse.jdt.internal.compiler.codegen.CharArrayCache $r2, $r4, $r6, $r8, $r10, $r12;
        char[] $r1, $r3, $r5, $r7, $r9, $r11;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = i0;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = i1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache UTF8Cache>;

        $r1 = <org.eclipse.jdt.internal.compiler.codegen.AttributeNamesConstants: char[] CodeName>;

        $i2 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int get(char[])>($r1);

        if $i2 < i0 goto label1;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache UTF8Cache>;

        $r11 = <org.eclipse.jdt.internal.compiler.codegen.AttributeNamesConstants: char[] CodeName>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void remove(char[])>($r11);

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache UTF8Cache>;

        $r3 = <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ClinitSignature>;

        $i3 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int get(char[])>($r3);

        if $i3 < i0 goto label2;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache UTF8Cache>;

        $r9 = <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] ClinitSignature>;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void remove(char[])>($r9);

     label2:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache UTF8Cache>;

        $r5 = <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] Clinit>;

        $i4 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int get(char[])>($r5);

        if $i4 < i0 goto label3;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache UTF8Cache>;

        $r7 = <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] Clinit>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void remove(char[])>($r7);

     label3:
        return;
    }

    private final void resizePoolContents(int)
    {
        byte[] $r1, $r2, $r3;
        int i0, i1, $i2, i3;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        i1 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        i0 = lengthof $r1;

        i3 = i0;

        if i0 >= i1 goto label1;

        i3 = i1;

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i2 = i0 + i3;

        $r2 = newarray (byte)[$i2];

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent> = $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, i0);

        return;
    }

    protected final void writeU1(int)
    {
        byte[] $r1, $r2;
        byte $b6;
        int $i0, $i1, $i2, $i3, $i4, i5;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        i5 := @parameter0: int;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i2 = $i0 + 1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i1 = lengthof $r1;

        if $i2 < $i1 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(1);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i4 = $i3 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i4;

        $b6 = (byte) i5;

        $r2[$i3] = $b6;

        return;
    }

    protected final void writeU2(int)
    {
        byte[] $r1, $r2, $r3;
        byte $b7, $b10;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i8, $i9;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        i5 := @parameter0: int;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i2 = $i0 + 2;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i1 = lengthof $r1;

        if $i2 < $i1 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void resizePoolContents(int)>(2);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i4 = $i3 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i4;

        $i6 = i5 >>> 8;

        $b7 = (byte) $i6;

        $r2[$i3] = $b7;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: byte[] poolContent>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset>;

        $i9 = $i8 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = $i9;

        $b10 = (byte) i5;

        $r3[$i8] = $b10;

        return;
    }

    public void reset()
    {
        org.eclipse.jdt.internal.compiler.codegen.CharArrayCache $r5, $r6, $r8;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObject $r7, $r9;
        org.eclipse.jdt.internal.compiler.codegen.IntegerCache $r3, $r11;
        org.eclipse.jdt.internal.compiler.codegen.FloatCache $r2, $r12;
        org.eclipse.jdt.internal.compiler.codegen.DoubleCache $r1, $r13;
        org.eclipse.jdt.internal.compiler.codegen.ConstantPool r0;
        org.eclipse.jdt.internal.compiler.codegen.LongCache $r4, $r10;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.ConstantPool;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.DoubleCache doubleCache>;

        if $r1 == null goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.DoubleCache doubleCache>;

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.codegen.DoubleCache: void clear()>();

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.FloatCache floatCache>;

        if $r2 == null goto label2;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.FloatCache floatCache>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.codegen.FloatCache: void clear()>();

     label2:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.IntegerCache intCache>;

        if $r3 == null goto label3;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.IntegerCache intCache>;

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.codegen.IntegerCache: void clear()>();

     label3:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.LongCache longCache>;

        if $r4 == null goto label4;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.LongCache longCache>;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.codegen.LongCache: void clear()>();

     label4:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache UTF8Cache>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void clear()>();

        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache stringCache>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void clear()>();

        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.util.HashtableOfObject methodsAndFieldsCache>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: void clear()>();

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.codegen.CharArrayCache classCache>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void clear()>();

        $r9 = r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: org.eclipse.jdt.internal.compiler.util.HashtableOfObject nameAndTypeCacheForFieldsAndMethods>;

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: void clear()>();

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentIndex> = 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: int currentOffset> = 0;

        return;
    }
}
