public class com.hp.hpl.jena.rdf.model.impl.ReifierStd extends java.lang.Object
{
    private static final com.hp.hpl.jena.graph.Node rdfType;
    private static final com.hp.hpl.jena.graph.Node statement;
    private static final com.hp.hpl.jena.graph.Node subject;
    private static final com.hp.hpl.jena.graph.Node predicate;
    private static final com.hp.hpl.jena.graph.Node object;
    static com.hp.hpl.jena.util.iterator.Filter filterReif;

    private void <init>()
    {
        com.hp.hpl.jena.rdf.model.impl.ReifierStd r0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ReifierStd;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.util.iterator.ExtendedIterator findEither(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.TripleMatch, boolean)
    {
        com.hp.hpl.jena.util.iterator.NullIterator $r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.graph.Graph r0;
        com.hp.hpl.jena.graph.TripleMatch r1;
        boolean z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.TripleMatch;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r3 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        return $r3;

     label1:
        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>(r1);

        return $r2;
    }

    public static com.hp.hpl.jena.util.iterator.ExtendedIterator findExposed(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2, $r4, $r5;
        com.hp.hpl.jena.graph.Graph r0;
        com.hp.hpl.jena.graph.TripleMatch r1;
        com.hp.hpl.jena.util.iterator.Filter $r3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.TripleMatch;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>(r1);

        $r3 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.util.iterator.Filter filterReif>;

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(com.hp.hpl.jena.util.iterator.Filter)>($r3);

        $r5 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r4);

        return $r5;
    }

    public static com.hp.hpl.jena.graph.Triple getTriple(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        com.hp.hpl.jena.graph.Triple $r10;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r3 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node rdfType>;

        $r2 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node statement>;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r3, $r2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node subject>;

        $r5 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node getObject(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, r1, $r4);

        if $r5 != null goto label2;

        return null;

     label2:
        $r6 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node predicate>;

        $r7 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node getObject(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, r1, $r6);

        if $r7 != null goto label3;

        return null;

     label3:
        $r8 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node object>;

        $r9 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node getObject(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, r1, $r8);

        if $r9 != null goto label4;

        return null;

     label4:
        $r10 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r10.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r5, $r7, $r9);

        return $r10;
    }

    private static com.hp.hpl.jena.graph.Node getObject(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.lang.Throwable $r7;
        com.hp.hpl.jena.graph.Node r1, r2, $r3, $r6;
        com.hp.hpl.jena.graph.Triple r8;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        java.lang.Object $r5;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, $r3);

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

     label2:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return null;

     label3:
        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r5;

        $z1 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

     label4:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return null;

     label5:
        $r6 = virtualinvoke r8.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

     label6:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return $r6;

     label7:
        $r7 := @caughtexception;

     label8:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public static boolean hasTriple(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple)
    {
        java.lang.Throwable $r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.graph.Graph r0;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r2 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.util.iterator.ExtendedIterator findNodesForTriple(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Triple,boolean)>(r0, r1, 0);

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

     label2:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return $z0;

     label3:
        $r3 := @caughtexception;

     label4:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static boolean hasTriple(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.graph.Graph r0;
        com.hp.hpl.jena.graph.Triple $r2;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r2 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Triple getTriple(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node)>(r0, r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static com.hp.hpl.jena.util.iterator.ExtendedIterator allNodes(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.util.iterator.ExtendedIterator allNodes(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Triple)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.util.iterator.ExtendedIterator allNodes(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.graph.Graph r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r2 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.util.iterator.ExtendedIterator findNodesForTriple(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Triple,boolean)>(r0, r1, 0);

        return $r2;
    }

    private static com.hp.hpl.jena.util.iterator.ExtendedIterator findNodesForTriple(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple, boolean)
    {
        java.lang.Throwable $r18;
        com.hp.hpl.jena.util.iterator.WrappedIterator $r7;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r10, $r12, $r13, $r14, $r15, $r16, $r17;
        java.util.ArrayList $r5;
        com.hp.hpl.jena.graph.Graph r0;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r6;
        com.hp.hpl.jena.graph.Triple r9, r11;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        java.lang.Object $r8;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r11 := @parameter1: com.hp.hpl.jena.graph.Triple;

        z0 := @parameter2: boolean;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node rdfType>;

        $r1 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node statement>;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r2, $r1);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label1:
        $z4 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z4 == 0 goto label6;

        $r8 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.graph.Triple) $r8;

        $r10 = virtualinvoke r9.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        if r11 == null goto label4;

        $r12 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node subject>;

        $r13 = virtualinvoke r11.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z1 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: boolean exactlyOne(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, $r10, $r12, $r13);

        if $z1 != 0 goto label2;

        goto label1;

     label2:
        $r14 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node predicate>;

        $r15 = virtualinvoke r11.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z2 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: boolean exactlyOne(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, $r10, $r14, $r15);

        if $z2 != 0 goto label3;

        goto label1;

     label3:
        $r16 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node object>;

        $r17 = virtualinvoke r11.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z3 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: boolean exactlyOne(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, $r10, $r16, $r17);

        if $z3 != 0 goto label4;

        goto label1;

     label4:
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r10);

        if z0 == 0 goto label5;

        goto label6;

     label5:
        goto label1;

     label6:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        goto label9;

     label7:
        $r18 := @caughtexception;

     label8:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r18;

     label9:
        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        $r7 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.WrappedIterator createNoRemove(java.util.Iterator)>($r6);

        return $r7;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private static boolean exactlyOne(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.lang.Throwable $r9;
        com.hp.hpl.jena.graph.Node r1, r2, $r3, $r7, r8;
        com.hp.hpl.jena.graph.Triple $r6;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        java.lang.Object $r5;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        r8 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, $r3);

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

     label2:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return 0;

     label3:
        $z1 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        $r6 = (com.hp.hpl.jena.graph.Triple) $r5;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z2 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r8);

        if $z2 != 0 goto label5;

     label4:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return 0;

     label5:
        goto label3;

     label6:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return 1;

     label7:
        $r9 := @caughtexception;

     label8:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public static com.hp.hpl.jena.graph.Node reifyAs(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r13, $r14, $r16, $r17, $r19, $r20, r25;
        com.hp.hpl.jena.shared.AlreadyReifiedException $r24;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.graph.Triple $r1, $r8, $r11, r12, $r15, $r18;
        com.hp.hpl.jena.shared.CannotReifyException $r21, $r22, $r23;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r25 := @parameter1: com.hp.hpl.jena.graph.Node;

        r12 := @parameter2: com.hp.hpl.jena.graph.Triple;

        if r25 != null goto label1;

        r25 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

        goto label6;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Triple getTriple(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node)>(r0, r25);

        if $r1 == null goto label2;

        $z3 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Triple: boolean equals(java.lang.Object)>(r12);

        if $z3 != 0 goto label2;

        $r24 = new com.hp.hpl.jena.shared.AlreadyReifiedException;

        specialinvoke $r24.<com.hp.hpl.jena.shared.AlreadyReifiedException: void <init>(com.hp.hpl.jena.graph.Node)>(r25);

        throw $r24;

     label2:
        if $r1 == null goto label3;

        return r25;

     label3:
        $r3 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node subject>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r25, $r3, $r2);

        if $z0 == 0 goto label4;

        $r23 = new com.hp.hpl.jena.shared.CannotReifyException;

        specialinvoke $r23.<com.hp.hpl.jena.shared.CannotReifyException: void <init>(com.hp.hpl.jena.graph.Node)>(r25);

        throw $r23;

     label4:
        $r5 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node predicate>;

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r25, $r5, $r4);

        if $z1 == 0 goto label5;

        $r22 = new com.hp.hpl.jena.shared.CannotReifyException;

        specialinvoke $r22.<com.hp.hpl.jena.shared.CannotReifyException: void <init>(com.hp.hpl.jena.graph.Node)>(r25);

        throw $r22;

     label5:
        $r7 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node object>;

        $r6 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z2 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r25, $r7, $r6);

        if $z2 == 0 goto label6;

        $r21 = new com.hp.hpl.jena.shared.CannotReifyException;

        specialinvoke $r21.<com.hp.hpl.jena.shared.CannotReifyException: void <init>(com.hp.hpl.jena.graph.Node)>(r25);

        throw $r21;

     label6:
        $r8 = new com.hp.hpl.jena.graph.Triple;

        $r10 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node rdfType>;

        $r9 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node statement>;

        specialinvoke $r8.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r25, $r10, $r9);

        interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r8);

        $r11 = new com.hp.hpl.jena.graph.Triple;

        $r13 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node subject>;

        $r14 = virtualinvoke r12.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        specialinvoke $r11.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r25, $r13, $r14);

        interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r11);

        $r15 = new com.hp.hpl.jena.graph.Triple;

        $r16 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node predicate>;

        $r17 = virtualinvoke r12.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        specialinvoke $r15.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r25, $r16, $r17);

        interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r15);

        $r18 = new com.hp.hpl.jena.graph.Triple;

        $r19 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node object>;

        $r20 = virtualinvoke r12.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        specialinvoke $r18.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r25, $r19, $r20);

        interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r18);

        return r25;
    }

    public static void remove(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple)
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.graph.Node r6;
        com.hp.hpl.jena.graph.Triple r1;
        java.util.List $r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        java.lang.Object $r5;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r2 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.util.iterator.ExtendedIterator allNodes(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Triple)>(r0, r1);

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.util.List toList()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.graph.Node) $r5;

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: void remove(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Triple)>(r0, r6, r1);

        goto label1;

     label2:
        return;
    }

    public static void remove(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10, $r11;
        java.util.HashSet $r0;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0;
        java.util.Iterator $r12;
        com.hp.hpl.jena.graph.Triple r5, r14;
        java.lang.Object $r13;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: com.hp.hpl.jena.graph.Triple;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r4 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node rdfType>;

        $r3 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node statement>;

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: void triplesToZap(com.hp.hpl.jena.graph.Graph,java.util.Collection,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r0, r2, $r4, $r3);

        $r6 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node subject>;

        $r7 = virtualinvoke r5.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: void triplesToZap(com.hp.hpl.jena.graph.Graph,java.util.Collection,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r0, r2, $r6, $r7);

        $r8 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node predicate>;

        $r9 = virtualinvoke r5.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: void triplesToZap(com.hp.hpl.jena.graph.Graph,java.util.Collection,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r0, r2, $r8, $r9);

        $r10 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node object>;

        $r11 = virtualinvoke r5.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: void triplesToZap(com.hp.hpl.jena.graph.Graph,java.util.Collection,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r0, r2, $r10, $r11);

        $r12 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.hp.hpl.jena.graph.Triple) $r13;

        interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r14);

        goto label1;

     label2:
        return;
    }

    private static void triplesToZap(com.hp.hpl.jena.graph.Graph, java.util.Collection, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.util.Collection r5;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        java.lang.Object $r6;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r5 := @parameter1: java.util.Collection;

        r1 := @parameter2: com.hp.hpl.jena.graph.Node;

        r2 := @parameter3: com.hp.hpl.jena.graph.Node;

        r3 := @parameter4: com.hp.hpl.jena.graph.Node;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return;
    }

    static com.hp.hpl.jena.graph.Node access$000()
    {
        com.hp.hpl.jena.graph.Node $r0;

        $r0 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node subject>;

        return $r0;
    }

    static com.hp.hpl.jena.graph.Node access$100()
    {
        com.hp.hpl.jena.graph.Node $r0;

        $r0 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node predicate>;

        return $r0;
    }

    static com.hp.hpl.jena.graph.Node access$200()
    {
        com.hp.hpl.jena.graph.Node $r0;

        $r0 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node object>;

        return $r0;
    }

    static com.hp.hpl.jena.graph.Node access$300()
    {
        com.hp.hpl.jena.graph.Node $r0;

        $r0 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node rdfType>;

        return $r0;
    }

    static com.hp.hpl.jena.graph.Node access$400()
    {
        com.hp.hpl.jena.graph.Node $r0;

        $r0 = <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node statement>;

        return $r0;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.graph.Node $r0, $r1, $r2, $r3, $r4;
        com.hp.hpl.jena.rdf.model.impl.ReifierStd$1 $r5;

        $r0 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node type>;

        <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node rdfType> = $r0;

        $r1 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node Statement>;

        <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node statement> = $r1;

        $r2 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node subject>;

        <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node subject> = $r2;

        $r3 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node predicate>;

        <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node predicate> = $r3;

        $r4 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node object>;

        <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node object> = $r4;

        $r5 = new com.hp.hpl.jena.rdf.model.impl.ReifierStd$1;

        specialinvoke $r5.<com.hp.hpl.jena.rdf.model.impl.ReifierStd$1: void <init>()>();

        <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.util.iterator.Filter filterReif> = $r5;

        return;
    }
}
