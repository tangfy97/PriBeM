public class org.bouncycastle.jce.provider.JCEBlockCipher extends org.bouncycastle.jce.provider.WrapCipherSpi implements org.bouncycastle.jce.provider.PBE
{
    private java.lang.Class[] availableSpecs;
    private org.bouncycastle.crypto.BlockCipher baseEngine;
    private org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher;
    private org.bouncycastle.crypto.params.ParametersWithIV ivParam;
    private int ivLength;
    private boolean padded;
    private javax.crypto.spec.PBEParameterSpec pbeSpec;
    private java.lang.String pbeAlgorithm;
    private java.lang.String modeName;

    protected void <init>(org.bouncycastle.crypto.BlockCipher)
    {
        org.bouncycastle.jce.provider.JCEBlockCipher r0;
        java.lang.Class[] $r1;
        org.bouncycastle.crypto.BlockCipher r2;
        org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher $r3;

        r0 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        r2 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        specialinvoke r0.<org.bouncycastle.jce.provider.WrapCipherSpi: void <init>()>();

        $r1 = newarray (java.lang.Class)[5];

        $r1[0] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r1[1] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        $r1[2] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r1[3] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r1[4] = class "Lorg/bouncycastle/jce/spec/GOST28147ParameterSpec;";

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.Class[] availableSpecs> = $r1;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = 0;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName> = null;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine> = r2;

        $r3 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        specialinvoke $r3.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>(r2);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r3;

        return;
    }

    protected void <init>(org.bouncycastle.crypto.BlockCipher, int)
    {
        int i0, $i1;
        org.bouncycastle.jce.provider.JCEBlockCipher r0;
        java.lang.Class[] $r1;
        org.bouncycastle.crypto.BlockCipher r2;
        org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher $r3;

        r0 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        r2 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        i0 := @parameter1: int;

        specialinvoke r0.<org.bouncycastle.jce.provider.WrapCipherSpi: void <init>()>();

        $r1 = newarray (java.lang.Class)[5];

        $r1[0] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r1[1] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        $r1[2] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r1[3] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r1[4] = class "Lorg/bouncycastle/jce/spec/GOST28147ParameterSpec;";

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.Class[] availableSpecs> = $r1;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = 0;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName> = null;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine> = r2;

        $r3 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        specialinvoke $r3.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>(r2);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r3;

        $i1 = i0 / 8;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = $i1;

        return;
    }

    protected void <init>(org.bouncycastle.crypto.BufferedBlockCipher, int)
    {
        int i0, $i1;
        org.bouncycastle.jce.provider.JCEBlockCipher r0;
        java.lang.Class[] $r1;
        org.bouncycastle.crypto.BufferedBlockCipher r2;
        org.bouncycastle.crypto.BlockCipher $r3;
        org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher $r4;

        r0 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        r2 := @parameter0: org.bouncycastle.crypto.BufferedBlockCipher;

        i0 := @parameter1: int;

        specialinvoke r0.<org.bouncycastle.jce.provider.WrapCipherSpi: void <init>()>();

        $r1 = newarray (java.lang.Class)[5];

        $r1[0] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r1[1] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        $r1[2] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r1[3] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r1[4] = class "Lorg/bouncycastle/jce/spec/GOST28147ParameterSpec;";

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.Class[] availableSpecs> = $r1;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = 0;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName> = null;

        $r3 = virtualinvoke r2.<org.bouncycastle.crypto.BufferedBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine> = $r3;

        $r4 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        specialinvoke $r4.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BufferedBlockCipher)>(r2);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r4;

        $i1 = i0 / 8;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = $i1;

        return;
    }

    protected int engineGetBlockSize()
    {
        int $i0;
        org.bouncycastle.jce.provider.JCEBlockCipher r0;
        org.bouncycastle.crypto.BlockCipher $r1;

        r0 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        $r1 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        return $i0;
    }

    protected byte[] engineGetIV()
    {
        byte[] $r3;
        org.bouncycastle.crypto.params.ParametersWithIV $r1, $r2;
        org.bouncycastle.jce.provider.JCEBlockCipher r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        $r1 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam>;

        if $r1 == null goto label1;

        $r2 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam>;

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    protected int engineGetKeySize(java.security.Key)
    {
        java.security.Key r0;
        byte[] $r1;
        int $i0, $i1;
        org.bouncycastle.jce.provider.JCEBlockCipher r2;

        r2 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        r0 := @parameter0: java.security.Key;

        $r1 = interfaceinvoke r0.<java.security.Key: byte[] getEncoded()>();

        $i0 = lengthof $r1;

        $i1 = $i0 * 8;

        return $i1;
    }

    protected int engineGetOutputSize(int)
    {
        int i0, $i1;
        org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher $r1;
        org.bouncycastle.jce.provider.JCEBlockCipher r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        i0 := @parameter0: int;

        $r1 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $i1 = interfaceinvoke $r1.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: int getOutputSize(int)>(i0);

        return $i1;
    }

    protected java.security.AlgorithmParameters engineGetParameters()
    {
        byte[] $r10;
        org.bouncycastle.crypto.params.ParametersWithIV $r3, $r8;
        int $i0, $i1;
        org.bouncycastle.jce.provider.JCEBlockCipher r0;
        java.lang.String $r6, $r11, $r17, r19;
        javax.crypto.spec.PBEParameterSpec $r2, $r13;
        java.lang.RuntimeException $r16;
        org.bouncycastle.crypto.BlockCipher $r5;
        java.security.AlgorithmParameters $r1, $r7, $r9, $r12, $r14, $r20;
        java.lang.Exception $r15, $r18;
        org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher $r4;

        r0 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        $r1 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.security.AlgorithmParameters engineParams>;

        if $r1 != null goto label8;

        $r2 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        if $r2 == null goto label4;

     label1:
        $r11 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String pbeAlgorithm>;

        $r12 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)>($r11, "BC");

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.security.AlgorithmParameters engineParams> = $r12;

        $r14 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.security.AlgorithmParameters engineParams>;

        $r13 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        virtualinvoke $r14.<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>($r13);

     label2:
        goto label8;

     label3:
        $r18 := @caughtexception;

        return null;

     label4:
        $r3 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam>;

        if $r3 == null goto label8;

        $r4 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $r5 = interfaceinvoke $r4.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r6 = interfaceinvoke $r5.<org.bouncycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        r19 = $r6;

        $i0 = virtualinvoke $r6.<java.lang.String: int indexOf(int)>(47);

        if $i0 < 0 goto label5;

        $i1 = virtualinvoke $r6.<java.lang.String: int indexOf(int)>(47);

        r19 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label5:
        $r7 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)>(r19, "BC");

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.security.AlgorithmParameters engineParams> = $r7;

        $r9 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.security.AlgorithmParameters engineParams>;

        $r8 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam>;

        $r10 = virtualinvoke $r8.<org.bouncycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        virtualinvoke $r9.<java.security.AlgorithmParameters: void init(byte[])>($r10);

     label6:
        goto label8;

     label7:
        $r15 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        $r17 = virtualinvoke $r15.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label8:
        $r20 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.security.AlgorithmParameters engineParams>;

        return $r20;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        org.bouncycastle.crypto.modes.CFBBlockCipher $r65, $r71;
        org.bouncycastle.crypto.modes.OpenPGPCFBBlockCipher $r55;
        org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher $r34, $r39, $r44, $r49, $r54, $r59, $r64, $r70, $r75, $r81, $r85, $r88;
        org.bouncycastle.crypto.BufferedBlockCipher $r40, $r45, $r50;
        org.bouncycastle.crypto.BlockCipher $r21, $r24, $r25, $r28, $r29, $r32, $r33, $r37, $r38, $r42, $r43, $r47, $r48, $r52, $r56, $r58, $r61, $r62, $r66, $r67, $r72, $r73, $r77, $r78, $r83, $r84, $r87, $r89;
        org.bouncycastle.crypto.modes.OFBBlockCipher $r76, $r82;
        java.security.NoSuchAlgorithmException $r16;
        java.lang.StringBuilder $r17, $r18, $r19;
        org.bouncycastle.crypto.modes.SICBlockCipher $r46, $r51;
        org.bouncycastle.crypto.modes.CBCBlockCipher $r36, $r86;
        org.bouncycastle.jce.provider.JCEBlockCipher r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r20, $r57, $r63, $r68, $r69, $r74, $r79, $r80;
        org.bouncycastle.crypto.modes.EAXBlockCipher $r27;
        org.bouncycastle.crypto.modes.CTSBlockCipher $r35;
        org.bouncycastle.jce.provider.JCEBlockCipher$AEADGenericBlockCipher $r22, $r26, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        org.bouncycastle.crypto.modes.PGPCFBBlockCipher $r60;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        org.bouncycastle.crypto.modes.GOFBBlockCipher $r41;
        java.lang.IllegalArgumentException $r53;
        org.bouncycastle.crypto.modes.GCMBlockCipher $r23;
        org.bouncycastle.crypto.modes.CCMBlockCipher $r31;

        r0 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.bouncycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>(r1);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName> = $r2;

        $r3 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("ECB");

        if $z0 == 0 goto label01;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = 0;

        $r88 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r89 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r88.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r89);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r88;

        goto label17;

     label01:
        $r4 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("CBC");

        if $z1 == 0 goto label02;

        $r84 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $i19 = interfaceinvoke $r84.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = $i19;

        $r85 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r86 = new org.bouncycastle.crypto.modes.CBCBlockCipher;

        $r87 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r86.<org.bouncycastle.crypto.modes.CBCBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r87);

        specialinvoke $r85.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r86);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r85;

        goto label17;

     label02:
        $r5 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z2 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("OFB");

        if $z2 == 0 goto label04;

        $r73 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $i14 = interfaceinvoke $r73.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = $i14;

        $r74 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $i15 = virtualinvoke $r74.<java.lang.String: int length()>();

        if $i15 == 3 goto label03;

        $r79 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $r80 = virtualinvoke $r79.<java.lang.String: java.lang.String substring(int)>(3);

        $i18 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r80);

        $r81 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r82 = new org.bouncycastle.crypto.modes.OFBBlockCipher;

        $r83 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r82.<org.bouncycastle.crypto.modes.OFBBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher,int)>($r83, $i18);

        specialinvoke $r81.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r82);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r81;

        goto label17;

     label03:
        $r75 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r76 = new org.bouncycastle.crypto.modes.OFBBlockCipher;

        $r78 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $r77 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $i16 = interfaceinvoke $r77.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $i17 = 8 * $i16;

        specialinvoke $r76.<org.bouncycastle.crypto.modes.OFBBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher,int)>($r78, $i17);

        specialinvoke $r75.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r76);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r75;

        goto label17;

     label04:
        $r6 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z3 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("CFB");

        if $z3 == 0 goto label06;

        $r62 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $i9 = interfaceinvoke $r62.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = $i9;

        $r63 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $i10 = virtualinvoke $r63.<java.lang.String: int length()>();

        if $i10 == 3 goto label05;

        $r68 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $r69 = virtualinvoke $r68.<java.lang.String: java.lang.String substring(int)>(3);

        $i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r69);

        $r70 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r71 = new org.bouncycastle.crypto.modes.CFBBlockCipher;

        $r72 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r71.<org.bouncycastle.crypto.modes.CFBBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher,int)>($r72, $i13);

        specialinvoke $r70.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r71);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r70;

        goto label17;

     label05:
        $r64 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r65 = new org.bouncycastle.crypto.modes.CFBBlockCipher;

        $r67 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $r66 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $i11 = interfaceinvoke $r66.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $i12 = 8 * $i11;

        specialinvoke $r65.<org.bouncycastle.crypto.modes.CFBBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher,int)>($r67, $i12);

        specialinvoke $r64.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r65);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r64;

        goto label17;

     label06:
        $r7 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z4 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("PGP");

        if $z4 == 0 goto label07;

        $r57 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z13 = virtualinvoke $r57.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PGPCFBwithIV");

        $r58 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $i8 = interfaceinvoke $r58.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = $i8;

        $r59 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r60 = new org.bouncycastle.crypto.modes.PGPCFBBlockCipher;

        $r61 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r60.<org.bouncycastle.crypto.modes.PGPCFBBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher,boolean)>($r61, $z13);

        specialinvoke $r59.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r60);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r59;

        goto label17;

     label07:
        $r8 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z5 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("OpenPGPCFB");

        if $z5 == 0 goto label08;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = 0;

        $r54 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r55 = new org.bouncycastle.crypto.modes.OpenPGPCFBBlockCipher;

        $r56 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r55.<org.bouncycastle.crypto.modes.OpenPGPCFBBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r56);

        specialinvoke $r54.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r55);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r54;

        goto label17;

     label08:
        $r9 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z6 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("SIC");

        if $z6 == 0 goto label10;

        $r48 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $i6 = interfaceinvoke $r48.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = $i6;

        $i7 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength>;

        if $i7 >= 16 goto label09;

        $r53 = new java.lang.IllegalArgumentException;

        specialinvoke $r53.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Warning: SIC-Mode can become a twotime-pad if the blocksize of the cipher is too small. Use a cipher with a block size of at least 128 bits (e.g. AES)");

        throw $r53;

     label09:
        $r49 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r50 = new org.bouncycastle.crypto.BufferedBlockCipher;

        $r51 = new org.bouncycastle.crypto.modes.SICBlockCipher;

        $r52 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r51.<org.bouncycastle.crypto.modes.SICBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r52);

        specialinvoke $r50.<org.bouncycastle.crypto.BufferedBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r51);

        specialinvoke $r49.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BufferedBlockCipher)>($r50);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r49;

        goto label17;

     label10:
        $r10 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z7 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>("CTR");

        if $z7 == 0 goto label11;

        $r43 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $i5 = interfaceinvoke $r43.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = $i5;

        $r44 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r45 = new org.bouncycastle.crypto.BufferedBlockCipher;

        $r46 = new org.bouncycastle.crypto.modes.SICBlockCipher;

        $r47 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r46.<org.bouncycastle.crypto.modes.SICBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r47);

        specialinvoke $r45.<org.bouncycastle.crypto.BufferedBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r46);

        specialinvoke $r44.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BufferedBlockCipher)>($r45);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r44;

        goto label17;

     label11:
        $r11 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z8 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("GOFB");

        if $z8 == 0 goto label12;

        $r38 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $i4 = interfaceinvoke $r38.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = $i4;

        $r39 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r40 = new org.bouncycastle.crypto.BufferedBlockCipher;

        $r41 = new org.bouncycastle.crypto.modes.GOFBBlockCipher;

        $r42 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r41.<org.bouncycastle.crypto.modes.GOFBBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r42);

        specialinvoke $r40.<org.bouncycastle.crypto.BufferedBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r41);

        specialinvoke $r39.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BufferedBlockCipher)>($r40);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r39;

        goto label17;

     label12:
        $r12 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z9 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>("CTS");

        if $z9 == 0 goto label13;

        $r33 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $i3 = interfaceinvoke $r33.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = $i3;

        $r34 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r35 = new org.bouncycastle.crypto.modes.CTSBlockCipher;

        $r36 = new org.bouncycastle.crypto.modes.CBCBlockCipher;

        $r37 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r36.<org.bouncycastle.crypto.modes.CBCBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r37);

        specialinvoke $r35.<org.bouncycastle.crypto.modes.CTSBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r36);

        specialinvoke $r34.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BufferedBlockCipher)>($r35);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r34;

        goto label17;

     label13:
        $r13 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z10 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("CCM");

        if $z10 == 0 goto label14;

        $r29 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $i2 = interfaceinvoke $r29.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = $i2;

        $r30 = new org.bouncycastle.jce.provider.JCEBlockCipher$AEADGenericBlockCipher;

        $r31 = new org.bouncycastle.crypto.modes.CCMBlockCipher;

        $r32 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r31.<org.bouncycastle.crypto.modes.CCMBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r32);

        specialinvoke $r30.<org.bouncycastle.jce.provider.JCEBlockCipher$AEADGenericBlockCipher: void <init>(org.bouncycastle.crypto.modes.AEADBlockCipher)>($r31);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r30;

        goto label17;

     label14:
        $r14 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z11 = virtualinvoke $r14.<java.lang.String: boolean startsWith(java.lang.String)>("EAX");

        if $z11 == 0 goto label15;

        $r25 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $i1 = interfaceinvoke $r25.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = $i1;

        $r26 = new org.bouncycastle.jce.provider.JCEBlockCipher$AEADGenericBlockCipher;

        $r27 = new org.bouncycastle.crypto.modes.EAXBlockCipher;

        $r28 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r27.<org.bouncycastle.crypto.modes.EAXBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r28);

        specialinvoke $r26.<org.bouncycastle.jce.provider.JCEBlockCipher$AEADGenericBlockCipher: void <init>(org.bouncycastle.crypto.modes.AEADBlockCipher)>($r27);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r26;

        goto label17;

     label15:
        $r15 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z12 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("GCM");

        if $z12 == 0 goto label16;

        $r21 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r21.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength> = $i0;

        $r22 = new org.bouncycastle.jce.provider.JCEBlockCipher$AEADGenericBlockCipher;

        $r23 = new org.bouncycastle.crypto.modes.GCMBlockCipher;

        $r24 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r23.<org.bouncycastle.crypto.modes.GCMBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r24);

        specialinvoke $r22.<org.bouncycastle.jce.provider.JCEBlockCipher$AEADGenericBlockCipher: void <init>(org.bouncycastle.crypto.modes.AEADBlockCipher)>($r23);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r22;

        goto label17;

     label16:
        $r16 = new java.security.NoSuchAlgorithmException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label17:
        return;
    }

    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.bouncycastle.crypto.modes.CTSBlockCipher $r35;
        org.bouncycastle.crypto.paddings.ISO10126d2Padding $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher $r4, $r7, $r11, $r15, $r25, $r29, $r34, $r39;
        org.bouncycastle.crypto.BufferedBlockCipher $r40;
        org.bouncycastle.crypto.BlockCipher $r6, $r9, $r13, $r17, $r27, $r31, $r37, $r42;
        java.lang.StringBuilder $r20, $r21, $r22, $r23;
        org.bouncycastle.crypto.paddings.TBCPadding $r28;
        org.bouncycastle.crypto.paddings.X923Padding $r14;
        javax.crypto.NoSuchPaddingException $r19, $r33;
        org.bouncycastle.crypto.paddings.ZeroBytePadding $r32;
        org.bouncycastle.jce.provider.JCEBlockCipher r2;
        java.lang.String r0, $r1, $r3, $r24;
        org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher $r5, $r8, $r12, $r16, $r26, $r30, $r36, $r38, $r41;
        org.bouncycastle.crypto.paddings.ISO7816d4Padding $r18;

        r2 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.bouncycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>(r0);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("NOPADDING");

        if $z0 == 0 goto label01;

        $r38 = r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $z13 = interfaceinvoke $r38.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: boolean wrapOnNoPadding()>();

        if $z13 == 0 goto label14;

        $r39 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r40 = new org.bouncycastle.crypto.BufferedBlockCipher;

        $r41 = r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $r42 = interfaceinvoke $r41.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        specialinvoke $r40.<org.bouncycastle.crypto.BufferedBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r42);

        specialinvoke $r39.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BufferedBlockCipher)>($r40);

        r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r39;

        goto label14;

     label01:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("WITHCTS");

        if $z1 == 0 goto label02;

        $r34 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r35 = new org.bouncycastle.crypto.modes.CTSBlockCipher;

        $r36 = r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $r37 = interfaceinvoke $r36.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        specialinvoke $r35.<org.bouncycastle.crypto.modes.CTSBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r37);

        specialinvoke $r34.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BufferedBlockCipher)>($r35);

        r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r34;

        goto label14;

     label02:
        r2.<org.bouncycastle.jce.provider.JCEBlockCipher: boolean padded> = 1;

        $r3 = r2.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z2 = specialinvoke r2.<org.bouncycastle.jce.provider.JCEBlockCipher: boolean isAEADModeName(java.lang.String)>($r3);

        if $z2 == 0 goto label03;

        $r33 = new javax.crypto.NoSuchPaddingException;

        specialinvoke $r33.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>("Only NoPadding can be used with AEAD modes.");

        throw $r33;

     label03:
        $z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("PKCS5PADDING");

        if $z3 != 0 goto label04;

        $z4 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("PKCS7PADDING");

        if $z4 == 0 goto label05;

     label04:
        $r4 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r5 = r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $r6 = interfaceinvoke $r5.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        specialinvoke $r4.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r6);

        r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r4;

        goto label14;

     label05:
        $z5 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("ZEROBYTEPADDING");

        if $z5 == 0 goto label06;

        $r29 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r30 = r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $r31 = interfaceinvoke $r30.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r32 = new org.bouncycastle.crypto.paddings.ZeroBytePadding;

        specialinvoke $r32.<org.bouncycastle.crypto.paddings.ZeroBytePadding: void <init>()>();

        specialinvoke $r29.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher,org.bouncycastle.crypto.paddings.BlockCipherPadding)>($r31, $r32);

        r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r29;

        goto label14;

     label06:
        $z6 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("ISO10126PADDING");

        if $z6 != 0 goto label07;

        $z7 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("ISO10126-2PADDING");

        if $z7 == 0 goto label08;

     label07:
        $r7 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r8 = r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $r9 = interfaceinvoke $r8.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r10 = new org.bouncycastle.crypto.paddings.ISO10126d2Padding;

        specialinvoke $r10.<org.bouncycastle.crypto.paddings.ISO10126d2Padding: void <init>()>();

        specialinvoke $r7.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher,org.bouncycastle.crypto.paddings.BlockCipherPadding)>($r9, $r10);

        r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r7;

        goto label14;

     label08:
        $z8 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("X9.23PADDING");

        if $z8 != 0 goto label09;

        $z9 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("X923PADDING");

        if $z9 == 0 goto label10;

     label09:
        $r11 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r12 = r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $r13 = interfaceinvoke $r12.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r14 = new org.bouncycastle.crypto.paddings.X923Padding;

        specialinvoke $r14.<org.bouncycastle.crypto.paddings.X923Padding: void <init>()>();

        specialinvoke $r11.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher,org.bouncycastle.crypto.paddings.BlockCipherPadding)>($r13, $r14);

        r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r11;

        goto label14;

     label10:
        $z10 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("ISO7816-4PADDING");

        if $z10 != 0 goto label11;

        $z11 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("ISO9797-1PADDING");

        if $z11 == 0 goto label12;

     label11:
        $r15 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r16 = r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $r17 = interfaceinvoke $r16.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r18 = new org.bouncycastle.crypto.paddings.ISO7816d4Padding;

        specialinvoke $r18.<org.bouncycastle.crypto.paddings.ISO7816d4Padding: void <init>()>();

        specialinvoke $r15.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher,org.bouncycastle.crypto.paddings.BlockCipherPadding)>($r17, $r18);

        r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r15;

        goto label14;

     label12:
        $z12 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("TBCPADDING");

        if $z12 == 0 goto label13;

        $r25 = new org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher;

        $r26 = r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $r27 = interfaceinvoke $r26.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r28 = new org.bouncycastle.crypto.paddings.TBCPadding;

        specialinvoke $r28.<org.bouncycastle.crypto.paddings.TBCPadding: void <init>()>();

        specialinvoke $r25.<org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher,org.bouncycastle.crypto.paddings.BlockCipherPadding)>($r27, $r28);

        r2.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher> = $r25;

        goto label14;

     label13:
        $r19 = new javax.crypto.NoSuchPaddingException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Padding ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown.");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label14:
        return;
    }

    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        byte[] $r5, $r30, $r33, $r48, $r50, $r52, $r56, $r58, $r59, $r61, $r65, $r68, $r71, $r72, $r82, $r93, $r115;
        java.security.InvalidParameterException $r17;
        org.bouncycastle.crypto.params.ParametersWithSBox $r54;
        org.bouncycastle.crypto.BlockCipher $r7, $r10, $r12, $r27, $r89, $r96;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r36, $r37, $r38, $r39, $r42, $r43, $r44, $r45, $r76, $r77, $r78, $r79, $r100, $r101, $r103, $r104;
        javax.crypto.spec.IvParameterSpec r111;
        javax.crypto.spec.RC5ParameterSpec $r6, r114;
        org.bouncycastle.crypto.CipherParameters $r85, r110;
        java.security.Key r1;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.bouncycastle.crypto.params.KeyParameter $r55, $r64, $r70, $r81;
        javax.crypto.spec.RC2ParameterSpec $r49, r113;
        org.bouncycastle.jce.spec.GOST28147ParameterSpec $r57, r112;
        org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher $r15, $r16, $r26, $r88;
        org.bouncycastle.crypto.params.RC2Parameters $r47;
        java.security.SecureRandom r14, $r31, r116;
        java.lang.Exception $r106;
        java.security.InvalidKeyException $r99, $r107;
        java.security.InvalidAlgorithmParameterException $r3, $r9, $r29, $r35, $r41, $r67, $r75, $r86, $r98;
        org.bouncycastle.jce.provider.JCEBlockCipher r0;
        java.lang.String $r8, $r11, $r13, $r22, $r28, $r40, $r46, $r63, $r66, $r74, $r80, $r84, $r90, $r95, $r97, $r102, $r105, $r108;
        org.bouncycastle.jce.provider.JCEPBEKey r109;
        org.bouncycastle.crypto.params.ParametersWithIV $r24, $r25, $r32, $r34, $r51, $r53, $r60, $r62, $r69, $r73, $r91;
        org.bouncycastle.crypto.params.ParametersWithRandom $r23;
        java.security.spec.AlgorithmParameterSpec r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        org.bouncycastle.asn1.DERObjectIdentifier $r83, $r94;
        javax.crypto.spec.PBEParameterSpec $r87, $r92;
        org.bouncycastle.crypto.params.RC5Parameters $r4;

        r0 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        i1 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        r14 := @parameter3: java.security.SecureRandom;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.security.AlgorithmParameters engineParams> = null;

        $z0 = r1 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label01;

        $r99 = new java.security.InvalidKeyException;

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key for algorithm ");

        $r102 = interfaceinvoke r1.<java.security.Key: java.lang.String getAlgorithm()>();

        $r103 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r102);

        $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not suitable for symmetric enryption.");

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r99.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r105);

        throw $r99;

     label01:
        if r2 != null goto label02;

        $r96 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $r97 = interfaceinvoke $r96.<org.bouncycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $z15 = virtualinvoke $r97.<java.lang.String: boolean startsWith(java.lang.String)>("RC5-64");

        if $z15 == 0 goto label02;

        $r98 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r98.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("RC5 requires an RC5ParametersSpec to be passed in.");

        throw $r98;

     label02:
        $z1 = r1 instanceof org.bouncycastle.jce.provider.JCEPBEKey;

        if $z1 == 0 goto label09;

        r109 = (org.bouncycastle.jce.provider.JCEPBEKey) r1;

        $r83 = virtualinvoke r109.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.asn1.DERObjectIdentifier getOID()>();

        if $r83 == null goto label03;

        $r94 = virtualinvoke r109.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.asn1.DERObjectIdentifier getOID()>();

        $r95 = virtualinvoke $r94.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String pbeAlgorithm> = $r95;

        goto label04;

     label03:
        $r84 = virtualinvoke r109.<org.bouncycastle.jce.provider.JCEPBEKey: java.lang.String getAlgorithm()>();

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String pbeAlgorithm> = $r84;

     label04:
        $r85 = virtualinvoke r109.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.crypto.CipherParameters getParam()>();

        if $r85 == null goto label05;

        r110 = virtualinvoke r109.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.crypto.CipherParameters getParam()>();

        $r92 = new javax.crypto.spec.PBEParameterSpec;

        $r93 = virtualinvoke r109.<org.bouncycastle.jce.provider.JCEPBEKey: byte[] getSalt()>();

        $i16 = virtualinvoke r109.<org.bouncycastle.jce.provider.JCEPBEKey: int getIterationCount()>();

        specialinvoke $r92.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r93, $i16);

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r92;

        goto label07;

     label05:
        $z13 = r2 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z13 == 0 goto label06;

        $r87 = (javax.crypto.spec.PBEParameterSpec) r2;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r87;

        $r88 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $r89 = interfaceinvoke $r88.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r90 = interfaceinvoke $r89.<org.bouncycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        r110 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.CipherParameters makePBEParameters(org.bouncycastle.jce.provider.JCEPBEKey,java.security.spec.AlgorithmParameterSpec,java.lang.String)>(r109, r2, $r90);

        goto label07;

     label06:
        $r86 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r86.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("PBE requires PBE parameters to be set.");

        throw $r86;

     label07:
        $z14 = r110 instanceof org.bouncycastle.crypto.params.ParametersWithIV;

        if $z14 == 0 goto label08;

        $r91 = (org.bouncycastle.crypto.params.ParametersWithIV) r110;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam> = $r91;

     label08:
        goto label24;

     label09:
        if r2 != null goto label10;

        $r81 = new org.bouncycastle.crypto.params.KeyParameter;

        $r82 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r81.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r82);

        r110 = $r81;

        goto label24;

     label10:
        $z2 = r2 instanceof javax.crypto.spec.IvParameterSpec;

        if $z2 == 0 goto label14;

        $i12 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength>;

        if $i12 == 0 goto label12;

        r111 = (javax.crypto.spec.IvParameterSpec) r2;

        $r68 = virtualinvoke r111.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        $i14 = lengthof $r68;

        $i13 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength>;

        if $i14 == $i13 goto label11;

        $r74 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z12 = specialinvoke r0.<org.bouncycastle.jce.provider.JCEBlockCipher: boolean isAEADModeName(java.lang.String)>($r74);

        if $z12 != 0 goto label11;

        $r75 = new java.security.InvalidAlgorithmParameterException;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IV must be ");

        $i15 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength>;

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes long.");

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r75.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r80);

        throw $r75;

     label11:
        $r69 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r70 = new org.bouncycastle.crypto.params.KeyParameter;

        $r71 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r70.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r71);

        $r72 = virtualinvoke r111.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        specialinvoke $r69.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>($r70, $r72);

        r110 = $r69;

        $r73 = (org.bouncycastle.crypto.params.ParametersWithIV) $r69;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam> = $r73;

        goto label24;

     label12:
        $r63 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        if $r63 == null goto label13;

        $r66 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.String modeName>;

        $z11 = virtualinvoke $r66.<java.lang.String: boolean equals(java.lang.Object)>("ECB");

        if $z11 == 0 goto label13;

        $r67 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r67.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("ECB mode does not use an IV");

        throw $r67;

     label13:
        $r64 = new org.bouncycastle.crypto.params.KeyParameter;

        $r65 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r64.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r65);

        r110 = $r64;

        goto label24;

     label14:
        $z3 = r2 instanceof org.bouncycastle.jce.spec.GOST28147ParameterSpec;

        if $z3 == 0 goto label16;

        r112 = (org.bouncycastle.jce.spec.GOST28147ParameterSpec) r2;

        $r54 = new org.bouncycastle.crypto.params.ParametersWithSBox;

        $r55 = new org.bouncycastle.crypto.params.KeyParameter;

        $r56 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r55.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r56);

        $r57 = (org.bouncycastle.jce.spec.GOST28147ParameterSpec) r2;

        $r58 = virtualinvoke $r57.<org.bouncycastle.jce.spec.GOST28147ParameterSpec: byte[] getSbox()>();

        specialinvoke $r54.<org.bouncycastle.crypto.params.ParametersWithSBox: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>($r55, $r58);

        r110 = $r54;

        $r59 = virtualinvoke r112.<org.bouncycastle.jce.spec.GOST28147ParameterSpec: byte[] getIV()>();

        if $r59 == null goto label15;

        $i11 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength>;

        if $i11 == 0 goto label15;

        $r60 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r61 = virtualinvoke r112.<org.bouncycastle.jce.spec.GOST28147ParameterSpec: byte[] getIV()>();

        specialinvoke $r60.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>($r54, $r61);

        r110 = $r60;

        $r62 = (org.bouncycastle.crypto.params.ParametersWithIV) $r60;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam> = $r62;

     label15:
        goto label24;

     label16:
        $z4 = r2 instanceof javax.crypto.spec.RC2ParameterSpec;

        if $z4 == 0 goto label18;

        r113 = (javax.crypto.spec.RC2ParameterSpec) r2;

        $r47 = new org.bouncycastle.crypto.params.RC2Parameters;

        $r48 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r49 = (javax.crypto.spec.RC2ParameterSpec) r2;

        $i9 = virtualinvoke $r49.<javax.crypto.spec.RC2ParameterSpec: int getEffectiveKeyBits()>();

        specialinvoke $r47.<org.bouncycastle.crypto.params.RC2Parameters: void <init>(byte[],int)>($r48, $i9);

        r110 = $r47;

        $r50 = virtualinvoke r113.<javax.crypto.spec.RC2ParameterSpec: byte[] getIV()>();

        if $r50 == null goto label17;

        $i10 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength>;

        if $i10 == 0 goto label17;

        $r51 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r52 = virtualinvoke r113.<javax.crypto.spec.RC2ParameterSpec: byte[] getIV()>();

        specialinvoke $r51.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>($r47, $r52);

        r110 = $r51;

        $r53 = (org.bouncycastle.crypto.params.ParametersWithIV) $r51;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam> = $r53;

     label17:
        goto label24;

     label18:
        $z5 = r2 instanceof javax.crypto.spec.RC5ParameterSpec;

        if $z5 == 0 goto label23;

        r114 = (javax.crypto.spec.RC5ParameterSpec) r2;

        $r4 = new org.bouncycastle.crypto.params.RC5Parameters;

        $r5 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r6 = (javax.crypto.spec.RC5ParameterSpec) r2;

        $i0 = virtualinvoke $r6.<javax.crypto.spec.RC5ParameterSpec: int getRounds()>();

        specialinvoke $r4.<org.bouncycastle.crypto.params.RC5Parameters: void <init>(byte[],int)>($r5, $i0);

        r110 = $r4;

        $r7 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $r8 = interfaceinvoke $r7.<org.bouncycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $z6 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("RC5");

        if $z6 == 0 goto label20;

        $r10 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $r11 = interfaceinvoke $r10.<org.bouncycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $z7 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("RC5-32");

        if $z7 == 0 goto label19;

        $i7 = virtualinvoke r114.<javax.crypto.spec.RC5ParameterSpec: int getWordSize()>();

        if $i7 == 32 goto label21;

        $r41 = new java.security.InvalidAlgorithmParameterException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RC5 already set up for a word size of 32 not ");

        $i8 = virtualinvoke r114.<javax.crypto.spec.RC5ParameterSpec: int getWordSize()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r46);

        throw $r41;

     label19:
        $r12 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.BlockCipher baseEngine>;

        $r13 = interfaceinvoke $r12.<org.bouncycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $z8 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("RC5-64");

        if $z8 == 0 goto label21;

        $i5 = virtualinvoke r114.<javax.crypto.spec.RC5ParameterSpec: int getWordSize()>();

        if $i5 == 64 goto label21;

        $r35 = new java.security.InvalidAlgorithmParameterException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RC5 already set up for a word size of 64 not ");

        $i6 = virtualinvoke r114.<javax.crypto.spec.RC5ParameterSpec: int getWordSize()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r40);

        throw $r35;

     label20:
        $r9 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r9.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("RC5 parameters passed to a cipher that is not RC5.");

        throw $r9;

     label21:
        $r115 = virtualinvoke r114.<javax.crypto.spec.RC5ParameterSpec: byte[] getIV()>();

        if $r115 == null goto label22;

        $i4 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength>;

        if $i4 == 0 goto label22;

        $r32 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r33 = virtualinvoke r114.<javax.crypto.spec.RC5ParameterSpec: byte[] getIV()>();

        specialinvoke $r32.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>($r4, $r33);

        r110 = $r32;

        $r34 = (org.bouncycastle.crypto.params.ParametersWithIV) $r32;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam> = $r34;

     label22:
        goto label24;

     label23:
        $r3 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r3.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("unknown parameter type.");

        throw $r3;

     label24:
        $i17 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength>;

        if $i17 == 0 goto label28;

        $z10 = r110 instanceof org.bouncycastle.crypto.params.ParametersWithIV;

        if $z10 != 0 goto label28;

        r116 = r14;

        if r14 != null goto label25;

        $r31 = new java.security.SecureRandom;

        specialinvoke $r31.<java.security.SecureRandom: void <init>()>();

        r116 = $r31;

     label25:
        if i1 == 1 goto label26;

        if i1 != 3 goto label27;

     label26:
        $i2 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int ivLength>;

        $r30 = newarray (byte)[$i2];

        virtualinvoke r116.<java.security.SecureRandom: void nextBytes(byte[])>($r30);

        $r24 = new org.bouncycastle.crypto.params.ParametersWithIV;

        specialinvoke $r24.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>(r110, $r30);

        r110 = $r24;

        $r25 = (org.bouncycastle.crypto.params.ParametersWithIV) $r24;

        r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam> = $r25;

        goto label28;

     label27:
        $r26 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $r27 = interfaceinvoke $r26.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r28 = interfaceinvoke $r27.<org.bouncycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $i3 = virtualinvoke $r28.<java.lang.String: int indexOf(java.lang.String)>("PGPCFB");

        if $i3 >= 0 goto label28;

        $r29 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r29.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("no IV set when one expected");

        throw $r29;

     label28:
        if r14 == null goto label29;

        $z9 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: boolean padded>;

        if $z9 == 0 goto label29;

        $r23 = new org.bouncycastle.crypto.params.ParametersWithRandom;

        specialinvoke $r23.<org.bouncycastle.crypto.params.ParametersWithRandom: void <init>(org.bouncycastle.crypto.CipherParameters,java.security.SecureRandom)>(r110, r14);

        r110 = $r23;

     label29:
        tableswitch(i1)
        {
            case 1: goto label30;
            case 2: goto label31;
            case 3: goto label30;
            case 4: goto label31;
            default: goto label32;
        };

     label30:
        $r16 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        interfaceinvoke $r16.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, r110);

        goto label33;

     label31:
        $r15 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        interfaceinvoke $r15.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(0, r110);

        goto label33;

     label32:
        $r17 = new java.security.InvalidParameterException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown opmode ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" passed");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label33:
        goto label35;

     label34:
        $r106 := @caughtexception;

        $r107 = new java.security.InvalidKeyException;

        $r108 = virtualinvoke $r106.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r107.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r108);

        throw $r107;

     label35:
        return;

        catch java.lang.Exception from label29 to label33 with label34;
    }

    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        java.security.InvalidAlgorithmParameterException $r5;
        java.security.SecureRandom r3;
        int i0, $i1, i2;
        org.bouncycastle.jce.provider.JCEBlockCipher r1;
        java.lang.String $r8, $r10;
        java.security.spec.AlgorithmParameterSpec r14;
        java.lang.Class[] $r4, $r11;
        java.security.AlgorithmParameters r0;
        java.lang.Exception $r13;
        java.security.Key r2;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.Class $r12;

        r1 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        i0 := @parameter0: int;

        r2 := @parameter1: java.security.Key;

        r0 := @parameter2: java.security.AlgorithmParameters;

        r3 := @parameter3: java.security.SecureRandom;

        r14 = null;

        if r0 == null goto label6;

        i2 = 0;

     label1:
        $r4 = r1.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.Class[] availableSpecs>;

        $i1 = lengthof $r4;

        if i2 == $i1 goto label5;

     label2:
        $r11 = r1.<org.bouncycastle.jce.provider.JCEBlockCipher: java.lang.Class[] availableSpecs>;

        $r12 = $r11[i2];

        r14 = virtualinvoke r0.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>($r12);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        i2 = i2 + 1;

        goto label1;

     label5:
        if r14 != null goto label6;

        $r5 = new java.security.InvalidAlgorithmParameterException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t handle parameter ");

        $r8 = virtualinvoke r0.<java.security.AlgorithmParameters: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label6:
        virtualinvoke r1.<org.bouncycastle.jce.provider.JCEBlockCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r2, r14, r3);

        r1.<org.bouncycastle.jce.provider.JCEBlockCipher: java.security.AlgorithmParameters engineParams> = r0;

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        java.security.Key r1;
        java.security.SecureRandom r2;
        int i0;
        org.bouncycastle.jce.provider.JCEBlockCipher r0;
        java.security.InvalidKeyException $r4;
        java.lang.String $r5;
        java.security.InvalidAlgorithmParameterException $r3;

        r0 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.SecureRandom;

     label1:
        virtualinvoke r0.<org.bouncycastle.jce.provider.JCEBlockCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r1, null, r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.security.InvalidKeyException;

        $r5 = virtualinvoke $r3.<java.security.InvalidAlgorithmParameterException: java.lang.String getMessage()>();

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label4:
        return;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    protected byte[] engineUpdate(byte[], int, int)
    {
        byte[] r2, r4, r6;
        int i0, $i1, i2, $i3, $i4;
        org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher $r1, $r3, $r5;
        org.bouncycastle.jce.provider.JCEBlockCipher r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        r2 := @parameter0: byte[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        $r1 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $i1 = interfaceinvoke $r1.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: int getUpdateOutputSize(int)>(i0);

        if $i1 <= 0 goto label3;

        r4 = newarray (byte)[$i1];

        $r5 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $i3 = interfaceinvoke $r5.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: int processBytes(byte[],int,int,byte[],int)>(r2, i2, i0, r4, 0);

        if $i3 != 0 goto label1;

        return null;

     label1:
        $i4 = lengthof r4;

        if $i3 == $i4 goto label2;

        r6 = newarray (byte)[$i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r6, 0, $i3);

        return r6;

     label2:
        return r4;

     label3:
        $r3 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        interfaceinvoke $r3.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: int processBytes(byte[],int,int,byte[],int)>(r2, i2, i0, null, 0);

        return null;
    }

    protected int engineUpdate(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        byte[] r1, r2;
        org.bouncycastle.crypto.DataLengthException $r4;
        int i0, i1, i2, $i3;
        org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher $r3;
        org.bouncycastle.jce.provider.JCEBlockCipher r0;
        java.lang.String $r6;
        javax.crypto.ShortBufferException $r5;

        r0 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i2 := @parameter4: int;

     label1:
        $r3 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $i3 = interfaceinvoke $r3.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: int processBytes(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2);

     label2:
        return $i3;

     label3:
        $r4 := @caughtexception;

        $r5 = new javax.crypto.ShortBufferException;

        $r6 = virtualinvoke $r4.<org.bouncycastle.crypto.DataLengthException: java.lang.String getMessage()>();

        specialinvoke $r5.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch org.bouncycastle.crypto.DataLengthException from label1 to label2 with label3;
    }

    protected byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        byte[] r1, r3, r11;
        org.bouncycastle.crypto.InvalidCipherTextException $r5;
        org.bouncycastle.crypto.DataLengthException $r8;
        int i0, $i1, $i2, $i3, i4, $i5, i6;
        org.bouncycastle.jce.provider.JCEBlockCipher r0;
        java.lang.String $r7, $r10;
        javax.crypto.IllegalBlockSizeException $r9;
        javax.crypto.BadPaddingException $r6;
        org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher $r2, $r4;

        r0 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        r3 := @parameter0: byte[];

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        i6 = 0;

        $i1 = virtualinvoke r0.<org.bouncycastle.jce.provider.JCEBlockCipher: int engineGetOutputSize(int)>(i0);

        r1 = newarray (byte)[$i1];

        if i0 == 0 goto label1;

        $r4 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        i6 = interfaceinvoke $r4.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: int processBytes(byte[],int,int,byte[],int)>(r3, i4, i0, r1, 0);

     label1:
        $r2 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $i2 = interfaceinvoke $r2.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: int doFinal(byte[],int)>(r1, i6);

        $i5 = i6 + $i2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        $r9 = new javax.crypto.IllegalBlockSizeException;

        $r10 = virtualinvoke $r8.<org.bouncycastle.crypto.DataLengthException: java.lang.String getMessage()>();

        specialinvoke $r9.<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label4:
        $r5 := @caughtexception;

        $r6 = new javax.crypto.BadPaddingException;

        $r7 = virtualinvoke $r5.<org.bouncycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r6.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label5:
        $i3 = lengthof r1;

        if $i5 != $i3 goto label6;

        return r1;

     label6:
        r11 = newarray (byte)[$i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r11, 0, $i5);

        return r11;

        catch org.bouncycastle.crypto.DataLengthException from label1 to label2 with label3;
        catch org.bouncycastle.crypto.InvalidCipherTextException from label1 to label2 with label4;
    }

    protected int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        byte[] r1, r3;
        org.bouncycastle.crypto.InvalidCipherTextException $r5;
        org.bouncycastle.crypto.DataLengthException $r8;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        org.bouncycastle.jce.provider.JCEBlockCipher r0;
        java.lang.String $r7, $r10;
        javax.crypto.IllegalBlockSizeException $r9;
        javax.crypto.BadPaddingException $r6;
        org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher $r2, $r4;

        r0 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        r3 := @parameter0: byte[];

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: byte[];

        i1 := @parameter4: int;

        i6 = 0;

        if i0 == 0 goto label1;

        $r4 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        i6 = interfaceinvoke $r4.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: int processBytes(byte[],int,int,byte[],int)>(r3, i5, i0, r1, i1);

     label1:
        $r2 = r0.<org.bouncycastle.jce.provider.JCEBlockCipher: org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher>;

        $i2 = i1 + i6;

        $i3 = interfaceinvoke $r2.<org.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher: int doFinal(byte[],int)>(r1, $i2);

        $i4 = i6 + $i3;

     label2:
        return $i4;

     label3:
        $r8 := @caughtexception;

        $r9 = new javax.crypto.IllegalBlockSizeException;

        $r10 = virtualinvoke $r8.<org.bouncycastle.crypto.DataLengthException: java.lang.String getMessage()>();

        specialinvoke $r9.<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label4:
        $r5 := @caughtexception;

        $r6 = new javax.crypto.BadPaddingException;

        $r7 = virtualinvoke $r5.<org.bouncycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r6.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch org.bouncycastle.crypto.DataLengthException from label1 to label2 with label3;
        catch org.bouncycastle.crypto.InvalidCipherTextException from label1 to label2 with label4;
    }

    private boolean isAEADModeName(java.lang.String)
    {
        org.bouncycastle.jce.provider.JCEBlockCipher r4;
        java.lang.String r0, $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r4 := @this: org.bouncycastle.jce.provider.JCEBlockCipher;

        r0 := @parameter0: java.lang.String;

        $r1 = "CCM";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r2 = "EAX";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label1;

        $r3 = "GCM";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }
}
