public abstract class org.apache.lucene.util.RollingBuffer extends java.lang.Object
{
    private org.apache.lucene.util.RollingBuffer$Resettable[] buffer;
    private int nextWrite;
    private int nextPos;
    private int count;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.lucene.util.RollingBuffer$Resettable[] $r1, $r2, $r3, $r4;
        org.apache.lucene.util.RollingBuffer r0;
        org.apache.lucene.util.RollingBuffer$Resettable $r5;
        int $i0, i1;

        r0 := @this: org.apache.lucene.util.RollingBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (org.apache.lucene.util.RollingBuffer$Resettable)[8];

        $r2 = (org.apache.lucene.util.RollingBuffer$Resettable[]) $r1;

        r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer> = $r2;

        i1 = 0;

     label1:
        $r3 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $i0 = lengthof $r3;

        if i1 >= $i0 goto label2;

        $r4 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $r5 = virtualinvoke r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable newInstance()>();

        $r4[i1] = $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected abstract org.apache.lucene.util.RollingBuffer$Resettable newInstance();

    public void reset()
    {
        org.apache.lucene.util.RollingBuffer$Resettable[] $r1, $r3;
        org.apache.lucene.util.RollingBuffer r0;
        org.apache.lucene.util.RollingBuffer$Resettable $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;

        r0 := @this: org.apache.lucene.util.RollingBuffer;

        $i0 = r0.<org.apache.lucene.util.RollingBuffer: int nextWrite>;

        $i1 = $i0 - 1;

        r0.<org.apache.lucene.util.RollingBuffer: int nextWrite> = $i1;

     label1:
        $i2 = r0.<org.apache.lucene.util.RollingBuffer: int count>;

        if $i2 <= 0 goto label3;

        $i3 = r0.<org.apache.lucene.util.RollingBuffer: int nextWrite>;

        $i11 = (int) -1;

        if $i3 != $i11 goto label2;

        $r3 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $i8 = lengthof $r3;

        $i9 = $i8 - 1;

        r0.<org.apache.lucene.util.RollingBuffer: int nextWrite> = $i9;

     label2:
        $r1 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $i4 = r0.<org.apache.lucene.util.RollingBuffer: int nextWrite>;

        $i5 = $i4 - 1;

        r0.<org.apache.lucene.util.RollingBuffer: int nextWrite> = $i5;

        $r2 = $r1[$i4];

        interfaceinvoke $r2.<org.apache.lucene.util.RollingBuffer$Resettable: void reset()>();

        $i6 = r0.<org.apache.lucene.util.RollingBuffer: int count>;

        $i7 = $i6 - 1;

        r0.<org.apache.lucene.util.RollingBuffer: int count> = $i7;

        goto label1;

     label3:
        r0.<org.apache.lucene.util.RollingBuffer: int nextWrite> = 0;

        r0.<org.apache.lucene.util.RollingBuffer: int nextPos> = 0;

        r0.<org.apache.lucene.util.RollingBuffer: int count> = 0;

        return;
    }

    private boolean inBounds(int)
    {
        int i0, $i1, $i2, $i3, $i4;
        org.apache.lucene.util.RollingBuffer r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.RollingBuffer;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.util.RollingBuffer: int nextPos>;

        if i0 >= $i1 goto label1;

        $i3 = r0.<org.apache.lucene.util.RollingBuffer: int nextPos>;

        $i2 = r0.<org.apache.lucene.util.RollingBuffer: int count>;

        $i4 = $i3 - $i2;

        if i0 < $i4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int getIndex(int)
    {
        org.apache.lucene.util.RollingBuffer$Resettable[] $r1;
        org.apache.lucene.util.RollingBuffer r0;
        int i0, $i1, $i2, $i3, $i4, i5;

        r0 := @this: org.apache.lucene.util.RollingBuffer;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.lucene.util.RollingBuffer: int nextWrite>;

        $i1 = r0.<org.apache.lucene.util.RollingBuffer: int nextPos>;

        $i2 = $i1 - i0;

        i5 = $i3 - $i2;

        if i5 >= 0 goto label1;

        $r1 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $i4 = lengthof $r1;

        i5 = i5 + $i4;

     label1:
        return i5;
    }

    public org.apache.lucene.util.RollingBuffer$Resettable get(int)
    {
        org.apache.lucene.util.RollingBuffer$Resettable $r2, $r13;
        boolean $z0, $z1;
        org.apache.lucene.util.RollingBuffer$Resettable[] $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, r14;
        java.lang.AssertionError $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27;
        org.apache.lucene.util.RollingBuffer r0;

        r0 := @this: org.apache.lucene.util.RollingBuffer;

        i0 := @parameter0: int;

     label1:
        $i1 = r0.<org.apache.lucene.util.RollingBuffer: int nextPos>;

        if i0 < $i1 goto label6;

        $i4 = r0.<org.apache.lucene.util.RollingBuffer: int count>;

        $r4 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $i3 = lengthof $r4;

        if $i4 != $i3 goto label4;

        $i13 = r0.<org.apache.lucene.util.RollingBuffer: int count>;

        $i15 = 1 + $i13;

        $i14 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i16 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i15, $i14);

        $r6 = newarray (org.apache.lucene.util.RollingBuffer$Resettable)[$i16];

        r14 = (org.apache.lucene.util.RollingBuffer$Resettable[]) $r6;

        $r8 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $i20 = r0.<org.apache.lucene.util.RollingBuffer: int nextWrite>;

        $r7 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $i18 = lengthof $r7;

        $i17 = r0.<org.apache.lucene.util.RollingBuffer: int nextWrite>;

        $i19 = $i18 - $i17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i20, r14, 0, $i19);

        $r10 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $r9 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $i22 = lengthof $r9;

        $i21 = r0.<org.apache.lucene.util.RollingBuffer: int nextWrite>;

        $i24 = $i22 - $i21;

        $i23 = r0.<org.apache.lucene.util.RollingBuffer: int nextWrite>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r14, $i24, $i23);

        $r11 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        i27 = lengthof $r11;

     label2:
        $i25 = lengthof r14;

        if i27 >= $i25 goto label3;

        $r13 = virtualinvoke r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable newInstance()>();

        r14[i27] = $r13;

        i27 = i27 + 1;

        goto label2;

     label3:
        $r12 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $i26 = lengthof $r12;

        r0.<org.apache.lucene.util.RollingBuffer: int nextWrite> = $i26;

        r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer> = r14;

     label4:
        $i6 = r0.<org.apache.lucene.util.RollingBuffer: int nextWrite>;

        $r5 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $i5 = lengthof $r5;

        if $i6 != $i5 goto label5;

        r0.<org.apache.lucene.util.RollingBuffer: int nextWrite> = 0;

     label5:
        $i7 = r0.<org.apache.lucene.util.RollingBuffer: int nextWrite>;

        $i8 = $i7 + 1;

        r0.<org.apache.lucene.util.RollingBuffer: int nextWrite> = $i8;

        $i9 = r0.<org.apache.lucene.util.RollingBuffer: int nextPos>;

        $i10 = $i9 + 1;

        r0.<org.apache.lucene.util.RollingBuffer: int nextPos> = $i10;

        $i11 = r0.<org.apache.lucene.util.RollingBuffer: int count>;

        $i12 = $i11 + 1;

        r0.<org.apache.lucene.util.RollingBuffer: int count> = $i12;

        goto label1;

     label6:
        $z0 = <org.apache.lucene.util.RollingBuffer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label7;

        $z1 = specialinvoke r0.<org.apache.lucene.util.RollingBuffer: boolean inBounds(int)>(i0);

        if $z1 != 0 goto label7;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label7:
        $i2 = specialinvoke r0.<org.apache.lucene.util.RollingBuffer: int getIndex(int)>(i0);

        $r1 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $r2 = $r1[$i2];

        return $r2;
    }

    public int getMaxPos()
    {
        org.apache.lucene.util.RollingBuffer r0;
        int $i0, $i1;

        r0 := @this: org.apache.lucene.util.RollingBuffer;

        $i0 = r0.<org.apache.lucene.util.RollingBuffer: int nextPos>;

        $i1 = $i0 - 1;

        return $i1;
    }

    public void freeBefore(int)
    {
        java.lang.AssertionError $r5, $r12;
        org.apache.lucene.util.RollingBuffer$Resettable $r3;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        java.lang.String $r11;
        boolean $z0, $z1;
        org.apache.lucene.util.RollingBuffer$Resettable[] $r1, $r2, $r4;
        org.apache.lucene.util.RollingBuffer r0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.lucene.util.RollingBuffer;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.lucene.util.RollingBuffer: int count>;

        $i1 = r0.<org.apache.lucene.util.RollingBuffer: int nextPos>;

        $i2 = $i1 - i0;

        i4 = $i3 - $i2;

        $z0 = <org.apache.lucene.util.RollingBuffer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i4 >= 0 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $z1 = <org.apache.lucene.util.RollingBuffer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i11 = r0.<org.apache.lucene.util.RollingBuffer: int count>;

        if i4 <= $i11 goto label2;

        $r5 = new java.lang.AssertionError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("toFree=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count=");

        $i13 = r0.<org.apache.lucene.util.RollingBuffer: int count>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r5;

     label2:
        $i6 = r0.<org.apache.lucene.util.RollingBuffer: int nextWrite>;

        $i5 = r0.<org.apache.lucene.util.RollingBuffer: int count>;

        $i12 = $i6 - $i5;

        i14 = $i12;

        if $i12 >= 0 goto label3;

        $r4 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $i10 = lengthof $r4;

        i14 = $i12 + $i10;

     label3:
        i15 = 0;

     label4:
        if i15 >= i4 goto label6;

        $r1 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $i9 = lengthof $r1;

        if i14 != $i9 goto label5;

        i14 = 0;

     label5:
        $r2 = r0.<org.apache.lucene.util.RollingBuffer: org.apache.lucene.util.RollingBuffer$Resettable[] buffer>;

        $r3 = $r2[i14];

        interfaceinvoke $r3.<org.apache.lucene.util.RollingBuffer$Resettable: void reset()>();

        i14 = i14 + 1;

        i15 = i15 + 1;

        goto label4;

     label6:
        $i7 = r0.<org.apache.lucene.util.RollingBuffer: int count>;

        $i8 = $i7 - i4;

        r0.<org.apache.lucene.util.RollingBuffer: int count> = $i8;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/RollingBuffer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.RollingBuffer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
