public final class com.adobe.xmp.impl.xpath.XMPPathParser extends java.lang.Object
{

    private void <init>()
    {
        com.adobe.xmp.impl.xpath.XMPPathParser r0;

        r0 := @this: com.adobe.xmp.impl.xpath.XMPPathParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.xpath.PathPosition $r33;
        com.adobe.xmp.impl.xpath.XMPPathSegment r30;
        boolean $z0, $z1;
        com.adobe.xmp.impl.xpath.XMPPath $r32;
        java.lang.StringBuilder $r10, $r13, $r22, $r25, $r34, $r36;
        com.adobe.xmp.XMPException $r31, $r35, $r37;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i10, $i11, $i12, $i13, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.lang.String r0, r2, $r5, $r6, $r7, $r8, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r20, $r23, $r24, $r26, $r27, $r28;
        char $c5, $c8, $c9, $c14, $c15;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r0 == null goto label01;

        if r2 != null goto label02;

     label01:
        $r31 = new com.adobe.xmp.XMPException;

        specialinvoke $r31.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Parameter must not be null", 4);

        throw $r31;

     label02:
        $r32 = new com.adobe.xmp.impl.xpath.XMPPath;

        specialinvoke $r32.<com.adobe.xmp.impl.xpath.XMPPath: void <init>()>();

        $r33 = new com.adobe.xmp.impl.xpath.PathPosition;

        specialinvoke $r33.<com.adobe.xmp.impl.xpath.PathPosition: void <init>()>();

        $r33.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path> = r2;

        staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: void parseRootNode(java.lang.String,com.adobe.xmp.impl.xpath.PathPosition,com.adobe.xmp.impl.xpath.XMPPath)>(r0, $r33, $r32);

     label03:
        $i0 = $r33.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label11;

        $i2 = $r33.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $r33.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin> = $i2;

        staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: void skipPathDelimiter(java.lang.String,com.adobe.xmp.impl.xpath.PathPosition)>(r2, $r33);

        $i3 = $r33.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        $r33.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd> = $i3;

        $i4 = $r33.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        $c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i4);

        $i20 = (int) $c5;

        if $i20 == 91 goto label04;

        r30 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPathSegment parseStructSegment(com.adobe.xmp.impl.xpath.PathPosition)>($r33);

        goto label05;

     label04:
        r30 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPathSegment parseIndexSegment(com.adobe.xmp.impl.xpath.PathPosition)>($r33);

     label05:
        $i6 = virtualinvoke r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: int getKind()>();

        if $i6 != 1 goto label08;

        $r17 = virtualinvoke r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $c14 = virtualinvoke $r17.<java.lang.String: char charAt(int)>(0);

        $i21 = (int) $c14;

        if $i21 != 64 goto label06;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r23 = virtualinvoke r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $r24 = virtualinvoke $r23.<java.lang.String: java.lang.String substring(int)>(1);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: void setName(java.lang.String)>($r26);

        $r27 = "?xml:lang";

        $r28 = virtualinvoke r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $z1 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r28);

        if $z1 != 0 goto label06;

        $r35 = new com.adobe.xmp.XMPException;

        specialinvoke $r35.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Only xml:lang allowed with \'@\'", 102);

        throw $r35;

     label06:
        $r18 = virtualinvoke r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $c15 = virtualinvoke $r18.<java.lang.String: char charAt(int)>(0);

        $i22 = (int) $c15;

        if $i22 != 63 goto label07;

        $i18 = $r33.<com.adobe.xmp.impl.xpath.PathPosition: int nameStart>;

        $i19 = $i18 + 1;

        $r33.<com.adobe.xmp.impl.xpath.PathPosition: int nameStart> = $i19;

        virtualinvoke r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: void setKind(int)>(2);

     label07:
        $r19 = $r33.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i17 = $r33.<com.adobe.xmp.impl.xpath.PathPosition: int nameStart>;

        $i16 = $r33.<com.adobe.xmp.impl.xpath.PathPosition: int nameEnd>;

        $r20 = virtualinvoke $r19.<java.lang.String: java.lang.String substring(int,int)>($i17, $i16);

        staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: void verifyQualName(java.lang.String)>($r20);

        goto label10;

     label08:
        $i7 = virtualinvoke r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: int getKind()>();

        if $i7 != 6 goto label10;

        $r5 = virtualinvoke r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $c8 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(1);

        $i23 = (int) $c8;

        if $i23 != 64 goto label09;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[?");

        $r11 = virtualinvoke r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int)>(2);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: void setName(java.lang.String)>($r14);

        $r15 = virtualinvoke r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $z0 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("[?xml:lang=");

        if $z0 != 0 goto label09;

        $r37 = new com.adobe.xmp.XMPException;

        specialinvoke $r37.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Only xml:lang allowed with \'@\'", 102);

        throw $r37;

     label09:
        $r6 = virtualinvoke r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $c9 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(1);

        $i24 = (int) $c9;

        if $i24 != 63 goto label10;

        $i10 = $r33.<com.adobe.xmp.impl.xpath.PathPosition: int nameStart>;

        $i11 = $i10 + 1;

        $r33.<com.adobe.xmp.impl.xpath.PathPosition: int nameStart> = $i11;

        virtualinvoke r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: void setKind(int)>(5);

        $r7 = $r33.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i13 = $r33.<com.adobe.xmp.impl.xpath.PathPosition: int nameStart>;

        $i12 = $r33.<com.adobe.xmp.impl.xpath.PathPosition: int nameEnd>;

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>($i13, $i12);

        staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: void verifyQualName(java.lang.String)>($r8);

     label10:
        virtualinvoke $r32.<com.adobe.xmp.impl.xpath.XMPPath: void add(com.adobe.xmp.impl.xpath.XMPPathSegment)>(r30);

        goto label03;

     label11:
        return $r32;
    }

    private static void skipPathDelimiter(java.lang.String, com.adobe.xmp.impl.xpath.PathPosition) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.xpath.PathPosition r1;
        com.adobe.xmp.XMPException $r4, $r5;
        int $i0, $i2, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.String r0;
        char $c1, $c3, $c9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.adobe.xmp.impl.xpath.PathPosition;

        $i0 = r1.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i0);

        $i14 = (int) $c1;

        if $i14 != 47 goto label1;

        $i10 = r1.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        $i11 = $i10 + 1;

        r1.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin> = $i11;

        $i12 = r1.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        $i13 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i12 < $i13 goto label1;

        $r4 = new com.adobe.xmp.XMPException;

        specialinvoke $r4.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty XMPPath segment", 102);

        throw $r4;

     label1:
        $i2 = r1.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i15 = (int) $c3;

        if $i15 != 42 goto label3;

        $i4 = r1.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        $i5 = $i4 + 1;

        r1.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin> = $i5;

        $i6 = r1.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        $i7 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i6 >= $i7 goto label2;

        $i8 = r1.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i8);

        $i16 = (int) $c9;

        if $i16 == 91 goto label3;

     label2:
        $r5 = new com.adobe.xmp.XMPException;

        specialinvoke $r5.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Missing \'[\' after \'*\'", 102);

        throw $r5;

     label3:
        return;
    }

    private static com.adobe.xmp.impl.xpath.XMPPathSegment parseStructSegment(com.adobe.xmp.impl.xpath.PathPosition) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.xpath.PathPosition r0;
        com.adobe.xmp.impl.xpath.XMPPathSegment $r9;
        com.adobe.xmp.XMPException $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13;
        java.lang.String $r1, $r3, $r4, $r6, $r7;
        char $c9;

        r0 := @parameter0: com.adobe.xmp.impl.xpath.PathPosition;

        $i0 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int nameStart> = $i0;

     label1:
        $i1 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $r1 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 >= $i2 goto label2;

        $r7 = "/[*";

        $r6 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i8 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $c9 = virtualinvoke $r6.<java.lang.String: char charAt(int)>($i8);

        $i13 = (int) $c9;

        $i10 = virtualinvoke $r7.<java.lang.String: int indexOf(int)>($i13);

        if $i10 >= 0 goto label2;

        $i11 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i12 = $i11 + 1;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd> = $i12;

        goto label1;

     label2:
        $i3 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int nameEnd> = $i3;

        $i5 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i4 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        if $i5 != $i4 goto label3;

        $r8 = new com.adobe.xmp.XMPException;

        specialinvoke $r8.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty XMPPath segment", 102);

        throw $r8;

     label3:
        $r9 = new com.adobe.xmp.impl.xpath.XMPPathSegment;

        $r3 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i7 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        $i6 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($i7, $i6);

        specialinvoke $r9.<com.adobe.xmp.impl.xpath.XMPPathSegment: void <init>(java.lang.String,int)>($r4, 1);

        return $r9;
    }

    private static com.adobe.xmp.impl.xpath.XMPPathSegment parseIndexSegment(com.adobe.xmp.impl.xpath.PathPosition) throws com.adobe.xmp.XMPException
    {
        java.lang.String $r1, $r2, $r3, $r6, $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16, $r20, $r21, $r22, $r23, $r24, $r25, $r28, $r29, $r30, $r31, $r32;
        com.adobe.xmp.impl.xpath.PathPosition r0;
        com.adobe.xmp.impl.xpath.XMPPathSegment r27, $r33, $r36, $r39;
        boolean $z0;
        com.adobe.xmp.XMPException $r34, $r35, $r37, $r38, $r40;
        int $i0, $i1, $i2, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i34, $i35, $i36, $i37, $i39, $i41, $i42, $i43, $i45, $i46, $i47, $i49, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76;
        char $c3, $c5, $c12, $c18, $c24, $c32, $c38, $c40, $c44, $c48, $c50;

        r0 := @parameter0: com.adobe.xmp.impl.xpath.PathPosition;

        $i0 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i1 = $i0 + 1;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd> = $i1;

        $r1 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i2 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $i63 = (int) $c3;

        if 48 > $i63 goto label03;

        $r22 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i43 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $c44 = virtualinvoke $r22.<java.lang.String: char charAt(int)>($i43);

        $i64 = (int) $c44;

        if $i64 > 57 goto label03;

     label01:
        $i45 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $r23 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i46 = virtualinvoke $r23.<java.lang.String: int length()>();

        if $i45 >= $i46 goto label02;

        $r24 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i47 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $c48 = virtualinvoke $r24.<java.lang.String: char charAt(int)>($i47);

        $i65 = (int) $c48;

        if 48 > $i65 goto label02;

        $r25 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i49 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $c50 = virtualinvoke $r25.<java.lang.String: char charAt(int)>($i49);

        $i66 = (int) $c50;

        if $i66 > 57 goto label02;

        $i51 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i52 = $i51 + 1;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd> = $i52;

        goto label01;

     label02:
        $r33 = new com.adobe.xmp.impl.xpath.XMPPathSegment;

        specialinvoke $r33.<com.adobe.xmp.impl.xpath.XMPPathSegment: void <init>(java.lang.String,int)>(null, 3);

        r27 = $r33;

        goto label14;

     label03:
        $i53 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $r28 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i54 = virtualinvoke $r28.<java.lang.String: int length()>();

        if $i53 >= $i54 goto label04;

        $r20 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i37 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $c38 = virtualinvoke $r20.<java.lang.String: char charAt(int)>($i37);

        $i67 = (int) $c38;

        if $i67 == 93 goto label04;

        $r21 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i39 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $c40 = virtualinvoke $r21.<java.lang.String: char charAt(int)>($i39);

        $i68 = (int) $c40;

        if $i68 == 61 goto label04;

        $i41 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i42 = $i41 + 1;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd> = $i42;

        goto label03;

     label04:
        $i55 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $r29 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i56 = virtualinvoke $r29.<java.lang.String: int length()>();

        if $i55 < $i56 goto label05;

        $r34 = new com.adobe.xmp.XMPException;

        specialinvoke $r34.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Missing \']\' or \'=\' for array index", 102);

        throw $r34;

     label05:
        $r2 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i4 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $c5 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i4);

        $i69 = (int) $c5;

        if $i69 != 93 goto label07;

        $r15 = "[last()";

        $r14 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i36 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        $i35 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $r16 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>($i36, $i35);

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z0 != 0 goto label06;

        $r35 = new com.adobe.xmp.XMPException;

        specialinvoke $r35.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid non-numeric array index", 102);

        throw $r35;

     label06:
        $r36 = new com.adobe.xmp.impl.xpath.XMPPathSegment;

        specialinvoke $r36.<com.adobe.xmp.impl.xpath.XMPPathSegment: void <init>(java.lang.String,int)>(null, 4);

        r27 = $r36;

        goto label14;

     label07:
        $i6 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        $i7 = $i6 + 1;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int nameStart> = $i7;

        $i8 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int nameEnd> = $i8;

        $i9 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i10 = $i9 + 1;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd> = $i10;

        $r3 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i11 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $c12 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i11);

        $i70 = (int) $c12;

        if $i70 == 39 goto label08;

        $i71 = (int) $c12;

        if $i71 == 34 goto label08;

        $r37 = new com.adobe.xmp.XMPException;

        specialinvoke $r37.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid quote in array selector", 102);

        throw $r37;

     label08:
        $i13 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i14 = $i13 + 1;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd> = $i14;

     label09:
        $i57 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $r30 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i58 = virtualinvoke $r30.<java.lang.String: int length()>();

        if $i57 >= $i58 goto label12;

        $r10 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i23 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $c24 = virtualinvoke $r10.<java.lang.String: char charAt(int)>($i23);

        $i72 = (int) $c24;

        $i73 = (int) $c12;

        if $i72 != $i73 goto label11;

        $i27 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i28 = $i27 + 1;

        $r11 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i29 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i28 >= $i29 goto label12;

        $r12 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i30 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i31 = $i30 + 1;

        $c32 = virtualinvoke $r12.<java.lang.String: char charAt(int)>($i31);

        $i74 = (int) $c32;

        $i75 = (int) $c12;

        if $i74 == $i75 goto label10;

        goto label12;

     label10:
        $i33 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i34 = $i33 + 1;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd> = $i34;

     label11:
        $i25 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i26 = $i25 + 1;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd> = $i26;

        goto label09;

     label12:
        $i59 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $r31 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i60 = virtualinvoke $r31.<java.lang.String: int length()>();

        if $i59 < $i60 goto label13;

        $r38 = new com.adobe.xmp.XMPException;

        specialinvoke $r38.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("No terminating quote for array selector", 102);

        throw $r38;

     label13:
        $i15 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i16 = $i15 + 1;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd> = $i16;

        $r39 = new com.adobe.xmp.impl.xpath.XMPPathSegment;

        specialinvoke $r39.<com.adobe.xmp.impl.xpath.XMPPathSegment: void <init>(java.lang.String,int)>(null, 6);

        r27 = $r39;

     label14:
        $i61 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $r32 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i62 = virtualinvoke $r32.<java.lang.String: int length()>();

        if $i61 >= $i62 goto label15;

        $r6 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i17 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $c18 = virtualinvoke $r6.<java.lang.String: char charAt(int)>($i17);

        $i76 = (int) $c18;

        if $i76 == 93 goto label16;

     label15:
        $r40 = new com.adobe.xmp.XMPException;

        specialinvoke $r40.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Missing \']\' for array index", 102);

        throw $r40;

     label16:
        $i19 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i20 = $i19 + 1;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd> = $i20;

        $r7 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i22 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        $i21 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>($i22, $i21);

        virtualinvoke r27.<com.adobe.xmp.impl.xpath.XMPPathSegment: void setName(java.lang.String)>($r8);

        return r27;
    }

    private static void parseRootNode(java.lang.String, com.adobe.xmp.impl.xpath.PathPosition, com.adobe.xmp.impl.xpath.XMPPath) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.xpath.PathPosition r0;
        com.adobe.xmp.impl.xpath.XMPPathSegment $r28, $r29, $r30, $r31, $r32, $r33;
        com.adobe.xmp.properties.XMPAliasInfo $r7;
        boolean $z0, $z1;
        com.adobe.xmp.impl.xpath.XMPPath r8;
        com.adobe.xmp.options.AliasOptions $r15, $r16, $r17, $r19, $r21;
        com.adobe.xmp.XMPSchemaRegistry $r6;
        com.adobe.xmp.XMPException $r27;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14;
        java.lang.String $r1, r2, $r3, $r4, $r5, $r10, $r12, $r13, $r14, $r25, $r26;
        char $c10;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: com.adobe.xmp.impl.xpath.PathPosition;

        r8 := @parameter2: com.adobe.xmp.impl.xpath.XMPPath;

     label1:
        $i0 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $r1 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label2;

        $r26 = "/[*";

        $r25 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i9 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $c10 = virtualinvoke $r25.<java.lang.String: char charAt(int)>($i9);

        $i14 = (int) $c10;

        $i11 = virtualinvoke $r26.<java.lang.String: int indexOf(int)>($i14);

        if $i11 >= 0 goto label2;

        $i12 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i13 = $i12 + 1;

        r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd> = $i13;

        goto label1;

     label2:
        $i3 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $i2 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        if $i3 != $i2 goto label3;

        $r27 = new com.adobe.xmp.XMPException;

        specialinvoke $r27.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty initial XMPPath step", 102);

        throw $r27;

     label3:
        $r3 = r0.<com.adobe.xmp.impl.xpath.PathPosition: java.lang.String path>;

        $i5 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepBegin>;

        $i4 = r0.<com.adobe.xmp.impl.xpath.PathPosition: int stepEnd>;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($i5, $i4);

        $r5 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: java.lang.String verifyXPathRoot(java.lang.String,java.lang.String)>(r2, $r4);

        $r6 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        $r7 = interfaceinvoke $r6.<com.adobe.xmp.XMPSchemaRegistry: com.adobe.xmp.properties.XMPAliasInfo findAlias(java.lang.String)>($r5);

        if $r7 != null goto label4;

        $r28 = new com.adobe.xmp.impl.xpath.XMPPathSegment;

        specialinvoke $r28.<com.adobe.xmp.impl.xpath.XMPPathSegment: void <init>(java.lang.String,int)>(r2, -2147483648);

        virtualinvoke r8.<com.adobe.xmp.impl.xpath.XMPPath: void add(com.adobe.xmp.impl.xpath.XMPPathSegment)>($r28);

        $r29 = new com.adobe.xmp.impl.xpath.XMPPathSegment;

        specialinvoke $r29.<com.adobe.xmp.impl.xpath.XMPPathSegment: void <init>(java.lang.String,int)>($r5, 1);

        virtualinvoke r8.<com.adobe.xmp.impl.xpath.XMPPath: void add(com.adobe.xmp.impl.xpath.XMPPathSegment)>($r29);

        goto label6;

     label4:
        $r30 = new com.adobe.xmp.impl.xpath.XMPPathSegment;

        $r10 = interfaceinvoke $r7.<com.adobe.xmp.properties.XMPAliasInfo: java.lang.String getNamespace()>();

        specialinvoke $r30.<com.adobe.xmp.impl.xpath.XMPPathSegment: void <init>(java.lang.String,int)>($r10, -2147483648);

        virtualinvoke r8.<com.adobe.xmp.impl.xpath.XMPPath: void add(com.adobe.xmp.impl.xpath.XMPPathSegment)>($r30);

        $r31 = new com.adobe.xmp.impl.xpath.XMPPathSegment;

        $r12 = interfaceinvoke $r7.<com.adobe.xmp.properties.XMPAliasInfo: java.lang.String getNamespace()>();

        $r13 = interfaceinvoke $r7.<com.adobe.xmp.properties.XMPAliasInfo: java.lang.String getPropName()>();

        $r14 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: java.lang.String verifyXPathRoot(java.lang.String,java.lang.String)>($r12, $r13);

        specialinvoke $r31.<com.adobe.xmp.impl.xpath.XMPPathSegment: void <init>(java.lang.String,int)>($r14, 1);

        virtualinvoke $r31.<com.adobe.xmp.impl.xpath.XMPPathSegment: void setAlias(boolean)>(1);

        $r15 = interfaceinvoke $r7.<com.adobe.xmp.properties.XMPAliasInfo: com.adobe.xmp.options.AliasOptions getAliasForm()>();

        $i6 = virtualinvoke $r15.<com.adobe.xmp.options.AliasOptions: int getOptions()>();

        virtualinvoke $r31.<com.adobe.xmp.impl.xpath.XMPPathSegment: void setAliasForm(int)>($i6);

        virtualinvoke r8.<com.adobe.xmp.impl.xpath.XMPPath: void add(com.adobe.xmp.impl.xpath.XMPPathSegment)>($r31);

        $r16 = interfaceinvoke $r7.<com.adobe.xmp.properties.XMPAliasInfo: com.adobe.xmp.options.AliasOptions getAliasForm()>();

        $z0 = virtualinvoke $r16.<com.adobe.xmp.options.AliasOptions: boolean isArrayAltText()>();

        if $z0 == 0 goto label5;

        $r32 = new com.adobe.xmp.impl.xpath.XMPPathSegment;

        specialinvoke $r32.<com.adobe.xmp.impl.xpath.XMPPathSegment: void <init>(java.lang.String,int)>("[?xml:lang=\'x-default\']", 5);

        virtualinvoke $r32.<com.adobe.xmp.impl.xpath.XMPPathSegment: void setAlias(boolean)>(1);

        $r21 = interfaceinvoke $r7.<com.adobe.xmp.properties.XMPAliasInfo: com.adobe.xmp.options.AliasOptions getAliasForm()>();

        $i8 = virtualinvoke $r21.<com.adobe.xmp.options.AliasOptions: int getOptions()>();

        virtualinvoke $r32.<com.adobe.xmp.impl.xpath.XMPPathSegment: void setAliasForm(int)>($i8);

        virtualinvoke r8.<com.adobe.xmp.impl.xpath.XMPPath: void add(com.adobe.xmp.impl.xpath.XMPPathSegment)>($r32);

        goto label6;

     label5:
        $r17 = interfaceinvoke $r7.<com.adobe.xmp.properties.XMPAliasInfo: com.adobe.xmp.options.AliasOptions getAliasForm()>();

        $z1 = virtualinvoke $r17.<com.adobe.xmp.options.AliasOptions: boolean isArray()>();

        if $z1 == 0 goto label6;

        $r33 = new com.adobe.xmp.impl.xpath.XMPPathSegment;

        specialinvoke $r33.<com.adobe.xmp.impl.xpath.XMPPathSegment: void <init>(java.lang.String,int)>("[1]", 3);

        virtualinvoke $r33.<com.adobe.xmp.impl.xpath.XMPPathSegment: void setAlias(boolean)>(1);

        $r19 = interfaceinvoke $r7.<com.adobe.xmp.properties.XMPAliasInfo: com.adobe.xmp.options.AliasOptions getAliasForm()>();

        $i7 = virtualinvoke $r19.<com.adobe.xmp.options.AliasOptions: int getOptions()>();

        virtualinvoke $r33.<com.adobe.xmp.impl.xpath.XMPPathSegment: void setAliasForm(int)>($i7);

        virtualinvoke r8.<com.adobe.xmp.impl.xpath.XMPPath: void add(com.adobe.xmp.impl.xpath.XMPPathSegment)>($r33);

     label6:
        return;
    }

    private static void verifyQualName(java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPSchemaRegistry $r3;
        com.adobe.xmp.XMPException $r1, $r5;
        int $i0;
        java.lang.String r0, $r2, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        if $i0 <= 0 goto label2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $z0 = staticinvoke <com.adobe.xmp.impl.Utils: boolean isXMLNameNS(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        $r4 = interfaceinvoke $r3.<com.adobe.xmp.XMPSchemaRegistry: java.lang.String getNamespaceURI(java.lang.String)>($r2);

        if $r4 == null goto label1;

        return;

     label1:
        $r5 = new com.adobe.xmp.XMPException;

        specialinvoke $r5.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Unknown namespace prefix for qualified name", 102);

        throw $r5;

     label2:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Ill-formed qualified name", 102);

        throw $r1;
    }

    private static void verifySimpleXMLName(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        boolean $z0;
        com.adobe.xmp.XMPException $r1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.adobe.xmp.impl.Utils: boolean isXMLName(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Bad XML name", 102);

        throw $r1;

     label1:
        return;
    }

    private static java.lang.String verifyXPathRoot(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPSchemaRegistry $r5, $r10;
        com.adobe.xmp.XMPException $r19, $r20, $r21, $r22, $r24, $r25;
        int $i0, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String r0, r2, $r6, $r7, $r8, $r9, $r11, $r17;
        boolean $z0;
        char $c1, $c2;
        java.lang.StringBuilder $r15, $r16, $r23;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r0 == null goto label01;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        $r19 = new com.adobe.xmp.XMPException;

        specialinvoke $r19.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Schema namespace URI is required", 101);

        throw $r19;

     label02:
        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);

        $i7 = (int) $c1;

        if $i7 == 63 goto label03;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);

        $i8 = (int) $c2;

        if $i8 != 64 goto label04;

     label03:
        $r20 = new com.adobe.xmp.XMPException;

        specialinvoke $r20.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Top level name must not be a qualifier", 102);

        throw $r20;

     label04:
        $i3 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(47);

        if $i3 >= 0 goto label05;

        $i4 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(91);

        if $i4 < 0 goto label06;

     label05:
        $r21 = new com.adobe.xmp.XMPException;

        specialinvoke $r21.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Top level name must be simple", 102);

        throw $r21;

     label06:
        $r5 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        $r6 = interfaceinvoke $r5.<com.adobe.xmp.XMPSchemaRegistry: java.lang.String getNamespacePrefix(java.lang.String)>(r0);

        if $r6 != null goto label07;

        $r22 = new com.adobe.xmp.XMPException;

        specialinvoke $r22.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Unregistered schema namespace URI", 101);

        throw $r22;

     label07:
        $i5 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);

        if $i5 >= 0 goto label08;

        staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: void verifySimpleXMLName(java.lang.String)>(r2);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;

     label08:
        $r7 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: void verifySimpleXMLName(java.lang.String)>($r7);

        $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i5);

        staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: void verifySimpleXMLName(java.lang.String)>($r8);

        $i6 = $i5 + 1;

        $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        $r10 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        $r11 = interfaceinvoke $r10.<com.adobe.xmp.XMPSchemaRegistry: java.lang.String getNamespacePrefix(java.lang.String)>(r0);

        if $r11 != null goto label09;

        $r24 = new com.adobe.xmp.XMPException;

        specialinvoke $r24.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Unknown schema namespace prefix", 101);

        throw $r24;

     label09:
        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label10;

        $r25 = new com.adobe.xmp.XMPException;

        specialinvoke $r25.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Schema namespace URI and prefix mismatch", 101);

        throw $r25;

     label10:
        return r2;
    }
}
