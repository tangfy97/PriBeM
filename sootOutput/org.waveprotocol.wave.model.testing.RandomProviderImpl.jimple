public class org.waveprotocol.wave.model.testing.RandomProviderImpl extends java.lang.Object implements org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider
{
    private int next32;

    public static org.waveprotocol.wave.model.testing.RandomProviderImpl ofSeed(int)
    {
        int i0;
        org.waveprotocol.wave.model.testing.RandomProviderImpl $r0;

        i0 := @parameter0: int;

        $r0 = new org.waveprotocol.wave.model.testing.RandomProviderImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.testing.RandomProviderImpl: void <init>(int)>(i0);

        return $r0;
    }

    public void <init>(int)
    {
        int i0;
        org.waveprotocol.wave.model.testing.RandomProviderImpl r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomProviderImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.RandomProviderImpl: int next32> = i0;

        return;
    }

    public int nextInt(int)
    {
        long $l2, $l3, $l4;
        int i0, $i1, $i5, $i6, $i7;
        org.waveprotocol.wave.model.testing.RandomProviderImpl r0;
        double $d0, $d1, $d2, $d3, $d4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomProviderImpl;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "upperBound must be positive");

        $i1 = r0.<org.waveprotocol.wave.model.testing.RandomProviderImpl: int next32>;

        $l2 = (long) $i1;

        $l3 = 2011012757L * $l2;

        $l4 = $l3 + 1L;

        $i5 = (int) $l4;

        r0.<org.waveprotocol.wave.model.testing.RandomProviderImpl: int next32> = $i5;

        $i6 = r0.<org.waveprotocol.wave.model.testing.RandomProviderImpl: int next32>;

        $d0 = (double) $i6;

        $d1 = $d0 + 2.147483648E9;

        $d4 = $d1 / 4.294967296E9;

        $d2 = (double) i0;

        $d3 = $d4 * $d2;

        $i7 = (int) $d3;

        return $i7;
    }

    public boolean nextBoolean()
    {
        int $i0;
        org.waveprotocol.wave.model.testing.RandomProviderImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomProviderImpl;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomProviderImpl: int nextInt(int)>(2);

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
