public class org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler extends org.waveprotocol.wave.client.editor.NodeEventHandlerImpl
{
    public static final org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler INSTANCE;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.NodeEventHandlerImpl: void <init>()>();

        return;
    }

    public static void register(java.lang.String, org.waveprotocol.wave.client.editor.ElementHandlerRegistry)
    {
        java.lang.String r1;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;
        org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler $r2;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        $r2 = <org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler: org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler INSTANCE>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerEventHandler(java.lang.String,org.waveprotocol.wave.client.editor.NodeEventHandler)>(r1, $r2);

        return;
    }

    public boolean handleBackspaceAfterNode(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;

        r2 := @this: org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void deleteNode(java.lang.Object)>(r0);

        return 1;
    }

    public boolean handleDeleteBeforeNode(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;

        r2 := @this: org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void deleteNode(java.lang.Object)>(r0);

        return 1;
    }

    public boolean handleLeftAfterNode(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;

        r2 := @this: org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        staticinvoke <org.waveprotocol.wave.client.editor.selection.content.SelectionUtil: void placeCaretBeforeElement(org.waveprotocol.wave.client.editor.selection.content.SelectionHelper,org.waveprotocol.wave.client.editor.content.ContentElement)>($r1, r0);

        return 1;
    }

    public boolean handleRightBeforeNode(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;

        r2 := @this: org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        staticinvoke <org.waveprotocol.wave.client.editor.selection.content.SelectionUtil: void placeCaretAfterElement(org.waveprotocol.wave.client.editor.selection.content.SelectionHelper,org.waveprotocol.wave.client.editor.content.ContentElement)>($r1, r0);

        return 1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler $r0;

        $r0 = new org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler: org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler INSTANCE> = $r0;

        return;
    }
}
