class org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter extends java.lang.Object implements org.waveprotocol.wave.model.util.IdentityMap
{
    private final java.util.Map backend;

    private void <init>()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter r0;
        java.util.IdentityHashMap $r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.IdentityHashMap;

        specialinvoke $r1.<java.util.IdentityHashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter: java.util.Map backend> = $r1;

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter r0;
        java.util.Map $r2;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter: java.util.Map backend>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public boolean has(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter r0;
        java.util.Map $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter: java.util.Map backend>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public void put(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r4;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter r1;
        java.util.Map $r3;
        java.lang.Object r0, r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.Integer;

        if $z1 != 0 goto label1;

        $z2 = r0 instanceof java.lang.Double;

        if $z2 != 0 goto label1;

        $z3 = r0 instanceof java.lang.Long;

        if $z3 != 0 goto label1;

        $z4 = r0 instanceof java.lang.Boolean;

        if $z4 == 0 goto label2;

     label1:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Should NOT use boxed primitives as key with identity map");

        throw $r4;

     label2:
        $r3 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter: java.util.Map backend>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

        return;
    }

    public void remove(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter: java.lang.Object removeAndReturn(java.lang.Object)>(r1);

        return;
    }

    public java.lang.Object removeAndReturn(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter r0;
        java.util.Map $r2;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter: java.util.Map backend>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return $r3;
    }

    public void clear()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter: java.util.Map backend>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean isEmpty()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter: java.util.Map backend>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public void each(org.waveprotocol.wave.model.util.IdentityMap$ProcV)
    {
        org.waveprotocol.wave.model.util.IdentityMap$ProcV r6;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter r0;
        java.util.Map $r1;
        java.lang.Object $r4, $r7, $r8;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter;

        r6 := @parameter0: org.waveprotocol.wave.model.util.IdentityMap$ProcV;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter: java.util.Map backend>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r6.<org.waveprotocol.wave.model.util.IdentityMap$ProcV: void apply(java.lang.Object,java.lang.Object)>($r7, $r8);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object reduce(java.lang.Object, org.waveprotocol.wave.model.util.IdentityMap$Reduce)
    {
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.waveprotocol.wave.model.util.IdentityMap$Reduce r7;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter r1;
        java.util.Map $r2;
        java.lang.Object r0, $r5, $r8, $r9, r10;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter;

        r0 := @parameter0: java.lang.Object;

        r7 := @parameter1: org.waveprotocol.wave.model.util.IdentityMap$Reduce;

        r10 = r0;

        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter: java.util.Map backend>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        r10 = interfaceinvoke r7.<org.waveprotocol.wave.model.util.IdentityMap$Reduce: java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object)>(r10, $r8, $r9);

        goto label1;

     label2:
        return r10;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter r0;
        java.lang.String $r2;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter: java.util.Map backend>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public int countEntries()
    {
        int $i0;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter: java.util.Map backend>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    void <init>(org.waveprotocol.wave.model.util.CollectionUtils$1)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$1 r1;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter;

        r1 := @parameter0: org.waveprotocol.wave.model.util.CollectionUtils$1;

        specialinvoke r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentityHashMapAdapter: void <init>()>();

        return;
    }
}
