public class ucar.ma2.MAMath extends java.lang.Object
{

    public void <init>()
    {
        ucar.ma2.MAMath r0;

        r0 := @this: ucar.ma2.MAMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static ucar.ma2.Array add(ucar.ma2.Array, ucar.ma2.Array) throws java.lang.IllegalArgumentException
    {
        java.lang.UnsupportedOperationException $r6;
        ucar.ma2.Array r0, $r3, r7;
        int[] $r2;
        java.lang.Class $r1, $r4, $r5;

        r0 := @parameter0: ucar.ma2.Array;

        r7 := @parameter1: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r2 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        $r3 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r1, $r2);

        $r4 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        if $r4 != $r5 goto label1;

        staticinvoke <ucar.ma2.MAMath: void addDouble(ucar.ma2.Array,ucar.ma2.Array,ucar.ma2.Array)>($r3, r0, r7);

        goto label2;

     label1:
        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r6;

     label2:
        return $r3;
    }

    public static void addDouble(ucar.ma2.Array, ucar.ma2.Array, ucar.ma2.Array) throws java.lang.IllegalArgumentException
    {
        ucar.ma2.IndexIterator $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r2;
        ucar.ma2.Array r0, r1, r3;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2;

        r0 := @parameter0: ucar.ma2.Array;

        r1 := @parameter1: ucar.ma2.Array;

        r3 := @parameter2: ucar.ma2.Array;

        $z0 = staticinvoke <ucar.ma2.MAMath: boolean conformable(ucar.ma2.Array,ucar.ma2.Array)>(r0, r1);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <ucar.ma2.MAMath: boolean conformable(ucar.ma2.Array,ucar.ma2.Array)>(r1, r3);

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        $r4 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r5 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r6 = virtualinvoke r3.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label3:
        $z2 = interfaceinvoke $r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $d0 = interfaceinvoke $r5.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $d1 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $d2 = $d0 + $d1;

        interfaceinvoke $r4.<ucar.ma2.IndexIterator: void setDoubleNext(double)>($d2);

        goto label3;

     label4:
        return;
    }

    public static boolean conformable(ucar.ma2.Array, ucar.ma2.Array)
    {
        int[] $r1, $r3;
        ucar.ma2.Array r0, r2;
        boolean $z0;

        r0 := @parameter0: ucar.ma2.Array;

        r2 := @parameter1: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        $r3 = virtualinvoke r2.<ucar.ma2.Array: int[] getShape()>();

        $z0 = staticinvoke <ucar.ma2.MAMath: boolean conformable(int[],int[])>($r1, $r3);

        return $z0;
    }

    public static boolean conformable(int[], int[])
    {
        int[] r0, r1;
        int $i0, $i1, i2, i3, $i4, $i5, $i6, $i7, i8, i9;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        $i0 = staticinvoke <ucar.ma2.MAMath: int reducedRank(int[])>(r0);

        $i1 = staticinvoke <ucar.ma2.MAMath: int reducedRank(int[])>(r1);

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i2 = lengthof r0;

        i3 = lengthof r1;

        i8 = 0;

        i9 = 0;

     label2:
        if i9 >= i2 goto label7;

        $i4 = r0[i9];

        if $i4 != 1 goto label3;

        goto label6;

     label3:
        if i8 >= i3 goto label4;

        $i7 = r1[i8];

        if $i7 != 1 goto label4;

        i8 = i8 + 1;

        goto label3;

     label4:
        $i6 = r0[i9];

        $i5 = r1[i8];

        if $i6 == $i5 goto label5;

        return 0;

     label5:
        i8 = i8 + 1;

     label6:
        i9 = i9 + 1;

        goto label2;

     label7:
        return 1;
    }

    public static ucar.ma2.Array convertUnsigned(ucar.ma2.Array)
    {
        byte $b4;
        int[] $r14, $r18, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        ucar.ma2.DataType $r13, $r17, $r21;
        java.lang.StringBuilder $r8, $r9, $r11;
        long $l1;
        short $s2, $s5;
        int $i0, $i3;
        java.lang.String $r12;
        ucar.ma2.IndexIterator $r16, $r20, $r24;
        java.lang.IllegalArgumentException $r7;
        ucar.ma2.Array r0, $r15, $r19, $r23;
        java.lang.Class $r1, $r2, $r3, $r4, $r5, $r6, $r10;

        r0 := @parameter0: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r2 = <java.lang.Byte: java.lang.Class TYPE>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r21 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        $r22 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        $r23 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r21, $r22);

        $r24 = virtualinvoke $r23.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        virtualinvoke r0.<ucar.ma2.Array: void resetLocalIterator()>();

     label1:
        $z5 = virtualinvoke r0.<ucar.ma2.Array: boolean hasNext()>();

        if $z5 == 0 goto label2;

        $b4 = virtualinvoke r0.<ucar.ma2.Array: byte nextByte()>();

        $s5 = staticinvoke <ucar.ma2.DataType: short unsignedByteToShort(byte)>($b4);

        interfaceinvoke $r24.<ucar.ma2.IndexIterator: void setShortNext(short)>($s5);

        goto label1;

     label2:
        return $r23;

     label3:
        $r3 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label6;

        $r17 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        $r18 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        $r19 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r17, $r18);

        $r20 = virtualinvoke $r19.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        virtualinvoke r0.<ucar.ma2.Array: void resetLocalIterator()>();

     label4:
        $z4 = virtualinvoke r0.<ucar.ma2.Array: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $s2 = virtualinvoke r0.<ucar.ma2.Array: short nextShort()>();

        $i3 = staticinvoke <ucar.ma2.DataType: int unsignedShortToInt(short)>($s2);

        interfaceinvoke $r20.<ucar.ma2.IndexIterator: void setIntNext(int)>($i3);

        goto label4;

     label5:
        return $r19;

     label6:
        $r5 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        $z2 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label9;

        $r13 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        $r14 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        $r15 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r13, $r14);

        $r16 = virtualinvoke $r15.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        virtualinvoke r0.<ucar.ma2.Array: void resetLocalIterator()>();

     label7:
        $z3 = virtualinvoke r0.<ucar.ma2.Array: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $i0 = virtualinvoke r0.<ucar.ma2.Array: int nextInt()>();

        $l1 = staticinvoke <ucar.ma2.DataType: long unsignedIntToLong(int)>($i0);

        interfaceinvoke $r16.<ucar.ma2.IndexIterator: void setLongNext(long)>($l1);

        goto label7;

     label8:
        return $r15;

     label9:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant convertUnsigned type= ");

        $r10 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;
    }

    public static ucar.ma2.Array convert(ucar.ma2.Array, ucar.ma2.DataType)
    {
        ucar.ma2.IndexIterator $r6, $r7;
        ucar.ma2.DataType r1;
        ucar.ma2.Array r0, $r5;
        int[] $r4;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @parameter0: ucar.ma2.Array;

        r1 := @parameter1: ucar.ma2.DataType;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r3 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        return r0;

     label2:
        $r4 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        $r5 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>(r1, $r4);

        $r6 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r7 = virtualinvoke $r5.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        staticinvoke <ucar.ma2.MAMath: void copy(ucar.ma2.DataType,ucar.ma2.IndexIterator,ucar.ma2.IndexIterator)>(r1, $r6, $r7);

        return $r5;
    }

    public static void copy(ucar.ma2.DataType, ucar.ma2.IndexIterator, ucar.ma2.IndexIterator) throws java.lang.IllegalArgumentException
    {
        byte $b2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        ucar.ma2.DataType r0, $r1, $r2, $r3, $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        float $f0;
        long $l4;
        short $s1;
        int $i0;
        double $d0;
        ucar.ma2.IndexIterator r5, r6;
        char $c3;
        java.lang.Object $r14;

        r0 := @parameter0: ucar.ma2.DataType;

        r5 := @parameter1: ucar.ma2.IndexIterator;

        r6 := @parameter2: ucar.ma2.IndexIterator;

        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if r0 != $r1 goto label02;

     label01:
        $z6 = interfaceinvoke r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z6 == 0 goto label17;

        $d0 = interfaceinvoke r5.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        interfaceinvoke r6.<ucar.ma2.IndexIterator: void setDoubleNext(double)>($d0);

        goto label01;

     label02:
        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if r0 != $r2 goto label04;

     label03:
        $z5 = interfaceinvoke r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z5 == 0 goto label17;

        $f0 = interfaceinvoke r5.<ucar.ma2.IndexIterator: float getFloatNext()>();

        interfaceinvoke r6.<ucar.ma2.IndexIterator: void setFloatNext(float)>($f0);

        goto label03;

     label04:
        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if r0 != $r3 goto label06;

     label05:
        $z4 = interfaceinvoke r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z4 == 0 goto label17;

        $l4 = interfaceinvoke r5.<ucar.ma2.IndexIterator: long getLongNext()>();

        interfaceinvoke r6.<ucar.ma2.IndexIterator: void setLongNext(long)>($l4);

        goto label05;

     label06:
        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if r0 == $r4 goto label07;

        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if r0 != $r7 goto label08;

     label07:
        $z7 = interfaceinvoke r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z7 == 0 goto label17;

        $i0 = interfaceinvoke r5.<ucar.ma2.IndexIterator: int getIntNext()>();

        interfaceinvoke r6.<ucar.ma2.IndexIterator: void setIntNext(int)>($i0);

        goto label07;

     label08:
        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if r0 == $r8 goto label09;

        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if r0 != $r9 goto label10;

     label09:
        $z8 = interfaceinvoke r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z8 == 0 goto label17;

        $s1 = interfaceinvoke r5.<ucar.ma2.IndexIterator: short getShortNext()>();

        interfaceinvoke r6.<ucar.ma2.IndexIterator: void setShortNext(short)>($s1);

        goto label09;

     label10:
        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if r0 != $r10 goto label12;

     label11:
        $z3 = interfaceinvoke r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z3 == 0 goto label17;

        $c3 = interfaceinvoke r5.<ucar.ma2.IndexIterator: char getCharNext()>();

        interfaceinvoke r6.<ucar.ma2.IndexIterator: void setCharNext(char)>($c3);

        goto label11;

     label12:
        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if r0 == $r11 goto label13;

        $r12 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if r0 != $r12 goto label14;

     label13:
        $z9 = interfaceinvoke r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z9 == 0 goto label17;

        $b2 = interfaceinvoke r5.<ucar.ma2.IndexIterator: byte getByteNext()>();

        interfaceinvoke r6.<ucar.ma2.IndexIterator: void setByteNext(byte)>($b2);

        goto label13;

     label14:
        $r13 = <ucar.ma2.DataType: ucar.ma2.DataType BOOLEAN>;

        if r0 != $r13 goto label16;

     label15:
        $z1 = interfaceinvoke r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label17;

        $z2 = interfaceinvoke r5.<ucar.ma2.IndexIterator: boolean getBooleanNext()>();

        interfaceinvoke r6.<ucar.ma2.IndexIterator: void setBooleanNext(boolean)>($z2);

        goto label15;

     label16:
        $z0 = interfaceinvoke r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label17;

        $r14 = interfaceinvoke r5.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        interfaceinvoke r6.<ucar.ma2.IndexIterator: void setObjectNext(java.lang.Object)>($r14);

        goto label16;

     label17:
        return;
    }

    public static void copy(ucar.ma2.Array, ucar.ma2.Array) throws java.lang.IllegalArgumentException
    {
        ucar.ma2.Array r0, r10;
        java.lang.Class $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r10 := @parameter0: ucar.ma2.Array;

        r0 := @parameter1: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        if $r1 != $r2 goto label1;

        staticinvoke <ucar.ma2.MAMath: void copyDouble(ucar.ma2.Array,ucar.ma2.Array)>(r10, r0);

        goto label9;

     label1:
        $r3 = <java.lang.Float: java.lang.Class TYPE>;

        if $r1 != $r3 goto label2;

        staticinvoke <ucar.ma2.MAMath: void copyFloat(ucar.ma2.Array,ucar.ma2.Array)>(r10, r0);

        goto label9;

     label2:
        $r4 = <java.lang.Long: java.lang.Class TYPE>;

        if $r1 != $r4 goto label3;

        staticinvoke <ucar.ma2.MAMath: void copyLong(ucar.ma2.Array,ucar.ma2.Array)>(r10, r0);

        goto label9;

     label3:
        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r1 != $r5 goto label4;

        staticinvoke <ucar.ma2.MAMath: void copyInt(ucar.ma2.Array,ucar.ma2.Array)>(r10, r0);

        goto label9;

     label4:
        $r6 = <java.lang.Short: java.lang.Class TYPE>;

        if $r1 != $r6 goto label5;

        staticinvoke <ucar.ma2.MAMath: void copyShort(ucar.ma2.Array,ucar.ma2.Array)>(r10, r0);

        goto label9;

     label5:
        $r7 = <java.lang.Character: java.lang.Class TYPE>;

        if $r1 != $r7 goto label6;

        staticinvoke <ucar.ma2.MAMath: void copyChar(ucar.ma2.Array,ucar.ma2.Array)>(r10, r0);

        goto label9;

     label6:
        $r8 = <java.lang.Byte: java.lang.Class TYPE>;

        if $r1 != $r8 goto label7;

        staticinvoke <ucar.ma2.MAMath: void copyByte(ucar.ma2.Array,ucar.ma2.Array)>(r10, r0);

        goto label9;

     label7:
        $r9 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r1 != $r9 goto label8;

        staticinvoke <ucar.ma2.MAMath: void copyBoolean(ucar.ma2.Array,ucar.ma2.Array)>(r10, r0);

        goto label9;

     label8:
        staticinvoke <ucar.ma2.MAMath: void copyObject(ucar.ma2.Array,ucar.ma2.Array)>(r10, r0);

     label9:
        return;
    }

    public static void copyDouble(ucar.ma2.Array, ucar.ma2.Array) throws java.lang.IllegalArgumentException
    {
        ucar.ma2.IndexIterator $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array r0, r1;
        boolean $z0, $z1;
        double $d0;

        r1 := @parameter0: ucar.ma2.Array;

        r0 := @parameter1: ucar.ma2.Array;

        $z0 = staticinvoke <ucar.ma2.MAMath: boolean conformable(ucar.ma2.Array,ucar.ma2.Array)>(r0, r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("copy arrays are not conformable");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r3 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $d0 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        interfaceinvoke $r3.<ucar.ma2.IndexIterator: void setDoubleNext(double)>($d0);

        goto label2;

     label3:
        return;
    }

    public static void copyFloat(ucar.ma2.Array, ucar.ma2.Array) throws java.lang.IllegalArgumentException
    {
        ucar.ma2.IndexIterator $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array r0, r1;
        float $f0;
        boolean $z0, $z1;

        r1 := @parameter0: ucar.ma2.Array;

        r0 := @parameter1: ucar.ma2.Array;

        $z0 = staticinvoke <ucar.ma2.MAMath: boolean conformable(ucar.ma2.Array,ucar.ma2.Array)>(r0, r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("copy arrays are not conformable");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r3 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $f0 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: float getFloatNext()>();

        interfaceinvoke $r3.<ucar.ma2.IndexIterator: void setFloatNext(float)>($f0);

        goto label2;

     label3:
        return;
    }

    public static void copyLong(ucar.ma2.Array, ucar.ma2.Array) throws java.lang.IllegalArgumentException
    {
        ucar.ma2.IndexIterator $r2, $r3;
        long $l0;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array r0, r1;
        boolean $z0, $z1;

        r1 := @parameter0: ucar.ma2.Array;

        r0 := @parameter1: ucar.ma2.Array;

        $z0 = staticinvoke <ucar.ma2.MAMath: boolean conformable(ucar.ma2.Array,ucar.ma2.Array)>(r0, r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("copy arrays are not conformable");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r3 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $l0 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: long getLongNext()>();

        interfaceinvoke $r3.<ucar.ma2.IndexIterator: void setLongNext(long)>($l0);

        goto label2;

     label3:
        return;
    }

    public static void copyInt(ucar.ma2.Array, ucar.ma2.Array) throws java.lang.IllegalArgumentException
    {
        ucar.ma2.IndexIterator $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array r0, r1;
        int $i0;
        boolean $z0, $z1;

        r1 := @parameter0: ucar.ma2.Array;

        r0 := @parameter1: ucar.ma2.Array;

        $z0 = staticinvoke <ucar.ma2.MAMath: boolean conformable(ucar.ma2.Array,ucar.ma2.Array)>(r0, r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("copy arrays are not conformable");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r3 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $i0 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: int getIntNext()>();

        interfaceinvoke $r3.<ucar.ma2.IndexIterator: void setIntNext(int)>($i0);

        goto label2;

     label3:
        return;
    }

    public static void copyShort(ucar.ma2.Array, ucar.ma2.Array) throws java.lang.IllegalArgumentException
    {
        ucar.ma2.IndexIterator $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array r0, r1;
        short $s0;
        boolean $z0, $z1;

        r1 := @parameter0: ucar.ma2.Array;

        r0 := @parameter1: ucar.ma2.Array;

        $z0 = staticinvoke <ucar.ma2.MAMath: boolean conformable(ucar.ma2.Array,ucar.ma2.Array)>(r0, r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("copy arrays are not conformable");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r3 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $s0 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: short getShortNext()>();

        interfaceinvoke $r3.<ucar.ma2.IndexIterator: void setShortNext(short)>($s0);

        goto label2;

     label3:
        return;
    }

    public static void copyChar(ucar.ma2.Array, ucar.ma2.Array) throws java.lang.IllegalArgumentException
    {
        ucar.ma2.IndexIterator $r2, $r3;
        char $c0;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array r0, r1;
        boolean $z0, $z1;

        r1 := @parameter0: ucar.ma2.Array;

        r0 := @parameter1: ucar.ma2.Array;

        $z0 = staticinvoke <ucar.ma2.MAMath: boolean conformable(ucar.ma2.Array,ucar.ma2.Array)>(r0, r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("copy arrays are not conformable");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r3 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $c0 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: char getCharNext()>();

        interfaceinvoke $r3.<ucar.ma2.IndexIterator: void setCharNext(char)>($c0);

        goto label2;

     label3:
        return;
    }

    public static void copyByte(ucar.ma2.Array, ucar.ma2.Array) throws java.lang.IllegalArgumentException
    {
        ucar.ma2.IndexIterator $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array r0, r1;
        byte $b0;
        boolean $z0, $z1;

        r1 := @parameter0: ucar.ma2.Array;

        r0 := @parameter1: ucar.ma2.Array;

        $z0 = staticinvoke <ucar.ma2.MAMath: boolean conformable(ucar.ma2.Array,ucar.ma2.Array)>(r0, r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("copy arrays are not conformable");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r3 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $b0 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: byte getByteNext()>();

        interfaceinvoke $r3.<ucar.ma2.IndexIterator: void setByteNext(byte)>($b0);

        goto label2;

     label3:
        return;
    }

    public static void copyBoolean(ucar.ma2.Array, ucar.ma2.Array) throws java.lang.IllegalArgumentException
    {
        ucar.ma2.IndexIterator $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array r0, r1;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: ucar.ma2.Array;

        r0 := @parameter1: ucar.ma2.Array;

        $z0 = staticinvoke <ucar.ma2.MAMath: boolean conformable(ucar.ma2.Array,ucar.ma2.Array)>(r0, r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("copy arrays are not conformable");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r3 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $z2 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: boolean getBooleanNext()>();

        interfaceinvoke $r3.<ucar.ma2.IndexIterator: void setBooleanNext(boolean)>($z2);

        goto label2;

     label3:
        return;
    }

    public static void copyObject(ucar.ma2.Array, ucar.ma2.Array) throws java.lang.IllegalArgumentException
    {
        ucar.ma2.IndexIterator $r2, $r3;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array r0, r1;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r1 := @parameter0: ucar.ma2.Array;

        r0 := @parameter1: ucar.ma2.Array;

        $z0 = staticinvoke <ucar.ma2.MAMath: boolean conformable(ucar.ma2.Array,ucar.ma2.Array)>(r0, r1);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("copy arrays are not conformable");

        throw $r5;

     label1:
        $r2 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r3 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        interfaceinvoke $r3.<ucar.ma2.IndexIterator: void setObjectNext(java.lang.Object)>($r4);

        goto label2;

     label3:
        return;
    }

    public static int reducedRank(int[])
    {
        int[] r0;
        int $i0, $i1, i2, i3;

        r0 := @parameter0: int[];

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label3;

        $i1 = r0[i3];

        if $i1 <= 1 goto label2;

        i2 = i2 + 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    public static double getMinimum(ucar.ma2.Array)
    {
        ucar.ma2.IndexIterator $r1;
        ucar.ma2.Array r0;
        byte $b0;
        int $i1;
        double $d0, d1;
        boolean $z0, $z1;

        r0 := @parameter0: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        d1 = 1.7976931348623157E308;

     label1:
        $z1 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $d0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $b0 = $d0 cmpg d1;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label3;

        d1 = $d0;

     label3:
        goto label1;

     label4:
        return d1;
    }

    public static double getMaximum(ucar.ma2.Array)
    {
        ucar.ma2.IndexIterator $r1;
        ucar.ma2.Array r0;
        byte $b0;
        int $i1;
        double $d0, d1;
        boolean $z0, $z1;

        r0 := @parameter0: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        d1 = -1.7976931348623157E308;

     label1:
        $z1 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $d0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $b0 = $d0 cmpl d1;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label3;

        d1 = $d0;

     label3:
        goto label1;

     label4:
        return d1;
    }

    public static ucar.ma2.MAMath$MinMax getMinMax(ucar.ma2.Array)
    {
        ucar.ma2.MAMath$MinMax $r3;
        ucar.ma2.IndexIterator $r1;
        ucar.ma2.Array r0;
        byte $b0, $b1;
        int $i2, $i3;
        double $d0, d1, d2;
        boolean $z0, $z1;

        r0 := @parameter0: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        d1 = -1.7976931348623157E308;

        d2 = 1.7976931348623157E308;

     label1:
        $z1 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $d0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $b0 = $d0 cmpl d1;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label3;

        d1 = $d0;

     label3:
        $b1 = $d0 cmpg d2;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label4;

        d2 = $d0;

     label4:
        goto label1;

     label5:
        $r3 = new ucar.ma2.MAMath$MinMax;

        specialinvoke $r3.<ucar.ma2.MAMath$MinMax: void <init>(double,double)>(d2, d1);

        return $r3;
    }

    public static double getMinimumSkipMissingData(ucar.ma2.Array, double)
    {
        ucar.ma2.IndexIterator $r1;
        ucar.ma2.Array r0;
        byte $b0, $b1;
        int $i2;
        boolean $z0;
        double $d0, d1, d2;

        r0 := @parameter0: ucar.ma2.Array;

        d1 := @parameter1: double;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        d2 = 1.7976931348623157E308;

     label1:
        $z0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $d0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $b0 = $d0 cmpl d1;

        if $b0 == 0 goto label2;

        $b1 = $d0 cmpg d2;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label2;

        d2 = $d0;

     label2:
        goto label1;

     label3:
        return d2;
    }

    public static double getMaximumSkipMissingData(ucar.ma2.Array, double)
    {
        ucar.ma2.IndexIterator $r1;
        ucar.ma2.Array r0;
        byte $b0, $b1;
        int $i2;
        boolean $z0;
        double $d0, d1, d2;

        r0 := @parameter0: ucar.ma2.Array;

        d1 := @parameter1: double;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        d2 = -1.7976931348623157E308;

     label1:
        $z0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $d0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $b0 = $d0 cmpl d1;

        if $b0 == 0 goto label2;

        $b1 = $d0 cmpl d2;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label2;

        d2 = $d0;

     label2:
        goto label1;

     label3:
        return d2;
    }

    public static ucar.ma2.MAMath$MinMax getMinMaxSkipMissingData(ucar.ma2.Array, double)
    {
        ucar.ma2.MAMath$MinMax $r3;
        ucar.ma2.IndexIterator $r1;
        ucar.ma2.Array r0;
        byte $b0, $b1, $b2;
        int $i3, $i4;
        double $d0, d1, d2, d3;
        boolean $z0;

        r0 := @parameter0: ucar.ma2.Array;

        d1 := @parameter1: double;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        d2 = -1.7976931348623157E308;

        d3 = 1.7976931348623157E308;

     label1:
        $z0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $d0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $b0 = $d0 cmpl d1;

        if $b0 != 0 goto label2;

        goto label1;

     label2:
        $b1 = $d0 cmpl d2;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label3;

        d2 = $d0;

     label3:
        $b2 = $d0 cmpg d3;

        $i4 = (int) $b2;

        if $i4 >= 0 goto label4;

        d3 = $d0;

     label4:
        goto label1;

     label5:
        $r3 = new ucar.ma2.MAMath$MinMax;

        specialinvoke $r3.<ucar.ma2.MAMath$MinMax: void <init>(double,double)>(d3, d2);

        return $r3;
    }

    public static void setDouble(ucar.ma2.Array, double)
    {
        ucar.ma2.IndexIterator $r1;
        ucar.ma2.Array r0;
        boolean $z0;
        double d0;

        r0 := @parameter0: ucar.ma2.Array;

        d0 := @parameter1: double;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r1.<ucar.ma2.IndexIterator: void setDoubleNext(double)>(d0);

        goto label1;

     label2:
        return;
    }

    public static double sumDouble(ucar.ma2.Array)
    {
        ucar.ma2.IndexIterator $r1;
        ucar.ma2.Array r0;
        boolean $z0;
        double $d0, d1;

        r0 := @parameter0: ucar.ma2.Array;

        d1 = 0.0;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $d0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        d1 = d1 + $d0;

        goto label1;

     label2:
        return d1;
    }

    public static double sumDoubleSkipMissingData(ucar.ma2.Array, double)
    {
        ucar.ma2.IndexIterator $r1;
        ucar.ma2.Array r0;
        byte $b0;
        double $d0, d1, d2;
        boolean $z0, $z1;

        r0 := @parameter0: ucar.ma2.Array;

        d1 := @parameter1: double;

        d2 = 0.0;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z1 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $d0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $b0 = $d0 cmpl d1;

        if $b0 == 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        d2 = d2 + $d0;

        goto label1;

     label3:
        return d2;
    }

    public static ucar.ma2.MAMath$ScaleOffset calcScaleOffsetSkipMissingData(ucar.ma2.Array, double, int, boolean)
    {
        long l5, l6;
        ucar.ma2.MAMath$ScaleOffset $r2, $r3;
        int i0, $i1, $i2, $i3, $i4;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13, d14, d15;
        boolean z0;
        ucar.ma2.MAMath$MinMax $r1;
        ucar.ma2.Array r0;

        r0 := @parameter0: ucar.ma2.Array;

        d0 := @parameter1: double;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r1 = staticinvoke <ucar.ma2.MAMath: ucar.ma2.MAMath$MinMax getMinMaxSkipMissingData(ucar.ma2.Array,double)>(r0, d0);

        if z0 == 0 goto label1;

        $i3 = 1 << i0;

        $i4 = $i3 - 1;

        l5 = (long) $i4;

        d12 = $r1.<ucar.ma2.MAMath$MinMax: double min>;

        $d9 = $r1.<ucar.ma2.MAMath$MinMax: double max>;

        $d8 = $r1.<ucar.ma2.MAMath$MinMax: double min>;

        $d11 = $d9 - $d8;

        $d10 = (double) l5;

        d13 = $d11 / $d10;

        $r3 = new ucar.ma2.MAMath$ScaleOffset;

        specialinvoke $r3.<ucar.ma2.MAMath$ScaleOffset: void <init>(double,double)>(d13, d12);

        return $r3;

     label1:
        $i1 = 1 << i0;

        $i2 = $i1 - 2;

        l6 = (long) $i2;

        $d2 = $r1.<ucar.ma2.MAMath$MinMax: double max>;

        $d1 = $r1.<ucar.ma2.MAMath$MinMax: double min>;

        $d3 = $d2 + $d1;

        d14 = $d3 / 2.0;

        $d5 = $r1.<ucar.ma2.MAMath$MinMax: double max>;

        $d4 = $r1.<ucar.ma2.MAMath$MinMax: double min>;

        $d7 = $d5 - $d4;

        $d6 = (double) l6;

        d15 = $d7 / $d6;

        $r2 = new ucar.ma2.MAMath$ScaleOffset;

        specialinvoke $r2.<ucar.ma2.MAMath$ScaleOffset: void <init>(double,double)>(d15, d14);

        return $r2;
    }

    public static ucar.ma2.Array convert2packed(ucar.ma2.Array, double, int, boolean, ucar.ma2.DataType)
    {
        ucar.ma2.IndexIterator $r5;
        ucar.ma2.DataType r2;
        ucar.ma2.Array r0, $r4;
        ucar.ma2.MAMath$ScaleOffset $r1;
        int[] $r3;
        int i0;
        double d0, $d1, $d2, $d3, $d4, d5;
        boolean z0, $z1;

        r0 := @parameter0: ucar.ma2.Array;

        d0 := @parameter1: double;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r2 := @parameter4: ucar.ma2.DataType;

        $r1 = staticinvoke <ucar.ma2.MAMath: ucar.ma2.MAMath$ScaleOffset calcScaleOffsetSkipMissingData(ucar.ma2.Array,double,int,boolean)>(r0, d0, i0, z0);

        $r3 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        $r4 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>(r2, $r3);

        $r5 = virtualinvoke $r4.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z1 = virtualinvoke r0.<ucar.ma2.Array: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $d1 = virtualinvoke r0.<ucar.ma2.Array: double nextDouble()>();

        $d2 = $r1.<ucar.ma2.MAMath$ScaleOffset: double offset>;

        $d4 = $d1 - $d2;

        $d3 = $r1.<ucar.ma2.MAMath$ScaleOffset: double scale>;

        d5 = $d4 / $d3;

        interfaceinvoke $r5.<ucar.ma2.IndexIterator: void setDoubleNext(double)>(d5);

        goto label1;

     label2:
        return $r4;
    }

    public static ucar.ma2.Array convert2Unpacked(ucar.ma2.Array, ucar.ma2.MAMath$ScaleOffset)
    {
        ucar.ma2.IndexIterator $r4;
        ucar.ma2.DataType $r1;
        ucar.ma2.Array r0, $r3;
        ucar.ma2.MAMath$ScaleOffset r5;
        int[] $r2;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @parameter0: ucar.ma2.Array;

        r5 := @parameter1: ucar.ma2.MAMath$ScaleOffset;

        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        $r2 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        $r3 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r1, $r2);

        $r4 = virtualinvoke $r3.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = virtualinvoke r0.<ucar.ma2.Array: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $d0 = virtualinvoke r0.<ucar.ma2.Array: double nextDouble()>();

        $d1 = r5.<ucar.ma2.MAMath$ScaleOffset: double scale>;

        $d3 = $d0 * $d1;

        $d2 = r5.<ucar.ma2.MAMath$ScaleOffset: double offset>;

        $d4 = $d3 + $d2;

        interfaceinvoke $r4.<ucar.ma2.IndexIterator: void setDoubleNext(double)>($d4);

        goto label1;

     label2:
        return $r3;
    }

    public static boolean isEqual(ucar.ma2.Array, ucar.ma2.Array)
    {
        byte $b2, $b5, $b6, $b7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        ucar.ma2.DataType $r3, $r6, $r7, $r8, $r9, $r10, $r11;
        float $f0, $f1;
        long $l0, $l1, $l3, $l4;
        short $s8, $s9;
        int $i10, $i11, $i12, $i13, $i14, $i15;
        double $d0, $d1, $d2, $d3;
        ucar.ma2.IndexIterator $r4, $r5;
        ucar.ma2.Array r0, r1;
        java.lang.Class $r2;

        r0 := @parameter0: ucar.ma2.Array;

        r1 := @parameter1: ucar.ma2.Array;

        $l0 = virtualinvoke r0.<ucar.ma2.Array: long getSize()>();

        $l1 = virtualinvoke r1.<ucar.ma2.Array: long getSize()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label01;

        return 0;

     label01:
        $r2 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r3 = staticinvoke <ucar.ma2.DataType: ucar.ma2.DataType getType(java.lang.Class)>($r2);

        $r4 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r5 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r3 != $r6 goto label05;

     label02:
        $z13 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z13 == 0 goto label21;

        $z14 = interfaceinvoke $r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z14 == 0 goto label21;

        $d2 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $d3 = interfaceinvoke $r5.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $z15 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        if $z15 == 0 goto label03;

        $z17 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d3);

        if $z17 != 0 goto label04;

     label03:
        $z16 = staticinvoke <ucar.nc2.util.Misc: boolean closeEnough(double,double,double)>($d2, $d3, 1.0E-8);

        if $z16 != 0 goto label04;

        return 0;

     label04:
        goto label02;

     label05:
        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r3 != $r7 goto label09;

     label06:
        $z8 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z8 == 0 goto label21;

        $z9 = interfaceinvoke $r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z9 == 0 goto label21;

        $f0 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: float getFloatNext()>();

        $f1 = interfaceinvoke $r5.<ucar.ma2.IndexIterator: float getFloatNext()>();

        $z10 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z10 == 0 goto label07;

        $z12 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f1);

        if $z12 != 0 goto label08;

     label07:
        $d1 = (double) $f0;

        $d0 = (double) $f1;

        $z11 = staticinvoke <ucar.nc2.util.Misc: boolean closeEnough(double,double,double)>($d1, $d0, 1.0E-5);

        if $z11 != 0 goto label08;

        return 0;

     label08:
        goto label06;

     label09:
        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r3 != $r8 goto label12;

     label10:
        $z6 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z6 == 0 goto label21;

        $z7 = interfaceinvoke $r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z7 == 0 goto label21;

        $i10 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: int getIntNext()>();

        $i11 = interfaceinvoke $r5.<ucar.ma2.IndexIterator: int getIntNext()>();

        if $i10 == $i11 goto label11;

        return 0;

     label11:
        goto label10;

     label12:
        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r3 != $r9 goto label15;

     label13:
        $z4 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z4 == 0 goto label21;

        $z5 = interfaceinvoke $r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z5 == 0 goto label21;

        $s8 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: short getShortNext()>();

        $s9 = interfaceinvoke $r5.<ucar.ma2.IndexIterator: short getShortNext()>();

        $i12 = (int) $s8;

        $i13 = (int) $s9;

        if $i12 == $i13 goto label14;

        return 0;

     label14:
        goto label13;

     label15:
        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r3 != $r10 goto label18;

     label16:
        $z2 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z2 == 0 goto label21;

        $z3 = interfaceinvoke $r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z3 == 0 goto label21;

        $b6 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: byte getByteNext()>();

        $b7 = interfaceinvoke $r5.<ucar.ma2.IndexIterator: byte getByteNext()>();

        $i14 = (int) $b6;

        $i15 = (int) $b7;

        if $i14 == $i15 goto label17;

        return 0;

     label17:
        goto label16;

     label18:
        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if $r3 != $r11 goto label21;

     label19:
        $z0 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label21;

        $z1 = interfaceinvoke $r5.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label21;

        $l3 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: long getLongNext()>();

        $l4 = interfaceinvoke $r5.<ucar.ma2.IndexIterator: long getLongNext()>();

        $b5 = $l3 cmp $l4;

        if $b5 == 0 goto label20;

        return 0;

     label20:
        goto label19;

     label21:
        return 1;
    }
}
