public abstract class org.springframework.jndi.JndiObjectLocator extends org.springframework.jndi.JndiLocatorSupport implements org.springframework.beans.factory.InitializingBean
{
    private java.lang.String jndiName;
    private java.lang.Class expectedType;

    public void <init>()
    {
        org.springframework.jndi.JndiObjectLocator r0;

        r0 := @this: org.springframework.jndi.JndiObjectLocator;

        specialinvoke r0.<org.springframework.jndi.JndiLocatorSupport: void <init>()>();

        return;
    }

    public void setJndiName(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.jndi.JndiObjectLocator r0;

        r0 := @this: org.springframework.jndi.JndiObjectLocator;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.jndi.JndiObjectLocator: java.lang.String jndiName> = r1;

        return;
    }

    public java.lang.String getJndiName()
    {
        java.lang.String $r1;
        org.springframework.jndi.JndiObjectLocator r0;

        r0 := @this: org.springframework.jndi.JndiObjectLocator;

        $r1 = r0.<org.springframework.jndi.JndiObjectLocator: java.lang.String jndiName>;

        return $r1;
    }

    public void setExpectedType(java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.jndi.JndiObjectLocator r0;

        r0 := @this: org.springframework.jndi.JndiObjectLocator;

        r1 := @parameter0: java.lang.Class;

        r0.<org.springframework.jndi.JndiObjectLocator: java.lang.Class expectedType> = r1;

        return;
    }

    public java.lang.Class getExpectedType()
    {
        java.lang.Class $r1;
        org.springframework.jndi.JndiObjectLocator r0;

        r0 := @this: org.springframework.jndi.JndiObjectLocator;

        $r1 = r0.<org.springframework.jndi.JndiObjectLocator: java.lang.Class expectedType>;

        return $r1;
    }

    public void afterPropertiesSet() throws java.lang.IllegalArgumentException, javax.naming.NamingException
    {
        java.lang.String $r1;
        org.springframework.jndi.JndiObjectLocator r0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @this: org.springframework.jndi.JndiObjectLocator;

        $r1 = virtualinvoke r0.<org.springframework.jndi.JndiObjectLocator: java.lang.String getJndiName()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'jndiName\' is required");

        throw $r2;

     label1:
        return;
    }

    protected java.lang.Object lookup() throws javax.naming.NamingException
    {
        java.lang.Class $r2;
        java.lang.Object $r3;
        java.lang.String $r1;
        org.springframework.jndi.JndiObjectLocator r0;

        r0 := @this: org.springframework.jndi.JndiObjectLocator;

        $r1 = virtualinvoke r0.<org.springframework.jndi.JndiObjectLocator: java.lang.String getJndiName()>();

        $r2 = virtualinvoke r0.<org.springframework.jndi.JndiObjectLocator: java.lang.Class getExpectedType()>();

        $r3 = virtualinvoke r0.<org.springframework.jndi.JndiObjectLocator: java.lang.Object lookup(java.lang.String,java.lang.Class)>($r1, $r2);

        return $r3;
    }
}
