public final class kodkod.util.nodes.PrettyPrinter extends java.lang.Object
{

    public void <init>()
    {
        kodkod.util.nodes.PrettyPrinter r0;

        r0 := @this: kodkod.util.nodes.PrettyPrinter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String print(kodkod.ast.Node, int, int)
    {
        kodkod.util.nodes.PrettyPrinter$Formatter $r0;
        int i0, i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        kodkod.ast.Node r1;

        r1 := @parameter0: kodkod.ast.Node;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new kodkod.util.nodes.PrettyPrinter$Formatter;

        specialinvoke $r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void <init>(int,int)>(i0, i1);

        virtualinvoke r1.<kodkod.ast.Node: void accept(kodkod.ast.visitor.VoidVisitor)>($r0);

        $r2 = $r0.<kodkod.util.nodes.PrettyPrinter$Formatter: java.lang.StringBuilder tokens>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String print(kodkod.ast.Node, int)
    {
        int i0;
        java.lang.String $r1;
        kodkod.ast.Node r0;

        r0 := @parameter0: kodkod.ast.Node;

        i0 := @parameter1: int;

        $r1 = staticinvoke <kodkod.util.nodes.PrettyPrinter: java.lang.String print(kodkod.ast.Node,int,int)>(r0, i0, 80);

        return $r1;
    }

    public static java.lang.String print(java.util.Set, int)
    {
        int i0;
        java.util.Set r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Set;

        i0 := @parameter1: int;

        $r1 = staticinvoke <kodkod.util.nodes.PrettyPrinter: java.lang.String print(java.util.Set,int,int)>(r0, i0, 80);

        return $r1;
    }

    public static java.lang.String print(java.util.Set, int, int)
    {
        java.util.Iterator $r2;
        kodkod.util.nodes.PrettyPrinter$Formatter $r0;
        kodkod.ast.Formula r4;
        java.util.Set r1;
        int i0, i1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        boolean $z0;

        r1 := @parameter0: java.util.Set;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new kodkod.util.nodes.PrettyPrinter$Formatter;

        specialinvoke $r0.<kodkod.util.nodes.PrettyPrinter$Formatter: void <init>(int,int)>(i0, i1);

        $r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (kodkod.ast.Formula) $r3;

        virtualinvoke r4.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>($r0);

        staticinvoke <kodkod.util.nodes.PrettyPrinter$Formatter: void access$3(kodkod.util.nodes.PrettyPrinter$Formatter)>($r0);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r5 = $r0.<kodkod.util.nodes.PrettyPrinter$Formatter: java.lang.StringBuilder tokens>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
