public class org.bouncycastle.crypto.signers.ECNRSigner extends java.lang.Object implements org.bouncycastle.crypto.DSA
{
    private boolean forSigning;
    private org.bouncycastle.crypto.params.ECKeyParameters key;
    private java.security.SecureRandom random;

    public void <init>()
    {
        org.bouncycastle.crypto.signers.ECNRSigner r0;

        r0 := @this: org.bouncycastle.crypto.signers.ECNRSigner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.params.ECPublicKeyParameters $r2;
        org.bouncycastle.crypto.params.ECPrivateKeyParameters $r4, $r8;
        java.security.SecureRandom $r3, $r6;
        org.bouncycastle.crypto.params.ParametersWithRandom r5;
        org.bouncycastle.crypto.signers.ECNRSigner r0;
        boolean z0, $z1;
        org.bouncycastle.crypto.CipherParameters r1, $r7;

        r0 := @this: org.bouncycastle.crypto.signers.ECNRSigner;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        r0.<org.bouncycastle.crypto.signers.ECNRSigner: boolean forSigning> = z0;

        if z0 == 0 goto label2;

        $z1 = r1 instanceof org.bouncycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label1;

        r5 = (org.bouncycastle.crypto.params.ParametersWithRandom) r1;

        $r6 = virtualinvoke r5.<org.bouncycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.bouncycastle.crypto.signers.ECNRSigner: java.security.SecureRandom random> = $r6;

        $r7 = virtualinvoke r5.<org.bouncycastle.crypto.params.ParametersWithRandom: org.bouncycastle.crypto.CipherParameters getParameters()>();

        $r8 = (org.bouncycastle.crypto.params.ECPrivateKeyParameters) $r7;

        r0.<org.bouncycastle.crypto.signers.ECNRSigner: org.bouncycastle.crypto.params.ECKeyParameters key> = $r8;

        goto label3;

     label1:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.bouncycastle.crypto.signers.ECNRSigner: java.security.SecureRandom random> = $r3;

        $r4 = (org.bouncycastle.crypto.params.ECPrivateKeyParameters) r1;

        r0.<org.bouncycastle.crypto.signers.ECNRSigner: org.bouncycastle.crypto.params.ECKeyParameters key> = $r4;

        goto label3;

     label2:
        $r2 = (org.bouncycastle.crypto.params.ECPublicKeyParameters) r1;

        r0.<org.bouncycastle.crypto.signers.ECNRSigner: org.bouncycastle.crypto.params.ECKeyParameters key> = $r2;

     label3:
        return;
    }

    public java.math.BigInteger[] generateSignature(byte[])
    {
        byte[] r6;
        java.lang.IllegalStateException $r30;
        java.security.SecureRandom $r12;
        org.bouncycastle.crypto.DataLengthException $r29;
        org.bouncycastle.crypto.AsymmetricCipherKeyPair $r13;
        java.math.BigInteger $r4, $r5, $r17, $r18, $r19, $r20, $r22, $r25, $r26, $r27, $r28;
        org.bouncycastle.crypto.signers.ECNRSigner r0;
        boolean $z0, $z1;
        org.bouncycastle.crypto.CipherParameters $r14, $r23;
        org.bouncycastle.crypto.params.ECKeyParameters $r1, $r7;
        org.bouncycastle.math.ec.ECFieldElement $r16;
        org.bouncycastle.crypto.params.ECPublicKeyParameters $r21;
        org.bouncycastle.crypto.params.ECPrivateKeyParameters $r2, r8, $r24;
        org.bouncycastle.math.ec.ECPoint $r15;
        org.bouncycastle.crypto.params.ECDomainParameters $r3, $r11;
        org.bouncycastle.crypto.params.ECKeyGenerationParameters $r10;
        int $i0, $i1;
        org.bouncycastle.crypto.generators.ECKeyPairGenerator $r9;
        java.math.BigInteger[] r31;

        r0 := @this: org.bouncycastle.crypto.signers.ECNRSigner;

        r6 := @parameter0: byte[];

        $z0 = r0.<org.bouncycastle.crypto.signers.ECNRSigner: boolean forSigning>;

        if $z0 != 0 goto label1;

        $r30 = new java.lang.IllegalStateException;

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not initialised for signing");

        throw $r30;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.signers.ECNRSigner: org.bouncycastle.crypto.params.ECKeyParameters key>;

        $r2 = (org.bouncycastle.crypto.params.ECPrivateKeyParameters) $r1;

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.ECPrivateKeyParameters: org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        $r4 = virtualinvoke $r3.<org.bouncycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $i0 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();

        $r5 = new java.math.BigInteger;

        specialinvoke $r5.<java.math.BigInteger: void <init>(int,byte[])>(1, r6);

        $i1 = virtualinvoke $r5.<java.math.BigInteger: int bitLength()>();

        $r7 = r0.<org.bouncycastle.crypto.signers.ECNRSigner: org.bouncycastle.crypto.params.ECKeyParameters key>;

        r8 = (org.bouncycastle.crypto.params.ECPrivateKeyParameters) $r7;

        if $i1 <= $i0 goto label2;

        $r29 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r29.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for ECNR key.");

        throw $r29;

     label2:
        $r9 = new org.bouncycastle.crypto.generators.ECKeyPairGenerator;

        specialinvoke $r9.<org.bouncycastle.crypto.generators.ECKeyPairGenerator: void <init>()>();

        $r10 = new org.bouncycastle.crypto.params.ECKeyGenerationParameters;

        $r11 = virtualinvoke r8.<org.bouncycastle.crypto.params.ECPrivateKeyParameters: org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        $r12 = r0.<org.bouncycastle.crypto.signers.ECNRSigner: java.security.SecureRandom random>;

        specialinvoke $r10.<org.bouncycastle.crypto.params.ECKeyGenerationParameters: void <init>(org.bouncycastle.crypto.params.ECDomainParameters,java.security.SecureRandom)>($r11, $r12);

        virtualinvoke $r9.<org.bouncycastle.crypto.generators.ECKeyPairGenerator: void init(org.bouncycastle.crypto.KeyGenerationParameters)>($r10);

        $r13 = virtualinvoke $r9.<org.bouncycastle.crypto.generators.ECKeyPairGenerator: org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        $r14 = virtualinvoke $r13.<org.bouncycastle.crypto.AsymmetricCipherKeyPair: org.bouncycastle.crypto.CipherParameters getPublic()>();

        $r21 = (org.bouncycastle.crypto.params.ECPublicKeyParameters) $r14;

        $r15 = virtualinvoke $r21.<org.bouncycastle.crypto.params.ECPublicKeyParameters: org.bouncycastle.math.ec.ECPoint getQ()>();

        $r16 = virtualinvoke $r15.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECFieldElement getX()>();

        $r17 = virtualinvoke $r16.<org.bouncycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r18 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r5);

        $r19 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r4);

        $r20 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z1 = virtualinvoke $r19.<java.math.BigInteger: boolean equals(java.lang.Object)>($r20);

        if $z1 != 0 goto label2;

        $r22 = virtualinvoke r8.<org.bouncycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        $r23 = virtualinvoke $r13.<org.bouncycastle.crypto.AsymmetricCipherKeyPair: org.bouncycastle.crypto.CipherParameters getPrivate()>();

        $r24 = (org.bouncycastle.crypto.params.ECPrivateKeyParameters) $r23;

        $r25 = virtualinvoke $r24.<org.bouncycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        $r26 = virtualinvoke $r19.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r22);

        $r27 = virtualinvoke $r25.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r26);

        $r28 = virtualinvoke $r27.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r4);

        r31 = newarray (java.math.BigInteger)[2];

        r31[0] = $r19;

        r31[1] = $r28;

        return r31;
    }

    public boolean verifySignature(byte[], java.math.BigInteger, java.math.BigInteger)
    {
        byte[] r6;
        java.lang.IllegalStateException $r20;
        org.bouncycastle.math.ec.ECFieldElement $r15;
        org.bouncycastle.crypto.params.ECPublicKeyParameters r2;
        org.bouncycastle.math.ec.ECPoint $r12, $r13, $r14;
        org.bouncycastle.crypto.DataLengthException $r19;
        org.bouncycastle.crypto.params.ECDomainParameters $r3, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.math.BigInteger $r4, $r5, r7, $r8, r9, $r10, $r16, $r17, $r18;
        org.bouncycastle.crypto.signers.ECNRSigner r0;
        boolean $z0, $z1;
        org.bouncycastle.crypto.params.ECKeyParameters $r1;

        r0 := @this: org.bouncycastle.crypto.signers.ECNRSigner;

        r6 := @parameter0: byte[];

        r7 := @parameter1: java.math.BigInteger;

        r9 := @parameter2: java.math.BigInteger;

        $z0 = r0.<org.bouncycastle.crypto.signers.ECNRSigner: boolean forSigning>;

        if $z0 == 0 goto label1;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not initialised for verifying");

        throw $r20;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.signers.ECNRSigner: org.bouncycastle.crypto.params.ECKeyParameters key>;

        r2 = (org.bouncycastle.crypto.params.ECPublicKeyParameters) $r1;

        $r3 = virtualinvoke r2.<org.bouncycastle.crypto.params.ECPublicKeyParameters: org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        $r4 = virtualinvoke $r3.<org.bouncycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $i0 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();

        $r5 = new java.math.BigInteger;

        specialinvoke $r5.<java.math.BigInteger: void <init>(int,byte[])>(1, r6);

        $i1 = virtualinvoke $r5.<java.math.BigInteger: int bitLength()>();

        if $i1 <= $i0 goto label2;

        $r19 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r19.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for ECNR key.");

        throw $r19;

     label2:
        $r8 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $i2 = virtualinvoke r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r8);

        if $i2 < 0 goto label3;

        $i3 = virtualinvoke r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i3 < 0 goto label4;

     label3:
        return 0;

     label4:
        $r10 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $i4 = virtualinvoke r9.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r10);

        if $i4 < 0 goto label5;

        $i5 = virtualinvoke r9.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i5 < 0 goto label6;

     label5:
        return 0;

     label6:
        $r11 = virtualinvoke r2.<org.bouncycastle.crypto.params.ECPublicKeyParameters: org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        $r12 = virtualinvoke $r11.<org.bouncycastle.crypto.params.ECDomainParameters: org.bouncycastle.math.ec.ECPoint getG()>();

        $r13 = virtualinvoke r2.<org.bouncycastle.crypto.params.ECPublicKeyParameters: org.bouncycastle.math.ec.ECPoint getQ()>();

        $r14 = staticinvoke <org.bouncycastle.math.ec.ECAlgorithms: org.bouncycastle.math.ec.ECPoint sumOfTwoMultiplies(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)>($r12, r9, $r13, r7);

        $r15 = virtualinvoke $r14.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECFieldElement getX()>();

        $r16 = virtualinvoke $r15.<org.bouncycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r17 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r16);

        $r18 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r4);

        $z1 = virtualinvoke $r18.<java.math.BigInteger: boolean equals(java.lang.Object)>($r5);

        return $z1;
    }
}
