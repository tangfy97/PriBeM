public class org.codehaus.jackson.map.ser.std.MapSerializer extends org.codehaus.jackson.map.ser.std.ContainerSerializerBase implements org.codehaus.jackson.map.ResolvableSerializer
{
    protected static final org.codehaus.jackson.type.JavaType UNSPECIFIED_TYPE;
    protected final org.codehaus.jackson.map.BeanProperty _property;
    protected final java.util.HashSet _ignoredEntries;
    protected final boolean _valueTypeIsStatic;
    protected final org.codehaus.jackson.type.JavaType _keyType;
    protected final org.codehaus.jackson.type.JavaType _valueType;
    protected org.codehaus.jackson.map.JsonSerializer _keySerializer;
    protected org.codehaus.jackson.map.JsonSerializer _valueSerializer;
    protected final org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer;
    protected org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicValueSerializers;

    protected void <init>()
    {
        org.codehaus.jackson.map.ser.std.MapSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.MapSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.MapSerializer: void <init>(java.util.HashSet,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.BeanProperty)>(null, null, null, 0, null, null, null, null);

        return;
    }

    protected void <init>(java.util.HashSet, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.JsonSerializer r6, r7;
        org.codehaus.jackson.map.BeanProperty r1;
        java.util.HashSet r2;
        org.codehaus.jackson.map.ser.std.MapSerializer r0;
        org.codehaus.jackson.map.TypeSerializer r5;
        org.codehaus.jackson.type.JavaType r3, r4;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap $r8;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.MapSerializer;

        r2 := @parameter0: java.util.HashSet;

        r3 := @parameter1: org.codehaus.jackson.type.JavaType;

        r4 := @parameter2: org.codehaus.jackson.type.JavaType;

        z0 := @parameter3: boolean;

        r5 := @parameter4: org.codehaus.jackson.map.TypeSerializer;

        r6 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        r7 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        r1 := @parameter7: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.ContainerSerializerBase: void <init>(java.lang.Class,boolean)>(class "Ljava/util/Map;", 0);

        r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.BeanProperty _property> = r1;

        r0.<org.codehaus.jackson.map.ser.std.MapSerializer: java.util.HashSet _ignoredEntries> = r2;

        r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.type.JavaType _keyType> = r3;

        r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.type.JavaType _valueType> = r4;

        r0.<org.codehaus.jackson.map.ser.std.MapSerializer: boolean _valueTypeIsStatic> = z0;

        r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer> = r5;

        r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _keySerializer> = r6;

        r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer> = r7;

        $r8 = staticinvoke <org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap emptyMap()>();

        r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicValueSerializers> = $r8;

        return;
    }

    public org.codehaus.jackson.map.ser.std.ContainerSerializerBase _withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.JsonSerializer $r4, $r5, $r9, $r10;
        org.codehaus.jackson.map.BeanProperty $r3;
        java.util.HashSet $r8;
        org.codehaus.jackson.map.ser.std.MapSerializer $r0, r1;
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.type.JavaType $r6, $r7;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.ser.std.MapSerializer;

        r2 := @parameter0: org.codehaus.jackson.map.TypeSerializer;

        $r0 = new org.codehaus.jackson.map.ser.std.MapSerializer;

        $r8 = r1.<org.codehaus.jackson.map.ser.std.MapSerializer: java.util.HashSet _ignoredEntries>;

        $r7 = r1.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.type.JavaType _keyType>;

        $r6 = r1.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.type.JavaType _valueType>;

        $z0 = r1.<org.codehaus.jackson.map.ser.std.MapSerializer: boolean _valueTypeIsStatic>;

        $r5 = r1.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _keySerializer>;

        $r4 = r1.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        $r3 = r1.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.MapSerializer: void <init>(java.util.HashSet,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.BeanProperty)>($r8, $r7, $r6, $z0, r2, $r5, $r4, $r3);

        $r9 = r1.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        if $r9 == null goto label1;

        $r10 = r1.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        $r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer> = $r10;

     label1:
        return $r0;
    }

    public static org.codehaus.jackson.map.ser.std.MapSerializer construct(java.lang.String[], org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.map.ser.std.MapSerializer $r4;
        org.codehaus.jackson.type.JavaType r1;
        java.lang.String[] r0;
        org.codehaus.jackson.map.BeanProperty r3;
        boolean z0;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        z0 := @parameter2: boolean;

        r2 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        r3 := @parameter4: org.codehaus.jackson.map.BeanProperty;

        $r4 = staticinvoke <org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.ser.std.MapSerializer construct(java.lang.String[],org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.JsonSerializer)>(r0, r1, z0, r2, r3, null, null);

        return $r4;
    }

    public static org.codehaus.jackson.map.ser.std.MapSerializer construct(java.lang.String[], org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        java.lang.String[] r0;
        org.codehaus.jackson.map.JsonSerializer r4, r5;
        org.codehaus.jackson.map.BeanProperty r6;
        java.util.HashSet $r1;
        org.codehaus.jackson.map.TypeSerializer r3;
        org.codehaus.jackson.map.ser.std.MapSerializer $r10;
        org.codehaus.jackson.type.JavaType r2, $r7, r8, r9;
        boolean $z0, z1, $z2;

        r0 := @parameter0: java.lang.String[];

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        z1 := @parameter2: boolean;

        r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        r6 := @parameter4: org.codehaus.jackson.map.BeanProperty;

        r4 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        r5 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r1 = staticinvoke <org.codehaus.jackson.map.ser.std.MapSerializer: java.util.HashSet toSet(java.lang.String[])>(r0);

        if r2 != null goto label1;

        $r7 = <org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.type.JavaType UNSPECIFIED_TYPE>;

        r8 = $r7;

        r9 = $r7;

        goto label2;

     label1:
        r9 = virtualinvoke r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getKeyType()>();

        r8 = virtualinvoke r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

     label2:
        if z1 != 0 goto label5;

        if r8 == null goto label3;

        $z0 = virtualinvoke r8.<org.codehaus.jackson.type.JavaType: boolean isFinal()>();

        if $z0 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z1 = $z2;

     label5:
        $r10 = new org.codehaus.jackson.map.ser.std.MapSerializer;

        specialinvoke $r10.<org.codehaus.jackson.map.ser.std.MapSerializer: void <init>(java.util.HashSet,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.BeanProperty)>($r1, r9, r8, z1, r3, r4, r5, r6);

        return $r10;
    }

    private static java.util.HashSet toSet(java.lang.String[])
    {
        java.util.HashSet $r1;
        int $i0, $i1, i2, i3;
        java.lang.String[] r0;
        java.lang.String r2;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = new java.util.HashSet;

        $i1 = lengthof r0;

        specialinvoke $r1.<java.util.HashSet: void <init>(int)>($i1);

        i2 = lengthof r0;

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        r2 = r0[i3];

        virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>(r2);

        i3 = i3 + 1;

        goto label3;

     label4:
        return $r1;
    }

    public void serialize(java.util.Map, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.JsonGenerator r0;
        org.codehaus.jackson.map.ser.std.MapSerializer r2;
        java.util.Map r1;
        org.codehaus.jackson.map.SerializerProvider r4;
        org.codehaus.jackson.map.JsonSerializer $r3, $r5;
        boolean $z0;

        r2 := @this: org.codehaus.jackson.map.ser.std.MapSerializer;

        r1 := @parameter0: java.util.Map;

        r0 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r4 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeStartObject()>();

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r3 = r2.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        if $r3 == null goto label1;

        $r5 = r2.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        virtualinvoke r2.<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>(r1, r0, r4, $r5);

        goto label2;

     label1:
        virtualinvoke r2.<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, r0, r4);

     label2:
        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeEndObject()>();

        return;
    }

    public void serializeWithType(java.util.Map, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.SerializerProvider r5;
        org.codehaus.jackson.map.JsonSerializer $r4, $r6;
        org.codehaus.jackson.map.TypeSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.ser.std.MapSerializer r3;
        java.util.Map r1;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.ser.std.MapSerializer;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r5 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r0 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r4 = r3.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        if $r4 == null goto label1;

        $r6 = r3.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        virtualinvoke r3.<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>(r1, r2, r5, $r6);

        goto label2;

     label1:
        virtualinvoke r3.<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, r2, r5);

     label2:
        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        return;
    }

    public void serializeFields(java.util.Map, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.SerializerProvider r4;
        org.codehaus.jackson.map.TypeSerializer $r1;
        org.codehaus.jackson.JsonGenerator r13;
        java.util.Map r6;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r25;
        boolean $z0, z1, $z2, $z3, $z4, $z5;
        java.util.Set $r7;
        org.codehaus.jackson.map.JsonSerializer r2, $r15, $r19, r26;
        java.lang.Exception $r20;
        org.codehaus.jackson.map.ser.std.MapSerializer r0;
        java.lang.StringBuilder $r21, $r22, $r23;
        org.codehaus.jackson.map.SerializationConfig$Feature $r5;
        java.util.HashSet r3;
        org.codehaus.jackson.type.JavaType $r16, $r17, $r18;
        java.lang.String $r24;
        java.util.Map$Entry r10;
        java.util.Iterator $r8;
        java.lang.Object $r9, $r11, $r12;
        java.lang.Class $r14;

        r0 := @this: org.codehaus.jackson.map.ser.std.MapSerializer;

        r6 := @parameter0: java.util.Map;

        r13 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r4 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        if $r1 == null goto label01;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r6, r13, r4);

        return;

     label01:
        r2 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _keySerializer>;

        r3 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: java.util.HashSet _ignoredEntries>;

        $r5 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_MAP_VALUES>;

        $z0 = virtualinvoke r4.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r5);

        if $z0 != 0 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        z1 = $z4;

        r25 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicValueSerializers>;

        $r7 = interfaceinvoke r6.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label16;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r12 != null goto label05;

        $r19 = virtualinvoke r4.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer getNullKeySerializer()>();

        virtualinvoke $r19.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(null, r13, r4);

        goto label08;

     label05:
        if z1 == 0 goto label06;

        if $r11 != null goto label06;

        goto label04;

     label06:
        if r3 == null goto label07;

        $z3 = virtualinvoke r3.<java.util.HashSet: boolean contains(java.lang.Object)>($r12);

        if $z3 == 0 goto label07;

        goto label04;

     label07:
        virtualinvoke r2.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r12, r13, r4);

     label08:
        if $r11 != null goto label09;

        virtualinvoke r4.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r13);

        goto label15;

     label09:
        $r14 = virtualinvoke $r11.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke r25.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.JsonSerializer serializerFor(java.lang.Class)>($r14);

        r26 = $r15;

        if $r15 != null goto label12;

        $r16 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.type.JavaType _valueType>;

        $z2 = virtualinvoke $r16.<org.codehaus.jackson.type.JavaType: boolean hasGenericTypes()>();

        if $z2 == 0 goto label10;

        $r17 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.type.JavaType _valueType>;

        $r18 = virtualinvoke r4.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r17, $r14);

        r26 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializerProvider)>(r25, $r18, r4);

        goto label11;

     label10:
        r26 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,java.lang.Class,org.codehaus.jackson.map.SerializerProvider)>(r25, $r14, r4);

     label11:
        r25 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicValueSerializers>;

     label12:
        virtualinvoke r26.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r11, r13, r4);

     label13:
        goto label15;

     label14:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.MapSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>(r4, $r20, r6, $r24);

     label15:
        goto label04;

     label16:
        return;

        catch java.lang.Exception from label12 to label13 with label14;
    }

    protected void serializeFieldsUsing(java.util.Map, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.JsonSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.SerializerProvider r4;
        java.util.HashSet r2;
        org.codehaus.jackson.map.TypeSerializer r3;
        org.codehaus.jackson.JsonGenerator r13;
        java.util.Map r6;
        java.lang.String $r20;
        boolean $z0, z1, $z2, $z3, $z4;
        java.util.Map$Entry r10;
        java.util.Iterator $r8;
        java.util.Set $r7;
        org.codehaus.jackson.map.JsonSerializer r1, r14, $r15;
        java.lang.Exception $r16;
        org.codehaus.jackson.map.ser.std.MapSerializer r0;
        java.lang.Object $r9, $r11, $r12;
        java.lang.StringBuilder $r17, $r18, $r19;
        org.codehaus.jackson.map.SerializationConfig$Feature $r5;

        r0 := @this: org.codehaus.jackson.map.ser.std.MapSerializer;

        r6 := @parameter0: java.util.Map;

        r13 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r4 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r14 := @parameter3: org.codehaus.jackson.map.JsonSerializer;

        r1 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _keySerializer>;

        r2 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: java.util.HashSet _ignoredEntries>;

        r3 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        $r5 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_MAP_VALUES>;

        $z0 = virtualinvoke r4.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r5);

        if $z0 != 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        z1 = $z3;

        $r7 = interfaceinvoke r6.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z4 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label13;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r12 != null goto label04;

        $r15 = virtualinvoke r4.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer getNullKeySerializer()>();

        virtualinvoke $r15.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(null, r13, r4);

        goto label07;

     label04:
        if z1 == 0 goto label05;

        if $r11 != null goto label05;

        goto label03;

     label05:
        if r2 == null goto label06;

        $z2 = virtualinvoke r2.<java.util.HashSet: boolean contains(java.lang.Object)>($r12);

        if $z2 == 0 goto label06;

        goto label03;

     label06:
        virtualinvoke r1.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r12, r13, r4);

     label07:
        if $r11 != null goto label08;

        virtualinvoke r4.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r13);

        goto label12;

     label08:
        if r3 != null goto label09;

        virtualinvoke r14.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r11, r13, r4);

        goto label10;

     label09:
        virtualinvoke r14.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r11, r13, r4, r3);

     label10:
        goto label12;

     label11:
        $r16 := @caughtexception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.MapSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>(r4, $r16, r6, $r20);

     label12:
        goto label03;

     label13:
        return;

        catch java.lang.Exception from label08 to label10 with label11;
    }

    protected void serializeTypedFields(java.util.Map, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.SerializerProvider r3;
        java.util.HashSet r2;
        org.codehaus.jackson.JsonGenerator r12;
        org.codehaus.jackson.map.TypeSerializer $r16;
        java.util.Map r5;
        java.lang.String $r22;
        boolean $z0, z1, $z2, $z3, $z4;
        java.util.Map$Entry r9;
        java.util.Iterator $r7;
        java.util.Set $r6;
        org.codehaus.jackson.map.JsonSerializer r1, $r15, $r17, r23, r25;
        org.codehaus.jackson.map.BeanProperty $r14;
        java.lang.Exception $r18;
        org.codehaus.jackson.map.ser.std.MapSerializer r0;
        java.lang.Object $r8, $r10, $r11;
        java.lang.Class $r13, r24;
        java.lang.StringBuilder $r19, $r20, $r21;
        org.codehaus.jackson.map.SerializationConfig$Feature $r4;

        r0 := @this: org.codehaus.jackson.map.ser.std.MapSerializer;

        r5 := @parameter0: java.util.Map;

        r12 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r1 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _keySerializer>;

        r23 = null;

        r24 = null;

        r2 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: java.util.HashSet _ignoredEntries>;

        $r4 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_MAP_VALUES>;

        $z0 = virtualinvoke r3.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r4);

        if $z0 != 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        z1 = $z3;

        $r6 = interfaceinvoke r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z4 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label14;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r11 != null goto label04;

        $r17 = virtualinvoke r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer getNullKeySerializer()>();

        virtualinvoke $r17.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(null, r12, r3);

        goto label07;

     label04:
        if z1 == 0 goto label05;

        if $r10 != null goto label05;

        goto label03;

     label05:
        if r2 == null goto label06;

        $z2 = virtualinvoke r2.<java.util.HashSet: boolean contains(java.lang.Object)>($r11);

        if $z2 == 0 goto label06;

        goto label03;

     label06:
        virtualinvoke r1.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r11, r12, r3);

     label07:
        if $r10 != null goto label08;

        virtualinvoke r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r12);

        goto label13;

     label08:
        $r13 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        if $r13 != r24 goto label09;

        r25 = r23;

        goto label10;

     label09:
        $r14 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r15 = virtualinvoke r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r13, $r14);

        r25 = $r15;

        r23 = $r15;

        r24 = $r13;

     label10:
        $r16 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        virtualinvoke r25.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r10, r12, r3, $r16);

     label11:
        goto label13;

     label12:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.MapSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>(r3, $r18, r5, $r22);

     label13:
        goto label03;

     label14:
        return;

        catch java.lang.Exception from label10 to label11 with label12;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        java.lang.reflect.Type r3;
        org.codehaus.jackson.map.ser.std.MapSerializer r0;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.MapSerializer;

        r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r3 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("object", 1);

        return $r1;
    }

    public void resolve(org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.SerializerProvider r1;
        org.codehaus.jackson.map.JsonSerializer $r4, $r5, $r8, $r9;
        org.codehaus.jackson.map.BeanProperty $r2, $r6;
        org.codehaus.jackson.map.ser.std.MapSerializer r0;
        org.codehaus.jackson.type.JavaType $r3, $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.MapSerializer;

        r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $z0 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: boolean _valueTypeIsStatic>;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        if $r5 != null goto label1;

        $r7 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.type.JavaType _valueType>;

        $r6 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r8 = virtualinvoke r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r7, $r6);

        r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer> = $r8;

     label1:
        $r9 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _keySerializer>;

        if $r9 != null goto label2;

        $r3 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.type.JavaType _keyType>;

        $r2 = r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r4 = virtualinvoke r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findKeySerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r3, $r2);

        r0.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.JsonSerializer _keySerializer> = $r4;

     label2:
        return;
    }

    protected final org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap, java.lang.Class, org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.map.JsonSerializer $r7;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult $r5;
        org.codehaus.jackson.map.ser.std.MapSerializer r3;
        java.lang.Class r1;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r0, $r6, $r8;

        r3 := @this: org.codehaus.jackson.map.ser.std.MapSerializer;

        r0 := @parameter0: org.codehaus.jackson.map.ser.impl.PropertySerializerMap;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = r3.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSerializer(java.lang.Class,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.BeanProperty)>(r1, r2, $r4);

        $r6 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        if r0 == $r6 goto label1;

        $r8 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        r3.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicValueSerializers> = $r8;

     label1:
        $r7 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.JsonSerializer serializer>;

        return $r7;
    }

    protected final org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.map.JsonSerializer $r7;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult $r5;
        org.codehaus.jackson.map.ser.std.MapSerializer r3;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r0, $r6, $r8;

        r3 := @this: org.codehaus.jackson.map.ser.std.MapSerializer;

        r0 := @parameter0: org.codehaus.jackson.map.ser.impl.PropertySerializerMap;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = r3.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.BeanProperty)>(r1, r2, $r4);

        $r6 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        if r0 == $r6 goto label1;

        $r8 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        r3.<org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicValueSerializers> = $r8;

     label1:
        $r7 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.JsonSerializer serializer>;

        return $r7;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.std.MapSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        java.util.Map $r4;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.MapSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.util.Map) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.MapSerializer: void serialize(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r2, r3);

        return;
    }

    public volatile void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ser.std.MapSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.TypeSerializer r4;
        java.util.Map $r5;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.MapSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 = (java.util.Map) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.MapSerializer: void serializeWithType(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r5, r2, r3, r4);

        return;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.type.JavaType $r0;

        $r0 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType unknownType()>();

        <org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.type.JavaType UNSPECIFIED_TYPE> = $r0;

        return;
    }
}
