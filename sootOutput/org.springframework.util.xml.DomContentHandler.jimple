class org.springframework.util.xml.DomContentHandler extends java.lang.Object implements org.xml.sax.ContentHandler
{
    private final org.w3c.dom.Document document;
    private final java.util.List elements;
    private final org.w3c.dom.Node node;

    void <init>(org.w3c.dom.Node)
    {
        org.w3c.dom.Document $r3, $r4, $r5;
        org.w3c.dom.Node r2;
        org.springframework.util.xml.DomContentHandler r0;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @this: org.springframework.util.xml.DomContentHandler;

        r2 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.springframework.util.xml.DomContentHandler: java.util.List elements> = $r1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "node must not be null");

        r0.<org.springframework.util.xml.DomContentHandler: org.w3c.dom.Node node> = r2;

        $z0 = r2 instanceof org.w3c.dom.Document;

        if $z0 == 0 goto label1;

        $r5 = (org.w3c.dom.Document) r2;

        r0.<org.springframework.util.xml.DomContentHandler: org.w3c.dom.Document document> = $r5;

        goto label2;

     label1:
        $r3 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r0.<org.springframework.util.xml.DomContentHandler: org.w3c.dom.Document document> = $r3;

     label2:
        $r4 = r0.<org.springframework.util.xml.DomContentHandler: org.w3c.dom.Document document>;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>($r4, "document must not be null");

        return;
    }

    private org.w3c.dom.Node getParent()
    {
        org.springframework.util.xml.DomContentHandler r0;
        java.util.List $r1, $r3, $r4;
        org.w3c.dom.Node $r2, $r6;
        int $i0, $i1;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.springframework.util.xml.DomContentHandler;

        $r1 = r0.<org.springframework.util.xml.DomContentHandler: java.util.List elements>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<org.springframework.util.xml.DomContentHandler: java.util.List elements>;

        $r3 = r0.<org.springframework.util.xml.DomContentHandler: java.util.List elements>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        $r6 = (org.w3c.dom.Node) $r5;

        return $r6;

     label1:
        $r2 = r0.<org.springframework.util.xml.DomContentHandler: org.w3c.dom.Node node>;

        return $r2;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.DomContentHandler r0;
        org.w3c.dom.Document $r4;
        org.w3c.dom.Node $r1, $r10;
        org.xml.sax.Attributes r6;
        int i0, $i1;
        java.lang.String r2, r3, $r7, $r8, $r9, r12;
        boolean $z0;
        java.util.List $r11;
        org.w3c.dom.Element $r5, r13;

        r0 := @this: org.springframework.util.xml.DomContentHandler;

        r2 := @parameter0: java.lang.String;

        r12 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r6 := @parameter3: org.xml.sax.Attributes;

        $r1 = specialinvoke r0.<org.springframework.util.xml.DomContentHandler: org.w3c.dom.Node getParent()>();

        $r4 = r0.<org.springframework.util.xml.DomContentHandler: org.w3c.dom.Document document>;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>(r2, r3);

        i0 = 0;

        goto label3;

     label1:
        $r7 = interfaceinvoke r6.<org.xml.sax.Attributes: java.lang.String getURI(int)>(i0);

        $r8 = interfaceinvoke r6.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i0);

        $r9 = interfaceinvoke r6.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i0);

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns");

        if $z0 != 0 goto label2;

        interfaceinvoke $r5.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>($r7, $r8, $r9);

     label2:
        i0 = i0 + 1;

     label3:
        $i1 = interfaceinvoke r6.<org.xml.sax.Attributes: int getLength()>();

        if i0 < $i1 goto label1;

        $r10 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        r13 = (org.w3c.dom.Element) $r10;

        $r11 = r0.<org.springframework.util.xml.DomContentHandler: java.util.List elements>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r13);

        return;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.DomContentHandler r0;
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.String r3, r4, r5;

        r0 := @this: org.springframework.util.xml.DomContentHandler;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        $r2 = r0.<org.springframework.util.xml.DomContentHandler: java.util.List elements>;

        $r1 = r0.<org.springframework.util.xml.DomContentHandler: java.util.List elements>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i1);

        return;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXException
    {
        org.w3c.dom.Text $r6, $r7;
        org.springframework.util.xml.DomContentHandler r2;
        short $s2;
        org.w3c.dom.Document $r5;
        org.w3c.dom.Node $r3, $r4;
        int i0, i1, $i3;
        char[] r1;
        java.lang.String $r8;

        r2 := @this: org.springframework.util.xml.DomContentHandler;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r8 = new java.lang.String;

        specialinvoke $r8.<java.lang.String: void <init>(char[],int,int)>(r1, i0, i1);

        $r3 = specialinvoke r2.<org.springframework.util.xml.DomContentHandler: org.w3c.dom.Node getParent()>();

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node getLastChild()>();

        if $r4 == null goto label1;

        $s2 = interfaceinvoke $r4.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s2;

        if $i3 != 3 goto label1;

        $r7 = (org.w3c.dom.Text) $r4;

        interfaceinvoke $r7.<org.w3c.dom.Text: void appendData(java.lang.String)>($r8);

        goto label2;

     label1:
        $r5 = r2.<org.springframework.util.xml.DomContentHandler: org.w3c.dom.Document document>;

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r8);

        interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

     label2:
        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.w3c.dom.ProcessingInstruction $r5;
        org.w3c.dom.Document $r4;
        org.w3c.dom.Node $r1;
        java.lang.String r2, r3;
        org.springframework.util.xml.DomContentHandler r0;

        r0 := @this: org.springframework.util.xml.DomContentHandler;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = specialinvoke r0.<org.springframework.util.xml.DomContentHandler: org.w3c.dom.Node getParent()>();

        $r4 = r0.<org.springframework.util.xml.DomContentHandler: org.w3c.dom.Document document>;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Document: org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>(r2, r3);

        interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        return;
    }

    public void setDocumentLocator(org.xml.sax.Locator)
    {
        org.springframework.util.xml.DomContentHandler r0;
        org.xml.sax.Locator r1;

        r0 := @this: org.springframework.util.xml.DomContentHandler;

        r1 := @parameter0: org.xml.sax.Locator;

        return;
    }

    public void startDocument() throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.DomContentHandler r0;

        r0 := @this: org.springframework.util.xml.DomContentHandler;

        return;
    }

    public void endDocument() throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.DomContentHandler r0;

        r0 := @this: org.springframework.util.xml.DomContentHandler;

        return;
    }

    public void startPrefixMapping(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String r1, r2;
        org.springframework.util.xml.DomContentHandler r0;

        r0 := @this: org.springframework.util.xml.DomContentHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void endPrefixMapping(java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String r1;
        org.springframework.util.xml.DomContentHandler r0;

        r0 := @this: org.springframework.util.xml.DomContentHandler;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void ignorableWhitespace(char[], int, int) throws org.xml.sax.SAXException
    {
        int i0, i1;
        char[] r1;
        org.springframework.util.xml.DomContentHandler r0;

        r0 := @this: org.springframework.util.xml.DomContentHandler;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void skippedEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String r1;
        org.springframework.util.xml.DomContentHandler r0;

        r0 := @this: org.springframework.util.xml.DomContentHandler;

        r1 := @parameter0: java.lang.String;

        return;
    }
}
