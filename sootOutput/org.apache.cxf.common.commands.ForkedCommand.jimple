public class org.apache.cxf.common.commands.ForkedCommand extends java.lang.Thread
{
    public static final java.lang.String EXE_SUFFIX;
    public static final int DEFAULT_TIMEOUT;
    private static final java.util.logging.Logger LOG;
    private java.lang.String[] arguments;
    private java.lang.String[] environment;
    private java.io.PrintStream outputStream;
    private java.io.PrintStream errorStream;
    private java.lang.Process proc;
    private boolean completed;
    private boolean killed;
    private boolean joinErrOut;

    public void <init>()
    {
        org.apache.cxf.common.commands.ForkedCommand r0;

        r0 := @this: org.apache.cxf.common.commands.ForkedCommand;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<org.apache.cxf.common.commands.ForkedCommand: boolean joinErrOut> = 1;

        return;
    }

    public void <init>(java.lang.String[])
    {
        java.lang.String[] r1;
        org.apache.cxf.common.commands.ForkedCommand r0;

        r0 := @this: org.apache.cxf.common.commands.ForkedCommand;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<org.apache.cxf.common.commands.ForkedCommand: boolean joinErrOut> = 1;

        r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] arguments> = r1;

        return;
    }

    protected void setArgs(java.lang.String[])
    {
        java.lang.String[] r1;
        org.apache.cxf.common.commands.ForkedCommand r0;

        r0 := @this: org.apache.cxf.common.commands.ForkedCommand;

        r1 := @parameter0: java.lang.String[];

        r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] arguments> = r1;

        return;
    }

    public void setEnvironment(java.lang.String[])
    {
        java.lang.String[] r1;
        org.apache.cxf.common.commands.ForkedCommand r0;

        r0 := @this: org.apache.cxf.common.commands.ForkedCommand;

        r1 := @parameter0: java.lang.String[];

        r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] environment> = r1;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.cxf.common.commands.ForkedCommand r0;
        java.lang.String[] $r1, $r3, $r4, $r6, $r9;
        java.util.StringTokenizer $r8;
        int $i0, $i1, $i2, i3;
        java.lang.String $r5, $r7, $r10, $r11;
        boolean z0, $z1;
        java.lang.StringBuilder $r2;

        r0 := @this: org.apache.cxf.common.commands.ForkedCommand;

        $r1 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] arguments>;

        if null != $r1 goto label01;

        return "";

     label01:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        i3 = 0;

     label02:
        $r3 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] arguments>;

        $i0 = lengthof $r3;

        if i3 >= $i0 goto label09;

        if i3 <= 0 goto label03;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label03:
        z0 = 0;

        $r4 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] arguments>;

        $r5 = $r4[i3];

        if $r5 == null goto label06;

        $r8 = new java.util.StringTokenizer;

        $r9 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] arguments>;

        $r10 = $r9[i3];

        specialinvoke $r8.<java.util.StringTokenizer: void <init>(java.lang.String)>($r10);

        $i2 = virtualinvoke $r8.<java.util.StringTokenizer: int countTokens()>();

        if $i2 <= 1 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        z0 = $z1;

     label06:
        if z0 == 0 goto label07;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

     label07:
        $r6 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] arguments>;

        $r7 = $r6[i3];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        if z0 == 0 goto label08;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

     label08:
        i3 = i3 + 1;

        goto label02;

     label09:
        $i1 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label10;

        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label11;

     label10:
        $r11 = "";

     label11:
        return $r11;
    }

    public void joinErrOut(boolean)
    {
        org.apache.cxf.common.commands.ForkedCommand r0;
        boolean z0;

        r0 := @this: org.apache.cxf.common.commands.ForkedCommand;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.common.commands.ForkedCommand: boolean joinErrOut> = z0;

        return;
    }

    public int execute()
    {
        int $i0;
        org.apache.cxf.common.commands.ForkedCommand r0;

        r0 := @this: org.apache.cxf.common.commands.ForkedCommand;

        $i0 = virtualinvoke r0.<org.apache.cxf.common.commands.ForkedCommand: int execute(int)>(0);

        return $i0;
    }

    public int execute(int)
    {
        java.lang.Integer $r40;
        org.apache.cxf.common.commands.ForkedCommandException $r2, $r36, $r91;
        java.lang.Runtime $r9;
        java.lang.StringBuilder $r31, $r33, $r34, $r50, $r52, $r53, $r54, $r56, $r64, $r66, $r67;
        java.lang.Throwable $r70;
        java.lang.Object[] $r4, $r38, $r93;
        org.apache.cxf.common.commands.ForkedCommand r0;
        long $l3, $l4;
        java.lang.String $r35, $r55, $r59, $r61, $r68;
        java.io.IOException $r90;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        java.lang.Process $r15, $r17, $r21, $r26, $r28, $r63, $r71, $r81;
        java.util.logging.Logger $r5, $r8, $r12, $r25, $r27, $r30, $r32, $r39, $r42, $r43, $r45, $r46, $r47, $r49, $r51, $r58, $r65, $r72, $r74, $r75, $r77, $r78, $r82, $r84, $r85, $r87, $r88, $r94;
        org.apache.cxf.common.commands.ForkedCommandStreamHandler $r16, $r20;
        java.lang.String[] $r1, $r6, $r10, $r13, $r14, $r57, $r60, $r62;
        org.apache.cxf.common.i18n.Message $r3, $r37, $r92;
        java.util.logging.Level $r7, $r11, $r24, $r29, $r41, $r44, $r48, $r73, $r76, $r83, $r86;
        int $i0, i1, $i2, $i5, i6;
        java.io.PrintStream $r19, $r23, $r95, $r96;
        java.lang.InterruptedException $r69, $r79, $r80, $r89;
        java.io.InputStream $r18, $r22;

        r0 := @this: org.apache.cxf.common.commands.ForkedCommand;

        i1 := @parameter0: int;

        $r1 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] arguments>;

        if null == $r1 goto label01;

        $r6 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] arguments>;

        $i0 = lengthof $r6;

        if $i0 != 0 goto label02;

     label01:
        $r2 = new org.apache.cxf.common.commands.ForkedCommandException;

        $r3 = new org.apache.cxf.common.i18n.Message;

        $r5 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("NO_ARGUMENTS_EXC", $r5, $r4);

        specialinvoke $r2.<org.apache.cxf.common.commands.ForkedCommandException: void <init>(org.apache.cxf.common.i18n.Message)>($r3);

        throw $r2;

     label02:
        $r8 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r7 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r8.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r7);

        if $z0 == 0 goto label03;

        $r65 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Executing command: ");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r65.<java.util.logging.Logger: void fine(java.lang.String)>($r68);

     label03:
        $r9 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r10 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] environment>;

        if $r10 != null goto label04;

        $r62 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] arguments>;

        $r63 = virtualinvoke $r9.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>($r62);

        r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.Process proc> = $r63;

        goto label08;

     label04:
        $r12 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r11 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z1 = virtualinvoke $r12.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r11);

        if $z1 == 0 goto label07;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Process environment: ");

        i6 = 0;

     label05:
        $r57 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] environment>;

        $i5 = lengthof $r57;

        if i6 >= $i5 goto label06;

        $r60 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] environment>;

        $r61 = $r60[i6];

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i6 = i6 + 1;

        goto label05;

     label06:
        $r58 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r59 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r58.<java.util.logging.Logger: void fine(java.lang.String)>($r59);

     label07:
        $r14 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] arguments>;

        $r13 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.String[] environment>;

        $r15 = virtualinvoke $r9.<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])>($r14, $r13);

        r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.Process proc> = $r15;

     label08:
        goto label10;

     label09:
        $r90 := @caughtexception;

        $r91 = new org.apache.cxf.common.commands.ForkedCommandException;

        $r92 = new org.apache.cxf.common.i18n.Message;

        $r94 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r93 = newarray (java.lang.Object)[1];

        $r93[0] = r0;

        specialinvoke $r92.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("EXECUTE_EXC", $r94, $r93);

        specialinvoke $r91.<org.apache.cxf.common.commands.ForkedCommandException: void <init>(org.apache.cxf.common.i18n.Message,java.lang.Throwable)>($r92, $r90);

        throw $r91;

     label10:
        $r16 = new org.apache.cxf.common.commands.ForkedCommandStreamHandler;

        $r17 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.Process proc>;

        $r18 = virtualinvoke $r17.<java.lang.Process: java.io.InputStream getInputStream()>();

        $r19 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.io.PrintStream outputStream>;

        if $r19 != null goto label11;

        $r95 = <java.lang.System: java.io.PrintStream out>;

        goto label12;

     label11:
        $r95 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.io.PrintStream outputStream>;

     label12:
        specialinvoke $r16.<org.apache.cxf.common.commands.ForkedCommandStreamHandler: void <init>(java.io.InputStream,java.io.PrintStream)>($r18, $r95);

        $r20 = new org.apache.cxf.common.commands.ForkedCommandStreamHandler;

        $r21 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.Process proc>;

        $r22 = virtualinvoke $r21.<java.lang.Process: java.io.InputStream getErrorStream()>();

        $r23 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.io.PrintStream errorStream>;

        if $r23 != null goto label13;

        $r96 = <java.lang.System: java.io.PrintStream err>;

        goto label14;

     label13:
        $r96 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.io.PrintStream errorStream>;

     label14:
        specialinvoke $r20.<org.apache.cxf.common.commands.ForkedCommandStreamHandler: void <init>(java.io.InputStream,java.io.PrintStream)>($r22, $r96);

        virtualinvoke $r20.<org.apache.cxf.common.commands.ForkedCommandStreamHandler: void start()>();

        virtualinvoke $r16.<org.apache.cxf.common.commands.ForkedCommandStreamHandler: void start()>();

        virtualinvoke r0.<org.apache.cxf.common.commands.ForkedCommand: void start()>();

     label15:
        if i1 <= 0 goto label17;

        $r49 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r48 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z6 = virtualinvoke $r49.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r48);

        if $z6 == 0 goto label16;

        $r51 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waiting ");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds for process to complete");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r51.<java.util.logging.Logger: void fine(java.lang.String)>($r55);

     label16:
        $l3 = (long) i1;

        $l4 = $l3 * 1000L;

        virtualinvoke r0.<org.apache.cxf.common.commands.ForkedCommand: void join(long)>($l4);

        goto label19;

     label17:
        $r25 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r24 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z2 = virtualinvoke $r25.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r24);

        if $z2 == 0 goto label18;

        $r47 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        virtualinvoke $r47.<java.util.logging.Logger: void fine(java.lang.String)>("Waiting for process to complete");

     label18:
        virtualinvoke r0.<org.apache.cxf.common.commands.ForkedCommand: void join()>();

     label19:
        $z13 = r0.<org.apache.cxf.common.commands.ForkedCommand: boolean completed>;

        if $z13 == 0 goto label20;

        $r45 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r44 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z5 = virtualinvoke $r45.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r44);

        if $z5 == 0 goto label21;

        $r46 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        virtualinvoke $r46.<java.util.logging.Logger: void fine(java.lang.String)>("Process completed in time");

        goto label21;

     label20:
        $r26 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.Process proc>;

        virtualinvoke $r26.<java.lang.Process: void destroy()>();

        r0.<org.apache.cxf.common.commands.ForkedCommand: boolean killed> = 1;

        $r27 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        virtualinvoke $r27.<java.util.logging.Logger: void fine(java.lang.String)>("Process timed out and was killed");

     label21:
        $z14 = r0.<org.apache.cxf.common.commands.ForkedCommand: boolean joinErrOut>;

        if $z14 == 0 goto label40;

        $r42 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r41 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z4 = virtualinvoke $r42.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r41);

        if $z4 == 0 goto label22;

        $r43 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        virtualinvoke $r43.<java.util.logging.Logger: void info(java.lang.String)>("Waiting a further 10 seconds for process  stdout/stderr streams to be flushed");

     label22:
        virtualinvoke $r20.<org.apache.cxf.common.commands.ForkedCommandStreamHandler: void join(long)>(10000L);

        virtualinvoke $r16.<org.apache.cxf.common.commands.ForkedCommandStreamHandler: void join(long)>(10000L);

     label23:
        goto label40;

     label24:
        $r89 := @caughtexception;

        goto label40;

     label25:
        $r80 := @caughtexception;

        virtualinvoke $r80.<java.lang.InterruptedException: void printStackTrace()>();

     label26:
        $z10 = r0.<org.apache.cxf.common.commands.ForkedCommand: boolean completed>;

        if $z10 == 0 goto label27;

        $r87 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r86 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z12 = virtualinvoke $r87.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r86);

        if $z12 == 0 goto label28;

        $r88 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        virtualinvoke $r88.<java.util.logging.Logger: void fine(java.lang.String)>("Process completed in time");

        goto label28;

     label27:
        $r81 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.Process proc>;

        virtualinvoke $r81.<java.lang.Process: void destroy()>();

        r0.<org.apache.cxf.common.commands.ForkedCommand: boolean killed> = 1;

        $r82 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        virtualinvoke $r82.<java.util.logging.Logger: void fine(java.lang.String)>("Process timed out and was killed");

     label28:
        $z15 = r0.<org.apache.cxf.common.commands.ForkedCommand: boolean joinErrOut>;

        if $z15 == 0 goto label40;

        $r84 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r83 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z11 = virtualinvoke $r84.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r83);

        if $z11 == 0 goto label29;

        $r85 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        virtualinvoke $r85.<java.util.logging.Logger: void info(java.lang.String)>("Waiting a further 10 seconds for process  stdout/stderr streams to be flushed");

     label29:
        virtualinvoke $r20.<org.apache.cxf.common.commands.ForkedCommandStreamHandler: void join(long)>(10000L);

        virtualinvoke $r16.<org.apache.cxf.common.commands.ForkedCommandStreamHandler: void join(long)>(10000L);

     label30:
        goto label40;

     label31:
        $r79 := @caughtexception;

        goto label40;

     label32:
        $r70 := @caughtexception;

     label33:
        $z7 = r0.<org.apache.cxf.common.commands.ForkedCommand: boolean completed>;

        if $z7 == 0 goto label34;

        $r77 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r76 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z9 = virtualinvoke $r77.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r76);

        if $z9 == 0 goto label35;

        $r78 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        virtualinvoke $r78.<java.util.logging.Logger: void fine(java.lang.String)>("Process completed in time");

        goto label35;

     label34:
        $r71 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.Process proc>;

        virtualinvoke $r71.<java.lang.Process: void destroy()>();

        r0.<org.apache.cxf.common.commands.ForkedCommand: boolean killed> = 1;

        $r72 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        virtualinvoke $r72.<java.util.logging.Logger: void fine(java.lang.String)>("Process timed out and was killed");

     label35:
        $z16 = r0.<org.apache.cxf.common.commands.ForkedCommand: boolean joinErrOut>;

        if $z16 == 0 goto label39;

        $r74 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r73 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z8 = virtualinvoke $r74.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r73);

        if $z8 == 0 goto label36;

        $r75 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        virtualinvoke $r75.<java.util.logging.Logger: void info(java.lang.String)>("Waiting a further 10 seconds for process  stdout/stderr streams to be flushed");

     label36:
        virtualinvoke $r20.<org.apache.cxf.common.commands.ForkedCommandStreamHandler: void join(long)>(10000L);

        virtualinvoke $r16.<org.apache.cxf.common.commands.ForkedCommandStreamHandler: void join(long)>(10000L);

     label37:
        goto label39;

     label38:
        $r69 := @caughtexception;

     label39:
        throw $r70;

     label40:
        $z17 = r0.<org.apache.cxf.common.commands.ForkedCommand: boolean killed>;

        if $z17 == 0 goto label41;

        $r36 = new org.apache.cxf.common.commands.ForkedCommandException;

        $r37 = new org.apache.cxf.common.i18n.Message;

        $r39 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r38 = newarray (java.lang.Object)[1];

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r38[0] = $r40;

        specialinvoke $r37.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("TIMEOUT_EXC", $r39, $r38);

        specialinvoke $r36.<org.apache.cxf.common.commands.ForkedCommandException: void <init>(org.apache.cxf.common.i18n.Message)>($r37);

        throw $r36;

     label41:
        $r28 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.Process proc>;

        $i2 = virtualinvoke $r28.<java.lang.Process: int exitValue()>();

        $r30 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r29 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z3 = virtualinvoke $r30.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r29);

        if $z3 == 0 goto label42;

        $r32 = <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Process exited with value: ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r32.<java.util.logging.Logger: void fine(java.lang.String)>($r35);

     label42:
        return $i2;

        catch java.io.IOException from label03 to label08 with label09;
        catch java.lang.InterruptedException from label22 to label23 with label24;
        catch java.lang.InterruptedException from label15 to label19 with label25;
        catch java.lang.InterruptedException from label29 to label30 with label31;
        catch java.lang.Throwable from label15 to label19 with label32;
        catch java.lang.Throwable from label25 to label26 with label32;
        catch java.lang.InterruptedException from label36 to label37 with label38;
        catch java.lang.Throwable from label32 to label33 with label32;
    }

    public void run()
    {
        java.lang.Process $r1;
        org.apache.cxf.common.commands.ForkedCommand r0;
        java.lang.InterruptedException $r2;

        r0 := @this: org.apache.cxf.common.commands.ForkedCommand;

     label1:
        $r1 = r0.<org.apache.cxf.common.commands.ForkedCommand: java.lang.Process proc>;

        virtualinvoke $r1.<java.lang.Process: int waitFor()>();

        r0.<org.apache.cxf.common.commands.ForkedCommand: boolean completed> = 1;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<java.lang.InterruptedException: void printStackTrace()>();

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public void setOutputStream(java.io.PrintStream)
    {
        java.io.PrintStream r1;
        org.apache.cxf.common.commands.ForkedCommand r0;

        r0 := @this: org.apache.cxf.common.commands.ForkedCommand;

        r1 := @parameter0: java.io.PrintStream;

        r0.<org.apache.cxf.common.commands.ForkedCommand: java.io.PrintStream outputStream> = r1;

        return;
    }

    public void setErrorStream(java.io.PrintStream)
    {
        java.io.PrintStream r1;
        org.apache.cxf.common.commands.ForkedCommand r0;

        r0 := @this: org.apache.cxf.common.commands.ForkedCommand;

        r1 := @parameter0: java.io.PrintStream;

        r0.<org.apache.cxf.common.commands.ForkedCommand: java.io.PrintStream errorStream> = r1;

        return;
    }

    static void <clinit>()
    {
        java.lang.String $r1;
        java.util.logging.Logger $r0;
        boolean $z0;

        <org.apache.cxf.common.commands.ForkedCommand: int DEFAULT_TIMEOUT> = 0;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/common/commands/ForkedCommand;");

        <org.apache.cxf.common.commands.ForkedCommand: java.util.logging.Logger LOG> = $r0;

        $r1 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("Windows");

        if $z0 == 0 goto label1;

        <org.apache.cxf.common.commands.ForkedCommand: java.lang.String EXE_SUFFIX> = ".exe";

        goto label2;

     label1:
        <org.apache.cxf.common.commands.ForkedCommand: java.lang.String EXE_SUFFIX> = "";

     label2:
        return;
    }
}
