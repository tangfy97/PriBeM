public class org.springframework.aop.config.MethodLocatingFactoryBean extends java.lang.Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.BeanFactoryAware
{
    private java.lang.String targetBeanName;
    private java.lang.String methodName;
    private java.lang.reflect.Method method;

    public void <init>()
    {
        org.springframework.aop.config.MethodLocatingFactoryBean r0;

        r0 := @this: org.springframework.aop.config.MethodLocatingFactoryBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setTargetBeanName(java.lang.String)
    {
        org.springframework.aop.config.MethodLocatingFactoryBean r0;
        java.lang.String r1;

        r0 := @this: org.springframework.aop.config.MethodLocatingFactoryBean;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.aop.config.MethodLocatingFactoryBean: java.lang.String targetBeanName> = r1;

        return;
    }

    public void setMethodName(java.lang.String)
    {
        org.springframework.aop.config.MethodLocatingFactoryBean r0;
        java.lang.String r1;

        r0 := @this: org.springframework.aop.config.MethodLocatingFactoryBean;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.aop.config.MethodLocatingFactoryBean: java.lang.String methodName> = r1;

        return;
    }

    public void setBeanFactory(org.springframework.beans.factory.BeanFactory)
    {
        org.springframework.aop.config.MethodLocatingFactoryBean r0;
        java.lang.String $r1, $r2, $r4, $r6, $r11, $r14, $r17, $r20, $r23;
        java.lang.reflect.Method $r7, $r8;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r9, $r18, $r24, $r25;
        org.springframework.beans.factory.BeanFactory r3;
        java.lang.Class $r5;
        java.lang.StringBuilder $r10, $r12, $r13, $r15, $r16, $r19, $r21, $r22;

        r0 := @this: org.springframework.aop.config.MethodLocatingFactoryBean;

        r3 := @parameter0: org.springframework.beans.factory.BeanFactory;

        $r1 = r0.<org.springframework.aop.config.MethodLocatingFactoryBean: java.lang.String targetBeanName>;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'targetBeanName\' is required");

        throw $r25;

     label1:
        $r2 = r0.<org.springframework.aop.config.MethodLocatingFactoryBean: java.lang.String methodName>;

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r2);

        if $z1 != 0 goto label2;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'methodName\' is required");

        throw $r24;

     label2:
        $r4 = r0.<org.springframework.aop.config.MethodLocatingFactoryBean: java.lang.String targetBeanName>;

        $r5 = interfaceinvoke r3.<org.springframework.beans.factory.BeanFactory: java.lang.Class getType(java.lang.String)>($r4);

        if $r5 != null goto label3;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Can\'t determine type of bean with name \'");

        $r20 = r0.<org.springframework.aop.config.MethodLocatingFactoryBean: java.lang.String targetBeanName>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label3:
        $r6 = r0.<org.springframework.aop.config.MethodLocatingFactoryBean: java.lang.String methodName>;

        $r7 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.reflect.Method resolveSignature(java.lang.String,java.lang.Class)>($r6, $r5);

        r0.<org.springframework.aop.config.MethodLocatingFactoryBean: java.lang.reflect.Method method> = $r7;

        $r8 = r0.<org.springframework.aop.config.MethodLocatingFactoryBean: java.lang.reflect.Method method>;

        if $r8 != null goto label4;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to locate method [");

        $r11 = r0.<org.springframework.aop.config.MethodLocatingFactoryBean: java.lang.String methodName>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] on bean [");

        $r14 = r0.<org.springframework.aop.config.MethodLocatingFactoryBean: java.lang.String targetBeanName>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r9;

     label4:
        return;
    }

    public java.lang.reflect.Method getObject() throws java.lang.Exception
    {
        org.springframework.aop.config.MethodLocatingFactoryBean r0;
        java.lang.reflect.Method $r1;

        r0 := @this: org.springframework.aop.config.MethodLocatingFactoryBean;

        $r1 = r0.<org.springframework.aop.config.MethodLocatingFactoryBean: java.lang.reflect.Method method>;

        return $r1;
    }

    public java.lang.Class getObjectType()
    {
        org.springframework.aop.config.MethodLocatingFactoryBean r0;

        r0 := @this: org.springframework.aop.config.MethodLocatingFactoryBean;

        return class "Ljava/lang/reflect/Method;";
    }

    public boolean isSingleton()
    {
        org.springframework.aop.config.MethodLocatingFactoryBean r0;

        r0 := @this: org.springframework.aop.config.MethodLocatingFactoryBean;

        return 1;
    }

    public volatile java.lang.Object getObject() throws java.lang.Exception
    {
        org.springframework.aop.config.MethodLocatingFactoryBean r0;
        java.lang.reflect.Method $r1;

        r0 := @this: org.springframework.aop.config.MethodLocatingFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.aop.config.MethodLocatingFactoryBean: java.lang.reflect.Method getObject()>();

        return $r1;
    }
}
