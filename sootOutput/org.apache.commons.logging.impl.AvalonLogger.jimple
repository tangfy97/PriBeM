public class org.apache.commons.logging.impl.AvalonLogger extends java.lang.Object implements org.apache.commons.logging.Log
{
    private static org.apache.avalon.framework.logger.Logger defaultLogger;
    private transient org.apache.avalon.framework.logger.Logger logger;

    public void <init>(org.apache.avalon.framework.logger.Logger)
    {
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger r1;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        r1 := @parameter0: org.apache.avalon.framework.logger.Logger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger logger> = null;

        r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger logger> = r1;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String r2;
        org.apache.commons.logging.impl.AvalonLogger r0;
        java.lang.NullPointerException $r5;
        org.apache.avalon.framework.logger.Logger $r1, $r3, $r4;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger logger> = null;

        $r1 = <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger defaultLogger>;

        if $r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("default logger has to be specified if this constructor is used!");

        throw $r5;

     label1:
        $r3 = <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger defaultLogger>;

        $r4 = interfaceinvoke $r3.<org.apache.avalon.framework.logger.Logger: org.apache.avalon.framework.logger.Logger getChildLogger(java.lang.String)>(r2);

        r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger logger> = $r4;

        return;
    }

    public org.apache.avalon.framework.logger.Logger getLogger()
    {
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        $r1 = r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger logger>;

        return $r1;
    }

    public static void setDefaultLogger(org.apache.avalon.framework.logger.Logger)
    {
        org.apache.avalon.framework.logger.Logger r0;

        r0 := @parameter0: org.apache.avalon.framework.logger.Logger;

        <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger defaultLogger> = r0;

        return;
    }

    public void debug(java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r5;
        java.lang.Object r3;
        java.lang.String $r4;
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        r3 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Throwable;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        interfaceinvoke $r2.<org.apache.avalon.framework.logger.Logger: void debug(java.lang.String,java.lang.Throwable)>($r4, r5);

     label1:
        return;
    }

    public void debug(java.lang.Object)
    {
        java.lang.Object r3;
        java.lang.String $r4;
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        r3 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        interfaceinvoke $r2.<org.apache.avalon.framework.logger.Logger: void debug(java.lang.String)>($r4);

     label1:
        return;
    }

    public void error(java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r5;
        java.lang.Object r3;
        java.lang.String $r4;
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        r3 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Throwable;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isErrorEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        interfaceinvoke $r2.<org.apache.avalon.framework.logger.Logger: void error(java.lang.String,java.lang.Throwable)>($r4, r5);

     label1:
        return;
    }

    public void error(java.lang.Object)
    {
        java.lang.Object r3;
        java.lang.String $r4;
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        r3 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isErrorEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        interfaceinvoke $r2.<org.apache.avalon.framework.logger.Logger: void error(java.lang.String)>($r4);

     label1:
        return;
    }

    public void fatal(java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r5;
        java.lang.Object r3;
        java.lang.String $r4;
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        r3 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Throwable;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isFatalErrorEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        interfaceinvoke $r2.<org.apache.avalon.framework.logger.Logger: void fatalError(java.lang.String,java.lang.Throwable)>($r4, r5);

     label1:
        return;
    }

    public void fatal(java.lang.Object)
    {
        java.lang.Object r3;
        java.lang.String $r4;
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        r3 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isFatalErrorEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        interfaceinvoke $r2.<org.apache.avalon.framework.logger.Logger: void fatalError(java.lang.String)>($r4);

     label1:
        return;
    }

    public void info(java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r5;
        java.lang.Object r3;
        java.lang.String $r4;
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        r3 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Throwable;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        interfaceinvoke $r2.<org.apache.avalon.framework.logger.Logger: void info(java.lang.String,java.lang.Throwable)>($r4, r5);

     label1:
        return;
    }

    public void info(java.lang.Object)
    {
        java.lang.Object r3;
        java.lang.String $r4;
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        r3 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        interfaceinvoke $r2.<org.apache.avalon.framework.logger.Logger: void info(java.lang.String)>($r4);

     label1:
        return;
    }

    public boolean isDebugEnabled()
    {
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isDebugEnabled()>();

        return $z0;
    }

    public boolean isErrorEnabled()
    {
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isErrorEnabled()>();

        return $z0;
    }

    public boolean isFatalEnabled()
    {
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isFatalErrorEnabled()>();

        return $z0;
    }

    public boolean isInfoEnabled()
    {
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isInfoEnabled()>();

        return $z0;
    }

    public boolean isTraceEnabled()
    {
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isDebugEnabled()>();

        return $z0;
    }

    public boolean isWarnEnabled()
    {
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isWarnEnabled()>();

        return $z0;
    }

    public void trace(java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r5;
        java.lang.Object r3;
        java.lang.String $r4;
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        r3 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Throwable;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        interfaceinvoke $r2.<org.apache.avalon.framework.logger.Logger: void debug(java.lang.String,java.lang.Throwable)>($r4, r5);

     label1:
        return;
    }

    public void trace(java.lang.Object)
    {
        java.lang.Object r3;
        java.lang.String $r4;
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        r3 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        interfaceinvoke $r2.<org.apache.avalon.framework.logger.Logger: void debug(java.lang.String)>($r4);

     label1:
        return;
    }

    public void warn(java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r5;
        java.lang.Object r3;
        java.lang.String $r4;
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        r3 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Throwable;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isWarnEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        interfaceinvoke $r2.<org.apache.avalon.framework.logger.Logger: void warn(java.lang.String,java.lang.Throwable)>($r4, r5);

     label1:
        return;
    }

    public void warn(java.lang.Object)
    {
        java.lang.Object r3;
        java.lang.String $r4;
        org.apache.commons.logging.impl.AvalonLogger r0;
        org.apache.avalon.framework.logger.Logger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.AvalonLogger;

        r3 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.avalon.framework.logger.Logger: boolean isWarnEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger getLogger()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        interfaceinvoke $r2.<org.apache.avalon.framework.logger.Logger: void warn(java.lang.String)>($r4);

     label1:
        return;
    }

    static void <clinit>()
    {
        <org.apache.commons.logging.impl.AvalonLogger: org.apache.avalon.framework.logger.Logger defaultLogger> = null;

        return;
    }
}
