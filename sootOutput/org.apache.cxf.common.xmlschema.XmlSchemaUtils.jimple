public final class org.apache.cxf.common.xmlschema.XmlSchemaUtils extends java.lang.Object
{
    public static final java.lang.String XSI_NIL;
    public static final java.lang.String XSI_NS_ATTR;
    public static final java.lang.String XSI_NIL_WITH_PREFIX;
    private static final java.util.logging.Logger LOG;
    private static final org.apache.ws.commons.schema.XmlSchemaSequence EMPTY_SEQUENCE;
    private static final org.apache.ws.commons.schema.XmlSchemaChoice EMPTY_CHOICE;
    private static final org.apache.ws.commons.schema.XmlSchemaAll EMPTY_ALL;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.cxf.common.xmlschema.XmlSchemaUtils r0;

        r0 := @this: org.apache.cxf.common.xmlschema.XmlSchemaUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setElementName(org.apache.ws.commons.schema.XmlSchemaElement, java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchemaElement r1;
        java.util.logging.Logger $r6;
        org.apache.ws.commons.schema.utils.XmlSchemaRef $r2;
        java.lang.String r0, $r4, $r9;
        javax.xml.namespace.QName $r3, $r5, $r8;
        org.apache.cxf.common.xmlschema.XmlSchemaInvalidOperation $r7;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: org.apache.ws.commons.schema.XmlSchemaElement;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label2;

        $z0 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaElement: boolean isRef()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaElement: org.apache.ws.commons.schema.utils.XmlSchemaRef getRef()>();

        $r3 = virtualinvoke $r2.<org.apache.ws.commons.schema.utils.XmlSchemaRef: javax.xml.namespace.QName getTargetQName()>();

        $r4 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label2;

        $r5 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaElement: javax.xml.namespace.QName getQName()>();

        if $r5 == null goto label1;

        $r8 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaElement: javax.xml.namespace.QName getQName()>();

        $r9 = virtualinvoke $r8.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label2;

     label1:
        $r6 = <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.util.logging.Logger LOG>;

        virtualinvoke $r6.<java.util.logging.Logger: void severe(java.lang.String)>("Attempt to set the name of an element with a reference name.");

        $r7 = new org.apache.cxf.common.xmlschema.XmlSchemaInvalidOperation;

        specialinvoke $r7.<org.apache.cxf.common.xmlschema.XmlSchemaInvalidOperation: void <init>(java.lang.String)>("Attempt to set the name of an element with a reference name.");

        throw $r7;

     label2:
        virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaElement: void setName(java.lang.String)>(r0);

        return;
    }

    public static void setElementRefName(org.apache.ws.commons.schema.XmlSchemaElement, javax.xml.namespace.QName)
    {
        org.apache.ws.commons.schema.XmlSchemaElement r1;
        java.util.logging.Logger $r6;
        org.apache.ws.commons.schema.utils.XmlSchemaRef $r9;
        javax.xml.namespace.QName r0, $r2, $r8;
        java.lang.String $r3, $r4, $r5;
        org.apache.cxf.common.xmlschema.XmlSchemaInvalidOperation $r7;
        boolean $z0, $z1;

        r1 := @parameter0: org.apache.ws.commons.schema.XmlSchemaElement;

        r0 := @parameter1: javax.xml.namespace.QName;

        if r0 == null goto label3;

        $r2 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaElement: javax.xml.namespace.QName getQName()>();

        if $r2 == null goto label1;

        $r8 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaElement: javax.xml.namespace.QName getQName()>();

        $z1 = virtualinvoke $r8.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $r3 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaElement: java.lang.String getName()>();

        if $r3 == null goto label3;

        $r4 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaElement: java.lang.String getName()>();

        $r5 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

     label2:
        $r6 = <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.util.logging.Logger LOG>;

        virtualinvoke $r6.<java.util.logging.Logger: void severe(java.lang.String)>("Attempt to set the refName of an element with a name or QName");

        $r7 = new org.apache.cxf.common.xmlschema.XmlSchemaInvalidOperation;

        specialinvoke $r7.<org.apache.cxf.common.xmlschema.XmlSchemaInvalidOperation: void <init>(java.lang.String)>("Attempt to set the refName of an element with a name or QName.");

        throw $r7;

     label3:
        $r9 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaElement: org.apache.ws.commons.schema.utils.XmlSchemaRef getRef()>();

        virtualinvoke $r9.<org.apache.ws.commons.schema.utils.XmlSchemaRef: void setTargetQName(javax.xml.namespace.QName)>(r0);

        return;
    }

    public static boolean isEumeration(org.apache.ws.commons.schema.XmlSchemaSimpleType)
    {
        java.util.Iterator $r4;
        org.apache.ws.commons.schema.XmlSchemaSimpleTypeRestriction r2;
        org.apache.ws.commons.schema.XmlSchemaFacet r6;
        java.util.List $r3;
        org.apache.ws.commons.schema.XmlSchemaSimpleType r0;
        org.apache.ws.commons.schema.XmlSchemaSimpleTypeContent $r1;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaSimpleType;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaSimpleType: org.apache.ws.commons.schema.XmlSchemaSimpleTypeContent getContent()>();

        $z0 = $r1 instanceof org.apache.ws.commons.schema.XmlSchemaSimpleTypeRestriction;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.apache.ws.commons.schema.XmlSchemaSimpleTypeRestriction) $r1;

        $r3 = virtualinvoke r2.<org.apache.ws.commons.schema.XmlSchemaSimpleTypeRestriction: java.util.List getFacets()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.ws.commons.schema.XmlSchemaFacet) $r5;

        $z2 = r6 instanceof org.apache.ws.commons.schema.XmlSchemaEnumerationFacet;

        if $z2 != 0 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        return 1;
    }

    public static java.util.List enumeratorValues(org.apache.ws.commons.schema.XmlSchemaSimpleType)
    {
        java.util.Iterator $r5;
        org.apache.ws.commons.schema.XmlSchemaSimpleTypeRestriction r2;
        org.apache.ws.commons.schema.XmlSchemaFacet r7;
        java.util.ArrayList $r4;
        java.util.List $r3;
        org.apache.ws.commons.schema.XmlSchemaSimpleType r0;
        org.apache.ws.commons.schema.XmlSchemaSimpleTypeContent $r1;
        java.lang.Object $r6, $r9;
        java.lang.String $r10;
        boolean $z0;
        org.apache.ws.commons.schema.XmlSchemaEnumerationFacet r8;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaSimpleType;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaSimpleType: org.apache.ws.commons.schema.XmlSchemaSimpleTypeContent getContent()>();

        r2 = (org.apache.ws.commons.schema.XmlSchemaSimpleTypeRestriction) $r1;

        $r3 = virtualinvoke r2.<org.apache.ws.commons.schema.XmlSchemaSimpleTypeRestriction: java.util.List getFacets()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.ws.commons.schema.XmlSchemaFacet) $r6;

        r8 = (org.apache.ws.commons.schema.XmlSchemaEnumerationFacet) r7;

        $r9 = virtualinvoke r8.<org.apache.ws.commons.schema.XmlSchemaEnumerationFacet: java.lang.Object getValue()>();

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        return $r4;
    }

    public static boolean schemaImportsNamespace(org.apache.ws.commons.schema.XmlSchema, java.lang.String)
    {
        java.util.Iterator $r2;
        org.apache.ws.commons.schema.XmlSchemaExternal r4;
        org.apache.ws.commons.schema.XmlSchemaImport r5;
        java.util.List $r1;
        org.apache.ws.commons.schema.XmlSchema r0;
        java.lang.Object $r3;
        java.lang.String r6, $r7;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        r6 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchema: java.util.List getExternals()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.ws.commons.schema.XmlSchemaExternal) $r3;

        $z1 = r4 instanceof org.apache.ws.commons.schema.XmlSchemaImport;

        if $z1 == 0 goto label2;

        r5 = (org.apache.ws.commons.schema.XmlSchemaImport) r4;

        $r7 = virtualinvoke r5.<org.apache.ws.commons.schema.XmlSchemaImport: java.lang.String getNamespace()>();

        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public static void addImportIfNeeded(org.apache.ws.commons.schema.XmlSchema, java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchemaExternal r9;
        org.apache.ws.commons.schema.XmlSchema r3;
        java.lang.String r0, $r1, $r2, $r4, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r6;
        org.apache.ws.commons.schema.XmlSchemaImport $r7, r10;
        java.util.List $r5;
        java.lang.Object $r8;

        r3 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        r0 := @parameter1: java.lang.String;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r2 = "http://www.w3.org/2001/XMLSchema";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label1;

        $r4 = virtualinvoke r3.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getTargetNamespace()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label2;

     label1:
        return;

     label2:
        $r5 = virtualinvoke r3.<org.apache.ws.commons.schema.XmlSchema: java.util.List getExternals()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.ws.commons.schema.XmlSchemaExternal) $r8;

        $z4 = r9 instanceof org.apache.ws.commons.schema.XmlSchemaImport;

        if $z4 == 0 goto label4;

        r10 = (org.apache.ws.commons.schema.XmlSchemaImport) r9;

        $r11 = virtualinvoke r10.<org.apache.ws.commons.schema.XmlSchemaImport: java.lang.String getNamespace()>();

        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z5 == 0 goto label4;

        return;

     label4:
        goto label3;

     label5:
        $r7 = new org.apache.ws.commons.schema.XmlSchemaImport;

        specialinvoke $r7.<org.apache.ws.commons.schema.XmlSchemaImport: void <init>(org.apache.ws.commons.schema.XmlSchema)>(r3);

        virtualinvoke $r7.<org.apache.ws.commons.schema.XmlSchemaImport: void setNamespace(java.lang.String)>(r0);

        return;
    }

    public static void addImportIfNeeded(org.apache.ws.commons.schema.XmlSchema, javax.xml.namespace.QName)
    {
        org.apache.ws.commons.schema.XmlSchema r2;
        javax.xml.namespace.QName r0;
        java.lang.String $r1, $r3;

        r2 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        r0 := @parameter1: javax.xml.namespace.QName;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        if $r1 != null goto label2;

        return;

     label2:
        $r3 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void addImportIfNeeded(org.apache.ws.commons.schema.XmlSchema,java.lang.String)>(r2, $r3);

        return;
    }

    public static org.apache.ws.commons.schema.XmlSchemaElement findElementByRefName(org.apache.cxf.common.xmlschema.SchemaCollection, javax.xml.namespace.QName, java.lang.String)
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r5;
        org.apache.ws.commons.schema.XmlSchemaElement $r6;
        java.lang.AssertionError $r7;
        javax.xml.namespace.QName r0, $r3;
        java.lang.String $r1, $r2, $r4, r8, r9;
        boolean $z0, $z1;

        r5 := @parameter0: org.apache.cxf.common.xmlschema.SchemaCollection;

        r0 := @parameter1: javax.xml.namespace.QName;

        r8 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        r9 = $r1;

        $r2 = "";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r9 = r8;

     label1:
        $r3 = new javax.xml.namespace.QName;

        $r4 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        specialinvoke $r3.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(r9, $r4);

        $r6 = virtualinvoke r5.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaElement getElementByQName(javax.xml.namespace.QName)>($r3);

        $z1 = <org.apache.cxf.common.xmlschema.XmlSchemaUtils: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if $r6 != null goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        return $r6;
    }

    public static javax.xml.namespace.QName getBaseType(org.apache.ws.commons.schema.XmlSchemaComplexType)
    {
        org.apache.ws.commons.schema.XmlSchemaContentModel $r1;
        org.apache.ws.commons.schema.XmlSchemaComplexContentExtension r3;
        org.apache.ws.commons.schema.XmlSchemaContent $r2;
        org.apache.ws.commons.schema.XmlSchemaComplexType r0;
        javax.xml.namespace.QName $r4;
        boolean $z0;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaComplexType;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaComplexType: org.apache.ws.commons.schema.XmlSchemaContentModel getContentModel()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<org.apache.ws.commons.schema.XmlSchemaContentModel: org.apache.ws.commons.schema.XmlSchemaContent getContent()>();

        if $r2 != null goto label2;

        return null;

     label2:
        $z0 = $r2 instanceof org.apache.ws.commons.schema.XmlSchemaComplexContentExtension;

        if $z0 != 0 goto label3;

        return null;

     label3:
        r3 = (org.apache.ws.commons.schema.XmlSchemaComplexContentExtension) $r2;

        $r4 = virtualinvoke r3.<org.apache.ws.commons.schema.XmlSchemaComplexContentExtension: javax.xml.namespace.QName getBaseTypeName()>();

        return $r4;
    }

    public static java.util.List getContentAttributes(org.apache.ws.commons.schema.XmlSchemaComplexType)
    {
        java.util.List $r4;
        org.apache.ws.commons.schema.XmlSchemaContentModel $r1;
        org.apache.ws.commons.schema.XmlSchemaComplexContentExtension r3;
        org.apache.ws.commons.schema.XmlSchemaContent $r2;
        org.apache.ws.commons.schema.XmlSchemaComplexType r0;
        boolean $z0;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaComplexType;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaComplexType: org.apache.ws.commons.schema.XmlSchemaContentModel getContentModel()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<org.apache.ws.commons.schema.XmlSchemaContentModel: org.apache.ws.commons.schema.XmlSchemaContent getContent()>();

        if $r2 != null goto label2;

        return null;

     label2:
        $z0 = $r2 instanceof org.apache.ws.commons.schema.XmlSchemaComplexContentExtension;

        if $z0 != 0 goto label3;

        return null;

     label3:
        r3 = (org.apache.ws.commons.schema.XmlSchemaComplexContentExtension) $r2;

        $r4 = virtualinvoke r3.<org.apache.ws.commons.schema.XmlSchemaComplexContentExtension: java.util.List getAttributes()>();

        return $r4;
    }

    public static java.util.List getContentAttributes(org.apache.ws.commons.schema.XmlSchemaComplexType, org.apache.cxf.common.xmlschema.SchemaCollection)
    {
        org.apache.ws.commons.schema.XmlSchemaComplexType r1, r8;
        org.apache.cxf.common.xmlschema.SchemaCollection r4;
        java.util.ArrayList $r0;
        org.apache.ws.commons.schema.XmlSchemaType $r5;
        java.util.List $r3, $r6, $r7;
        javax.xml.namespace.QName $r2;

        r1 := @parameter0: org.apache.ws.commons.schema.XmlSchemaComplexType;

        r4 := @parameter1: org.apache.cxf.common.xmlschema.SchemaCollection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: javax.xml.namespace.QName getBaseType(org.apache.ws.commons.schema.XmlSchemaComplexType)>(r1);

        if $r2 == null goto label1;

        $r5 = virtualinvoke r4.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaType getTypeByQName(javax.xml.namespace.QName)>($r2);

        r8 = (org.apache.ws.commons.schema.XmlSchemaComplexType) $r5;

        $r6 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.util.List getContentAttributes(org.apache.ws.commons.schema.XmlSchemaComplexType,org.apache.cxf.common.xmlschema.SchemaCollection)>(r8, r4);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r6);

        $r7 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.util.List getContentAttributes(org.apache.ws.commons.schema.XmlSchemaComplexType)>(r1);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        return $r0;

     label1:
        $r3 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaComplexType: java.util.List getAttributes()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        return $r0;
    }

    public static java.util.List getContentElements(org.apache.ws.commons.schema.XmlSchemaComplexType, org.apache.cxf.common.xmlschema.SchemaCollection)
    {
        org.apache.ws.commons.schema.XmlSchemaSequence $r3, $r11;
        org.apache.ws.commons.schema.XmlSchemaComplexType r1, r17;
        org.apache.cxf.common.xmlschema.SchemaCollection r8;
        java.util.ArrayList $r0;
        org.apache.ws.commons.schema.XmlSchemaType $r9;
        boolean $z0, $z1;
        java.util.Iterator $r5, $r13;
        org.apache.ws.commons.schema.XmlSchemaSequenceMember r15, r18;
        java.util.List $r4, $r10, $r12;
        org.apache.ws.commons.schema.XmlSchemaObject $r7, $r16;
        java.lang.Object $r6, $r14;
        javax.xml.namespace.QName $r2;

        r1 := @parameter0: org.apache.ws.commons.schema.XmlSchemaComplexType;

        r8 := @parameter1: org.apache.cxf.common.xmlschema.SchemaCollection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: javax.xml.namespace.QName getBaseType(org.apache.ws.commons.schema.XmlSchemaComplexType)>(r1);

        if $r2 == null goto label3;

        $r9 = virtualinvoke r8.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaType getTypeByQName(javax.xml.namespace.QName)>($r2);

        r17 = (org.apache.ws.commons.schema.XmlSchemaComplexType) $r9;

        $r10 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.util.List getContentElements(org.apache.ws.commons.schema.XmlSchemaComplexType,org.apache.cxf.common.xmlschema.SchemaCollection)>(r17, r8);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        $r11 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: org.apache.ws.commons.schema.XmlSchemaSequence getContentSequence(org.apache.ws.commons.schema.XmlSchemaComplexType)>(r1);

        if $r11 == null goto label2;

        $r12 = virtualinvoke $r11.<org.apache.ws.commons.schema.XmlSchemaSequence: java.util.List getItems()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.ws.commons.schema.XmlSchemaSequenceMember) $r14;

        $r16 = (org.apache.ws.commons.schema.XmlSchemaObject) r15;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label1;

     label2:
        return $r0;

     label3:
        $r3 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: org.apache.ws.commons.schema.XmlSchemaSequence getSequence(org.apache.ws.commons.schema.XmlSchemaComplexType)>(r1);

        $r4 = virtualinvoke $r3.<org.apache.ws.commons.schema.XmlSchemaSequence: java.util.List getItems()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.apache.ws.commons.schema.XmlSchemaSequenceMember) $r6;

        $r7 = (org.apache.ws.commons.schema.XmlSchemaObject) r18;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label4;

     label5:
        return $r0;
    }

    public static org.apache.ws.commons.schema.XmlSchemaSequence getContentSequence(org.apache.ws.commons.schema.XmlSchemaComplexType)
    {
        org.apache.ws.commons.schema.XmlSchemaContentModel $r1;
        org.apache.ws.commons.schema.XmlSchemaSequence r6;
        org.apache.ws.commons.schema.XmlSchemaParticle $r4;
        org.apache.ws.commons.schema.XmlSchemaComplexType r0;
        java.lang.ClassCastException $r5;
        org.apache.ws.commons.schema.XmlSchemaComplexContentExtension r3;
        org.apache.ws.commons.schema.XmlSchemaContent $r2;
        boolean $z0;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaComplexType;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaComplexType: org.apache.ws.commons.schema.XmlSchemaContentModel getContentModel()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<org.apache.ws.commons.schema.XmlSchemaContentModel: org.apache.ws.commons.schema.XmlSchemaContent getContent()>();

        if $r2 != null goto label2;

        return null;

     label2:
        $z0 = $r2 instanceof org.apache.ws.commons.schema.XmlSchemaComplexContentExtension;

        if $z0 != 0 goto label3;

        return null;

     label3:
        r3 = (org.apache.ws.commons.schema.XmlSchemaComplexContentExtension) $r2;

        $r4 = virtualinvoke r3.<org.apache.ws.commons.schema.XmlSchemaComplexContentExtension: org.apache.ws.commons.schema.XmlSchemaParticle getParticle()>();

        if $r4 != null goto label4;

        return null;

     label4:
        r6 = null;

     label5:
        r6 = (org.apache.ws.commons.schema.XmlSchemaSequence) $r4;

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void unsupportedConstruct(java.lang.String,org.apache.ws.commons.schema.XmlSchemaType)>("NON_SEQUENCE_PARTICLE", r0);

     label8:
        return r6;

        catch java.lang.ClassCastException from label5 to label6 with label7;
    }

    public static javax.xml.namespace.QName getElementQualifiedName(org.apache.ws.commons.schema.XmlSchemaElement, org.apache.ws.commons.schema.XmlSchema)
    {
        org.apache.ws.commons.schema.XmlSchemaElement r0;
        org.apache.ws.commons.schema.XmlSchema r4;
        javax.xml.namespace.QName $r1, $r3, $r7;
        java.lang.String $r2, $r5, $r6;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaElement;

        r4 := @parameter1: org.apache.ws.commons.schema.XmlSchema;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaElement: javax.xml.namespace.QName getQName()>();

        if $r1 == null goto label1;

        $r7 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaElement: javax.xml.namespace.QName getQName()>();

        return $r7;

     label1:
        $r2 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaElement: java.lang.String getName()>();

        if $r2 == null goto label2;

        $r3 = new javax.xml.namespace.QName;

        $r5 = virtualinvoke r4.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getTargetNamespace()>();

        $r6 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaElement: java.lang.String getName()>();

        specialinvoke $r3.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r5, $r6);

        return $r3;

     label2:
        return null;
    }

    public static org.apache.ws.commons.schema.XmlSchemaType getElementType(org.apache.cxf.common.xmlschema.SchemaCollection, java.lang.String, org.apache.ws.commons.schema.XmlSchemaElement, org.apache.ws.commons.schema.XmlSchemaType)
    {
        java.lang.Object[] $r15;
        org.apache.cxf.common.xmlschema.SchemaCollection r1;
        java.lang.AssertionError $r10, $r21;
        org.apache.ws.commons.schema.XmlSchemaElement r23, r24, r26;
        org.apache.cxf.common.i18n.Message $r14;
        org.apache.ws.commons.schema.XmlSchemaType $r3, $r4, r6, $r13, $r25;
        org.apache.ws.commons.schema.XmlSchema $r2;
        java.lang.String $r5, $r19, r22;
        boolean $z0, $z1, $z2;
        java.util.logging.Logger $r16;
        org.apache.cxf.common.xmlschema.UnsupportedConstruct $r20;
        org.apache.ws.commons.schema.utils.XmlSchemaRef $r8;
        org.apache.ws.commons.schema.utils.XmlSchemaNamed $r9;
        javax.xml.namespace.QName $r0, $r7, $r11, $r12, $r17, $r18;

        r1 := @parameter0: org.apache.cxf.common.xmlschema.SchemaCollection;

        r22 := @parameter1: java.lang.String;

        r23 := @parameter2: org.apache.ws.commons.schema.XmlSchemaElement;

        r6 := @parameter3: org.apache.ws.commons.schema.XmlSchemaType;

        $z0 = <org.apache.cxf.common.xmlschema.XmlSchemaUtils: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r23 != null goto label1;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label1:
        $r0 = virtualinvoke r23.<org.apache.ws.commons.schema.XmlSchemaElement: javax.xml.namespace.QName getSchemaTypeName()>();

        if $r0 == null goto label3;

        $r12 = virtualinvoke r23.<org.apache.ws.commons.schema.XmlSchemaElement: javax.xml.namespace.QName getSchemaTypeName()>();

        $r13 = virtualinvoke r1.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaType getTypeByQName(javax.xml.namespace.QName)>($r12);

        if $r13 != null goto label2;

        $r14 = new org.apache.cxf.common.i18n.Message;

        $r16 = <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.util.logging.Logger LOG>;

        $r15 = newarray (java.lang.Object)[2];

        $r17 = virtualinvoke r23.<org.apache.ws.commons.schema.XmlSchemaElement: javax.xml.namespace.QName getQName()>();

        $r15[0] = $r17;

        $r18 = virtualinvoke r23.<org.apache.ws.commons.schema.XmlSchemaElement: javax.xml.namespace.QName getSchemaTypeName()>();

        $r19 = virtualinvoke $r18.<javax.xml.namespace.QName: java.lang.String toString()>();

        $r15[1] = $r19;

        specialinvoke $r14.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("ELEMENT_TYPE_MISSING", $r16, $r15);

        $r20 = new org.apache.cxf.common.xmlschema.UnsupportedConstruct;

        specialinvoke $r20.<org.apache.cxf.common.xmlschema.UnsupportedConstruct: void <init>(org.apache.cxf.common.i18n.Message)>($r14);

        throw $r20;

     label2:
        return $r13;

     label3:
        $r2 = virtualinvoke r1.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchema getSchemaByTargetNamespace(java.lang.String)>(r22);

        if $r2 != null goto label4;

        r22 = null;

     label4:
        if r22 != null goto label5;

        if r6 == null goto label5;

        $r11 = virtualinvoke r6.<org.apache.ws.commons.schema.XmlSchemaType: javax.xml.namespace.QName getQName()>();

        virtualinvoke $r11.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

     label5:
        r24 = r23;

     label6:
        $r25 = virtualinvoke r23.<org.apache.ws.commons.schema.XmlSchemaElement: org.apache.ws.commons.schema.XmlSchemaType getSchemaType()>();

        if $r25 != null goto label8;

        $z1 = virtualinvoke r23.<org.apache.ws.commons.schema.XmlSchemaElement: boolean isRef()>();

        if $z1 == 0 goto label8;

        $r8 = virtualinvoke r23.<org.apache.ws.commons.schema.XmlSchemaElement: org.apache.ws.commons.schema.utils.XmlSchemaRef getRef()>();

        $r9 = virtualinvoke $r8.<org.apache.ws.commons.schema.utils.XmlSchemaRef: org.apache.ws.commons.schema.utils.XmlSchemaNamed getTarget()>();

        r26 = (org.apache.ws.commons.schema.XmlSchemaElement) $r9;

        $z2 = <org.apache.cxf.common.xmlschema.XmlSchemaUtils: boolean $assertionsDisabled>;

        if $z2 != 0 goto label7;

        if r26 != null goto label7;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label7:
        r23 = r26;

        goto label6;

     label8:
        $r3 = virtualinvoke r23.<org.apache.ws.commons.schema.XmlSchemaElement: org.apache.ws.commons.schema.XmlSchemaType getSchemaType()>();

        if $r3 != null goto label9;

        $r5 = virtualinvoke r24.<org.apache.ws.commons.schema.XmlSchemaElement: java.lang.String getName()>();

        $r7 = virtualinvoke r6.<org.apache.ws.commons.schema.XmlSchemaType: javax.xml.namespace.QName getQName()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void unsupportedConstruct(java.lang.String,java.lang.String,javax.xml.namespace.QName,org.apache.ws.commons.schema.XmlSchemaObject)>("ELEMENT_HAS_NO_TYPE", $r5, $r7, r6);

     label9:
        $r4 = virtualinvoke r23.<org.apache.ws.commons.schema.XmlSchemaElement: org.apache.ws.commons.schema.XmlSchemaType getSchemaType()>();

        return $r4;
    }

    public static org.apache.ws.commons.schema.XmlSchemaAnnotated getObjectAnnotated(org.apache.ws.commons.schema.XmlSchemaObject, javax.xml.namespace.QName)
    {
        org.apache.ws.commons.schema.XmlSchemaObject r0;
        java.lang.Class $r1, $r4;
        java.lang.String $r2, $r5;
        javax.xml.namespace.QName r3;
        org.apache.ws.commons.schema.XmlSchemaAnnotated $r6;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaObject;

        r3 := @parameter1: javax.xml.namespace.QName;

        $z0 = r0 instanceof org.apache.ws.commons.schema.XmlSchemaAnnotated;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void unsupportedConstruct(java.lang.String,java.lang.String,javax.xml.namespace.QName,org.apache.ws.commons.schema.XmlSchemaObject)>("NON_ANNOTATED_ATTRIBUTE", $r5, r3, r0);

     label1:
        $z1 = r0 instanceof org.apache.ws.commons.schema.XmlSchemaAttribute;

        if $z1 != 0 goto label2;

        $z2 = r0 instanceof org.apache.ws.commons.schema.XmlSchemaAnyAttribute;

        if $z2 != 0 goto label2;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void unsupportedConstruct(java.lang.String,java.lang.String,javax.xml.namespace.QName,org.apache.ws.commons.schema.XmlSchemaObject)>("EXOTIC_ATTRIBUTE", $r2, r3, r0);

     label2:
        $r6 = (org.apache.ws.commons.schema.XmlSchemaAnnotated) r0;

        return $r6;
    }

    public static org.apache.ws.commons.schema.XmlSchemaParticle getObjectParticle(org.apache.ws.commons.schema.XmlSchemaObject, javax.xml.namespace.QName)
    {
        org.apache.ws.commons.schema.XmlSchemaParticle $r6;
        org.apache.ws.commons.schema.XmlSchemaObject r0;
        java.lang.Class $r1, $r4;
        java.lang.String $r2, $r5;
        javax.xml.namespace.QName r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaObject;

        r3 := @parameter1: javax.xml.namespace.QName;

        $z0 = r0 instanceof org.apache.ws.commons.schema.XmlSchemaParticle;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void unsupportedConstruct(java.lang.String,java.lang.String,javax.xml.namespace.QName,org.apache.ws.commons.schema.XmlSchemaObject)>("NON_PARTICLE_CHILD", $r5, r3, r0);

     label1:
        $z1 = r0 instanceof org.apache.ws.commons.schema.XmlSchemaElement;

        if $z1 != 0 goto label2;

        $z2 = r0 instanceof org.apache.ws.commons.schema.XmlSchemaAny;

        if $z2 != 0 goto label2;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void unsupportedConstruct(java.lang.String,java.lang.String,javax.xml.namespace.QName,org.apache.ws.commons.schema.XmlSchemaObject)>("GROUP_CHILD", $r2, r3, r0);

     label2:
        $r6 = (org.apache.ws.commons.schema.XmlSchemaParticle) r0;

        return $r6;
    }

    public static org.apache.ws.commons.schema.XmlSchemaElement getReferredElement(org.apache.ws.commons.schema.XmlSchemaElement, org.apache.cxf.common.xmlschema.SchemaCollection)
    {
        org.apache.ws.commons.schema.utils.XmlSchemaRef $r1;
        org.apache.ws.commons.schema.utils.XmlSchemaNamed $r2;
        org.apache.cxf.common.xmlschema.SchemaCollection r5;
        org.apache.ws.commons.schema.XmlSchemaElement r0, r3;
        java.lang.RuntimeException $r4;
        boolean $z0;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaElement;

        r5 := @parameter1: org.apache.cxf.common.xmlschema.SchemaCollection;

        $z0 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaElement: boolean isRef()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaElement: org.apache.ws.commons.schema.utils.XmlSchemaRef getRef()>();

        $r2 = virtualinvoke $r1.<org.apache.ws.commons.schema.utils.XmlSchemaRef: org.apache.ws.commons.schema.utils.XmlSchemaNamed getTarget()>();

        r3 = (org.apache.ws.commons.schema.XmlSchemaElement) $r2;

        if r3 != null goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Dangling reference");

        throw $r4;

     label1:
        return r3;

     label2:
        return null;
    }

    public static org.apache.ws.commons.schema.XmlSchemaSequence getSequence(org.apache.ws.commons.schema.XmlSchemaComplexType)
    {
        org.apache.ws.commons.schema.XmlSchemaSequence $r2, r4;
        org.apache.ws.commons.schema.XmlSchemaParticle $r1;
        org.apache.ws.commons.schema.XmlSchemaComplexType r0;
        java.lang.ClassCastException $r3;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaComplexType;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaComplexType: org.apache.ws.commons.schema.XmlSchemaParticle getParticle()>();

        r4 = null;

        if $r1 != null goto label1;

        $r2 = <org.apache.cxf.common.xmlschema.XmlSchemaUtils: org.apache.ws.commons.schema.XmlSchemaSequence EMPTY_SEQUENCE>;

        return $r2;

     label1:
        r4 = (org.apache.ws.commons.schema.XmlSchemaSequence) $r1;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void unsupportedConstruct(java.lang.String,org.apache.ws.commons.schema.XmlSchemaType)>("NON_SEQUENCE_PARTICLE", r0);

     label4:
        return r4;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static org.apache.ws.commons.schema.XmlSchemaChoice getChoice(org.apache.ws.commons.schema.XmlSchemaComplexType)
    {
        org.apache.ws.commons.schema.XmlSchemaChoice $r2, r4;
        org.apache.ws.commons.schema.XmlSchemaParticle $r1;
        org.apache.ws.commons.schema.XmlSchemaComplexType r0;
        java.lang.ClassCastException $r3;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaComplexType;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaComplexType: org.apache.ws.commons.schema.XmlSchemaParticle getParticle()>();

        r4 = null;

        if $r1 != null goto label1;

        $r2 = <org.apache.cxf.common.xmlschema.XmlSchemaUtils: org.apache.ws.commons.schema.XmlSchemaChoice EMPTY_CHOICE>;

        return $r2;

     label1:
        r4 = (org.apache.ws.commons.schema.XmlSchemaChoice) $r1;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void unsupportedConstruct(java.lang.String,org.apache.ws.commons.schema.XmlSchemaType)>("NON_CHOICE_PARTICLE", r0);

     label4:
        return r4;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static org.apache.ws.commons.schema.XmlSchemaAll getAll(org.apache.ws.commons.schema.XmlSchemaComplexType)
    {
        org.apache.ws.commons.schema.XmlSchemaParticle $r1;
        org.apache.ws.commons.schema.XmlSchemaComplexType r0;
        java.lang.ClassCastException $r3;
        org.apache.ws.commons.schema.XmlSchemaAll $r2, r4;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaComplexType;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaComplexType: org.apache.ws.commons.schema.XmlSchemaParticle getParticle()>();

        r4 = null;

        if $r1 != null goto label1;

        $r2 = <org.apache.cxf.common.xmlschema.XmlSchemaUtils: org.apache.ws.commons.schema.XmlSchemaAll EMPTY_ALL>;

        return $r2;

     label1:
        r4 = (org.apache.ws.commons.schema.XmlSchemaAll) $r1;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void unsupportedConstruct(java.lang.String,org.apache.ws.commons.schema.XmlSchemaType)>("NON_CHOICE_PARTICLE", r0);

     label4:
        return r4;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static boolean isAttributeNameQualified(org.apache.ws.commons.schema.XmlSchemaAttribute, org.apache.ws.commons.schema.XmlSchema)
    {
        org.apache.ws.commons.schema.XmlSchemaForm $r1, $r2, $r3, $r4, $r6, $r7;
        org.apache.ws.commons.schema.XmlSchemaAttribute r0;
        java.lang.RuntimeException $r8;
        org.apache.ws.commons.schema.XmlSchema r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaAttribute;

        r5 := @parameter1: org.apache.ws.commons.schema.XmlSchema;

        $z0 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaAttribute: boolean isRef()>();

        if $z0 == 0 goto label1;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("isElementNameQualified on element with ref=");

        throw $r8;

     label1:
        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaAttribute: org.apache.ws.commons.schema.XmlSchemaForm getForm()>();

        $r2 = <org.apache.ws.commons.schema.XmlSchemaForm: org.apache.ws.commons.schema.XmlSchemaForm QUALIFIED>;

        $z1 = virtualinvoke $r1.<org.apache.ws.commons.schema.XmlSchemaForm: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r3 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaAttribute: org.apache.ws.commons.schema.XmlSchemaForm getForm()>();

        $r4 = <org.apache.ws.commons.schema.XmlSchemaForm: org.apache.ws.commons.schema.XmlSchemaForm UNQUALIFIED>;

        $z2 = virtualinvoke $r3.<org.apache.ws.commons.schema.XmlSchemaForm: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        $r6 = virtualinvoke r5.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaForm getAttributeFormDefault()>();

        $r7 = <org.apache.ws.commons.schema.XmlSchemaForm: org.apache.ws.commons.schema.XmlSchemaForm QUALIFIED>;

        $z3 = virtualinvoke $r6.<org.apache.ws.commons.schema.XmlSchemaForm: boolean equals(java.lang.Object)>($r7);

        return $z3;
    }

    public static boolean isAttributeQualified(org.apache.ws.commons.schema.XmlSchemaAttribute, boolean, org.apache.ws.commons.schema.XmlSchema, org.apache.ws.commons.schema.XmlSchema)
    {
        org.apache.ws.commons.schema.XmlSchemaAttribute r0;
        java.lang.RuntimeException $r7, $r8;
        org.apache.ws.commons.schema.XmlSchema r2, r3;
        javax.xml.namespace.QName $r1, $r4;
        java.lang.String $r5, $r6;
        boolean $z0, z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaAttribute;

        z1 := @parameter1: boolean;

        r3 := @parameter2: org.apache.ws.commons.schema.XmlSchema;

        r2 := @parameter3: org.apache.ws.commons.schema.XmlSchema;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaAttribute: javax.xml.namespace.QName getQName()>();

        if $r1 != null goto label1;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("getSchemaQualifier on anonymous element.");

        throw $r8;

     label1:
        $z0 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaAttribute: boolean isRef()>();

        if $z0 == 0 goto label2;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("getSchemaQualified on the \'from\' side of ref=.");

        throw $r7;

     label2:
        if z1 == 0 goto label6;

        $z3 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: boolean isAttributeNameQualified(org.apache.ws.commons.schema.XmlSchemaAttribute,org.apache.ws.commons.schema.XmlSchema)>(r0, r2);

        if $z3 != 0 goto label3;

        if r3 == null goto label4;

        $r4 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaAttribute: javax.xml.namespace.QName getQName()>();

        $r5 = virtualinvoke $r4.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r6 = virtualinvoke r3.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getTargetNamespace()>();

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z4 != 0 goto label4;

     label3:
        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        return $z5;

     label6:
        $z2 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: boolean isAttributeNameQualified(org.apache.ws.commons.schema.XmlSchemaAttribute,org.apache.ws.commons.schema.XmlSchema)>(r0, r2);

        return $z2;
    }

    public static boolean isComplexType(org.apache.ws.commons.schema.XmlSchemaType)
    {
        org.apache.ws.commons.schema.XmlSchemaType r0;
        boolean $z0;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaType;

        $z0 = r0 instanceof org.apache.ws.commons.schema.XmlSchemaComplexType;

        return $z0;
    }

    public static boolean isElementNameQualified(org.apache.ws.commons.schema.XmlSchemaElement, org.apache.ws.commons.schema.XmlSchema)
    {
        org.apache.ws.commons.schema.XmlSchemaForm $r1, $r2, $r3, $r4, $r6, $r7;
        org.apache.ws.commons.schema.XmlSchemaElement r0;
        java.lang.RuntimeException $r8;
        org.apache.ws.commons.schema.XmlSchema r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaElement;

        r5 := @parameter1: org.apache.ws.commons.schema.XmlSchema;

        $z0 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaElement: boolean isRef()>();

        if $z0 == 0 goto label1;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("isElementNameQualified on element with ref=");

        throw $r8;

     label1:
        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaElement: org.apache.ws.commons.schema.XmlSchemaForm getForm()>();

        $r2 = <org.apache.ws.commons.schema.XmlSchemaForm: org.apache.ws.commons.schema.XmlSchemaForm QUALIFIED>;

        $z1 = virtualinvoke $r1.<org.apache.ws.commons.schema.XmlSchemaForm: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r3 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaElement: org.apache.ws.commons.schema.XmlSchemaForm getForm()>();

        $r4 = <org.apache.ws.commons.schema.XmlSchemaForm: org.apache.ws.commons.schema.XmlSchemaForm UNQUALIFIED>;

        $z2 = virtualinvoke $r3.<org.apache.ws.commons.schema.XmlSchemaForm: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        $r6 = virtualinvoke r5.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaForm getElementFormDefault()>();

        $r7 = <org.apache.ws.commons.schema.XmlSchemaForm: org.apache.ws.commons.schema.XmlSchemaForm QUALIFIED>;

        $z3 = virtualinvoke $r6.<org.apache.ws.commons.schema.XmlSchemaForm: boolean equals(java.lang.Object)>($r7);

        return $z3;
    }

    public static boolean isElementQualified(org.apache.ws.commons.schema.XmlSchemaElement, boolean, org.apache.ws.commons.schema.XmlSchema, org.apache.ws.commons.schema.XmlSchema)
    {
        org.apache.ws.commons.schema.XmlSchemaElement r0;
        java.lang.RuntimeException $r6, $r7;
        org.apache.ws.commons.schema.XmlSchema r1, r3;
        javax.xml.namespace.QName $r2;
        java.lang.String $r4, $r5;
        boolean $z0, z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaElement;

        z1 := @parameter1: boolean;

        r1 := @parameter2: org.apache.ws.commons.schema.XmlSchema;

        r3 := @parameter3: org.apache.ws.commons.schema.XmlSchema;

        $r2 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: javax.xml.namespace.QName getElementQualifiedName(org.apache.ws.commons.schema.XmlSchemaElement,org.apache.ws.commons.schema.XmlSchema)>(r0, r1);

        if $r2 != null goto label1;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("isElementQualified on anonymous element.");

        throw $r7;

     label1:
        $z0 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaElement: boolean isRef()>();

        if $z0 == 0 goto label2;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("isElementQualified on the \'from\' side of ref=.");

        throw $r6;

     label2:
        if z1 == 0 goto label6;

        $z3 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: boolean isElementNameQualified(org.apache.ws.commons.schema.XmlSchemaElement,org.apache.ws.commons.schema.XmlSchema)>(r0, r3);

        if $z3 != 0 goto label3;

        if r1 == null goto label4;

        $r4 = virtualinvoke $r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r5 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getTargetNamespace()>();

        $z4 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z4 != 0 goto label4;

     label3:
        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        return $z5;

     label6:
        $z2 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: boolean isElementNameQualified(org.apache.ws.commons.schema.XmlSchemaElement,org.apache.ws.commons.schema.XmlSchema)>(r0, r3);

        return $z2;
    }

    public static boolean isParticleArray(org.apache.ws.commons.schema.XmlSchemaParticle)
    {
        byte $b1;
        org.apache.ws.commons.schema.XmlSchemaParticle r0;
        int $i2;
        long $l0;
        boolean $z0;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaParticle;

        $l0 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaParticle: long getMaxOccurs()>();

        $b1 = $l0 cmp 1L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isParticleOptional(org.apache.ws.commons.schema.XmlSchemaParticle)
    {
        byte $b1, $b3;
        org.apache.ws.commons.schema.XmlSchemaParticle r0;
        long $l0, $l2;
        boolean $z0;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaParticle;

        $l0 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaParticle: long getMinOccurs()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l2 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaParticle: long getMaxOccurs()>();

        $b3 = $l2 cmp 1L;

        if $b3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void unsupportedConstruct(java.lang.String, java.lang.String, javax.xml.namespace.QName, org.apache.ws.commons.schema.XmlSchemaObject)
    {
        java.lang.Object[] $r2;
        org.apache.cxf.common.i18n.Message $r0;
        java.util.logging.Logger $r6, $r8;
        org.apache.cxf.common.xmlschema.UnsupportedConstruct $r10;
        java.io.Serializable $r11;
        org.apache.ws.commons.schema.XmlSchemaObject r5;
        java.lang.String r1, r3, $r7, $r9;
        javax.xml.namespace.QName r4;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: javax.xml.namespace.QName;

        r5 := @parameter3: org.apache.ws.commons.schema.XmlSchemaObject;

        $r0 = new org.apache.cxf.common.i18n.Message;

        $r6 = <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.util.logging.Logger LOG>;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = r3;

        if r4 != null goto label1;

        $r11 = "anonymous";

        goto label2;

     label1:
        $r11 = r4;

     label2:
        $r2[1] = $r11;

        $r7 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.lang.String cleanedUpSchemaSource(org.apache.ws.commons.schema.XmlSchemaObject)>(r5);

        $r2[2] = $r7;

        specialinvoke $r0.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>(r1, $r6, $r2);

        $r8 = <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.util.logging.Logger LOG>;

        $r9 = virtualinvoke $r0.<org.apache.cxf.common.i18n.Message: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void severe(java.lang.String)>($r9);

        $r10 = new org.apache.cxf.common.xmlschema.UnsupportedConstruct;

        specialinvoke $r10.<org.apache.cxf.common.xmlschema.UnsupportedConstruct: void <init>(org.apache.cxf.common.i18n.Message)>($r0);

        throw $r10;
    }

    public static void unsupportedConstruct(java.lang.String, org.apache.ws.commons.schema.XmlSchemaType)
    {
        java.lang.Object[] $r2;
        org.apache.cxf.common.i18n.Message $r0;
        java.util.logging.Logger $r4, $r7;
        org.apache.cxf.common.xmlschema.UnsupportedConstruct $r9;
        org.apache.ws.commons.schema.XmlSchemaType r3;
        java.lang.String r1, $r6, $r8;
        javax.xml.namespace.QName $r5;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.ws.commons.schema.XmlSchemaType;

        $r0 = new org.apache.cxf.common.i18n.Message;

        $r4 = <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.util.logging.Logger LOG>;

        $r2 = newarray (java.lang.Object)[2];

        $r5 = virtualinvoke r3.<org.apache.ws.commons.schema.XmlSchemaType: javax.xml.namespace.QName getQName()>();

        $r2[0] = $r5;

        $r6 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.lang.String cleanedUpSchemaSource(org.apache.ws.commons.schema.XmlSchemaObject)>(r3);

        $r2[1] = $r6;

        specialinvoke $r0.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>(r1, $r4, $r2);

        $r7 = <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.util.logging.Logger LOG>;

        $r8 = virtualinvoke $r0.<org.apache.cxf.common.i18n.Message: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void severe(java.lang.String)>($r8);

        $r9 = new org.apache.cxf.common.xmlschema.UnsupportedConstruct;

        specialinvoke $r9.<org.apache.cxf.common.xmlschema.UnsupportedConstruct: void <init>(org.apache.cxf.common.i18n.Message)>($r0);

        throw $r9;
    }

    public static java.lang.String cleanedUpSchemaSource(org.apache.ws.commons.schema.XmlSchemaObject)
    {
        org.apache.ws.commons.schema.XmlSchemaObject r0;
        int $i0;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;
        java.lang.String $r1, $r3, $r7;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchemaObject;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaObject: java.lang.String getSourceURI()>();

        if $r1 != null goto label2;

     label1:
        return "";

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaObject: java.lang.String getSourceURI()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i0 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaObject: int getLineNumber()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static void <clinit>()
    {
        org.apache.ws.commons.schema.XmlSchemaSequence $r2;
        org.apache.ws.commons.schema.XmlSchemaChoice $r3;
        java.lang.Class $r0;
        java.util.logging.Logger $r1;
        org.apache.ws.commons.schema.XmlSchemaAll $r4;
        boolean $z0, $z1;

        <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.lang.String XSI_NIL_WITH_PREFIX> = "xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\' xsi:nil=\'true\'";

        <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.lang.String XSI_NS_ATTR> = "xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\'";

        <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.lang.String XSI_NIL> = "xsi:nil=\'true\'";

        $r0 = class "Lorg/apache/cxf/common/xmlschema/XmlSchemaUtils;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.cxf.common.xmlschema.XmlSchemaUtils: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/common/xmlschema/XmlSchemaUtils;");

        <org.apache.cxf.common.xmlschema.XmlSchemaUtils: java.util.logging.Logger LOG> = $r1;

        $r2 = new org.apache.ws.commons.schema.XmlSchemaSequence;

        specialinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaSequence: void <init>()>();

        <org.apache.cxf.common.xmlschema.XmlSchemaUtils: org.apache.ws.commons.schema.XmlSchemaSequence EMPTY_SEQUENCE> = $r2;

        $r3 = new org.apache.ws.commons.schema.XmlSchemaChoice;

        specialinvoke $r3.<org.apache.ws.commons.schema.XmlSchemaChoice: void <init>()>();

        <org.apache.cxf.common.xmlschema.XmlSchemaUtils: org.apache.ws.commons.schema.XmlSchemaChoice EMPTY_CHOICE> = $r3;

        $r4 = new org.apache.ws.commons.schema.XmlSchemaAll;

        specialinvoke $r4.<org.apache.ws.commons.schema.XmlSchemaAll: void <init>()>();

        <org.apache.cxf.common.xmlschema.XmlSchemaUtils: org.apache.ws.commons.schema.XmlSchemaAll EMPTY_ALL> = $r4;

        return;
    }
}
