public class org.apache.lucene.queryparser.xml.builders.TermsQueryBuilder extends java.lang.Object implements org.apache.lucene.queryparser.xml.QueryBuilder
{
    private final org.apache.lucene.analysis.Analyzer analyzer;

    public void <init>(org.apache.lucene.analysis.Analyzer)
    {
        org.apache.lucene.queryparser.xml.builders.TermsQueryBuilder r0;
        org.apache.lucene.analysis.Analyzer r1;

        r0 := @this: org.apache.lucene.queryparser.xml.builders.TermsQueryBuilder;

        r1 := @parameter0: org.apache.lucene.analysis.Analyzer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.queryparser.xml.builders.TermsQueryBuilder: org.apache.lucene.analysis.Analyzer analyzer> = r1;

        return;
    }

    public org.apache.lucene.search.Query getQuery(org.w3c.dom.Element) throws org.apache.lucene.queryparser.xml.ParserException
    {
        org.apache.lucene.queryparser.xml.builders.TermsQueryBuilder r4;
        org.apache.lucene.index.Term $r11;
        int $i0;
        java.lang.String $r1, $r2, $r21;
        org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute r9;
        org.apache.lucene.search.BooleanClause$Occur $r15;
        boolean $z0, $z1;
        org.apache.lucene.analysis.TokenStream $r7;
        org.apache.lucene.util.BytesRef $r10, $r12;
        org.apache.lucene.analysis.Analyzer $r6;
        java.io.IOException $r16;
        java.lang.RuntimeException $r17;
        org.apache.lucene.search.BooleanClause $r13;
        org.apache.lucene.search.TermQuery $r14;
        org.w3c.dom.Element r0;
        org.apache.lucene.search.BooleanQuery $r3;
        java.io.StringReader $r5;
        float $f0;
        java.lang.StringBuilder $r18, $r19, $r20;
        org.apache.lucene.util.Attribute $r8;

        r4 := @this: org.apache.lucene.queryparser.xml.builders.TermsQueryBuilder;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: java.lang.String getAttributeWithInheritanceOrFail(org.w3c.dom.Element,java.lang.String)>(r0, "fieldName");

        $r2 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: java.lang.String getNonBlankTextOrFail(org.w3c.dom.Element)>(r0);

        $r3 = new org.apache.lucene.search.BooleanQuery;

        $z0 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: boolean getAttribute(org.w3c.dom.Element,java.lang.String,boolean)>(r0, "disableCoord", 0);

        specialinvoke $r3.<org.apache.lucene.search.BooleanQuery: void <init>(boolean)>($z0);

        $i0 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: int getAttribute(org.w3c.dom.Element,java.lang.String,int)>(r0, "minimumNumberShouldMatch", 0);

        virtualinvoke $r3.<org.apache.lucene.search.BooleanQuery: void setMinimumNumberShouldMatch(int)>($i0);

     label1:
        $r6 = r4.<org.apache.lucene.queryparser.xml.builders.TermsQueryBuilder: org.apache.lucene.analysis.Analyzer analyzer>;

        $r5 = new java.io.StringReader;

        specialinvoke $r5.<java.io.StringReader: void <init>(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String,java.io.Reader)>($r1, $r5);

        $r8 = virtualinvoke $r7.<org.apache.lucene.analysis.TokenStream: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute;");

        r9 = (org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute) $r8;

        $r10 = interfaceinvoke r9.<org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute: org.apache.lucene.util.BytesRef getBytesRef()>();

        virtualinvoke $r7.<org.apache.lucene.analysis.TokenStream: void reset()>();

     label2:
        $z1 = virtualinvoke $r7.<org.apache.lucene.analysis.TokenStream: boolean incrementToken()>();

        if $z1 == 0 goto label3;

        interfaceinvoke r9.<org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute: int fillBytesRef()>();

        $r11 = new org.apache.lucene.index.Term;

        $r12 = staticinvoke <org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef deepCopyOf(org.apache.lucene.util.BytesRef)>($r10);

        specialinvoke $r11.<org.apache.lucene.index.Term: void <init>(java.lang.String,org.apache.lucene.util.BytesRef)>($r1, $r12);

        $r13 = new org.apache.lucene.search.BooleanClause;

        $r14 = new org.apache.lucene.search.TermQuery;

        specialinvoke $r14.<org.apache.lucene.search.TermQuery: void <init>(org.apache.lucene.index.Term)>($r11);

        $r15 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        specialinvoke $r13.<org.apache.lucene.search.BooleanClause: void <init>(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r14, $r15);

        virtualinvoke $r3.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.BooleanClause)>($r13);

        goto label2;

     label3:
        virtualinvoke $r7.<org.apache.lucene.analysis.TokenStream: void end()>();

        virtualinvoke $r7.<org.apache.lucene.analysis.TokenStream: void close()>();

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error constructing terms from index:");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label6:
        $f0 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: float getAttribute(org.w3c.dom.Element,java.lang.String,float)>(r0, "boost", 1.0F);

        virtualinvoke $r3.<org.apache.lucene.search.BooleanQuery: void setBoost(float)>($f0);

        return $r3;

        catch java.io.IOException from label1 to label4 with label5;
    }
}
