public class org.apache.batik.util.ParsedURL extends java.lang.Object
{
    org.apache.batik.util.ParsedURLData data;
    java.lang.String userAgent;
    private static java.util.Map handlersMap;
    private static org.apache.batik.util.ParsedURLProtocolHandler defaultHandler;
    private static java.lang.String globalUserAgent;
    static java.lang.Class class$org$apache$batik$util$ParsedURLProtocolHandler;

    public static java.lang.String getGlobalUserAgent()
    {
        java.lang.String $r0;

        $r0 = <org.apache.batik.util.ParsedURL: java.lang.String globalUserAgent>;

        return $r0;
    }

    public static void setGlobalUserAgent(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        <org.apache.batik.util.ParsedURL: java.lang.String globalUserAgent> = r0;

        return;
    }

    private static synchronized java.util.Map getHandlersMap()
    {
        java.util.Iterator $r5;
        java.util.HashMap $r1;
        java.util.Map $r0, $r8, $r9;
        org.apache.batik.util.ParsedURLJarProtocolHandler $r3;
        java.lang.Class $r4, $r10;
        java.lang.Object $r6;
        org.apache.batik.util.ParsedURLProtocolHandler r7;
        org.apache.batik.util.ParsedURLDataProtocolHandler $r2;
        boolean $z0;

        $r0 = <org.apache.batik.util.ParsedURL: java.util.Map handlersMap>;

        if $r0 == null goto label1;

        $r9 = <org.apache.batik.util.ParsedURL: java.util.Map handlersMap>;

        return $r9;

     label1:
        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.apache.batik.util.ParsedURL: java.util.Map handlersMap> = $r1;

        $r2 = new org.apache.batik.util.ParsedURLDataProtocolHandler;

        specialinvoke $r2.<org.apache.batik.util.ParsedURLDataProtocolHandler: void <init>()>();

        staticinvoke <org.apache.batik.util.ParsedURL: void registerHandler(org.apache.batik.util.ParsedURLProtocolHandler)>($r2);

        $r3 = new org.apache.batik.util.ParsedURLJarProtocolHandler;

        specialinvoke $r3.<org.apache.batik.util.ParsedURLJarProtocolHandler: void <init>()>();

        staticinvoke <org.apache.batik.util.ParsedURL: void registerHandler(org.apache.batik.util.ParsedURLProtocolHandler)>($r3);

        $r4 = <org.apache.batik.util.ParsedURL: java.lang.Class class$org$apache$batik$util$ParsedURLProtocolHandler>;

        if $r4 != null goto label2;

        $r10 = staticinvoke <org.apache.batik.util.ParsedURL: java.lang.Class class$(java.lang.String)>("org.apache.batik.util.ParsedURLProtocolHandler");

        <org.apache.batik.util.ParsedURL: java.lang.Class class$org$apache$batik$util$ParsedURLProtocolHandler> = $r10;

        goto label3;

     label2:
        $r10 = <org.apache.batik.util.ParsedURL: java.lang.Class class$org$apache$batik$util$ParsedURLProtocolHandler>;

     label3:
        $r5 = staticinvoke <org.apache.batik.util.Service: java.util.Iterator providers(java.lang.Class)>($r10);

        goto label5;

     label4:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.batik.util.ParsedURLProtocolHandler) $r6;

        staticinvoke <org.apache.batik.util.ParsedURL: void registerHandler(org.apache.batik.util.ParsedURLProtocolHandler)>(r7);

     label5:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label4;

        $r8 = <org.apache.batik.util.ParsedURL: java.util.Map handlersMap>;

        return $r8;
    }

    public static synchronized org.apache.batik.util.ParsedURLProtocolHandler getHandler(java.lang.String)
    {
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String r0;
        org.apache.batik.util.ParsedURLProtocolHandler $r3, r4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r3 = <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLProtocolHandler defaultHandler>;

        return $r3;

     label1:
        $r1 = staticinvoke <org.apache.batik.util.ParsedURL: java.util.Map getHandlersMap()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (org.apache.batik.util.ParsedURLProtocolHandler) $r2;

        if r4 != null goto label2;

        r4 = <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLProtocolHandler defaultHandler>;

     label2:
        return r4;
    }

    public static synchronized void registerHandler(org.apache.batik.util.ParsedURLProtocolHandler)
    {
        java.util.Map $r2;
        org.apache.batik.util.ParsedURLProtocolHandler r0;
        java.lang.String $r1, $r3;

        r0 := @parameter0: org.apache.batik.util.ParsedURLProtocolHandler;

        $r1 = interfaceinvoke r0.<org.apache.batik.util.ParsedURLProtocolHandler: java.lang.String getProtocolHandled()>();

        if $r1 != null goto label1;

        <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLProtocolHandler defaultHandler> = r0;

        return;

     label1:
        $r2 = staticinvoke <org.apache.batik.util.ParsedURL: java.util.Map getHandlersMap()>();

        $r3 = interfaceinvoke r0.<org.apache.batik.util.ParsedURLProtocolHandler: java.lang.String getProtocolHandled()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r0);

        return;
    }

    public static java.io.InputStream checkGZIP(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0, $r1;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.batik.util.ParsedURLData: java.io.InputStream checkGZIP(java.io.InputStream)>(r0);

        return $r1;
    }

    public void <init>(java.lang.String)
    {
        org.apache.batik.util.ParsedURL r0;
        java.lang.String $r1, r2;
        org.apache.batik.util.ParsedURLData $r3;

        r0 := @this: org.apache.batik.util.ParsedURL;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.batik.util.ParsedURL: java.lang.String getGlobalUserAgent()>();

        r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent> = $r1;

        $r3 = staticinvoke <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData parseURL(java.lang.String)>(r2);

        r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data> = $r3;

        return;
    }

    public void <init>(java.net.URL)
    {
        org.apache.batik.util.ParsedURL r0;
        java.net.URL r3;
        java.lang.String $r1;
        org.apache.batik.util.ParsedURLData $r2;

        r0 := @this: org.apache.batik.util.ParsedURL;

        r3 := @parameter0: java.net.URL;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.batik.util.ParsedURL: java.lang.String getGlobalUserAgent()>();

        r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent> = $r1;

        $r2 = new org.apache.batik.util.ParsedURLData;

        specialinvoke $r2.<org.apache.batik.util.ParsedURLData: void <init>(java.net.URL)>(r3);

        r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data> = $r2;

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        org.apache.batik.util.ParsedURL r0;
        java.lang.String $r1, r2, r3;
        org.apache.batik.util.ParsedURLData $r4, $r5;

        r0 := @this: org.apache.batik.util.ParsedURL;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.batik.util.ParsedURL: java.lang.String getGlobalUserAgent()>();

        r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent> = $r1;

        if r2 == null goto label1;

        $r5 = staticinvoke <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData parseURL(java.lang.String,java.lang.String)>(r2, r3);

        r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data> = $r5;

        goto label2;

     label1:
        $r4 = staticinvoke <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData parseURL(java.lang.String)>(r3);

        r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data> = $r4;

     label2:
        return;
    }

    public void <init>(java.net.URL, java.lang.String)
    {
        org.apache.batik.util.ParsedURL r0, $r5;
        java.net.URL r2;
        java.lang.String $r1, r3;
        org.apache.batik.util.ParsedURLData $r4, $r6;

        r0 := @this: org.apache.batik.util.ParsedURL;

        r2 := @parameter0: java.net.URL;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.batik.util.ParsedURL: java.lang.String getGlobalUserAgent()>();

        r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent> = $r1;

        if r2 == null goto label1;

        $r5 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r5.<org.apache.batik.util.ParsedURL: void <init>(java.net.URL)>(r2);

        $r6 = staticinvoke <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData parseURL(org.apache.batik.util.ParsedURL,java.lang.String)>($r5, r3);

        r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data> = $r6;

        goto label2;

     label1:
        $r4 = staticinvoke <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData parseURL(java.lang.String)>(r3);

        r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data> = $r4;

     label2:
        return;
    }

    public void <init>(org.apache.batik.util.ParsedURL, java.lang.String)
    {
        org.apache.batik.util.ParsedURL r0, r1;
        java.lang.String r2, $r4;
        org.apache.batik.util.ParsedURLData $r3, $r5;

        r0 := @this: org.apache.batik.util.ParsedURL;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<org.apache.batik.util.ParsedURL: java.lang.String getUserAgent()>();

        r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent> = $r4;

        $r5 = staticinvoke <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData parseURL(org.apache.batik.util.ParsedURL,java.lang.String)>(r1, r2);

        r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data> = $r5;

        goto label2;

     label1:
        $r3 = staticinvoke <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData parseURL(java.lang.String)>(r2);

        r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data> = $r3;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        org.apache.batik.util.ParsedURL r0;
        org.apache.batik.util.ParsedURLData $r1;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r1 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r2 = virtualinvoke $r1.<org.apache.batik.util.ParsedURLData: java.lang.String toString()>();

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.batik.util.ParsedURL r1, r2;
        java.lang.Object r0;
        org.apache.batik.util.ParsedURLData $r3, $r4;
        boolean $z0, $z1;

        r2 := @this: org.apache.batik.util.ParsedURL;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof org.apache.batik.util.ParsedURL;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r1 = (org.apache.batik.util.ParsedURL) r0;

        $r4 = r2.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r3 = r1.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $z1 = virtualinvoke $r4.<org.apache.batik.util.ParsedURLData: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public int hashCode()
    {
        int $i0;
        org.apache.batik.util.ParsedURL r0;
        org.apache.batik.util.ParsedURLData $r1;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r1 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $i0 = virtualinvoke $r1.<org.apache.batik.util.ParsedURLData: int hashCode()>();

        return $i0;
    }

    public boolean complete()
    {
        org.apache.batik.util.ParsedURL r0;
        org.apache.batik.util.ParsedURLData $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r1 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $z0 = virtualinvoke $r1.<org.apache.batik.util.ParsedURLData: boolean complete()>();

        return $z0;
    }

    public java.lang.String getUserAgent()
    {
        java.lang.String $r1;
        org.apache.batik.util.ParsedURL r0;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r1 = r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent>;

        return $r1;
    }

    public void setUserAgent(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.util.ParsedURL r0;

        r0 := @this: org.apache.batik.util.ParsedURL;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent> = r1;

        return;
    }

    public java.lang.String getProtocol()
    {
        org.apache.batik.util.ParsedURL r0;
        java.lang.String $r2, $r4;
        org.apache.batik.util.ParsedURLData $r1, $r3;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r1 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r2 = $r1.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r4 = $r3.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        return $r4;
    }

    public java.lang.String getHost()
    {
        org.apache.batik.util.ParsedURL r0;
        java.lang.String $r2, $r4;
        org.apache.batik.util.ParsedURLData $r1, $r3;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r1 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r2 = $r1.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r4 = $r3.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        return $r4;
    }

    public int getPort()
    {
        int $i0;
        org.apache.batik.util.ParsedURL r0;
        org.apache.batik.util.ParsedURLData $r1;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r1 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $i0 = $r1.<org.apache.batik.util.ParsedURLData: int port>;

        return $i0;
    }

    public java.lang.String getPath()
    {
        org.apache.batik.util.ParsedURL r0;
        java.lang.String $r2, $r4;
        org.apache.batik.util.ParsedURLData $r1, $r3;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r1 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r2 = $r1.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r4 = $r3.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        return $r4;
    }

    public java.lang.String getRef()
    {
        org.apache.batik.util.ParsedURL r0;
        java.lang.String $r2, $r4;
        org.apache.batik.util.ParsedURLData $r1, $r3;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r1 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r2 = $r1.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r4 = $r3.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        return $r4;
    }

    public java.lang.String getPortStr()
    {
        java.lang.String $r2;
        org.apache.batik.util.ParsedURL r0;
        org.apache.batik.util.ParsedURLData $r1;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r1 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r2 = virtualinvoke $r1.<org.apache.batik.util.ParsedURLData: java.lang.String getPortStr()>();

        return $r2;
    }

    public java.lang.String getContentType()
    {
        org.apache.batik.util.ParsedURL r0;
        java.lang.String $r1, $r3;
        org.apache.batik.util.ParsedURLData $r2;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r2 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r1 = r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent>;

        $r3 = virtualinvoke $r2.<org.apache.batik.util.ParsedURLData: java.lang.String getContentType(java.lang.String)>($r1);

        return $r3;
    }

    public java.lang.String getContentTypeMediaType()
    {
        org.apache.batik.util.ParsedURL r0;
        java.lang.String $r1, $r3;
        org.apache.batik.util.ParsedURLData $r2;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r2 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r1 = r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent>;

        $r3 = virtualinvoke $r2.<org.apache.batik.util.ParsedURLData: java.lang.String getContentTypeMediaType(java.lang.String)>($r1);

        return $r3;
    }

    public java.lang.String getContentTypeCharset()
    {
        org.apache.batik.util.ParsedURL r0;
        java.lang.String $r1, $r3;
        org.apache.batik.util.ParsedURLData $r2;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r2 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r1 = r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent>;

        $r3 = virtualinvoke $r2.<org.apache.batik.util.ParsedURLData: java.lang.String getContentTypeCharset(java.lang.String)>($r1);

        return $r3;
    }

    public boolean hasContentTypeParameter(java.lang.String)
    {
        org.apache.batik.util.ParsedURL r0;
        java.lang.String r1, $r2;
        org.apache.batik.util.ParsedURLData $r3;
        boolean $z0;

        r0 := @this: org.apache.batik.util.ParsedURL;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r2 = r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent>;

        $z0 = virtualinvoke $r3.<org.apache.batik.util.ParsedURLData: boolean hasContentTypeParameter(java.lang.String,java.lang.String)>($r2, r1);

        return $z0;
    }

    public java.lang.String getContentEncoding()
    {
        org.apache.batik.util.ParsedURL r0;
        java.lang.String $r1, $r3;
        org.apache.batik.util.ParsedURLData $r2;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r2 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r1 = r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent>;

        $r3 = virtualinvoke $r2.<org.apache.batik.util.ParsedURLData: java.lang.String getContentEncoding(java.lang.String)>($r1);

        return $r3;
    }

    public java.io.InputStream openStream() throws java.io.IOException
    {
        org.apache.batik.util.ParsedURL r0;
        java.lang.String $r1;
        org.apache.batik.util.ParsedURLData $r2;
        java.io.InputStream $r3;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r2 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r1 = r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent>;

        $r3 = virtualinvoke $r2.<org.apache.batik.util.ParsedURLData: java.io.InputStream openStream(java.lang.String,java.util.Iterator)>($r1, null);

        return $r3;
    }

    public java.io.InputStream openStream(java.lang.String) throws java.io.IOException
    {
        org.apache.batik.util.ParsedURL r2;
        java.util.Iterator $r5;
        java.lang.String r1, $r4;
        org.apache.batik.util.ParsedURLData $r3;
        java.util.ArrayList $r0;
        java.io.InputStream $r6;

        r2 := @this: org.apache.batik.util.ParsedURL;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = r2.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r4 = r2.<org.apache.batik.util.ParsedURL: java.lang.String userAgent>;

        $r5 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        $r6 = virtualinvoke $r3.<org.apache.batik.util.ParsedURLData: java.io.InputStream openStream(java.lang.String,java.util.Iterator)>($r4, $r5);

        return $r6;
    }

    public java.io.InputStream openStream(java.lang.String[]) throws java.io.IOException
    {
        java.util.Iterator $r6;
        java.lang.String[] r1;
        org.apache.batik.util.ParsedURLData $r4;
        java.util.ArrayList $r0;
        org.apache.batik.util.ParsedURL r3;
        int $i0, $i1, i2;
        java.lang.String $r2, $r5;
        java.io.InputStream $r7;

        r3 := @this: org.apache.batik.util.ParsedURL;

        r1 := @parameter0: java.lang.String[];

        $r0 = new java.util.ArrayList;

        $i0 = lengthof r1;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        i2 = 0;

        goto label2;

     label1:
        $r2 = r1[i2];

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r1;

        if i2 < $i1 goto label1;

        $r4 = r3.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r5 = r3.<org.apache.batik.util.ParsedURL: java.lang.String userAgent>;

        $r6 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        $r7 = virtualinvoke $r4.<org.apache.batik.util.ParsedURLData: java.io.InputStream openStream(java.lang.String,java.util.Iterator)>($r5, $r6);

        return $r7;
    }

    public java.io.InputStream openStream(java.util.Iterator) throws java.io.IOException
    {
        org.apache.batik.util.ParsedURL r0;
        java.util.Iterator r1;
        java.lang.String $r2;
        org.apache.batik.util.ParsedURLData $r3;
        java.io.InputStream $r4;

        r0 := @this: org.apache.batik.util.ParsedURL;

        r1 := @parameter0: java.util.Iterator;

        $r3 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r2 = r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent>;

        $r4 = virtualinvoke $r3.<org.apache.batik.util.ParsedURLData: java.io.InputStream openStream(java.lang.String,java.util.Iterator)>($r2, r1);

        return $r4;
    }

    public java.io.InputStream openStreamRaw() throws java.io.IOException
    {
        org.apache.batik.util.ParsedURL r0;
        java.lang.String $r1;
        org.apache.batik.util.ParsedURLData $r2;
        java.io.InputStream $r3;

        r0 := @this: org.apache.batik.util.ParsedURL;

        $r2 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r1 = r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent>;

        $r3 = virtualinvoke $r2.<org.apache.batik.util.ParsedURLData: java.io.InputStream openStreamRaw(java.lang.String,java.util.Iterator)>($r1, null);

        return $r3;
    }

    public java.io.InputStream openStreamRaw(java.lang.String) throws java.io.IOException
    {
        org.apache.batik.util.ParsedURL r2;
        java.util.Iterator $r5;
        java.lang.String r1, $r4;
        org.apache.batik.util.ParsedURLData $r3;
        java.util.ArrayList $r0;
        java.io.InputStream $r6;

        r2 := @this: org.apache.batik.util.ParsedURL;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = r2.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r4 = r2.<org.apache.batik.util.ParsedURL: java.lang.String userAgent>;

        $r5 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        $r6 = virtualinvoke $r3.<org.apache.batik.util.ParsedURLData: java.io.InputStream openStreamRaw(java.lang.String,java.util.Iterator)>($r4, $r5);

        return $r6;
    }

    public java.io.InputStream openStreamRaw(java.lang.String[]) throws java.io.IOException
    {
        java.util.Iterator $r6;
        java.lang.String[] r1;
        org.apache.batik.util.ParsedURLData $r4;
        java.util.ArrayList $r0;
        org.apache.batik.util.ParsedURL r3;
        int $i0, $i1, i2;
        java.lang.String $r2, $r5;
        java.io.InputStream $r7;

        r3 := @this: org.apache.batik.util.ParsedURL;

        r1 := @parameter0: java.lang.String[];

        $r0 = new java.util.ArrayList;

        $i0 = lengthof r1;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        i2 = 0;

        goto label2;

     label1:
        $r2 = r1[i2];

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r1;

        if i2 < $i1 goto label1;

        $r4 = r3.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r5 = r3.<org.apache.batik.util.ParsedURL: java.lang.String userAgent>;

        $r6 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        $r7 = virtualinvoke $r4.<org.apache.batik.util.ParsedURLData: java.io.InputStream openStreamRaw(java.lang.String,java.util.Iterator)>($r5, $r6);

        return $r7;
    }

    public java.io.InputStream openStreamRaw(java.util.Iterator) throws java.io.IOException
    {
        org.apache.batik.util.ParsedURL r0;
        java.util.Iterator r1;
        java.lang.String $r2;
        org.apache.batik.util.ParsedURLData $r3;
        java.io.InputStream $r4;

        r0 := @this: org.apache.batik.util.ParsedURL;

        r1 := @parameter0: java.util.Iterator;

        $r3 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r2 = r0.<org.apache.batik.util.ParsedURL: java.lang.String userAgent>;

        $r4 = virtualinvoke $r3.<org.apache.batik.util.ParsedURLData: java.io.InputStream openStreamRaw(java.lang.String,java.util.Iterator)>($r2, r1);

        return $r4;
    }

    public boolean sameFile(org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.util.ParsedURL r0, r1;
        org.apache.batik.util.ParsedURLData $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.batik.util.ParsedURL;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

        $r3 = r0.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $r2 = r1.<org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData data>;

        $z0 = virtualinvoke $r3.<org.apache.batik.util.ParsedURLData: boolean sameFile(org.apache.batik.util.ParsedURLData)>($r2);

        return $z0;
    }

    protected static java.lang.String getProtocol(java.lang.String)
    {
        int $i0, i1, i2;
        java.lang.String r0, $r1, $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        i1 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        return null;

     label2:
        i2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        goto label5;

     label3:
        i1 = i1 + 1;

        if i1 != $i0 goto label4;

        i2 = 0;

        goto label7;

     label4:
        i2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

     label5:
        if i2 == 45 goto label3;

        if i2 == 43 goto label3;

        if i2 == 46 goto label3;

        if i2 < 97 goto label6;

        if i2 <= 122 goto label3;

     label6:
        if i2 < 65 goto label7;

        if i2 <= 90 goto label3;

     label7:
        if i2 != 58 goto label8;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        return $r2;

     label8:
        return null;
    }

    public static org.apache.batik.util.ParsedURLData parseURL(java.lang.String)
    {
        java.lang.String r0, $r1;
        org.apache.batik.util.ParsedURLProtocolHandler $r2;
        org.apache.batik.util.ParsedURLData $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.batik.util.ParsedURL: java.lang.String getProtocol(java.lang.String)>(r0);

        $r2 = staticinvoke <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLProtocolHandler getHandler(java.lang.String)>($r1);

        $r3 = interfaceinvoke $r2.<org.apache.batik.util.ParsedURLProtocolHandler: org.apache.batik.util.ParsedURLData parseURL(java.lang.String)>(r0);

        return $r3;
    }

    public static org.apache.batik.util.ParsedURLData parseURL(java.lang.String, java.lang.String)
    {
        org.apache.batik.util.ParsedURL $r1;
        java.lang.String r0, r2;
        org.apache.batik.util.ParsedURLData $r3, $r4;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r4 = staticinvoke <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData parseURL(java.lang.String)>(r2);

        return $r4;

     label1:
        $r1 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r1.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String)>(r0);

        $r3 = staticinvoke <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData parseURL(org.apache.batik.util.ParsedURL,java.lang.String)>($r1, r2);

        return $r3;
    }

    public static org.apache.batik.util.ParsedURLData parseURL(org.apache.batik.util.ParsedURL, java.lang.String)
    {
        org.apache.batik.util.ParsedURL r0;
        java.lang.String r1, $r2, r6;
        org.apache.batik.util.ParsedURLProtocolHandler $r3;
        org.apache.batik.util.ParsedURLData $r4, $r5;

        r0 := @parameter0: org.apache.batik.util.ParsedURL;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r5 = staticinvoke <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLData parseURL(java.lang.String)>(r1);

        return $r5;

     label1:
        $r2 = staticinvoke <org.apache.batik.util.ParsedURL: java.lang.String getProtocol(java.lang.String)>(r1);

        r6 = $r2;

        if $r2 != null goto label2;

        r6 = virtualinvoke r0.<org.apache.batik.util.ParsedURL: java.lang.String getProtocol()>();

     label2:
        $r3 = staticinvoke <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLProtocolHandler getHandler(java.lang.String)>(r6);

        $r4 = interfaceinvoke $r3.<org.apache.batik.util.ParsedURLProtocolHandler: org.apache.batik.util.ParsedURLData parseURL(org.apache.batik.util.ParsedURL,java.lang.String)>(r0, r1);

        return $r4;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    static void <clinit>()
    {
        java.lang.StringBuffer $r1, $r2, $r4;
        org.apache.batik.util.ParsedURLDefaultProtocolHandler $r0;
        java.lang.String $r3, $r5;

        <org.apache.batik.util.ParsedURL: java.util.Map handlersMap> = null;

        $r0 = new org.apache.batik.util.ParsedURLDefaultProtocolHandler;

        specialinvoke $r0.<org.apache.batik.util.ParsedURLDefaultProtocolHandler: void <init>()>();

        <org.apache.batik.util.ParsedURL: org.apache.batik.util.ParsedURLProtocolHandler defaultHandler> = $r0;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Batik/");

        $r3 = staticinvoke <org.apache.batik.Version: java.lang.String getVersion()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        <org.apache.batik.util.ParsedURL: java.lang.String globalUserAgent> = $r5;

        return;
    }
}
