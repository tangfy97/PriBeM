class groovyjarjarantlr.ZeroOrMoreBlock extends groovyjarjarantlr.BlockWithImpliedExitPath
{

    public void <init>(groovyjarjarantlr.Grammar)
    {
        groovyjarjarantlr.ZeroOrMoreBlock r0;
        groovyjarjarantlr.Grammar r1;

        r0 := @this: groovyjarjarantlr.ZeroOrMoreBlock;

        r1 := @parameter0: groovyjarjarantlr.Grammar;

        specialinvoke r0.<groovyjarjarantlr.BlockWithImpliedExitPath: void <init>(groovyjarjarantlr.Grammar)>(r1);

        return;
    }

    public void <init>(groovyjarjarantlr.Grammar, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.ZeroOrMoreBlock r0;
        groovyjarjarantlr.Grammar r1;
        groovyjarjarantlr.Token r2;

        r0 := @this: groovyjarjarantlr.ZeroOrMoreBlock;

        r1 := @parameter0: groovyjarjarantlr.Grammar;

        r2 := @parameter1: groovyjarjarantlr.Token;

        specialinvoke r0.<groovyjarjarantlr.BlockWithImpliedExitPath: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token)>(r1, r2);

        return;
    }

    public void generate()
    {
        groovyjarjarantlr.ZeroOrMoreBlock r0;
        groovyjarjarantlr.Grammar $r1;
        groovyjarjarantlr.CodeGenerator $r2;

        r0 := @this: groovyjarjarantlr.ZeroOrMoreBlock;

        $r1 = r0.<groovyjarjarantlr.ZeroOrMoreBlock: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.CodeGenerator generator>;

        virtualinvoke $r2.<groovyjarjarantlr.CodeGenerator: void gen(groovyjarjarantlr.ZeroOrMoreBlock)>(r0);

        return;
    }

    public groovyjarjarantlr.Lookahead look(int)
    {
        groovyjarjarantlr.Lookahead $r3;
        int i0;
        groovyjarjarantlr.LLkGrammarAnalyzer $r2;
        groovyjarjarantlr.ZeroOrMoreBlock r0;
        groovyjarjarantlr.Grammar $r1;

        r0 := @this: groovyjarjarantlr.ZeroOrMoreBlock;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.ZeroOrMoreBlock: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $r3 = interfaceinvoke $r2.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.ZeroOrMoreBlock)>(i0, r0);

        return $r3;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r3, $r4;
        java.lang.String $r2, $r5;
        groovyjarjarantlr.ZeroOrMoreBlock r1;

        r1 := @this: groovyjarjarantlr.ZeroOrMoreBlock;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<groovyjarjarantlr.BlockWithImpliedExitPath: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }
}
