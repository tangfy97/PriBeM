class org.eclipse.jetty.client.SelectConnector extends org.eclipse.jetty.util.component.AggregateLifeCycle implements org.eclipse.jetty.client.HttpClient$Connector, org.eclipse.jetty.util.component.Dumpable
{
    private static final org.eclipse.jetty.util.log.Logger LOG;
    private final org.eclipse.jetty.client.HttpClient _httpClient;
    private final org.eclipse.jetty.client.SelectConnector$Manager _selectorManager;
    private final java.util.Map _connectingChannels;

    void <init>(org.eclipse.jetty.client.HttpClient)
    {
        org.eclipse.jetty.client.SelectConnector$Manager $r1, $r5;
        org.eclipse.jetty.client.HttpClient r3, $r4;
        java.util.concurrent.ConcurrentHashMap $r2;
        org.eclipse.jetty.client.SelectConnector r0;

        r0 := @this: org.eclipse.jetty.client.SelectConnector;

        r3 := @parameter0: org.eclipse.jetty.client.HttpClient;

        specialinvoke r0.<org.eclipse.jetty.util.component.AggregateLifeCycle: void <init>()>();

        $r1 = new org.eclipse.jetty.client.SelectConnector$Manager;

        specialinvoke $r1.<org.eclipse.jetty.client.SelectConnector$Manager: void <init>(org.eclipse.jetty.client.SelectConnector)>(r0);

        r0.<org.eclipse.jetty.client.SelectConnector: org.eclipse.jetty.client.SelectConnector$Manager _selectorManager> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.eclipse.jetty.client.SelectConnector: java.util.Map _connectingChannels> = $r2;

        r0.<org.eclipse.jetty.client.SelectConnector: org.eclipse.jetty.client.HttpClient _httpClient> = r3;

        $r4 = r0.<org.eclipse.jetty.client.SelectConnector: org.eclipse.jetty.client.HttpClient _httpClient>;

        virtualinvoke r0.<org.eclipse.jetty.client.SelectConnector: boolean addBean(java.lang.Object,boolean)>($r4, 0);

        $r5 = r0.<org.eclipse.jetty.client.SelectConnector: org.eclipse.jetty.client.SelectConnector$Manager _selectorManager>;

        virtualinvoke r0.<org.eclipse.jetty.client.SelectConnector: boolean addBean(java.lang.Object,boolean)>($r5, 1);

        return;
    }

    public void startConnection(org.eclipse.jetty.client.HttpDestination) throws java.io.IOException
    {
        org.eclipse.jetty.client.SelectConnector$Manager $r6, $r14;
        java.net.Socket $r2, $r11;
        org.eclipse.jetty.client.Address $r18;
        long $l1;
        org.eclipse.jetty.client.SelectConnector r3;
        org.eclipse.jetty.client.HttpClient $r4, $r8, $r9, $r13;
        java.nio.channels.SocketChannel $r0, r17;
        java.util.Map $r10;
        int $i0, $i2;
        org.eclipse.jetty.client.HttpDestination r1;
        boolean $z0, $z1;
        java.io.IOException $r15;
        java.net.InetSocketAddress $r5, $r12;
        org.eclipse.jetty.client.SelectConnector$ConnectTimeout $r7;
        java.nio.channels.UnresolvedAddressException $r16;

        r3 := @this: org.eclipse.jetty.client.SelectConnector;

        r1 := @parameter0: org.eclipse.jetty.client.HttpDestination;

        r17 = null;

     label01:
        $r0 = staticinvoke <java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>();

        r17 = $r0;

        $z0 = virtualinvoke r1.<org.eclipse.jetty.client.HttpDestination: boolean isProxied()>();

        if $z0 == 0 goto label02;

        $r18 = virtualinvoke r1.<org.eclipse.jetty.client.HttpDestination: org.eclipse.jetty.client.Address getProxy()>();

        goto label03;

     label02:
        $r18 = virtualinvoke r1.<org.eclipse.jetty.client.HttpDestination: org.eclipse.jetty.client.Address getAddress()>();

     label03:
        $r2 = virtualinvoke $r0.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        virtualinvoke $r2.<java.net.Socket: void setTcpNoDelay(boolean)>(1);

        $r4 = r3.<org.eclipse.jetty.client.SelectConnector: org.eclipse.jetty.client.HttpClient _httpClient>;

        $z1 = virtualinvoke $r4.<org.eclipse.jetty.client.HttpClient: boolean isConnectBlocking()>();

        if $z1 == 0 goto label04;

        $r11 = virtualinvoke $r0.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $r12 = virtualinvoke $r18.<org.eclipse.jetty.client.Address: java.net.InetSocketAddress toSocketAddress()>();

        $r13 = r3.<org.eclipse.jetty.client.SelectConnector: org.eclipse.jetty.client.HttpClient _httpClient>;

        $i2 = virtualinvoke $r13.<org.eclipse.jetty.client.HttpClient: int getConnectTimeout()>();

        virtualinvoke $r11.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r12, $i2);

        virtualinvoke $r0.<java.nio.channels.SocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0);

        $r14 = r3.<org.eclipse.jetty.client.SelectConnector: org.eclipse.jetty.client.SelectConnector$Manager _selectorManager>;

        virtualinvoke $r14.<org.eclipse.jetty.client.SelectConnector$Manager: void register(java.nio.channels.SocketChannel,java.lang.Object)>($r0, r1);

        goto label05;

     label04:
        virtualinvoke $r0.<java.nio.channels.SocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0);

        $r5 = virtualinvoke $r18.<org.eclipse.jetty.client.Address: java.net.InetSocketAddress toSocketAddress()>();

        virtualinvoke $r0.<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)>($r5);

        $r6 = r3.<org.eclipse.jetty.client.SelectConnector: org.eclipse.jetty.client.SelectConnector$Manager _selectorManager>;

        virtualinvoke $r6.<org.eclipse.jetty.client.SelectConnector$Manager: void register(java.nio.channels.SocketChannel,java.lang.Object)>($r0, r1);

        $r7 = new org.eclipse.jetty.client.SelectConnector$ConnectTimeout;

        specialinvoke $r7.<org.eclipse.jetty.client.SelectConnector$ConnectTimeout: void <init>(org.eclipse.jetty.client.SelectConnector,java.nio.channels.SocketChannel,org.eclipse.jetty.client.HttpDestination)>(r3, $r0, r1);

        $r9 = r3.<org.eclipse.jetty.client.SelectConnector: org.eclipse.jetty.client.HttpClient _httpClient>;

        $r8 = r3.<org.eclipse.jetty.client.SelectConnector: org.eclipse.jetty.client.HttpClient _httpClient>;

        $i0 = virtualinvoke $r8.<org.eclipse.jetty.client.HttpClient: int getConnectTimeout()>();

        $l1 = (long) $i0;

        virtualinvoke $r9.<org.eclipse.jetty.client.HttpClient: void schedule(org.eclipse.jetty.util.thread.Timeout$Task,long)>($r7, $l1);

        $r10 = r3.<org.eclipse.jetty.client.SelectConnector: java.util.Map _connectingChannels>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r7);

     label05:
        goto label10;

     label06:
        $r16 := @caughtexception;

        if r17 == null goto label07;

        virtualinvoke r17.<java.nio.channels.SocketChannel: void close()>();

     label07:
        virtualinvoke r1.<org.eclipse.jetty.client.HttpDestination: void onConnectionFailed(java.lang.Throwable)>($r16);

        goto label10;

     label08:
        $r15 := @caughtexception;

        if r17 == null goto label09;

        virtualinvoke r17.<java.nio.channels.SocketChannel: void close()>();

     label09:
        virtualinvoke r1.<org.eclipse.jetty.client.HttpDestination: void onConnectionFailed(java.lang.Throwable)>($r15);

     label10:
        return;

        catch java.nio.channels.UnresolvedAddressException from label01 to label05 with label06;
        catch java.io.IOException from label01 to label05 with label08;
    }

    static org.eclipse.jetty.util.log.Logger access$000()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = <org.eclipse.jetty.client.SelectConnector: org.eclipse.jetty.util.log.Logger LOG>;

        return $r0;
    }

    static org.eclipse.jetty.client.HttpClient access$100(org.eclipse.jetty.client.SelectConnector)
    {
        org.eclipse.jetty.client.HttpClient $r1;
        org.eclipse.jetty.client.SelectConnector r0;

        r0 := @parameter0: org.eclipse.jetty.client.SelectConnector;

        $r1 = r0.<org.eclipse.jetty.client.SelectConnector: org.eclipse.jetty.client.HttpClient _httpClient>;

        return $r1;
    }

    static java.util.Map access$200(org.eclipse.jetty.client.SelectConnector)
    {
        org.eclipse.jetty.client.SelectConnector r0;
        java.util.Map $r1;

        r0 := @parameter0: org.eclipse.jetty.client.SelectConnector;

        $r1 = r0.<org.eclipse.jetty.client.SelectConnector: java.util.Map _connectingChannels>;

        return $r1;
    }

    static void <clinit>()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/client/SelectConnector;");

        <org.eclipse.jetty.client.SelectConnector: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        return;
    }
}
