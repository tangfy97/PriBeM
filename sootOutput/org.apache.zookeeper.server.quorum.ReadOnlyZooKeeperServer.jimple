public class org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer extends org.apache.zookeeper.server.quorum.QuorumZooKeeperServer
{
    private volatile boolean shutdown;

    void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog, org.apache.zookeeper.server.quorum.QuorumPeer, org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder, org.apache.zookeeper.server.ZKDatabase)
    {
        org.apache.zookeeper.server.quorum.QuorumPeer r2;
        org.apache.zookeeper.server.ZKDatabase r4;
        org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder r3;
        org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer r0;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog r1;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.persistence.FileTxnSnapLog;

        r2 := @parameter1: org.apache.zookeeper.server.quorum.QuorumPeer;

        r3 := @parameter2: org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder;

        r4 := @parameter3: org.apache.zookeeper.server.ZKDatabase;

        $i2 = r2.<org.apache.zookeeper.server.quorum.QuorumPeer: int tickTime>;

        $i1 = r2.<org.apache.zookeeper.server.quorum.QuorumPeer: int minSessionTimeout>;

        $i0 = r2.<org.apache.zookeeper.server.quorum.QuorumPeer: int maxSessionTimeout>;

        specialinvoke r0.<org.apache.zookeeper.server.quorum.QuorumZooKeeperServer: void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog,int,int,int,org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder,org.apache.zookeeper.server.ZKDatabase,org.apache.zookeeper.server.quorum.QuorumPeer)>(r1, $i2, $i1, $i0, r3, r4, r2);

        r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: boolean shutdown> = 0;

        return;
    }

    protected void setupRequestProcessors()
    {
        org.apache.zookeeper.server.PrepRequestProcessor $r2, $r3;
        org.apache.zookeeper.server.FinalRequestProcessor $r0;
        org.apache.zookeeper.server.quorum.ReadOnlyRequestProcessor $r4, $r6;
        org.apache.zookeeper.server.RequestProcessor $r5;
        org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer r1;

        r1 := @this: org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer;

        $r0 = new org.apache.zookeeper.server.FinalRequestProcessor;

        specialinvoke $r0.<org.apache.zookeeper.server.FinalRequestProcessor: void <init>(org.apache.zookeeper.server.ZooKeeperServer)>(r1);

        $r2 = new org.apache.zookeeper.server.PrepRequestProcessor;

        specialinvoke $r2.<org.apache.zookeeper.server.PrepRequestProcessor: void <init>(org.apache.zookeeper.server.ZooKeeperServer,org.apache.zookeeper.server.RequestProcessor)>(r1, $r0);

        $r3 = (org.apache.zookeeper.server.PrepRequestProcessor) $r2;

        virtualinvoke $r3.<org.apache.zookeeper.server.PrepRequestProcessor: void start()>();

        $r4 = new org.apache.zookeeper.server.quorum.ReadOnlyRequestProcessor;

        specialinvoke $r4.<org.apache.zookeeper.server.quorum.ReadOnlyRequestProcessor: void <init>(org.apache.zookeeper.server.ZooKeeperServer,org.apache.zookeeper.server.RequestProcessor)>(r1, $r2);

        r1.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.RequestProcessor firstProcessor> = $r4;

        $r5 = r1.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.RequestProcessor firstProcessor>;

        $r6 = (org.apache.zookeeper.server.quorum.ReadOnlyRequestProcessor) $r5;

        virtualinvoke $r6.<org.apache.zookeeper.server.quorum.ReadOnlyRequestProcessor: void start()>();

        return;
    }

    public synchronized void startup()
    {
        org.apache.zookeeper.server.quorum.QuorumPeer $r2, $r4;
        org.slf4j.Logger $r6, $r7;
        org.apache.zookeeper.server.ServerCnxnFactory $r5;
        org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer r0;
        org.apache.zookeeper.server.quorum.LocalPeerBean $r3;
        org.apache.zookeeper.server.quorum.ReadOnlyBean $r1;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer;

        $z0 = r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: boolean shutdown>;

        if $z0 == 0 goto label1;

        $r7 = <org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String)>("Not starting Read-only server as startup follows shutdown!");

        return;

     label1:
        $r1 = new org.apache.zookeeper.server.quorum.ReadOnlyBean;

        specialinvoke $r1.<org.apache.zookeeper.server.quorum.ReadOnlyBean: void <init>(org.apache.zookeeper.server.ZooKeeperServer)>(r0);

        $r2 = r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $r3 = $r2.<org.apache.zookeeper.server.quorum.QuorumPeer: org.apache.zookeeper.server.quorum.LocalPeerBean jmxLocalPeerBean>;

        virtualinvoke r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: void registerJMX(org.apache.zookeeper.server.ZooKeeperServerBean,org.apache.zookeeper.server.quorum.LocalPeerBean)>($r1, $r3);

        specialinvoke r0.<org.apache.zookeeper.server.quorum.QuorumZooKeeperServer: void startup()>();

        $r4 = r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $r5 = $r4.<org.apache.zookeeper.server.quorum.QuorumPeer: org.apache.zookeeper.server.ServerCnxnFactory cnxnFactory>;

        virtualinvoke $r5.<org.apache.zookeeper.server.ServerCnxnFactory: void setZooKeeperServer(org.apache.zookeeper.server.ZooKeeperServer)>(r0);

        $r6 = <org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Read-only server started");

        return;
    }

    protected void registerJMX()
    {
        org.slf4j.Logger $r8;
        org.apache.zookeeper.server.ZKDatabase $r2;
        org.apache.zookeeper.jmx.MBeanRegistry $r4;
        org.apache.zookeeper.server.DataTreeBean $r1, $r6;
        org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer r0;
        java.lang.Exception $r7;
        org.apache.zookeeper.server.ZooKeeperServerBean $r5;
        org.apache.zookeeper.server.DataTree $r3;

        r0 := @this: org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer;

     label1:
        $r1 = new org.apache.zookeeper.server.DataTreeBean;

        $r2 = virtualinvoke r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.ZKDatabase getZKDatabase()>();

        $r3 = virtualinvoke $r2.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree getDataTree()>();

        specialinvoke $r1.<org.apache.zookeeper.server.DataTreeBean: void <init>(org.apache.zookeeper.server.DataTree)>($r3);

        r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean> = $r1;

        $r4 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r6 = r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean>;

        $r5 = r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean>;

        virtualinvoke $r4.<org.apache.zookeeper.jmx.MBeanRegistry: void register(org.apache.zookeeper.jmx.ZKMBeanInfo,org.apache.zookeeper.jmx.ZKMBeanInfo)>($r6, $r5);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = <org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to register with JMX", $r7);

        r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean> = null;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void registerJMX(org.apache.zookeeper.server.ZooKeeperServerBean, org.apache.zookeeper.server.quorum.LocalPeerBean)
    {
        org.apache.zookeeper.server.ZooKeeperServerBean r1;
        org.slf4j.Logger $r5;
        org.apache.zookeeper.jmx.MBeanRegistry $r2;
        org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer r0;
        org.apache.zookeeper.server.quorum.LocalPeerBean r3;
        java.lang.Exception $r4;

        r0 := @this: org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.ZooKeeperServerBean;

        r3 := @parameter1: org.apache.zookeeper.server.quorum.LocalPeerBean;

     label1:
        r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean> = r1;

        $r2 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        virtualinvoke $r2.<org.apache.zookeeper.jmx.MBeanRegistry: void register(org.apache.zookeeper.jmx.ZKMBeanInfo,org.apache.zookeeper.jmx.ZKMBeanInfo)>(r1, r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to register with JMX", $r4);

        r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean> = null;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void unregisterJMX()
    {
        org.slf4j.Logger $r5;
        org.apache.zookeeper.jmx.MBeanRegistry $r2;
        org.apache.zookeeper.server.DataTreeBean $r1, $r3;
        org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer r0;
        java.lang.Exception $r4;

        r0 := @this: org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer;

     label1:
        $r1 = r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean>;

        if $r1 == null goto label2;

        $r2 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r3 = r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean>;

        virtualinvoke $r2.<org.apache.zookeeper.jmx.MBeanRegistry: void unregister(org.apache.zookeeper.jmx.ZKMBeanInfo)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to unregister with JMX", $r4);

     label4:
        r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean> = null;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void unregisterJMX(org.apache.zookeeper.server.ZooKeeperServer)
    {
        org.apache.zookeeper.server.ZooKeeperServer r6;
        org.apache.zookeeper.server.ZooKeeperServerBean $r1, $r3;
        org.slf4j.Logger $r5;
        org.apache.zookeeper.jmx.MBeanRegistry $r2;
        org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer r0;
        java.lang.Exception $r4;

        r0 := @this: org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer;

        r6 := @parameter0: org.apache.zookeeper.server.ZooKeeperServer;

     label1:
        $r1 = r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean>;

        if $r1 == null goto label2;

        $r2 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r3 = r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean>;

        virtualinvoke $r2.<org.apache.zookeeper.jmx.MBeanRegistry: void unregister(org.apache.zookeeper.jmx.ZKMBeanInfo)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to unregister with JMX", $r4);

     label4:
        r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean> = null;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getState()
    {
        org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer r0;

        r0 := @this: org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer;

        return "read-only";
    }

    public long getServerId()
    {
        org.apache.zookeeper.server.quorum.QuorumPeer $r1;
        long $l0;
        org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer r0;

        r0 := @this: org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $l0 = virtualinvoke $r1.<org.apache.zookeeper.server.quorum.QuorumPeer: long getId()>();

        return $l0;
    }

    public synchronized void shutdown()
    {
        org.apache.zookeeper.server.quorum.QuorumPeer $r1, $r3;
        org.apache.zookeeper.server.ServerCnxnFactory $r2, $r4;
        org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer r0;

        r0 := @this: org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer;

        r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: boolean shutdown> = 1;

        virtualinvoke r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: void unregisterJMX(org.apache.zookeeper.server.ZooKeeperServer)>(r0);

        $r1 = r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $r2 = $r1.<org.apache.zookeeper.server.quorum.QuorumPeer: org.apache.zookeeper.server.ServerCnxnFactory cnxnFactory>;

        virtualinvoke $r2.<org.apache.zookeeper.server.ServerCnxnFactory: void setZooKeeperServer(org.apache.zookeeper.server.ZooKeeperServer)>(null);

        $r3 = r0.<org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $r4 = $r3.<org.apache.zookeeper.server.quorum.QuorumPeer: org.apache.zookeeper.server.ServerCnxnFactory cnxnFactory>;

        virtualinvoke $r4.<org.apache.zookeeper.server.ServerCnxnFactory: void closeAll()>();

        specialinvoke r0.<org.apache.zookeeper.server.quorum.QuorumZooKeeperServer: void shutdown()>();

        return;
    }
}
