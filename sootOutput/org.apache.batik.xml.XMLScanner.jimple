public class org.apache.batik.xml.XMLScanner extends java.lang.Object implements org.apache.batik.i18n.Localizable
{
    public static final int DOCUMENT_START_CONTEXT;
    public static final int TOP_LEVEL_CONTEXT;
    public static final int PI_CONTEXT;
    public static final int XML_DECL_CONTEXT;
    public static final int DOCTYPE_CONTEXT;
    public static final int START_TAG_CONTEXT;
    public static final int CONTENT_CONTEXT;
    public static final int DTD_DECLARATIONS_CONTEXT;
    public static final int CDATA_SECTION_CONTEXT;
    public static final int END_TAG_CONTEXT;
    public static final int ATTRIBUTE_VALUE_CONTEXT;
    public static final int ATTLIST_CONTEXT;
    public static final int ELEMENT_DECLARATION_CONTEXT;
    public static final int ENTITY_CONTEXT;
    public static final int NOTATION_CONTEXT;
    public static final int NOTATION_TYPE_CONTEXT;
    public static final int ENUMERATION_CONTEXT;
    public static final int ENTITY_VALUE_CONTEXT;
    protected static final java.lang.String BUNDLE_CLASSNAME;
    protected org.apache.batik.i18n.LocalizableSupport localizableSupport;
    protected org.apache.batik.util.io.NormalizingReader reader;
    protected int current;
    protected int type;
    protected char[] buffer;
    protected int position;
    protected int start;
    protected int end;
    protected int context;
    protected int depth;
    protected boolean piEndRead;
    protected boolean inDTD;
    protected char attrDelimiter;
    protected boolean cdataEndRead;
    static java.lang.Class class$org$apache$batik$xml$XMLScanner;

    public void <init>(java.io.Reader) throws org.apache.batik.xml.XMLException
    {
        org.apache.batik.util.io.StreamNormalizingReader $r5;
        java.io.IOException $r7;
        java.io.Reader r6;
        org.apache.batik.xml.XMLScanner r0;
        org.apache.batik.i18n.LocalizableSupport $r1;
        int $i0;
        char[] $r4;
        java.lang.Class $r2, $r9;
        java.lang.ClassLoader $r3;
        org.apache.batik.xml.XMLException $r8;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        r6 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.batik.i18n.LocalizableSupport;

        $r2 = <org.apache.batik.xml.XMLScanner: java.lang.Class class$org$apache$batik$xml$XMLScanner>;

        if $r2 != null goto label1;

        $r9 = staticinvoke <org.apache.batik.xml.XMLScanner: java.lang.Class class$(java.lang.String)>("org.apache.batik.xml.XMLScanner");

        <org.apache.batik.xml.XMLScanner: java.lang.Class class$org$apache$batik$xml$XMLScanner> = $r9;

        goto label2;

     label1:
        $r9 = <org.apache.batik.xml.XMLScanner: java.lang.Class class$org$apache$batik$xml$XMLScanner>;

     label2:
        $r3 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r1.<org.apache.batik.i18n.LocalizableSupport: void <init>(java.lang.String,java.lang.ClassLoader)>("org.apache.batik.xml.resources.Messages", $r3);

        r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.i18n.LocalizableSupport localizableSupport> = $r1;

        $r4 = newarray (char)[1024];

        r0.<org.apache.batik.xml.XMLScanner: char[] buffer> = $r4;

        r0.<org.apache.batik.xml.XMLScanner: int context> = 0;

     label3:
        $r5 = new org.apache.batik.util.io.StreamNormalizingReader;

        specialinvoke $r5.<org.apache.batik.util.io.StreamNormalizingReader: void <init>(java.io.Reader)>(r6);

        r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.util.io.NormalizingReader reader> = $r5;

        $i0 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int current> = $i0;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r8 = new org.apache.batik.xml.XMLException;

        specialinvoke $r8.<org.apache.batik.xml.XMLException: void <init>(java.lang.Exception)>($r7);

        throw $r8;

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public void <init>(java.io.InputStream, java.lang.String) throws org.apache.batik.xml.XMLException
    {
        org.apache.batik.util.io.StreamNormalizingReader $r5;
        java.io.IOException $r8;
        org.apache.batik.xml.XMLScanner r0;
        org.apache.batik.i18n.LocalizableSupport $r1;
        int $i0;
        char[] $r4;
        java.lang.Class $r2, $r10;
        java.lang.ClassLoader $r3;
        java.lang.String r7;
        org.apache.batik.xml.XMLException $r9;
        java.io.InputStream r6;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        r6 := @parameter0: java.io.InputStream;

        r7 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.batik.i18n.LocalizableSupport;

        $r2 = <org.apache.batik.xml.XMLScanner: java.lang.Class class$org$apache$batik$xml$XMLScanner>;

        if $r2 != null goto label1;

        $r10 = staticinvoke <org.apache.batik.xml.XMLScanner: java.lang.Class class$(java.lang.String)>("org.apache.batik.xml.XMLScanner");

        <org.apache.batik.xml.XMLScanner: java.lang.Class class$org$apache$batik$xml$XMLScanner> = $r10;

        goto label2;

     label1:
        $r10 = <org.apache.batik.xml.XMLScanner: java.lang.Class class$org$apache$batik$xml$XMLScanner>;

     label2:
        $r3 = virtualinvoke $r10.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r1.<org.apache.batik.i18n.LocalizableSupport: void <init>(java.lang.String,java.lang.ClassLoader)>("org.apache.batik.xml.resources.Messages", $r3);

        r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.i18n.LocalizableSupport localizableSupport> = $r1;

        $r4 = newarray (char)[1024];

        r0.<org.apache.batik.xml.XMLScanner: char[] buffer> = $r4;

        r0.<org.apache.batik.xml.XMLScanner: int context> = 0;

     label3:
        $r5 = new org.apache.batik.util.io.StreamNormalizingReader;

        specialinvoke $r5.<org.apache.batik.util.io.StreamNormalizingReader: void <init>(java.io.InputStream,java.lang.String)>(r6, r7);

        r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.util.io.NormalizingReader reader> = $r5;

        $i0 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int current> = $i0;

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r9 = new org.apache.batik.xml.XMLException;

        specialinvoke $r9.<org.apache.batik.xml.XMLException: void <init>(java.lang.Exception)>($r8);

        throw $r9;

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public void <init>(java.lang.String) throws org.apache.batik.xml.XMLException
    {
        java.io.IOException $r7;
        org.apache.batik.xml.XMLScanner r0;
        org.apache.batik.i18n.LocalizableSupport $r1;
        org.apache.batik.util.io.StringNormalizingReader $r5;
        int $i0;
        char[] $r4;
        java.lang.Class $r2, $r9;
        java.lang.ClassLoader $r3;
        java.lang.String r6;
        org.apache.batik.xml.XMLException $r8;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        r6 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.batik.i18n.LocalizableSupport;

        $r2 = <org.apache.batik.xml.XMLScanner: java.lang.Class class$org$apache$batik$xml$XMLScanner>;

        if $r2 != null goto label1;

        $r9 = staticinvoke <org.apache.batik.xml.XMLScanner: java.lang.Class class$(java.lang.String)>("org.apache.batik.xml.XMLScanner");

        <org.apache.batik.xml.XMLScanner: java.lang.Class class$org$apache$batik$xml$XMLScanner> = $r9;

        goto label2;

     label1:
        $r9 = <org.apache.batik.xml.XMLScanner: java.lang.Class class$org$apache$batik$xml$XMLScanner>;

     label2:
        $r3 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r1.<org.apache.batik.i18n.LocalizableSupport: void <init>(java.lang.String,java.lang.ClassLoader)>("org.apache.batik.xml.resources.Messages", $r3);

        r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.i18n.LocalizableSupport localizableSupport> = $r1;

        $r4 = newarray (char)[1024];

        r0.<org.apache.batik.xml.XMLScanner: char[] buffer> = $r4;

        r0.<org.apache.batik.xml.XMLScanner: int context> = 0;

     label3:
        $r5 = new org.apache.batik.util.io.StringNormalizingReader;

        specialinvoke $r5.<org.apache.batik.util.io.StringNormalizingReader: void <init>(java.lang.String)>(r6);

        r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.util.io.NormalizingReader reader> = $r5;

        $i0 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int current> = $i0;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r8 = new org.apache.batik.xml.XMLException;

        specialinvoke $r8.<org.apache.batik.xml.XMLException: void <init>(java.lang.Exception)>($r7);

        throw $r8;

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public void setLocale(java.util.Locale)
    {
        org.apache.batik.xml.XMLScanner r0;
        java.util.Locale r1;
        org.apache.batik.i18n.LocalizableSupport $r2;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        r1 := @parameter0: java.util.Locale;

        $r2 = r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        virtualinvoke $r2.<org.apache.batik.i18n.LocalizableSupport: void setLocale(java.util.Locale)>(r1);

        return;
    }

    public java.util.Locale getLocale()
    {
        org.apache.batik.xml.XMLScanner r0;
        java.util.Locale $r2;
        org.apache.batik.i18n.LocalizableSupport $r1;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $r1 = r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        $r2 = virtualinvoke $r1.<org.apache.batik.i18n.LocalizableSupport: java.util.Locale getLocale()>();

        return $r2;
    }

    public java.lang.String formatMessage(java.lang.String, java.lang.Object[]) throws java.util.MissingResourceException
    {
        java.lang.Object[] r2;
        java.lang.String r1, $r4;
        org.apache.batik.xml.XMLScanner r0;
        org.apache.batik.i18n.LocalizableSupport $r3;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        $r4 = virtualinvoke $r3.<org.apache.batik.i18n.LocalizableSupport: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r1, r2);

        return $r4;
    }

    public void setDepth(int)
    {
        int i0;
        org.apache.batik.xml.XMLScanner r0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        i0 := @parameter0: int;

        r0.<org.apache.batik.xml.XMLScanner: int depth> = i0;

        return;
    }

    public int getDepth()
    {
        int $i0;
        org.apache.batik.xml.XMLScanner r0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int depth>;

        return $i0;
    }

    public void setContext(int)
    {
        int i0;
        org.apache.batik.xml.XMLScanner r0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        i0 := @parameter0: int;

        r0.<org.apache.batik.xml.XMLScanner: int context> = i0;

        return;
    }

    public int getContext()
    {
        int $i0;
        org.apache.batik.xml.XMLScanner r0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int context>;

        return $i0;
    }

    public int getType()
    {
        int $i0;
        org.apache.batik.xml.XMLScanner r0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int type>;

        return $i0;
    }

    public int getLine()
    {
        int $i0;
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.xml.XMLScanner r0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $r1 = r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<org.apache.batik.util.io.NormalizingReader: int getLine()>();

        return $i0;
    }

    public int getColumn()
    {
        int $i0;
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.xml.XMLScanner r0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $r1 = r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<org.apache.batik.util.io.NormalizingReader: int getColumn()>();

        return $i0;
    }

    public char[] getBuffer()
    {
        char[] $r1;
        org.apache.batik.xml.XMLScanner r0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $r1 = r0.<org.apache.batik.xml.XMLScanner: char[] buffer>;

        return $r1;
    }

    public int getStart()
    {
        int $i0;
        org.apache.batik.xml.XMLScanner r0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int start>;

        return $i0;
    }

    public int getEnd()
    {
        int $i0;
        org.apache.batik.xml.XMLScanner r0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int end>;

        return $i0;
    }

    public char getStringDelimiter()
    {
        char $c0;
        org.apache.batik.xml.XMLScanner r0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $c0 = r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter>;

        return $c0;
    }

    public int getStartOffset()
    {
        int $i0, $i2, $i4;
        org.apache.batik.xml.XMLScanner r0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int type>;

        tableswitch($i0)
        {
            case 4: goto label5;
            case 5: goto label4;
            case 6: goto label6;
            case 7: goto label2;
            case 8: goto label6;
            case 9: goto label3;
            case 10: goto label4;
            case 11: goto label6;
            case 12: goto label4;
            case 13: goto label3;
            case 14: goto label6;
            case 15: goto label6;
            case 16: goto label3;
            case 17: goto label6;
            case 18: goto label6;
            case 19: goto label6;
            case 20: goto label6;
            case 21: goto label1;
            case 22: goto label6;
            case 23: goto label6;
            case 24: goto label6;
            case 25: goto label3;
            case 26: goto label6;
            case 27: goto label6;
            case 28: goto label6;
            case 29: goto label6;
            case 30: goto label6;
            case 31: goto label6;
            case 32: goto label6;
            case 33: goto label6;
            case 34: goto label3;
            default: goto label6;
        };

     label1:
        $i2 = (int) -3;

        return $i2;

     label2:
        $i4 = (int) -2;

        return $i4;

     label3:
        return 1;

     label4:
        return 2;

     label5:
        return 4;

     label6:
        return 0;
    }

    public int getEndOffset()
    {
        int $i0, $i2, $i4, $i6, $i8;
        org.apache.batik.xml.XMLScanner r0;
        boolean $z0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int type>;

        lookupswitch($i0)
        {
            case 4: goto label3;
            case 6: goto label2;
            case 8: goto label4;
            case 12: goto label1;
            case 13: goto label1;
            case 18: goto label1;
            case 25: goto label1;
            case 34: goto label1;
            default: goto label6;
        };

     label1:
        $i2 = (int) -1;

        return $i2;

     label2:
        $i4 = (int) -2;

        return $i4;

     label3:
        $i6 = (int) -3;

        return $i6;

     label4:
        $z0 = r0.<org.apache.batik.xml.XMLScanner: boolean cdataEndRead>;

        if $z0 == 0 goto label5;

        $i8 = (int) -3;

        return $i8;

     label5:
        return 0;

     label6:
        return 0;
    }

    public void clearBuffer()
    {
        int $i0, $i1, $i2;
        char[] $r1, $r2;
        char $c3;
        org.apache.batik.xml.XMLScanner r0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int position>;

        if $i0 > 0 goto label1;

        r0.<org.apache.batik.xml.XMLScanner: int position> = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.xml.XMLScanner: char[] buffer>;

        $r1 = r0.<org.apache.batik.xml.XMLScanner: char[] buffer>;

        $i1 = r0.<org.apache.batik.xml.XMLScanner: int position>;

        $i2 = $i1 - 1;

        $c3 = $r1[$i2];

        $r2[0] = $c3;

        r0.<org.apache.batik.xml.XMLScanner: int position> = 1;

     label2:
        return;
    }

    public int next() throws org.apache.batik.xml.XMLException
    {
        int $i0, $i1;
        org.apache.batik.xml.XMLScanner r0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int context>;

        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int next(int)>($i0);

        return $i1;
    }

    public int next(int) throws org.apache.batik.xml.XMLException
    {
        boolean $z0;
        org.apache.batik.xml.XMLException $r10;
        org.apache.batik.xml.XMLScanner r0;
        java.lang.StringBuffer $r3, $r4, $r8;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26;
        java.lang.String $r5;
        java.io.IOException $r6;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        i2 := @parameter0: int;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int position>;

        $i1 = $i0 - 1;

        r0.<org.apache.batik.xml.XMLScanner: int start> = $i1;

     label01:
        tableswitch(i2)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label10;
            case 4: goto label11;
            case 5: goto label05;
            case 6: goto label07;
            case 7: goto label12;
            case 8: goto label09;
            case 9: goto label08;
            case 10: goto label06;
            case 11: goto label14;
            case 12: goto label13;
            case 13: goto label16;
            case 14: goto label15;
            case 15: goto label18;
            case 16: goto label19;
            case 17: goto label17;
            default: goto label20;
        };

     label02:
        $i24 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInDocumentStart()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i24;

        goto label21;

     label03:
        $i23 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInTopLevel()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i23;

        goto label21;

     label04:
        $i22 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInPI()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i22;

        goto label21;

     label05:
        $i19 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInStartTag()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i19;

        goto label21;

     label06:
        $i14 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInAttributeValue()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i14;

        goto label21;

     label07:
        $i18 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInContent()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i18;

        goto label21;

     label08:
        $i15 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInEndTag()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i15;

        goto label21;

     label09:
        $i16 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInCDATASection()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i16;

        goto label21;

     label10:
        $i21 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInXMLDecl()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i21;

        goto label21;

     label11:
        $i20 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInDoctype()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i20;

        goto label21;

     label12:
        $i17 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInDTDDeclarations()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i17;

        goto label21;

     label13:
        $i12 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInElementDeclaration()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i12;

        goto label21;

     label14:
        $i13 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInAttList()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i13;

        goto label21;

     label15:
        $i6 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInNotation()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i6;

        goto label21;

     label16:
        $i11 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInEntity()>();

        r0.<org.apache.batik.xml.XMLScanner: int type> = $i11;

        goto label21;

     label17:
        $i3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInEntityValue()>();

        return $i3;

     label18:
        $i5 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInNotationType()>();

        return $i5;

     label19:
        $i4 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInEnumeration()>();

        return $i4;

     label20:
        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unexpected ctx:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r9;

     label21:
        goto label23;

     label22:
        $r6 := @caughtexception;

        $r10 = new org.apache.batik.xml.XMLException;

        specialinvoke $r10.<org.apache.batik.xml.XMLException: void <init>(java.lang.Exception)>($r6);

        throw $r10;

     label23:
        $i8 = r0.<org.apache.batik.xml.XMLScanner: int position>;

        $i7 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i26 = (int) -1;

        if $i7 != $i26 goto label24;

        $z0 = 0;

        goto label25;

     label24:
        $z0 = 1;

     label25:
        $i9 = $i8 - $z0;

        r0.<org.apache.batik.xml.XMLScanner: int end> = $i9;

        $i10 = r0.<org.apache.batik.xml.XMLScanner: int type>;

        return $i10;

        catch java.io.IOException from label01 to label21 with label22;
    }

    protected int nextInDocumentStart() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        byte $b25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.batik.xml.XMLException $r1, $r2, $r3, $r4;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i4, $i6, $i8, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i27, $i29, $i31, $i33, $i35, $i37, $i39;
        char $c3, $c5, $c7, $c9, $c12, $c22;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case -1: goto label26;
            case 9: goto label01;
            case 10: goto label01;
            case 13: goto label01;
            case 32: goto label01;
            case 60: goto label05;
            default: goto label27;
        };

     label01:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i19 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i27 = (int) -1;

        if $i19 == $i27 goto label02;

        $i21 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c22 = (char) $i21;

        $z5 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c22);

        if $z5 != 0 goto label01;

     label02:
        $i20 = r0.<org.apache.batik.xml.XMLScanner: int depth>;

        if $i20 != 0 goto label03;

        $b25 = 1;

        goto label04;

     label03:
        $b25 = 6;

     label04:
        r0.<org.apache.batik.xml.XMLScanner: int context> = $b25;

        return 1;

     label05:
        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        lookupswitch($i1)
        {
            case 33: goto label21;
            case 63: goto label06;
            default: goto label25;
        };

     label06:
        $i2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i29 = (int) -1;

        if $i2 == $i29 goto label07;

        $c3 = (char) $i2;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameFirstCharacter(char)>($c3);

        if $z0 != 0 goto label08;

     label07:
        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.pi.target");

        throw $r1;

     label08:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 2;

        $i4 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i31 = (int) -1;

        if $i4 == $i31 goto label09;

        $c5 = (char) $i4;

        $z1 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c5);

        if $z1 != 0 goto label10;

     label09:
        return 5;

     label10:
        $i6 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i33 = (int) -1;

        if $i6 == $i33 goto label11;

        $c7 = (char) $i6;

        $z2 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c7);

        if $z2 != 0 goto label12;

     label11:
        return 5;

     label12:
        $i8 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i35 = (int) -1;

        if $i8 == $i35 goto label15;

        $c9 = (char) $i8;

        $z3 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c9);

        if $z3 == 0 goto label15;

     label13:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i10 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i37 = (int) -1;

        if $i10 == $i37 goto label14;

        $i11 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c12 = (char) $i11;

        $z4 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c12);

        if $z4 != 0 goto label13;

     label14:
        return 5;

     label15:
        if $i2 != 120 goto label16;

        if $i4 != 109 goto label16;

        if $i6 != 108 goto label16;

        r0.<org.apache.batik.xml.XMLScanner: int context> = 3;

        return 2;

     label16:
        if $i2 == 120 goto label17;

        if $i2 != 88 goto label20;

     label17:
        if $i4 == 109 goto label18;

        if $i4 != 77 goto label20;

     label18:
        if $i6 == 108 goto label19;

        if $i6 != 76 goto label20;

     label19:
        $r2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("xml.reserved");

        throw $r2;

     label20:
        return 5;

     label21:
        $i13 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        lookupswitch($i13)
        {
            case 45: goto label22;
            case 68: goto label23;
            default: goto label24;
        };

     label22:
        $i15 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readComment()>();

        return $i15;

     label23:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 4;

        $i39 = (int) -1;

        $i14 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("OCTYPE", 3, $i39);

        return $i14;

     label24:
        $r3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.doctype");

        throw $r3;

     label25:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 5;

        $i16 = r0.<org.apache.batik.xml.XMLScanner: int depth>;

        $i17 = $i16 + 1;

        r0.<org.apache.batik.xml.XMLScanner: int depth> = $i17;

        $i18 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(9);

        return $i18;

     label26:
        return 0;

     label27:
        $i23 = r0.<org.apache.batik.xml.XMLScanner: int depth>;

        if $i23 != 0 goto label28;

        $r4 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r4;

     label28:
        $i24 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextInContent()>();

        return $i24;
    }

    protected int nextInTopLevel() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i15;
        boolean $z0;
        char $c11;
        org.apache.batik.xml.XMLException $r1, $r2;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case -1: goto label10;
            case 9: goto label01;
            case 10: goto label01;
            case 13: goto label01;
            case 32: goto label01;
            case 60: goto label03;
            default: goto label11;
        };

     label01:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i9 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i13 = (int) -1;

        if $i9 == $i13 goto label02;

        $i10 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c11 = (char) $i10;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c11);

        if $z0 != 0 goto label01;

     label02:
        return 1;

     label03:
        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        lookupswitch($i1)
        {
            case 33: goto label05;
            case 63: goto label04;
            default: goto label09;
        };

     label04:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 2;

        $i2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readPIStart()>();

        return $i2;

     label05:
        $i3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        lookupswitch($i3)
        {
            case 45: goto label06;
            case 68: goto label07;
            default: goto label08;
        };

     label06:
        $i5 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readComment()>();

        return $i5;

     label07:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 4;

        $i15 = (int) -1;

        $i4 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("OCTYPE", 3, $i15);

        return $i4;

     label08:
        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r1;

     label09:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 5;

        $i6 = r0.<org.apache.batik.xml.XMLScanner: int depth>;

        $i7 = $i6 + 1;

        r0.<org.apache.batik.xml.XMLScanner: int depth> = $i7;

        $i8 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(9);

        return $i8;

     label10:
        return 0;

     label11:
        $r2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r2;
    }

    protected int nextInPI() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        org.apache.batik.xml.XMLScanner r0;
        byte $b10;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i13, $i15, $i17;
        boolean $z0, $z1, $z2;
        char $c5;
        org.apache.batik.xml.XMLException $r1;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $z0 = r0.<org.apache.batik.xml.XMLScanner: boolean piEndRead>;

        if $z0 == 0 goto label03;

        r0.<org.apache.batik.xml.XMLScanner: boolean piEndRead> = 0;

        $i9 = r0.<org.apache.batik.xml.XMLScanner: int depth>;

        if $i9 != 0 goto label01;

        $b10 = 1;

        goto label02;

     label01:
        $b10 = 6;

     label02:
        r0.<org.apache.batik.xml.XMLScanner: int context> = $b10;

        return 7;

     label03:
        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case 9: goto label04;
            case 10: goto label04;
            case 13: goto label04;
            case 32: goto label04;
            case 63: goto label06;
            default: goto label11;
        };

     label04:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i3 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i13 = (int) -1;

        if $i3 == $i13 goto label05;

        $i4 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c5 = (char) $i4;

        $z2 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c5);

        if $z2 != 0 goto label04;

     label05:
        return 1;

     label06:
        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        if $i1 == 62 goto label07;

        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("pi.end.expected");

        throw $r1;

     label07:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $z1 = r0.<org.apache.batik.xml.XMLScanner: boolean inDTD>;

        if $z1 == 0 goto label08;

        r0.<org.apache.batik.xml.XMLScanner: int context> = 7;

        goto label10;

     label08:
        $i2 = r0.<org.apache.batik.xml.XMLScanner: int depth>;

        if $i2 != 0 goto label09;

        r0.<org.apache.batik.xml.XMLScanner: int context> = 1;

        goto label10;

     label09:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 6;

     label10:
        return 7;

     label11:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i11 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i15 = (int) -1;

        if $i11 == $i15 goto label12;

        $i8 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i8 != 63 goto label11;

     label12:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i6 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i17 = (int) -1;

        if $i6 == $i17 goto label13;

        $i7 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i7 != 62 goto label11;

     label13:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: boolean piEndRead> = 1;

        return 6;
    }

    protected int nextInStartTag() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        org.apache.batik.xml.XMLScanner r0;
        byte $b10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i12;
        boolean $z0;
        char $c8;
        org.apache.batik.xml.XMLException $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case 9: goto label01;
            case 10: goto label01;
            case 13: goto label01;
            case 32: goto label01;
            case 34: goto label09;
            case 39: goto label16;
            case 47: goto label03;
            case 61: goto label08;
            case 62: goto label07;
            default: goto label23;
        };

     label01:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i6 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i12 = (int) -1;

        if $i6 == $i12 goto label02;

        $i7 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c8 = (char) $i7;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c8);

        if $z0 != 0 goto label01;

     label02:
        return 1;

     label03:
        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        if $i1 == 62 goto label04;

        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("malformed.tag.end");

        throw $r1;

     label04:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i2 = r0.<org.apache.batik.xml.XMLScanner: int depth>;

        $i3 = $i2 - 1;

        r0.<org.apache.batik.xml.XMLScanner: int depth> = $i3;

        if $i3 != 0 goto label05;

        $b10 = 1;

        goto label06;

     label05:
        $b10 = 6;

     label06:
        r0.<org.apache.batik.xml.XMLScanner: int context> = $b10;

        return 19;

     label07:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int context> = 6;

        return 20;

     label08:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 15;

     label09:
        r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter> = 34;

        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        goto label10;

     label10:
        $i5 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i5)
        {
            case -1: goto label14;
            case 34: goto label11;
            case 38: goto label12;
            case 60: goto label13;
            default: goto label15;
        };

     label11:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 25;

     label12:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 10;

        return 16;

     label13:
        $r4 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r4;

     label14:
        $r5 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r5;

     label15:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        goto label10;

     label16:
        r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter> = 39;

        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        goto label17;

     label17:
        $i4 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i4)
        {
            case -1: goto label21;
            case 38: goto label19;
            case 39: goto label18;
            case 60: goto label20;
            default: goto label22;
        };

     label18:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 25;

     label19:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 10;

        return 16;

     label20:
        $r2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r2;

     label21:
        $r3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r3;

     label22:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        goto label17;

     label23:
        $i9 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(14);

        return $i9;
    }

    protected int nextInAttributeValue() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        char $c3;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i8, $i9;
        org.apache.batik.xml.XMLException $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i8 = (int) -1;

        if $i0 != $i8 goto label01;

        return 0;

     label01:
        $i1 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i1 != 38 goto label02;

        $i6 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readReference()>();

        return $i6;

     label02:
        $i2 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i2)
        {
            case -1: goto label03;
            case 34: goto label04;
            case 38: goto label03;
            case 39: goto label04;
            case 60: goto label03;
            default: goto label05;
        };

     label03:
        goto label06;

     label04:
        $i4 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c3 = r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter>;

        $i9 = (int) $c3;

        if $i4 != $i9 goto label05;

        goto label06;

     label05:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        goto label02;

     label06:
        $i5 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i5)
        {
            case -1: goto label07;
            case 34: goto label10;
            case 38: goto label09;
            case 39: goto label10;
            case 60: goto label08;
            default: goto label12;
        };

     label07:
        goto label12;

     label08:
        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r1;

     label09:
        return 17;

     label10:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $z0 = r0.<org.apache.batik.xml.XMLScanner: boolean inDTD>;

        if $z0 == 0 goto label11;

        r0.<org.apache.batik.xml.XMLScanner: int context> = 11;

        goto label12;

     label11:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 5;

     label12:
        return 18;
    }

    protected int nextInContent() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13;
        org.apache.batik.xml.XMLException $r1;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case -1: goto label01;
            case 38: goto label02;
            case 60: goto label03;
            default: goto label11;
        };

     label01:
        return 0;

     label02:
        $i10 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readReference()>();

        return $i10;

     label03:
        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        lookupswitch($i1)
        {
            case 33: goto label05;
            case 47: goto label09;
            case 63: goto label04;
            default: goto label10;
        };

     label04:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 2;

        $i2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readPIStart()>();

        return $i2;

     label05:
        $i4 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        lookupswitch($i4)
        {
            case 45: goto label06;
            case 91: goto label07;
            default: goto label08;
        };

     label06:
        $i6 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readComment()>();

        return $i6;

     label07:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 8;

        $i13 = (int) -1;

        $i5 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("CDATA[", 11, $i13);

        return $i5;

     label08:
        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r1;

     label09:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int context> = 9;

        $i3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(10);

        return $i3;

     label10:
        $i7 = r0.<org.apache.batik.xml.XMLScanner: int depth>;

        $i8 = $i7 + 1;

        r0.<org.apache.batik.xml.XMLScanner: int depth> = $i8;

        r0.<org.apache.batik.xml.XMLScanner: int context> = 5;

        $i9 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(9);

        return $i9;

     label11:
        goto label12;

     label12:
        $i11 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i11)
        {
            case -1: goto label14;
            case 38: goto label14;
            case 60: goto label14;
            default: goto label13;
        };

     label13:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        goto label12;

     label14:
        goto label15;

     label15:
        return 8;
    }

    protected int nextInEndTag() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        char $c6;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8;
        org.apache.batik.xml.XMLException $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case 9: goto label1;
            case 10: goto label1;
            case 13: goto label1;
            case 32: goto label1;
            case 62: goto label3;
            default: goto label7;
        };

     label1:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i4 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i8 = (int) -1;

        if $i4 == $i8 goto label2;

        $i5 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c6 = (char) $i5;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c6);

        if $z0 != 0 goto label1;

     label2:
        return 1;

     label3:
        $i1 = r0.<org.apache.batik.xml.XMLScanner: int depth>;

        $i2 = $i1 - 1;

        r0.<org.apache.batik.xml.XMLScanner: int depth> = $i2;

        if $i2 >= 0 goto label4;

        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.end.tag");

        throw $r1;

     label4:
        $i3 = r0.<org.apache.batik.xml.XMLScanner: int depth>;

        if $i3 != 0 goto label5;

        r0.<org.apache.batik.xml.XMLScanner: int context> = 1;

        goto label6;

     label5:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 6;

     label6:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 20;

     label7:
        $r2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r2;
    }

    protected int nextInCDATASection() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12, $i14;
        org.apache.batik.xml.XMLException $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $z0 = r0.<org.apache.batik.xml.XMLScanner: boolean cdataEndRead>;

        if $z0 == 0 goto label4;

        r0.<org.apache.batik.xml.XMLScanner: boolean cdataEndRead> = 0;

        r0.<org.apache.batik.xml.XMLScanner: int context> = 6;

        return 21;

     label1:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

     label2:
        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i0 == 93 goto label3;

        $i5 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i8 = (int) -1;

        if $i5 != $i8 goto label1;

     label3:
        $i1 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i10 = (int) -1;

        if $i1 == $i10 goto label4;

        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i2 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i2 != 93 goto label4;

        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i3 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i3 != 62 goto label4;

        goto label5;

     label4:
        $i6 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i12 = (int) -1;

        if $i6 != $i12 goto label2;

     label5:
        $i4 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i14 = (int) -1;

        if $i4 != $i14 goto label6;

        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r1;

     label6:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: boolean cdataEndRead> = 1;

        return 8;
    }

    protected int nextInXMLDecl() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i13, $i15, $i17;
        boolean $z0;
        char $c9;
        org.apache.batik.xml.XMLException $r1, $r2;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case 9: goto label01;
            case 10: goto label01;
            case 13: goto label01;
            case 32: goto label01;
            case 34: goto label09;
            case 39: goto label10;
            case 61: goto label06;
            case 63: goto label07;
            case 101: goto label04;
            case 115: goto label05;
            case 118: goto label03;
            default: goto label11;
        };

     label01:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i7 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i11 = (int) -1;

        if $i7 == $i11 goto label02;

        $i8 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c9 = (char) $i8;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c9);

        if $z0 != 0 goto label01;

     label02:
        return 1;

     label03:
        $i13 = (int) -1;

        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("ersion", 22, $i13);

        return $i1;

     label04:
        $i15 = (int) -1;

        $i3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("ncoding", 23, $i15);

        return $i3;

     label05:
        $i17 = (int) -1;

        $i2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("tandalone", 24, $i17);

        return $i2;

     label06:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 15;

     label07:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i4 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i4 == 62 goto label08;

        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("pi.end.expected");

        throw $r1;

     label08:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int context> = 1;

        return 7;

     label09:
        r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter> = 34;

        $i6 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readString()>();

        return $i6;

     label10:
        r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter> = 39;

        $i5 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readString()>();

        return $i5;

     label11:
        $r2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r2;
    }

    protected int nextInDoctype() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        char $c7;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10;
        boolean $z0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case 9: goto label1;
            case 10: goto label1;
            case 13: goto label1;
            case 32: goto label1;
            case 34: goto label6;
            case 39: goto label7;
            case 62: goto label3;
            case 80: goto label5;
            case 83: goto label4;
            case 91: goto label8;
            default: goto label9;
        };

     label1:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i5 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i10 = (int) -1;

        if $i5 == $i10 goto label2;

        $i6 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c7 = (char) $i6;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c7);

        if $z0 != 0 goto label1;

     label2:
        return 1;

     label3:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int context> = 1;

        return 20;

     label4:
        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("YSTEM", 26, 14);

        return $i1;

     label5:
        $i2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("UBLIC", 27, 14);

        return $i2;

     label6:
        r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter> = 34;

        $i4 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readString()>();

        return $i4;

     label7:
        r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter> = 39;

        $i3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readString()>();

        return $i3;

     label8:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int context> = 7;

        r0.<org.apache.batik.xml.XMLScanner: boolean inDTD> = 1;

        return 28;

     label9:
        $i8 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(14);

        return $i8;
    }

    protected int nextInDTDDeclarations() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i15, $i17, $i19, $i21, $i23;
        boolean $z0;
        char $c13;
        org.apache.batik.xml.XMLException $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case 9: goto label01;
            case 10: goto label01;
            case 13: goto label01;
            case 32: goto label01;
            case 37: goto label04;
            case 60: goto label05;
            case 93: goto label03;
            default: goto label17;
        };

     label01:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i11 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i15 = (int) -1;

        if $i11 == $i15 goto label02;

        $i12 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c13 = (char) $i12;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c13);

        if $z0 != 0 goto label01;

     label02:
        return 1;

     label03:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int context> = 4;

        r0.<org.apache.batik.xml.XMLScanner: boolean inDTD> = 0;

        return 29;

     label04:
        $i10 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readPEReference()>();

        return $i10;

     label05:
        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        lookupswitch($i1)
        {
            case 33: goto label07;
            case 63: goto label06;
            default: goto label16;
        };

     label06:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 2;

        $i2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readPIStart()>();

        return $i2;

     label07:
        $i3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        lookupswitch($i3)
        {
            case 45: goto label08;
            case 65: goto label13;
            case 69: goto label09;
            case 78: goto label14;
            default: goto label15;
        };

     label08:
        $i9 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readComment()>();

        return $i9;

     label09:
        $i5 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        lookupswitch($i5)
        {
            case 76: goto label10;
            case 78: goto label11;
            default: goto label12;
        };

     label10:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 12;

        $i17 = (int) -1;

        $i7 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("EMENT", 30, $i17);

        return $i7;

     label11:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 13;

        $i19 = (int) -1;

        $i6 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("TITY", 32, $i19);

        return $i6;

     label12:
        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r1;

     label13:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 11;

        $i21 = (int) -1;

        $i8 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("TTLIST", 31, $i21);

        return $i8;

     label14:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 14;

        $i23 = (int) -1;

        $i4 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("OTATION", 33, $i23);

        return $i4;

     label15:
        $r2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r2;

     label16:
        $r3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r3;

     label17:
        $r4 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r4;
    }

    protected int readString() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        char $c2;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i3, $i5, $i6, $i8;
        org.apache.batik.xml.XMLException $r1;

        r0 := @this: org.apache.batik.xml.XMLScanner;

     label1:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i5 = (int) -1;

        if $i0 == $i5 goto label2;

        $i3 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c2 = r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter>;

        $i6 = (int) $c2;

        if $i3 != $i6 goto label1;

     label2:
        $i1 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i8 = (int) -1;

        if $i1 != $i8 goto label3;

        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r1;

     label3:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 25;
    }

    protected int readComment() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, i3, $i5, $i7, $i9;
        org.apache.batik.xml.XMLException $r1, $r2, $r3;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        if $i0 == 45 goto label1;

        $r3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("malformed.comment");

        throw $r3;

     label1:
        i3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        goto label5;

     label2:
        i3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

     label3:
        $i5 = (int) -1;

        if i3 == $i5 goto label4;

        if i3 != 45 goto label2;

     label4:
        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        i3 = $i1;

        if $i1 != 45 goto label5;

        goto label6;

     label5:
        $i7 = (int) -1;

        if i3 != $i7 goto label3;

     label6:
        $i9 = (int) -1;

        if i3 != $i9 goto label7;

        $r2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r2;

     label7:
        $i2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        if $i2 == 62 goto label8;

        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("malformed.comment");

        throw $r1;

     label8:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 4;
    }

    protected int readIdentifier(java.lang.String, int, int) throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        org.apache.batik.xml.XMLScanner r1;
        int $i0, $i1, i3, $i4, $i5, i7, i8, $i9, $i11, $i13;
        java.lang.String r0;
        boolean $z0;
        char $c2, $c6;
        org.apache.batik.xml.XMLException $r2;

        r1 := @this: org.apache.batik.xml.XMLScanner;

        r0 := @parameter0: java.lang.String;

        i7 := @parameter1: int;

        i3 := @parameter2: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i8 = 0;

        goto label6;

     label1:
        virtualinvoke r1.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i1 = r1.<org.apache.batik.xml.XMLScanner: int current>;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i8);

        $i9 = (int) $c2;

        if $i1 == $i9 goto label5;

        $i11 = (int) -1;

        if i3 != $i11 goto label3;

        $r2 = virtualinvoke r1.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r2;

     label2:
        virtualinvoke r1.<org.apache.batik.xml.XMLScanner: int nextChar()>();

     label3:
        $i4 = r1.<org.apache.batik.xml.XMLScanner: int current>;

        $i13 = (int) -1;

        if $i4 == $i13 goto label4;

        $i5 = r1.<org.apache.batik.xml.XMLScanner: int current>;

        $c6 = (char) $i5;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c6);

        if $z0 != 0 goto label2;

     label4:
        return i3;

     label5:
        i8 = i8 + 1;

     label6:
        if i8 < $i0 goto label1;

        virtualinvoke r1.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return i7;
    }

    protected int readName(int) throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        char $c2, $c6;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i3, i4, $i5, $i8, $i10;
        org.apache.batik.xml.XMLException $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        i4 := @parameter0: int;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i8 = (int) -1;

        if $i0 != $i8 goto label1;

        $r2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r2;

     label1:
        $i1 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c2 = (char) $i1;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameFirstCharacter(char)>($c2);

        if $z0 != 0 goto label2;

        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.name");

        throw $r1;

     label2:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i3 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i10 = (int) -1;

        if $i3 == $i10 goto label3;

        $i5 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c6 = (char) $i5;

        $z1 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c6);

        if $z1 != 0 goto label2;

     label3:
        return i4;
    }

    protected int readPIStart() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i3, $i5, $i7, $i9, $i10, $i13, $i15, $i17, $i19, $i21;
        boolean $z0, $z1, $z2, $z3, $z4;
        char $c2, $c4, $c6, $c8, $c11;
        org.apache.batik.xml.XMLException $r1, $r2, $r3;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i13 = (int) -1;

        if $i0 != $i13 goto label01;

        $r3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r3;

     label01:
        $i1 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c2 = (char) $i1;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameFirstCharacter(char)>($c2);

        if $z0 != 0 goto label02;

        $r2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("malformed.pi.target");

        throw $r2;

     label02:
        $i3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i15 = (int) -1;

        if $i3 == $i15 goto label03;

        $c4 = (char) $i3;

        $z1 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c4);

        if $z1 != 0 goto label04;

     label03:
        return 5;

     label04:
        $i5 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i17 = (int) -1;

        if $i5 == $i17 goto label05;

        $c6 = (char) $i5;

        $z2 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c6);

        if $z2 != 0 goto label06;

     label05:
        return 5;

     label06:
        $i7 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i19 = (int) -1;

        if $i7 == $i19 goto label09;

        $c8 = (char) $i7;

        $z3 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c8);

        if $z3 == 0 goto label09;

     label07:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i9 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i21 = (int) -1;

        if $i9 == $i21 goto label08;

        $i10 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c11 = (char) $i10;

        $z4 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c11);

        if $z4 != 0 goto label07;

     label08:
        return 5;

     label09:
        if $i0 == 120 goto label10;

        if $i0 != 88 goto label13;

     label10:
        if $i3 == 109 goto label11;

        if $i3 != 77 goto label13;

     label11:
        if $i5 == 108 goto label12;

        if $i5 != 76 goto label13;

     label12:
        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("xml.reserved");

        throw $r1;

     label13:
        return 5;
    }

    protected int nextInElementDeclaration() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        char $c8;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11, $i13;
        org.apache.batik.xml.XMLException $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case 9: goto label01;
            case 10: goto label01;
            case 13: goto label01;
            case 32: goto label01;
            case 35: goto label15;
            case 37: goto label04;
            case 40: goto label11;
            case 41: goto label12;
            case 42: goto label10;
            case 43: goto label09;
            case 44: goto label14;
            case 62: goto label03;
            case 63: goto label08;
            case 65: goto label07;
            case 69: goto label06;
            case 124: goto label13;
            default: goto label16;
        };

     label01:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i6 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i11 = (int) -1;

        if $i6 == $i11 goto label02;

        $i7 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c8 = (char) $i7;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c8);

        if $z0 != 0 goto label01;

     label02:
        return 1;

     label03:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int context> = 7;

        return 20;

     label04:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(34);

        $i4 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i4 == 59 goto label05;

        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("malformed.parameter.entity");

        throw $r1;

     label05:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return $i3;

     label06:
        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("MPTY", 35, 14);

        return $i1;

     label07:
        $i2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("NY", 36, 14);

        return $i2;

     label08:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 37;

     label09:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 38;

     label10:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 39;

     label11:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 40;

     label12:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 41;

     label13:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 42;

     label14:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 43;

     label15:
        $i13 = (int) -1;

        $i5 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("PCDATA", 44, $i13);

        return $i5;

     label16:
        $i9 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(14);

        return $i9;
    }

    protected int nextInAttList() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i10, $i11, $i12, $i14, $i15, $i16, $i18, $i19, $i20, $i22, $i23, $i24, $i26, $i27, $i28, $i30, $i31, $i33, $i34, $i36, $i37, $i39, $i40, $i42, $i43, $i45, $i46, $i48, $i49, $i51, $i52, $i54, $i55, $i56, $i58, $i59, $i60, $i62, $i63, $i64, $i66, $i67, $i68, $i70, $i71, $i72, $i74, $i75, $i77, $i78, $i80, $i81, $i83, $i84, $i86, $i87, $i89, $i90, $i92, $i93, $i94, $i96, $i97, $i98, $i100, $i101, $i102, $i104, $i105, $i106, $i108, $i109, $i110, $i112, $i113, $i115, $i116, $i118, $i119, $i120, $i122, $i123, $i124, $i126, $i127, $i129, $i130, $i132, $i133, $i135, $i136, $i138, $i139, $i141, $i142, $i144, $i145, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i169, $i170, $i171, $i173, $i175, $i177, $i179, $i181, $i183, $i185, $i187, $i189, $i191, $i193, $i195, $i197, $i199, $i201, $i203, $i205, $i207, $i209, $i211, $i213, $i215, $i217, $i219, $i221, $i223, $i225, $i227, $i229, $i231, $i233, $i235, $i237, $i239, $i241, $i243, $i245, $i247, $i249, $i251, $i253, $i255, $i257, $i259, $i261, $i263, $i265, $i267, $i269, $i271;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42;
        org.apache.batik.xml.XMLException $r1, $r2, $r3, $r4, $r5, $r6;
        org.apache.batik.xml.XMLScanner r0;
        char $c5, $c9, $c13, $c17, $c21, $c25, $c29, $c32, $c35, $c38, $c41, $c44, $c47, $c50, $c53, $c57, $c61, $c65, $c69, $c73, $c76, $c79, $c82, $c85, $c88, $c91, $c95, $c99, $c103, $c107, $c111, $c114, $c117, $c121, $c125, $c128, $c131, $c134, $c137, $c140, $c143, $c146, $c168;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case 9: goto label001;
            case 10: goto label001;
            case 13: goto label001;
            case 32: goto label001;
            case 34: goto label112;
            case 35: goto label126;
            case 37: goto label004;
            case 39: goto label119;
            case 40: goto label131;
            case 62: goto label003;
            case 67: goto label006;
            case 69: goto label072;
            case 73: goto label007;
            case 78: goto label034;
            default: goto label132;
        };

     label001:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i166 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i173 = (int) -1;

        if $i166 == $i173 goto label002;

        $i167 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c168 = (char) $i167;

        $z42 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c168);

        if $z42 != 0 goto label001;

     label002:
        return 1;

     label003:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int context> = 7;

        r0.<org.apache.batik.xml.XMLScanner: int type> = 20;

        return 20;

     label004:
        $i154 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(34);

        $i155 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i155 == 59 goto label005;

        $r3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("malformed.parameter.entity");

        throw $r3;

     label005:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return $i154;

     label006:
        $i147 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("DATA", 45, 14);

        return $i147;

     label007:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i54 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i54 == 68 goto label010;

     label008:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i89 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i175 = (int) -1;

        if $i89 == $i175 goto label009;

        $i90 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c91 = (char) $i90;

        $z25 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c91);

        if $z25 != 0 goto label008;

     label009:
        return 14;

     label010:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i55 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i177 = (int) -1;

        if $i55 == $i177 goto label011;

        $i56 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c57 = (char) $i56;

        $z15 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c57);

        if $z15 != 0 goto label012;

     label011:
        return 46;

     label012:
        $i58 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i58 == 82 goto label015;

     label013:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i86 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i179 = (int) -1;

        if $i86 == $i179 goto label014;

        $i87 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c88 = (char) $i87;

        $z24 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c88);

        if $z24 != 0 goto label013;

     label014:
        return 14;

     label015:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i59 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i181 = (int) -1;

        if $i59 == $i181 goto label016;

        $i60 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c61 = (char) $i60;

        $z16 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c61);

        if $z16 != 0 goto label017;

     label016:
        return 14;

     label017:
        $i62 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i62 == 69 goto label020;

     label018:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i83 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i183 = (int) -1;

        if $i83 == $i183 goto label019;

        $i84 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c85 = (char) $i84;

        $z23 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c85);

        if $z23 != 0 goto label018;

     label019:
        return 14;

     label020:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i63 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i185 = (int) -1;

        if $i63 == $i185 goto label021;

        $i64 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c65 = (char) $i64;

        $z17 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c65);

        if $z17 != 0 goto label022;

     label021:
        return 14;

     label022:
        $i66 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i66 == 70 goto label025;

     label023:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i80 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i187 = (int) -1;

        if $i80 == $i187 goto label024;

        $i81 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c82 = (char) $i81;

        $z22 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c82);

        if $z22 != 0 goto label023;

     label024:
        return 14;

     label025:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i67 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i189 = (int) -1;

        if $i67 == $i189 goto label026;

        $i68 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c69 = (char) $i68;

        $z18 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c69);

        if $z18 != 0 goto label027;

     label026:
        return 47;

     label027:
        $i70 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i70 == 83 goto label030;

     label028:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i77 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i191 = (int) -1;

        if $i77 == $i191 goto label029;

        $i78 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c79 = (char) $i78;

        $z21 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c79);

        if $z21 != 0 goto label028;

     label029:
        return 14;

     label030:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i71 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i193 = (int) -1;

        if $i71 == $i193 goto label031;

        $i72 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c73 = (char) $i72;

        $z19 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c73);

        if $z19 != 0 goto label032;

     label031:
        return 48;

     label032:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i74 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i195 = (int) -1;

        if $i74 == $i195 goto label033;

        $i75 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c76 = (char) $i75;

        $z20 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c76);

        if $z20 != 0 goto label032;

     label033:
        r0.<org.apache.batik.xml.XMLScanner: int type> = 14;

        return 14;

     label034:
        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        lookupswitch($i1)
        {
            case 77: goto label038;
            case 79: goto label037;
            default: goto label035;
        };

     label035:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i51 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i197 = (int) -1;

        if $i51 == $i197 goto label036;

        $i52 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c53 = (char) $i52;

        $z14 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c53);

        if $z14 != 0 goto label035;

     label036:
        return 14;

     label037:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 15;

        $i2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("TATION", 57, 14);

        return $i2;

     label038:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i3 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i199 = (int) -1;

        if $i3 == $i199 goto label039;

        $i4 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c5 = (char) $i4;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c5);

        if $z0 != 0 goto label040;

     label039:
        return 14;

     label040:
        $i6 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i6 == 84 goto label043;

     label041:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i48 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i201 = (int) -1;

        if $i48 == $i201 goto label042;

        $i49 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c50 = (char) $i49;

        $z13 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c50);

        if $z13 != 0 goto label041;

     label042:
        return 14;

     label043:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i7 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i203 = (int) -1;

        if $i7 == $i203 goto label044;

        $i8 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c9 = (char) $i8;

        $z1 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c9);

        if $z1 != 0 goto label045;

     label044:
        return 14;

     label045:
        $i10 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i10 == 79 goto label048;

     label046:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i45 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i205 = (int) -1;

        if $i45 == $i205 goto label047;

        $i46 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c47 = (char) $i46;

        $z12 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c47);

        if $z12 != 0 goto label046;

     label047:
        return 14;

     label048:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i11 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i207 = (int) -1;

        if $i11 == $i207 goto label049;

        $i12 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c13 = (char) $i12;

        $z2 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c13);

        if $z2 != 0 goto label050;

     label049:
        return 14;

     label050:
        $i14 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i14 == 75 goto label053;

     label051:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i42 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i209 = (int) -1;

        if $i42 == $i209 goto label052;

        $i43 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c44 = (char) $i43;

        $z11 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c44);

        if $z11 != 0 goto label051;

     label052:
        return 14;

     label053:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i15 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i211 = (int) -1;

        if $i15 == $i211 goto label054;

        $i16 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c17 = (char) $i16;

        $z3 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c17);

        if $z3 != 0 goto label055;

     label054:
        return 14;

     label055:
        $i18 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i18 == 69 goto label058;

     label056:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i39 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i213 = (int) -1;

        if $i39 == $i213 goto label057;

        $i40 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c41 = (char) $i40;

        $z10 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c41);

        if $z10 != 0 goto label056;

     label057:
        return 14;

     label058:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i19 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i215 = (int) -1;

        if $i19 == $i215 goto label059;

        $i20 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c21 = (char) $i20;

        $z4 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c21);

        if $z4 != 0 goto label060;

     label059:
        return 14;

     label060:
        $i22 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i22 == 78 goto label063;

     label061:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i36 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i217 = (int) -1;

        if $i36 == $i217 goto label062;

        $i37 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c38 = (char) $i37;

        $z9 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c38);

        if $z9 != 0 goto label061;

     label062:
        return 14;

     label063:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i23 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i219 = (int) -1;

        if $i23 == $i219 goto label064;

        $i24 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c25 = (char) $i24;

        $z5 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c25);

        if $z5 != 0 goto label065;

     label064:
        return 49;

     label065:
        $i26 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i26 == 83 goto label068;

     label066:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i33 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i221 = (int) -1;

        if $i33 == $i221 goto label067;

        $i34 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c35 = (char) $i34;

        $z8 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c35);

        if $z8 != 0 goto label066;

     label067:
        return 14;

     label068:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i27 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i223 = (int) -1;

        if $i27 == $i223 goto label069;

        $i28 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c29 = (char) $i28;

        $z6 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c29);

        if $z6 != 0 goto label070;

     label069:
        return 50;

     label070:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i30 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i225 = (int) -1;

        if $i30 == $i225 goto label071;

        $i31 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c32 = (char) $i31;

        $z7 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c32);

        if $z7 != 0 goto label070;

     label071:
        return 14;

     label072:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i92 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i92 == 78 goto label075;

     label073:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i144 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i227 = (int) -1;

        if $i144 == $i227 goto label074;

        $i145 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c146 = (char) $i145;

        $z41 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c146);

        if $z41 != 0 goto label073;

     label074:
        return 14;

     label075:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i93 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i229 = (int) -1;

        if $i93 == $i229 goto label076;

        $i94 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c95 = (char) $i94;

        $z26 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c95);

        if $z26 != 0 goto label077;

     label076:
        return 14;

     label077:
        $i96 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i96 == 84 goto label080;

     label078:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i141 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i231 = (int) -1;

        if $i141 == $i231 goto label079;

        $i142 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c143 = (char) $i142;

        $z40 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c143);

        if $z40 != 0 goto label078;

     label079:
        return 14;

     label080:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i97 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i233 = (int) -1;

        if $i97 == $i233 goto label081;

        $i98 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c99 = (char) $i98;

        $z27 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c99);

        if $z27 != 0 goto label082;

     label081:
        return 14;

     label082:
        $i100 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i100 == 73 goto label085;

     label083:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i138 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i235 = (int) -1;

        if $i138 == $i235 goto label084;

        $i139 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c140 = (char) $i139;

        $z39 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c140);

        if $z39 != 0 goto label083;

     label084:
        return 14;

     label085:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i101 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i237 = (int) -1;

        if $i101 == $i237 goto label086;

        $i102 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c103 = (char) $i102;

        $z28 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c103);

        if $z28 != 0 goto label087;

     label086:
        return 14;

     label087:
        $i104 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i104 == 84 goto label090;

     label088:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i135 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i239 = (int) -1;

        if $i135 == $i239 goto label089;

        $i136 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c137 = (char) $i136;

        $z38 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c137);

        if $z38 != 0 goto label088;

     label089:
        r0.<org.apache.batik.xml.XMLScanner: int type> = 14;

        return 14;

     label090:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i105 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i241 = (int) -1;

        if $i105 == $i241 goto label091;

        $i106 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c107 = (char) $i106;

        $z29 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c107);

        if $z29 != 0 goto label092;

     label091:
        return 14;

     label092:
        $i108 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i108)
        {
            case 73: goto label097;
            case 89: goto label093;
            default: goto label108;
        };

     label093:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i109 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i243 = (int) -1;

        if $i109 == $i243 goto label094;

        $i110 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c111 = (char) $i110;

        $z30 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c111);

        if $z30 != 0 goto label095;

     label094:
        return 51;

     label095:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i112 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i245 = (int) -1;

        if $i112 == $i245 goto label096;

        $i113 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c114 = (char) $i113;

        $z31 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c114);

        if $z31 != 0 goto label095;

     label096:
        return 14;

     label097:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i115 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i247 = (int) -1;

        if $i115 == $i247 goto label098;

        $i116 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c117 = (char) $i116;

        $z32 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c117);

        if $z32 != 0 goto label099;

     label098:
        return 14;

     label099:
        $i118 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i118 == 69 goto label102;

     label100:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i126 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i249 = (int) -1;

        if $i126 == $i249 goto label101;

        $i127 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c128 = (char) $i127;

        $z35 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c128);

        if $z35 != 0 goto label100;

     label101:
        return 14;

     label102:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i119 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i251 = (int) -1;

        if $i119 == $i251 goto label103;

        $i120 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c121 = (char) $i120;

        $z33 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c121);

        if $z33 != 0 goto label104;

     label103:
        return 14;

     label104:
        $i122 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i122 == 83 goto label107;

     label105:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i123 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i253 = (int) -1;

        if $i123 == $i253 goto label106;

        $i124 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c125 = (char) $i124;

        $z34 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c125);

        if $z34 != 0 goto label105;

     label106:
        return 14;

     label107:
        return 52;

     label108:
        $i129 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i255 = (int) -1;

        if $i129 == $i255 goto label109;

        $i130 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c131 = (char) $i130;

        $z36 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c131);

        if $z36 != 0 goto label110;

     label109:
        return 14;

     label110:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i132 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i257 = (int) -1;

        if $i132 == $i257 goto label111;

        $i133 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c134 = (char) $i133;

        $z37 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c134);

        if $z37 != 0 goto label110;

     label111:
        return 14;

     label112:
        r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter> = 34;

        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i160 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i259 = (int) -1;

        if $i160 != $i259 goto label113;

        $r6 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r6;

     label113:
        $i161 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i161 == 34 goto label115;

        $i162 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i162 == 38 goto label115;

     label114:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i163 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i261 = (int) -1;

        if $i163 == $i261 goto label115;

        $i164 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i164 == 34 goto label115;

        $i165 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i165 != 38 goto label114;

     label115:
        $i170 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i170)
        {
            case 34: goto label117;
            case 38: goto label116;
            default: goto label118;
        };

     label116:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 10;

        return 16;

     label117:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 25;

     label118:
        $r5 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r5;

     label119:
        r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter> = 39;

        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i148 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i263 = (int) -1;

        if $i148 != $i263 goto label120;

        $r2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r2;

     label120:
        $i149 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i149 == 39 goto label122;

        $i150 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i150 == 38 goto label122;

     label121:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i151 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i265 = (int) -1;

        if $i151 == $i265 goto label122;

        $i152 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i152 == 39 goto label122;

        $i153 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i153 != 38 goto label121;

     label122:
        $i171 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i171)
        {
            case 38: goto label123;
            case 39: goto label124;
            default: goto label125;
        };

     label123:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 10;

        return 16;

     label124:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 25;

     label125:
        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r1;

     label126:
        $i156 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        lookupswitch($i156)
        {
            case 70: goto label129;
            case 73: goto label128;
            case 82: goto label127;
            default: goto label130;
        };

     label127:
        $i267 = (int) -1;

        $i157 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("EQUIRED", 53, $i267);

        return $i157;

     label128:
        $i269 = (int) -1;

        $i158 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("MPLIED", 54, $i269);

        return $i158;

     label129:
        $i271 = (int) -1;

        $i159 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("IXED", 55, $i271);

        return $i159;

     label130:
        $r4 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r4;

     label131:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int context> = 16;

        return 40;

     label132:
        $i169 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(14);

        return $i169;
    }

    protected int nextInNotation() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        char $c9;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12;
        org.apache.batik.xml.XMLException $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case 9: goto label01;
            case 10: goto label01;
            case 13: goto label01;
            case 32: goto label01;
            case 34: goto label08;
            case 37: goto label04;
            case 39: goto label09;
            case 62: goto label03;
            case 80: goto label07;
            case 83: goto label06;
            default: goto label10;
        };

     label01:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i7 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i12 = (int) -1;

        if $i7 == $i12 goto label02;

        $i8 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c9 = (char) $i8;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c9);

        if $z0 != 0 goto label01;

     label02:
        return 1;

     label03:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int context> = 7;

        return 20;

     label04:
        $i4 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(34);

        $i5 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i5 == 59 goto label05;

        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("malformed.parameter.entity");

        throw $r1;

     label05:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return $i4;

     label06:
        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("YSTEM", 26, 14);

        return $i1;

     label07:
        $i2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("UBLIC", 27, 14);

        return $i2;

     label08:
        r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter> = 34;

        $i6 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readString()>();

        return $i6;

     label09:
        r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter> = 39;

        $i3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readString()>();

        return $i3;

     label10:
        $i10 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(14);

        return $i10;
    }

    protected int nextInEntity() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        boolean $z0;
        org.apache.batik.xml.XMLException $r1, $r2, $r3, $r4;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i27, $i29, $i31, $i33, $i35;
        char $c22;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case 9: goto label01;
            case 10: goto label01;
            case 13: goto label01;
            case 32: goto label01;
            case 34: goto label08;
            case 37: goto label04;
            case 39: goto label16;
            case 62: goto label03;
            case 78: goto label07;
            case 80: goto label06;
            case 83: goto label05;
            default: goto label24;
        };

     label01:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i20 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i27 = (int) -1;

        if $i20 == $i27 goto label02;

        $i21 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c22 = (char) $i21;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c22);

        if $z0 != 0 goto label01;

     label02:
        return 1;

     label03:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int context> = 7;

        return 20;

     label04:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 58;

     label05:
        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("YSTEM", 26, 14);

        return $i1;

     label06:
        $i2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("UBLIC", 27, 14);

        return $i2;

     label07:
        $i3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readIdentifier(java.lang.String,int,int)>("DATA", 59, 14);

        return $i3;

     label08:
        r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter> = 34;

        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i12 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i29 = (int) -1;

        if $i12 != $i29 goto label09;

        $r4 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r4;

     label09:
        $i13 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i13 == 34 goto label11;

        $i14 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i14 == 38 goto label11;

        $i15 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i15 == 37 goto label11;

     label10:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i16 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i31 = (int) -1;

        if $i16 == $i31 goto label11;

        $i17 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i17 == 34 goto label11;

        $i18 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i18 == 38 goto label11;

        $i19 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i19 != 37 goto label10;

     label11:
        $i24 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        tableswitch($i24)
        {
            case 34: goto label14;
            case 35: goto label12;
            case 36: goto label12;
            case 37: goto label13;
            case 38: goto label13;
            default: goto label12;
        };

     label12:
        $r3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r3;

     label13:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 17;

        goto label15;

     label14:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 25;

     label15:
        return 16;

     label16:
        r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter> = 39;

        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i4 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i33 = (int) -1;

        if $i4 != $i33 goto label17;

        $r2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r2;

     label17:
        $i5 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i5 == 39 goto label19;

        $i6 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i6 == 38 goto label19;

        $i7 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i7 == 37 goto label19;

     label18:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i8 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i35 = (int) -1;

        if $i8 == $i35 goto label19;

        $i9 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i9 == 39 goto label19;

        $i10 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i10 == 38 goto label19;

        $i11 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i11 != 37 goto label18;

     label19:
        $i25 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        tableswitch($i25)
        {
            case 37: goto label21;
            case 38: goto label21;
            case 39: goto label22;
            default: goto label20;
        };

     label20:
        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.character");

        throw $r1;

     label21:
        r0.<org.apache.batik.xml.XMLScanner: int context> = 17;

        goto label23;

     label22:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 25;

     label23:
        return 16;

     label24:
        $i23 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(14);

        return $i23;
    }

    protected int nextInEntityValue() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        char $c5;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i12;
        org.apache.batik.xml.XMLException $r1, $r2;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case 37: goto label02;
            case 38: goto label01;
            default: goto label04;
        };

     label01:
        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readReference()>();

        return $i1;

     label02:
        $i2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(34);

        $i3 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i3 == 59 goto label03;

        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.parameter.entity");

        throw $r1;

     label03:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return $i2;

     label04:
        goto label06;

     label05:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

     label06:
        $i4 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i11 = (int) -1;

        if $i4 == $i11 goto label07;

        $i6 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c5 = r0.<org.apache.batik.xml.XMLScanner: char attrDelimiter>;

        $i12 = (int) $c5;

        if $i6 == $i12 goto label07;

        $i7 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i7 == 38 goto label07;

        $i8 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i8 != 37 goto label05;

     label07:
        $i9 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i9)
        {
            case -1: goto label08;
            case 34: goto label09;
            case 39: goto label09;
            default: goto label10;
        };

     label08:
        $r2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r2;

     label09:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int context> = 13;

        return 25;

     label10:
        return 16;
    }

    protected int nextInNotationType() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        char $c3;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i4, $i6;
        boolean $z0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case 9: goto label1;
            case 10: goto label1;
            case 13: goto label1;
            case 32: goto label1;
            case 40: goto label4;
            case 41: goto label5;
            case 124: goto label3;
            default: goto label6;
        };

     label1:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i1 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i6 = (int) -1;

        if $i1 == $i6 goto label2;

        $i2 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c3 = (char) $i2;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c3);

        if $z0 != 0 goto label1;

     label2:
        return 1;

     label3:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 42;

     label4:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 40;

     label5:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int context> = 11;

        return 41;

     label6:
        $i4 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(14);

        return $i4;
    }

    protected int nextInEnumeration() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        char $c3;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i4, $i6;
        boolean $z0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i0)
        {
            case 9: goto label1;
            case 10: goto label1;
            case 13: goto label1;
            case 32: goto label1;
            case 41: goto label4;
            case 124: goto label3;
            default: goto label5;
        };

     label1:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i1 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i6 = (int) -1;

        if $i1 == $i6 goto label2;

        $i2 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c3 = (char) $i2;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c3);

        if $z0 != 0 goto label1;

     label2:
        return 1;

     label3:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 42;

     label4:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        r0.<org.apache.batik.xml.XMLScanner: int context> = 11;

        return 41;

     label5:
        $i4 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readNmtoken()>();

        return $i4;
    }

    protected int readReference() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13;
        org.apache.batik.xml.XMLException $r1, $r2, $r3;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i0 != 35 goto label09;

        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        i12 = 0;

        $i3 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        lookupswitch($i3)
        {
            case -1: goto label05;
            case 120: goto label01;
            default: goto label04;
        };

     label01:
        i12 = i12 + 1;

        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i13 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i13 < 48 goto label02;

        $i9 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i9 <= 57 goto label01;

     label02:
        $i4 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i4 < 97 goto label03;

        $i8 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i8 <= 102 goto label01;

     label03:
        $i5 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i5 < 65 goto label06;

        $i7 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i7 <= 70 goto label01;

        goto label06;

     label04:
        i12 = i12 + 1;

        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i10 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i10 < 48 goto label06;

        $i11 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i11 <= 57 goto label04;

        goto label06;

     label05:
        $r3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r3;

     label06:
        if i12 == 1 goto label07;

        $i6 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i6 == 59 goto label08;

     label07:
        $r2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("character.reference");

        throw $r2;

     label08:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 12;

     label09:
        $i1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int readName(int)>(13);

        $i2 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i2 == 59 goto label10;

        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("character.reference");

        throw $r1;

     label10:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return $i1;
    }

    protected int readPEReference() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        char $c2, $c6;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i3, $i4, $i5, $i8, $i10;
        org.apache.batik.xml.XMLException $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i8 = (int) -1;

        if $i0 != $i8 goto label1;

        $r3 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r3;

     label1:
        $i1 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c2 = (char) $i1;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameFirstCharacter(char)>($c2);

        if $z0 != 0 goto label2;

        $r2 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.parameter.entity");

        throw $r2;

     label2:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        $i3 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i10 = (int) -1;

        if $i3 == $i10 goto label3;

        $i5 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c6 = (char) $i5;

        $z1 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c6);

        if $z1 != 0 goto label2;

     label3:
        $i4 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        if $i4 == 59 goto label4;

        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("invalid.parameter.entity");

        throw $r1;

     label4:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

        return 34;
    }

    protected int readNmtoken() throws java.io.IOException, org.apache.batik.xml.XMLException
    {
        int $i0, $i1, $i4;
        char $c2;
        org.apache.batik.xml.XMLException $r1;
        org.apache.batik.xml.XMLScanner r0;
        boolean $z0;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $i0 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        $r1 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.xml.XMLException createXMLException(java.lang.String)>("unexpected.eof");

        throw $r1;

     label1:
        virtualinvoke r0.<org.apache.batik.xml.XMLScanner: int nextChar()>();

     label2:
        $i1 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c2 = (char) $i1;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLNameCharacter(char)>($c2);

        if $z0 != 0 goto label1;

        return 56;
    }

    protected int nextChar() throws java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17;
        char $c7;
        char[] $r2, $r3, r4, $r5;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        $r1 = r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.xml.XMLScanner: int current> = $i0;

        $i1 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $i16 = (int) -1;

        if $i1 != $i16 goto label1;

        $i14 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        return $i14;

     label1:
        $i3 = r0.<org.apache.batik.xml.XMLScanner: int position>;

        $r2 = r0.<org.apache.batik.xml.XMLScanner: char[] buffer>;

        $i2 = lengthof $r2;

        if $i3 != $i2 goto label2;

        $i8 = r0.<org.apache.batik.xml.XMLScanner: int position>;

        $i11 = 1 + $i8;

        $i9 = r0.<org.apache.batik.xml.XMLScanner: int position>;

        $i10 = $i9 / 2;

        $i12 = $i11 + $i10;

        r4 = newarray (char)[$i12];

        $r5 = r0.<org.apache.batik.xml.XMLScanner: char[] buffer>;

        $i13 = r0.<org.apache.batik.xml.XMLScanner: int position>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r4, 0, $i13);

        r0.<org.apache.batik.xml.XMLScanner: char[] buffer> = r4;

     label2:
        $r3 = r0.<org.apache.batik.xml.XMLScanner: char[] buffer>;

        $i4 = r0.<org.apache.batik.xml.XMLScanner: int position>;

        $i5 = $i4 + 1;

        r0.<org.apache.batik.xml.XMLScanner: int position> = $i5;

        $i6 = r0.<org.apache.batik.xml.XMLScanner: int current>;

        $c7 = (char) $i6;

        $r3[$i4] = $c7;

        $i17 = (int) $c7;

        return $i17;
    }

    protected org.apache.batik.xml.XMLException createXMLException(java.lang.String)
    {
        java.lang.Object[] $r2;
        org.apache.batik.util.io.NormalizingReader $r4, $r6;
        java.util.MissingResourceException $r8;
        java.lang.Integer $r3, $r5;
        org.apache.batik.xml.XMLScanner r0;
        int $i0, $i1;
        java.lang.String r1, r9;
        org.apache.batik.xml.XMLException $r7;

        r0 := @this: org.apache.batik.xml.XMLScanner;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = newarray (java.lang.Object)[2];

        $r3 = new java.lang.Integer;

        $r4 = r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r4.<org.apache.batik.util.io.NormalizingReader: int getLine()>();

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i0);

        $r2[0] = $r3;

        $r5 = new java.lang.Integer;

        $r6 = r0.<org.apache.batik.xml.XMLScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i1 = virtualinvoke $r6.<org.apache.batik.util.io.NormalizingReader: int getColumn()>();

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i1);

        $r2[1] = $r5;

        r9 = virtualinvoke r0.<org.apache.batik.xml.XMLScanner: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r1, $r2);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r9 = r1;

     label4:
        $r7 = new org.apache.batik.xml.XMLException;

        specialinvoke $r7.<org.apache.batik.xml.XMLException: void <init>(java.lang.String)>(r9);

        return $r7;

        catch java.util.MissingResourceException from label1 to label2 with label3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    public static void <clinit>()
    {
        <org.apache.batik.xml.XMLScanner: java.lang.String BUNDLE_CLASSNAME> = "org.apache.batik.xml.resources.Messages";

        <org.apache.batik.xml.XMLScanner: int ENTITY_VALUE_CONTEXT> = 17;

        <org.apache.batik.xml.XMLScanner: int ENUMERATION_CONTEXT> = 16;

        <org.apache.batik.xml.XMLScanner: int NOTATION_TYPE_CONTEXT> = 15;

        <org.apache.batik.xml.XMLScanner: int NOTATION_CONTEXT> = 14;

        <org.apache.batik.xml.XMLScanner: int ENTITY_CONTEXT> = 13;

        <org.apache.batik.xml.XMLScanner: int ELEMENT_DECLARATION_CONTEXT> = 12;

        <org.apache.batik.xml.XMLScanner: int ATTLIST_CONTEXT> = 11;

        <org.apache.batik.xml.XMLScanner: int ATTRIBUTE_VALUE_CONTEXT> = 10;

        <org.apache.batik.xml.XMLScanner: int END_TAG_CONTEXT> = 9;

        <org.apache.batik.xml.XMLScanner: int CDATA_SECTION_CONTEXT> = 8;

        <org.apache.batik.xml.XMLScanner: int DTD_DECLARATIONS_CONTEXT> = 7;

        <org.apache.batik.xml.XMLScanner: int CONTENT_CONTEXT> = 6;

        <org.apache.batik.xml.XMLScanner: int START_TAG_CONTEXT> = 5;

        <org.apache.batik.xml.XMLScanner: int DOCTYPE_CONTEXT> = 4;

        <org.apache.batik.xml.XMLScanner: int XML_DECL_CONTEXT> = 3;

        <org.apache.batik.xml.XMLScanner: int PI_CONTEXT> = 2;

        <org.apache.batik.xml.XMLScanner: int TOP_LEVEL_CONTEXT> = 1;

        <org.apache.batik.xml.XMLScanner: int DOCUMENT_START_CONTEXT> = 0;

        return;
    }
}
