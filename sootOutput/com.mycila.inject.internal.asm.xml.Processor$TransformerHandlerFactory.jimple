final class com.mycila.inject.internal.asm.xml.Processor$TransformerHandlerFactory extends java.lang.Object implements com.mycila.inject.internal.asm.xml.Processor$ContentHandlerFactory
{
    private javax.xml.transform.sax.SAXTransformerFactory saxtf;
    private final javax.xml.transform.Templates templates;
    private org.xml.sax.ContentHandler outputHandler;

    void <init>(javax.xml.transform.sax.SAXTransformerFactory, javax.xml.transform.Templates, org.xml.sax.ContentHandler)
    {
        com.mycila.inject.internal.asm.xml.Processor$TransformerHandlerFactory r0;
        javax.xml.transform.Templates r2;
        org.xml.sax.ContentHandler r3;
        javax.xml.transform.sax.SAXTransformerFactory r1;

        r0 := @this: com.mycila.inject.internal.asm.xml.Processor$TransformerHandlerFactory;

        r1 := @parameter0: javax.xml.transform.sax.SAXTransformerFactory;

        r2 := @parameter1: javax.xml.transform.Templates;

        r3 := @parameter2: org.xml.sax.ContentHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.asm.xml.Processor$TransformerHandlerFactory: javax.xml.transform.sax.SAXTransformerFactory saxtf> = r1;

        r0.<com.mycila.inject.internal.asm.xml.Processor$TransformerHandlerFactory: javax.xml.transform.Templates templates> = r2;

        r0.<com.mycila.inject.internal.asm.xml.Processor$TransformerHandlerFactory: org.xml.sax.ContentHandler outputHandler> = r3;

        return;
    }

    public final org.xml.sax.ContentHandler createContentHandler()
    {
        javax.xml.transform.Templates $r1;
        javax.xml.transform.TransformerConfigurationException $r6;
        java.lang.RuntimeException $r7;
        javax.xml.transform.sax.SAXResult $r4;
        javax.xml.transform.sax.SAXTransformerFactory $r2;
        com.mycila.inject.internal.asm.xml.Processor$TransformerHandlerFactory r0;
        org.xml.sax.ContentHandler $r5;
        java.lang.String $r8;
        javax.xml.transform.sax.TransformerHandler $r3;

        r0 := @this: com.mycila.inject.internal.asm.xml.Processor$TransformerHandlerFactory;

     label1:
        $r2 = r0.<com.mycila.inject.internal.asm.xml.Processor$TransformerHandlerFactory: javax.xml.transform.sax.SAXTransformerFactory saxtf>;

        $r1 = r0.<com.mycila.inject.internal.asm.xml.Processor$TransformerHandlerFactory: javax.xml.transform.Templates templates>;

        $r3 = virtualinvoke $r2.<javax.xml.transform.sax.SAXTransformerFactory: javax.xml.transform.sax.TransformerHandler newTransformerHandler(javax.xml.transform.Templates)>($r1);

        $r4 = new javax.xml.transform.sax.SAXResult;

        $r5 = r0.<com.mycila.inject.internal.asm.xml.Processor$TransformerHandlerFactory: org.xml.sax.ContentHandler outputHandler>;

        specialinvoke $r4.<javax.xml.transform.sax.SAXResult: void <init>(org.xml.sax.ContentHandler)>($r5);

        interfaceinvoke $r3.<javax.xml.transform.sax.TransformerHandler: void setResult(javax.xml.transform.Result)>($r4);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        $r8 = virtualinvoke $r6.<javax.xml.transform.TransformerConfigurationException: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r7;

        catch javax.xml.transform.TransformerConfigurationException from label1 to label2 with label3;
    }
}
