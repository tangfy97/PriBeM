public class org.bouncycastle.crypto.engines.HC128Engine extends java.lang.Object implements org.bouncycastle.crypto.StreamCipher
{
    private int[] p;
    private int[] q;
    private int cnt;
    private byte[] key;
    private byte[] iv;
    private boolean initialised;
    private byte[] buf;
    private int idx;

    public void <init>()
    {
        byte[] $r3;
        int[] $r1, $r2;
        org.bouncycastle.crypto.engines.HC128Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.HC128Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[512];

        r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] p> = $r1;

        $r2 = newarray (int)[512];

        r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] q> = $r2;

        r0.<org.bouncycastle.crypto.engines.HC128Engine: int cnt> = 0;

        $r3 = newarray (byte)[4];

        r0.<org.bouncycastle.crypto.engines.HC128Engine: byte[] buf> = $r3;

        r0.<org.bouncycastle.crypto.engines.HC128Engine: int idx> = 0;

        return;
    }

    private static int f1(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        $i1 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int rotateRight(int,int)>(i0, 7);

        $i2 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int rotateRight(int,int)>(i0, 18);

        $i4 = $i1 ^ $i2;

        $i3 = i0 >>> 3;

        $i5 = $i4 ^ $i3;

        return $i5;
    }

    private static int f2(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        $i1 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int rotateRight(int,int)>(i0, 17);

        $i2 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int rotateRight(int,int)>(i0, 19);

        $i4 = $i1 ^ $i2;

        $i3 = i0 >>> 10;

        $i5 = $i4 ^ $i3;

        return $i5;
    }

    private int g1(int, int, int)
    {
        org.bouncycastle.crypto.engines.HC128Engine r0;
        int i0, $i1, i2, $i3, i4, $i5, $i6, $i7;

        r0 := @this: org.bouncycastle.crypto.engines.HC128Engine;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        i2 := @parameter2: int;

        $i1 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int rotateRight(int,int)>(i0, 10);

        $i3 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int rotateRight(int,int)>(i2, 23);

        $i5 = $i1 ^ $i3;

        $i6 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int rotateRight(int,int)>(i4, 8);

        $i7 = $i5 + $i6;

        return $i7;
    }

    private int g2(int, int, int)
    {
        org.bouncycastle.crypto.engines.HC128Engine r0;
        int i0, $i1, i2, $i3, i4, $i5, $i6, $i7;

        r0 := @this: org.bouncycastle.crypto.engines.HC128Engine;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        i2 := @parameter2: int;

        $i1 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int rotateLeft(int,int)>(i0, 10);

        $i3 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int rotateLeft(int,int)>(i2, 23);

        $i5 = $i1 ^ $i3;

        $i6 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int rotateLeft(int,int)>(i4, 8);

        $i7 = $i5 + $i6;

        return $i7;
    }

    private static int rotateLeft(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = i0 << i1;

        $i2 = neg i1;

        $i3 = i0 >>> $i2;

        $i5 = $i4 | $i3;

        return $i5;
    }

    private static int rotateRight(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = i0 >>> i1;

        $i2 = neg i1;

        $i3 = i0 << $i2;

        $i5 = $i4 | $i3;

        return $i5;
    }

    private int h1(int)
    {
        org.bouncycastle.crypto.engines.HC128Engine r0;
        int[] $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.bouncycastle.crypto.engines.HC128Engine;

        i0 := @parameter0: int;

        $r1 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] q>;

        $i1 = i0 & 255;

        $i6 = $r1[$i1];

        $r2 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] q>;

        $i2 = i0 >> 16;

        $i3 = $i2 & 255;

        $i4 = $i3 + 256;

        $i5 = $r2[$i4];

        $i7 = $i6 + $i5;

        return $i7;
    }

    private int h2(int)
    {
        org.bouncycastle.crypto.engines.HC128Engine r0;
        int[] $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.bouncycastle.crypto.engines.HC128Engine;

        i0 := @parameter0: int;

        $r1 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] p>;

        $i1 = i0 & 255;

        $i6 = $r1[$i1];

        $r2 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] p>;

        $i2 = i0 >> 16;

        $i3 = $i2 & 255;

        $i4 = $i3 + 256;

        $i5 = $r2[$i4];

        $i7 = $i6 + $i5;

        return $i7;
    }

    private static int mod1024(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 & 1023;

        return $i1;
    }

    private static int mod512(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 & 511;

        return $i1;
    }

    private static int dim(int, int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 - i1;

        $i3 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int mod512(int)>($i2);

        return $i3;
    }

    private int step()
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        org.bouncycastle.crypto.engines.HC128Engine r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32;

        r0 := @this: org.bouncycastle.crypto.engines.HC128Engine;

        $i0 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int cnt>;

        $i1 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int mod512(int)>($i0);

        $i2 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int cnt>;

        if $i2 >= 512 goto label1;

        $r7 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] p>;

        $i19 = $r7[$i1];

        $r8 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] p>;

        $i20 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int dim(int,int)>($i1, 3);

        $i21 = $r8[$i20];

        $r9 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] p>;

        $i22 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int dim(int,int)>($i1, 10);

        $i23 = $r9[$i22];

        $r10 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] p>;

        $i24 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int dim(int,int)>($i1, 511);

        $i25 = $r10[$i24];

        $i26 = specialinvoke r0.<org.bouncycastle.crypto.engines.HC128Engine: int g1(int,int,int)>($i21, $i23, $i25);

        $i27 = $i19 + $i26;

        $r7[$i1] = $i27;

        $r11 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] p>;

        $i28 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int dim(int,int)>($i1, 12);

        $i29 = $r11[$i28];

        $i30 = specialinvoke r0.<org.bouncycastle.crypto.engines.HC128Engine: int h1(int)>($i29);

        $r12 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] p>;

        $i31 = $r12[$i1];

        i32 = $i30 ^ $i31;

        goto label2;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] q>;

        $i3 = $r1[$i1];

        $r2 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] q>;

        $i4 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int dim(int,int)>($i1, 3);

        $i5 = $r2[$i4];

        $r3 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] q>;

        $i6 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int dim(int,int)>($i1, 10);

        $i7 = $r3[$i6];

        $r4 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] q>;

        $i8 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int dim(int,int)>($i1, 511);

        $i9 = $r4[$i8];

        $i10 = specialinvoke r0.<org.bouncycastle.crypto.engines.HC128Engine: int g2(int,int,int)>($i5, $i7, $i9);

        $i11 = $i3 + $i10;

        $r1[$i1] = $i11;

        $r5 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] q>;

        $i12 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int dim(int,int)>($i1, 12);

        $i13 = $r5[$i12];

        $i14 = specialinvoke r0.<org.bouncycastle.crypto.engines.HC128Engine: int h2(int)>($i13);

        $r6 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] q>;

        $i15 = $r6[$i1];

        i32 = $i14 ^ $i15;

     label2:
        $i16 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int cnt>;

        $i17 = $i16 + 1;

        $i18 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int mod1024(int)>($i17);

        r0.<org.bouncycastle.crypto.engines.HC128Engine: int cnt> = $i18;

        return i32;
    }

    private void init()
    {
        byte[] $r1, $r3, $r8, $r9;
        byte $b20, $b28;
        int[] r2, $r4, $r5, $r6, $r7;
        org.bouncycastle.crypto.engines.HC128Engine r0;
        short $s23, $s31, $s40, $s42;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, $i24, $i25, $i26, $i27, $i29, $i30, $i32, $i33, $i34, i35, i36, i37, i38, i39, $i41, $i43;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: org.bouncycastle.crypto.engines.HC128Engine;

        $r1 = r0.<org.bouncycastle.crypto.engines.HC128Engine: byte[] key>;

        $i0 = lengthof $r1;

        if $i0 == 16 goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The key must be 128 bits long");

        throw $r11;

     label01:
        r0.<org.bouncycastle.crypto.engines.HC128Engine: int cnt> = 0;

        r2 = newarray (int)[1280];

        i35 = 0;

     label02:
        if i35 >= 16 goto label03;

        $i27 = i35 >> 2;

        $i33 = r2[$i27];

        $r9 = r0.<org.bouncycastle.crypto.engines.HC128Engine: byte[] key>;

        $b28 = $r9[i35];

        $s40 = (short) $b28;

        $s31 = $s40 & 255;

        $i29 = i35 & 3;

        $i30 = 8 * $i29;

        $i41 = (int) $s31;

        $i32 = $i41 << $i30;

        $i34 = $i33 | $i32;

        r2[$i27] = $i34;

        i35 = i35 + 1;

        goto label02;

     label03:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r2, 4, 4);

        i36 = 0;

     label04:
        $r3 = r0.<org.bouncycastle.crypto.engines.HC128Engine: byte[] iv>;

        $i1 = lengthof $r3;

        if i36 >= $i1 goto label05;

        if i36 >= 16 goto label05;

        $i18 = i36 >> 2;

        $i19 = $i18 + 8;

        $i25 = r2[$i19];

        $r8 = r0.<org.bouncycastle.crypto.engines.HC128Engine: byte[] iv>;

        $b20 = $r8[i36];

        $s42 = (short) $b20;

        $s23 = $s42 & 255;

        $i21 = i36 & 3;

        $i22 = 8 * $i21;

        $i43 = (int) $s23;

        $i24 = $i43 << $i22;

        $i26 = $i25 | $i24;

        r2[$i19] = $i26;

        i36 = i36 + 1;

        goto label04;

     label05:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 8, r2, 12, 4);

        i37 = 16;

     label06:
        if i37 >= 1280 goto label07;

        $i4 = i37 - 2;

        $i5 = r2[$i4];

        $i6 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int f2(int)>($i5);

        $i7 = i37 - 7;

        $i8 = r2[$i7];

        $i11 = $i6 + $i8;

        $i9 = i37 - 15;

        $i10 = r2[$i9];

        $i12 = staticinvoke <org.bouncycastle.crypto.engines.HC128Engine: int f1(int)>($i10);

        $i15 = $i11 + $i12;

        $i13 = i37 - 16;

        $i14 = r2[$i13];

        $i16 = $i15 + $i14;

        $i17 = $i16 + i37;

        r2[i37] = $i17;

        i37 = i37 + 1;

        goto label06;

     label07:
        $r4 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] p>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 256, $r4, 0, 512);

        $r5 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] q>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 768, $r5, 0, 512);

        i38 = 0;

     label08:
        if i38 >= 512 goto label09;

        $r7 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] p>;

        $i3 = specialinvoke r0.<org.bouncycastle.crypto.engines.HC128Engine: int step()>();

        $r7[i38] = $i3;

        i38 = i38 + 1;

        goto label08;

     label09:
        i39 = 0;

     label10:
        if i39 >= 512 goto label11;

        $r6 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int[] q>;

        $i2 = specialinvoke r0.<org.bouncycastle.crypto.engines.HC128Engine: int step()>();

        $r6[i39] = $i2;

        i39 = i39 + 1;

        goto label10;

     label11:
        r0.<org.bouncycastle.crypto.engines.HC128Engine: int cnt> = 0;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.engines.HC128Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.HC128Engine;

        return "HC-128";
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        byte[] $r2, $r11, $r13;
        org.bouncycastle.crypto.params.ParametersWithIV $r12, $r14;
        java.lang.String $r7, $r9;
        org.bouncycastle.crypto.params.KeyParameter $r10;
        org.bouncycastle.crypto.CipherParameters r0, r15;
        boolean $z0, $z1, z2;
        org.bouncycastle.crypto.engines.HC128Engine r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r8;
        java.lang.Class $r6;

        r1 := @this: org.bouncycastle.crypto.engines.HC128Engine;

        z2 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        r15 = r0;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label1;

        $r12 = (org.bouncycastle.crypto.params.ParametersWithIV) r0;

        $r13 = virtualinvoke $r12.<org.bouncycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        r1.<org.bouncycastle.crypto.engines.HC128Engine: byte[] iv> = $r13;

        $r14 = (org.bouncycastle.crypto.params.ParametersWithIV) r0;

        r15 = virtualinvoke $r14.<org.bouncycastle.crypto.params.ParametersWithIV: org.bouncycastle.crypto.CipherParameters getParameters()>();

        goto label2;

     label1:
        $r2 = newarray (byte)[0];

        r1.<org.bouncycastle.crypto.engines.HC128Engine: byte[] iv> = $r2;

     label2:
        $z1 = r15 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z1 == 0 goto label3;

        $r10 = (org.bouncycastle.crypto.params.KeyParameter) r15;

        $r11 = virtualinvoke $r10.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        r1.<org.bouncycastle.crypto.engines.HC128Engine: byte[] key> = $r11;

        specialinvoke r1.<org.bouncycastle.crypto.engines.HC128Engine: void init()>();

        goto label4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid parameter passed to HC128 init - ");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label4:
        r1.<org.bouncycastle.crypto.engines.HC128Engine: boolean initialised> = 1;

        return;
    }

    private byte getByte()
    {
        byte[] $r1, $r2, $r3, $r4, $r5;
        byte $b7, $b9, $b11, $b13, $b14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12, i15, i16, i17;
        org.bouncycastle.crypto.engines.HC128Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.HC128Engine;

        $i0 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int idx>;

        if $i0 != 0 goto label1;

        $i5 = specialinvoke r0.<org.bouncycastle.crypto.engines.HC128Engine: int step()>();

        $r2 = r0.<org.bouncycastle.crypto.engines.HC128Engine: byte[] buf>;

        $i6 = $i5 & 255;

        $b7 = (byte) $i6;

        $r2[0] = $b7;

        i15 = $i5 >> 8;

        $r3 = r0.<org.bouncycastle.crypto.engines.HC128Engine: byte[] buf>;

        $i8 = i15 & 255;

        $b9 = (byte) $i8;

        $r3[1] = $b9;

        i16 = i15 >> 8;

        $r4 = r0.<org.bouncycastle.crypto.engines.HC128Engine: byte[] buf>;

        $i10 = i16 & 255;

        $b11 = (byte) $i10;

        $r4[2] = $b11;

        i17 = i16 >> 8;

        $r5 = r0.<org.bouncycastle.crypto.engines.HC128Engine: byte[] buf>;

        $i12 = i17 & 255;

        $b13 = (byte) $i12;

        $r5[3] = $b13;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.engines.HC128Engine: byte[] buf>;

        $i1 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int idx>;

        $b14 = $r1[$i1];

        $i2 = r0.<org.bouncycastle.crypto.engines.HC128Engine: int idx>;

        $i3 = $i2 + 1;

        $i4 = $i3 & 3;

        r0.<org.bouncycastle.crypto.engines.HC128Engine: int idx> = $i4;

        return $b14;
    }

    public void processBytes(byte[], int, int, byte[], int) throws org.bouncycastle.crypto.DataLengthException
    {
        byte[] r1, r2;
        java.lang.IllegalStateException $r5;
        org.bouncycastle.crypto.DataLengthException $r3, $r4;
        byte $b9, $b10, $b11, $b12;
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, i13;
        java.lang.String $r7, $r10;
        boolean $z0;
        org.bouncycastle.crypto.engines.HC128Engine r0;
        java.lang.StringBuilder $r6, $r8, $r9;

        r0 := @this: org.bouncycastle.crypto.engines.HC128Engine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i4 := @parameter4: int;

        $z0 = r0.<org.bouncycastle.crypto.engines.HC128Engine: boolean initialised>;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r0.<org.bouncycastle.crypto.engines.HC128Engine: java.lang.String getAlgorithmName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $i3 = i0 + i1;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label2;

        $r4 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r4;

     label2:
        $i6 = i4 + i1;

        $i5 = lengthof r2;

        if $i6 <= $i5 goto label3;

        $r3 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r3;

     label3:
        i13 = 0;

     label4:
        if i13 >= i1 goto label5;

        $i8 = i4 + i13;

        $i7 = i0 + i13;

        $b9 = r1[$i7];

        $b10 = specialinvoke r0.<org.bouncycastle.crypto.engines.HC128Engine: byte getByte()>();

        $b11 = $b9 ^ $b10;

        $b12 = (byte) $b11;

        r2[$i8] = $b12;

        i13 = i13 + 1;

        goto label4;

     label5:
        return;
    }

    public void reset()
    {
        org.bouncycastle.crypto.engines.HC128Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.HC128Engine;

        r0.<org.bouncycastle.crypto.engines.HC128Engine: int idx> = 0;

        specialinvoke r0.<org.bouncycastle.crypto.engines.HC128Engine: void init()>();

        return;
    }

    public byte returnByte(byte)
    {
        byte b0, $b1, $b2, $b3;
        org.bouncycastle.crypto.engines.HC128Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.HC128Engine;

        b0 := @parameter0: byte;

        $b1 = specialinvoke r0.<org.bouncycastle.crypto.engines.HC128Engine: byte getByte()>();

        $b2 = b0 ^ $b1;

        $b3 = (byte) $b2;

        return $b3;
    }
}
