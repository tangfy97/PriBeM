class com.mycila.inject.internal.guava.collect.ArrayTable$CellSet extends java.util.AbstractSet
{
    final com.mycila.inject.internal.guava.collect.ArrayTable this$0;

    private void <init>(com.mycila.inject.internal.guava.collect.ArrayTable)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r1;
        com.mycila.inject.internal.guava.collect.ArrayTable$CellSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$CellSet;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ArrayTable;

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable$CellSet: com.mycila.inject.internal.guava.collect.ArrayTable this$0> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.ArrayTable$CellSet$1 $r0;
        com.mycila.inject.internal.guava.collect.ArrayTable$CellSet r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$CellSet;

        $r0 = new com.mycila.inject.internal.guava.collect.ArrayTable$CellSet$1;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ArrayTable$CellSet: int size()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ArrayTable$CellSet$1: void <init>(com.mycila.inject.internal.guava.collect.ArrayTable$CellSet,int)>(r1, $i0);

        return $r0;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.ArrayTable $r1;
        com.mycila.inject.internal.guava.collect.ArrayTable$CellSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$CellSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable$CellSet: com.mycila.inject.internal.guava.collect.ArrayTable this$0>;

        $i0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ArrayTable: int size()>();

        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r4, $r9;
        java.lang.Object[] $r15;
        java.lang.Integer r7, r12;
        java.lang.Object[][] $r14;
        int $i0, $i1;
        boolean $z0, $z1, $z2;
        com.mycila.inject.internal.guava.collect.ArrayTable$CellSet r2;
        com.mycila.inject.internal.guava.collect.ArrayTable $r3, $r8, $r13;
        com.mycila.inject.internal.guava.collect.Table$Cell r1;
        java.lang.Object r0, $r5, $r6, $r10, $r11, $r16, $r17;

        r2 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$CellSet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Table$Cell;

        if $z0 == 0 goto label3;

        r1 = (com.mycila.inject.internal.guava.collect.Table$Cell) r0;

        $r3 = r2.<com.mycila.inject.internal.guava.collect.ArrayTable$CellSet: com.mycila.inject.internal.guava.collect.ArrayTable this$0>;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap access$400(com.mycila.inject.internal.guava.collect.ArrayTable)>($r3);

        $r5 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getRowKey()>();

        $r6 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (java.lang.Integer) $r6;

        $r8 = r2.<com.mycila.inject.internal.guava.collect.ArrayTable$CellSet: com.mycila.inject.internal.guava.collect.ArrayTable this$0>;

        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap access$500(com.mycila.inject.internal.guava.collect.ArrayTable)>($r8);

        $r10 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getColumnKey()>();

        $r11 = virtualinvoke $r9.<com.mycila.inject.internal.guava.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r10);

        r12 = (java.lang.Integer) $r11;

        if r7 == null goto label1;

        if r12 == null goto label1;

        $r13 = r2.<com.mycila.inject.internal.guava.collect.ArrayTable$CellSet: com.mycila.inject.internal.guava.collect.ArrayTable this$0>;

        $r14 = staticinvoke <com.mycila.inject.internal.guava.collect.ArrayTable: java.lang.Object[][] access$300(com.mycila.inject.internal.guava.collect.ArrayTable)>($r13);

        $i0 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        $r15 = $r14[$i0];

        $i1 = virtualinvoke r12.<java.lang.Integer: int intValue()>();

        $r16 = $r15[$i1];

        $r17 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getValue()>();

        $z1 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r16, $r17);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    void <init>(com.mycila.inject.internal.guava.collect.ArrayTable, com.mycila.inject.internal.guava.collect.ArrayTable$1)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r1;
        com.mycila.inject.internal.guava.collect.ArrayTable$1 r2;
        com.mycila.inject.internal.guava.collect.ArrayTable$CellSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$CellSet;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ArrayTable;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.ArrayTable$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable$CellSet: void <init>(com.mycila.inject.internal.guava.collect.ArrayTable)>(r1);

        return;
    }
}
