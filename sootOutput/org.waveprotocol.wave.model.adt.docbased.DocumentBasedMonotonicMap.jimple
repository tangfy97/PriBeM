public class org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap extends org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap implements org.waveprotocol.wave.model.adt.ObservableMonotonicMap
{

    protected boolean canReplace(java.lang.Object, java.lang.Object, java.lang.Comparable, java.lang.Comparable)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap r2;
        int $i0;
        java.lang.Comparable r0, r1;
        java.lang.Object r3, r4;

        r2 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.Comparable;

        r1 := @parameter3: java.lang.Comparable;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if $i0 >= 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    protected boolean isRedundantPut(java.lang.Comparable, java.lang.Comparable)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap r2;
        int $i0;
        java.lang.Comparable r0, r1;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Comparable;

        if r0 != null goto label3;

        if r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        if r1 == null goto label6;

        $i0 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if $i0 < 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;

     label6:
        return 0;
    }

    void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object, org.waveprotocol.wave.model.util.Serializer, org.waveprotocol.wave.model.util.Serializer, java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap r0;
        org.waveprotocol.wave.model.util.Serializer r3, r4;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r1;
        java.lang.Object r2;
        java.lang.String r5, r6, r7;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.waveprotocol.wave.model.util.Serializer;

        r4 := @parameter3: org.waveprotocol.wave.model.util.Serializer;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        z0 := @parameter7: boolean;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, r4, r5, r6, r7, z0);

        return;
    }

    public static org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap create(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object, org.waveprotocol.wave.model.util.Serializer, org.waveprotocol.wave.model.util.Serializer, java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap $r0;
        org.waveprotocol.wave.model.util.Serializer r3, r4;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r1;
        java.lang.Object r2;
        java.lang.String r5, r6, r7;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.waveprotocol.wave.model.util.Serializer;

        r4 := @parameter3: org.waveprotocol.wave.model.util.Serializer;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap;

        specialinvoke $r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap: void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, r4, r5, r6, r7, 1);

        virtualinvoke $r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap: void dispatchAndLoad()>();

        return $r0;
    }

    protected volatile boolean isRedundantPut(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap r0;
        java.lang.Object r1, r2;
        java.lang.Comparable $r3, $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Comparable) r1;

        $r3 = (java.lang.Comparable) r2;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap: boolean isRedundantPut(java.lang.Comparable,java.lang.Comparable)>($r4, $r3);

        return $z0;
    }

    protected volatile boolean canReplace(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap r0;
        java.lang.Object r1, r2, r3, r4;
        java.lang.Comparable $r5, $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r6 = (java.lang.Comparable) r3;

        $r5 = (java.lang.Comparable) r4;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap: boolean canReplace(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.Comparable)>(r1, r2, $r6, $r5);

        return $z0;
    }
}
