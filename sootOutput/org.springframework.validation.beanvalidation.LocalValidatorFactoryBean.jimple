public class org.springframework.validation.beanvalidation.LocalValidatorFactoryBean extends org.springframework.validation.beanvalidation.SpringValidatorAdapter implements javax.validation.ValidatorFactory, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean
{
    private java.lang.Class providerClass;
    private javax.validation.MessageInterpolator messageInterpolator;
    private javax.validation.TraversableResolver traversableResolver;
    private javax.validation.ConstraintValidatorFactory constraintValidatorFactory;
    private org.springframework.core.io.Resource[] mappingLocations;
    private final java.util.Map validationPropertyMap;
    private org.springframework.context.ApplicationContext applicationContext;
    private javax.validation.ValidatorFactory validatorFactory;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        specialinvoke r0.<org.springframework.validation.beanvalidation.SpringValidatorAdapter: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: java.util.Map validationPropertyMap> = $r1;

        return;
    }

    public void setProviderClass(java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        r1 := @parameter0: java.lang.Class;

        r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: java.lang.Class providerClass> = r1;

        return;
    }

    public void setMessageInterpolator(javax.validation.MessageInterpolator)
    {
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;
        javax.validation.MessageInterpolator r1;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        r1 := @parameter0: javax.validation.MessageInterpolator;

        r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.MessageInterpolator messageInterpolator> = r1;

        return;
    }

    public void setValidationMessageSource(org.springframework.context.MessageSource)
    {
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;
        javax.validation.MessageInterpolator $r2;
        org.springframework.context.MessageSource r1;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        r1 := @parameter0: org.springframework.context.MessageSource;

        $r2 = staticinvoke <org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$HibernateValidatorDelegate: javax.validation.MessageInterpolator buildMessageInterpolator(org.springframework.context.MessageSource)>(r1);

        r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.MessageInterpolator messageInterpolator> = $r2;

        return;
    }

    public void setTraversableResolver(javax.validation.TraversableResolver)
    {
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;
        javax.validation.TraversableResolver r1;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        r1 := @parameter0: javax.validation.TraversableResolver;

        r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.TraversableResolver traversableResolver> = r1;

        return;
    }

    public void setConstraintValidatorFactory(javax.validation.ConstraintValidatorFactory)
    {
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;
        javax.validation.ConstraintValidatorFactory r1;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        r1 := @parameter0: javax.validation.ConstraintValidatorFactory;

        r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.ConstraintValidatorFactory constraintValidatorFactory> = r1;

        return;
    }

    public void setMappingLocations(org.springframework.core.io.Resource[])
    {
        org.springframework.core.io.Resource[] r1;
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        r1 := @parameter0: org.springframework.core.io.Resource[];

        r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: org.springframework.core.io.Resource[] mappingLocations> = r1;

        return;
    }

    public void setValidationProperties(java.util.Properties)
    {
        java.util.Properties r0;
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r1;
        java.util.Map $r2;

        r1 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        r0 := @parameter0: java.util.Properties;

        $r2 = r1.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: java.util.Map validationPropertyMap>;

        staticinvoke <org.springframework.util.CollectionUtils: void mergePropertiesIntoMap(java.util.Properties,java.util.Map)>(r0, $r2);

        return;
    }

    public void setValidationPropertyMap(java.util.Map)
    {
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r1;
        java.util.Map r0, $r2;

        r1 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        r0 := @parameter0: java.util.Map;

        if r0 == null goto label1;

        $r2 = r1.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: java.util.Map validationPropertyMap>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r0);

     label1:
        return;
    }

    public java.util.Map getValidationPropertyMap()
    {
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        $r1 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: java.util.Map validationPropertyMap>;

        return $r1;
    }

    public void setApplicationContext(org.springframework.context.ApplicationContext)
    {
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;
        org.springframework.context.ApplicationContext r1;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        r1 := @parameter0: org.springframework.context.ApplicationContext;

        r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: org.springframework.context.ApplicationContext applicationContext> = r1;

        return;
    }

    public void afterPropertiesSet()
    {
        java.lang.IllegalStateException $r42;
        javax.validation.bootstrap.GenericBootstrap $r2;
        java.util.Map $r7;
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;
        boolean $z0;
        org.springframework.core.io.Resource r37;
        java.util.Set $r8;
        javax.validation.Validator $r17;
        org.springframework.core.io.Resource[] $r6, $r18;
        javax.validation.bootstrap.ProviderSpecificBootstrap $r27;
        javax.validation.Configuration r3, $r34;
        org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator $r39;
        java.lang.StringBuilder $r32, $r41;
        org.springframework.beans.factory.config.AutowireCapableBeanFactory $r23;
        javax.validation.ValidatorFactory $r15, $r16;
        javax.validation.MessageInterpolator $r28, r35;
        int i0, i1;
        org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory $r40;
        java.lang.String $r12, $r14, $r33;
        java.util.Map$Entry r38;
        java.util.Iterator $r9;
        java.io.IOException $r29;
        org.springframework.context.ApplicationContext $r20, $r22;
        javax.validation.TraversableResolver $r5, $r24;
        javax.validation.ConstraintValidatorFactory $r25, $r43;
        java.lang.Class $r1, $r26;
        java.lang.Object $r10, $r11, $r13, r36;
        java.io.InputStream $r19;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        $r1 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: java.lang.Class providerClass>;

        if $r1 == null goto label01;

        $r26 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: java.lang.Class providerClass>;

        $r27 = staticinvoke <javax.validation.Validation: javax.validation.bootstrap.ProviderSpecificBootstrap byProvider(java.lang.Class)>($r26);

        $r34 = interfaceinvoke $r27.<javax.validation.bootstrap.ProviderSpecificBootstrap: javax.validation.Configuration configure()>();

        goto label02;

     label01:
        $r2 = staticinvoke <javax.validation.Validation: javax.validation.bootstrap.GenericBootstrap byDefaultProvider()>();

        $r34 = interfaceinvoke $r2.<javax.validation.bootstrap.GenericBootstrap: javax.validation.Configuration configure()>();

     label02:
        r3 = $r34;

        $r28 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.MessageInterpolator messageInterpolator>;

        r35 = $r28;

        if $r28 != null goto label03;

        r35 = interfaceinvoke $r34.<javax.validation.Configuration: javax.validation.MessageInterpolator getDefaultMessageInterpolator()>();

     label03:
        $r39 = new org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator;

        specialinvoke $r39.<org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator: void <init>(javax.validation.MessageInterpolator)>(r35);

        interfaceinvoke r3.<javax.validation.Configuration: javax.validation.Configuration messageInterpolator(javax.validation.MessageInterpolator)>($r39);

        $r5 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.TraversableResolver traversableResolver>;

        if $r5 == null goto label04;

        $r24 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.TraversableResolver traversableResolver>;

        interfaceinvoke r3.<javax.validation.Configuration: javax.validation.Configuration traversableResolver(javax.validation.TraversableResolver)>($r24);

     label04:
        $r25 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.ConstraintValidatorFactory constraintValidatorFactory>;

        r36 = $r25;

        if $r25 != null goto label05;

        $r20 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: org.springframework.context.ApplicationContext applicationContext>;

        if $r20 == null goto label05;

        $r40 = new org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory;

        $r22 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: org.springframework.context.ApplicationContext applicationContext>;

        $r23 = interfaceinvoke $r22.<org.springframework.context.ApplicationContext: org.springframework.beans.factory.config.AutowireCapableBeanFactory getAutowireCapableBeanFactory()>();

        specialinvoke $r40.<org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory: void <init>(org.springframework.beans.factory.config.AutowireCapableBeanFactory)>($r23);

        r36 = $r40;

     label05:
        if r36 == null goto label06;

        $r43 = (javax.validation.ConstraintValidatorFactory) r36;

        interfaceinvoke r3.<javax.validation.Configuration: javax.validation.Configuration constraintValidatorFactory(javax.validation.ConstraintValidatorFactory)>($r43);

     label06:
        $r6 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: org.springframework.core.io.Resource[] mappingLocations>;

        if $r6 == null goto label13;

        $r18 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: org.springframework.core.io.Resource[] mappingLocations>;

        i0 = lengthof $r18;

        i1 = 0;

        goto label12;

     label07:
        r37 = $r18[i1];

     label08:
        $r19 = interfaceinvoke r37.<org.springframework.core.io.Resource: java.io.InputStream getInputStream()>();

        interfaceinvoke r3.<javax.validation.Configuration: javax.validation.Configuration addMapping(java.io.InputStream)>($r19);

     label09:
        goto label11;

     label10:
        $r29 := @caughtexception;

        $r42 = new java.lang.IllegalStateException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot read mapping resource: ");

        $r32 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r37);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r33);

        throw $r42;

     label11:
        i1 = i1 + 1;

     label12:
        if i1 < i0 goto label07;

     label13:
        $r7 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: java.util.Map validationPropertyMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        goto label15;

     label14:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r38 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.String) $r11;

        $r13 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (java.lang.String) $r13;

        interfaceinvoke r3.<javax.validation.Configuration: javax.validation.Configuration addProperty(java.lang.String,java.lang.String)>($r12, $r14);

     label15:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label14;

        $r15 = interfaceinvoke r3.<javax.validation.Configuration: javax.validation.ValidatorFactory buildValidatorFactory()>();

        r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.ValidatorFactory validatorFactory> = $r15;

        $r16 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.ValidatorFactory validatorFactory>;

        $r17 = interfaceinvoke $r16.<javax.validation.ValidatorFactory: javax.validation.Validator getValidator()>();

        virtualinvoke r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: void setTargetValidator(javax.validation.Validator)>($r17);

        return;

        catch java.io.IOException from label08 to label09 with label10;
    }

    public javax.validation.Validator getValidator()
    {
        javax.validation.Validator $r2;
        javax.validation.ValidatorFactory $r1;
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        $r1 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.ValidatorFactory validatorFactory>;

        $r2 = interfaceinvoke $r1.<javax.validation.ValidatorFactory: javax.validation.Validator getValidator()>();

        return $r2;
    }

    public javax.validation.ValidatorContext usingContext()
    {
        javax.validation.ValidatorContext $r2;
        javax.validation.ValidatorFactory $r1;
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        $r1 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.ValidatorFactory validatorFactory>;

        $r2 = interfaceinvoke $r1.<javax.validation.ValidatorFactory: javax.validation.ValidatorContext usingContext()>();

        return $r2;
    }

    public javax.validation.MessageInterpolator getMessageInterpolator()
    {
        javax.validation.ValidatorFactory $r1;
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;
        javax.validation.MessageInterpolator $r2;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        $r1 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.ValidatorFactory validatorFactory>;

        $r2 = interfaceinvoke $r1.<javax.validation.ValidatorFactory: javax.validation.MessageInterpolator getMessageInterpolator()>();

        return $r2;
    }

    public javax.validation.TraversableResolver getTraversableResolver()
    {
        javax.validation.ValidatorFactory $r1;
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;
        javax.validation.TraversableResolver $r2;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        $r1 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.ValidatorFactory validatorFactory>;

        $r2 = interfaceinvoke $r1.<javax.validation.ValidatorFactory: javax.validation.TraversableResolver getTraversableResolver()>();

        return $r2;
    }

    public javax.validation.ConstraintValidatorFactory getConstraintValidatorFactory()
    {
        javax.validation.ValidatorFactory $r1;
        org.springframework.validation.beanvalidation.LocalValidatorFactoryBean r0;
        javax.validation.ConstraintValidatorFactory $r2;

        r0 := @this: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

        $r1 = r0.<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: javax.validation.ValidatorFactory validatorFactory>;

        $r2 = interfaceinvoke $r1.<javax.validation.ValidatorFactory: javax.validation.ConstraintValidatorFactory getConstraintValidatorFactory()>();

        return $r2;
    }
}
