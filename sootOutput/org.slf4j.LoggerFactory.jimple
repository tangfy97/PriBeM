public final class org.slf4j.LoggerFactory extends java.lang.Object
{
    static final java.lang.String CODES_PREFIX;
    static final java.lang.String NO_STATICLOGGERBINDER_URL;
    static final java.lang.String MULTIPLE_BINDINGS_URL;
    static final java.lang.String NULL_LF_URL;
    static final java.lang.String VERSION_MISMATCH;
    static final java.lang.String SUBSTITUTE_LOGGER_URL;
    static final java.lang.String UNSUCCESSFUL_INIT_URL;
    static final java.lang.String UNSUCCESSFUL_INIT_MSG;
    static final int UNINITIALIZED;
    static final int ONGOING_INITILIZATION;
    static final int FAILED_INITILIZATION;
    static final int SUCCESSFUL_INITILIZATION;
    static final int NOP_FALLBACK_INITILIZATION;
    static int INITIALIZATION_STATE;
    static org.slf4j.helpers.SubstituteLoggerFactory TEMP_FACTORY;
    static org.slf4j.helpers.NOPLoggerFactory NOP_FALLBACK_FACTORY;
    private static final java.lang.String[] API_COMPATIBILITY_LIST;
    private static java.lang.String STATIC_LOGGER_BINDER_PATH;
    static java.lang.Class class$org$slf4j$LoggerFactory;

    private void <init>()
    {
        org.slf4j.LoggerFactory r0;

        r0 := @this: org.slf4j.LoggerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void reset()
    {
        org.slf4j.helpers.SubstituteLoggerFactory $r0;

        <org.slf4j.LoggerFactory: int INITIALIZATION_STATE> = 0;

        $r0 = new org.slf4j.helpers.SubstituteLoggerFactory;

        specialinvoke $r0.<org.slf4j.helpers.SubstituteLoggerFactory: void <init>()>();

        <org.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteLoggerFactory TEMP_FACTORY> = $r0;

        return;
    }

    private static final void performInitialization()
    {
        int $i0;

        staticinvoke <org.slf4j.LoggerFactory: void singleImplementationSanityCheck()>();

        staticinvoke <org.slf4j.LoggerFactory: void bind()>();

        $i0 = <org.slf4j.LoggerFactory: int INITIALIZATION_STATE>;

        if $i0 != 3 goto label1;

        staticinvoke <org.slf4j.LoggerFactory: void versionSanityCheck()>();

     label1:
        return;
    }

    private static boolean messageContainsOrgSlf4jImplStaticLoggerBinder(java.lang.String)
    {
        int $i0, $i1, $i3, $i5;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("org/slf4j/impl/StaticLoggerBinder");

        $i3 = (int) -1;

        if $i0 == $i3 goto label2;

        return 1;

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("org.slf4j.impl.StaticLoggerBinder");

        $i5 = (int) -1;

        if $i1 == $i5 goto label3;

        return 1;

     label3:
        return 0;
    }

    private static final void bind()
    {
        java.lang.IllegalStateException $r6;
        java.lang.NoSuchMethodError $r2;
        java.lang.Exception $r0;
        int $i0, $i2;
        java.lang.String $r3, $r5;
        java.lang.NoClassDefFoundError $r4;
        boolean $z0;

     label1:
        staticinvoke <org.slf4j.impl.StaticLoggerBinder: org.slf4j.impl.StaticLoggerBinder getSingleton()>();

        <org.slf4j.LoggerFactory: int INITIALIZATION_STATE> = 3;

        staticinvoke <org.slf4j.LoggerFactory: void emitSubstituteLoggerWarning()>();

     label2:
        goto label9;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<java.lang.NoClassDefFoundError: java.lang.String getMessage()>();

        $z0 = staticinvoke <org.slf4j.LoggerFactory: boolean messageContainsOrgSlf4jImplStaticLoggerBinder(java.lang.String)>($r5);

        if $z0 == 0 goto label4;

        <org.slf4j.LoggerFactory: int INITIALIZATION_STATE> = 4;

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("Defaulting to no-operation (NOP) logger implementation");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.");

        goto label5;

     label4:
        staticinvoke <org.slf4j.LoggerFactory: void failedBinding(java.lang.Throwable)>($r4);

        throw $r4;

     label5:
        goto label9;

     label6:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<java.lang.NoSuchMethodError: java.lang.String getMessage()>();

        if $r3 == null goto label7;

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("org.slf4j.impl.StaticLoggerBinder.getSingleton()");

        $i2 = (int) -1;

        if $i0 == $i2 goto label7;

        <org.slf4j.LoggerFactory: int INITIALIZATION_STATE> = 2;

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("slf4j-api 1.6.x (or later) is incompatible with this binding.");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("Your binding is version 1.5.5 or earlier.");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("Upgrade your binding to version 1.6.x. or 2.0.x");

     label7:
        throw $r2;

     label8:
        $r0 := @caughtexception;

        staticinvoke <org.slf4j.LoggerFactory: void failedBinding(java.lang.Throwable)>($r0);

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected initialization failure", $r0);

        throw $r6;

     label9:
        return;

        catch java.lang.NoClassDefFoundError from label1 to label2 with label3;
        catch java.lang.NoSuchMethodError from label1 to label2 with label6;
        catch java.lang.Exception from label1 to label2 with label8;
    }

    static void failedBinding(java.lang.Throwable)
    {
        java.lang.Throwable r0;

        r0 := @parameter0: java.lang.Throwable;

        <org.slf4j.LoggerFactory: int INITIALIZATION_STATE> = 2;

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String,java.lang.Throwable)>("Failed to instantiate SLF4J LoggerFactory", r0);

        return;
    }

    private static final void emitSubstituteLoggerWarning()
    {
        java.util.List $r1;
        int $i0, $i1, i2;
        java.lang.Object $r2;
        java.lang.String r3;
        org.slf4j.helpers.SubstituteLoggerFactory $r0;

        $r0 = <org.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteLoggerFactory TEMP_FACTORY>;

        $r1 = virtualinvoke $r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.List getLoggerNameList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("The following loggers will not work because they were created");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("during the default configuration phase of the underlying logging system.");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("See also http://www.slf4j.org/codes.html#substituteLogger");

        i2 = 0;

     label2:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i2 >= $i1 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        r3 = (java.lang.String) $r2;

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>(r3);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    private static final void versionSanityCheck()
    {
        java.lang.Throwable $r12;
        java.lang.String[] $r0, $r5, $r10;
        java.lang.NoSuchFieldError $r13;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r8;
        int $i0, i1;
        java.lang.String $r7, $r9, $r11, r14;
        boolean $z0, z1;
        java.util.List $r6;

     label1:
        r14 = <org.slf4j.impl.StaticLoggerBinder: java.lang.String REQUESTED_API_VERSION>;

        z1 = 0;

        i1 = 0;

     label2:
        $r0 = <org.slf4j.LoggerFactory: java.lang.String[] API_COMPATIBILITY_LIST>;

        $i0 = lengthof $r0;

        if i1 >= $i0 goto label4;

        $r10 = <org.slf4j.LoggerFactory: java.lang.String[] API_COMPATIBILITY_LIST>;

        $r11 = $r10[i1];

        $z0 = virtualinvoke r14.<java.lang.String: boolean startsWith(java.lang.String)>($r11);

        if $z0 == 0 goto label3;

        z1 = 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        if z1 != 0 goto label5;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The requested version ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" by your slf4j binding is not compatible with ");

        $r5 = <org.slf4j.LoggerFactory: java.lang.String[] API_COMPATIBILITY_LIST>;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        $r8 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>($r9);

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("See http://www.slf4j.org/codes.html#version_mismatch for further details.");

     label5:
        goto label8;

     label6:
        $r13 := @caughtexception;

        goto label8;

     label7:
        $r12 := @caughtexception;

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String,java.lang.Throwable)>("Unexpected problem occured during version sanity check", $r12);

     label8:
        return;

        catch java.lang.NoSuchFieldError from label1 to label5 with label6;
        catch java.lang.Throwable from label1 to label5 with label7;
    }

    private static void singleImplementationSanityCheck()
    {
        java.util.Enumeration r16;
        java.net.URL r6, r17;
        java.lang.StringBuffer $r7, $r8, $r9, $r10;
        int $i0;
        java.lang.String $r2, $r11, $r13;
        java.util.LinkedHashSet $r3;
        boolean $z0, $z1;
        java.util.Iterator $r4;
        java.io.IOException $r14;
        java.lang.Class $r0, $r15;
        java.lang.Object $r5, $r12;
        java.lang.ClassLoader $r1;

     label01:
        $r0 = <org.slf4j.LoggerFactory: java.lang.Class class$org$slf4j$LoggerFactory>;

        if $r0 != null goto label02;

        $r15 = staticinvoke <org.slf4j.LoggerFactory: java.lang.Class class$(java.lang.String)>("org.slf4j.LoggerFactory");

        <org.slf4j.LoggerFactory: java.lang.Class class$org$slf4j$LoggerFactory> = $r15;

        goto label03;

     label02:
        $r15 = <org.slf4j.LoggerFactory: java.lang.Class class$org$slf4j$LoggerFactory>;

     label03:
        $r1 = virtualinvoke $r15.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r1 != null goto label04;

        $r13 = <org.slf4j.LoggerFactory: java.lang.String STATIC_LOGGER_BINDER_PATH>;

        r16 = staticinvoke <java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>($r13);

        goto label05;

     label04:
        $r2 = <org.slf4j.LoggerFactory: java.lang.String STATIC_LOGGER_BINDER_PATH>;

        r16 = virtualinvoke $r1.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>($r2);

     label05:
        $r3 = new java.util.LinkedHashSet;

        specialinvoke $r3.<java.util.LinkedHashSet: void <init>()>();

     label06:
        $z1 = interfaceinvoke r16.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label07;

        $r12 = interfaceinvoke r16.<java.util.Enumeration: java.lang.Object nextElement()>();

        r17 = (java.net.URL) $r12;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r17);

        goto label06;

     label07:
        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        if $i0 <= 1 goto label10;

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("Class path contains multiple SLF4J bindings.");

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.net.URL) $r5;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Found binding in [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>($r11);

        goto label08;

     label09:
        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.");

     label10:
        goto label12;

     label11:
        $r14 := @caughtexception;

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String,java.lang.Throwable)>("Error getting resources from path", $r14);

     label12:
        return;

        catch java.io.IOException from label01 to label10 with label11;
    }

    public static org.slf4j.Logger getLogger(java.lang.String)
    {
        java.lang.String r1;
        org.slf4j.Logger $r2;
        org.slf4j.ILoggerFactory $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.ILoggerFactory getILoggerFactory()>();

        $r2 = interfaceinvoke $r0.<org.slf4j.ILoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>(r1);

        return $r2;
    }

    public static org.slf4j.Logger getLogger(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        org.slf4j.Logger $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($r1);

        return $r2;
    }

    public static org.slf4j.ILoggerFactory getILoggerFactory()
    {
        java.lang.IllegalStateException $r3, $r5;
        org.slf4j.impl.StaticLoggerBinder $r1;
        org.slf4j.helpers.SubstituteLoggerFactory $r4;
        int $i0, $i1;
        org.slf4j.helpers.NOPLoggerFactory $r0;
        org.slf4j.ILoggerFactory $r2;

        $i0 = <org.slf4j.LoggerFactory: int INITIALIZATION_STATE>;

        if $i0 != 0 goto label1;

        <org.slf4j.LoggerFactory: int INITIALIZATION_STATE> = 1;

        staticinvoke <org.slf4j.LoggerFactory: void performInitialization()>();

     label1:
        $i1 = <org.slf4j.LoggerFactory: int INITIALIZATION_STATE>;

        tableswitch($i1)
        {
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label2;
            case 4: goto label3;
            default: goto label6;
        };

     label2:
        $r1 = staticinvoke <org.slf4j.impl.StaticLoggerBinder: org.slf4j.impl.StaticLoggerBinder getSingleton()>();

        $r2 = virtualinvoke $r1.<org.slf4j.impl.StaticLoggerBinder: org.slf4j.ILoggerFactory getLoggerFactory()>();

        return $r2;

     label3:
        $r0 = <org.slf4j.LoggerFactory: org.slf4j.helpers.NOPLoggerFactory NOP_FALLBACK_FACTORY>;

        return $r0;

     label4:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("org.slf4j.LoggerFactory could not be successfully initialized. See also http://www.slf4j.org/codes.html#unsuccessfulInit");

        throw $r3;

     label5:
        $r4 = <org.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteLoggerFactory TEMP_FACTORY>;

        return $r4;

     label6:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unreachable code");

        throw $r5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.slf4j.helpers.NOPLoggerFactory $r1;
        java.lang.String[] $r2;
        org.slf4j.helpers.SubstituteLoggerFactory $r0;

        <org.slf4j.LoggerFactory: int NOP_FALLBACK_INITILIZATION> = 4;

        <org.slf4j.LoggerFactory: int SUCCESSFUL_INITILIZATION> = 3;

        <org.slf4j.LoggerFactory: int FAILED_INITILIZATION> = 2;

        <org.slf4j.LoggerFactory: int ONGOING_INITILIZATION> = 1;

        <org.slf4j.LoggerFactory: int UNINITIALIZED> = 0;

        <org.slf4j.LoggerFactory: java.lang.String UNSUCCESSFUL_INIT_MSG> = "org.slf4j.LoggerFactory could not be successfully initialized. See also http://www.slf4j.org/codes.html#unsuccessfulInit";

        <org.slf4j.LoggerFactory: java.lang.String UNSUCCESSFUL_INIT_URL> = "http://www.slf4j.org/codes.html#unsuccessfulInit";

        <org.slf4j.LoggerFactory: java.lang.String SUBSTITUTE_LOGGER_URL> = "http://www.slf4j.org/codes.html#substituteLogger";

        <org.slf4j.LoggerFactory: java.lang.String VERSION_MISMATCH> = "http://www.slf4j.org/codes.html#version_mismatch";

        <org.slf4j.LoggerFactory: java.lang.String NULL_LF_URL> = "http://www.slf4j.org/codes.html#null_LF";

        <org.slf4j.LoggerFactory: java.lang.String MULTIPLE_BINDINGS_URL> = "http://www.slf4j.org/codes.html#multiple_bindings";

        <org.slf4j.LoggerFactory: java.lang.String NO_STATICLOGGERBINDER_URL> = "http://www.slf4j.org/codes.html#StaticLoggerBinder";

        <org.slf4j.LoggerFactory: java.lang.String CODES_PREFIX> = "http://www.slf4j.org/codes.html";

        <org.slf4j.LoggerFactory: int INITIALIZATION_STATE> = 0;

        $r0 = new org.slf4j.helpers.SubstituteLoggerFactory;

        specialinvoke $r0.<org.slf4j.helpers.SubstituteLoggerFactory: void <init>()>();

        <org.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteLoggerFactory TEMP_FACTORY> = $r0;

        $r1 = new org.slf4j.helpers.NOPLoggerFactory;

        specialinvoke $r1.<org.slf4j.helpers.NOPLoggerFactory: void <init>()>();

        <org.slf4j.LoggerFactory: org.slf4j.helpers.NOPLoggerFactory NOP_FALLBACK_FACTORY> = $r1;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "1.6";

        <org.slf4j.LoggerFactory: java.lang.String[] API_COMPATIBILITY_LIST> = $r2;

        <org.slf4j.LoggerFactory: java.lang.String STATIC_LOGGER_BINDER_PATH> = "org/slf4j/impl/StaticLoggerBinder.class";

        return;
    }
}
