final class org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler extends org.waveprotocol.wave.model.experimental.schema.SchemaFactory$ElementCollectionHandler
{
    private static final java.lang.String ELEMENT_TYPE_NAME;
    private final org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler previousTop;
    private final java.util.List prologueEntries;

    void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler)
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler r0;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler r2;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler;

        r2 := @parameter0: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$ElementCollectionHandler: void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1)>(null);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler: java.util.List prologueEntries> = $r1;

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler previousTop> = r2;

        return;
    }

    final org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler pushHandler(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$ElementHandler $r8;
        org.waveprotocol.wave.model.document.operation.Attributes r6;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler r9;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String r0, $r5, $r7;
        boolean $z0;

        r9 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("element");

        if $z0 == 0 goto label1;

        $r7 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: java.lang.String access$100(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>("element", r6);

        $r8 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$ElementHandler;

        specialinvoke $r8.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$ElementHandler: void <init>(java.lang.String,org.waveprotocol.wave.model.experimental.schema.SchemaFactory$ElementCollectionHandler)>($r7, r9);

        return $r8;

     label1:
        $r1 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Element encountered where no child element is allowed: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler popHandler()
    {
        java.util.List $r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler r0;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler;

        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler previousTop>;

        $r1 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler: java.util.List prologueEntries>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: void registerPrologue(java.util.List)>($r1);

        $r3 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler previousTop>;

        return $r3;
    }

    void registerElement(java.lang.String, org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment)
    {
        java.util.List $r4;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler r0;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment r3;
        java.lang.String r2;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$IntermediatePrologueEntry $r1;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment;

        $r4 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler: java.util.List prologueEntries>;

        $r1 = new org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$IntermediatePrologueEntry;

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$IntermediatePrologueEntry: void <init>(java.lang.String,org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment)>(r2, r3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler: java.lang.String ELEMENT_TYPE_NAME> = "element";

        return;
    }
}
