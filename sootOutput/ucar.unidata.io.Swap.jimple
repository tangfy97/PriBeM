public class ucar.unidata.io.Swap extends java.lang.Object
{

    public void <init>()
    {
        ucar.unidata.io.Swap r0;

        r0 := @this: ucar.unidata.io.Swap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static short swapShort(byte[], int)
    {
        byte[] r0;
        short s2, s5, $s8, $s9, $s10;
        byte $b1, $b4;
        int i0, $i3, $i6, $i7, $i11, $i12;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b1 = r0[i0];

        $s9 = (short) $b1;

        s2 = $s9 & 255;

        $i3 = i0 + 1;

        $b4 = r0[$i3];

        $s10 = (short) $b4;

        s5 = $s10 & 255;

        $i11 = (int) s5;

        $i6 = $i11 << 8;

        $i12 = (int) s2;

        $i7 = $i6 | $i12;

        $s8 = (short) $i7;

        return $s8;
    }

    public static int swapInt(byte[], int)
    {
        byte[] r0;
        short $s2, $s7;
        byte $b1;
        int i0, $i3, i4, i5, i6, $i8;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i4 = 0;

        i5 = 0;

        i6 = i0;

     label1:
        if i5 >= 32 goto label2;

        $b1 = r0[i6];

        $s7 = (short) $b1;

        $s2 = $s7 & 255;

        $i8 = (int) $s2;

        $i3 = $i8 << i5;

        i4 = i4 | $i3;

        i5 = i5 + 8;

        i6 = i6 + 1;

        goto label1;

     label2:
        return i4;
    }

    public static long swapLong(byte[], int)
    {
        byte[] r0;
        long $l3, l4, l5;
        short $s2, $s8;
        byte $b1;
        int i0, i6, i7;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        l5 = 0L;

        i6 = 0;

        i7 = i0;

     label1:
        if i6 >= 64 goto label2;

        $b1 = r0[i7];

        $s8 = (short) $b1;

        $s2 = $s8 & 255;

        $l3 = (long) $s2;

        l4 = $l3 << i6;

        l5 = l5 | l4;

        i6 = i6 + 8;

        i7 = i7 + 1;

        goto label1;

     label2:
        return l5;
    }

    public static float swapFloat(byte[], int)
    {
        byte[] r0;
        short $s2, $s7;
        byte $b1;
        int i0, $i3, i4, i5, i6, $i8;
        float $f0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i4 = 0;

        i5 = 0;

        i6 = i0;

     label1:
        if i5 >= 32 goto label2;

        $b1 = r0[i6];

        $s7 = (short) $b1;

        $s2 = $s7 & 255;

        $i8 = (int) $s2;

        $i3 = $i8 << i5;

        i4 = i4 | $i3;

        i5 = i5 + 8;

        i6 = i6 + 1;

        goto label1;

     label2:
        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i4);

        return $f0;
    }

    public static double swapDouble(byte[], int)
    {
        byte[] r0;
        long $l3, l4, l5;
        short $s2, $s8;
        byte $b1;
        int i0, i6, i7;
        double $d0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        l5 = 0L;

        i6 = 0;

        i7 = i0;

     label1:
        if i6 >= 64 goto label2;

        $b1 = r0[i7];

        $s8 = (short) $b1;

        $s2 = $s8 & 255;

        $l3 = (long) $s2;

        l4 = $l3 << i6;

        l5 = l5 | l4;

        i6 = i6 + 8;

        i7 = i7 + 1;

        goto label1;

     label2:
        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l5);

        return $d0;
    }

    public static char swapChar(byte[], int)
    {
        byte[] r0;
        char $c8;
        short s2, s5, $s9, $s10;
        byte $b1, $b4;
        int i0, $i3, $i6, $i7, $i11, $i12;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b1 = r0[i0];

        $s9 = (short) $b1;

        s2 = $s9 & 255;

        $i3 = i0 + 1;

        $b4 = r0[$i3];

        $s10 = (short) $b4;

        s5 = $s10 & 255;

        $i11 = (int) s5;

        $i6 = $i11 << 8;

        $i12 = (int) s2;

        $i7 = $i6 | $i12;

        $c8 = (char) $i7;

        return $c8;
    }

    public static short swapShort(short)
    {
        byte[] $r0;
        short s0, $s1;

        s0 := @parameter0: short;

        $r0 = staticinvoke <ucar.unidata.io.Swap: byte[] shortToBytes(short)>(s0);

        $s1 = staticinvoke <ucar.unidata.io.Swap: short swapShort(byte[],int)>($r0, 0);

        return $s1;
    }

    public static int swapInt(int)
    {
        int i0, $i1;
        byte[] $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <ucar.unidata.io.Swap: byte[] intToBytes(int)>(i0);

        $i1 = staticinvoke <ucar.unidata.io.Swap: int swapInt(byte[],int)>($r0, 0);

        return $i1;
    }

    public static long swapLong(long)
    {
        byte[] $r0;
        long l0, $l1;

        l0 := @parameter0: long;

        $r0 = staticinvoke <ucar.unidata.io.Swap: byte[] longToBytes(long)>(l0);

        $l1 = staticinvoke <ucar.unidata.io.Swap: long swapLong(byte[],int)>($r0, 0);

        return $l1;
    }

    public static float swapFloat(float)
    {
        int $i0, $i1;
        float f0, $f1;

        f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        $i1 = staticinvoke <ucar.unidata.io.Swap: int swapInt(int)>($i0);

        $f1 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1);

        return $f1;
    }

    public static double swapDouble(double)
    {
        long $l0, $l1;
        double d0, $d1;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $l1 = staticinvoke <ucar.unidata.io.Swap: long swapLong(long)>($l0);

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        return $d1;
    }

    public static byte[] shortToBytes(short)
    {
        byte[] r0;
        short s0;
        byte $b6;
        int $i1, $i2, $i3, $i4, $i5, $i7, i8, $i9;

        s0 := @parameter0: short;

        r0 = newarray (byte)[2];

        i8 = 0;

     label1:
        if i8 >= 2 goto label2;

        $i7 = 1 - i8;

        $i1 = i8 * 8;

        $i2 = 255 << $i1;

        $i9 = (int) s0;

        $i4 = $i9 & $i2;

        $i3 = i8 * 8;

        $i5 = $i4 >> $i3;

        $b6 = (byte) $i5;

        r0[$i7] = $b6;

        i8 = i8 + 1;

        goto label1;

     label2:
        return r0;
    }

    public static byte[] intToBytes(int)
    {
        byte[] r0;
        byte $b6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, i8;

        i0 := @parameter0: int;

        r0 = newarray (byte)[4];

        i8 = 0;

     label1:
        if i8 >= 4 goto label2;

        $i7 = 3 - i8;

        $i1 = i8 * 8;

        $i2 = 255 << $i1;

        $i4 = i0 & $i2;

        $i3 = i8 * 8;

        $i5 = $i4 >> $i3;

        $b6 = (byte) $i5;

        r0[$i7] = $b6;

        i8 = i8 + 1;

        goto label1;

     label2:
        return r0;
    }

    public static byte[] longToBytes(long)
    {
        byte[] r0;
        long l0, $l2, $l4, $l5;
        byte $b7;
        int $i1, $i3, $i6, $i8, i9;

        l0 := @parameter0: long;

        r0 = newarray (byte)[8];

        i9 = 0;

     label1:
        if i9 >= 8 goto label2;

        $i8 = 7 - i9;

        $i1 = i9 * 8;

        $l2 = 255L << $i1;

        $l4 = l0 & $l2;

        $i3 = i9 * 8;

        $l5 = $l4 >> $i3;

        $i6 = (int) $l5;

        $b7 = (byte) $i6;

        r0[$i8] = $b7;

        i9 = i9 + 1;

        goto label1;

     label2:
        return r0;
    }
}
