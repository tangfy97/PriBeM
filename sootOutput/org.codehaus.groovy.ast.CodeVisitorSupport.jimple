public abstract class org.codehaus.groovy.ast.CodeVisitorSupport extends java.lang.Object implements org.codehaus.groovy.ast.GroovyCodeVisitor
{

    public void <init>()
    {
        org.codehaus.groovy.ast.CodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void visitBlockStatement(org.codehaus.groovy.ast.stmt.BlockStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement r4;
        java.util.List $r1;
        java.util.Iterator $r2;
        org.codehaus.groovy.ast.CodeVisitorSupport r5;
        org.codehaus.groovy.ast.stmt.BlockStatement r0;
        java.lang.Object $r3;
        boolean $z0;

        r5 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.BlockStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List getStatements()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.codehaus.groovy.ast.stmt.Statement) $r3;

        virtualinvoke r4.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r5);

        goto label1;

     label2:
        return;
    }

    public void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r3;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.stmt.ForStatement r0;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.ForStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.expr.Expression getCollectionExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.stmt.Statement getLoopBlock()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitWhileLoop(org.codehaus.groovy.ast.stmt.WhileStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r3;
        org.codehaus.groovy.ast.expr.BooleanExpression $r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.stmt.WhileStatement r0;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.WhileStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.WhileStatement: org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.BooleanExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.WhileStatement: org.codehaus.groovy.ast.stmt.Statement getLoopBlock()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitDoWhileLoop(org.codehaus.groovy.ast.stmt.DoWhileStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r1;
        org.codehaus.groovy.ast.expr.BooleanExpression $r3;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.stmt.DoWhileStatement r0;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.DoWhileStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.DoWhileStatement: org.codehaus.groovy.ast.stmt.Statement getLoopBlock()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.DoWhileStatement: org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.BooleanExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitIfElse(org.codehaus.groovy.ast.stmt.IfStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r3, $r4;
        org.codehaus.groovy.ast.expr.BooleanExpression $r1;
        org.codehaus.groovy.ast.stmt.IfStatement r0;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.IfStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.IfStatement: org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.BooleanExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.IfStatement: org.codehaus.groovy.ast.stmt.Statement getIfBlock()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.IfStatement: org.codehaus.groovy.ast.stmt.Statement getElseBlock()>();

        virtualinvoke $r4.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitExpressionStatement(org.codehaus.groovy.ast.stmt.ExpressionStatement)
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.stmt.ExpressionStatement r0;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ExpressionStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitReturnStatement(org.codehaus.groovy.ast.stmt.ReturnStatement)
    {
        org.codehaus.groovy.ast.stmt.ReturnStatement r0;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.ReturnStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ReturnStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitAssertStatement(org.codehaus.groovy.ast.stmt.AssertStatement)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.stmt.AssertStatement r0;
        org.codehaus.groovy.ast.expr.Expression $r3;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.AssertStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.AssertStatement: org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.BooleanExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.AssertStatement: org.codehaus.groovy.ast.expr.Expression getMessageExpression()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitTryCatchFinally(org.codehaus.groovy.ast.stmt.TryCatchStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r1, $r5;
        java.util.Iterator $r4;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.stmt.CatchStatement r7;
        java.util.List $r3;
        org.codehaus.groovy.ast.stmt.TryCatchStatement r0;
        java.lang.Object $r6;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.TryCatchStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.TryCatchStatement: org.codehaus.groovy.ast.stmt.Statement getTryStatement()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.TryCatchStatement: java.util.List getCatchStatements()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.codehaus.groovy.ast.stmt.CatchStatement) $r6;

        virtualinvoke r7.<org.codehaus.groovy.ast.stmt.CatchStatement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        goto label1;

     label2:
        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.TryCatchStatement: org.codehaus.groovy.ast.stmt.Statement getFinallyStatement()>();

        virtualinvoke $r5.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitSwitch(org.codehaus.groovy.ast.stmt.SwitchStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r5;
        java.util.Iterator $r4;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.stmt.SwitchStatement r0;
        java.util.List $r3;
        org.codehaus.groovy.ast.stmt.CaseStatement r7;
        java.lang.Object $r6;
        org.codehaus.groovy.ast.expr.Expression $r1;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.SwitchStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.SwitchStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.SwitchStatement: java.util.List getCaseStatements()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.codehaus.groovy.ast.stmt.CaseStatement) $r6;

        virtualinvoke r7.<org.codehaus.groovy.ast.stmt.CaseStatement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        goto label1;

     label2:
        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.SwitchStatement: org.codehaus.groovy.ast.stmt.Statement getDefaultStatement()>();

        virtualinvoke $r5.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitCaseStatement(org.codehaus.groovy.ast.stmt.CaseStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r3;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.stmt.CaseStatement r0;
        org.codehaus.groovy.ast.expr.Expression $r1;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.CaseStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.CaseStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.CaseStatement: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitBreakStatement(org.codehaus.groovy.ast.stmt.BreakStatement)
    {
        org.codehaus.groovy.ast.stmt.BreakStatement r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.BreakStatement;

        return;
    }

    public void visitContinueStatement(org.codehaus.groovy.ast.stmt.ContinueStatement)
    {
        org.codehaus.groovy.ast.stmt.ContinueStatement r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ContinueStatement;

        return;
    }

    public void visitSynchronizedStatement(org.codehaus.groovy.ast.stmt.SynchronizedStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r3;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.stmt.SynchronizedStatement r0;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.SynchronizedStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.SynchronizedStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.SynchronizedStatement: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitThrowStatement(org.codehaus.groovy.ast.stmt.ThrowStatement)
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.stmt.ThrowStatement r0;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.ThrowStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ThrowStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)
    {
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1, $r3, $r4;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getMethod()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        virtualinvoke $r4.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitStaticMethodCallExpression(org.codehaus.groovy.ast.expr.StaticMethodCallExpression)
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.expr.StaticMethodCallExpression r0;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.StaticMethodCallExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.StaticMethodCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitConstructorCallExpression(org.codehaus.groovy.ast.expr.ConstructorCallExpression)
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r0;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitBinaryExpression(org.codehaus.groovy.ast.expr.BinaryExpression)
    {
        org.codehaus.groovy.ast.expr.BinaryExpression r0;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.expr.Expression $r1, $r3;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitTernaryExpression(org.codehaus.groovy.ast.expr.TernaryExpression)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r1;
        org.codehaus.groovy.ast.expr.TernaryExpression r0;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.expr.Expression $r3, $r4;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.TernaryExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.BooleanExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression getTrueExpression()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression getFalseExpression()>();

        virtualinvoke $r4.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitShortTernaryExpression(org.codehaus.groovy.ast.expr.ElvisOperatorExpression)
    {
        org.codehaus.groovy.ast.CodeVisitorSupport r0;
        org.codehaus.groovy.ast.expr.ElvisOperatorExpression r1;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ElvisOperatorExpression;

        virtualinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitTernaryExpression(org.codehaus.groovy.ast.expr.TernaryExpression)>(r1);

        return;
    }

    public void visitPostfixExpression(org.codehaus.groovy.ast.expr.PostfixExpression)
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.expr.PostfixExpression r0;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.PostfixExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PostfixExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitPrefixExpression(org.codehaus.groovy.ast.expr.PrefixExpression)
    {
        org.codehaus.groovy.ast.expr.PrefixExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.PrefixExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PrefixExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitBooleanExpression(org.codehaus.groovy.ast.expr.BooleanExpression)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.BooleanExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BooleanExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitNotExpression(org.codehaus.groovy.ast.expr.NotExpression)
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.expr.NotExpression r0;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.NotExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.NotExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitClosureExpression(org.codehaus.groovy.ast.expr.ClosureExpression)
    {
        org.codehaus.groovy.ast.stmt.Statement $r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.expr.ClosureExpression r0;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.ClosureExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ClosureExpression: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitTupleExpression(org.codehaus.groovy.ast.expr.TupleExpression)
    {
        org.codehaus.groovy.ast.expr.TupleExpression r1;
        java.util.List $r2;
        org.codehaus.groovy.ast.CodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.TupleExpression;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.TupleExpression: java.util.List getExpressions()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitListOfExpressions(java.util.List)>($r2);

        return;
    }

    public void visitListExpression(org.codehaus.groovy.ast.expr.ListExpression)
    {
        org.codehaus.groovy.ast.expr.ListExpression r1;
        java.util.List $r2;
        org.codehaus.groovy.ast.CodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ListExpression;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ListExpression: java.util.List getExpressions()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitListOfExpressions(java.util.List)>($r2);

        return;
    }

    public void visitArrayExpression(org.codehaus.groovy.ast.expr.ArrayExpression)
    {
        java.util.List $r2, $r3;
        org.codehaus.groovy.ast.CodeVisitorSupport r0;
        org.codehaus.groovy.ast.expr.ArrayExpression r1;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ArrayExpression;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List getExpressions()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitListOfExpressions(java.util.List)>($r2);

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List getSizeExpression()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitListOfExpressions(java.util.List)>($r3);

        return;
    }

    public void visitMapExpression(org.codehaus.groovy.ast.expr.MapExpression)
    {
        java.util.List $r2;
        org.codehaus.groovy.ast.expr.MapExpression r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.MapExpression;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MapExpression: java.util.List getMapEntryExpressions()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitListOfExpressions(java.util.List)>($r2);

        return;
    }

    public void visitMapEntryExpression(org.codehaus.groovy.ast.expr.MapEntryExpression)
    {
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.expr.Expression $r1, $r3;
        org.codehaus.groovy.ast.expr.MapEntryExpression r0;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.MapEntryExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression getKeyExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression getValueExpression()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitRangeExpression(org.codehaus.groovy.ast.expr.RangeExpression)
    {
        org.codehaus.groovy.ast.expr.RangeExpression r0;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.expr.Expression $r1, $r3;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.RangeExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.RangeExpression: org.codehaus.groovy.ast.expr.Expression getFrom()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.RangeExpression: org.codehaus.groovy.ast.expr.Expression getTo()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitSpreadExpression(org.codehaus.groovy.ast.expr.SpreadExpression)
    {
        org.codehaus.groovy.ast.expr.SpreadExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.SpreadExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.SpreadExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitSpreadMapExpression(org.codehaus.groovy.ast.expr.SpreadMapExpression)
    {
        org.codehaus.groovy.ast.expr.SpreadMapExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.SpreadMapExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.SpreadMapExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitMethodPointerExpression(org.codehaus.groovy.ast.expr.MethodPointerExpression)
    {
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.expr.MethodPointerExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1, $r3;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.MethodPointerExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression getMethodName()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitUnaryMinusExpression(org.codehaus.groovy.ast.expr.UnaryMinusExpression)
    {
        org.codehaus.groovy.ast.expr.UnaryMinusExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.UnaryMinusExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.UnaryMinusExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitUnaryPlusExpression(org.codehaus.groovy.ast.expr.UnaryPlusExpression)
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.expr.UnaryPlusExpression r0;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.UnaryPlusExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.UnaryPlusExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitBitwiseNegationExpression(org.codehaus.groovy.ast.expr.BitwiseNegationExpression)
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.expr.BitwiseNegationExpression r0;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.BitwiseNegationExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BitwiseNegationExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitCastExpression(org.codehaus.groovy.ast.expr.CastExpression)
    {
        org.codehaus.groovy.ast.expr.CastExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.CastExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.CastExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitConstantExpression(org.codehaus.groovy.ast.expr.ConstantExpression)
    {
        org.codehaus.groovy.ast.expr.ConstantExpression r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ConstantExpression;

        return;
    }

    public void visitClassExpression(org.codehaus.groovy.ast.expr.ClassExpression)
    {
        org.codehaus.groovy.ast.expr.ClassExpression r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ClassExpression;

        return;
    }

    public void visitVariableExpression(org.codehaus.groovy.ast.expr.VariableExpression)
    {
        org.codehaus.groovy.ast.expr.VariableExpression r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.VariableExpression;

        return;
    }

    public void visitDeclarationExpression(org.codehaus.groovy.ast.expr.DeclarationExpression)
    {
        org.codehaus.groovy.ast.CodeVisitorSupport r0;
        org.codehaus.groovy.ast.expr.DeclarationExpression r1;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.DeclarationExpression;

        virtualinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitBinaryExpression(org.codehaus.groovy.ast.expr.BinaryExpression)>(r1);

        return;
    }

    public void visitPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression r0;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.expr.Expression $r1, $r3;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.PropertyExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getProperty()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitAttributeExpression(org.codehaus.groovy.ast.expr.AttributeExpression)
    {
        org.codehaus.groovy.ast.CodeVisitorSupport r2;
        org.codehaus.groovy.ast.expr.AttributeExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1, $r3;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.AttributeExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.AttributeExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.AttributeExpression: org.codehaus.groovy.ast.expr.Expression getProperty()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitFieldExpression(org.codehaus.groovy.ast.expr.FieldExpression)
    {
        org.codehaus.groovy.ast.expr.FieldExpression r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.FieldExpression;

        return;
    }

    public void visitRegexExpression(org.codehaus.groovy.ast.expr.RegexExpression)
    {
        org.codehaus.groovy.ast.expr.RegexExpression r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.RegexExpression;

        return;
    }

    public void visitGStringExpression(org.codehaus.groovy.ast.expr.GStringExpression)
    {
        java.util.List $r2, $r3;
        org.codehaus.groovy.ast.CodeVisitorSupport r0;
        org.codehaus.groovy.ast.expr.GStringExpression r1;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.GStringExpression;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.GStringExpression: java.util.List getStrings()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitListOfExpressions(java.util.List)>($r2);

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.GStringExpression: java.util.List getValues()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitListOfExpressions(java.util.List)>($r3);

        return;
    }

    protected void visitListOfExpressions(java.util.List)
    {
        org.codehaus.groovy.ast.expr.SpreadExpression $r5;
        java.util.Iterator $r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r4;
        java.util.List r0;
        java.lang.Object $r2;
        org.codehaus.groovy.ast.expr.Expression r3, $r6;
        boolean $z0, $z1;

        r4 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.codehaus.groovy.ast.expr.Expression) $r2;

        $z1 = r3 instanceof org.codehaus.groovy.ast.expr.SpreadExpression;

        if $z1 == 0 goto label3;

        $r5 = (org.codehaus.groovy.ast.expr.SpreadExpression) r3;

        $r6 = virtualinvoke $r5.<org.codehaus.groovy.ast.expr.SpreadExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r6.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r4);

        goto label4;

     label3:
        virtualinvoke r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r4);

     label4:
        goto label2;

     label5:
        return;
    }

    public void visitCatchStatement(org.codehaus.groovy.ast.stmt.CatchStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r1;
        org.codehaus.groovy.ast.stmt.CatchStatement r0;
        org.codehaus.groovy.ast.CodeVisitorSupport r2;

        r2 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.CatchStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.CatchStatement: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitArgumentlistExpression(org.codehaus.groovy.ast.expr.ArgumentListExpression)
    {
        org.codehaus.groovy.ast.expr.ArgumentListExpression r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ArgumentListExpression;

        virtualinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitTupleExpression(org.codehaus.groovy.ast.expr.TupleExpression)>(r1);

        return;
    }

    public void visitClosureListExpression(org.codehaus.groovy.ast.expr.ClosureListExpression)
    {
        java.util.List $r2;
        org.codehaus.groovy.ast.expr.ClosureListExpression r1;
        org.codehaus.groovy.ast.CodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.CodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ClosureListExpression;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ClosureListExpression: java.util.List getExpressions()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitListOfExpressions(java.util.List)>($r2);

        return;
    }
}
