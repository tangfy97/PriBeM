public class org.eclipse.jetty.server.HttpOutput extends javax.servlet.ServletOutputStream
{
    protected final org.eclipse.jetty.server.AbstractHttpConnection _connection;
    protected final org.eclipse.jetty.http.AbstractGenerator _generator;
    private boolean _closed;
    private org.eclipse.jetty.io.ByteArrayBuffer _onebyte;
    java.lang.String _characterEncoding;
    java.io.Writer _converter;
    char[] _chars;
    org.eclipse.jetty.util.ByteArrayOutputStream2 _bytes;

    public void <init>(org.eclipse.jetty.server.AbstractHttpConnection)
    {
        org.eclipse.jetty.http.AbstractGenerator $r3;
        org.eclipse.jetty.server.HttpOutput r0;
        org.eclipse.jetty.server.AbstractHttpConnection r1;
        org.eclipse.jetty.http.Generator $r2;

        r0 := @this: org.eclipse.jetty.server.HttpOutput;

        r1 := @parameter0: org.eclipse.jetty.server.AbstractHttpConnection;

        specialinvoke r0.<javax.servlet.ServletOutputStream: void <init>()>();

        r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.server.AbstractHttpConnection _connection> = r1;

        $r2 = virtualinvoke r1.<org.eclipse.jetty.server.AbstractHttpConnection: org.eclipse.jetty.http.Generator getGenerator()>();

        $r3 = (org.eclipse.jetty.http.AbstractGenerator) $r2;

        r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.http.AbstractGenerator _generator> = $r3;

        return;
    }

    public int getMaxIdleTime()
    {
        org.eclipse.jetty.server.AbstractHttpConnection $r1;
        int $i0;
        org.eclipse.jetty.server.HttpOutput r0;

        r0 := @this: org.eclipse.jetty.server.HttpOutput;

        $r1 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.server.AbstractHttpConnection _connection>;

        $i0 = virtualinvoke $r1.<org.eclipse.jetty.server.AbstractHttpConnection: int getMaxIdleTime()>();

        return $i0;
    }

    public boolean isWritten()
    {
        org.eclipse.jetty.http.AbstractGenerator $r1;
        byte $b1;
        org.eclipse.jetty.server.HttpOutput r0;
        int $i2;
        long $l0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.HttpOutput;

        $r1 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.http.AbstractGenerator _generator>;

        $l0 = virtualinvoke $r1.<org.eclipse.jetty.http.AbstractGenerator: long getContentWritten()>();

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void close() throws java.io.IOException
    {
        org.eclipse.jetty.server.HttpOutput r0;

        r0 := @this: org.eclipse.jetty.server.HttpOutput;

        r0.<org.eclipse.jetty.server.HttpOutput: boolean _closed> = 1;

        return;
    }

    public boolean isClosed()
    {
        org.eclipse.jetty.server.HttpOutput r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.HttpOutput;

        $z0 = r0.<org.eclipse.jetty.server.HttpOutput: boolean _closed>;

        return $z0;
    }

    public void reopen()
    {
        org.eclipse.jetty.server.HttpOutput r0;

        r0 := @this: org.eclipse.jetty.server.HttpOutput;

        r0.<org.eclipse.jetty.server.HttpOutput: boolean _closed> = 0;

        return;
    }

    public void flush() throws java.io.IOException
    {
        org.eclipse.jetty.http.AbstractGenerator $r1;
        org.eclipse.jetty.server.HttpOutput r0;
        int $i0;
        long $l1;

        r0 := @this: org.eclipse.jetty.server.HttpOutput;

        $r1 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.http.AbstractGenerator _generator>;

        $i0 = virtualinvoke r0.<org.eclipse.jetty.server.HttpOutput: int getMaxIdleTime()>();

        $l1 = (long) $i0;

        virtualinvoke $r1.<org.eclipse.jetty.http.AbstractGenerator: void flush(long)>($l1);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.eclipse.jetty.io.ByteArrayBuffer $r1;
        byte[] r2;
        org.eclipse.jetty.server.HttpOutput r0;
        int i0, i1;

        r0 := @this: org.eclipse.jetty.server.HttpOutput;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new org.eclipse.jetty.io.ByteArrayBuffer;

        specialinvoke $r1.<org.eclipse.jetty.io.ByteArrayBuffer: void <init>(byte[],int,int)>(r2, i0, i1);

        specialinvoke r0.<org.eclipse.jetty.server.HttpOutput: void write(org.eclipse.jetty.io.Buffer)>($r1);

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        org.eclipse.jetty.io.ByteArrayBuffer $r1;
        byte[] r2;
        org.eclipse.jetty.server.HttpOutput r0;

        r0 := @this: org.eclipse.jetty.server.HttpOutput;

        r2 := @parameter0: byte[];

        $r1 = new org.eclipse.jetty.io.ByteArrayBuffer;

        specialinvoke $r1.<org.eclipse.jetty.io.ByteArrayBuffer: void <init>(byte[])>(r2);

        specialinvoke r0.<org.eclipse.jetty.server.HttpOutput: void write(org.eclipse.jetty.io.Buffer)>($r1);

        return;
    }

    public void write(int) throws java.io.IOException
    {
        org.eclipse.jetty.server.HttpOutput r0;
        org.eclipse.jetty.io.ByteArrayBuffer $r1, $r2, $r3, $r4, $r5;
        byte $b1;
        int i0;

        r0 := @this: org.eclipse.jetty.server.HttpOutput;

        i0 := @parameter0: int;

        $r1 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.io.ByteArrayBuffer _onebyte>;

        if $r1 != null goto label1;

        $r5 = new org.eclipse.jetty.io.ByteArrayBuffer;

        specialinvoke $r5.<org.eclipse.jetty.io.ByteArrayBuffer: void <init>(int)>(1);

        r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.io.ByteArrayBuffer _onebyte> = $r5;

        goto label2;

     label1:
        $r2 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.io.ByteArrayBuffer _onebyte>;

        virtualinvoke $r2.<org.eclipse.jetty.io.ByteArrayBuffer: void clear()>();

     label2:
        $r3 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.io.ByteArrayBuffer _onebyte>;

        $b1 = (byte) i0;

        virtualinvoke $r3.<org.eclipse.jetty.io.ByteArrayBuffer: void put(byte)>($b1);

        $r4 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.io.ByteArrayBuffer _onebyte>;

        specialinvoke r0.<org.eclipse.jetty.server.HttpOutput: void write(org.eclipse.jetty.io.Buffer)>($r4);

        return;
    }

    private void write(org.eclipse.jetty.io.Buffer) throws java.io.IOException
    {
        org.eclipse.jetty.server.HttpOutput r0;
        org.eclipse.jetty.server.AbstractHttpConnection $r9;
        long $l1, $l3;
        org.eclipse.jetty.io.EofException $r12, $r14;
        int $i0, $i2, $i4;
        org.eclipse.jetty.io.Buffer r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.io.IOException $r13, $r15;
        org.eclipse.jetty.http.AbstractGenerator $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r10, $r11;

        r0 := @this: org.eclipse.jetty.server.HttpOutput;

        r3 := @parameter0: org.eclipse.jetty.io.Buffer;

        $z0 = r0.<org.eclipse.jetty.server.HttpOutput: boolean _closed>;

        if $z0 == 0 goto label1;

        $r15 = new java.io.IOException;

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("Closed");

        throw $r15;

     label1:
        $r1 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.http.AbstractGenerator _generator>;

        $z1 = virtualinvoke $r1.<org.eclipse.jetty.http.AbstractGenerator: boolean isOpen()>();

        if $z1 != 0 goto label2;

        $r14 = new org.eclipse.jetty.io.EofException;

        specialinvoke $r14.<org.eclipse.jetty.io.EofException: void <init>()>();

        throw $r14;

     label2:
        $r2 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.http.AbstractGenerator _generator>;

        $z2 = virtualinvoke $r2.<org.eclipse.jetty.http.AbstractGenerator: boolean isBufferFull()>();

        if $z2 == 0 goto label4;

        $r10 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.http.AbstractGenerator _generator>;

        $i2 = virtualinvoke r0.<org.eclipse.jetty.server.HttpOutput: int getMaxIdleTime()>();

        $l3 = (long) $i2;

        virtualinvoke $r10.<org.eclipse.jetty.http.AbstractGenerator: void blockForOutput(long)>($l3);

        $z6 = r0.<org.eclipse.jetty.server.HttpOutput: boolean _closed>;

        if $z6 == 0 goto label3;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("Closed");

        throw $r13;

     label3:
        $r11 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.http.AbstractGenerator _generator>;

        $z7 = virtualinvoke $r11.<org.eclipse.jetty.http.AbstractGenerator: boolean isOpen()>();

        if $z7 != 0 goto label2;

        $r12 = new org.eclipse.jetty.io.EofException;

        specialinvoke $r12.<org.eclipse.jetty.io.EofException: void <init>()>();

        throw $r12;

     label4:
        $r4 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.http.AbstractGenerator _generator>;

        virtualinvoke $r4.<org.eclipse.jetty.http.AbstractGenerator: void addContent(org.eclipse.jetty.io.Buffer,boolean)>(r3, 0);

        $r5 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.http.AbstractGenerator _generator>;

        $z3 = virtualinvoke $r5.<org.eclipse.jetty.http.AbstractGenerator: boolean isAllContentWritten()>();

        if $z3 == 0 goto label5;

        virtualinvoke r0.<org.eclipse.jetty.server.HttpOutput: void flush()>();

        virtualinvoke r0.<org.eclipse.jetty.server.HttpOutput: void close()>();

        goto label6;

     label5:
        $r6 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.http.AbstractGenerator _generator>;

        $z4 = virtualinvoke $r6.<org.eclipse.jetty.http.AbstractGenerator: boolean isBufferFull()>();

        if $z4 == 0 goto label6;

        $r9 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.server.AbstractHttpConnection _connection>;

        virtualinvoke $r9.<org.eclipse.jetty.server.AbstractHttpConnection: void commitResponse(boolean)>(0);

     label6:
        $i4 = interfaceinvoke r3.<org.eclipse.jetty.io.Buffer: int length()>();

        if $i4 <= 0 goto label7;

        $r7 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.http.AbstractGenerator _generator>;

        $z5 = virtualinvoke $r7.<org.eclipse.jetty.http.AbstractGenerator: boolean isOpen()>();

        if $z5 == 0 goto label7;

        $r8 = r0.<org.eclipse.jetty.server.HttpOutput: org.eclipse.jetty.http.AbstractGenerator _generator>;

        $i0 = virtualinvoke r0.<org.eclipse.jetty.server.HttpOutput: int getMaxIdleTime()>();

        $l1 = (long) $i0;

        virtualinvoke $r8.<org.eclipse.jetty.http.AbstractGenerator: void blockForOutput(long)>($l1);

        goto label6;

     label7:
        return;
    }

    public void print(java.lang.String) throws java.io.IOException
    {
        byte[] $r2;
        java.lang.String r1;
        org.eclipse.jetty.server.HttpOutput r0;

        r0 := @this: org.eclipse.jetty.server.HttpOutput;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r0.<org.eclipse.jetty.server.HttpOutput: void write(byte[])>($r2);

        return;
    }
}
