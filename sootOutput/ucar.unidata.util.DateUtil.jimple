public class ucar.unidata.util.DateUtil extends java.lang.Object
{
    private static boolean debug;
    public static final java.lang.String[] MONTH_NAMES;
    public static final long MILLIS;
    public static final long MILLIS_SECOND;
    public static final long MILLIS_MINUTE;
    public static final long MILLIS_HOUR;
    public static final long MILLIS_DAY;
    public static final long MILLIS_WEEK;
    public static final long MILLIS_MONTH;
    public static final long MILLIS_YEAR;
    public static final long MILLIS_DECADE;
    public static final long MILLIS_CENTURY;
    public static final long MILLIS_MILLENIUM;
    public static final java.util.TimeZone TIMEZONE_GMT;
    public static final java.util.TimeZone TIMEZONE_UTC;
    public static final java.lang.String[] DATE_PATTERNS;
    public static final java.lang.String[] DATE_FORMATS;
    private static java.text.SimpleDateFormat doySdf;
    private static final java.lang.String[] formats;
    private static java.text.SimpleDateFormat[] sdfs;
    private static java.text.SimpleDateFormat lastSdf;
    private static java.lang.String lastFormat;
    private static int lengthLastDate;

    public void <init>()
    {
        ucar.unidata.util.DateUtil r0;

        r0 := @this: ucar.unidata.util.DateUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getCurrentSystemTimeAsISO8601()
    {
        long $l0;
        java.lang.String $r0;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0 = staticinvoke <ucar.unidata.util.DateUtil: java.lang.String getTimeAsISO8601(long)>($l0);

        return $r0;
    }

    public static java.lang.String getTimeAsISO8601(java.util.Date)
    {
        long $l0;
        java.lang.String $r1;
        java.util.Date r0;

        r0 := @parameter0: java.util.Date;

        $l0 = virtualinvoke r0.<java.util.Date: long getTime()>();

        $r1 = staticinvoke <ucar.unidata.util.DateUtil: java.lang.String getTimeAsISO8601(long)>($l0);

        return $r1;
    }

    public static java.util.Date min(java.util.Date, java.util.Date)
    {
        byte $b2;
        java.util.Date r0, r1;
        int $i3;
        long $l0, $l1;

        r0 := @parameter0: java.util.Date;

        r1 := @parameter1: java.util.Date;

        $l0 = virtualinvoke r0.<java.util.Date: long getTime()>();

        $l1 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        return r0;

     label1:
        return r1;
    }

    public static java.util.Date max(java.util.Date, java.util.Date)
    {
        byte $b2;
        java.util.Date r0, r1;
        int $i3;
        long $l0, $l1;

        r0 := @parameter0: java.util.Date;

        r1 := @parameter1: java.util.Date;

        $l0 = virtualinvoke r0.<java.util.Date: long getTime()>();

        $l1 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label1;

        return r0;

     label1:
        return r1;
    }

    public static java.lang.String getTimeAsISO8601(long)
    {
        java.util.Calendar $r1;
        java.util.TimeZone $r0;
        java.util.Date $r2;
        long l0;
        ucar.unidata.util.DateUtil$DateFormatHandler $r3;
        java.lang.String $r4;

        l0 := @parameter0: long;

        $r0 = <ucar.unidata.util.DateUtil: java.util.TimeZone TIMEZONE_GMT>;

        $r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r0);

        virtualinvoke $r1.<java.util.Calendar: void setTimeInMillis(long)>(l0);

        $r2 = virtualinvoke $r1.<java.util.Calendar: java.util.Date getTime()>();

        $r3 = <ucar.unidata.util.DateUtil$DateFormatHandler: ucar.unidata.util.DateUtil$DateFormatHandler ISO_DATE_TIME>;

        $r4 = virtualinvoke $r3.<ucar.unidata.util.DateUtil$DateFormatHandler: java.lang.String getDateTimeStringFromDate(java.util.Date)>($r2);

        return $r4;
    }

    public static java.util.Date roundByDay(java.util.Date, int)
    {
        java.util.Calendar $r1;
        java.util.TimeZone $r0;
        java.util.Date r2, $r3;
        int i2;
        long $l0, $l1;

        r2 := @parameter0: java.util.Date;

        i2 := @parameter1: int;

        if i2 != 0 goto label1;

        return r2;

     label1:
        if i2 >= 0 goto label2;

        i2 = i2 + 1;

     label2:
        $r0 = <ucar.unidata.util.DateUtil: java.util.TimeZone TIMEZONE_GMT>;

        $r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r0);

        $l0 = virtualinvoke r2.<java.util.Date: long getTime()>();

        virtualinvoke $r1.<java.util.Calendar: void setTimeInMillis(long)>($l0);

        virtualinvoke $r1.<java.util.Calendar: void clear(int)>(14);

        virtualinvoke $r1.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke $r1.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke $r1.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke $r1.<java.util.Calendar: void add(int,int)>(6, i2);

        $r3 = new java.util.Date;

        $l1 = virtualinvoke $r1.<java.util.Calendar: long getTimeInMillis()>();

        specialinvoke $r3.<java.util.Date: void <init>(long)>($l1);

        return $r3;
    }

    public static java.text.SimpleDateFormat[] getFormatters()
    {
        java.text.SimpleDateFormat $r5;
        java.lang.String[] $r2, $r4, $r6;
        int $i0, $i1, i2;
        java.lang.String $r7;
        java.text.SimpleDateFormat[] $r0, $r1, r3;

        $r0 = <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat[] sdfs>;

        if $r0 != null goto label3;

        $r2 = <ucar.unidata.util.DateUtil: java.lang.String[] formats>;

        $i0 = lengthof $r2;

        r3 = newarray (java.text.SimpleDateFormat)[$i0];

        i2 = 0;

     label1:
        $r4 = <ucar.unidata.util.DateUtil: java.lang.String[] formats>;

        $i1 = lengthof $r4;

        if i2 >= $i1 goto label2;

        $r5 = new java.text.SimpleDateFormat;

        $r6 = <ucar.unidata.util.DateUtil: java.lang.String[] formats>;

        $r7 = $r6[i2];

        specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r7);

        r3[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat[] sdfs> = r3;

     label3:
        $r1 = <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat[] sdfs>;

        return $r1;
    }

    public static java.text.SimpleDateFormat findFormatter(java.lang.String)
    {
        java.lang.Throwable $r15, $r17;
        java.text.SimpleDateFormat $r0, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.String r4, $r6;
        java.text.ParseException $r14, $r16;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.text.SimpleDateFormat[] $r18;

        r4 := @parameter0: java.lang.String;

        $r0 = <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat lastSdf>;

        if $r0 == null goto label07;

        $i1 = <ucar.unidata.util.DateUtil: int lengthLastDate>;

        $i2 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i1 != $i2 goto label07;

     label01:
        $r11 = <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat lastSdf>;

        entermonitor $r11;

     label02:
        $r12 = <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat lastSdf>;

        virtualinvoke $r12.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r4);

        $r13 = <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat lastSdf>;

        exitmonitor $r11;

     label03:
        return $r13;

     label04:
        $r17 := @caughtexception;

        exitmonitor $r11;

     label05:
        throw $r17;

     label06:
        $r16 := @caughtexception;

     label07:
        $r18 = staticinvoke <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat[] getFormatters()>();

        i3 = 0;

     label08:
        $i4 = lengthof $r18;

        if i3 >= $i4 goto label15;

     label09:
        $r7 = $r18[i3];

        entermonitor $r7;

     label10:
        $r8 = $r18[i3];

        virtualinvoke $r8.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r4);

        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        <ucar.unidata.util.DateUtil: int lengthLastDate> = $i0;

        $r9 = $r18[i3];

        <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat lastSdf> = $r9;

        $r10 = $r18[i3];

        exitmonitor $r7;

     label11:
        return $r10;

     label12:
        $r15 := @caughtexception;

        exitmonitor $r7;

     label13:
        throw $r15;

     label14:
        $r14 := @caughtexception;

        i3 = i3 + 1;

        goto label08;

     label15:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find date format for:");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.text.ParseException from label01 to label03 with label06;
        catch java.text.ParseException from label04 to label06 with label06;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.text.ParseException from label09 to label11 with label14;
        catch java.text.ParseException from label12 to label14 with label14;
    }

    public static java.util.Date[] getDateRange(java.lang.String, java.lang.String, java.util.Date) throws java.text.ParseException
    {
        java.util.Date r0, $r2, $r4, r7, r8;
        int $i0, $i1, $i3;
        java.lang.String r1, r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r10, $r11;
        java.util.Date[] $r9;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r0 := @parameter2: java.util.Date;

        $i3 = (int) -1;

        $r2 = staticinvoke <ucar.unidata.util.DateUtil: java.util.Date parseRelative(java.util.Date,java.lang.String,int)>(r0, r1, $i3);

        r7 = $r2;

        $r4 = staticinvoke <ucar.unidata.util.DateUtil: java.util.Date parseRelative(java.util.Date,java.lang.String,int)>(r0, r3, 1);

        r8 = $r4;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        if $r2 != null goto label1;

        $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z3 != 0 goto label1;

        r7 = staticinvoke <ucar.unidata.util.DateUtil: java.util.Date parse(java.lang.String)>(r1);

     label1:
        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i1 <= 0 goto label2;

        if $r4 != null goto label2;

        $z2 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z2 != 0 goto label2;

        r8 = staticinvoke <ucar.unidata.util.DateUtil: java.util.Date parse(java.lang.String)>(r3);

     label2:
        if r7 != null goto label4;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z1 == 0 goto label4;

        if r8 != null goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot do relative From Date when To Date is not set");

        throw $r10;

     label3:
        r7 = staticinvoke <ucar.unidata.util.DateUtil: java.util.Date getRelativeDate(java.util.Date,java.lang.String)>(r8, r1);

     label4:
        if r8 != null goto label6;

        $z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z0 == 0 goto label6;

        if r7 != null goto label5;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot do relative From Date when To Date is not set");

        throw $r11;

     label5:
        r8 = staticinvoke <ucar.unidata.util.DateUtil: java.util.Date getRelativeDate(java.util.Date,java.lang.String)>(r7, r3);

     label6:
        $r9 = newarray (java.util.Date)[2];

        $r9[0] = r7;

        $r9[1] = r8;

        return $r9;
    }

    public static java.util.Date parseRelative(java.util.Date, java.lang.String, int) throws java.text.ParseException
    {
        java.util.Date r3, $r14, $r21, $r22, $r23, $r24, $r25, r27;
        byte $b12, $b13, $b14, $b15, $b16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.util.TimeZone $r1;
        java.util.List $r4;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r17, $r18, $r19;
        long $l0, $l5, $l6, $l7, $l8, $l9, $l10;
        java.util.Calendar $r2;
        int $i1, $i2, i3, $i4;
        java.lang.String $r0, $r13, $r15, $r20, r26;
        java.lang.IllegalArgumentException $r7, $r16;
        java.lang.Object $r5, $r6;

        r3 := @parameter0: java.util.Date;

        r26 := @parameter1: java.lang.String;

        i3 := @parameter2: int;

        $r0 = virtualinvoke r26.<java.lang.String: java.lang.String trim()>();

        $r1 = <ucar.unidata.util.DateUtil: java.util.TimeZone TIMEZONE_GMT>;

        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r1);

        $l0 = virtualinvoke r3.<java.util.Date: long getTime()>();

        virtualinvoke $r2.<java.util.Calendar: void setTimeInMillis(long)>($l0);

        r27 = null;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("now");

        if $z0 == 0 goto label01;

        $r25 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

        return $r25;

     label01:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("today");

        if $z1 == 0 goto label02;

        r27 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

        goto label15;

     label02:
        $z2 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("yesterday");

        if $z2 == 0 goto label03;

        $r23 = new java.util.Date;

        $r24 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

        $l8 = virtualinvoke $r24.<java.util.Date: long getTime()>();

        $l9 = staticinvoke <ucar.unidata.util.DateUtil: long daysToMillis(double)>(1.0);

        $l10 = $l8 - $l9;

        specialinvoke $r23.<java.util.Date: void <init>(long)>($l10);

        r27 = $r23;

        goto label15;

     label03:
        $z3 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("tomorrow");

        if $z3 == 0 goto label04;

        $r21 = new java.util.Date;

        $r22 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

        $l5 = virtualinvoke $r22.<java.util.Date: long getTime()>();

        $l6 = staticinvoke <ucar.unidata.util.DateUtil: long daysToMillis(double)>(1.0);

        $l7 = $l5 + $l6;

        specialinvoke $r21.<java.util.Date: void <init>(long)>($l7);

        r27 = $r21;

        goto label15;

     label04:
        $z4 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("last");

        if $z4 != 0 goto label05;

        $z11 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("next");

        if $z11 == 0 goto label15;

     label05:
        $r4 = staticinvoke <ucar.unidata.util.StringUtil: java.util.List split(java.lang.Object,java.lang.String,boolean,boolean)>($r0, " ", 1, 1);

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i1 == 2 goto label06;

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad time format:");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label06:
        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $z5 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>("last");

        if $z5 == 0 goto label07;

        $b16 = -1;

        $b15 = -1;

        $b14 = -1;

        $b13 = -1;

        $b12 = -1;

        goto label08;

     label07:
        $b16 = 1;

        $b15 = 1;

        $b14 = 1;

        $b13 = 1;

        $b12 = 1;

     label08:
        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(1);

        $r15 = (java.lang.String) $r6;

        $z6 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("week");

        if $z6 == 0 goto label09;

        virtualinvoke $r2.<java.util.Calendar: void add(int,int)>(4, $b14);

        goto label14;

     label09:
        $z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("month");

        if $z7 == 0 goto label10;

        virtualinvoke $r2.<java.util.Calendar: void add(int,int)>(2, $b15);

        goto label14;

     label10:
        $z8 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("year");

        if $z8 == 0 goto label11;

        virtualinvoke $r2.<java.util.Calendar: void add(int,int)>(1, $b13);

        goto label14;

     label11:
        $z9 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("century");

        if $z9 == 0 goto label12;

        $i4 = $b16 * 100;

        virtualinvoke $r2.<java.util.Calendar: void add(int,int)>(1, $i4);

        goto label14;

     label12:
        $z10 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("millenium");

        if $z10 == 0 goto label13;

        $i2 = $b12 * 1000;

        virtualinvoke $r2.<java.util.Calendar: void add(int,int)>(1, $i2);

        goto label14;

     label13:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad time format:");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown time field:");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label14:
        r27 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

     label15:
        if r27 == null goto label16;

        $r14 = staticinvoke <ucar.unidata.util.DateUtil: java.util.Date roundByDay(java.util.Date,int)>(r27, i3);

        return $r14;

     label16:
        return null;
    }

    public static java.util.Date parse(java.lang.String) throws java.text.ParseException
    {
        java.util.Date $r8, $r33;
        java.text.ParseException $r35, $r37, $r39;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r3, $r4, $r12, $r14, $r15, $r16, $r19, $r23, $r25, $r27;
        java.text.SimpleDateFormat[] $r42;
        java.lang.Throwable $r36, $r38, $r40;
        java.text.SimpleDateFormat $r6, $r7, $r11, $r21, $r22, $r30, $r31, $r32, $r34, $r41;
        java.lang.String[] $r9, $r17;
        int $i0, $i1, $i2, $i3, i4, $i5;
        java.lang.String r0, $r5, $r10, $r18, $r20, $r26, $r28, $r29;
        java.io.PrintStream $r13, $r24;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 8 goto label08;

        $r29 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 5);

        $z2 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z2 == 0 goto label08;

     label01:
        $r30 = <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat doySdf>;

        if $r30 != null goto label02;

        $r34 = new java.text.SimpleDateFormat;

        specialinvoke $r34.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-DDD");

        <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat doySdf> = $r34;

     label02:
        $r31 = <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat doySdf>;

        entermonitor $r31;

     label03:
        $r32 = <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat doySdf>;

        $r33 = virtualinvoke $r32.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r0);

        exitmonitor $r31;

     label04:
        return $r33;

     label05:
        $r40 := @caughtexception;

        exitmonitor $r31;

     label06:
        throw $r40;

     label07:
        $r39 := @caughtexception;

     label08:
        $r41 = <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat lastSdf>;

        if $r41 == null goto label17;

        $i2 = <ucar.unidata.util.DateUtil: int lengthLastDate>;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 != $i3 goto label17;

     label09:
        $r21 = <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat lastSdf>;

        entermonitor $r21;

     label10:
        $r22 = <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat lastSdf>;

        virtualinvoke $r22.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r0);

        $z1 = <ucar.unidata.util.DateUtil: boolean debug>;

        if $z1 == 0 goto label11;

        $r24 = <java.lang.System: java.io.PrintStream err>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using lastSdf format= ");

        $r26 = <ucar.unidata.util.DateUtil: java.lang.String lastFormat>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r28);

     label11:
        exitmonitor $r21;

     label12:
        goto label15;

     label13:
        $r38 := @caughtexception;

        exitmonitor $r21;

     label14:
        throw $r38;

     label15:
        goto label17;

     label16:
        $r37 := @caughtexception;

     label17:
        $r42 = staticinvoke <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat[] getFormatters()>();

        i4 = 0;

     label18:
        $i5 = lengthof $r42;

        if i4 >= $i5 goto label26;

     label19:
        $r6 = $r42[i4];

        entermonitor $r6;

     label20:
        $r7 = $r42[i4];

        $r8 = virtualinvoke $r7.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r0);

        $z0 = <ucar.unidata.util.DateUtil: boolean debug>;

        if $z0 == 0 goto label21;

        $r13 = <java.lang.System: java.io.PrintStream err>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   success: date:");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" format:");

        $r17 = <ucar.unidata.util.DateUtil: java.lang.String[] formats>;

        $r18 = $r17[i4];

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r20);

     label21:
        $r9 = <ucar.unidata.util.DateUtil: java.lang.String[] formats>;

        $r10 = $r9[i4];

        <ucar.unidata.util.DateUtil: java.lang.String lastFormat> = $r10;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        <ucar.unidata.util.DateUtil: int lengthLastDate> = $i1;

        $r11 = $r42[i4];

        <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat lastSdf> = $r11;

        exitmonitor $r6;

     label22:
        return $r8;

     label23:
        $r36 := @caughtexception;

        exitmonitor $r6;

     label24:
        throw $r36;

     label25:
        $r35 := @caughtexception;

        i4 = i4 + 1;

        goto label18;

     label26:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find date format for:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.text.ParseException from label01 to label04 with label07;
        catch java.text.ParseException from label05 to label07 with label07;
        catch java.lang.Throwable from label10 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.text.ParseException from label09 to label15 with label16;
        catch java.lang.Throwable from label20 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
        catch java.text.ParseException from label19 to label22 with label25;
        catch java.text.ParseException from label23 to label25 with label25;
    }

    public static double[] toSeconds(java.lang.String[]) throws java.text.ParseException
    {
        java.util.Date $r5;
        double[] r1;
        java.text.SimpleDateFormat $r3;
        java.lang.String[] r0;
        long $l3;
        byte $b4;
        int $i0, $i1, $i2, i5, $i6;
        java.lang.String $r2, $r4, $r9, $r11;
        double $d0, $d1, $d2, d3;
        java.io.PrintStream $r7;
        java.lang.StringBuilder $r8, $r10, $r12;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        r1 = newarray (double)[$i0];

        $i1 = lengthof r0;

        if $i1 != 0 goto label1;

        return r1;

     label1:
        $r2 = r0[0];

        $r3 = staticinvoke <ucar.unidata.util.DateUtil: java.text.SimpleDateFormat findFormatter(java.lang.String)>($r2);

        d3 = 0.0;

        i5 = 0;

     label2:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label4;

        $r4 = r0[i5];

        $r5 = virtualinvoke $r3.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r4);

        $l3 = virtualinvoke $r5.<java.util.Date: long getTime()>();

        $d0 = (double) $l3;

        $d1 = $d0 / 1000.0;

        r1[i5] = $d1;

        $d2 = r1[i5];

        $b4 = $d2 cmpg d3;

        $i6 = (int) $b4;

        if $i6 >= 0 goto label3;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("****");

        $r9 = r0[i5];

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label3:
        d3 = r1[i5];

        i5 = i5 + 1;

        goto label2;

     label4:
        return r1;
    }

    public static long daysToMillis(double)
    {
        long $l0;
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = d0 * 24.0;

        $l0 = staticinvoke <ucar.unidata.util.DateUtil: long hoursToMillis(double)>($d1);

        return $l0;
    }

    public static long hoursToMillis(double)
    {
        long $l0;
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = d0 * 60.0;

        $l0 = staticinvoke <ucar.unidata.util.DateUtil: long minutesToMillis(double)>($d1);

        return $l0;
    }

    public static double millisToMinutes(double)
    {
        double d0, $d1, $d2;

        d0 := @parameter0: double;

        $d1 = d0 / 1000.0;

        $d2 = $d1 / 60.0;

        return $d2;
    }

    public static double millisToHours(double)
    {
        double d0, $d1, $d2, $d3;

        d0 := @parameter0: double;

        $d1 = d0 / 1000.0;

        $d2 = $d1 / 60.0;

        $d3 = $d2 / 60.0;

        return $d3;
    }

    public static long minutesToMillis(double)
    {
        long $l0;
        double d0, $d1, $d2;

        d0 := @parameter0: double;

        $d1 = d0 * 60.0;

        $d2 = $d1 * 1000.0;

        $l0 = (long) $d2;

        return $l0;
    }

    public static java.util.Date getRelativeDate(java.util.Date, java.lang.String)
    {
        java.util.Date $r0, r1;
        long $l0, $l1, $l2;
        java.lang.String r2;

        r1 := @parameter0: java.util.Date;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.util.Date;

        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $l1 = staticinvoke <ucar.unidata.util.DateUtil: long parseRelativeTimeString(java.lang.String)>(r2);

        $l2 = $l0 + $l1;

        specialinvoke $r0.<java.util.Date: void <init>(long)>($l2);

        return $r0;
    }

    public static long parseRelativeTimeString(java.lang.String)
    {
        java.lang.Integer $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Exception $r16;
        java.util.List $r1;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r18, $r19, $r20, $r21, $r23;
        long $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, l9, $l11, $l12, l13;
        int $i0, $i10;
        java.lang.String r0, $r3, $r9, $r15, $r24, r25, r27;
        java.lang.IllegalArgumentException $r5, $r10, $r17;
        java.lang.Object $r2, $r4, $r22;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <ucar.unidata.util.StringUtil: java.util.List split(java.lang.Object,java.lang.String,boolean,boolean)>(r0, " ", 1, 1);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 == 2 goto label01;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad format for relative time string:");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Needs to be of the form: +/-<number> timeunit");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label01:
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        r25 = $r3;

        l9 = 1L;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z0 == 0 goto label02;

        r25 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(1);

        goto label03;

     label02:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z1 == 0 goto label03;

        r25 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(1);

        l9 = -1L;

     label03:
        $r26 = new java.lang.Integer;

        specialinvoke $r26.<java.lang.Integer: void <init>(java.lang.String)>(r25);

        $i10 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        $l11 = (long) $i10;

        $l12 = l9 * $l11;

     label04:
        goto label06;

     label05:
        $r16 := @caughtexception;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad format for relative time string:");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Could not parse initial number:");

        $r22 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r17;

     label06:
        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(1);

        r27 = (java.lang.String) $r4;

        $z2 = virtualinvoke r27.<java.lang.String: boolean startsWith(java.lang.String)>("second");

        if $z2 == 0 goto label07;

        l13 = $l12 * 1000L;

        goto label16;

     label07:
        $z3 = virtualinvoke r27.<java.lang.String: boolean startsWith(java.lang.String)>("minute");

        if $z3 == 0 goto label08;

        $l8 = 60L * $l12;

        l13 = $l8 * 1000L;

        goto label16;

     label08:
        $z4 = virtualinvoke r27.<java.lang.String: boolean startsWith(java.lang.String)>("hour");

        if $z4 == 0 goto label09;

        $l7 = 3600L * $l12;

        l13 = $l7 * 1000L;

        goto label16;

     label09:
        $z5 = virtualinvoke r27.<java.lang.String: boolean startsWith(java.lang.String)>("day");

        if $z5 == 0 goto label10;

        $l6 = 86400L * $l12;

        l13 = $l6 * 1000L;

        goto label16;

     label10:
        $z6 = virtualinvoke r27.<java.lang.String: boolean startsWith(java.lang.String)>("week");

        if $z6 == 0 goto label11;

        $l5 = 604800L * $l12;

        l13 = $l5 * 1000L;

        goto label16;

     label11:
        $z7 = virtualinvoke r27.<java.lang.String: boolean startsWith(java.lang.String)>("month");

        if $z7 == 0 goto label12;

        $l4 = 2592000L * $l12;

        l13 = $l4 * 1000L;

        goto label16;

     label12:
        $z8 = virtualinvoke r27.<java.lang.String: boolean startsWith(java.lang.String)>("year");

        if $z8 == 0 goto label13;

        $l3 = 31536000L * $l12;

        l13 = $l3 * 1000L;

        goto label16;

     label13:
        $z9 = virtualinvoke r27.<java.lang.String: boolean startsWith(java.lang.String)>("century");

        if $z9 == 0 goto label14;

        $l2 = -1141367296L * $l12;

        l13 = $l2 * 1000L;

        goto label16;

     label14:
        $z10 = virtualinvoke r27.<java.lang.String: boolean startsWith(java.lang.String)>("millenium");

        if $z10 == 0 goto label15;

        $l1 = 1471228928L * $l12;

        l13 = $l1 * 1000L;

        goto label16;

     label15:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown unit in relative time string:");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label16:
        return l13;

        catch java.lang.Exception from label01 to label04 with label05;
    }

    public static java.util.Date decodeWMODate(java.lang.String, java.util.Date)
    {
        java.util.Date r8, $r9, $r10;
        long $l1;
        java.util.Calendar $r2;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        java.lang.String $r0, $r3, $r4, $r5, r7;
        java.util.TimeZone $r1;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.util.Date;

        if r8 != null goto label1;

        $r10 = new java.util.Date;

        specialinvoke $r10.<java.util.Date: void <init>()>();

        r8 = $r10;

     label1:
        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i0 <= 6 goto label2;

        return r8;

     label2:
        $r0 = staticinvoke <ucar.unidata.util.StringUtil: java.lang.String padLeft(java.lang.String,int,java.lang.String)>(r7, 6, "0");

        $r1 = <ucar.unidata.util.DateUtil: java.util.TimeZone TIMEZONE_GMT>;

        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r1);

        $l1 = virtualinvoke r8.<java.util.Date: long getTime()>();

        virtualinvoke $r2.<java.util.Calendar: void setTimeInMillis(long)>($l1);

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>(4);

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $i5 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(5);

        $i6 = $i5 - $i2;

        if $i6 <= 26 goto label3;

        virtualinvoke $r2.<java.util.Calendar: void add(int,int)>(2, 1);

        goto label4;

     label3:
        $i7 = $i2 - $i5;

        if $i7 <= 20 goto label4;

        $i9 = (int) -1;

        virtualinvoke $r2.<java.util.Calendar: void add(int,int)>(2, $i9);

     label4:
        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(5, $i2);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(11, $i3);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, $i4);

        $r9 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

        return $r9;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.io.PrintStream $r3;
        java.util.Date $r6;
        java.lang.String[] r0, $r9, r10;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r2, $r4, $r5, $r7;
        java.lang.String r1, $r8;

        r10 := @parameter0: java.lang.String[];

        <ucar.unidata.util.DateUtil: boolean debug> = 1;

        $i0 = lengthof r10;

        if $i0 != 0 goto label1;

        $r9 = newarray (java.lang.String)[5];

        $r9[0] = "2000-10-01T10:53";

        $r9[1] = "2000";

        $r9[2] = "2000-10";

        $r9[3] = "2000-10-01";

        $r9[4] = "2000/10/01";

        r10 = $r9;

     label1:
        r0 = r10;

        $i1 = lengthof r10;

        i2 = 0;

     label2:
        if i2 >= $i1 goto label3;

        r1 = r0[i2];

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r6 = staticinvoke <ucar.unidata.util.DateUtil: java.util.Date parse(java.lang.String)>(r1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r8);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    static void <clinit>()
    {
        java.util.TimeZone $r1, $r2;
        java.lang.String[] $r0, $r3, $r4, $r5;

        <ucar.unidata.util.DateUtil: long MILLIS_MILLENIUM> = 31536000000000L;

        <ucar.unidata.util.DateUtil: long MILLIS_CENTURY> = 3153600000000L;

        <ucar.unidata.util.DateUtil: long MILLIS_DECADE> = 315360000000L;

        <ucar.unidata.util.DateUtil: long MILLIS_YEAR> = 31536000000L;

        <ucar.unidata.util.DateUtil: long MILLIS_MONTH> = 2592000000L;

        <ucar.unidata.util.DateUtil: long MILLIS_WEEK> = 604800000L;

        <ucar.unidata.util.DateUtil: long MILLIS_DAY> = 86400000L;

        <ucar.unidata.util.DateUtil: long MILLIS_HOUR> = 3600000L;

        <ucar.unidata.util.DateUtil: long MILLIS_MINUTE> = 60000L;

        <ucar.unidata.util.DateUtil: long MILLIS_SECOND> = 1000L;

        <ucar.unidata.util.DateUtil: long MILLIS> = 1L;

        <ucar.unidata.util.DateUtil: boolean debug> = 0;

        $r0 = newarray (java.lang.String)[12];

        $r0[0] = "January";

        $r0[1] = "February";

        $r0[2] = "March";

        $r0[3] = "April";

        $r0[4] = "May";

        $r0[5] = "June";

        $r0[6] = "July";

        $r0[7] = "August";

        $r0[8] = "September";

        $r0[9] = "October";

        $r0[10] = "November";

        $r0[11] = "December";

        <ucar.unidata.util.DateUtil: java.lang.String[] MONTH_NAMES> = $r0;

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        <ucar.unidata.util.DateUtil: java.util.TimeZone TIMEZONE_GMT> = $r1;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        <ucar.unidata.util.DateUtil: java.util.TimeZone TIMEZONE_UTC> = $r2;

        $r3 = newarray (java.lang.String)[3];

        $r3[0] = "(\\d\\d\\d\\d\\d\\d\\d\\d_\\d\\d\\d\\d)";

        $r3[1] = "(\\d\\d\\d\\d\\d\\d\\d\\d_\\d\\d)";

        $r3[2] = "(\\d\\d\\d\\d\\d\\d\\d\\d)";

        <ucar.unidata.util.DateUtil: java.lang.String[] DATE_PATTERNS> = $r3;

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "yyyyMMdd_HHmm";

        $r4[1] = "yyyyMMdd_HH";

        $r4[2] = "yyyyMMdd";

        <ucar.unidata.util.DateUtil: java.lang.String[] DATE_FORMATS> = $r4;

        $r5 = newarray (java.lang.String)[24];

        $r5[0] = "yyyy-MM-dd\'T\'HH:mm:ss Z";

        $r5[1] = "yyyyMMdd\'T\'HHmmss Z";

        $r5[2] = "yyyy/MM/dd HH:mm:ss Z";

        $r5[3] = "yyyy-MM-dd HH:mm:ss Z";

        $r5[4] = "EEE MMM dd HH:mm:ss Z yyyy";

        $r5[5] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r5[6] = "yyyyMMdd\'T\'HHmmss";

        $r5[7] = "yyyy-MM-dd\'T\'HH:mm Z";

        $r5[8] = "yyyyMMdd\'T\'HHmm Z";

        $r5[9] = "yyyy-MM-dd\'T\'HH:mm";

        $r5[10] = "yyyyMMdd\'T\'HHmm";

        $r5[11] = "yyyy/MM/dd HH:mm:ss";

        $r5[12] = "yyyy-MM-dd HH:mm:ss";

        $r5[13] = "yyyy/MM/dd HH:mm Z";

        $r5[14] = "yyyy-MM-dd HH:mm Z";

        $r5[15] = "yyyy/MM/dd HH:mm";

        $r5[16] = "yyyy-MM-dd HH:mm";

        $r5[17] = "yyyy-MM-dd";

        $r5[18] = "yyyy/MM/dd";

        $r5[19] = "yyyy-MM";

        $r5[20] = "yyyy/MM";

        $r5[21] = "yyyyMMdd";

        $r5[22] = "yyyyMM";

        $r5[23] = "yyyy";

        <ucar.unidata.util.DateUtil: java.lang.String[] formats> = $r5;

        <ucar.unidata.util.DateUtil: int lengthLastDate> = 0;

        return;
    }
}
