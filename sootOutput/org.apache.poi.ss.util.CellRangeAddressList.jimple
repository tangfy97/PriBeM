public class org.apache.poi.ss.util.CellRangeAddressList extends java.lang.Object
{
    protected final java.util.List _list;

    public void <init>()
    {
        org.apache.poi.ss.util.CellRangeAddressList r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddressList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list> = $r1;

        return;
    }

    public void <init>(int, int, int, int)
    {
        int i0, i1, i2, i3;
        org.apache.poi.ss.util.CellRangeAddressList r0;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddressList;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<org.apache.poi.ss.util.CellRangeAddressList: void <init>()>();

        virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddressList: void addCellRangeAddress(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public void <init>(org.apache.poi.hssf.record.RecordInputStream)
    {
        org.apache.poi.ss.util.CellRangeAddress $r2;
        java.util.List $r3;
        org.apache.poi.hssf.record.RecordInputStream r1;
        int $i0, i1;
        org.apache.poi.ss.util.CellRangeAddressList r0;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddressList;

        r1 := @parameter0: org.apache.poi.hssf.record.RecordInputStream;

        specialinvoke r0.<org.apache.poi.ss.util.CellRangeAddressList: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: int readUShort()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        $r2 = new org.apache.poi.ss.util.CellRangeAddress;

        specialinvoke $r2.<org.apache.poi.ss.util.CellRangeAddress: void <init>(org.apache.poi.hssf.record.RecordInputStream)>(r1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public int countRanges()
    {
        int $i0;
        java.util.List $r1;
        org.apache.poi.ss.util.CellRangeAddressList r0;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddressList;

        $r1 = r0.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public void addCellRangeAddress(int, int, int, int)
    {
        org.apache.poi.ss.util.CellRangeAddress $r0;
        int i0, i1, i2, i3;
        org.apache.poi.ss.util.CellRangeAddressList r1;

        r1 := @this: org.apache.poi.ss.util.CellRangeAddressList;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new org.apache.poi.ss.util.CellRangeAddress;

        specialinvoke $r0.<org.apache.poi.ss.util.CellRangeAddress: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddressList: void addCellRangeAddress(org.apache.poi.ss.util.CellRangeAddress)>($r0);

        return;
    }

    public void addCellRangeAddress(org.apache.poi.ss.util.CellRangeAddress)
    {
        org.apache.poi.ss.util.CellRangeAddress r1;
        java.util.List $r2;
        org.apache.poi.ss.util.CellRangeAddressList r0;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddressList;

        r1 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        $r2 = r0.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public org.apache.poi.ss.util.CellRangeAddress remove(int)
    {
        int i0, $i1, $i2, $i3;
        java.lang.String $r10;
        boolean $z0;
        org.apache.poi.ss.util.CellRangeAddress $r14;
        java.lang.RuntimeException $r2, $r15;
        java.util.List $r1, $r7, $r11, $r12;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r9;
        java.lang.Object $r13;
        org.apache.poi.ss.util.CellRangeAddressList r0;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddressList;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>("List is empty");

        throw $r15;

     label1:
        if i0 < 0 goto label2;

        $r11 = r0.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        $i3 = interfaceinvoke $r11.<java.util.List: int size()>();

        if i0 < $i3 goto label3;

     label2:
        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Range index (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is outside allowable range (0..");

        $r7 = r0.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label3:
        $r12 = r0.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object remove(int)>(i0);

        $r14 = (org.apache.poi.ss.util.CellRangeAddress) $r13;

        return $r14;
    }

    public org.apache.poi.ss.util.CellRangeAddress getCellRangeAddress(int)
    {
        org.apache.poi.ss.util.CellRangeAddress $r3;
        java.util.List $r1;
        int i0;
        java.lang.Object $r2;
        org.apache.poi.ss.util.CellRangeAddressList r0;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddressList;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.apache.poi.ss.util.CellRangeAddress) $r2;

        return $r3;
    }

    public int getSize()
    {
        java.util.List $r1;
        int $i0, $i1;
        org.apache.poi.ss.util.CellRangeAddressList r0;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddressList;

        $r1 = r0.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = staticinvoke <org.apache.poi.ss.util.CellRangeAddressList: int getEncodedSize(int)>($i0);

        return $i1;
    }

    public static int getEncodedSize(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $i1 = staticinvoke <org.apache.poi.ss.util.CellRangeAddress: int getEncodedSize(int)>(i0);

        $i2 = 2 + $i1;

        return $i2;
    }

    public int serialize(int, byte[])
    {
        byte[] r2;
        int $i0, i1;
        org.apache.poi.ss.util.CellRangeAddressList r0;
        org.apache.poi.util.LittleEndianByteArrayOutputStream $r1;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddressList;

        i1 := @parameter0: int;

        r2 := @parameter1: byte[];

        $i0 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddressList: int getSize()>();

        $r1 = new org.apache.poi.util.LittleEndianByteArrayOutputStream;

        specialinvoke $r1.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void <init>(byte[],int,int)>(r2, i1, $i0);

        virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddressList: void serialize(org.apache.poi.util.LittleEndianOutput)>($r1);

        return $i0;
    }

    public void serialize(org.apache.poi.util.LittleEndianOutput)
    {
        org.apache.poi.ss.util.CellRangeAddress r5;
        java.util.List $r1, $r3;
        org.apache.poi.util.LittleEndianOutput r2;
        int $i0, i1;
        java.lang.Object $r4;
        org.apache.poi.ss.util.CellRangeAddressList r0;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddressList;

        r2 := @parameter0: org.apache.poi.util.LittleEndianOutput;

        $r1 = r0.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        interfaceinvoke r2.<org.apache.poi.util.LittleEndianOutput: void writeShort(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (org.apache.poi.ss.util.CellRangeAddress) $r4;

        virtualinvoke r5.<org.apache.poi.ss.util.CellRangeAddress: void serialize(org.apache.poi.util.LittleEndianOutput)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.poi.ss.util.CellRangeAddressList copy()
    {
        org.apache.poi.ss.util.CellRangeAddress r5, $r6;
        java.util.List $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        org.apache.poi.ss.util.CellRangeAddressList $r0, r1;

        r1 := @this: org.apache.poi.ss.util.CellRangeAddressList;

        $r0 = new org.apache.poi.ss.util.CellRangeAddressList;

        specialinvoke $r0.<org.apache.poi.ss.util.CellRangeAddressList: void <init>()>();

        $r2 = r1.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r3 = r1.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (org.apache.poi.ss.util.CellRangeAddress) $r4;

        $r6 = virtualinvoke r5.<org.apache.poi.ss.util.CellRangeAddress: org.apache.poi.ss.util.CellRangeAddress copy()>();

        virtualinvoke $r0.<org.apache.poi.ss.util.CellRangeAddressList: void addCellRangeAddress(org.apache.poi.ss.util.CellRangeAddress)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public org.apache.poi.ss.util.CellRangeAddress[] getCellRangeAddresses()
    {
        java.util.List $r1, $r3;
        int $i0;
        org.apache.poi.ss.util.CellRangeAddressList r0;
        org.apache.poi.ss.util.CellRangeAddress[] r2;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddressList;

        $r1 = r0.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (org.apache.poi.ss.util.CellRangeAddress)[$i0];

        $r3 = r0.<org.apache.poi.ss.util.CellRangeAddressList: java.util.List _list>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        return r2;
    }
}
