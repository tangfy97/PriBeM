public final class com.adobe.xmp.impl.ISO8601Converter extends java.lang.Object
{

    private void <init>()
    {
        com.adobe.xmp.impl.ISO8601Converter r0;

        r0 := @this: com.adobe.xmp.impl.ISO8601Converter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.adobe.xmp.XMPDateTime parse(java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPDateTimeImpl $r1;
        java.lang.String r0;
        com.adobe.xmp.XMPDateTime $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = new com.adobe.xmp.impl.XMPDateTimeImpl;

        specialinvoke $r1.<com.adobe.xmp.impl.XMPDateTimeImpl: void <init>()>();

        $r2 = staticinvoke <com.adobe.xmp.impl.ISO8601Converter: com.adobe.xmp.XMPDateTime parse(java.lang.String,com.adobe.xmp.XMPDateTime)>(r0, $r1);

        return $r2;
    }

    public static com.adobe.xmp.XMPDateTime parse(java.lang.String, com.adobe.xmp.XMPDateTime) throws com.adobe.xmp.XMPException
    {
        byte b38;
        com.adobe.xmp.XMPDateTime r2;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.util.SimpleTimeZone $r26;
        com.adobe.xmp.XMPException $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r27;
        int $i0, $i2, $i4, $i5, $i6, $i16, $i17, $i25, i33, i35, $i36, i37, i39, i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74;
        char $c1, $c3, $c7, $c8, $c9, $c10, $c11, $c12, $c13, $c14, $c15, $c18, $c19, $c20, $c21, $c22, $c23, $c24, $c26, $c27, $c28, $c29, $c30, $c31, $c32, $c34;
        com.adobe.xmp.impl.ParseState $r16;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: com.adobe.xmp.XMPDateTime;

        if r0 != null goto label01;

        $r15 = new com.adobe.xmp.XMPException;

        specialinvoke $r15.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Parameter must not be null", 4);

        throw $r15;

     label01:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

        return r2;

     label02:
        $r16 = new com.adobe.xmp.impl.ParseState;

        specialinvoke $r16.<com.adobe.xmp.impl.ParseState: void <init>(java.lang.String)>(r0);

        $c1 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch(int)>(0);

        $i47 = (int) $c1;

        if $i47 != 45 goto label03;

        virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: void skip()>();

     label03:
        $i2 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid year in date string", 9999);

        i33 = $i2;

        $z0 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $c32 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i48 = (int) $c32;

        if $i48 == 45 goto label04;

        $r17 = new com.adobe.xmp.XMPException;

        specialinvoke $r17.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after year", 5);

        throw $r17;

     label04:
        $c3 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch(int)>(0);

        $i49 = (int) $c3;

        if $i49 != 45 goto label05;

        i33 = neg $i2;

     label05:
        interfaceinvoke r2.<com.adobe.xmp.XMPDateTime: void setYear(int)>(i33);

        $z1 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z1 != 0 goto label06;

        return r2;

     label06:
        virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: void skip()>();

        $i4 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid month in date string", 12);

        $z2 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z2 == 0 goto label07;

        $c31 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i50 = (int) $c31;

        if $i50 == 45 goto label07;

        $r18 = new com.adobe.xmp.XMPException;

        specialinvoke $r18.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after month", 5);

        throw $r18;

     label07:
        interfaceinvoke r2.<com.adobe.xmp.XMPDateTime: void setMonth(int)>($i4);

        $z3 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z3 != 0 goto label08;

        return r2;

     label08:
        virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: void skip()>();

        $i5 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid day in date string", 31);

        $z4 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z4 == 0 goto label09;

        $c30 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i51 = (int) $c30;

        if $i51 == 84 goto label09;

        $r19 = new com.adobe.xmp.XMPException;

        specialinvoke $r19.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after day", 5);

        throw $r19;

     label09:
        interfaceinvoke r2.<com.adobe.xmp.XMPDateTime: void setDay(int)>($i5);

        $z5 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z5 != 0 goto label10;

        return r2;

     label10:
        virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: void skip()>();

        $i6 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid hour in date string", 23);

        interfaceinvoke r2.<com.adobe.xmp.XMPDateTime: void setHour(int)>($i6);

        $z6 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z6 != 0 goto label11;

        return r2;

     label11:
        $c7 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i52 = (int) $c7;

        if $i52 != 58 goto label13;

        virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: void skip()>();

        $i25 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid minute in date string", 59);

        $z12 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z12 == 0 goto label12;

        $c26 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i53 = (int) $c26;

        if $i53 == 58 goto label12;

        $c27 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i54 = (int) $c27;

        if $i54 == 90 goto label12;

        $c28 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i55 = (int) $c28;

        if $i55 == 43 goto label12;

        $c29 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i56 = (int) $c29;

        if $i56 == 45 goto label12;

        $r20 = new com.adobe.xmp.XMPException;

        specialinvoke $r20.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after minute", 5);

        throw $r20;

     label12:
        interfaceinvoke r2.<com.adobe.xmp.XMPDateTime: void setMinute(int)>($i25);

     label13:
        $z13 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z13 != 0 goto label14;

        return r2;

     label14:
        $z7 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z7 == 0 goto label20;

        $c15 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i57 = (int) $c15;

        if $i57 != 58 goto label20;

        virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: void skip()>();

        $i16 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid whole seconds in date string", 59);

        $z10 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z10 == 0 goto label15;

        $c21 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i58 = (int) $c21;

        if $i58 == 46 goto label15;

        $c22 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i59 = (int) $c22;

        if $i59 == 90 goto label15;

        $c23 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i60 = (int) $c23;

        if $i60 == 43 goto label15;

        $c24 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i61 = (int) $c24;

        if $i61 == 45 goto label15;

        $r21 = new com.adobe.xmp.XMPException;

        specialinvoke $r21.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after whole seconds", 5);

        throw $r21;

     label15:
        interfaceinvoke r2.<com.adobe.xmp.XMPDateTime: void setSecond(int)>($i16);

        $c34 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i62 = (int) $c34;

        if $i62 != 46 goto label21;

        virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: void skip()>();

        $i17 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: int pos()>();

        i35 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid fractional seconds in date string", 999999999);

        $z11 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z11 == 0 goto label16;

        $c18 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i63 = (int) $c18;

        if $i63 == 90 goto label16;

        $c19 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i64 = (int) $c19;

        if $i64 == 43 goto label16;

        $c20 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i65 = (int) $c20;

        if $i65 == 45 goto label16;

        $r22 = new com.adobe.xmp.XMPException;

        specialinvoke $r22.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after fractional second", 5);

        throw $r22;

     label16:
        $i36 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: int pos()>();

        i37 = $i36 - $i17;

     label17:
        if i37 <= 9 goto label18;

        i35 = i35 / 10;

        $i67 = (int) -1;

        i37 = i37 + $i67;

        goto label17;

     label18:
        if i37 >= 9 goto label19;

        i35 = i35 * 10;

        i37 = i37 + 1;

        goto label18;

     label19:
        interfaceinvoke r2.<com.adobe.xmp.XMPDateTime: void setNanoSecond(int)>(i35);

        goto label21;

     label20:
        $c8 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i68 = (int) $c8;

        if $i68 == 90 goto label21;

        $c13 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i69 = (int) $c13;

        if $i69 == 43 goto label21;

        $c14 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i70 = (int) $c14;

        if $i70 == 45 goto label21;

        $r23 = new com.adobe.xmp.XMPException;

        specialinvoke $r23.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after time", 5);

        throw $r23;

     label21:
        b38 = 0;

        i39 = 0;

        i40 = 0;

        $z14 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z14 != 0 goto label22;

        return r2;

     label22:
        $c9 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i71 = (int) $c9;

        if $i71 != 90 goto label23;

        virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: void skip()>();

        goto label28;

     label23:
        $z8 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z8 == 0 goto label28;

        $c10 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i72 = (int) $c10;

        if $i72 != 43 goto label24;

        b38 = 1;

        goto label26;

     label24:
        $c11 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i73 = (int) $c11;

        if $i73 != 45 goto label25;

        b38 = -1;

        goto label26;

     label25:
        $r24 = new com.adobe.xmp.XMPException;

        specialinvoke $r24.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Time zone must begin with \'Z\', \'+\', or \'-\'", 5);

        throw $r24;

     label26:
        virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: void skip()>();

        i39 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid time zone hour in date string", 23);

        $z9 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z9 == 0 goto label28;

        $c12 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: char ch()>();

        $i74 = (int) $c12;

        if $i74 != 58 goto label27;

        virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: void skip()>();

        i40 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid time zone minute in date string", 59);

        goto label28;

     label27:
        $r25 = new com.adobe.xmp.XMPException;

        specialinvoke $r25.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after time zone hour", 5);

        throw $r25;

     label28:
        $i41 = i39 * 3600;

        $i42 = $i41 * 1000;

        $i43 = i40 * 60;

        $i44 = $i43 * 1000;

        $i45 = $i42 + $i44;

        $i46 = $i45 * b38;

        $r26 = new java.util.SimpleTimeZone;

        specialinvoke $r26.<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>($i46, "");

        interfaceinvoke r2.<com.adobe.xmp.XMPDateTime: void setTimeZone(java.util.TimeZone)>($r26);

        $z15 = virtualinvoke $r16.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z15 == 0 goto label29;

        $r27 = new com.adobe.xmp.XMPException;

        specialinvoke $r27.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, extra chars at end", 5);

        throw $r27;

     label29:
        return r2;
    }

    public static java.lang.String render(com.adobe.xmp.XMPDateTime)
    {
        java.text.DecimalFormatSymbols $r19;
        java.util.Locale $r4;
        boolean $z0, $z1, $z2;
        java.util.TimeZone $r12;
        com.adobe.xmp.XMPDateTime r1;
        long $l1, $l4, $l7, $l9, $l11, $l15, $l21, $l22;
        java.util.Calendar $r11;
        java.lang.StringBuffer $r18;
        int $i0, $i2, $i3, $i5, $i6, $i8, $i10, $i12, $i13, $i14, $i16, i17, $i18, $i19, $i20, $i23, $i25;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r17;
        double $d0, $d1, $d2, $d3;
        java.text.DecimalFormat $r20;

        r1 := @parameter0: com.adobe.xmp.XMPDateTime;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $z0 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: boolean hasDate()>();

        if $z0 == 0 goto label6;

        $r20 = new java.text.DecimalFormat;

        $r19 = new java.text.DecimalFormatSymbols;

        $r4 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke $r19.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>($r4);

        specialinvoke $r20.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>("0000", $r19);

        $i0 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: int getYear()>();

        $l1 = (long) $i0;

        $r5 = virtualinvoke $r20.<java.text.DecimalFormat: java.lang.String format(long)>($l1);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $i2 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: int getMonth()>();

        if $i2 != 0 goto label1;

        $r16 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;

     label1:
        virtualinvoke $r20.<java.text.DecimalFormat: void applyPattern(java.lang.String)>("\'-\'00");

        $i3 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: int getMonth()>();

        $l4 = (long) $i3;

        $r6 = virtualinvoke $r20.<java.text.DecimalFormat: java.lang.String format(long)>($l4);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $i5 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: int getDay()>();

        if $i5 != 0 goto label2;

        $r15 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r15;

     label2:
        $i6 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: int getDay()>();

        $l7 = (long) $i6;

        $r7 = virtualinvoke $r20.<java.text.DecimalFormat: java.lang.String format(long)>($l7);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $z1 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: boolean hasTime()>();

        if $z1 == 0 goto label6;

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(84);

        virtualinvoke $r20.<java.text.DecimalFormat: void applyPattern(java.lang.String)>("00");

        $i8 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: int getHour()>();

        $l9 = (long) $i8;

        $r8 = virtualinvoke $r20.<java.text.DecimalFormat: java.lang.String format(long)>($l9);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $i10 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: int getMinute()>();

        $l11 = (long) $i10;

        $r9 = virtualinvoke $r20.<java.text.DecimalFormat: java.lang.String format(long)>($l11);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $i12 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: int getSecond()>();

        if $i12 != 0 goto label3;

        $i23 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: int getNanoSecond()>();

        if $i23 == 0 goto label4;

     label3:
        $i13 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: int getSecond()>();

        $d0 = (double) $i13;

        $i14 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: int getNanoSecond()>();

        $d1 = (double) $i14;

        $d2 = $d1 / 1.0E9;

        $d3 = $d0 + $d2;

        virtualinvoke $r20.<java.text.DecimalFormat: void applyPattern(java.lang.String)>(":00.#########");

        $r10 = virtualinvoke $r20.<java.text.DecimalFormat: java.lang.String format(double)>($d3);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

     label4:
        $z2 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: boolean hasTimeZone()>();

        if $z2 == 0 goto label6;

        $r11 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: java.util.Calendar getCalendar()>();

        $l15 = virtualinvoke $r11.<java.util.Calendar: long getTimeInMillis()>();

        $r12 = interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: java.util.TimeZone getTimeZone()>();

        $i16 = virtualinvoke $r12.<java.util.TimeZone: int getOffset(long)>($l15);

        if $i16 != 0 goto label5;

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(90);

        goto label6;

     label5:
        i17 = $i16 / 3600000;

        $i18 = $i16 % 3600000;

        $i25 = (int) 60000;

        $i19 = $i18 / $i25;

        $i20 = staticinvoke <java.lang.Math: int abs(int)>($i19);

        virtualinvoke $r20.<java.text.DecimalFormat: void applyPattern(java.lang.String)>("+00;-00");

        $l21 = (long) i17;

        $r13 = virtualinvoke $r20.<java.text.DecimalFormat: java.lang.String format(long)>($l21);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        virtualinvoke $r20.<java.text.DecimalFormat: void applyPattern(java.lang.String)>(":00");

        $l22 = (long) $i20;

        $r14 = virtualinvoke $r20.<java.text.DecimalFormat: java.lang.String format(long)>($l22);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

     label6:
        $r17 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r17;
    }
}
