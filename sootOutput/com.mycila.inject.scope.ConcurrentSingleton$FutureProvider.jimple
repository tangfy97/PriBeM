final class com.mycila.inject.scope.ConcurrentSingleton$FutureProvider extends java.util.concurrent.FutureTask implements com.google.inject.Provider
{
    private final com.google.inject.Key key;

    private void <init>(com.google.inject.Key, com.google.inject.Provider)
    {
        com.google.inject.Provider r2;
        com.mycila.inject.scope.ConcurrentSingleton$FutureProvider r0;
        com.google.inject.Key r3;
        com.mycila.inject.scope.ConcurrentSingleton$FutureProvider$1 $r1;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton$FutureProvider;

        r3 := @parameter0: com.google.inject.Key;

        r2 := @parameter1: com.google.inject.Provider;

        $r1 = new com.mycila.inject.scope.ConcurrentSingleton$FutureProvider$1;

        specialinvoke $r1.<com.mycila.inject.scope.ConcurrentSingleton$FutureProvider$1: void <init>(com.google.inject.Provider)>(r2);

        specialinvoke r0.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>($r1);

        r0.<com.mycila.inject.scope.ConcurrentSingleton$FutureProvider: com.google.inject.Key key> = r3;

        return;
    }

    public java.lang.Object get()
    {
        java.lang.RuntimeException $r4, $r6;
        java.util.concurrent.ExecutionException $r5;
        com.mycila.inject.scope.ConcurrentSingleton$FutureProvider r0;
        java.lang.InterruptedException $r2;
        java.lang.Thread $r3;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton$FutureProvider;

     label1:
        $z0 = virtualinvoke r0.<com.mycila.inject.scope.ConcurrentSingleton$FutureProvider: boolean isDone()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<com.mycila.inject.scope.ConcurrentSingleton$FutureProvider: void run()>();

     label2:
        $r1 = specialinvoke r0.<java.util.concurrent.FutureTask: java.lang.Object get()>();

     label3:
        return $r1;

     label4:
        $r5 := @caughtexception;

        $r6 = staticinvoke <com.mycila.inject.MycilaGuiceException: java.lang.RuntimeException runtime(java.lang.Throwable)>($r5);

        throw $r6;

     label5:
        $r2 := @caughtexception;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

        $r4 = staticinvoke <com.mycila.inject.MycilaGuiceException: java.lang.RuntimeException runtime(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.util.concurrent.ExecutionException from label1 to label3 with label4;
        catch java.lang.InterruptedException from label1 to label3 with label5;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.scope.ConcurrentSingleton$FutureProvider r2;
        com.google.inject.Key $r3;
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.String $r6;

        r2 := @this: com.mycila.inject.scope.ConcurrentSingleton$FutureProvider;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FutureProvider[");

        $r3 = r2.<com.mycila.inject.scope.ConcurrentSingleton$FutureProvider: com.google.inject.Key key>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    void <init>(com.google.inject.Key, com.google.inject.Provider, com.mycila.inject.scope.ConcurrentSingleton$1)
    {
        com.google.inject.Provider r2;
        com.mycila.inject.scope.ConcurrentSingleton$FutureProvider r0;
        com.google.inject.Key r1;
        com.mycila.inject.scope.ConcurrentSingleton$1 r3;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton$FutureProvider;

        r1 := @parameter0: com.google.inject.Key;

        r2 := @parameter1: com.google.inject.Provider;

        r3 := @parameter2: com.mycila.inject.scope.ConcurrentSingleton$1;

        specialinvoke r0.<com.mycila.inject.scope.ConcurrentSingleton$FutureProvider: void <init>(com.google.inject.Key,com.google.inject.Provider)>(r1, r2);

        return;
    }
}
