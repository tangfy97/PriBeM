final class com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference extends java.lang.ref.SoftReference implements com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference
{
    final com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry entry;

    void <init>(java.lang.ref.ReferenceQueue, java.lang.Object, com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r3;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference r0;
        java.lang.ref.ReferenceQueue r2;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference;

        r2 := @parameter0: java.lang.ref.ReferenceQueue;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        specialinvoke r0.<java.lang.ref.SoftReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, r2);

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry entry> = r3;

        return;
    }

    public com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getEntry()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry $r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry entry>;

        return $r1;
    }

    public void notifyNewValue(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference: void clear()>();

        return;
    }

    public com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference copyFor(java.lang.ref.ReferenceQueue, com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r4;
        java.lang.Object $r3;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference $r0, r2;
        java.lang.ref.ReferenceQueue r1;

        r2 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference;

        r1 := @parameter0: java.lang.ref.ReferenceQueue;

        r4 := @parameter1: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        $r0 = new com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference;

        $r3 = virtualinvoke r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference: java.lang.Object get()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference: void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r1, $r3, r4);

        return $r0;
    }

    public boolean isComputingReference()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference;

        return 0;
    }

    public java.lang.Object waitForValue()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftValueReference: java.lang.Object get()>();

        return $r1;
    }
}
