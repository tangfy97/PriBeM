class org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain extends java.lang.Object implements org.waveprotocol.wave.federation.WaveletFederationListener
{
    private static final java.util.logging.Logger LOG;
    private static final int XMPP_LISTENER_TIMEOUT;
    private final java.lang.String remoteDomain;
    private final org.waveprotocol.wave.federation.xmpp.XmppManager manager;
    private final java.lang.String jid;
    private final org.waveprotocol.wave.federation.xmpp.XmppDisco disco;

    public void <init>(java.lang.String, org.waveprotocol.wave.federation.xmpp.XmppManager, org.waveprotocol.wave.federation.xmpp.XmppDisco, java.lang.String)
    {
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain r0;
        org.waveprotocol.wave.federation.xmpp.XmppManager r2;
        java.lang.String r1, r3;
        org.waveprotocol.wave.federation.xmpp.XmppDisco r4;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r4 := @parameter2: org.waveprotocol.wave.federation.xmpp.XmppDisco;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: java.lang.String remoteDomain> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: org.waveprotocol.wave.federation.xmpp.XmppManager manager> = r2;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: java.lang.String jid> = r3;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: org.waveprotocol.wave.federation.xmpp.XmppDisco disco> = r4;

        return;
    }

    public void waveletCommitUpdate(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback r3;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain r0;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r3 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback;

        virtualinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: void waveletUpdate(org.waveprotocol.wave.model.id.WaveletName,java.util.List,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)>(r1, null, r2, r3);

        return;
    }

    public void waveletDeltaUpdate(org.waveprotocol.wave.model.id.WaveletName, java.util.List, org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback r3;
        java.util.List r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback;

        virtualinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: void waveletUpdate(org.waveprotocol.wave.model.id.WaveletName,java.util.List,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)>(r1, r2, null, r3);

        return;
    }

    public void waveletUpdate(org.waveprotocol.wave.model.id.WaveletName, java.util.List, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)
    {
        org.waveprotocol.wave.model.id.WaveletName r4;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain r2;
        java.lang.IllegalArgumentException $r8;
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback r5;
        java.util.List r0;
        java.lang.StringBuilder $r9, $r10, $r11;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1 $r3;
        org.waveprotocol.wave.federation.xmpp.XmppDisco $r6;
        java.lang.String $r7, $r12;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r1;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain;

        r4 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r0 := @parameter1: java.util.List;

        r1 := @parameter2: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r5 := @parameter3: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        if r1 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must send at least one delta, or a last committed version notice, for the target wavelet: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label2:
        $r6 = r2.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: org.waveprotocol.wave.federation.xmpp.XmppDisco disco>;

        $r7 = r2.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: java.lang.String remoteDomain>;

        $r3 = new org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1;

        specialinvoke $r3.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain,org.waveprotocol.wave.model.id.WaveletName,java.util.List,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)>(r2, r4, r0, r1, r5);

        virtualinvoke $r6.<org.waveprotocol.wave.federation.xmpp.XmppDisco: void discoverRemoteJid(java.lang.String,org.waveprotocol.wave.federation.xmpp.SuccessFailCallback)>($r7, $r3);

        return;
    }

    private void internalWaveletUpdate(org.waveprotocol.wave.model.id.WaveletName, java.util.List, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback, java.lang.String)
    {
        byte[] $r30;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain r2;
        org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException $r32;
        org.xmpp.packet.Message $r0;
        boolean $z0;
        org.waveprotocol.wave.model.id.WaveletName r6;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r37;
        com.google.protobuf.ByteString $r22, r26;
        org.xmpp.packet.Message$Type $r1;
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback r15;
        java.util.List r12;
        org.waveprotocol.wave.federation.xmpp.XmppManager $r16;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$2 $r14;
        java.lang.StringBuilder $r33, $r34, $r35;
        long $l0;
        org.waveprotocol.wave.model.id.IdURIEncoderDecoder $r7;
        java.lang.String $r3, r4, $r5, $r8, $r20, $r23, $r31, $r36;
        java.util.Iterator $r24;
        org.dom4j.Element $r9, $r10, $r11, $r17, $r18, $r19, $r21, $r27, $r28, $r29;
        java.lang.Object $r25;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r13;

        r2 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain;

        r6 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r12 := @parameter1: java.util.List;

        r13 := @parameter2: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r15 := @parameter3: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback;

        r4 := @parameter4: java.lang.String;

        $r0 = new org.xmpp.packet.Message;

        specialinvoke $r0.<org.xmpp.packet.Message: void <init>()>();

        $r1 = <org.xmpp.packet.Message$Type: org.xmpp.packet.Message$Type normal>;

        virtualinvoke $r0.<org.xmpp.packet.Message: void setType(org.xmpp.packet.Message$Type)>($r1);

        $r3 = r2.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: java.lang.String jid>;

        virtualinvoke $r0.<org.xmpp.packet.Message: void setFrom(java.lang.String)>($r3);

        virtualinvoke $r0.<org.xmpp.packet.Message: void setTo(java.lang.String)>(r4);

        $r5 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.lang.String generateUniqueId()>();

        virtualinvoke $r0.<org.xmpp.packet.Message: void setID(java.lang.String)>($r5);

        virtualinvoke $r0.<org.xmpp.packet.Message: org.dom4j.Element addChildElement(java.lang.String,java.lang.String)>("request", "urn:xmpp:receipts");

     label1:
        $r7 = <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.waveprotocol.wave.model.id.IdURIEncoderDecoder waveletNameCodec>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.id.IdURIEncoderDecoder: java.lang.String waveletNameToURI(org.waveprotocol.wave.model.id.WaveletName)>(r6);

     label2:
        goto label4;

     label3:
        $r32 := @caughtexception;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad wavelet name ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r37 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r36);

        interfaceinvoke r15.<org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r37);

        return;

     label4:
        $r9 = virtualinvoke $r0.<org.xmpp.packet.Message: org.dom4j.Element addChildElement(java.lang.String,java.lang.String)>("event", "http://jabber.org/protocol/pubsub#event");

        $r10 = interfaceinvoke $r9.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("items");

        $r11 = interfaceinvoke $r10.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("item");

        if r12 == null goto label6;

        $r24 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r26 = (com.google.protobuf.ByteString) $r25;

        $r27 = interfaceinvoke $r11.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>("wavelet-update", "http://waveprotocol.org/protocol/0.2/waveserver");

        $r28 = interfaceinvoke $r27.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("wavelet-name", $r8);

        $r29 = interfaceinvoke $r28.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("applied-delta");

        $r30 = virtualinvoke r26.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        $r31 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: java.lang.String encode(byte[])>($r30);

        interfaceinvoke $r29.<org.dom4j.Element: org.dom4j.Element addCDATA(java.lang.String)>($r31);

        goto label5;

     label6:
        if r13 == null goto label7;

        $r17 = interfaceinvoke $r11.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>("wavelet-update", "http://waveprotocol.org/protocol/0.2/waveserver");

        $r18 = interfaceinvoke $r17.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("wavelet-name", $r8);

        $r19 = interfaceinvoke $r18.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("commit-notice");

        $l0 = virtualinvoke r13.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: long getVersion()>();

        $r20 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r21 = interfaceinvoke $r19.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("version", $r20);

        $r22 = virtualinvoke r13.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: com.google.protobuf.ByteString getHistoryHash()>();

        $r23 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: java.lang.String encode(com.google.protobuf.ByteString)>($r22);

        interfaceinvoke $r21.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("history-hash", $r23);

     label7:
        $r16 = r2.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: org.waveprotocol.wave.federation.xmpp.XmppManager manager>;

        $r14 = new org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$2;

        specialinvoke $r14.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$2: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain,org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)>(r2, r15);

        virtualinvoke $r16.<org.waveprotocol.wave.federation.xmpp.XmppManager: void send(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.xmpp.PacketCallback,int)>($r0, $r14, 30);

        return;

        catch org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException from label1 to label2 with label3;
    }

    static void access$000(org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain, org.waveprotocol.wave.model.id.WaveletName, java.util.List, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback, java.lang.String)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback r4;
        java.util.List r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain r0;
        java.lang.String r5;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r3;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r4 := @parameter4: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback;

        r5 := @parameter5: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: void internalWaveletUpdate(org.waveprotocol.wave.model.id.WaveletName,java.util.List,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback,java.lang.String)>(r1, r2, r3, r4, r5);

        return;
    }

    static java.util.logging.Logger access$100()
    {
        java.util.logging.Logger $r0;

        $r0 = <org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: java.util.logging.Logger LOG>;

        return $r0;
    }

    static java.lang.String access$200(org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain)
    {
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain r0;
        java.lang.String $r1;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: java.lang.String remoteDomain>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        <org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: int XMPP_LISTENER_TIMEOUT> = 30;

        $r0 = class "Lorg/waveprotocol/wave/federation/xmpp/XmppFederationHostForDomain;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
