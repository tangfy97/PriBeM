class org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1 extends java.lang.Thread
{
    private final boolean val$raw;
    private final java.io.InputStream val$is;
    private final org.apache.batik.ext.awt.image.renderable.DeferRable val$dr;
    private final java.lang.String val$errCode;
    private final java.lang.Object[] val$errParam;
    private final org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry this$0;

    void <init>(org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry, boolean, java.io.InputStream, org.apache.batik.ext.awt.image.renderable.DeferRable, java.lang.String, java.lang.Object[])
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r3;
        org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry r1;
        java.lang.Object[] r5;
        org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1 r0;
        java.lang.String r4;
        boolean z0;
        java.io.InputStream r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.io.InputStream;

        r3 := @parameter3: org.apache.batik.ext.awt.image.renderable.DeferRable;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.Object[];

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry this$0> = r1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: boolean val$raw> = z0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: java.io.InputStream val$is> = r2;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: org.apache.batik.ext.awt.image.renderable.DeferRable val$dr> = r3;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: java.lang.String val$errCode> = r4;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: java.lang.Object[] val$errParam> = r5;

        return;
    }

    public void run()
    {
        org.apache.batik.ext.awt.image.rendered.FormatRed $r7;
        java.awt.geom.Rectangle2D$Double $r4;
        boolean $z0, $z1;
        org.apache.batik.ext.awt.image.renderable.DeferRable $r5, $r24, $r30;
        java.awt.image.BufferedImage $r11;
        org.apache.batik.ext.awt.image.renderable.RedRable $r13;
        org.apache.batik.ext.awt.image.renderable.Filter $r23, r29;
        java.lang.ThreadDeath $r19;
        org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry $r18, $r22, $r28;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r12;
        java.lang.Throwable $r15;
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam $r0;
        java.lang.Object[] $r16, $r20, $r26;
        org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1 r1;
        int $i0, $i1;
        java.awt.image.Raster $r9;
        org.apache.batik.ext.awt.image.codec.png.PNGRed $r2;
        java.lang.String $r17, $r21, $r27;
        double $d0, $d1;
        java.io.IOException $r25;
        java.awt.image.ColorModel $r8, $r10;
        java.awt.image.WritableRaster $r14;
        org.apache.batik.ext.awt.image.rendered.Any2sRGBRed $r6;
        java.io.InputStream $r3;

        r1 := @this: org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1;

     label1:
        $r0 = new org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: void <init>()>();

        virtualinvoke $r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: void setExpandPalette(boolean)>(1);

        $z0 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: boolean val$raw>;

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: void setPerformGammaCorrection(boolean)>(0);

        goto label3;

     label2:
        virtualinvoke $r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: void setPerformGammaCorrection(boolean)>(1);

        virtualinvoke $r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: void setDisplayExponent(float)>(2.2F);

     label3:
        $r2 = new org.apache.batik.ext.awt.image.codec.png.PNGRed;

        $r3 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: java.io.InputStream val$is>;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.PNGRed: void <init>(java.io.InputStream,org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam)>($r3, $r0);

        $r5 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: org.apache.batik.ext.awt.image.renderable.DeferRable val$dr>;

        $r4 = new java.awt.geom.Rectangle2D$Double;

        $i0 = interfaceinvoke $r2.<java.awt.image.RenderedImage: int getWidth()>();

        $d0 = (double) $i0;

        $i1 = interfaceinvoke $r2.<java.awt.image.RenderedImage: int getHeight()>();

        $d1 = (double) $i1;

        specialinvoke $r4.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $d0, $d1);

        virtualinvoke $r5.<org.apache.batik.ext.awt.image.renderable.DeferRable: void setBounds(java.awt.geom.Rectangle2D)>($r4);

        $r6 = new org.apache.batik.ext.awt.image.rendered.Any2sRGBRed;

        specialinvoke $r6.<org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)>($r2);

        $r7 = new org.apache.batik.ext.awt.image.rendered.FormatRed;

        $r8 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Unpre>;

        specialinvoke $r7.<org.apache.batik.ext.awt.image.rendered.FormatRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.image.ColorModel)>($r6, $r8);

        $r9 = interfaceinvoke $r7.<java.awt.image.RenderedImage: java.awt.image.Raster getData()>();

        $r14 = (java.awt.image.WritableRaster) $r9;

        $r10 = interfaceinvoke $r7.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r11 = new java.awt.image.BufferedImage;

        $z1 = virtualinvoke $r10.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r11.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r10, $r14, $z1, null);

        $r12 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r11);

        $r13 = new org.apache.batik.ext.awt.image.renderable.RedRable;

        specialinvoke $r13.<org.apache.batik.ext.awt.image.renderable.RedRable: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)>($r12);

        r29 = $r13;

     label4:
        goto label8;

     label5:
        $r25 := @caughtexception;

        $r28 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry this$0>;

        $r27 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: java.lang.String val$errCode>;

        $r26 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: java.lang.Object[] val$errParam>;

        r29 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object,java.lang.String,java.lang.Object[])>($r28, $r27, $r26);

        goto label8;

     label6:
        $r19 := @caughtexception;

        $r22 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry this$0>;

        $r21 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: java.lang.String val$errCode>;

        $r20 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: java.lang.Object[] val$errParam>;

        $r23 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object,java.lang.String,java.lang.Object[])>($r22, $r21, $r20);

        $r24 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: org.apache.batik.ext.awt.image.renderable.DeferRable val$dr>;

        virtualinvoke $r24.<org.apache.batik.ext.awt.image.renderable.DeferRable: void setSource(org.apache.batik.ext.awt.image.renderable.Filter)>($r23);

        throw $r19;

     label7:
        $r15 := @caughtexception;

        $r18 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry this$0>;

        $r17 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: java.lang.String val$errCode>;

        $r16 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: java.lang.Object[] val$errParam>;

        r29 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object,java.lang.String,java.lang.Object[])>($r18, $r17, $r16);

     label8:
        $r30 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGRegistryEntry$1: org.apache.batik.ext.awt.image.renderable.DeferRable val$dr>;

        virtualinvoke $r30.<org.apache.batik.ext.awt.image.renderable.DeferRable: void setSource(org.apache.batik.ext.awt.image.renderable.Filter)>(r29);

        return;

        catch java.io.IOException from label1 to label4 with label5;
        catch java.lang.ThreadDeath from label1 to label4 with label6;
        catch java.lang.Throwable from label1 to label4 with label7;
    }
}
