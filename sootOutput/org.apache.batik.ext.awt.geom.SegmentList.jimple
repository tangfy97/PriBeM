public class org.apache.batik.ext.awt.geom.SegmentList extends java.lang.Object
{
    java.util.List segments;

    public void <init>()
    {
        org.apache.batik.ext.awt.geom.SegmentList r0;
        java.util.LinkedList $r1;

        r0 := @this: org.apache.batik.ext.awt.geom.SegmentList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.ext.awt.geom.SegmentList: java.util.List segments> = $r1;

        return;
    }

    public void <init>(java.awt.Shape)
    {
        org.apache.batik.ext.awt.geom.Linear $r5, $r17;
        java.awt.geom.PathIterator $r3;
        boolean $z0;
        java.awt.Shape r2;
        org.apache.batik.ext.awt.geom.SegmentList r0;
        java.util.List $r6, $r11, $r15, $r18;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        org.apache.batik.ext.awt.geom.Quadradic $r14;
        float[] r4;
        java.awt.geom.Point2D$Double $r7, $r8, $r9, $r12, $r13, $r16, $r19, r20, r21;
        int $i0;
        java.util.LinkedList $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        org.apache.batik.ext.awt.geom.Cubic $r10;

        r0 := @this: org.apache.batik.ext.awt.geom.SegmentList;

        r2 := @parameter0: java.awt.Shape;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.ext.awt.geom.SegmentList: java.util.List segments> = $r1;

        $r3 = interfaceinvoke r2.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        r4 = newarray (float)[6];

        r20 = null;

        r21 = null;

        goto label8;

     label1:
        $i0 = interfaceinvoke $r3.<java.awt.geom.PathIterator: int currentSegment(float[])>(r4);

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label7;
        };

     label2:
        $r19 = new java.awt.geom.Point2D$Double;

        $f12 = r4[0];

        $d13 = (double) $f12;

        $f13 = r4[1];

        $d12 = (double) $f13;

        specialinvoke $r19.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d13, $d12);

        r20 = $r19;

        r21 = $r19;

        goto label7;

     label3:
        $r16 = new java.awt.geom.Point2D$Double;

        $f10 = r4[0];

        $d11 = (double) $f10;

        $f11 = r4[1];

        $d10 = (double) $f11;

        specialinvoke $r16.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d11, $d10);

        $r18 = r0.<org.apache.batik.ext.awt.geom.SegmentList: java.util.List segments>;

        $r17 = new org.apache.batik.ext.awt.geom.Linear;

        specialinvoke $r17.<org.apache.batik.ext.awt.geom.Linear: void <init>(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)>(r20, $r16);

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r17);

        r20 = $r16;

        goto label7;

     label4:
        $r12 = new java.awt.geom.Point2D$Double;

        $f6 = r4[0];

        $d7 = (double) $f6;

        $f7 = r4[1];

        $d6 = (double) $f7;

        specialinvoke $r12.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d7, $d6);

        $r13 = new java.awt.geom.Point2D$Double;

        $f8 = r4[2];

        $d9 = (double) $f8;

        $f9 = r4[3];

        $d8 = (double) $f9;

        specialinvoke $r13.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d9, $d8);

        $r15 = r0.<org.apache.batik.ext.awt.geom.SegmentList: java.util.List segments>;

        $r14 = new org.apache.batik.ext.awt.geom.Quadradic;

        specialinvoke $r14.<org.apache.batik.ext.awt.geom.Quadradic: void <init>(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)>(r20, $r12, $r13);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r14);

        r20 = $r13;

        goto label7;

     label5:
        $r7 = new java.awt.geom.Point2D$Double;

        $f0 = r4[0];

        $d1 = (double) $f0;

        $f1 = r4[1];

        $d0 = (double) $f1;

        specialinvoke $r7.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d1, $d0);

        $r8 = new java.awt.geom.Point2D$Double;

        $f2 = r4[2];

        $d3 = (double) $f2;

        $f3 = r4[3];

        $d2 = (double) $f3;

        specialinvoke $r8.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d3, $d2);

        $r9 = new java.awt.geom.Point2D$Double;

        $f4 = r4[4];

        $d5 = (double) $f4;

        $f5 = r4[5];

        $d4 = (double) $f5;

        specialinvoke $r9.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d5, $d4);

        $r11 = r0.<org.apache.batik.ext.awt.geom.SegmentList: java.util.List segments>;

        $r10 = new org.apache.batik.ext.awt.geom.Cubic;

        specialinvoke $r10.<org.apache.batik.ext.awt.geom.Cubic: void <init>(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)>(r20, $r7, $r8, $r9);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r10);

        r20 = $r9;

        goto label7;

     label6:
        $r6 = r0.<org.apache.batik.ext.awt.geom.SegmentList: java.util.List segments>;

        $r5 = new org.apache.batik.ext.awt.geom.Linear;

        specialinvoke $r5.<org.apache.batik.ext.awt.geom.Linear: void <init>(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)>(r20, r21);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        r20 = r21;

     label7:
        interfaceinvoke $r3.<java.awt.geom.PathIterator: void next()>();

     label8:
        $z0 = interfaceinvoke $r3.<java.awt.geom.PathIterator: boolean isDone()>();

        if $z0 == 0 goto label1;

        return;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        java.util.Iterator $r1;
        java.awt.geom.Rectangle2D $r4, r6, $r9;
        org.apache.batik.ext.awt.geom.SegmentList r0;
        org.apache.batik.ext.awt.geom.Segment $r3, r8;
        java.lang.Object $r2, $r5, $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.ext.awt.geom.SegmentList;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.SegmentList: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (org.apache.batik.ext.awt.geom.Segment) $r2;

        $r4 = interfaceinvoke $r3.<org.apache.batik.ext.awt.geom.Segment: java.awt.geom.Rectangle2D getBounds2D()>();

        $r5 = virtualinvoke $r4.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r6 = (java.awt.geom.Rectangle2D) $r5;

        goto label3;

     label2:
        $r7 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.batik.ext.awt.geom.Segment) $r7;

        $r9 = interfaceinvoke r8.<org.apache.batik.ext.awt.geom.Segment: java.awt.geom.Rectangle2D getBounds2D()>();

        staticinvoke <java.awt.geom.Rectangle2D: void union(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r9, r6, r6);

     label3:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        return r6;
    }

    public void add(org.apache.batik.ext.awt.geom.Segment)
    {
        org.apache.batik.ext.awt.geom.SegmentList r0;
        java.util.List $r2;
        org.apache.batik.ext.awt.geom.Segment r1;

        r0 := @this: org.apache.batik.ext.awt.geom.SegmentList;

        r1 := @parameter0: org.apache.batik.ext.awt.geom.Segment;

        $r2 = r0.<org.apache.batik.ext.awt.geom.SegmentList: java.util.List segments>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.Iterator iterator()
    {
        org.apache.batik.ext.awt.geom.SegmentList r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.batik.ext.awt.geom.SegmentList;

        $r1 = r0.<org.apache.batik.ext.awt.geom.SegmentList: java.util.List segments>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public int size()
    {
        int $i0;
        org.apache.batik.ext.awt.geom.SegmentList r0;
        java.util.List $r1;

        r0 := @this: org.apache.batik.ext.awt.geom.SegmentList;

        $r1 = r0.<org.apache.batik.ext.awt.geom.SegmentList: java.util.List segments>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public org.apache.batik.ext.awt.geom.SegmentList$SplitResults split(double)
    {
        org.apache.batik.ext.awt.geom.Segment[] $r8, $r10;
        java.awt.geom.Rectangle2D $r12;
        org.apache.batik.ext.awt.geom.Segment$SplitResults $r7;
        byte $b2, $b3, $b4;
        org.apache.batik.ext.awt.geom.SegmentList$SplitResults $r16;
        org.apache.batik.ext.awt.geom.Segment r6, $r9, $r11;
        int $i0, $i1, i5, i6, $i7;
        double d0, $d1, $d2, $d3;
        boolean $z0;
        java.util.Iterator $r2;
        org.apache.batik.ext.awt.geom.SegmentList r0, $r14, $r15;
        java.util.List $r1;
        java.lang.Object $r5;

        r0 := @this: org.apache.batik.ext.awt.geom.SegmentList;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.batik.ext.awt.geom.SegmentList: java.util.List segments>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $r14 = new org.apache.batik.ext.awt.geom.SegmentList;

        specialinvoke $r14.<org.apache.batik.ext.awt.geom.SegmentList: void <init>()>();

        $r15 = new org.apache.batik.ext.awt.geom.SegmentList;

        specialinvoke $r15.<org.apache.batik.ext.awt.geom.SegmentList: void <init>()>();

        goto label9;

     label1:
        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.batik.ext.awt.geom.Segment) $r5;

        $r7 = interfaceinvoke r6.<org.apache.batik.ext.awt.geom.Segment: org.apache.batik.ext.awt.geom.Segment$SplitResults split(double)>(d0);

        if $r7 != null goto label4;

        $r12 = interfaceinvoke r6.<org.apache.batik.ext.awt.geom.Segment: java.awt.geom.Rectangle2D getBounds2D()>();

        $d1 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getY()>();

        $b2 = $d1 cmpl d0;

        $i7 = (int) $b2;

        if $i7 <= 0 goto label2;

        virtualinvoke $r15.<org.apache.batik.ext.awt.geom.SegmentList: void add(org.apache.batik.ext.awt.geom.Segment)>(r6);

        goto label9;

     label2:
        $d2 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getY()>();

        $b3 = $d2 cmpl d0;

        if $b3 != 0 goto label3;

        $d3 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getHeight()>();

        $b4 = $d3 cmpl 0.0;

        if $b4 == 0 goto label9;

        virtualinvoke $r15.<org.apache.batik.ext.awt.geom.SegmentList: void add(org.apache.batik.ext.awt.geom.Segment)>(r6);

        goto label9;

     label3:
        virtualinvoke $r14.<org.apache.batik.ext.awt.geom.SegmentList: void add(org.apache.batik.ext.awt.geom.Segment)>(r6);

        goto label9;

     label4:
        $r8 = virtualinvoke $r7.<org.apache.batik.ext.awt.geom.Segment$SplitResults: org.apache.batik.ext.awt.geom.Segment[] getAbove()>();

        i5 = 0;

        goto label6;

     label5:
        $r9 = $r8[i5];

        virtualinvoke $r14.<org.apache.batik.ext.awt.geom.SegmentList: void add(org.apache.batik.ext.awt.geom.Segment)>($r9);

        i5 = i5 + 1;

     label6:
        $i0 = lengthof $r8;

        if i5 < $i0 goto label5;

        $r10 = virtualinvoke $r7.<org.apache.batik.ext.awt.geom.Segment$SplitResults: org.apache.batik.ext.awt.geom.Segment[] getBelow()>();

        i6 = 0;

        goto label8;

     label7:
        $r11 = $r10[i6];

        virtualinvoke $r15.<org.apache.batik.ext.awt.geom.SegmentList: void add(org.apache.batik.ext.awt.geom.Segment)>($r11);

        i6 = i6 + 1;

     label8:
        $i1 = lengthof $r10;

        if i6 < $i1 goto label7;

     label9:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r16 = new org.apache.batik.ext.awt.geom.SegmentList$SplitResults;

        specialinvoke $r16.<org.apache.batik.ext.awt.geom.SegmentList$SplitResults: void <init>(org.apache.batik.ext.awt.geom.SegmentList,org.apache.batik.ext.awt.geom.SegmentList)>($r14, $r15);

        return $r16;
    }
}
