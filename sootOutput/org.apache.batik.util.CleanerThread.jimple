public class org.apache.batik.util.CleanerThread extends java.lang.Thread
{
    static volatile java.lang.ref.ReferenceQueue queue;
    static org.apache.batik.util.CleanerThread thread;
    static java.lang.Class class$org$apache$batik$util$CleanerThread;

    public static java.lang.ref.ReferenceQueue getReferenceQueue()
    {
        java.lang.Throwable $r6;
        org.apache.batik.util.CleanerThread $r5;
        java.lang.ref.ReferenceQueue $r0, $r1, $r4;
        java.lang.Class $r2, r3, $r7;

        $r0 = <org.apache.batik.util.CleanerThread: java.lang.ref.ReferenceQueue queue>;

        if $r0 != null goto label5;

        $r2 = <org.apache.batik.util.CleanerThread: java.lang.Class class$org$apache$batik$util$CleanerThread>;

        if $r2 != null goto label1;

        $r7 = staticinvoke <org.apache.batik.util.CleanerThread: java.lang.Class class$(java.lang.String)>("org.apache.batik.util.CleanerThread");

        <org.apache.batik.util.CleanerThread: java.lang.Class class$org$apache$batik$util$CleanerThread> = $r7;

        goto label2;

     label1:
        $r7 = <org.apache.batik.util.CleanerThread: java.lang.Class class$org$apache$batik$util$CleanerThread>;

     label2:
        r3 = $r7;

        entermonitor $r7;

     label3:
        $r4 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r4.<java.lang.ref.ReferenceQueue: void <init>()>();

        <org.apache.batik.util.CleanerThread: java.lang.ref.ReferenceQueue queue> = $r4;

        $r5 = new org.apache.batik.util.CleanerThread;

        specialinvoke $r5.<org.apache.batik.util.CleanerThread: void <init>()>();

        <org.apache.batik.util.CleanerThread: org.apache.batik.util.CleanerThread thread> = $r5;

        exitmonitor $r7;

        goto label5;

     label4:
        $r6 := @caughtexception;

        exitmonitor r3;

        throw $r6;

     label5:
        $r1 = <org.apache.batik.util.CleanerThread: java.lang.ref.ReferenceQueue queue>;

        return $r1;

        catch java.lang.Throwable from label3 to label4 with label4;
    }

    protected void <init>()
    {
        org.apache.batik.util.CleanerThread r0;

        r0 := @this: org.apache.batik.util.CleanerThread;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>("Batik CleanerThread");

        virtualinvoke r0.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke r0.<java.lang.Thread: void start()>();

        return;
    }

    public void run()
    {
        java.lang.Throwable $r0;
        org.apache.batik.util.CleanerThread r3;
        java.lang.ref.ReferenceQueue $r4;
        java.lang.ThreadDeath $r1;
        java.lang.ref.Reference $r5;
        java.lang.InterruptedException $r2;
        org.apache.batik.util.CleanerThread$ReferenceCleared r6;
        boolean $z0;

        r3 := @this: org.apache.batik.util.CleanerThread;

        goto label1;

     label1:
        $r4 = <org.apache.batik.util.CleanerThread: java.lang.ref.ReferenceQueue queue>;

        $r5 = virtualinvoke $r4.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        goto label1;

     label4:
        $z0 = $r5 instanceof org.apache.batik.util.CleanerThread$ReferenceCleared;

        if $z0 == 0 goto label5;

        r6 = (org.apache.batik.util.CleanerThread$ReferenceCleared) $r5;

        interfaceinvoke r6.<org.apache.batik.util.CleanerThread$ReferenceCleared: void cleared()>();

     label5:
        goto label8;

     label6:
        $r1 := @caughtexception;

        throw $r1;

     label7:
        $r0 := @caughtexception;

        virtualinvoke $r0.<java.lang.Throwable: void printStackTrace()>();

     label8:
        goto label1;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.lang.ThreadDeath from label1 to label5 with label6;
        catch java.lang.Throwable from label1 to label5 with label7;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    static void <clinit>()
    {
        <org.apache.batik.util.CleanerThread: java.lang.ref.ReferenceQueue queue> = null;

        <org.apache.batik.util.CleanerThread: org.apache.batik.util.CleanerThread thread> = null;

        return;
    }
}
