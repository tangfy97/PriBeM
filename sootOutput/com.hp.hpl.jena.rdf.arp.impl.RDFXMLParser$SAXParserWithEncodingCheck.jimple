public class com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck extends org.apache.xerces.parsers.SAXParser
{
    private com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser rdfXmlParser;

    protected void <init>(org.apache.xerces.parsers.StandardParserConfiguration)
    {
        org.apache.xerces.parsers.StandardParserConfiguration r1;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck;

        r1 := @parameter0: org.apache.xerces.parsers.StandardParserConfiguration;

        specialinvoke r0.<org.apache.xerces.parsers.SAXParser: void <init>(org.apache.xerces.xni.parser.XMLParserConfiguration)>(r1);

        return;
    }

    public void xmlDecl(java.lang.String, java.lang.String, java.lang.String, org.apache.xerces.xni.Augmentations)
    {
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser $r1;
        com.hp.hpl.jena.rdf.arp.impl.WrappedException $r7;
        org.apache.xerces.xni.Augmentations r5;
        org.xml.sax.SAXParseException $r6;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck r0;
        java.lang.String r2, r3, r4, $r8;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: org.apache.xerces.xni.Augmentations;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser getRdfXmlParser()>();

        if r2 != null goto label2;

        $r8 = "UTF";

        goto label3;

     label2:
        $r8 = r2;

     label3:
        virtualinvoke $r1.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void setEncoding(java.lang.String)>($r8);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new com.hp.hpl.jena.rdf.arp.impl.WrappedException;

        specialinvoke $r7.<com.hp.hpl.jena.rdf.arp.impl.WrappedException: void <init>(org.xml.sax.SAXException)>($r6);

        throw $r7;

     label6:
        specialinvoke r0.<org.apache.xerces.parsers.SAXParser: void xmlDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)>(r3, r2, r4, r5);

        return;

        catch org.xml.sax.SAXParseException from label1 to label4 with label5;
    }

    public void setRdfXmlParser(com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser)
    {
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck r0;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser r1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser;

        r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser rdfXmlParser> = r1;

        return;
    }

    public com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser getRdfXmlParser()
    {
        java.lang.IllegalStateException $r3;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck r0;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser $r1, $r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser rdfXmlParser>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setRdfXmlParser must be called as part of the initialization process");

        throw $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser rdfXmlParser>;

        return $r2;
    }
}
