public abstract class org.apache.lucene.codecs.TermVectorsWriter extends java.lang.Object implements java.io.Closeable
{
    static final boolean $assertionsDisabled;

    protected void <init>()
    {
        org.apache.lucene.codecs.TermVectorsWriter r0;

        r0 := @this: org.apache.lucene.codecs.TermVectorsWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract void startDocument(int) throws java.io.IOException;

    public void finishDocument() throws java.io.IOException
    {
        org.apache.lucene.codecs.TermVectorsWriter r0;

        r0 := @this: org.apache.lucene.codecs.TermVectorsWriter;

        return;
    }

    public abstract void startField(org.apache.lucene.index.FieldInfo, int, boolean, boolean, boolean) throws java.io.IOException;

    public void finishField() throws java.io.IOException
    {
        org.apache.lucene.codecs.TermVectorsWriter r0;

        r0 := @this: org.apache.lucene.codecs.TermVectorsWriter;

        return;
    }

    public abstract void startTerm(org.apache.lucene.util.BytesRef, int) throws java.io.IOException;

    public void finishTerm() throws java.io.IOException
    {
        org.apache.lucene.codecs.TermVectorsWriter r0;

        r0 := @this: org.apache.lucene.codecs.TermVectorsWriter;

        return;
    }

    public abstract void addPosition(int, int, int, org.apache.lucene.util.BytesRef) throws java.io.IOException;

    public abstract void abort();

    public abstract void finish(org.apache.lucene.index.FieldInfos, int) throws java.io.IOException;

    public void addProx(int, org.apache.lucene.store.DataInput, org.apache.lucene.store.DataInput) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r0, r1;
        byte[] $r3, $r5, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, $i14, $i16, $i18;
        org.apache.lucene.util.BytesRef r6, r7, $r9;
        org.apache.lucene.codecs.TermVectorsWriter r2;

        r2 := @this: org.apache.lucene.codecs.TermVectorsWriter;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.lucene.store.DataInput;

        r1 := @parameter2: org.apache.lucene.store.DataInput;

        i8 = 0;

        i9 = 0;

        r6 = null;

        i10 = 0;

     label1:
        if i10 >= i0 goto label9;

        if r0 != null goto label2;

        $i14 = (int) -1;

        i8 = $i14;

        r7 = null;

        goto label6;

     label2:
        $i1 = virtualinvoke r0.<org.apache.lucene.store.DataInput: int readVInt()>();

        $i2 = $i1 >>> 1;

        i8 = i8 + $i2;

        $i3 = $i1 & 1;

        if $i3 == 0 goto label5;

        $i6 = virtualinvoke r0.<org.apache.lucene.store.DataInput: int readVInt()>();

        if r6 != null goto label3;

        $r9 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r9.<org.apache.lucene.util.BytesRef: void <init>()>();

        r6 = $r9;

        $r5 = newarray (byte)[$i6];

        $r9.<org.apache.lucene.util.BytesRef: byte[] bytes> = $r5;

        goto label4;

     label3:
        $r3 = r6.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i7 = lengthof $r3;

        if $i7 >= $i6 goto label4;

        virtualinvoke r6.<org.apache.lucene.util.BytesRef: void grow(int)>($i6);

     label4:
        $r8 = r6.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        virtualinvoke r0.<org.apache.lucene.store.DataInput: void readBytes(byte[],int,int)>($r8, 0, $i6);

        r6.<org.apache.lucene.util.BytesRef: int length> = $i6;

        r7 = r6;

        goto label6;

     label5:
        r7 = null;

     label6:
        if r1 != null goto label7;

        $i16 = (int) -1;

        i11 = $i16;

        $i18 = (int) -1;

        i12 = $i18;

        goto label8;

     label7:
        $i4 = virtualinvoke r1.<org.apache.lucene.store.DataInput: int readVInt()>();

        i12 = i9 + $i4;

        $i5 = virtualinvoke r1.<org.apache.lucene.store.DataInput: int readVInt()>();

        i11 = i12 + $i5;

        i9 = i11;

     label8:
        virtualinvoke r2.<org.apache.lucene.codecs.TermVectorsWriter: void addPosition(int,int,int,org.apache.lucene.util.BytesRef)>(i8, i12, i11, r7);

        i10 = i10 + 1;

        goto label1;

     label9:
        return;
    }

    public int merge(org.apache.lucene.index.MergeState) throws java.io.IOException
    {
        org.apache.lucene.index.Fields $r8;
        org.apache.lucene.index.MergeState r0;
        int $i0, $i1, i2, i3, i4;
        org.apache.lucene.index.FieldInfos $r3;
        org.apache.lucene.util.Bits $r7;
        boolean $z0;
        org.apache.lucene.index.MergeState$CheckAbort $r9;
        java.util.List $r1, $r4;
        org.apache.lucene.codecs.TermVectorsWriter r2;
        java.lang.Object $r5;
        org.apache.lucene.index.AtomicReader r6;

        r2 := @this: org.apache.lucene.codecs.TermVectorsWriter;

        r0 := @parameter0: org.apache.lucene.index.MergeState;

        i2 = 0;

        i3 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.index.MergeState: java.util.List readers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i3 >= $i0 goto label6;

        $r4 = r0.<org.apache.lucene.index.MergeState: java.util.List readers>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        r6 = (org.apache.lucene.index.AtomicReader) $r5;

        $i1 = virtualinvoke r6.<org.apache.lucene.index.AtomicReader: int maxDoc()>();

        $r7 = virtualinvoke r6.<org.apache.lucene.index.AtomicReader: org.apache.lucene.util.Bits getLiveDocs()>();

        i4 = 0;

     label2:
        if i4 >= $i1 goto label5;

        if $r7 == null goto label3;

        $z0 = interfaceinvoke $r7.<org.apache.lucene.util.Bits: boolean get(int)>(i4);

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        $r8 = virtualinvoke r6.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields getTermVectors(int)>(i4);

        virtualinvoke r2.<org.apache.lucene.codecs.TermVectorsWriter: void addAllDocVectors(org.apache.lucene.index.Fields,org.apache.lucene.index.MergeState)>($r8, r0);

        i2 = i2 + 1;

        $r9 = r0.<org.apache.lucene.index.MergeState: org.apache.lucene.index.MergeState$CheckAbort checkAbort>;

        virtualinvoke $r9.<org.apache.lucene.index.MergeState$CheckAbort: void work(double)>(300.0);

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        $r3 = r0.<org.apache.lucene.index.MergeState: org.apache.lucene.index.FieldInfos fieldInfos>;

        virtualinvoke r2.<org.apache.lucene.codecs.TermVectorsWriter: void finish(org.apache.lucene.index.FieldInfos,int)>($r3, i2);

        return i2;
    }

    protected final void addAllDocVectors(org.apache.lucene.index.Fields, org.apache.lucene.index.MergeState) throws java.io.IOException
    {
        org.apache.lucene.index.TermsEnum $r9, $r18, r30;
        org.apache.lucene.index.FieldInfos $r7;
        org.apache.lucene.codecs.TermVectorsWriter r1;
        java.lang.StringBuilder $r23, $r24, $r25, $r26, $r34;
        long $l1, $l11;
        java.lang.AssertionError $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42;
        java.lang.String r5, $r27, r29;
        org.apache.lucene.index.FieldInfo $r8;
        org.apache.lucene.index.Fields r0;
        org.apache.lucene.index.MergeState r6;
        org.apache.lucene.index.DocsAndPositionsEnum $r12, r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        org.apache.lucene.index.Terms $r32;
        org.apache.lucene.util.BytesRef $r11, $r13, $r19, $r33;
        int $i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i12, i13, i14, i15, $i17, $i19;
        java.util.Iterator $r2, $r28;
        java.lang.Object $r4;

        r1 := @this: org.apache.lucene.codecs.TermVectorsWriter;

        r0 := @parameter0: org.apache.lucene.index.Fields;

        r6 := @parameter1: org.apache.lucene.index.MergeState;

        if r0 != null goto label01;

        virtualinvoke r1.<org.apache.lucene.codecs.TermVectorsWriter: void startDocument(int)>(0);

        virtualinvoke r1.<org.apache.lucene.codecs.TermVectorsWriter: void finishDocument()>();

        return;

     label01:
        $i0 = virtualinvoke r0.<org.apache.lucene.index.Fields: int size()>();

        i9 = $i0;

        $i17 = (int) -1;

        if $i0 != $i17 goto label03;

        i9 = 0;

        $r28 = virtualinvoke r0.<org.apache.lucene.index.Fields: java.util.Iterator iterator()>();

     label02:
        $z11 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label03;

        interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        i9 = i9 + 1;

        goto label02;

     label03:
        virtualinvoke r1.<org.apache.lucene.codecs.TermVectorsWriter: void startDocument(int)>(i9);

        r29 = null;

        r30 = null;

        r31 = null;

        i10 = 0;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.Fields: java.util.Iterator iterator()>();

     label04:
        $z12 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label20;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        i10 = i10 + 1;

        $r7 = r6.<org.apache.lucene.index.MergeState: org.apache.lucene.index.FieldInfos fieldInfos>;

        $r8 = virtualinvoke $r7.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>(r5);

        $z1 = <org.apache.lucene.codecs.TermVectorsWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label05;

        if r29 == null goto label05;

        $i8 = virtualinvoke r5.<java.lang.String: int compareTo(java.lang.String)>(r29);

        if $i8 > 0 goto label05;

        $r35 = new java.lang.AssertionError;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lastFieldName=");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" fieldName=");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>($r27);

        throw $r35;

     label05:
        r29 = r5;

        $r32 = virtualinvoke r0.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(r5);

        if $r32 != null goto label06;

        goto label04;

     label06:
        $z2 = virtualinvoke $r32.<org.apache.lucene.index.Terms: boolean hasPositions()>();

        $z3 = virtualinvoke $r32.<org.apache.lucene.index.Terms: boolean hasOffsets()>();

        $z4 = virtualinvoke $r32.<org.apache.lucene.index.Terms: boolean hasPayloads()>();

        $z5 = <org.apache.lucene.codecs.TermVectorsWriter: boolean $assertionsDisabled>;

        if $z5 != 0 goto label07;

        if $z4 == 0 goto label07;

        if $z2 != 0 goto label07;

        $r36 = new java.lang.AssertionError;

        specialinvoke $r36.<java.lang.AssertionError: void <init>()>();

        throw $r36;

     label07:
        $l11 = virtualinvoke $r32.<org.apache.lucene.index.Terms: long size()>();

        $i12 = (int) $l11;

        i13 = $i12;

        $i19 = (int) -1;

        if $i12 != $i19 goto label09;

        i13 = 0;

        $r18 = virtualinvoke $r32.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(r30);

        r30 = $r18;

     label08:
        $r19 = virtualinvoke $r18.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        if $r19 == null goto label09;

        i13 = i13 + 1;

        goto label08;

     label09:
        virtualinvoke r1.<org.apache.lucene.codecs.TermVectorsWriter: void startField(org.apache.lucene.index.FieldInfo,int,boolean,boolean,boolean)>($r8, i13, $z2, $z3, $z4);

        $r9 = virtualinvoke $r32.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(r30);

        r30 = $r9;

        i14 = 0;

     label10:
        $r33 = virtualinvoke $r9.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        if $r33 == null goto label18;

        i14 = i14 + 1;

        $l1 = virtualinvoke $r9.<org.apache.lucene.index.TermsEnum: long totalTermFreq()>();

        i2 = (int) $l1;

        $r11 = virtualinvoke $r9.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef term()>();

        virtualinvoke r1.<org.apache.lucene.codecs.TermVectorsWriter: void startTerm(org.apache.lucene.util.BytesRef,int)>($r11, i2);

        if $z2 != 0 goto label11;

        if $z3 == 0 goto label17;

     label11:
        $r12 = virtualinvoke $r9.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits,org.apache.lucene.index.DocsAndPositionsEnum)>(null, r31);

        r31 = $r12;

        $z7 = <org.apache.lucene.codecs.TermVectorsWriter: boolean $assertionsDisabled>;

        if $z7 != 0 goto label12;

        if $r12 != null goto label12;

        $r37 = new java.lang.AssertionError;

        specialinvoke $r37.<java.lang.AssertionError: void <init>()>();

        throw $r37;

     label12:
        $i3 = virtualinvoke $r12.<org.apache.lucene.index.DocsAndPositionsEnum: int nextDoc()>();

        $z8 = <org.apache.lucene.codecs.TermVectorsWriter: boolean $assertionsDisabled>;

        if $z8 != 0 goto label13;

        if $i3 != 2147483647 goto label13;

        $r38 = new java.lang.AssertionError;

        specialinvoke $r38.<java.lang.AssertionError: void <init>()>();

        throw $r38;

     label13:
        $z9 = <org.apache.lucene.codecs.TermVectorsWriter: boolean $assertionsDisabled>;

        if $z9 != 0 goto label14;

        $i7 = virtualinvoke $r12.<org.apache.lucene.index.DocsAndPositionsEnum: int freq()>();

        if $i7 == i2 goto label14;

        $r39 = new java.lang.AssertionError;

        specialinvoke $r39.<java.lang.AssertionError: void <init>()>();

        throw $r39;

     label14:
        i15 = 0;

     label15:
        if i15 >= i2 goto label17;

        $i4 = virtualinvoke $r12.<org.apache.lucene.index.DocsAndPositionsEnum: int nextPosition()>();

        $i5 = virtualinvoke $r12.<org.apache.lucene.index.DocsAndPositionsEnum: int startOffset()>();

        $i6 = virtualinvoke $r12.<org.apache.lucene.index.DocsAndPositionsEnum: int endOffset()>();

        $r13 = virtualinvoke $r12.<org.apache.lucene.index.DocsAndPositionsEnum: org.apache.lucene.util.BytesRef getPayload()>();

        $z10 = <org.apache.lucene.codecs.TermVectorsWriter: boolean $assertionsDisabled>;

        if $z10 != 0 goto label16;

        if $z2 == 0 goto label16;

        if $i4 >= 0 goto label16;

        $r40 = new java.lang.AssertionError;

        specialinvoke $r40.<java.lang.AssertionError: void <init>()>();

        throw $r40;

     label16:
        virtualinvoke r1.<org.apache.lucene.codecs.TermVectorsWriter: void addPosition(int,int,int,org.apache.lucene.util.BytesRef)>($i4, $i5, $i6, $r13);

        i15 = i15 + 1;

        goto label15;

     label17:
        virtualinvoke r1.<org.apache.lucene.codecs.TermVectorsWriter: void finishTerm()>();

        goto label10;

     label18:
        $z6 = <org.apache.lucene.codecs.TermVectorsWriter: boolean $assertionsDisabled>;

        if $z6 != 0 goto label19;

        if i14 == i13 goto label19;

        $r41 = new java.lang.AssertionError;

        specialinvoke $r41.<java.lang.AssertionError: void <init>()>();

        throw $r41;

     label19:
        virtualinvoke r1.<org.apache.lucene.codecs.TermVectorsWriter: void finishField()>();

        goto label04;

     label20:
        $z0 = <org.apache.lucene.codecs.TermVectorsWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label21;

        if i10 == i9 goto label21;

        $r42 = new java.lang.AssertionError;

        specialinvoke $r42.<java.lang.AssertionError: void <init>()>();

        throw $r42;

     label21:
        virtualinvoke r1.<org.apache.lucene.codecs.TermVectorsWriter: void finishDocument()>();

        return;
    }

    public abstract java.util.Comparator getComparator() throws java.io.IOException;

    public abstract void close() throws java.io.IOException;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/codecs/TermVectorsWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.TermVectorsWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
