public class org.codehaus.groovy.control.CompilerConfiguration extends java.lang.Object
{
    private static final java.lang.String JDK5_CLASSNAME_CHECK;
    public static final java.lang.String POST_JDK5;
    public static final java.lang.String PRE_JDK5;
    public static final java.lang.String currentJVMVersion;
    public static final org.codehaus.groovy.control.CompilerConfiguration DEFAULT;
    private int warningLevel;
    private java.lang.String sourceEncoding;
    private java.io.PrintWriter output;
    private java.io.File targetDirectory;
    private java.util.LinkedList classpath;
    private boolean verbose;
    private boolean debug;
    private int tolerance;
    private java.lang.String scriptBaseClass;
    private org.codehaus.groovy.control.ParserPluginFactory pluginFactory;
    private java.lang.String defaultScriptExtension;
    private boolean recompileGroovySource;
    private int minimumRecompilationInterval;
    private java.lang.String targetBytecode;
    private java.util.Map jointCompilationOptions;

    public void <init>()
    {
        java.io.PrintWriter $r2;
        java.io.PrintStream $r3;
        org.codehaus.groovy.control.CompilerConfiguration r0;
        java.lang.Exception $r5, $r6, $r7, $r8;
        java.lang.String $r1, $r4, r9;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setWarningLevel(int)>(1);

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setOutput(java.io.PrintWriter)>(null);

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setTargetDirectory(java.io.File)>(null);

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setClasspath(java.lang.String)>("");

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setVerbose(boolean)>(0);

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setDebug(boolean)>(0);

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setTolerance(int)>(10);

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setScriptBaseClass(java.lang.String)>(null);

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setRecompileGroovySource(boolean)>(0);

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setMinimumRecompilationInterval(int)>(100);

        $r1 = staticinvoke <org.codehaus.groovy.control.CompilerConfiguration: java.lang.String getVMVersion()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setTargetBytecode(java.lang.String)>($r1);

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setDefaultScriptExtension(java.lang.String)>(".groovy");

        r9 = null;

     label01:
        r9 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("file.encoding", "US-ASCII");

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

     label04:
        r9 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("groovy.source.encoding", r9);

     label05:
        goto label07;

     label06:
        $r7 := @caughtexception;

     label07:
        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setSourceEncoding(java.lang.String)>(r9);

     label08:
        $r2 = new java.io.PrintWriter;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r3);

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setOutput(java.io.PrintWriter)>($r2);

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

     label11:
        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("groovy.target.directory");

        if $r4 == null goto label12;

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setTargetDirectory(java.lang.String)>($r4);

     label12:
        goto label14;

     label13:
        $r5 := @caughtexception;

     label14:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.Exception from label11 to label12 with label13;
    }

    public void <init>(org.codehaus.groovy.control.CompilerConfiguration)
    {
        java.util.HashMap $r14;
        java.util.Map $r12, r15;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r7, $r8, $r9;
        java.util.LinkedList $r4;
        boolean $z0, $z1, $z2;
        java.io.PrintWriter $r2, $r10;
        org.codehaus.groovy.control.CompilerConfiguration r0, r1;
        java.io.File $r3, $r11;
        java.util.List $r5;
        org.codehaus.groovy.control.ParserPluginFactory $r13;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        r1 := @parameter0: org.codehaus.groovy.control.CompilerConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: int getWarningLevel()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setWarningLevel(int)>($i0);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: java.io.PrintWriter getOutput()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setOutput(java.io.PrintWriter)>($r2);

        $r3 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: java.io.File getTargetDirectory()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setTargetDirectory(java.io.File)>($r3);

        $r4 = new java.util.LinkedList;

        $r5 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: java.util.List getClasspath()>();

        specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5);

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setClasspathList(java.util.List)>($r4);

        $z0 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: boolean getVerbose()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setVerbose(boolean)>($z0);

        $z1 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: boolean getDebug()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setDebug(boolean)>($z1);

        $i1 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: int getTolerance()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setTolerance(int)>($i1);

        $r6 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String getScriptBaseClass()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setScriptBaseClass(java.lang.String)>($r6);

        $z2 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: boolean getRecompileGroovySource()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setRecompileGroovySource(boolean)>($z2);

        $i2 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: int getMinimumRecompilationInterval()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setMinimumRecompilationInterval(int)>($i2);

        $r7 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String getTargetBytecode()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setTargetBytecode(java.lang.String)>($r7);

        $r8 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String getDefaultScriptExtension()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setDefaultScriptExtension(java.lang.String)>($r8);

        $r9 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String getSourceEncoding()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setSourceEncoding(java.lang.String)>($r9);

        $r10 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: java.io.PrintWriter getOutput()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setOutput(java.io.PrintWriter)>($r10);

        $r11 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: java.io.File getTargetDirectory()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setTargetDirectory(java.io.File)>($r11);

        $r12 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: java.util.Map getJointCompilationOptions()>();

        r15 = $r12;

        if $r12 == null goto label1;

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>(java.util.Map)>($r12);

        r15 = $r14;

     label1:
        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setJointCompilationOptions(java.util.Map)>(r15);

        $r13 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: org.codehaus.groovy.control.ParserPluginFactory getPluginFactory()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setPluginFactory(org.codehaus.groovy.control.ParserPluginFactory)>($r13);

        return;
    }

    public void <init>(java.util.Properties) throws org.codehaus.groovy.control.ConfigurationException
    {
        java.util.Properties r1;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        r1 := @parameter0: java.util.Properties;

        specialinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void <init>()>();

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void configure(java.util.Properties)>(r1);

        return;
    }

    public void configure(java.util.Properties) throws org.codehaus.groovy.control.ConfigurationException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.codehaus.groovy.control.ConfigurationException $r11, $r13, $r16;
        java.lang.StringBuffer $r17, $r18, $r19;
        int i0, $i1, i2;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r15, $r20, r21, $r22, $r23, $r24, r25;
        java.util.Properties r1;
        java.lang.NumberFormatException $r10, $r12, $r14;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        r1 := @parameter0: java.util.Properties;

        r21 = null;

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: int getWarningLevel()>();

     label01:
        $r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("groovy.warnings", "likely errors");

        r21 = $r2;

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label02:
        goto label08;

     label03:
        $r14 := @caughtexception;

        $r15 = virtualinvoke r21.<java.lang.String: java.lang.String toLowerCase()>();

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("none");

        if $z3 == 0 goto label04;

        i0 = 0;

        goto label08;

     label04:
        $z4 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("likely");

        if $z4 == 0 goto label05;

        i0 = 1;

        goto label08;

     label05:
        $z5 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("possible");

        if $z5 == 0 goto label06;

        i0 = 2;

        goto label08;

     label06:
        $z6 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("paranoia");

        if $z6 == 0 goto label07;

        i0 = 3;

        goto label08;

     label07:
        $r16 = new org.codehaus.groovy.control.ConfigurationException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unrecogized groovy.warnings: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<org.codehaus.groovy.control.ConfigurationException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label08:
        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setWarningLevel(int)>(i0);

        $r22 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("groovy.source.encoding");

        if $r22 == null goto label09;

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setSourceEncoding(java.lang.String)>($r22);

     label09:
        $r3 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("groovy.target.directory");

        if $r3 == null goto label10;

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setTargetDirectory(java.lang.String)>($r3);

     label10:
        $r4 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("groovy.target.bytecode");

        if $r4 == null goto label11;

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setTargetBytecode(java.lang.String)>($r4);

     label11:
        $r5 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("groovy.classpath");

        if $r5 == null goto label12;

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setClasspath(java.lang.String)>($r5);

     label12:
        $r6 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("groovy.output.verbose");

        if $r6 == null goto label13;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z2 == 0 goto label13;

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setVerbose(boolean)>(1);

     label13:
        $r23 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("groovy.output.debug");

        if $r23 == null goto label14;

        $z1 = virtualinvoke $r23.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z1 == 0 goto label14;

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setDebug(boolean)>(1);

     label14:
        $r24 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("groovy.errors.tolerance", "10");

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r24);

     label15:
        goto label17;

     label16:
        $r12 := @caughtexception;

        $r13 = new org.codehaus.groovy.control.ConfigurationException;

        specialinvoke $r13.<org.codehaus.groovy.control.ConfigurationException: void <init>(java.lang.Exception)>($r12);

        throw $r13;

     label17:
        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setTolerance(int)>($i1);

        $r7 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("groovy.script.base");

        if $r7 == null goto label18;

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setScriptBaseClass(java.lang.String)>($r7);

     label18:
        $r8 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("groovy.recompile");

        if $r8 == null goto label19;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setRecompileGroovySource(boolean)>($z0);

     label19:
        $r9 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("groovy.recompile.minimumIntervall");

        r25 = $r9;

        if $r9 != null goto label20;

        r25 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("groovy.recompile.minimumInterval");

     label20:
        if r25 == null goto label21;

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r25);

        goto label22;

     label21:
        i2 = 100;

     label22:
        goto label24;

     label23:
        $r10 := @caughtexception;

        $r11 = new org.codehaus.groovy.control.ConfigurationException;

        specialinvoke $r11.<org.codehaus.groovy.control.ConfigurationException: void <init>(java.lang.Exception)>($r10);

        throw $r11;

     label24:
        virtualinvoke r0.<org.codehaus.groovy.control.CompilerConfiguration: void setMinimumRecompilationInterval(int)>(i2);

        return;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label14 to label15 with label16;
        catch java.lang.NumberFormatException from label19 to label22 with label23;
    }

    public int getWarningLevel()
    {
        int $i0;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $i0 = r0.<org.codehaus.groovy.control.CompilerConfiguration: int warningLevel>;

        return $i0;
    }

    public void setWarningLevel(int)
    {
        int i0;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 3 goto label2;

     label1:
        r0.<org.codehaus.groovy.control.CompilerConfiguration: int warningLevel> = 1;

        goto label3;

     label2:
        r0.<org.codehaus.groovy.control.CompilerConfiguration: int warningLevel> = i0;

     label3:
        return;
    }

    public java.lang.String getSourceEncoding()
    {
        java.lang.String $r1;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $r1 = r0.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String sourceEncoding>;

        return $r1;
    }

    public void setSourceEncoding(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        r1 = "US-ASCII";

     label1:
        r0.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String sourceEncoding> = r1;

        return;
    }

    public java.io.PrintWriter getOutput()
    {
        java.io.PrintWriter $r1;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $r1 = r0.<org.codehaus.groovy.control.CompilerConfiguration: java.io.PrintWriter output>;

        return $r1;
    }

    public void setOutput(java.io.PrintWriter)
    {
        java.io.PrintWriter r0, $r2;
        org.codehaus.groovy.control.io.NullWriter $r3;
        org.codehaus.groovy.control.CompilerConfiguration r1;

        r1 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        r0 := @parameter0: java.io.PrintWriter;

        if r0 != null goto label1;

        $r2 = new java.io.PrintWriter;

        $r3 = <org.codehaus.groovy.control.io.NullWriter: org.codehaus.groovy.control.io.NullWriter DEFAULT>;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.Writer)>($r3);

        r1.<org.codehaus.groovy.control.CompilerConfiguration: java.io.PrintWriter output> = $r2;

        goto label2;

     label1:
        r1.<org.codehaus.groovy.control.CompilerConfiguration: java.io.PrintWriter output> = r0;

     label2:
        return;
    }

    public java.io.File getTargetDirectory()
    {
        org.codehaus.groovy.control.CompilerConfiguration r0;
        java.io.File $r1;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $r1 = r0.<org.codehaus.groovy.control.CompilerConfiguration: java.io.File targetDirectory>;

        return $r1;
    }

    public void setTargetDirectory(java.lang.String)
    {
        int $i0;
        java.lang.String r0;
        org.codehaus.groovy.control.CompilerConfiguration r1;
        java.io.File $r2;

        r1 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0);

        r1.<org.codehaus.groovy.control.CompilerConfiguration: java.io.File targetDirectory> = $r2;

        goto label2;

     label1:
        r1.<org.codehaus.groovy.control.CompilerConfiguration: java.io.File targetDirectory> = null;

     label2:
        return;
    }

    public void setTargetDirectory(java.io.File)
    {
        org.codehaus.groovy.control.CompilerConfiguration r0;
        java.io.File r1;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        r1 := @parameter0: java.io.File;

        r0.<org.codehaus.groovy.control.CompilerConfiguration: java.io.File targetDirectory> = r1;

        return;
    }

    public java.util.List getClasspath()
    {
        org.codehaus.groovy.control.CompilerConfiguration r0;
        java.util.LinkedList $r1;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $r1 = r0.<org.codehaus.groovy.control.CompilerConfiguration: java.util.LinkedList classpath>;

        return $r1;
    }

    public void setClasspath(java.lang.String)
    {
        org.codehaus.groovy.control.CompilerConfiguration r0;
        java.util.StringTokenizer $r2;
        java.lang.String r3, $r4, $r6;
        java.util.LinkedList $r1, $r5;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        r3 := @parameter0: java.lang.String;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.codehaus.groovy.control.CompilerConfiguration: java.util.LinkedList classpath> = $r1;

        $r2 = new java.util.StringTokenizer;

        $r4 = <java.io.File: java.lang.String pathSeparator>;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r3, $r4);

     label1:
        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<org.codehaus.groovy.control.CompilerConfiguration: java.util.LinkedList classpath>;

        $r6 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r5.<java.util.LinkedList: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return;
    }

    public void setClasspathList(java.util.List)
    {
        java.util.List r2;
        org.codehaus.groovy.control.CompilerConfiguration r0;
        java.util.LinkedList $r1;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        r2 := @parameter0: java.util.List;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>(java.util.Collection)>(r2);

        r0.<org.codehaus.groovy.control.CompilerConfiguration: java.util.LinkedList classpath> = $r1;

        return;
    }

    public boolean getVerbose()
    {
        org.codehaus.groovy.control.CompilerConfiguration r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $z0 = r0.<org.codehaus.groovy.control.CompilerConfiguration: boolean verbose>;

        return $z0;
    }

    public void setVerbose(boolean)
    {
        org.codehaus.groovy.control.CompilerConfiguration r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.control.CompilerConfiguration: boolean verbose> = z0;

        return;
    }

    public boolean getDebug()
    {
        org.codehaus.groovy.control.CompilerConfiguration r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $z0 = r0.<org.codehaus.groovy.control.CompilerConfiguration: boolean debug>;

        return $z0;
    }

    public void setDebug(boolean)
    {
        org.codehaus.groovy.control.CompilerConfiguration r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.control.CompilerConfiguration: boolean debug> = z0;

        return;
    }

    public int getTolerance()
    {
        int $i0;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $i0 = r0.<org.codehaus.groovy.control.CompilerConfiguration: int tolerance>;

        return $i0;
    }

    public void setTolerance(int)
    {
        int i0;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        i0 := @parameter0: int;

        r0.<org.codehaus.groovy.control.CompilerConfiguration: int tolerance> = i0;

        return;
    }

    public java.lang.String getScriptBaseClass()
    {
        java.lang.String $r1;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $r1 = r0.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String scriptBaseClass>;

        return $r1;
    }

    public void setScriptBaseClass(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        r1 := @parameter0: java.lang.String;

        r0.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String scriptBaseClass> = r1;

        return;
    }

    public org.codehaus.groovy.control.ParserPluginFactory getPluginFactory()
    {
        org.codehaus.groovy.control.ParserPluginFactory $r1, $r2, $r3;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $r1 = r0.<org.codehaus.groovy.control.CompilerConfiguration: org.codehaus.groovy.control.ParserPluginFactory pluginFactory>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.codehaus.groovy.control.ParserPluginFactory: org.codehaus.groovy.control.ParserPluginFactory newInstance(boolean)>(1);

        r0.<org.codehaus.groovy.control.CompilerConfiguration: org.codehaus.groovy.control.ParserPluginFactory pluginFactory> = $r3;

     label1:
        $r2 = r0.<org.codehaus.groovy.control.CompilerConfiguration: org.codehaus.groovy.control.ParserPluginFactory pluginFactory>;

        return $r2;
    }

    public void setPluginFactory(org.codehaus.groovy.control.ParserPluginFactory)
    {
        org.codehaus.groovy.control.ParserPluginFactory r1;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        r1 := @parameter0: org.codehaus.groovy.control.ParserPluginFactory;

        r0.<org.codehaus.groovy.control.CompilerConfiguration: org.codehaus.groovy.control.ParserPluginFactory pluginFactory> = r1;

        return;
    }

    public java.lang.String getDefaultScriptExtension()
    {
        java.lang.String $r1;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $r1 = r0.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String defaultScriptExtension>;

        return $r1;
    }

    public void setDefaultScriptExtension(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        r1 := @parameter0: java.lang.String;

        r0.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String defaultScriptExtension> = r1;

        return;
    }

    public void setRecompileGroovySource(boolean)
    {
        org.codehaus.groovy.control.CompilerConfiguration r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.control.CompilerConfiguration: boolean recompileGroovySource> = z0;

        return;
    }

    public boolean getRecompileGroovySource()
    {
        org.codehaus.groovy.control.CompilerConfiguration r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $z0 = r0.<org.codehaus.groovy.control.CompilerConfiguration: boolean recompileGroovySource>;

        return $z0;
    }

    public void setMinimumRecompilationInterval(int)
    {
        int i0, $i1;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, i0);

        r0.<org.codehaus.groovy.control.CompilerConfiguration: int minimumRecompilationInterval> = $i1;

        return;
    }

    public int getMinimumRecompilationInterval()
    {
        int $i0;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $i0 = r0.<org.codehaus.groovy.control.CompilerConfiguration: int minimumRecompilationInterval>;

        return $i0;
    }

    public void setTargetBytecode(java.lang.String)
    {
        java.lang.String r0, $r1, $r3;
        org.codehaus.groovy.control.CompilerConfiguration r2;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        r0 := @parameter0: java.lang.String;

        $r1 = "1.4";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r3 = "1.5";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

     label1:
        r2.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String targetBytecode> = r0;

     label2:
        return;
    }

    public java.lang.String getTargetBytecode()
    {
        java.lang.String $r1;
        org.codehaus.groovy.control.CompilerConfiguration r0;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $r1 = r0.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String targetBytecode>;

        return $r1;
    }

    private static java.lang.String getVMVersion()
    {
        java.lang.Exception $r0;

     label1:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.annotation.Annotation");

     label2:
        return "1.5";

     label3:
        $r0 := @caughtexception;

        return "1.4";

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.util.Map getJointCompilationOptions()
    {
        org.codehaus.groovy.control.CompilerConfiguration r0;
        java.util.Map $r1;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        $r1 = r0.<org.codehaus.groovy.control.CompilerConfiguration: java.util.Map jointCompilationOptions>;

        return $r1;
    }

    public void setJointCompilationOptions(java.util.Map)
    {
        org.codehaus.groovy.control.CompilerConfiguration r0;
        java.util.Map r1;

        r0 := @this: org.codehaus.groovy.control.CompilerConfiguration;

        r1 := @parameter0: java.util.Map;

        r0.<org.codehaus.groovy.control.CompilerConfiguration: java.util.Map jointCompilationOptions> = r1;

        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0;
        org.codehaus.groovy.control.CompilerConfiguration $r1;

        <org.codehaus.groovy.control.CompilerConfiguration: java.lang.String PRE_JDK5> = "1.4";

        <org.codehaus.groovy.control.CompilerConfiguration: java.lang.String POST_JDK5> = "1.5";

        <org.codehaus.groovy.control.CompilerConfiguration: java.lang.String JDK5_CLASSNAME_CHECK> = "java.lang.annotation.Annotation";

        $r0 = staticinvoke <org.codehaus.groovy.control.CompilerConfiguration: java.lang.String getVMVersion()>();

        <org.codehaus.groovy.control.CompilerConfiguration: java.lang.String currentJVMVersion> = $r0;

        $r1 = new org.codehaus.groovy.control.CompilerConfiguration;

        specialinvoke $r1.<org.codehaus.groovy.control.CompilerConfiguration: void <init>()>();

        <org.codehaus.groovy.control.CompilerConfiguration: org.codehaus.groovy.control.CompilerConfiguration DEFAULT> = $r1;

        return;
    }
}
