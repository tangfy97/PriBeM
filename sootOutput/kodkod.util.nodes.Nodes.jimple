public final class kodkod.util.nodes.Nodes extends java.lang.Object
{

    private void <init>()
    {
        kodkod.util.nodes.Nodes r0;

        r0 := @this: kodkod.util.nodes.Nodes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Set roots(kodkod.ast.Formula)
    {
        kodkod.ast.BinaryFormula r14;
        java.util.ListIterator $r2;
        kodkod.ast.operator.FormulaOperator $r5, $r6, $r9, $r10;
        int i0, $i2;
        kodkod.ast.NaryFormula r15;
        java.util.LinkedList $r17;
        java.util.LinkedHashSet $r18;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r7;
        kodkod.ast.Formula r1, r4, $r11, $r12, r16;
        java.lang.Object $r3, $r8;

        r1 := @parameter0: kodkod.ast.Formula;

        $r17 = new java.util.LinkedList;

        specialinvoke $r17.<java.util.LinkedList: void <init>()>();

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r2 = interfaceinvoke $r17.<java.util.List: java.util.ListIterator listIterator()>();

        goto label7;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object next()>();

        r4 = (kodkod.ast.Formula) $r3;

        $z0 = r4 instanceof kodkod.ast.BinaryFormula;

        if $z0 == 0 goto label2;

        r14 = (kodkod.ast.BinaryFormula) r4;

        $r9 = virtualinvoke r14.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r10 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r9 != $r10 goto label7;

        interfaceinvoke $r2.<java.util.ListIterator: void remove()>();

        $r11 = virtualinvoke r14.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        interfaceinvoke $r2.<java.util.ListIterator: void add(java.lang.Object)>($r11);

        $r12 = virtualinvoke r14.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        interfaceinvoke $r2.<java.util.ListIterator: void add(java.lang.Object)>($r12);

        interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object previous()>();

        interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object previous()>();

        goto label7;

     label2:
        $z1 = r4 instanceof kodkod.ast.NaryFormula;

        if $z1 == 0 goto label7;

        r15 = (kodkod.ast.NaryFormula) r4;

        $r5 = virtualinvoke r15.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r6 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r5 != $r6 goto label7;

        interfaceinvoke $r2.<java.util.ListIterator: void remove()>();

        $r7 = virtualinvoke r15.<kodkod.ast.NaryFormula: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r16 = (kodkod.ast.Formula) $r8;

        interfaceinvoke $r2.<java.util.ListIterator: void add(java.lang.Object)>(r16);

     label4:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label3;

        i0 = virtualinvoke r15.<kodkod.ast.NaryFormula: int size()>();

        goto label6;

     label5:
        interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object previous()>();

        $i2 = (int) -1;

        i0 = i0 + $i2;

     label6:
        if i0 > 0 goto label5;

     label7:
        $z3 = interfaceinvoke $r2.<java.util.ListIterator: boolean hasNext()>();

        if $z3 != 0 goto label1;

        $r18 = new java.util.LinkedHashSet;

        specialinvoke $r18.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r17);

        return $r18;
    }

    public static java.util.Set conjuncts(kodkod.ast.Formula)
    {
        kodkod.ast.BinaryFormula r13;
        kodkod.ast.operator.FormulaOperator $r1, $r2, $r7, $r8;
        int $i0, $i1, $i2, $i3;
        kodkod.ast.NaryFormula r14;
        java.util.LinkedHashSet $r3;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4;
        kodkod.util.nodes.Nodes$1 $r11;
        kodkod.ast.Formula r0, $r9, $r10, r15;
        java.util.Set $r6, $r12, $r16;
        java.lang.Object $r5;

        r0 := @parameter0: kodkod.ast.Formula;

        $z0 = r0 instanceof kodkod.ast.BinaryFormula;

        if $z0 == 0 goto label2;

        r13 = (kodkod.ast.BinaryFormula) r0;

        $r7 = virtualinvoke r13.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r8 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r7 != $r8 goto label5;

        $r9 = virtualinvoke r13.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        $r10 = virtualinvoke r13.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        if $r9 != $r10 goto label1;

        $r12 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r9);

        return $r12;

     label1:
        $r11 = new kodkod.util.nodes.Nodes$1;

        specialinvoke $r11.<kodkod.util.nodes.Nodes$1: void <init>(kodkod.ast.Formula,kodkod.ast.Formula)>($r9, $r10);

        return $r11;

     label2:
        $z1 = r0 instanceof kodkod.ast.NaryFormula;

        if $z1 == 0 goto label5;

        r14 = (kodkod.ast.NaryFormula) r0;

        $r1 = virtualinvoke r14.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r2 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r1 != $r2 goto label5;

        $r3 = new java.util.LinkedHashSet;

        $i0 = virtualinvoke r14.<kodkod.ast.NaryFormula: int size()>();

        $i1 = $i0 * 4;

        $i2 = $i1 / 3;

        $i3 = 1 + $i2;

        specialinvoke $r3.<java.util.LinkedHashSet: void <init>(int)>($i3);

        $r4 = virtualinvoke r14.<kodkod.ast.NaryFormula: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r15 = (kodkod.ast.Formula) $r5;

        virtualinvoke $r3.<java.util.LinkedHashSet: boolean add(java.lang.Object)>(r15);

     label4:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label3;

        $r6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r3);

        return $r6;

     label5:
        $r16 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r0);

        return $r16;
    }

    public static java.util.Set minRoots(kodkod.ast.Formula, java.util.Collection)
    {
        kodkod.util.collections.IdentityHashSet $r0;
        int $i0, $i1;
        java.lang.String $r14;
        java.util.LinkedHashSet $r3;
        boolean $z0, $z1, $z2;
        kodkod.util.nodes.Nodes$2 $r2;
        java.util.Iterator $r6;
        java.util.Collection r1;
        kodkod.ast.Formula r4, r8;
        java.util.Set $r5;
        java.lang.IllegalArgumentException $r9;
        java.lang.Object $r7;
        java.lang.StringBuilder $r10, $r11, $r12, $r13;

        r4 := @parameter0: kodkod.ast.Formula;

        r1 := @parameter1: java.util.Collection;

        $r0 = new kodkod.util.collections.IdentityHashSet;

        specialinvoke $r0.<kodkod.util.collections.IdentityHashSet: void <init>(java.util.Collection)>(r1);

        $r2 = new kodkod.util.nodes.Nodes$2;

        specialinvoke $r2.<kodkod.util.nodes.Nodes$2: void <init>(java.util.Set)>($r0);

        $r3 = new java.util.LinkedHashSet;

        specialinvoke $r3.<java.util.LinkedHashSet: void <init>()>();

        $r5 = staticinvoke <kodkod.util.nodes.Nodes: java.util.Set roots(kodkod.ast.Formula)>(r4);

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kodkod.ast.Formula) $r7;

        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        virtualinvoke r8.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>($r2);

        $i1 = interfaceinvoke $r0.<java.util.Set: int size()>();

        if $i1 >= $i0 goto label2;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r8);

     label2:
        $z1 = interfaceinvoke $r0.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label4:
        $z2 = interfaceinvoke $r0.<java.util.Set: boolean isEmpty()>();

        if $z2 != 0 goto label5;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("descendants !in formula.*components: formula=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ; descendants=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label5:
        return $r3;
    }

    public static java.util.Set allRoots(kodkod.ast.Formula, java.util.Collection)
    {
        kodkod.util.nodes.Nodes$3 $r2;
        kodkod.util.collections.IdentityHashSet $r0;
        java.util.Iterator $r7;
        java.util.Collection r1;
        kodkod.ast.Formula r5, r9;
        java.util.Set $r3, $r6;
        java.lang.Boolean $r11;
        java.lang.Object $r8, $r10;
        java.util.LinkedHashSet $r4;
        boolean $z0, $z1;

        r5 := @parameter0: kodkod.ast.Formula;

        r1 := @parameter1: java.util.Collection;

        $r0 = new kodkod.util.collections.IdentityHashSet;

        specialinvoke $r0.<kodkod.util.collections.IdentityHashSet: void <init>(java.util.Collection)>(r1);

        $r2 = new kodkod.util.nodes.Nodes$3;

        $r3 = <java.util.Collections: java.util.Set EMPTY_SET>;

        specialinvoke $r2.<kodkod.util.nodes.Nodes$3: void <init>(java.util.Set,java.util.Set)>($r3, $r0);

        $r4 = new java.util.LinkedHashSet;

        specialinvoke $r4.<java.util.LinkedHashSet: void <init>()>();

        $r6 = staticinvoke <kodkod.util.nodes.Nodes: java.util.Set roots(kodkod.ast.Formula)>(r5);

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (kodkod.ast.Formula) $r8;

        $r10 = virtualinvoke r9.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>($r2);

        $r11 = (java.lang.Boolean) $r10;

        $z0 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r9);

     label2:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return $r4;
    }
}
