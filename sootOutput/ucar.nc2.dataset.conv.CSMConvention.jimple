public class ucar.nc2.dataset.conv.CSMConvention extends ucar.nc2.dataset.conv.COARDSConvention
{

    public void <init>()
    {
        ucar.nc2.dataset.conv.CSMConvention r0;

        r0 := @this: ucar.nc2.dataset.conv.CSMConvention;

        specialinvoke r0.<ucar.nc2.dataset.conv.COARDSConvention: void <init>()>();

        r0.<ucar.nc2.dataset.conv.CSMConvention: java.lang.String conventionName> = "NCAR-CSM";

        return;
    }

    public void augmentDataset(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.nc2.dataset.TransformType $r10;
        ucar.nc2.util.CancelTask r15;
        ucar.nc2.dataset.conv.CSMConvention r14;
        ucar.nc2.constants.AxisType $r7;
        ucar.nc2.Variable r4;
        java.lang.String $r5, $r8, $r11, $r13;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r2;
        java.util.List $r1;
        ucar.nc2.Attribute $r6, $r9, $r12;
        java.lang.Object $r3;
        ucar.nc2.dataset.NetcdfDataset r0;

        r14 := @this: ucar.nc2.dataset.conv.CSMConvention;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r15 := @parameter1: ucar.nc2.util.CancelTask;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.util.List getVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Variable) $r3;

        $r5 = virtualinvoke r4.<ucar.nc2.Variable: java.lang.String getUnitsString()>();

        if $r5 == null goto label3;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("hybrid_sigma_pressure");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("sigma_level");

        if $z2 == 0 goto label3;

     label2:
        $r6 = new ucar.nc2.Attribute;

        $r7 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType GeoZ>;

        $r8 = virtualinvoke $r7.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r6.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r8);

        virtualinvoke r4.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r6);

        $r9 = new ucar.nc2.Attribute;

        $r10 = <ucar.nc2.dataset.TransformType: ucar.nc2.dataset.TransformType Vertical>;

        $r11 = virtualinvoke $r10.<ucar.nc2.dataset.TransformType: java.lang.String toString()>();

        specialinvoke $r9.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateTransformType", $r11);

        virtualinvoke r4.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r9);

        $r12 = new ucar.nc2.Attribute;

        $r13 = virtualinvoke r4.<ucar.nc2.Variable: java.lang.String getName()>();

        specialinvoke $r12.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxes", $r13);

        virtualinvoke r4.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r12);

     label3:
        goto label1;

     label4:
        return;
    }

    protected void findCoordinateAxes(ucar.nc2.dataset.NetcdfDataset)
    {
        java.util.Iterator $r2;
        ucar.nc2.dataset.CoordSysBuilder$VarProcess r5;
        java.util.List $r1;
        ucar.nc2.dataset.conv.CSMConvention r0;
        java.lang.Object $r4;
        ucar.nc2.Variable $r7;
        java.lang.String $r6, $r8;
        ucar.nc2.dataset.NetcdfDataset r3;
        boolean $z0;

        r0 := @this: ucar.nc2.dataset.conv.CSMConvention;

        r3 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        $r1 = r0.<ucar.nc2.dataset.conv.CSMConvention: java.util.List varList>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (ucar.nc2.dataset.CoordSysBuilder$VarProcess) $r4;

        $r6 = r5.<ucar.nc2.dataset.CoordSysBuilder$VarProcess: java.lang.String coordAxes>;

        if $r6 != null goto label2;

        $r7 = r5.<ucar.nc2.dataset.CoordSysBuilder$VarProcess: ucar.nc2.Variable v>;

        $r8 = virtualinvoke r3.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>($r7, "coordinates", null);

        if $r8 == null goto label2;

        r5.<ucar.nc2.dataset.CoordSysBuilder$VarProcess: java.lang.String coordinates> = $r8;

     label2:
        goto label1;

     label3:
        specialinvoke r0.<ucar.nc2.dataset.conv.COARDSConvention: void findCoordinateAxes(ucar.nc2.dataset.NetcdfDataset)>(r3);

        return;
    }

    protected ucar.nc2.constants.AxisType getAxisType(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.dataset.VariableEnhanced)
    {
        ucar.nc2.dataset.conv.CSMConvention r0;
        ucar.nc2.dataset.VariableEnhanced r2;
        ucar.nc2.constants.AxisType $r3, $r5;
        java.lang.String $r4;
        ucar.nc2.dataset.NetcdfDataset r1;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.dataset.conv.CSMConvention;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter1: ucar.nc2.dataset.VariableEnhanced;

        $r3 = specialinvoke r0.<ucar.nc2.dataset.conv.COARDSConvention: ucar.nc2.constants.AxisType getAxisType(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.dataset.VariableEnhanced)>(r1, r2);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r4 = interfaceinvoke r2.<ucar.nc2.dataset.VariableEnhanced: java.lang.String getUnitsString()>();

        if $r4 != null goto label2;

        return null;

     label2:
        $z0 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isDateUnit(java.lang.String)>($r4);

        if $z0 != 0 goto label3;

        $z1 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isTimeUnit(java.lang.String)>($r4);

        if $z1 == 0 goto label4;

     label3:
        $r5 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        return $r5;

     label4:
        return null;
    }

    protected ucar.nc2.dataset.CoordinateTransform makeCoordinateTransform(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Variable)
    {
        ucar.nc2.dataset.conv.CSMConvention r2;
        ucar.nc2.dataset.conv.CSMConvention$SigmaBuilder $r5;
        ucar.nc2.dataset.CoordinateTransform $r4, r7;
        ucar.nc2.Variable r0;
        java.lang.String $r1;
        ucar.nc2.dataset.NetcdfDataset r3;
        ucar.nc2.dataset.conv.CSMConvention$HybridSigmaPressureBuilder $r6;
        boolean $z0, $z1;

        r2 := @this: ucar.nc2.dataset.conv.CSMConvention;

        r3 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r0 := @parameter1: ucar.nc2.Variable;

        r7 = null;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getUnitsString()>();

        if $r1 == null goto label2;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("hybrid_sigma_pressure");

        if $z0 == 0 goto label1;

        $r6 = new ucar.nc2.dataset.conv.CSMConvention$HybridSigmaPressureBuilder;

        specialinvoke $r6.<ucar.nc2.dataset.conv.CSMConvention$HybridSigmaPressureBuilder: void <init>(ucar.nc2.dataset.conv.CSMConvention,ucar.nc2.dataset.conv.CSMConvention$1)>(r2, null);

        r7 = virtualinvoke $r6.<ucar.nc2.dataset.conv.CSMConvention$HybridSigmaPressureBuilder: ucar.nc2.dataset.CoordinateTransform makeCoordinateTransform(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Variable)>(r3, r0);

        goto label2;

     label1:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("sigma_level");

        if $z1 == 0 goto label2;

        $r5 = new ucar.nc2.dataset.conv.CSMConvention$SigmaBuilder;

        specialinvoke $r5.<ucar.nc2.dataset.conv.CSMConvention$SigmaBuilder: void <init>(ucar.nc2.dataset.conv.CSMConvention,ucar.nc2.dataset.conv.CSMConvention$1)>(r2, null);

        r7 = virtualinvoke $r5.<ucar.nc2.dataset.conv.CSMConvention$SigmaBuilder: ucar.nc2.dataset.CoordinateTransform makeCoordinateTransform(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Variable)>(r3, r0);

     label2:
        if r7 == null goto label3;

        return r7;

     label3:
        $r4 = specialinvoke r2.<ucar.nc2.dataset.conv.COARDSConvention: ucar.nc2.dataset.CoordinateTransform makeCoordinateTransform(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Variable)>(r3, r0);

        return $r4;
    }

    protected boolean addParameter2(ucar.nc2.dataset.CoordinateTransform, java.lang.String, ucar.nc2.NetcdfFile, ucar.nc2.Variable, java.lang.String, boolean)
    {
        java.lang.Object[] $r15, $r17, $r20;
        double[] $r12, r23;
        java.util.Formatter $r16, $r18, $r21;
        ucar.nc2.dataset.conv.CSMConvention r14;
        ucar.nc2.dataset.CoordinateTransform r6;
        ucar.nc2.Variable r1, $r5;
        java.lang.String r2, $r3, $r4, r8, $r22;
        boolean z0;
        java.io.IOException $r19;
        ucar.ma2.Array $r9;
        ucar.unidata.util.Parameter $r7, $r13;
        java.lang.Class $r10;
        java.lang.Object $r11;
        ucar.nc2.NetcdfFile r0;

        r14 := @this: ucar.nc2.dataset.conv.CSMConvention;

        r6 := @parameter0: ucar.nc2.dataset.CoordinateTransform;

        r8 := @parameter1: java.lang.String;

        r0 := @parameter2: ucar.nc2.NetcdfFile;

        r1 := @parameter3: ucar.nc2.Variable;

        r2 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        $r3 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(r1, r2, null);

        if null != $r3 goto label1;

        $r18 = r14.<ucar.nc2.dataset.conv.CSMConvention: java.util.Formatter parseInfo>;

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r2;

        virtualinvoke $r18.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("CSMConvention No Attribute named %s\n", $r17);

        return 0;

     label1:
        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $r5 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>($r4);

        if null != $r5 goto label2;

        $r16 = r14.<ucar.nc2.dataset.conv.CSMConvention: java.util.Formatter parseInfo>;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = $r4;

        virtualinvoke $r16.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("CSMConvention No Variable named %s\n", $r15);

        return 0;

     label2:
        if z0 == 0 goto label7;

     label3:
        $r9 = virtualinvoke $r5.<ucar.nc2.Variable: ucar.ma2.Array read()>();

     label4:
        goto label6;

     label5:
        $r19 := @caughtexception;

        $r21 = r14.<ucar.nc2.dataset.conv.CSMConvention: java.util.Formatter parseInfo>;

        $r20 = newarray (java.lang.Object)[2];

        $r20[0] = $r4;

        $r22 = virtualinvoke $r19.<java.io.IOException: java.lang.String getMessage()>();

        $r20[1] = $r22;

        virtualinvoke $r21.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("CSMConvention failed on read of %s err= %s\n", $r20);

        return 0;

     label6:
        $r10 = <java.lang.Double: java.lang.Class TYPE>;

        $r11 = virtualinvoke $r9.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r10);

        $r12 = (double[]) $r11;

        r23 = (double[]) $r12;

        $r13 = new ucar.unidata.util.Parameter;

        specialinvoke $r13.<ucar.unidata.util.Parameter: void <init>(java.lang.String,double[])>(r8, r23);

        virtualinvoke r6.<ucar.nc2.dataset.CoordinateTransform: void addParameter(ucar.unidata.util.Parameter)>($r13);

        goto label8;

     label7:
        $r7 = new ucar.unidata.util.Parameter;

        specialinvoke $r7.<ucar.unidata.util.Parameter: void <init>(java.lang.String,java.lang.String)>(r8, $r4);

        virtualinvoke r6.<ucar.nc2.dataset.CoordinateTransform: void addParameter(ucar.unidata.util.Parameter)>($r7);

     label8:
        return 1;

        catch java.io.IOException from label3 to label4 with label5;
    }

    static java.util.Formatter access$200(ucar.nc2.dataset.conv.CSMConvention)
    {
        ucar.nc2.dataset.conv.CSMConvention r0;
        java.util.Formatter $r1;

        r0 := @parameter0: ucar.nc2.dataset.conv.CSMConvention;

        $r1 = r0.<ucar.nc2.dataset.conv.CSMConvention: java.util.Formatter parseInfo>;

        return $r1;
    }

    static java.lang.String access$300(ucar.nc2.dataset.conv.CSMConvention)
    {
        java.lang.String $r1;
        ucar.nc2.dataset.conv.CSMConvention r0;

        r0 := @parameter0: ucar.nc2.dataset.conv.CSMConvention;

        $r1 = r0.<ucar.nc2.dataset.conv.CSMConvention: java.lang.String conventionName>;

        return $r1;
    }

    static java.util.Formatter access$400(ucar.nc2.dataset.conv.CSMConvention)
    {
        ucar.nc2.dataset.conv.CSMConvention r0;
        java.util.Formatter $r1;

        r0 := @parameter0: ucar.nc2.dataset.conv.CSMConvention;

        $r1 = r0.<ucar.nc2.dataset.conv.CSMConvention: java.util.Formatter parseInfo>;

        return $r1;
    }
}
