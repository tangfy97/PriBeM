public class com.jidesoft.swing.CheckBoxListWithSelectable extends javax.swing.JList implements java.awt.ItemSelectable
{
    protected com.jidesoft.swing.CheckBoxListCellRenderer _listCellRenderer;
    public static final java.lang.String PROPERTY_CHECKBOX_ENABLED;
    public static final java.lang.String PROPERTY_CLICK_IN_CHECKBOX_ONLY;
    private boolean _checkBoxEnabled;
    private boolean _clickInCheckBoxOnly;

    public void <init>()
    {
        com.jidesoft.swing.CheckBoxListWithSelectable r0;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        specialinvoke r0.<javax.swing.JList: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _clickInCheckBoxOnly> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void init()>();

        return;
    }

    public void <init>(java.util.Vector)
    {
        java.util.Vector r1, $r2;
        com.jidesoft.swing.CheckBoxListWithSelectable r0;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        r1 := @parameter0: java.util.Vector;

        $r2 = staticinvoke <com.jidesoft.swing.CheckBoxListWithSelectable: java.util.Vector wrap(java.util.Vector)>(r1);

        specialinvoke r0.<javax.swing.JList: void <init>(java.util.Vector)>($r2);

        r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _clickInCheckBoxOnly> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void init()>();

        return;
    }

    public void <init>(java.lang.Object[])
    {
        java.lang.Object[] r1;
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        com.jidesoft.swing.Selectable[] $r2;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        r1 := @parameter0: java.lang.Object[];

        $r2 = staticinvoke <com.jidesoft.swing.CheckBoxListWithSelectable: com.jidesoft.swing.Selectable[] wrap(java.lang.Object[])>(r1);

        specialinvoke r0.<javax.swing.JList: void <init>(java.lang.Object[])>($r2);

        r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _clickInCheckBoxOnly> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void init()>();

        return;
    }

    public void <init>(javax.swing.ListModel)
    {
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        javax.swing.ListModel r1, $r2;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        r1 := @parameter0: javax.swing.ListModel;

        $r2 = staticinvoke <com.jidesoft.swing.CheckBoxListWithSelectable: javax.swing.ListModel wrap(javax.swing.ListModel)>(r1);

        specialinvoke r0.<javax.swing.JList: void <init>(javax.swing.ListModel)>($r2);

        r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _clickInCheckBoxOnly> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void init()>();

        return;
    }

    protected void init()
    {
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        com.jidesoft.swing.CheckBoxListCellRenderer $r1;
        com.jidesoft.swing.CheckBoxListWithSelectable$Handler $r2;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void setSelectionMode(int)>(2);

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: com.jidesoft.swing.CheckBoxListCellRenderer createCellRenderer()>();

        r0.<com.jidesoft.swing.CheckBoxListWithSelectable: com.jidesoft.swing.CheckBoxListCellRenderer _listCellRenderer> = $r1;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: com.jidesoft.swing.CheckBoxListWithSelectable$Handler createHandler()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void addMouseListener(java.awt.event.MouseListener)>($r2);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void addKeyListener(java.awt.event.KeyListener)>($r2);

        return;
    }

    protected com.jidesoft.swing.CheckBoxListCellRenderer createCellRenderer()
    {
        com.jidesoft.swing.CheckBoxListWithSelectable r1;
        com.jidesoft.swing.CheckBoxListCellRenderer $r0;

        r1 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        $r0 = new com.jidesoft.swing.CheckBoxListCellRenderer;

        specialinvoke $r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void <init>()>();

        return $r0;
    }

    protected com.jidesoft.swing.CheckBoxListWithSelectable$Handler createHandler()
    {
        com.jidesoft.swing.CheckBoxListWithSelectable r1;
        com.jidesoft.swing.CheckBoxListWithSelectable$Handler $r0;

        r1 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        $r0 = new com.jidesoft.swing.CheckBoxListWithSelectable$Handler;

        specialinvoke $r0.<com.jidesoft.swing.CheckBoxListWithSelectable$Handler: void <init>(com.jidesoft.swing.CheckBoxListWithSelectable)>(r1);

        return $r0;
    }

    public void setSelectedObjects(java.lang.Object[])
    {
        java.lang.Object[] r1;
        com.jidesoft.swing.CheckBoxListWithSelectable r2;
        int i0, i1;
        java.util.HashMap $r0;
        java.lang.Object r3;

        r2 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r1[i1];

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, "");

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r2.<com.jidesoft.swing.CheckBoxListWithSelectable: void setSelectedObjects(java.util.Map)>($r0);

        return;
    }

    public void setSelectedObjects(java.util.Vector)
    {
        java.util.Vector r1;
        java.util.Iterator $r2;
        com.jidesoft.swing.CheckBoxListWithSelectable r3;
        java.util.HashMap $r0;
        java.lang.Object $r4;
        boolean $z0;

        r3 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        r1 := @parameter0: java.util.Vector;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r1.<java.util.Vector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "");

        goto label1;

     label2:
        specialinvoke r3.<com.jidesoft.swing.CheckBoxListWithSelectable: void setSelectedObjects(java.util.Map)>($r0);

        return;
    }

    public javax.swing.ListCellRenderer getCellRenderer()
    {
        javax.swing.ListCellRenderer $r2, $r4;
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        com.jidesoft.swing.CheckBoxListCellRenderer $r1, $r3, $r5;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        $r1 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: com.jidesoft.swing.CheckBoxListCellRenderer _listCellRenderer>;

        if $r1 == null goto label1;

        $r3 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: com.jidesoft.swing.CheckBoxListCellRenderer _listCellRenderer>;

        $r4 = specialinvoke r0.<javax.swing.JList: javax.swing.ListCellRenderer getCellRenderer()>();

        virtualinvoke $r3.<com.jidesoft.swing.CheckBoxListCellRenderer: void setActualListRenderer(javax.swing.ListCellRenderer)>($r4);

        $r5 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: com.jidesoft.swing.CheckBoxListCellRenderer _listCellRenderer>;

        return $r5;

     label1:
        $r2 = specialinvoke r0.<javax.swing.JList: javax.swing.ListCellRenderer getCellRenderer()>();

        return $r2;
    }

    public javax.swing.ListCellRenderer getActualCellRenderer()
    {
        javax.swing.ListCellRenderer $r2, $r4;
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        com.jidesoft.swing.CheckBoxListCellRenderer $r1, $r3;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        $r1 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: com.jidesoft.swing.CheckBoxListCellRenderer _listCellRenderer>;

        if $r1 == null goto label1;

        $r3 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: com.jidesoft.swing.CheckBoxListCellRenderer _listCellRenderer>;

        $r4 = virtualinvoke $r3.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.ListCellRenderer getActualListRenderer()>();

        return $r4;

     label1:
        $r2 = specialinvoke r0.<javax.swing.JList: javax.swing.ListCellRenderer getCellRenderer()>();

        return $r2;
    }

    private void setSelectedObjects(java.util.Map)
    {
        java.util.Map r5;
        int $i0, $i1, i2;
        com.jidesoft.swing.DefaultSelectable $r9;
        boolean $z0, $z1, $z2;
        java.awt.event.ItemEvent $r7, $r8;
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        java.lang.Object $r3, $r6, r10;
        com.jidesoft.swing.Selectable r4;
        javax.swing.ListModel $r1, $r2;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        r5 := @parameter0: java.util.Map;

        i2 = 0;

     label1:
        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: javax.swing.ListModel getModel()>();

        $i0 = interfaceinvoke $r1.<javax.swing.ListModel: int getSize()>();

        if i2 >= $i0 goto label5;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: javax.swing.ListModel getModel()>();

        $r3 = interfaceinvoke $r2.<javax.swing.ListModel: java.lang.Object getElementAt(int)>(i2);

        r10 = $r3;

        $z0 = $r3 instanceof com.jidesoft.swing.Selectable;

        if $z0 == 0 goto label4;

        r4 = (com.jidesoft.swing.Selectable) $r3;

        $z1 = r4 instanceof com.jidesoft.swing.DefaultSelectable;

        if $z1 == 0 goto label2;

        $r9 = (com.jidesoft.swing.DefaultSelectable) r4;

        r10 = virtualinvoke $r9.<com.jidesoft.swing.DefaultSelectable: java.lang.Object getObject()>();

     label2:
        $r6 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        if $r6 == null goto label3;

        interfaceinvoke r4.<com.jidesoft.swing.Selectable: void setSelected(boolean)>(1);

        $r8 = new java.awt.event.ItemEvent;

        specialinvoke $r8.<java.awt.event.ItemEvent: void <init>(java.awt.ItemSelectable,int,java.lang.Object,int)>(r0, 701, r4, 1);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void fireItemStateChanged(java.awt.event.ItemEvent)>($r8);

        interfaceinvoke r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r10);

        $i1 = interfaceinvoke r5.<java.util.Map: int size()>();

        if $i1 != 0 goto label4;

        goto label5;

     label3:
        $z2 = interfaceinvoke r4.<com.jidesoft.swing.Selectable: boolean isSelected()>();

        if $z2 == 0 goto label4;

        interfaceinvoke r4.<com.jidesoft.swing.Selectable: void setSelected(boolean)>(0);

        $r7 = new java.awt.event.ItemEvent;

        specialinvoke $r7.<java.awt.event.ItemEvent: void <init>(java.awt.ItemSelectable,int,java.lang.Object,int)>(r0, 701, r4, 2);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void fireItemStateChanged(java.awt.event.ItemEvent)>($r7);

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void repaint()>();

        return;
    }

    private static javax.swing.ListModel wrap(javax.swing.ListModel)
    {
        java.lang.IllegalArgumentException $r2;
        int $i0, i1;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        javax.swing.ListModel r0;
        boolean $z0;

        r0 := @parameter0: javax.swing.ListModel;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r0.<javax.swing.ListModel: int getSize()>();

        if i1 >= $i0 goto label3;

        $r1 = interfaceinvoke r0.<javax.swing.ListModel: java.lang.Object getElementAt(int)>(i1);

        $z0 = $r1 instanceof com.jidesoft.swing.Selectable;

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The ListModel contains an element which is not an instance of Selectable at index ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r0;
    }

    private static com.jidesoft.swing.Selectable[] wrap(java.lang.Object[])
    {
        java.lang.Object[] r0;
        com.jidesoft.swing.Selectable[] r1, $r4, $r5;
        int $i0, $i1, i2;
        com.jidesoft.swing.DefaultSelectable $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        $z0 = r0 instanceof com.jidesoft.swing.Selectable[];

        if $z0 == 0 goto label1;

        $r4 = (com.jidesoft.swing.Selectable[]) r0;

        $r5 = (com.jidesoft.swing.Selectable[]) $r4;

        return $r5;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (com.jidesoft.swing.Selectable)[$i0];

        i2 = 0;

     label2:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label3;

        $r2 = new com.jidesoft.swing.DefaultSelectable;

        $r3 = r0[i2];

        specialinvoke $r2.<com.jidesoft.swing.DefaultSelectable: void <init>(java.lang.Object)>($r3);

        r1[i2] = $r2;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r1;
    }

    private static java.util.Vector wrap(java.util.Vector)
    {
        java.util.Iterator $r2;
        java.util.Vector $r0, r1;
        com.jidesoft.swing.DefaultSelectable $r4;
        java.lang.Object $r3;
        com.jidesoft.swing.Selectable $r5;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Vector;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        $r2 = virtualinvoke r1.<java.util.Vector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r3 instanceof com.jidesoft.swing.Selectable;

        if $z1 == 0 goto label2;

        $r5 = (com.jidesoft.swing.Selectable) $r3;

        virtualinvoke $r0.<java.util.Vector: boolean add(java.lang.Object)>($r5);

        goto label3;

     label2:
        $r4 = new com.jidesoft.swing.DefaultSelectable;

        specialinvoke $r4.<com.jidesoft.swing.DefaultSelectable: void <init>(java.lang.Object)>($r3);

        virtualinvoke $r0.<java.util.Vector: boolean add(java.lang.Object)>($r4);

     label3:
        goto label1;

     label4:
        return $r0;
    }

    public boolean isClickInCheckBoxOnly()
    {
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        $z0 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _clickInCheckBoxOnly>;

        return $z0;
    }

    public void setClickInCheckBoxOnly(boolean)
    {
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        boolean z0, $z1, z2, $z3;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _clickInCheckBoxOnly>;

        if z0 == $z1 goto label1;

        z2 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _clickInCheckBoxOnly>;

        r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _clickInCheckBoxOnly> = z0;

        $z3 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _clickInCheckBoxOnly>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void firePropertyChange(java.lang.String,boolean,boolean)>("clickInCheckBoxOnly", z2, $z3);

     label1:
        return;
    }

    public void addItemListener(java.awt.event.ItemListener)
    {
        java.awt.event.ItemListener r1;
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        javax.swing.event.EventListenerList $r2;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        r1 := @parameter0: java.awt.event.ItemListener;

        $r2 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: javax.swing.event.EventListenerList listenerList>;

        virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "Ljava/awt/event/ItemListener;", r1);

        return;
    }

    public void removeItemListener(java.awt.event.ItemListener)
    {
        java.awt.event.ItemListener r1;
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        javax.swing.event.EventListenerList $r2;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        r1 := @parameter0: java.awt.event.ItemListener;

        $r2 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: javax.swing.event.EventListenerList listenerList>;

        virtualinvoke $r2.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>(class "Ljava/awt/event/ItemListener;", r1);

        return;
    }

    public java.awt.event.ItemListener[] getItemListeners()
    {
        java.util.EventListener[] $r2;
        java.awt.event.ItemListener[] $r3;
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        javax.swing.event.EventListenerList $r1;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        $r1 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: javax.swing.event.EventListenerList listenerList>;

        $r2 = virtualinvoke $r1.<javax.swing.event.EventListenerList: java.util.EventListener[] getListeners(java.lang.Class)>(class "Ljava/awt/event/ItemListener;");

        $r3 = (java.awt.event.ItemListener[]) $r2;

        return $r3;
    }

    protected void fireItemStateChanged(java.awt.event.ItemEvent)
    {
        java.awt.event.ItemEvent r7, r9, $r10;
        java.lang.Object[] $r2;
        java.awt.event.ItemListener $r5;
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        javax.swing.event.EventListenerList $r1;
        int $i0, $i1, $i2, i3, $i5;
        java.lang.Object $r3, $r4, $r8;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        r7 := @parameter0: java.awt.event.ItemEvent;

        $r1 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: javax.swing.event.EventListenerList listenerList>;

        $r2 = virtualinvoke $r1.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>();

        r9 = null;

        $i0 = lengthof $r2;

        i3 = $i0 - 2;

     label1:
        if i3 < 0 goto label4;

        $r3 = $r2[i3];

        if $r3 != class "Ljava/awt/event/ItemListener;" goto label3;

        if r9 != null goto label2;

        $r10 = new java.awt.event.ItemEvent;

        $r8 = virtualinvoke r7.<java.awt.event.ItemEvent: java.lang.Object getItem()>();

        $i2 = virtualinvoke r7.<java.awt.event.ItemEvent: int getStateChange()>();

        specialinvoke $r10.<java.awt.event.ItemEvent: void <init>(java.awt.ItemSelectable,int,java.lang.Object,int)>(r0, 701, $r8, $i2);

        r9 = $r10;

     label2:
        $i1 = i3 + 1;

        $r4 = $r2[$i1];

        $r5 = (java.awt.event.ItemListener) $r4;

        interfaceinvoke $r5.<java.awt.event.ItemListener: void itemStateChanged(java.awt.event.ItemEvent)>(r9);

     label3:
        $i5 = (int) -2;

        i3 = i3 + $i5;

        goto label1;

     label4:
        return;
    }

    public java.lang.Object[] getSelectedObjects()
    {
        java.lang.Object[] $r3;
        java.util.Vector $r0;
        com.jidesoft.swing.CheckBoxListWithSelectable r1;
        int $i0, i1;
        com.jidesoft.swing.DefaultSelectable $r7;
        java.lang.Object $r5, $r8;
        com.jidesoft.swing.Selectable r6;
        javax.swing.ListModel $r2, $r4;
        boolean $z0, $z1, $z2;

        r1 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        i1 = 0;

     label1:
        $r2 = virtualinvoke r1.<com.jidesoft.swing.CheckBoxListWithSelectable: javax.swing.ListModel getModel()>();

        $i0 = interfaceinvoke $r2.<javax.swing.ListModel: int getSize()>();

        if i1 >= $i0 goto label4;

        $r4 = virtualinvoke r1.<com.jidesoft.swing.CheckBoxListWithSelectable: javax.swing.ListModel getModel()>();

        $r5 = interfaceinvoke $r4.<javax.swing.ListModel: java.lang.Object getElementAt(int)>(i1);

        $z0 = $r5 instanceof com.jidesoft.swing.Selectable;

        if $z0 == 0 goto label3;

        r6 = (com.jidesoft.swing.Selectable) $r5;

        $z1 = interfaceinvoke r6.<com.jidesoft.swing.Selectable: boolean isSelected()>();

        if $z1 == 0 goto label3;

        $z2 = r6 instanceof com.jidesoft.swing.DefaultSelectable;

        if $z2 == 0 goto label2;

        $r7 = (com.jidesoft.swing.DefaultSelectable) r6;

        $r8 = virtualinvoke $r7.<com.jidesoft.swing.DefaultSelectable: java.lang.Object getObject()>();

        virtualinvoke $r0.<java.util.Vector: boolean add(java.lang.Object)>($r8);

        goto label3;

     label2:
        virtualinvoke $r0.<java.util.Vector: boolean add(java.lang.Object)>(r6);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r3 = virtualinvoke $r0.<java.util.Vector: java.lang.Object[] toArray()>();

        return $r3;
    }

    public void selectAll()
    {
        java.awt.event.ItemEvent $r5;
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        int $i0, i1;
        java.lang.Object $r3;
        com.jidesoft.swing.Selectable r4;
        javax.swing.ListModel $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        i1 = 0;

     label1:
        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: javax.swing.ListModel getModel()>();

        $i0 = interfaceinvoke $r1.<javax.swing.ListModel: int getSize()>();

        if i1 >= $i0 goto label3;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: javax.swing.ListModel getModel()>();

        $r3 = interfaceinvoke $r2.<javax.swing.ListModel: java.lang.Object getElementAt(int)>(i1);

        $z0 = $r3 instanceof com.jidesoft.swing.Selectable;

        if $z0 == 0 goto label2;

        r4 = (com.jidesoft.swing.Selectable) $r3;

        $z1 = interfaceinvoke r4.<com.jidesoft.swing.Selectable: boolean isEnabled()>();

        if $z1 == 0 goto label2;

        $z2 = interfaceinvoke r4.<com.jidesoft.swing.Selectable: boolean isSelected()>();

        if $z2 != 0 goto label2;

        interfaceinvoke r4.<com.jidesoft.swing.Selectable: void setSelected(boolean)>(1);

        $r5 = new java.awt.event.ItemEvent;

        specialinvoke $r5.<java.awt.event.ItemEvent: void <init>(java.awt.ItemSelectable,int,java.lang.Object,int)>(r0, 701, r4, 1);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void fireItemStateChanged(java.awt.event.ItemEvent)>($r5);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void repaint()>();

        return;
    }

    public void selectNone()
    {
        java.awt.event.ItemEvent $r5;
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        int $i0, i1;
        java.lang.Object $r3;
        com.jidesoft.swing.Selectable r4;
        javax.swing.ListModel $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        i1 = 0;

     label1:
        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: javax.swing.ListModel getModel()>();

        $i0 = interfaceinvoke $r1.<javax.swing.ListModel: int getSize()>();

        if i1 >= $i0 goto label3;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: javax.swing.ListModel getModel()>();

        $r3 = interfaceinvoke $r2.<javax.swing.ListModel: java.lang.Object getElementAt(int)>(i1);

        $z0 = $r3 instanceof com.jidesoft.swing.Selectable;

        if $z0 == 0 goto label2;

        r4 = (com.jidesoft.swing.Selectable) $r3;

        $z1 = interfaceinvoke r4.<com.jidesoft.swing.Selectable: boolean isEnabled()>();

        if $z1 == 0 goto label2;

        $z2 = interfaceinvoke r4.<com.jidesoft.swing.Selectable: boolean isSelected()>();

        if $z2 == 0 goto label2;

        interfaceinvoke r4.<com.jidesoft.swing.Selectable: void setSelected(boolean)>(0);

        $r5 = new java.awt.event.ItemEvent;

        specialinvoke $r5.<java.awt.event.ItemEvent: void <init>(java.awt.ItemSelectable,int,java.lang.Object,int)>(r0, 701, r4, 2);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void fireItemStateChanged(java.awt.event.ItemEvent)>($r5);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void repaint()>();

        return;
    }

    public void setListData(java.util.Vector)
    {
        java.util.Vector r1, $r2;
        com.jidesoft.swing.CheckBoxListWithSelectable r0;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        r1 := @parameter0: java.util.Vector;

        $r2 = staticinvoke <com.jidesoft.swing.CheckBoxListWithSelectable: java.util.Vector wrap(java.util.Vector)>(r1);

        specialinvoke r0.<javax.swing.JList: void setListData(java.util.Vector)>($r2);

        return;
    }

    public void setListData(java.lang.Object[])
    {
        java.lang.Object[] r1;
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        com.jidesoft.swing.Selectable[] $r2;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        r1 := @parameter0: java.lang.Object[];

        $r2 = staticinvoke <com.jidesoft.swing.CheckBoxListWithSelectable: com.jidesoft.swing.Selectable[] wrap(java.lang.Object[])>(r1);

        specialinvoke r0.<javax.swing.JList: void setListData(java.lang.Object[])>($r2);

        return;
    }

    public int getNextMatch(java.lang.String, int, javax.swing.text.Position$Bias)
    {
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        javax.swing.text.Position$Bias r2;
        int i0, $i2;
        java.lang.String r1;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: javax.swing.text.Position$Bias;

        $i2 = (int) -1;

        return $i2;
    }

    public boolean isCheckBoxEnabled()
    {
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        $z0 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _checkBoxEnabled>;

        return $z0;
    }

    public boolean isCheckBoxVisible(int)
    {
        int i0;
        com.jidesoft.swing.CheckBoxListWithSelectable r0;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        i0 := @parameter0: int;

        return 1;
    }

    public void setCheckBoxEnabled(boolean)
    {
        com.jidesoft.swing.CheckBoxListWithSelectable r0;
        java.lang.Boolean r1, $r2, $r3;
        boolean z0, $z1, $z2;

        r0 := @this: com.jidesoft.swing.CheckBoxListWithSelectable;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _checkBoxEnabled>;

        if z0 == $z1 goto label5;

        $z2 = r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _checkBoxEnabled>;

        if $z2 == 0 goto label1;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label2;

     label1:
        $r2 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label2:
        r1 = $r2;

        if z0 == 0 goto label3;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label4;

     label3:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label4:
        r0.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean _checkBoxEnabled> = z0;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("checkBoxEnabled", r1, $r3);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListWithSelectable: void repaint()>();

     label5:
        return;
    }

    public static void <clinit>()
    {
        <com.jidesoft.swing.CheckBoxListWithSelectable: java.lang.String PROPERTY_CLICK_IN_CHECKBOX_ONLY> = "clickInCheckBoxOnly";

        <com.jidesoft.swing.CheckBoxListWithSelectable: java.lang.String PROPERTY_CHECKBOX_ENABLED> = "checkBoxEnabled";

        return;
    }
}
