public class org.joda.time.format.DateTimeFormat extends java.lang.Object
{
    static final int FULL;
    static final int LONG;
    static final int MEDIUM;
    static final int SHORT;
    static final int NONE;
    static final int DATE;
    static final int TIME;
    static final int DATETIME;
    private static final java.util.Map cPatternedCache;
    private static final org.joda.time.format.DateTimeFormatter[] cStyleCache;

    public static org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>(r0);

        return $r1;
    }

    public static org.joda.time.format.DateTimeFormatter forStyle(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.String patternForStyle(java.lang.String, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormat$StyleFormatter $r3;
        org.joda.time.format.DateTimeFormatter $r1;
        java.util.Locale r5;
        org.joda.time.format.DateTimePrinter $r2;
        java.lang.String r0, $r4;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.Locale;

        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>(r0);

        if r5 != null goto label1;

        r5 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter getPrinter()>();

        $r3 = (org.joda.time.format.DateTimeFormat$StyleFormatter) $r2;

        $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>(r5);

        return $r4;
    }

    public static org.joda.time.format.DateTimeFormatter shortDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(3, 4);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter shortTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(4, 3);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter shortDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(3, 3);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter mediumDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(2, 4);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter mediumTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(4, 2);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter mediumDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(2, 2);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter longDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(1, 4);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter longTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(4, 1);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter longDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(1, 1);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter fullDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(0, 4);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter fullTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(4, 0);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter fullDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(0, 0);

        return $r0;
    }

    static void appendPatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String)
    {
        java.lang.String r1;
        org.joda.time.format.DateTimeFormatterBuilder r0;

        r0 := @parameter0: org.joda.time.format.DateTimeFormatterBuilder;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>(r0, r1);

        return;
    }

    protected void <init>()
    {
        org.joda.time.format.DateTimeFormat r0;

        r0 := @this: org.joda.time.format.DateTimeFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String)
    {
        int[] r1;
        boolean $z0, $z1, z2, z3, z4;
        org.joda.time.format.DateTimeFormatterBuilder r3;
        java.lang.StringBuffer $r12, $r13, $r18;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i19, i20, i21, $i22, $i23, $i24;
        java.lang.String r0, $r2, $r4, $r7, $r8, $r14, $r17;
        org.joda.time.DateTime $r15, $r16;
        char $c2, $c18;
        java.lang.IllegalArgumentException $r19;

        r3 := @parameter0: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = newarray (int)[1];

        i19 = 0;

     label01:
        if i19 >= $i0 goto label43;

        r1[0] = i19;

        $r2 = staticinvoke <org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>(r0, r1);

        i20 = r1[0];

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 != 0 goto label02;

        goto label43;

     label02:
        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i22 = (int) $c2;

        tableswitch($i22)
        {
            case 39: goto label39;
            case 40: goto label41;
            case 41: goto label41;
            case 42: goto label41;
            case 43: goto label41;
            case 44: goto label41;
            case 45: goto label41;
            case 46: goto label41;
            case 47: goto label41;
            case 48: goto label41;
            case 49: goto label41;
            case 50: goto label41;
            case 51: goto label41;
            case 52: goto label41;
            case 53: goto label41;
            case 54: goto label41;
            case 55: goto label41;
            case 56: goto label41;
            case 57: goto label41;
            case 58: goto label41;
            case 59: goto label41;
            case 60: goto label41;
            case 61: goto label41;
            case 62: goto label41;
            case 63: goto label41;
            case 64: goto label41;
            case 65: goto label41;
            case 66: goto label41;
            case 67: goto label04;
            case 68: goto label32;
            case 69: goto label30;
            case 70: goto label41;
            case 71: goto label03;
            case 72: goto label23;
            case 73: goto label41;
            case 74: goto label41;
            case 75: goto label25;
            case 76: goto label41;
            case 77: goto label17;
            case 78: goto label41;
            case 79: goto label41;
            case 80: goto label41;
            case 81: goto label41;
            case 82: goto label41;
            case 83: goto label28;
            case 84: goto label41;
            case 85: goto label41;
            case 86: goto label41;
            case 87: goto label41;
            case 88: goto label41;
            case 89: goto label05;
            case 90: goto label36;
            case 91: goto label41;
            case 92: goto label41;
            case 93: goto label41;
            case 94: goto label41;
            case 95: goto label41;
            case 96: goto label41;
            case 97: goto label21;
            case 98: goto label41;
            case 99: goto label41;
            case 100: goto label20;
            case 101: goto label29;
            case 102: goto label41;
            case 103: goto label41;
            case 104: goto label22;
            case 105: goto label41;
            case 106: goto label41;
            case 107: goto label24;
            case 108: goto label41;
            case 109: goto label26;
            case 110: goto label41;
            case 111: goto label41;
            case 112: goto label41;
            case 113: goto label41;
            case 114: goto label41;
            case 115: goto label27;
            case 116: goto label41;
            case 117: goto label41;
            case 118: goto label41;
            case 119: goto label33;
            case 120: goto label05;
            case 121: goto label05;
            case 122: goto label34;
            default: goto label41;
        };

     label03:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>();

        goto label42;

     label04:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>($i1, $i1);

        goto label42;

     label05:
        if $i1 != 2 goto label10;

        z2 = 1;

        z4 = 1;

        z3 = 1;

        $i8 = i20 + 1;

        if $i8 >= $i0 goto label07;

        $i13 = r1[0];

        $i14 = $i13 + 1;

        r1[0] = $i14;

        $r7 = staticinvoke <org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>(r0, r1);

        $z1 = staticinvoke <org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>($r7);

        if $z1 == 0 goto label06;

        z2 = 0;

        z4 = 0;

        z3 = 0;

     label06:
        $i15 = r1[0];

        $i16 = $i15 - 1;

        r1[0] = $i16;

     label07:
        $i23 = (int) $c2;

        lookupswitch($i23)
        {
            case 89: goto label09;
            case 120: goto label08;
            case 121: goto label09;
            default: goto label09;
        };

     label08:
        $r15 = new org.joda.time.DateTime;

        specialinvoke $r15.<org.joda.time.DateTime: void <init>()>();

        $i9 = virtualinvoke $r15.<org.joda.time.DateTime: int getWeekyear()>();

        $i10 = $i9 - 30;

        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>($i10, z3);

        goto label42;

     label09:
        $r16 = new org.joda.time.DateTime;

        specialinvoke $r16.<org.joda.time.DateTime: void <init>()>();

        $i11 = virtualinvoke $r16.<org.joda.time.DateTime: int getYear()>();

        $i12 = $i11 - 30;

        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>($i12, z4);

        goto label42;

     label10:
        i21 = 9;

        $i3 = i20 + 1;

        if $i3 >= $i0 goto label12;

        $i4 = r1[0];

        $i5 = $i4 + 1;

        r1[0] = $i5;

        $r4 = staticinvoke <org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>(r0, r1);

        $z0 = staticinvoke <org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>($r4);

        if $z0 == 0 goto label11;

        i21 = $i1;

     label11:
        $i6 = r1[0];

        $i7 = $i6 - 1;

        r1[0] = $i7;

     label12:
        $i24 = (int) $c2;

        lookupswitch($i24)
        {
            case 89: goto label15;
            case 120: goto label13;
            case 121: goto label14;
            default: goto label16;
        };

     label13:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>($i1, i21);

        goto label16;

     label14:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>($i1, i21);

        goto label16;

     label15:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>($i1, i21);

     label16:
        goto label42;

     label17:
        if $i1 < 3 goto label19;

        if $i1 < 4 goto label18;

        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>();

        goto label42;

     label18:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>();

        goto label42;

     label19:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>($i1);

        goto label42;

     label20:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>($i1);

        goto label42;

     label21:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>();

        goto label42;

     label22:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>($i1);

        goto label42;

     label23:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>($i1);

        goto label42;

     label24:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>($i1);

        goto label42;

     label25:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>($i1);

        goto label42;

     label26:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>($i1);

        goto label42;

     label27:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>($i1);

        goto label42;

     label28:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>($i1, $i1);

        goto label42;

     label29:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>($i1);

        goto label42;

     label30:
        if $i1 < 4 goto label31;

        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>();

        goto label42;

     label31:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>();

        goto label42;

     label32:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>($i1);

        goto label42;

     label33:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>($i1);

        goto label42;

     label34:
        if $i1 < 4 goto label35;

        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>();

        goto label42;

     label35:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName()>();

        goto label42;

     label36:
        if $i1 != 1 goto label37;

        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>(null, 0, 2, 2);

        goto label42;

     label37:
        if $i1 != 2 goto label38;

        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>(null, 1, 2, 2);

        goto label42;

     label38:
        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>();

        goto label42;

     label39:
        $r8 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(1);

        $i17 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i17 != 1 goto label40;

        $c18 = virtualinvoke $r8.<java.lang.String: char charAt(int)>(0);

        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>($c18);

        goto label42;

     label40:
        $r17 = new java.lang.String;

        specialinvoke $r17.<java.lang.String: void <init>(java.lang.String)>($r8);

        virtualinvoke r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>($r17);

        goto label42;

     label41:
        $r19 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal pattern component: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r19;

     label42:
        i19 = i20 + 1;

        goto label01;

     label43:
        return;
    }

    private static java.lang.String parseToken(java.lang.String, int[])
    {
        int[] r1;
        java.lang.StringBuffer $r4;
        int $i0, $i3, $i4, $i6, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23;
        java.lang.String r2, $r3;
        boolean z0, $z1;
        char $c1, $c2, $c5, $c7;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: int[];

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        i8 = r1[0];

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i8);

        $i10 = (int) $c1;

        if $i10 < 65 goto label01;

        $i11 = (int) $c1;

        if $i11 <= 90 goto label02;

     label01:
        $i12 = (int) $c1;

        if $i12 < 97 goto label04;

        $i13 = (int) $c1;

        if $i13 > 122 goto label04;

     label02:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label03:
        $i9 = i8 + 1;

        if $i9 >= $i0 goto label14;

        $i6 = i8 + 1;

        $c7 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i6);

        $i14 = (int) $c7;

        $i15 = (int) $c1;

        if $i14 != $i15 goto label14;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        i8 = i8 + 1;

        goto label03;

     label04:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        z0 = 0;

     label05:
        if i8 >= $i0 goto label14;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i8);

        $i16 = (int) $c2;

        if $i16 != 39 goto label09;

        $i3 = i8 + 1;

        if $i3 >= $i0 goto label06;

        $i4 = i8 + 1;

        $c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i4);

        $i17 = (int) $c5;

        if $i17 != 39 goto label06;

        i8 = i8 + 1;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        goto label13;

     label06:
        if z0 != 0 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        z0 = $z1;

        goto label13;

     label09:
        if z0 != 0 goto label12;

        $i18 = (int) $c2;

        if $i18 < 65 goto label10;

        $i19 = (int) $c2;

        if $i19 <= 90 goto label11;

     label10:
        $i20 = (int) $c2;

        if $i20 < 97 goto label12;

        $i21 = (int) $c2;

        if $i21 > 122 goto label12;

     label11:
        $i23 = (int) -1;

        i8 = i8 + $i23;

        goto label14;

     label12:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label13:
        i8 = i8 + 1;

        goto label05;

     label14:
        r1[0] = i8;

        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    private static boolean isNumericToken(java.lang.String)
    {
        int $i0, $i2;
        char $c1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        tableswitch($i2)
        {
            case 67: goto label1;
            case 68: goto label1;
            case 69: goto label3;
            case 70: goto label1;
            case 71: goto label3;
            case 72: goto label1;
            case 73: goto label3;
            case 74: goto label3;
            case 75: goto label1;
            case 76: goto label3;
            case 77: goto label2;
            case 78: goto label3;
            case 79: goto label3;
            case 80: goto label3;
            case 81: goto label3;
            case 82: goto label3;
            case 83: goto label1;
            case 84: goto label3;
            case 85: goto label3;
            case 86: goto label3;
            case 87: goto label1;
            case 88: goto label3;
            case 89: goto label1;
            case 90: goto label3;
            case 91: goto label3;
            case 92: goto label3;
            case 93: goto label3;
            case 94: goto label3;
            case 95: goto label3;
            case 96: goto label3;
            case 97: goto label3;
            case 98: goto label3;
            case 99: goto label1;
            case 100: goto label1;
            case 101: goto label1;
            case 102: goto label3;
            case 103: goto label3;
            case 104: goto label1;
            case 105: goto label3;
            case 106: goto label3;
            case 107: goto label1;
            case 108: goto label3;
            case 109: goto label1;
            case 110: goto label3;
            case 111: goto label3;
            case 112: goto label3;
            case 113: goto label3;
            case 114: goto label3;
            case 115: goto label1;
            case 116: goto label3;
            case 117: goto label3;
            case 118: goto label3;
            case 119: goto label1;
            case 120: goto label1;
            case 121: goto label1;
            default: goto label3;
        };

     label1:
        return 1;

     label2:
        if $i0 > 2 goto label3;

        return 1;

     label3:
        return 0;
    }

    private static org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)
    {
        java.lang.Throwable $r8;
        org.joda.time.format.DateTimeFormatterBuilder $r5;
        org.joda.time.format.DateTimeFormatter $r6, r9;
        java.lang.IllegalArgumentException $r1;
        java.util.Map $r2, $r3, $r7;
        int $i0;
        java.lang.Object $r4;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid pattern specification");

        throw $r1;

     label2:
        $r2 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache>;

        entermonitor $r2;

     label3:
        $r3 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r9 = (org.joda.time.format.DateTimeFormatter) $r4;

        if r9 != null goto label4;

        $r5 = new org.joda.time.format.DateTimeFormatterBuilder;

        specialinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>();

        staticinvoke <org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>($r5, r0);

        $r6 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>();

        r9 = $r6;

        $r7 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r6);

     label4:
        exitmonitor $r2;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        exitmonitor $r2;

     label7:
        throw $r8;

     label8:
        return r9;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private static org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter $r6;
        char $c1, $c3;
        java.lang.IllegalArgumentException $r1, $r7;
        java.lang.StringBuffer $r2, $r3, $r4;
        int $i0, $i2, $i4;
        java.lang.String r0, $r5;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == 2 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid style specification: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i2 = staticinvoke <org.joda.time.format.DateTimeFormat: int selectStyle(char)>($c1);

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        $i4 = staticinvoke <org.joda.time.format.DateTimeFormat: int selectStyle(char)>($c3);

        if $i2 != 4 goto label3;

        if $i4 != 4 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Style \'--\' is invalid");

        throw $r7;

     label3:
        $r6 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>($i2, $i4);

        return $r6;
    }

    private static org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int, int)
    {
        java.lang.Throwable $r2;
        org.joda.time.format.DateTimeFormatter r3, $r5;
        org.joda.time.format.DateTimeFormat$StyleFormatter $r4;
        byte b5;
        int i0, $i1, i2, $i3, i4;
        org.joda.time.format.DateTimeFormatter[] $r0, $r1, $r6;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $i1 = i0 << 2;

        $i3 = $i1 + i0;

        i4 = $i3 + i2;

        $r0 = <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter[] cStyleCache>;

        entermonitor $r0;

     label1:
        $r1 = <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter[] cStyleCache>;

        r3 = $r1[i4];

        if r3 != null goto label4;

        b5 = 2;

        if i0 != 4 goto label2;

        b5 = 1;

        goto label3;

     label2:
        if i2 != 4 goto label3;

        b5 = 0;

     label3:
        $r4 = new org.joda.time.format.DateTimeFormat$StyleFormatter;

        specialinvoke $r4.<org.joda.time.format.DateTimeFormat$StyleFormatter: void <init>(int,int,int)>(i0, i2, b5);

        $r5 = new org.joda.time.format.DateTimeFormatter;

        specialinvoke $r5.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>($r4, $r4);

        r3 = $r5;

        $r6 = <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter[] cStyleCache>;

        $r6[i4] = $r5;

     label4:
        exitmonitor $r0;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label7:
        throw $r2;

     label8:
        return r3;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private static int selectStyle(char)
    {
        java.lang.StringBuffer $r2, $r3, $r5;
        int $i1;
        char c0;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r6;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        lookupswitch($i1)
        {
            case 45: goto label5;
            case 70: goto label4;
            case 76: goto label3;
            case 77: goto label2;
            case 83: goto label1;
            default: goto label6;
        };

     label1:
        return 3;

     label2:
        return 2;

     label3:
        return 1;

     label4:
        return 0;

     label5:
        return 4;

     label6:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid style character: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r6;
    }

    static void <clinit>()
    {
        org.joda.time.format.DateTimeFormatter[] $r1;
        java.util.HashMap $r0;

        <org.joda.time.format.DateTimeFormat: int DATETIME> = 2;

        <org.joda.time.format.DateTimeFormat: int TIME> = 1;

        <org.joda.time.format.DateTimeFormat: int DATE> = 0;

        <org.joda.time.format.DateTimeFormat: int NONE> = 4;

        <org.joda.time.format.DateTimeFormat: int SHORT> = 3;

        <org.joda.time.format.DateTimeFormat: int MEDIUM> = 2;

        <org.joda.time.format.DateTimeFormat: int LONG> = 1;

        <org.joda.time.format.DateTimeFormat: int FULL> = 0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(7);

        <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache> = $r0;

        $r1 = newarray (org.joda.time.format.DateTimeFormatter)[25];

        <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter[] cStyleCache> = $r1;

        return;
    }
}
