final class org.mozilla.javascript.NativeNumber extends org.mozilla.javascript.IdScriptableObject
{
    static final long serialVersionUID;
    private static final java.lang.Object NUMBER_TAG;
    private static final int MAX_PRECISION;
    private static final int Id_constructor;
    private static final int Id_toString;
    private static final int Id_toLocaleString;
    private static final int Id_toSource;
    private static final int Id_valueOf;
    private static final int Id_toFixed;
    private static final int Id_toExponential;
    private static final int Id_toPrecision;
    private static final int MAX_PROTOTYPE_ID;
    private double doubleValue;

    static void init(org.mozilla.javascript.Scriptable, boolean)
    {
        org.mozilla.javascript.Scriptable r1;
        org.mozilla.javascript.NativeNumber $r0;
        boolean z0;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        z0 := @parameter1: boolean;

        $r0 = new org.mozilla.javascript.NativeNumber;

        specialinvoke $r0.<org.mozilla.javascript.NativeNumber: void <init>(double)>(0.0);

        virtualinvoke $r0.<org.mozilla.javascript.NativeNumber: org.mozilla.javascript.IdFunctionObject exportAsJSClass(int,org.mozilla.javascript.Scriptable,boolean)>(8, r1, z0);

        return;
    }

    private void <init>(double)
    {
        org.mozilla.javascript.NativeNumber r0;
        double d0;

        r0 := @this: org.mozilla.javascript.NativeNumber;

        d0 := @parameter0: double;

        specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: void <init>()>();

        r0.<org.mozilla.javascript.NativeNumber: double doubleValue> = d0;

        return;
    }

    public java.lang.String getClassName()
    {
        org.mozilla.javascript.NativeNumber r0;

        r0 := @this: org.mozilla.javascript.NativeNumber;

        return "Number";
    }

    protected void fillConstructorProperties(org.mozilla.javascript.IdFunctionObject)
    {
        org.mozilla.javascript.IdFunctionObject r0;
        java.lang.Double $r1;
        java.lang.Number $r2, $r3, $r4, $r5;
        org.mozilla.javascript.NativeNumber r6;

        r6 := @this: org.mozilla.javascript.NativeNumber;

        r0 := @parameter0: org.mozilla.javascript.IdFunctionObject;

        $r1 = <org.mozilla.javascript.ScriptRuntime: java.lang.Double NaNobj>;

        virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: void defineProperty(java.lang.String,java.lang.Object,int)>("NaN", $r1, 7);

        $r2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Number wrapNumber(double)>(#Infinity);

        virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: void defineProperty(java.lang.String,java.lang.Object,int)>("POSITIVE_INFINITY", $r2, 7);

        $r3 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Number wrapNumber(double)>(#-Infinity);

        virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: void defineProperty(java.lang.String,java.lang.Object,int)>("NEGATIVE_INFINITY", $r3, 7);

        $r4 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Number wrapNumber(double)>(1.7976931348623157E308);

        virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: void defineProperty(java.lang.String,java.lang.Object,int)>("MAX_VALUE", $r4, 7);

        $r5 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Number wrapNumber(double)>(4.9E-324);

        virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: void defineProperty(java.lang.String,java.lang.Object,int)>("MIN_VALUE", $r5, 7);

        specialinvoke r6.<org.mozilla.javascript.IdScriptableObject: void fillConstructorProperties(org.mozilla.javascript.IdFunctionObject)>(r0);

        return;
    }

    protected void initPrototypeId(int)
    {
        byte b1;
        int i0;
        java.lang.Object $r4;
        java.lang.String $r2, r3;
        java.lang.IllegalArgumentException $r1;
        org.mozilla.javascript.NativeNumber r0;

        r0 := @this: org.mozilla.javascript.NativeNumber;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            default: goto label09;
        };

     label01:
        b1 = 1;

        r3 = "constructor";

        goto label10;

     label02:
        b1 = 1;

        r3 = "toString";

        goto label10;

     label03:
        b1 = 1;

        r3 = "toLocaleString";

        goto label10;

     label04:
        b1 = 0;

        r3 = "toSource";

        goto label10;

     label05:
        b1 = 0;

        r3 = "valueOf";

        goto label10;

     label06:
        b1 = 1;

        r3 = "toFixed";

        goto label10;

     label07:
        b1 = 1;

        r3 = "toExponential";

        goto label10;

     label08:
        b1 = 1;

        r3 = "toPrecision";

        goto label10;

     label09:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label10:
        $r4 = <org.mozilla.javascript.NativeNumber: java.lang.Object NUMBER_TAG>;

        virtualinvoke r0.<org.mozilla.javascript.NativeNumber: void initPrototypeMethod(java.lang.Object,int,java.lang.String,int)>($r4, i0, r3, b1);

        return;
    }

    public java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject, org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        boolean $z0, $z1;
        org.mozilla.javascript.Scriptable r2, r25;
        org.mozilla.javascript.EcmaError $r19;
        java.lang.Object[] r4;
        org.mozilla.javascript.IdFunctionObject r0;
        java.lang.StringBuffer $r10, $r12, $r13, $r28;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String $r5, $r6, $r7, $r11, $r14, $r16, $r18;
        java.lang.Number $r8, $r20;
        double $d0, d1;
        org.mozilla.javascript.Context r24;
        java.lang.IllegalArgumentException $r29;
        org.mozilla.javascript.NativeNumber $r3, r23, $r27;
        java.lang.Object $r1, $r15, $r22, $r26;

        r23 := @this: org.mozilla.javascript.NativeNumber;

        r0 := @parameter0: org.mozilla.javascript.IdFunctionObject;

        r24 := @parameter1: org.mozilla.javascript.Context;

        r25 := @parameter2: org.mozilla.javascript.Scriptable;

        r2 := @parameter3: org.mozilla.javascript.Scriptable;

        r4 := @parameter4: java.lang.Object[];

        $r1 = <org.mozilla.javascript.NativeNumber: java.lang.Object NUMBER_TAG>;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: boolean hasTag(java.lang.Object)>($r1);

        if $z0 != 0 goto label01;

        $r26 = specialinvoke r23.<org.mozilla.javascript.IdScriptableObject: java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r0, r24, r25, r2, r4);

        return $r26;

     label01:
        $i0 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: int methodId()>();

        if $i0 != 1 goto label05;

        $i2 = lengthof r4;

        if $i2 < 1 goto label02;

        $r22 = r4[0];

        $d0 = staticinvoke <org.mozilla.javascript.ScriptRuntime: double toNumber(java.lang.Object)>($r22);

        goto label03;

     label02:
        $d0 = 0.0;

     label03:
        if r2 != null goto label04;

        $r27 = new org.mozilla.javascript.NativeNumber;

        specialinvoke $r27.<org.mozilla.javascript.NativeNumber: void <init>(double)>($d0);

        return $r27;

     label04:
        $r20 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Number wrapNumber(double)>($d0);

        return $r20;

     label05:
        $z1 = r2 instanceof org.mozilla.javascript.NativeNumber;

        if $z1 != 0 goto label06;

        $r19 = staticinvoke <org.mozilla.javascript.NativeNumber: org.mozilla.javascript.EcmaError incompatibleCallError(org.mozilla.javascript.IdFunctionObject)>(r0);

        throw $r19;

     label06:
        $r3 = (org.mozilla.javascript.NativeNumber) r2;

        d1 = $r3.<org.mozilla.javascript.NativeNumber: double doubleValue>;

        tableswitch($i0)
        {
            case 2: goto label07;
            case 3: goto label07;
            case 4: goto label10;
            case 5: goto label11;
            case 6: goto label12;
            case 7: goto label13;
            case 8: goto label14;
            default: goto label15;
        };

     label07:
        $i1 = lengthof r4;

        if $i1 != 0 goto label08;

        $i3 = 10;

        goto label09;

     label08:
        $r15 = r4[0];

        $i3 = staticinvoke <org.mozilla.javascript.ScriptRuntime: int toInt32(java.lang.Object)>($r15);

     label09:
        $r16 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String numberToString(double,int)>(d1, $i3);

        return $r16;

     label10:
        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(new Number(");

        $r11 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(double)>(d1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("))");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;

     label11:
        $r8 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Number wrapNumber(double)>(d1);

        return $r8;

     label12:
        $i5 = (int) -20;

        $r7 = staticinvoke <org.mozilla.javascript.NativeNumber: java.lang.String num_to(double,java.lang.Object[],int,int,int,int)>(d1, r4, 2, 2, $i5, 0);

        return $r7;

     label13:
        $r6 = staticinvoke <org.mozilla.javascript.NativeNumber: java.lang.String num_to(double,java.lang.Object[],int,int,int,int)>(d1, r4, 1, 3, 0, 1);

        return $r6;

     label14:
        $r5 = staticinvoke <org.mozilla.javascript.NativeNumber: java.lang.String num_to(double,java.lang.Object[],int,int,int,int)>(d1, r4, 0, 4, 1, 0);

        return $r5;

     label15:
        $r29 = new java.lang.IllegalArgumentException;

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r29;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.mozilla.javascript.NativeNumber r0;
        double $d0;

        r0 := @this: org.mozilla.javascript.NativeNumber;

        $d0 = r0.<org.mozilla.javascript.NativeNumber: double doubleValue>;

        $r1 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String numberToString(double,int)>($d0, 10);

        return $r1;
    }

    private static java.lang.String num_to(double, java.lang.Object[], int, int, int, int)
    {
        org.mozilla.javascript.EcmaError $r5;
        java.lang.Object[] r0;
        java.lang.StringBuffer $r6;
        int $i0, $i1, i2, i3, $i4, i5, i6, i7;
        java.lang.String $r3, $r4, $r7;
        double d0;
        java.lang.Object $r1, $r2;

        d0 := @parameter0: double;

        r0 := @parameter1: java.lang.Object[];

        i5 := @parameter2: int;

        i6 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        i7 = 0;

        i6 = i5;

        goto label3;

     label1:
        $r1 = r0[0];

        $i1 = staticinvoke <org.mozilla.javascript.ScriptRuntime: int toInt32(java.lang.Object)>($r1);

        i7 = $i1;

        if $i1 < i2 goto label2;

        if $i1 <= 100 goto label3;

     label2:
        $r2 = r0[0];

        $r3 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r2);

        $r4 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String getMessage1(java.lang.String,java.lang.Object)>("msg.bad.precision", $r3);

        $r5 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.EcmaError constructError(java.lang.String,java.lang.String)>("RangeError", $r4);

        throw $r5;

     label3:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $i4 = i7 + i3;

        staticinvoke <org.mozilla.javascript.DToA: void JS_dtostr(java.lang.StringBuffer,int,int,double)>($r6, i6, $i4, d0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    protected int findPrototypeId(java.lang.String)
    {
        byte b4;
        int $i0, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String r0, r2, r3, r4, r5;
        boolean $z0;
        char $c1, $c2, $c3;
        org.mozilla.javascript.NativeNumber r1;

        r1 := @this: org.mozilla.javascript.NativeNumber;

        r0 := @parameter0: java.lang.String;

        b4 = 0;

        r2 = null;

        r5 = null;

        r4 = null;

        r3 = null;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        tableswitch($i0)
        {
            case 7: goto label01;
            case 8: goto label03;
            case 9: goto label09;
            case 10: goto label09;
            case 11: goto label05;
            case 12: goto label09;
            case 13: goto label07;
            case 14: goto label08;
            default: goto label09;
        };

     label01:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i5 = (int) $c3;

        if $i5 != 116 goto label02;

        r2 = "toFixed";

        r5 = "toFixed";

        r4 = "toFixed";

        r3 = "toFixed";

        b4 = 6;

        goto label09;

     label02:
        $i6 = (int) $c3;

        if $i6 != 118 goto label09;

        r2 = "valueOf";

        r5 = "valueOf";

        r4 = "valueOf";

        r3 = "valueOf";

        b4 = 5;

        goto label09;

     label03:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(3);

        $i7 = (int) $c2;

        if $i7 != 111 goto label04;

        r2 = "toSource";

        r5 = "toSource";

        r4 = "toSource";

        r3 = "toSource";

        b4 = 4;

        goto label09;

     label04:
        $i8 = (int) $c2;

        if $i8 != 116 goto label09;

        r2 = "toString";

        r5 = "toString";

        r4 = "toString";

        r3 = "toString";

        b4 = 2;

        goto label09;

     label05:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i9 = (int) $c1;

        if $i9 != 99 goto label06;

        r2 = "constructor";

        r5 = "constructor";

        r4 = "constructor";

        r3 = "constructor";

        b4 = 1;

        goto label09;

     label06:
        $i10 = (int) $c1;

        if $i10 != 116 goto label09;

        r2 = "toPrecision";

        r5 = "toPrecision";

        r4 = "toPrecision";

        r3 = "toPrecision";

        b4 = 8;

        goto label09;

     label07:
        r2 = "toExponential";

        r5 = "toExponential";

        r4 = "toExponential";

        r3 = "toExponential";

        b4 = 7;

        goto label09;

     label08:
        r2 = "toLocaleString";

        r5 = "toLocaleString";

        r4 = "toLocaleString";

        r3 = "toLocaleString";

        b4 = 3;

        goto label09;

     label09:
        if r3 == null goto label10;

        if r4 == r0 goto label10;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label10;

        b4 = 0;

     label10:
        return b4;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <org.mozilla.javascript.NativeNumber: int MAX_PROTOTYPE_ID> = 8;

        <org.mozilla.javascript.NativeNumber: int Id_toPrecision> = 8;

        <org.mozilla.javascript.NativeNumber: int Id_toExponential> = 7;

        <org.mozilla.javascript.NativeNumber: int Id_toFixed> = 6;

        <org.mozilla.javascript.NativeNumber: int Id_valueOf> = 5;

        <org.mozilla.javascript.NativeNumber: int Id_toSource> = 4;

        <org.mozilla.javascript.NativeNumber: int Id_toLocaleString> = 3;

        <org.mozilla.javascript.NativeNumber: int Id_toString> = 2;

        <org.mozilla.javascript.NativeNumber: int Id_constructor> = 1;

        <org.mozilla.javascript.NativeNumber: int MAX_PRECISION> = 100;

        <org.mozilla.javascript.NativeNumber: long serialVersionUID> = 3504516769741512101L;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.mozilla.javascript.NativeNumber: java.lang.Object NUMBER_TAG> = $r0;

        return;
    }
}
