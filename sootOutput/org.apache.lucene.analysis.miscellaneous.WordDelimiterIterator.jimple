public final class org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator extends java.lang.Object
{
    public static final int DONE;
    public static final byte[] DEFAULT_WORD_DELIM_TABLE;
    char[] text;
    int length;
    int startBounds;
    int endBounds;
    int current;
    int end;
    private boolean hasFinalPossessive;
    final boolean splitOnCaseChange;
    final boolean splitOnNumerics;
    final boolean stemEnglishPossessive;
    private final byte[] charTypeTable;
    private boolean skipPossessive;

    void <init>(byte[], boolean, boolean, boolean)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator r0;
        byte[] r1;
        boolean z0, z1, z2;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean hasFinalPossessive> = 0;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean skipPossessive> = 0;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: byte[] charTypeTable> = r1;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean splitOnCaseChange> = z0;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean splitOnNumerics> = z1;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean stemEnglishPossessive> = z2;

        return;
    }

    int next()
    {
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, i25, $i26, $i27, $i28, $i30, $i32, $i33, $i35, $i37, $i38;
        char $c14, $c19;
        char[] $r1, $r2;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator;

        $i0 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current> = $i0;

        $i1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $i30 = (int) -1;

        if $i1 != $i30 goto label1;

        $i32 = (int) -1;

        return $i32;

     label1:
        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean skipPossessive>;

        if $z0 == 0 goto label2;

        $i23 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $i24 = $i23 + 2;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current> = $i24;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean skipPossessive> = 0;

     label2:
        i25 = 0;

     label3:
        $i26 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $i27 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int endBounds>;

        if $i26 >= $i27 goto label4;

        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: char[] text>;

        $i18 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $c19 = $r2[$i18];

        $i33 = (int) $c19;

        $i20 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int charType(int)>($i33);

        i25 = $i20;

        $z3 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isSubwordDelim(int)>($i20);

        if $z3 == 0 goto label4;

        $i21 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $i22 = $i21 + 1;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current> = $i22;

        goto label3;

     label4:
        $i3 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $i2 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int endBounds>;

        if $i3 < $i2 goto label5;

        $i35 = (int) -1;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end> = $i35;

        $i37 = (int) -1;

        return $i37;

     label5:
        $i4 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $i5 = $i4 + 1;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end> = $i5;

     label6:
        $i7 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        $i6 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int endBounds>;

        if $i7 >= $i6 goto label8;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: char[] text>;

        $i13 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        $c14 = $r1[$i13];

        $i38 = (int) $c14;

        $i15 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int charType(int)>($i38);

        $z2 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean isBreak(int,int)>(i25, $i15);

        if $z2 == 0 goto label7;

        goto label8;

     label7:
        i25 = $i15;

        $i16 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        $i17 = $i16 + 1;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end> = $i17;

        goto label6;

     label8:
        $i10 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        $i8 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int endBounds>;

        $i9 = $i8 - 1;

        if $i10 >= $i9 goto label9;

        $i11 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        $i12 = $i11 + 2;

        $z1 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean endsWithPossessive(int)>($i12);

        if $z1 == 0 goto label9;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean skipPossessive> = 1;

     label9:
        $i28 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        return $i28;
    }

    int type()
    {
        char $c2;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator r0;
        int $i0, $i1, $i3, $i5, $i6;
        char[] $r1;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator;

        $i0 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: char[] text>;

        $i1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $c2 = $r1[$i1];

        $i6 = (int) $c2;

        $i3 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int charType(int)>($i6);

        lookupswitch($i3)
        {
            case 1: goto label2;
            case 2: goto label2;
            default: goto label3;
        };

     label2:
        return 3;

     label3:
        return $i3;
    }

    void setText(char[], int)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator r0;
        int i0;
        char[] r1;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: char[] text> = r1;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int endBounds> = i0;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int length> = i0;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end> = 0;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int startBounds> = 0;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current> = 0;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean hasFinalPossessive> = 0;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean skipPossessive> = 0;

        specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: void setBounds()>();

        return;
    }

    private boolean isBreak(int, int)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator r0;
        int i0, i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $i2 = i0 & i1;

        if $i2 == 0 goto label1;

        return 0;

     label1:
        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean splitOnCaseChange>;

        if $z0 != 0 goto label2;

        $z7 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isAlpha(int)>(i1);

        if $z7 == 0 goto label2;

        $z8 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isAlpha(int)>(i0);

        if $z8 == 0 goto label2;

        return 0;

     label2:
        $z9 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isUpper(int)>(i1);

        if $z9 == 0 goto label3;

        $z6 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isAlpha(int)>(i0);

        if $z6 == 0 goto label3;

        return 0;

     label3:
        $z1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean splitOnNumerics>;

        if $z1 != 0 goto label6;

        $z2 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isAlpha(int)>(i1);

        if $z2 == 0 goto label4;

        $z5 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isDigit(int)>(i0);

        if $z5 != 0 goto label5;

     label4:
        $z3 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isDigit(int)>(i1);

        if $z3 == 0 goto label6;

        $z4 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isAlpha(int)>(i0);

        if $z4 == 0 goto label6;

     label5:
        return 0;

     label6:
        return 1;
    }

    boolean isSingleWord()
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator;

        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean hasFinalPossessive>;

        if $z0 == 0 goto label3;

        $i5 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $i4 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int startBounds>;

        if $i5 != $i4 goto label1;

        $i8 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        $i6 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int endBounds>;

        $i7 = $i6 - 2;

        if $i8 != $i7 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        $i1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $i0 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int startBounds>;

        if $i1 != $i0 goto label4;

        $i3 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        $i2 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int endBounds>;

        if $i3 != $i2 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    private void setBounds()
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        boolean $z0, $z1, $z2;
        char $c6, $c11;
        char[] $r1, $r2;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator;

     label1:
        $i1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int startBounds>;

        $i0 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int length>;

        if $i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: char[] text>;

        $i10 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int startBounds>;

        $c11 = $r2[$i10];

        $i17 = (int) $c11;

        $i12 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int charType(int)>($i17);

        $z2 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isSubwordDelim(int)>($i12);

        if $z2 == 0 goto label2;

        $i13 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int startBounds>;

        $i14 = $i13 + 1;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int startBounds> = $i14;

        goto label1;

     label2:
        $i15 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int endBounds>;

        $i16 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int startBounds>;

        if $i15 <= $i16 goto label3;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: char[] text>;

        $i4 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int endBounds>;

        $i5 = $i4 - 1;

        $c6 = $r1[$i5];

        $i18 = (int) $c6;

        $i7 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int charType(int)>($i18);

        $z1 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isSubwordDelim(int)>($i7);

        if $z1 == 0 goto label3;

        $i8 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int endBounds>;

        $i9 = $i8 - 1;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int endBounds> = $i9;

        goto label2;

     label3:
        $i2 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int endBounds>;

        $z0 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean endsWithPossessive(int)>($i2);

        if $z0 == 0 goto label4;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean hasFinalPossessive> = 1;

     label4:
        $i3 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int startBounds>;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current> = $i3;

        return;
    }

    private boolean endsWithPossessive(int)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator r0;
        int i0, $i1, $i3, $i5, $i7, $i8, $i10, $i11, $i13, $i14, $i15, $i16, $i17;
        boolean $z0, $z1, $z2, $z3;
        char $c2, $c4, $c6, $c9, $c12;
        char[] $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean stemEnglishPossessive>;

        if $z0 == 0 goto label3;

        if i0 <= 2 goto label3;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: char[] text>;

        $i1 = i0 - 2;

        $c2 = $r1[$i1];

        $i13 = (int) $c2;

        if $i13 != 39 goto label3;

        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: char[] text>;

        $i3 = i0 - 1;

        $c4 = $r2[$i3];

        $i14 = (int) $c4;

        if $i14 == 115 goto label1;

        $r5 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: char[] text>;

        $i11 = i0 - 1;

        $c12 = $r5[$i11];

        $i15 = (int) $c12;

        if $i15 != 83 goto label3;

     label1:
        $r3 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: char[] text>;

        $i5 = i0 - 3;

        $c6 = $r3[$i5];

        $i16 = (int) $c6;

        $i7 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int charType(int)>($i16);

        $z1 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isAlpha(int)>($i7);

        if $z1 == 0 goto label3;

        $i8 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int endBounds>;

        if i0 == $i8 goto label2;

        $r4 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: char[] text>;

        $c9 = $r4[i0];

        $i17 = (int) $c9;

        $i10 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int charType(int)>($i17);

        $z2 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isSubwordDelim(int)>($i10);

        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    private int charType(int)
    {
        byte[] $r1, $r2;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator r0;
        byte $b2, $b3;
        int i0, $i1, $i4, $i5;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: byte[] charTypeTable>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: byte[] charTypeTable>;

        $b3 = $r2[i0];

        $i4 = (int) $b3;

        return $i4;

     label1:
        $b2 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: byte getType(int)>(i0);

        $i5 = (int) $b2;

        return $i5;
    }

    public static byte getType(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label3;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label4;
            case 10: goto label4;
            case 11: goto label4;
            case 12: goto label6;
            case 13: goto label6;
            case 14: goto label6;
            case 15: goto label6;
            case 16: goto label6;
            case 17: goto label6;
            case 18: goto label6;
            case 19: goto label5;
            default: goto label6;
        };

     label1:
        return 2;

     label2:
        return 1;

     label3:
        return 3;

     label4:
        return 4;

     label5:
        return 7;

     label6:
        return 8;
    }

    static void <clinit>()
    {
        byte[] r0;
        byte b1;
        int i0;
        boolean $z0, $z1, $z2;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int DONE> = -1;

        r0 = newarray (byte)[256];

        i0 = 0;

     label1:
        if i0 >= 256 goto label6;

        b1 = 0;

        $z0 = staticinvoke <java.lang.Character: boolean isLowerCase(int)>(i0);

        if $z0 == 0 goto label2;

        b1 = (byte) 1;

        goto label4;

     label2:
        $z1 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(i0);

        if $z1 == 0 goto label3;

        b1 = (byte) 2;

        goto label4;

     label3:
        $z2 = staticinvoke <java.lang.Character: boolean isDigit(int)>(i0);

        if $z2 == 0 goto label4;

        b1 = (byte) 4;

     label4:
        if b1 != 0 goto label5;

        b1 = 8;

     label5:
        r0[i0] = b1;

        i0 = i0 + 1;

        goto label1;

     label6:
        <org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: byte[] DEFAULT_WORD_DELIM_TABLE> = r0;

        return;
    }
}
