public class org.waveprotocol.wave.client.editor.EditorStaticDeps extends java.lang.Object
{
    public static org.waveprotocol.wave.common.logging.LoggerBundle logger;
    private static org.waveprotocol.wave.client.widget.popup.PopupProvider popupProvider;
    static org.waveprotocol.wave.client.widget.popup.PopupChromeProvider popupChromeProvider;
    private static int ignoreMutations;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.EditorStaticDeps r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorStaticDeps;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static org.waveprotocol.wave.common.logging.LoggerBundle createLogger()
    {
        org.waveprotocol.wave.client.debug.logger.DomLogger $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r2;

        $r1 = new org.waveprotocol.wave.client.debug.logger.DomLogger;

        specialinvoke $r1.<org.waveprotocol.wave.client.debug.logger.DomLogger: void <init>(java.lang.String)>("editor");

        virtualinvoke $r1.<org.waveprotocol.wave.client.debug.logger.DomLogger: void enableModuleBuffer(boolean)>(1);

        $r2 = (org.waveprotocol.wave.common.logging.LoggerBundle) $r1;

        return $r2;
    }

    public static void setPopupProvider(org.waveprotocol.wave.client.widget.popup.PopupProvider)
    {
        org.waveprotocol.wave.client.widget.popup.PopupProvider r0;

        r0 := @parameter0: org.waveprotocol.wave.client.widget.popup.PopupProvider;

        <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.client.widget.popup.PopupProvider popupProvider> = r0;

        return;
    }

    public static void setPopupChromeProvider(org.waveprotocol.wave.client.widget.popup.PopupChromeProvider)
    {
        org.waveprotocol.wave.client.widget.popup.PopupChromeProvider r0;

        r0 := @parameter0: org.waveprotocol.wave.client.widget.popup.PopupChromeProvider;

        <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.client.widget.popup.PopupChromeProvider popupChromeProvider> = r0;

        return;
    }

    public static org.waveprotocol.wave.client.widget.popup.PopupProvider getPopupProvider()
    {
        org.waveprotocol.wave.client.widget.popup.PopupProvider $r0;

        $r0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.client.widget.popup.PopupProvider popupProvider>;

        return $r0;
    }

    public static org.waveprotocol.wave.client.widget.popup.PopupChromeProvider getPopupChromeProvider()
    {
        org.waveprotocol.wave.client.widget.popup.PopupChromeProvider $r0;

        $r0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.client.widget.popup.PopupChromeProvider popupChromeProvider>;

        return $r0;
    }

    public static org.waveprotocol.wave.client.widget.popup.UniversalPopup createPopup(com.google.gwt.dom.client.Element, org.waveprotocol.wave.client.widget.popup.RelativePopupPositioner, boolean, boolean, com.google.gwt.user.client.ui.Widget, org.waveprotocol.wave.client.widget.popup.PopupEventListener)
    {
        org.waveprotocol.wave.client.widget.popup.PopupChromeProvider $r2, $r3;
        org.waveprotocol.wave.client.widget.popup.UniversalPopup $r5;
        org.waveprotocol.wave.client.widget.popup.PopupEventListener r7;
        org.waveprotocol.wave.client.widget.popup.PopupProvider $r4, $r8;
        java.lang.AssertionError $r9;
        org.waveprotocol.wave.client.widget.popup.PopupChrome $r10;
        com.google.gwt.user.client.ui.Widget r6;
        org.waveprotocol.wave.client.widget.popup.RelativePopupPositioner r1;
        com.google.gwt.dom.client.Element r0;
        boolean $z0, z1, z2;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        r1 := @parameter1: org.waveprotocol.wave.client.widget.popup.RelativePopupPositioner;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        r6 := @parameter4: com.google.gwt.user.client.ui.Widget;

        r7 := @parameter5: org.waveprotocol.wave.client.widget.popup.PopupEventListener;

        $z0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r8 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.client.widget.popup.PopupProvider popupProvider>;

        if $r8 != null goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>("PopupProvider not set.");

        throw $r9;

     label1:
        $r4 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.client.widget.popup.PopupProvider popupProvider>;

        $r2 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.client.widget.popup.PopupChromeProvider popupChromeProvider>;

        if $r2 != null goto label2;

        $r10 = null;

        goto label3;

     label2:
        $r3 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.client.widget.popup.PopupChromeProvider popupChromeProvider>;

        $r10 = interfaceinvoke $r3.<org.waveprotocol.wave.client.widget.popup.PopupChromeProvider: org.waveprotocol.wave.client.widget.popup.PopupChrome createPopupChrome()>();

     label3:
        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.client.widget.popup.PopupProvider: org.waveprotocol.wave.client.widget.popup.UniversalPopup createPopup(com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.widget.popup.RelativePopupPositioner,org.waveprotocol.wave.client.widget.popup.PopupChrome,boolean)>(r0, r1, $r10, z1);

        interfaceinvoke $r5.<org.waveprotocol.wave.client.widget.popup.UniversalPopup: void add(com.google.gwt.user.client.ui.Widget)>(r6);

        interfaceinvoke $r5.<org.waveprotocol.wave.client.widget.popup.UniversalPopup: void addPopupEventListener(org.waveprotocol.wave.client.widget.popup.PopupEventListener)>(r7);

        return $r5;
    }

    static boolean shouldIgnoreMutations()
    {
        int $i0;
        boolean $z0;

        $i0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: int ignoreMutations>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void startIgnoreMutations()
    {
        int $i0, $i1;

        $i0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: int ignoreMutations>;

        $i1 = $i0 + 1;

        <org.waveprotocol.wave.client.editor.EditorStaticDeps: int ignoreMutations> = $i1;

        return;
    }

    public static void endIgnoreMutations()
    {
        int $i0, $i1, $i2;
        java.lang.AssertionError $r0;
        boolean $z0;

        $i0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: int ignoreMutations>;

        $i1 = $i0 - 1;

        <org.waveprotocol.wave.client.editor.EditorStaticDeps: int ignoreMutations> = $i1;

        $z0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i2 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: int ignoreMutations>;

        if $i2 >= 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/EditorStaticDeps;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.EditorStaticDeps: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle createLogger()>();

        <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger> = $r1;

        <org.waveprotocol.wave.client.editor.EditorStaticDeps: int ignoreMutations> = 0;

        return;
    }
}
