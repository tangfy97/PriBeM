public class org.eclipse.jdt.internal.compiler.flow.FlowContext extends java.lang.Object implements org.eclipse.jdt.internal.compiler.lookup.TypeConstants
{
    public static final org.eclipse.jdt.internal.compiler.flow.FlowContext NotContinuableContext;
    public org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode;
    public org.eclipse.jdt.internal.compiler.flow.FlowContext parent;
    public org.eclipse.jdt.internal.compiler.flow.NullInfoRegistry initsOnFinally;
    boolean deferNullDiagnostic;
    boolean preemptNullDiagnostic;
    public static final int CAN_ONLY_NULL_NON_NULL;
    public static final int CAN_ONLY_NULL;
    public static final int CAN_ONLY_NON_NULL;
    public static final int MAY_NULL;
    public static final int CHECK_MASK;
    public static final int IN_COMPARISON_NULL;
    public static final int IN_COMPARISON_NON_NULL;
    public static final int IN_ASSIGNMENT;
    public static final int IN_INSTANCEOF;
    public static final int CONTEXT_MASK;

    static void <clinit>()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowContext $r0;

        <org.eclipse.jdt.internal.compiler.flow.FlowContext: int CONTEXT_MASK> = -256;

        <org.eclipse.jdt.internal.compiler.flow.FlowContext: int IN_INSTANCEOF> = 1024;

        <org.eclipse.jdt.internal.compiler.flow.FlowContext: int IN_ASSIGNMENT> = 768;

        <org.eclipse.jdt.internal.compiler.flow.FlowContext: int IN_COMPARISON_NON_NULL> = 512;

        <org.eclipse.jdt.internal.compiler.flow.FlowContext: int IN_COMPARISON_NULL> = 256;

        <org.eclipse.jdt.internal.compiler.flow.FlowContext: int CHECK_MASK> = 255;

        <org.eclipse.jdt.internal.compiler.flow.FlowContext: int MAY_NULL> = 3;

        <org.eclipse.jdt.internal.compiler.flow.FlowContext: int CAN_ONLY_NON_NULL> = 2;

        <org.eclipse.jdt.internal.compiler.flow.FlowContext: int CAN_ONLY_NULL> = 1;

        <org.eclipse.jdt.internal.compiler.flow.FlowContext: int CAN_ONLY_NULL_NON_NULL> = 0;

        $r0 = new org.eclipse.jdt.internal.compiler.flow.FlowContext;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.flow.FlowContext: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.ast.ASTNode)>(null, null);

        <org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext NotContinuableContext> = $r0;

        return;
    }

    public void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.ast.ASTNode)
    {
        org.eclipse.jdt.internal.compiler.flow.NullInfoRegistry $r3;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0, r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.ast.ASTNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent> = r1;

        r0.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode> = r2;

        if r1 == null goto label3;

        $z0 = r1.<org.eclipse.jdt.internal.compiler.flow.FlowContext: boolean deferNullDiagnostic>;

        if $z0 != 0 goto label1;

        $z1 = r1.<org.eclipse.jdt.internal.compiler.flow.FlowContext: boolean preemptNullDiagnostic>;

        if $z1 != 0 goto label1;

        $z2 = 0;

        goto label2;

     label1:
        $z2 = 1;

     label2:
        r0.<org.eclipse.jdt.internal.compiler.flow.FlowContext: boolean deferNullDiagnostic> = $z2;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.NullInfoRegistry initsOnFinally>;

        r0.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.NullInfoRegistry initsOnFinally> = $r3;

     label3:
        return;
    }

    public org.eclipse.jdt.internal.compiler.codegen.BranchLabel breakLabel()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        return null;
    }

    public void checkExceptionHandlers(org.eclipse.jdt.internal.compiler.lookup.TypeBinding, org.eclipse.jdt.internal.compiler.ast.ASTNode, org.eclipse.jdt.internal.compiler.flow.FlowInfo, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r22;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] $r5, $r6;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0, r17;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z10, z11;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding $r12;
        org.eclipse.jdt.internal.compiler.ast.TryStatement r21;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r9;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r2;
        org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement $r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r8, r10, $r11, r20;
        int i0, i1, $i2, $i4;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r13, r14;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r3, $r4, $r15, $r16;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r19;
        org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext r18;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r7 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        r10 := @parameter1: org.eclipse.jdt.internal.compiler.ast.ASTNode;

        r2 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        r9 := @parameter3: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r17 = r0;

        goto label14;

     label01:
        $r1 = virtualinvoke r17.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement subroutine()>();

        if $r1 == null goto label02;

        $z8 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement: boolean isSubRoutineEscaping()>();

        if $z8 == 0 goto label02;

        return;

     label02:
        $z0 = r17 instanceof org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;

        if $z0 == 0 goto label12;

        r18 = (org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext) r17;

        $r5 = r18.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions>;

        $r6 = <org.eclipse.jdt.internal.compiler.lookup.Binding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] NO_EXCEPTIONS>;

        if $r5 == $r6 goto label10;

        z9 = 0;

        z11 = 0;

        z10 = 0;

        i1 = 0;

        i0 = lengthof $r5;

        goto label09;

     label03:
        r14 = $r5[i1];

        if r14 != null goto label04;

        $i4 = (int) -1;

        $i2 = $i4;

        goto label05;

     label04:
        $i2 = staticinvoke <org.eclipse.jdt.internal.compiler.lookup.Scope: int compareTypes(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r7, r14);

     label05:
        tableswitch($i2)
        {
            case -1: goto label06;
            case 0: goto label08;
            case 1: goto label07;
            default: goto label08;
        };

     label06:
        $r16 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        virtualinvoke r18.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: void recordHandlingException(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)>(r14, $r16, r7, r10, z11);

        z9 = 1;

        z11 = 1;

        z10 = 1;

        goto label08;

     label07:
        $r15 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        virtualinvoke r18.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: void recordHandlingException(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)>(r14, $r15, r7, r10, 0);

     label08:
        i1 = i1 + 1;

     label09:
        if i1 < i0 goto label03;

        if z10 == 0 goto label10;

        return;

     label10:
        $z3 = r18.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: boolean isMethodContext>;

        if $z3 == 0 goto label12;

        $z4 = virtualinvoke r7.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isUncheckedException(boolean)>(0);

        if $z4 == 0 goto label11;

        return;

     label11:
        $r8 = r18.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        $z5 = $r8 instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        if $z5 == 0 goto label15;

        $r11 = r18.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        r19 = (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) $r11;

        $z6 = virtualinvoke r19.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean isConstructor()>();

        if $z6 == 0 goto label15;

        $r12 = r19.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding declaringClass>;

        $z7 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean isAnonymousType()>();

        if $z7 == 0 goto label15;

        virtualinvoke r18.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: void mergeUnhandledException(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r7);

        return;

     label12:
        $r3 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        virtualinvoke r17.<org.eclipse.jdt.internal.compiler.flow.FlowContext: void recordReturnFrom(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r3);

        $z1 = r17 instanceof org.eclipse.jdt.internal.compiler.flow.InsideSubRoutineFlowContext;

        if $z1 == 0 goto label13;

        r20 = r17.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        $z2 = r20 instanceof org.eclipse.jdt.internal.compiler.ast.TryStatement;

        if $z2 == 0 goto label13;

        r21 = (org.eclipse.jdt.internal.compiler.ast.TryStatement) r20;

        $r4 = r21.<org.eclipse.jdt.internal.compiler.ast.TryStatement: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo subRoutineInits>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r4);

     label13:
        r17 = r17.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent>;

     label14:
        if r17 != null goto label01;

     label15:
        $r22 = virtualinvoke r9.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void unhandledException(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r7, r10);

        return;
    }

    public void checkExceptionHandlers(org.eclipse.jdt.internal.compiler.lookup.TypeBinding[], org.eclipse.jdt.internal.compiler.ast.ASTNode, org.eclipse.jdt.internal.compiler.flow.FlowInfo, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r13;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] $r6, $r7;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r1, r24;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r8, $r10, $r11, $r18, $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding $r16;
        org.eclipse.jdt.internal.compiler.ast.TryStatement r29;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r12;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r3;
        org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement $r2;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r9, r14, $r15, r28;
        int $i0, i1, i2, i3, i4, $i5, i6, i7, i8, i9, i10, $i12, $i14;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r17, r19;
        boolean[] r26;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] $r0, r23;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r4, $r5, $r21, $r22;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r27;
        org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext r25;

        r1 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r23 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.TypeBinding[];

        r14 := @parameter1: org.eclipse.jdt.internal.compiler.ast.ASTNode;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        r12 := @parameter3: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        if r23 == null goto label01;

        $i0 = lengthof r23;

        if $i0 != 0 goto label02;

     label01:
        return;

     label02:
        i1 = $i0;

        $r0 = newarray (org.eclipse.jdt.internal.compiler.lookup.TypeBinding)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r23, 0, $r0, 0, $i0);

        r24 = r1;

        goto label27;

     label03:
        $r2 = virtualinvoke r24.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement subroutine()>();

        if $r2 == null goto label04;

        $z11 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement: boolean isSubRoutineEscaping()>();

        if $z11 == 0 goto label04;

        return;

     label04:
        $z0 = r24 instanceof org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;

        if $z0 == 0 goto label24;

        r25 = (org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext) r24;

        $r6 = r25.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions>;

        $r7 = <org.eclipse.jdt.internal.compiler.lookup.Binding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] NO_EXCEPTIONS>;

        if $r6 == $r7 goto label17;

        i2 = lengthof $r6;

        r26 = newarray (boolean)[$i0];

        i3 = 0;

        goto label13;

     label05:
        r19 = $r6[i3];

        i4 = 0;

        goto label12;

     label06:
        $r20 = $r0[i4];

        if $r20 == null goto label11;

        if r19 != null goto label07;

        $i12 = (int) -1;

        $i5 = $i12;

        goto label08;

     label07:
        $i5 = staticinvoke <org.eclipse.jdt.internal.compiler.lookup.Scope: int compareTypes(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r20, r19);

     label08:
        tableswitch($i5)
        {
            case -1: goto label09;
            case 0: goto label11;
            case 1: goto label10;
            default: goto label11;
        };

     label09:
        $r22 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        $z8 = r26[i4];

        virtualinvoke r25.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: void recordHandlingException(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)>(r19, $r22, $r20, r14, $z8);

        $z9 = r26[i4];

        if $z9 != 0 goto label11;

        r26[i4] = 1;

        $i14 = (int) -1;

        i1 = i1 + $i14;

        goto label11;

     label10:
        $r21 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        virtualinvoke r25.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: void recordHandlingException(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)>(r19, $r21, $r20, r14, 0);

     label11:
        i4 = i4 + 1;

     label12:
        if i4 < $i0 goto label06;

        i3 = i3 + 1;

     label13:
        if i3 < i2 goto label05;

        i6 = 0;

        goto label16;

     label14:
        $z10 = r26[i6];

        if $z10 == 0 goto label15;

        $r0[i6] = null;

     label15:
        i6 = i6 + 1;

     label16:
        if i6 < $i0 goto label14;

     label17:
        $z3 = r25.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: boolean isMethodContext>;

        if $z3 == 0 goto label24;

        i7 = 0;

        goto label20;

     label18:
        $r8 = $r0[i7];

        if $r8 == null goto label19;

        $z4 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isUncheckedException(boolean)>(0);

        if $z4 == 0 goto label19;

        $r0[i7] = null;

     label19:
        i7 = i7 + 1;

     label20:
        if i7 < $i0 goto label18;

        $r9 = r25.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        $z5 = $r9 instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        if $z5 == 0 goto label28;

        $r15 = r25.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        r27 = (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) $r15;

        $z6 = virtualinvoke r27.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean isConstructor()>();

        if $z6 == 0 goto label28;

        $r16 = r27.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $r17 = $r16.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding declaringClass>;

        $z7 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean isAnonymousType()>();

        if $z7 == 0 goto label28;

        i8 = 0;

        goto label23;

     label21:
        $r18 = $r0[i8];

        if $r18 == null goto label22;

        virtualinvoke r25.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: void mergeUnhandledException(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r18);

     label22:
        i8 = i8 + 1;

     label23:
        if i8 < $i0 goto label21;

        return;

     label24:
        if i1 != 0 goto label25;

        return;

     label25:
        $r4 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        virtualinvoke r24.<org.eclipse.jdt.internal.compiler.flow.FlowContext: void recordReturnFrom(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r4);

        $z1 = r24 instanceof org.eclipse.jdt.internal.compiler.flow.InsideSubRoutineFlowContext;

        if $z1 == 0 goto label26;

        r28 = r24.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        $z2 = r28 instanceof org.eclipse.jdt.internal.compiler.ast.TryStatement;

        if $z2 == 0 goto label26;

        r29 = (org.eclipse.jdt.internal.compiler.ast.TryStatement) r28;

        $r5 = r29.<org.eclipse.jdt.internal.compiler.ast.TryStatement: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo subRoutineInits>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r5);

     label26:
        r24 = r24.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent>;

     label27:
        if r24 != null goto label03;

     label28:
        i9 = 0;

        goto label34;

     label29:
        $r10 = $r0[i9];

        if $r10 == null goto label33;

        i10 = 0;

        goto label32;

     label30:
        $r11 = $r0[i10];

        if $r11 != $r10 goto label31;

        goto label33;

     label31:
        i10 = i10 + 1;

     label32:
        if i10 < i9 goto label30;

        $r13 = virtualinvoke r12.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void unhandledException(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r10, r14);

     label33:
        i9 = i9 + 1;

     label34:
        if i9 < $i0 goto label29;

        return;
    }

    public org.eclipse.jdt.internal.compiler.codegen.BranchLabel continueLabel()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        return null;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowContext getTargetContextForBreakLabel(char[])
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0, r5, r6;
        int $i0, $i1;
        char[] $r1, r2;
        org.eclipse.jdt.internal.compiler.ast.LabeledStatement $r4;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r2 := @parameter0: char[];

        r5 = r0;

        r6 = null;

        goto label5;

     label1:
        $z0 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.flow.FlowContext: boolean isNonReturningContext()>();

        if $z0 == 0 goto label2;

        r6 = r5;

     label2:
        $r1 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.flow.FlowContext: char[] labelName()>();

        if $r1 == null goto label4;

        $z1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>($r1, r2);

        if $z1 == 0 goto label4;

        $r3 = r5.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        $r4 = (org.eclipse.jdt.internal.compiler.ast.LabeledStatement) $r3;

        $i0 = $r4.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int bits>;

        $i1 = $i0 | 64;

        $r4.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int bits> = $i1;

        if r6 != null goto label3;

        return r5;

     label3:
        return r6;

     label4:
        r5 = r5.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent>;

     label5:
        if r5 != null goto label1;

        return null;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowContext getTargetContextForContinueLabel(char[])
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2, $r5, $r6, $r7;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0, $r4, r8, r9, r10;
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.ast.LabeledStatement $r3;
        boolean $z0, $z1, $z2;
        char[] r1, $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r1 := @parameter0: char[];

        r8 = r0;

        r9 = null;

        r10 = null;

        goto label7;

     label1:
        $z0 = virtualinvoke r8.<org.eclipse.jdt.internal.compiler.flow.FlowContext: boolean isNonReturningContext()>();

        if $z0 == 0 goto label2;

        r10 = r8;

        goto label3;

     label2:
        $z1 = virtualinvoke r8.<org.eclipse.jdt.internal.compiler.flow.FlowContext: boolean isContinuable()>();

        if $z1 == 0 goto label3;

        r9 = r8;

     label3:
        $r11 = virtualinvoke r8.<org.eclipse.jdt.internal.compiler.flow.FlowContext: char[] labelName()>();

        if $r11 == null goto label6;

        $z2 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>($r11, r1);

        if $z2 == 0 goto label6;

        $r2 = r8.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        $r3 = (org.eclipse.jdt.internal.compiler.ast.LabeledStatement) $r2;

        $i0 = $r3.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int bits>;

        $i1 = $i0 | 64;

        $r3.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int bits> = $i1;

        if r9 == null goto label5;

        $r5 = r8.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.ASTNode: org.eclipse.jdt.internal.compiler.ast.ASTNode concreteStatement()>();

        $r7 = r9.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        if $r6 != $r7 goto label5;

        if r10 != null goto label4;

        return r9;

     label4:
        return r10;

     label5:
        $r4 = <org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext NotContinuableContext>;

        return $r4;

     label6:
        r8 = r8.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent>;

     label7:
        if r8 != null goto label1;

        return null;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowContext getTargetContextForDefaultBreak()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0, r2, r3;
        char[] $r1;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r2 = r0;

        r3 = null;

        goto label5;

     label1:
        $z0 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.flow.FlowContext: boolean isNonReturningContext()>();

        if $z0 == 0 goto label2;

        r3 = r2;

     label2:
        $z1 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.flow.FlowContext: boolean isBreakable()>();

        if $z1 == 0 goto label4;

        $r1 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.flow.FlowContext: char[] labelName()>();

        if $r1 != null goto label4;

        if r3 != null goto label3;

        return r2;

     label3:
        return r3;

     label4:
        r2 = r2.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent>;

     label5:
        if r2 != null goto label1;

        return null;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowContext getTargetContextForDefaultContinue()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0, r1, r2;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r1 = r0;

        r2 = null;

        goto label5;

     label1:
        $z0 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.flow.FlowContext: boolean isNonReturningContext()>();

        if $z0 == 0 goto label2;

        r2 = r1;

     label2:
        $z1 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.flow.FlowContext: boolean isContinuable()>();

        if $z1 == 0 goto label4;

        if r2 != null goto label3;

        return r1;

     label3:
        return r2;

     label4:
        r1 = r1.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent>;

     label5:
        if r1 != null goto label1;

        return null;
    }

    public java.lang.String individualToString()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        return "Flow context";
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo initsOnBreak()
    {
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r0;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        $r0 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        return $r0;
    }

    public org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnReturn()
    {
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r0;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        $r0 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        return $r0;
    }

    public boolean isBreakable()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        return 0;
    }

    public boolean isContinuable()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        return 0;
    }

    public boolean isNonReturningContext()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        return 0;
    }

    public boolean isSubRoutine()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        return 0;
    }

    public char[] labelName()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        return null;
    }

    public void recordBreakFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r1;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        return;
    }

    public void recordBreakTo(org.eclipse.jdt.internal.compiler.flow.FlowContext)
    {
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0, r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        return;
    }

    public void recordContinueFrom(org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r2;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0, r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        return;
    }

    protected boolean recordFinalAssignment(org.eclipse.jdt.internal.compiler.lookup.VariableBinding, org.eclipse.jdt.internal.compiler.ast.Reference)
    {
        org.eclipse.jdt.internal.compiler.lookup.VariableBinding r1;
        org.eclipse.jdt.internal.compiler.ast.Reference r2;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.VariableBinding;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.ast.Reference;

        return 1;
    }

    protected void recordNullReference(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding, org.eclipse.jdt.internal.compiler.ast.Expression, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression r2;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0;
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding r1;
        int i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.ast.Expression;

        i0 := @parameter2: int;

        return;
    }

    public void recordReturnFrom(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)
    {
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo r1;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo;

        return;
    }

    public void recordSettingFinal(org.eclipse.jdt.internal.compiler.lookup.VariableBinding, org.eclipse.jdt.internal.compiler.ast.Reference, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.VariableBinding r2;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;
        org.eclipse.jdt.internal.compiler.ast.Reference r3;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r1, r4;
        int $i0, $i1;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.VariableBinding;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.ast.Reference;

        r0 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label4;

        r4 = r1;

        goto label3;

     label1:
        $z0 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.flow.FlowContext: boolean recordFinalAssignment(org.eclipse.jdt.internal.compiler.lookup.VariableBinding,org.eclipse.jdt.internal.compiler.ast.Reference)>(r2, r3);

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        r4 = r4.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent>;

     label3:
        if r4 != null goto label1;

     label4:
        return;
    }

    public void recordUsingNullReference(org.eclipse.jdt.internal.compiler.lookup.Scope, org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding, org.eclipse.jdt.internal.compiler.ast.Expression, int, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding r1;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;
        org.eclipse.jdt.internal.compiler.ast.Expression r4;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r2, $r5, $r14;
        int $i0, $i1, i2, $i3, $i5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.eclipse.jdt.internal.compiler.lookup.Scope r3;

        r2 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.Scope;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding;

        r4 := @parameter2: org.eclipse.jdt.internal.compiler.ast.Expression;

        i2 := @parameter3: int;

        r0 := @parameter4: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label01;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: boolean isDefinitelyUnknown(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r1);

        if $z0 == 0 goto label02;

     label01:
        return;

     label02:
        lookupswitch(i2)
        {
            case 3: goto label14;
            case 256: goto label03;
            case 257: goto label07;
            case 512: goto label03;
            case 513: goto label07;
            case 769: goto label07;
            case 1025: goto label07;
            default: goto label16;
        };

     label03:
        $z3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: boolean isDefinitelyNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r1);

        if $z3 == 0 goto label06;

        if i2 != 512 goto label04;

        $r11 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void localVariableRedundantCheckOnNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r1, r4);

        goto label05;

     label04:
        $r10 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void localVariableNonNullComparedToNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r1, r4);

     label05:
        return;

     label06:
        $z4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: boolean cannotBeDefinitelyNullOrNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r1);

        if $z4 == 0 goto label07;

        return;

     label07:
        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: boolean isDefinitelyNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r1);

        if $z1 == 0 goto label13;

        $i5 = (int) -256;

        $i3 = i2 & $i5;

        lookupswitch($i3)
        {
            case 256: goto label08;
            case 512: goto label09;
            case 768: goto label10;
            case 1024: goto label11;
            default: goto label12;
        };

     label08:
        $r9 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void localVariableRedundantCheckOnNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r1, r4);

        return;

     label09:
        $r8 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void localVariableNullComparedToNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r1, r4);

        return;

     label10:
        $r7 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void localVariableRedundantNullAssignment(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r1, r4);

        return;

     label11:
        $r6 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void localVariableNullInstanceof(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r1, r4);

        return;

     label12:
        goto label16;

     label13:
        $z2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: boolean cannotBeDefinitelyNullOrNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r1);

        if $z2 == 0 goto label16;

        return;

     label14:
        $z5 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: boolean isDefinitelyNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r1);

        if $z5 == 0 goto label15;

        $r13 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void localVariableNullReference(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r1, r4);

        return;

     label15:
        $z6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: boolean isPotentiallyNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r1);

        if $z6 == 0 goto label16;

        $r12 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void localVariablePotentialNullReference(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r1, r4);

        return;

     label16:
        $r14 = r2.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent>;

        if $r14 == null goto label17;

        $r5 = r2.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.flow.FlowContext: void recordUsingNullReference(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding,org.eclipse.jdt.internal.compiler.ast.Expression,int,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r3, r1, r4, i2, r0);

     label17:
        return;
    }

    void removeFinalAssignmentIfAny(org.eclipse.jdt.internal.compiler.ast.Reference)
    {
        org.eclipse.jdt.internal.compiler.ast.Reference r1;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Reference;

        return;
    }

    public org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement subroutine()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        return null;
    }

    public java.lang.String toString()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowContext[] r3;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r1, $r2, $r4, r10, r11;
        java.lang.StringBuffer $r6, $r8, $r12;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, $i9;
        java.lang.String $r5, $r7, $r9;

        r1 := @this: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        r10 = r1;

        i3 = 0;

        goto label02;

     label01:
        i3 = i3 + 1;

     label02:
        $r2 = r10.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent>;

        r10 = $r2;

        if $r2 != null goto label01;

        $i0 = i3 + 1;

        r3 = newarray (org.eclipse.jdt.internal.compiler.flow.FlowContext)[$i0];

        r11 = r1;

        i4 = i3;

        goto label04;

     label03:
        $i1 = i4;

        $i9 = (int) -1;

        i4 = i4 + $i9;

        r3[$i1] = r11;

        r11 = r11.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent>;

     label04:
        if i4 >= 0 goto label03;

        i5 = 0;

        goto label08;

     label05:
        i6 = 0;

        goto label07;

     label06:
        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(9);

        i6 = i6 + 1;

     label07:
        if i6 < i5 goto label06;

        $r4 = r3[i5];

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.flow.FlowContext: java.lang.String individualToString()>();

        $r6 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        i5 = i5 + 1;

     label08:
        if i5 < i3 goto label05;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(42);

        i7 = 0;

        goto label10;

     label09:
        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(9);

        i7 = i7 + 1;

     label10:
        $i2 = i3 + 1;

        if i7 < $i2 goto label09;

        $r7 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.flow.FlowContext: java.lang.String individualToString()>();

        $r8 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r9 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }
}
