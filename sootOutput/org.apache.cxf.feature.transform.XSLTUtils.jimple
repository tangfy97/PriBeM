public final class org.apache.cxf.feature.transform.XSLTUtils extends java.lang.Object
{
    private static final java.util.logging.Logger LOG;

    private void <init>()
    {
        org.apache.cxf.feature.transform.XSLTUtils r0;

        r0 := @this: org.apache.cxf.feature.transform.XSLTUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.InputStream transform(javax.xml.transform.Templates, java.io.InputStream)
    {
        javax.xml.transform.Transformer $r4;
        javax.xml.transform.Templates r3;
        java.lang.Object[] $r9, $r14;
        javax.xml.transform.TransformerException $r7;
        javax.xml.transform.stream.StreamSource $r0;
        javax.xml.transform.stream.StreamResult $r5;
        org.apache.cxf.interceptor.Fault $r8, $r13;
        java.lang.String $r11, $r16;
        java.io.IOException $r12;
        java.util.logging.Logger $r10, $r15;
        org.apache.cxf.io.CachedOutputStream $r2;
        java.io.InputStream r1, $r6;

        r3 := @parameter0: javax.xml.transform.Templates;

        r1 := @parameter1: java.io.InputStream;

     label1:
        $r0 = new javax.xml.transform.stream.StreamSource;

        specialinvoke $r0.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>(r1);

        $r2 = new org.apache.cxf.io.CachedOutputStream;

        specialinvoke $r2.<org.apache.cxf.io.CachedOutputStream: void <init>()>();

        $r4 = interfaceinvoke r3.<javax.xml.transform.Templates: javax.xml.transform.Transformer newTransformer()>();

        $r5 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r5.<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>($r2);

        virtualinvoke $r4.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r0, $r5);

        $r6 = virtualinvoke $r2.<org.apache.cxf.io.CachedOutputStream: java.io.InputStream getInputStream()>();

     label2:
        return $r6;

     label3:
        $r12 := @caughtexception;

        $r13 = new org.apache.cxf.interceptor.Fault;

        $r15 = <org.apache.cxf.feature.transform.XSLTUtils: java.util.logging.Logger LOG>;

        $r14 = newarray (java.lang.Object)[1];

        $r16 = virtualinvoke $r12.<java.io.IOException: java.lang.String getMessage()>();

        $r14[0] = $r16;

        specialinvoke $r13.<org.apache.cxf.interceptor.Fault: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Throwable,java.lang.Object[])>("GET_CACHED_INPUT_STREAM", $r15, $r12, $r14);

        throw $r13;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.apache.cxf.interceptor.Fault;

        $r10 = <org.apache.cxf.feature.transform.XSLTUtils: java.util.logging.Logger LOG>;

        $r9 = newarray (java.lang.Object)[1];

        $r11 = virtualinvoke $r7.<javax.xml.transform.TransformerException: java.lang.String getMessage()>();

        $r9[0] = $r11;

        specialinvoke $r8.<org.apache.cxf.interceptor.Fault: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Throwable,java.lang.Object[])>("XML_TRANSFORM", $r10, $r7, $r9);

        throw $r8;

        catch java.io.IOException from label1 to label2 with label3;
        catch javax.xml.transform.TransformerException from label1 to label2 with label4;
    }

    public static java.io.Reader transform(javax.xml.transform.Templates, java.io.Reader)
    {
        javax.xml.transform.Transformer $r4;
        javax.xml.transform.Templates r3;
        java.lang.Object[] $r9, $r14;
        javax.xml.transform.TransformerException $r7;
        javax.xml.transform.stream.StreamSource $r0;
        javax.xml.transform.stream.StreamResult $r5;
        org.apache.cxf.interceptor.Fault $r8, $r13;
        java.lang.String $r11, $r16;
        org.apache.cxf.io.CachedWriter $r2;
        java.io.IOException $r12;
        java.io.Reader r1, $r6;
        java.util.logging.Logger $r10, $r15;

        r3 := @parameter0: javax.xml.transform.Templates;

        r1 := @parameter1: java.io.Reader;

     label1:
        $r0 = new javax.xml.transform.stream.StreamSource;

        specialinvoke $r0.<javax.xml.transform.stream.StreamSource: void <init>(java.io.Reader)>(r1);

        $r2 = new org.apache.cxf.io.CachedWriter;

        specialinvoke $r2.<org.apache.cxf.io.CachedWriter: void <init>()>();

        $r4 = interfaceinvoke r3.<javax.xml.transform.Templates: javax.xml.transform.Transformer newTransformer()>();

        $r5 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r5.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>($r2);

        virtualinvoke $r4.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r0, $r5);

        $r6 = virtualinvoke $r2.<org.apache.cxf.io.CachedWriter: java.io.Reader getReader()>();

     label2:
        return $r6;

     label3:
        $r12 := @caughtexception;

        $r13 = new org.apache.cxf.interceptor.Fault;

        $r15 = <org.apache.cxf.feature.transform.XSLTUtils: java.util.logging.Logger LOG>;

        $r14 = newarray (java.lang.Object)[1];

        $r16 = virtualinvoke $r12.<java.io.IOException: java.lang.String getMessage()>();

        $r14[0] = $r16;

        specialinvoke $r13.<org.apache.cxf.interceptor.Fault: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Throwable,java.lang.Object[])>("GET_CACHED_INPUT_STREAM", $r15, $r12, $r14);

        throw $r13;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.apache.cxf.interceptor.Fault;

        $r10 = <org.apache.cxf.feature.transform.XSLTUtils: java.util.logging.Logger LOG>;

        $r9 = newarray (java.lang.Object)[1];

        $r11 = virtualinvoke $r7.<javax.xml.transform.TransformerException: java.lang.String getMessage()>();

        $r9[0] = $r11;

        specialinvoke $r8.<org.apache.cxf.interceptor.Fault: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Throwable,java.lang.Object[])>("XML_TRANSFORM", $r10, $r7, $r9);

        throw $r8;

        catch java.io.IOException from label1 to label2 with label3;
        catch javax.xml.transform.TransformerException from label1 to label2 with label4;
    }

    public static org.w3c.dom.Document transform(javax.xml.transform.Templates, org.w3c.dom.Document)
    {
        javax.xml.transform.dom.DOMSource $r0;
        javax.xml.transform.Transformer $r4;
        javax.xml.transform.Templates r3;
        java.lang.Object[] $r8;
        javax.xml.transform.TransformerException $r6;
        java.util.logging.Logger $r9;
        org.apache.cxf.interceptor.Fault $r7;
        org.w3c.dom.Document r1, $r2;
        java.lang.String $r10;
        javax.xml.transform.dom.DOMResult $r5;

        r3 := @parameter0: javax.xml.transform.Templates;

        r1 := @parameter1: org.w3c.dom.Document;

     label1:
        $r0 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r0.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r1);

        $r2 = staticinvoke <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Document createDocument()>();

        $r4 = interfaceinvoke r3.<javax.xml.transform.Templates: javax.xml.transform.Transformer newTransformer()>();

        $r5 = new javax.xml.transform.dom.DOMResult;

        specialinvoke $r5.<javax.xml.transform.dom.DOMResult: void <init>(org.w3c.dom.Node)>($r2);

        virtualinvoke $r4.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r0, $r5);

     label2:
        return $r2;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.cxf.interceptor.Fault;

        $r9 = <org.apache.cxf.feature.transform.XSLTUtils: java.util.logging.Logger LOG>;

        $r8 = newarray (java.lang.Object)[1];

        $r10 = virtualinvoke $r6.<javax.xml.transform.TransformerException: java.lang.String getMessage()>();

        $r8[0] = $r10;

        specialinvoke $r7.<org.apache.cxf.interceptor.Fault: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Throwable,java.lang.Object[])>("XML_TRANSFORM", $r9, $r6, $r8);

        throw $r7;

        catch javax.xml.transform.TransformerException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/feature/transform/XSLTUtils;");

        <org.apache.cxf.feature.transform.XSLTUtils: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
