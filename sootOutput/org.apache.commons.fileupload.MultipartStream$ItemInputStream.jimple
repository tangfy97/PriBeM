public class org.apache.commons.fileupload.MultipartStream$ItemInputStream extends java.io.InputStream implements org.apache.commons.fileupload.util.Closeable
{
    private long total;
    private int pad;
    private int pos;
    private boolean closed;
    private static final int BYTE_POSITIVE_OFFSET;
    private final org.apache.commons.fileupload.MultipartStream this$0;

    void <init>(org.apache.commons.fileupload.MultipartStream)
    {
        org.apache.commons.fileupload.MultipartStream$ItemInputStream r0;
        org.apache.commons.fileupload.MultipartStream r1;

        r0 := @this: org.apache.commons.fileupload.MultipartStream$ItemInputStream;

        r1 := @parameter0: org.apache.commons.fileupload.MultipartStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0> = r1;

        specialinvoke r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: void findSeparator()>();

        return;
    }

    private void findSeparator()
    {
        org.apache.commons.fileupload.MultipartStream$ItemInputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        org.apache.commons.fileupload.MultipartStream $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.commons.fileupload.MultipartStream$ItemInputStream;

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i0 = virtualinvoke $r1.<org.apache.commons.fileupload.MultipartStream: int findSeparator()>();

        r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int pos> = $i0;

        $i1 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int pos>;

        $i11 = (int) -1;

        if $i1 != $i11 goto label2;

        $r2 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i2 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$000(org.apache.commons.fileupload.MultipartStream)>($r2);

        $r3 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i3 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$100(org.apache.commons.fileupload.MultipartStream)>($r3);

        $i4 = $i2 - $i3;

        $r4 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i5 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$200(org.apache.commons.fileupload.MultipartStream)>($r4);

        if $i4 <= $i5 goto label1;

        $r7 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i9 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$200(org.apache.commons.fileupload.MultipartStream)>($r7);

        r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int pad> = $i9;

        goto label2;

     label1:
        $r5 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i6 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$000(org.apache.commons.fileupload.MultipartStream)>($r5);

        $r6 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i7 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$100(org.apache.commons.fileupload.MultipartStream)>($r6);

        $i8 = $i6 - $i7;

        r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int pad> = $i8;

     label2:
        return;
    }

    public long getBytesRead()
    {
        long $l0;
        org.apache.commons.fileupload.MultipartStream$ItemInputStream r0;

        r0 := @this: org.apache.commons.fileupload.MultipartStream$ItemInputStream;

        $l0 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: long total>;

        return $l0;
    }

    public int available() throws java.io.IOException
    {
        org.apache.commons.fileupload.MultipartStream$ItemInputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        org.apache.commons.fileupload.MultipartStream $r1, $r2, $r3;

        r0 := @this: org.apache.commons.fileupload.MultipartStream$ItemInputStream;

        $i0 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int pos>;

        $i10 = (int) -1;

        if $i0 != $i10 goto label1;

        $r2 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i4 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$000(org.apache.commons.fileupload.MultipartStream)>($r2);

        $r3 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i5 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$100(org.apache.commons.fileupload.MultipartStream)>($r3);

        $i7 = $i4 - $i5;

        $i6 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int pad>;

        $i8 = $i7 - $i6;

        return $i8;

     label1:
        $i1 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int pos>;

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i2 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$100(org.apache.commons.fileupload.MultipartStream)>($r1);

        $i3 = $i1 - $i2;

        return $i3;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r2;
        long $l1, $l2;
        byte $b6;
        org.apache.commons.fileupload.MultipartStream$ItemInputStream r0;
        int $i0, $i3, $i4, $i5, $i8, $i9, $i10, $i11;
        org.apache.commons.fileupload.MultipartStream $r1, $r3;
        boolean $z0;
        org.apache.commons.fileupload.FileItemStream$ItemSkippedException $r5;

        r0 := @this: org.apache.commons.fileupload.MultipartStream$ItemInputStream;

        $z0 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r5 = new org.apache.commons.fileupload.FileItemStream$ItemSkippedException;

        specialinvoke $r5.<org.apache.commons.fileupload.FileItemStream$ItemSkippedException: void <init>()>();

        throw $r5;

     label1:
        $i0 = virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int available()>();

        if $i0 != 0 goto label2;

        $i5 = specialinvoke r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int makeAvailable()>();

        if $i5 != 0 goto label2;

        $i8 = (int) -1;

        return $i8;

     label2:
        $l1 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: long total>;

        $l2 = $l1 + 1L;

        r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: long total> = $l2;

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $r2 = staticinvoke <org.apache.commons.fileupload.MultipartStream: byte[] access$300(org.apache.commons.fileupload.MultipartStream)>($r1);

        $r3 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i3 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$108(org.apache.commons.fileupload.MultipartStream)>($r3);

        $b6 = $r2[$i3];

        $i9 = (int) $b6;

        if $i9 < 0 goto label3;

        $i10 = (int) $b6;

        return $i10;

     label3:
        $i11 = (int) $b6;

        $i4 = $i11 + 256;

        return $i4;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] $r2, r4;
        long $l5, $l6, $l7;
        org.apache.commons.fileupload.MultipartStream$ItemInputStream r0;
        int i0, $i1, $i2, $i3, i4, $i8, i9, $i11;
        org.apache.commons.fileupload.MultipartStream $r1, $r3, $r5;
        boolean $z0;
        org.apache.commons.fileupload.FileItemStream$ItemSkippedException $r7;

        r0 := @this: org.apache.commons.fileupload.MultipartStream$ItemInputStream;

        r4 := @parameter0: byte[];

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r7 = new org.apache.commons.fileupload.FileItemStream$ItemSkippedException;

        specialinvoke $r7.<org.apache.commons.fileupload.FileItemStream$ItemSkippedException: void <init>()>();

        throw $r7;

     label1:
        if i0 != 0 goto label2;

        return 0;

     label2:
        $i1 = virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int available()>();

        i9 = $i1;

        if $i1 != 0 goto label3;

        $i8 = specialinvoke r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int makeAvailable()>();

        i9 = $i8;

        if $i8 != 0 goto label3;

        $i11 = (int) -1;

        return $i11;

     label3:
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i9, i0);

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $r2 = staticinvoke <org.apache.commons.fileupload.MultipartStream: byte[] access$300(org.apache.commons.fileupload.MultipartStream)>($r1);

        $r3 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i3 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$100(org.apache.commons.fileupload.MultipartStream)>($r3);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i3, r4, i4, $i2);

        $r5 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$112(org.apache.commons.fileupload.MultipartStream,int)>($r5, $i2);

        $l6 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: long total>;

        $l5 = (long) $i2;

        $l7 = $l6 + $l5;

        r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: long total> = $l7;

        return $i2;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.fileupload.MultipartStream$ItemInputStream r0;

        r0 := @this: org.apache.commons.fileupload.MultipartStream$ItemInputStream;

        virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: void close(boolean)>(0);

        return;
    }

    public void close(boolean) throws java.io.IOException
    {
        long $l1;
        org.apache.commons.fileupload.MultipartStream$ItemInputStream r0;
        int $i0, $i2, i3;
        org.apache.commons.fileupload.MultipartStream $r1;
        boolean $z0, z1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.fileupload.MultipartStream$ItemInputStream;

        z1 := @parameter0: boolean;

        $z0 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        if z1 == 0 goto label2;

        r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: boolean closed> = 1;

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $r2 = staticinvoke <org.apache.commons.fileupload.MultipartStream: java.io.InputStream access$400(org.apache.commons.fileupload.MultipartStream)>($r1);

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label4;

     label2:
        $i0 = virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int available()>();

        i3 = $i0;

        if $i0 != 0 goto label3;

        $i2 = specialinvoke r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int makeAvailable()>();

        i3 = $i2;

        if $i2 != 0 goto label3;

        goto label4;

     label3:
        $l1 = (long) i3;

        virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: long skip(long)>($l1);

        goto label2;

     label4:
        r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: boolean closed> = 1;

        return;
    }

    public long skip(long) throws java.io.IOException
    {
        long l1, $l2, $l3;
        org.apache.commons.fileupload.MultipartStream$ItemInputStream r0;
        int $i0, $i4, i5;
        org.apache.commons.fileupload.FileItemStream$ItemSkippedException $r2;
        org.apache.commons.fileupload.MultipartStream $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.fileupload.MultipartStream$ItemInputStream;

        l1 := @parameter0: long;

        $z0 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new org.apache.commons.fileupload.FileItemStream$ItemSkippedException;

        specialinvoke $r2.<org.apache.commons.fileupload.FileItemStream$ItemSkippedException: void <init>()>();

        throw $r2;

     label1:
        $i0 = virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int available()>();

        i5 = $i0;

        if $i0 != 0 goto label2;

        $i4 = specialinvoke r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int makeAvailable()>();

        i5 = $i4;

        if $i4 != 0 goto label2;

        return 0L;

     label2:
        $l2 = (long) i5;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>($l2, l1);

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$114(org.apache.commons.fileupload.MultipartStream,long)>($r1, $l3);

        return $l3;
    }

    private int makeAvailable() throws java.io.IOException
    {
        byte[] $r4, $r7, $r13;
        org.apache.commons.fileupload.MultipartStream$ProgressNotifier $r18, $r21;
        org.apache.commons.fileupload.MultipartStream$MalformedStreamException $r23;
        org.apache.commons.fileupload.MultipartStream$ItemInputStream r0;
        long $l1, $l7, $l8;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i24, $i26;
        org.apache.commons.fileupload.MultipartStream $r1, $r2, $r3, $r5, $r6, $r8, $r9, $r10, $r12, $r14, $r15, $r16, $r17, $r19, $r20;
        java.io.InputStream $r11;

        r0 := @this: org.apache.commons.fileupload.MultipartStream$ItemInputStream;

        $i0 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int pos>;

        $i22 = (int) -1;

        if $i0 == $i22 goto label1;

        return 0;

     label1:
        $l1 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: long total>;

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i2 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$000(org.apache.commons.fileupload.MultipartStream)>($r1);

        $r2 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i3 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$100(org.apache.commons.fileupload.MultipartStream)>($r2);

        $i5 = $i2 - $i3;

        $i4 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int pad>;

        $i6 = $i5 - $i4;

        $l7 = (long) $i6;

        $l8 = $l1 + $l7;

        r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: long total> = $l8;

        $r3 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $r4 = staticinvoke <org.apache.commons.fileupload.MultipartStream: byte[] access$300(org.apache.commons.fileupload.MultipartStream)>($r3);

        $r5 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i9 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$000(org.apache.commons.fileupload.MultipartStream)>($r5);

        $i10 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int pad>;

        $i11 = $i9 - $i10;

        $r6 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $r7 = staticinvoke <org.apache.commons.fileupload.MultipartStream: byte[] access$300(org.apache.commons.fileupload.MultipartStream)>($r6);

        $i12 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int pad>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i11, $r7, 0, $i12);

        $r8 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$102(org.apache.commons.fileupload.MultipartStream,int)>($r8, 0);

        $r9 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i13 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int pad>;

        staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$002(org.apache.commons.fileupload.MultipartStream,int)>($r9, $i13);

     label2:
        $r10 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $r11 = staticinvoke <org.apache.commons.fileupload.MultipartStream: java.io.InputStream access$400(org.apache.commons.fileupload.MultipartStream)>($r10);

        $r12 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $r13 = staticinvoke <org.apache.commons.fileupload.MultipartStream: byte[] access$300(org.apache.commons.fileupload.MultipartStream)>($r12);

        $r14 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i14 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$000(org.apache.commons.fileupload.MultipartStream)>($r14);

        $r15 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i15 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$500(org.apache.commons.fileupload.MultipartStream)>($r15);

        $r16 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $i16 = staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$000(org.apache.commons.fileupload.MultipartStream)>($r16);

        $i17 = $i15 - $i16;

        $i18 = virtualinvoke $r11.<java.io.InputStream: int read(byte[],int,int)>($r13, $i14, $i17);

        $i24 = (int) -1;

        if $i18 != $i24 goto label3;

        $r23 = new org.apache.commons.fileupload.MultipartStream$MalformedStreamException;

        specialinvoke $r23.<org.apache.commons.fileupload.MultipartStream$MalformedStreamException: void <init>(java.lang.String)>("Stream ended unexpectedly");

        throw $r23;

     label3:
        $r17 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $r18 = staticinvoke <org.apache.commons.fileupload.MultipartStream: org.apache.commons.fileupload.MultipartStream$ProgressNotifier access$600(org.apache.commons.fileupload.MultipartStream)>($r17);

        if $r18 == null goto label4;

        $r20 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        $r21 = staticinvoke <org.apache.commons.fileupload.MultipartStream: org.apache.commons.fileupload.MultipartStream$ProgressNotifier access$600(org.apache.commons.fileupload.MultipartStream)>($r20);

        virtualinvoke $r21.<org.apache.commons.fileupload.MultipartStream$ProgressNotifier: void noteBytesRead(int)>($i18);

     label4:
        $r19 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: org.apache.commons.fileupload.MultipartStream this$0>;

        staticinvoke <org.apache.commons.fileupload.MultipartStream: int access$012(org.apache.commons.fileupload.MultipartStream,int)>($r19, $i18);

        specialinvoke r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: void findSeparator()>();

        $i19 = virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int available()>();

        if $i19 > 0 goto label5;

        $i20 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: int pos>;

        $i26 = (int) -1;

        if $i20 == $i26 goto label6;

     label5:
        return $i19;

     label6:
        goto label2;
    }

    public boolean isClosed()
    {
        org.apache.commons.fileupload.MultipartStream$ItemInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.fileupload.MultipartStream$ItemInputStream;

        $z0 = r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: boolean closed>;

        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.fileupload.MultipartStream$ItemInputStream: int BYTE_POSITIVE_OFFSET> = 256;

        return;
    }
}
