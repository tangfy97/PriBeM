class org.mozilla.javascript.tools.debugger.FileHeader extends javax.swing.JPanel implements java.awt.event.MouseListener
{
    private static final long serialVersionUID;
    private int pressLine;
    private org.mozilla.javascript.tools.debugger.FileWindow fileWindow;

    public void <init>(org.mozilla.javascript.tools.debugger.FileWindow)
    {
        int $i1;
        org.mozilla.javascript.tools.debugger.FileHeader r0;
        org.mozilla.javascript.tools.debugger.FileWindow r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileHeader;

        r1 := @parameter0: org.mozilla.javascript.tools.debugger.FileWindow;

        specialinvoke r0.<javax.swing.JPanel: void <init>()>();

        $i1 = (int) -1;

        r0.<org.mozilla.javascript.tools.debugger.FileHeader: int pressLine> = $i1;

        r0.<org.mozilla.javascript.tools.debugger.FileHeader: org.mozilla.javascript.tools.debugger.FileWindow fileWindow> = r1;

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileHeader: void addMouseListener(java.awt.event.MouseListener)>(r0);

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileHeader: void update()>();

        return;
    }

    public void update()
    {
        org.mozilla.javascript.tools.debugger.FileTextArea r2;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r5, r7;
        org.mozilla.javascript.tools.debugger.FileHeader r0;
        java.awt.Font $r3;
        org.mozilla.javascript.tools.debugger.FileWindow $r1;
        java.awt.Dimension $r6;
        java.awt.FontMetrics $r4;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileHeader;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.FileHeader: org.mozilla.javascript.tools.debugger.FileWindow fileWindow>;

        r2 = $r1.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        $r3 = virtualinvoke r2.<org.mozilla.javascript.tools.debugger.FileTextArea: java.awt.Font getFont()>();

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileHeader: void setFont(java.awt.Font)>($r3);

        $r4 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileHeader: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r3);

        $i0 = virtualinvoke $r4.<java.awt.FontMetrics: int getHeight()>();

        $i1 = virtualinvoke r2.<org.mozilla.javascript.tools.debugger.FileTextArea: int getLineCount()>();

        i2 = $i1 + 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i2);

        r7 = $r5;

        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i3 >= 2 goto label1;

        r7 = "99";

     label1:
        $r6 = new java.awt.Dimension;

        specialinvoke $r6.<java.awt.Dimension: void <init>()>();

        $i4 = virtualinvoke $r4.<java.awt.FontMetrics: int stringWidth(java.lang.String)>(r7);

        $i5 = $i4 + 16;

        $r6.<java.awt.Dimension: int width> = $i5;

        $i6 = i2 * $i0;

        $i7 = $i6 + 100;

        $r6.<java.awt.Dimension: int height> = $i7;

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileHeader: void setPreferredSize(java.awt.Dimension)>($r6);

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileHeader: void setSize(java.awt.Dimension)>($r6);

        return;
    }

    public void paint(java.awt.Graphics)
    {
        java.awt.Color $r7, $r15, $r18, $r19, $r24;
        org.mozilla.javascript.tools.debugger.FileTextArea r3;
        javax.swing.text.BadLocationException $r21;
        org.mozilla.javascript.tools.debugger.FileWindow $r2, $r9, $r16;
        java.awt.Polygon $r25;
        java.lang.StringBuffer $r12, $r13, $r23;
        java.lang.String $r8, $r11, $r14, r22;
        org.mozilla.javascript.tools.debugger.FileHeader r0;
        java.awt.FontMetrics $r5;
        boolean $z0;
        java.awt.Font $r4;
        java.awt.Graphics r1;
        java.awt.Rectangle $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35, i36, i37, i38, i39, i40, $i42, $i44;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileHeader;

        r1 := @parameter0: java.awt.Graphics;

        specialinvoke r0.<javax.swing.JPanel: void paint(java.awt.Graphics)>(r1);

        $r2 = r0.<org.mozilla.javascript.tools.debugger.FileHeader: org.mozilla.javascript.tools.debugger.FileWindow fileWindow>;

        r3 = $r2.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        $r4 = virtualinvoke r3.<org.mozilla.javascript.tools.debugger.FileTextArea: java.awt.Font getFont()>();

        virtualinvoke r1.<java.awt.Graphics: void setFont(java.awt.Font)>($r4);

        $r5 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileHeader: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r4);

        $r6 = virtualinvoke r1.<java.awt.Graphics: java.awt.Rectangle getClipBounds()>();

        $r7 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileHeader: java.awt.Color getBackground()>();

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r7);

        $i3 = $r6.<java.awt.Rectangle: int x>;

        $i2 = $r6.<java.awt.Rectangle: int y>;

        $i1 = $r6.<java.awt.Rectangle: int width>;

        $i0 = $r6.<java.awt.Rectangle: int height>;

        virtualinvoke r1.<java.awt.Graphics: void fillRect(int,int,int,int)>($i3, $i2, $i1, $i0);

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileHeader: int getX()>();

        $i4 = virtualinvoke $r5.<java.awt.FontMetrics: int getMaxAscent()>();

        $i5 = virtualinvoke $r5.<java.awt.FontMetrics: int getHeight()>();

        $i6 = virtualinvoke r3.<org.mozilla.javascript.tools.debugger.FileTextArea: int getLineCount()>();

        i7 = $i6 + 1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i7);

        r22 = $r8;

        $i8 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i8 >= 2 goto label01;

        r22 = "99";

     label01:
        virtualinvoke $r5.<java.awt.FontMetrics: int stringWidth(java.lang.String)>(r22);

        $i9 = $r6.<java.awt.Rectangle: int y>;

        $i30 = $i9 / $i5;

        $i11 = $r6.<java.awt.Rectangle: int y>;

        $i10 = $r6.<java.awt.Rectangle: int height>;

        $i12 = $i11 + $i10;

        $i13 = $i12 / $i5;

        $i31 = $i13 + 1;

        i34 = $i31;

        $i14 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileHeader: int getWidth()>();

        if $i31 <= i7 goto label02;

        i34 = i7;

     label02:
        i35 = $i30;

     label03:
        if i35 >= i34 goto label14;

        $i42 = (int) -2;

        i36 = $i42;

     label04:
        i36 = virtualinvoke r3.<org.mozilla.javascript.tools.debugger.FileTextArea: int getLineStartOffset(int)>(i35);

     label05:
        goto label07;

     label06:
        $r21 := @caughtexception;

     label07:
        $r9 = r0.<org.mozilla.javascript.tools.debugger.FileHeader: org.mozilla.javascript.tools.debugger.FileWindow fileWindow>;

        $i15 = i35 + 1;

        $z0 = virtualinvoke $r9.<org.mozilla.javascript.tools.debugger.FileWindow: boolean isBreakPoint(int)>($i15);

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $i16 = i35 + 1;

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i16);

        $r12 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.awt.FontMetrics: int stringWidth(java.lang.String)>($r14);

        $i32 = i35 * $i5;

        $r15 = <java.awt.Color: java.awt.Color blue>;

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r15);

        $i17 = $i32 + $i4;

        virtualinvoke r1.<java.awt.Graphics: void drawString(java.lang.String,int,int)>($r14, 0, $i17);

        $i33 = $i14 - $i4;

        if $z0 == 0 goto label08;

        $r24 = new java.awt.Color;

        specialinvoke $r24.<java.awt.Color: void <init>(int,int,int)>(128, 0, 0);

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r24);

        $i29 = $i32 + $i4;

        i37 = $i29 - 9;

        virtualinvoke r1.<java.awt.Graphics: void fillOval(int,int,int,int)>($i33, i37, 9, 9);

        virtualinvoke r1.<java.awt.Graphics: void drawOval(int,int,int,int)>($i33, i37, 8, 8);

        virtualinvoke r1.<java.awt.Graphics: void drawOval(int,int,int,int)>($i33, i37, 9, 9);

     label08:
        $r16 = r0.<org.mozilla.javascript.tools.debugger.FileHeader: org.mozilla.javascript.tools.debugger.FileWindow fileWindow>;

        $i18 = $r16.<org.mozilla.javascript.tools.debugger.FileWindow: int currentPos>;

        if i36 != $i18 goto label13;

        $r25 = new java.awt.Polygon;

        specialinvoke $r25.<java.awt.Polygon: void <init>()>();

        $i19 = $i4 - 10;

        i38 = $i32 + $i19;

        i20 = i38;

        $i21 = i38 + 3;

        virtualinvoke $r25.<java.awt.Polygon: void addPoint(int,int)>($i33, $i21);

        $i23 = $i33 + 5;

        $i22 = i38 + 3;

        virtualinvoke $r25.<java.awt.Polygon: void addPoint(int,int)>($i23, $i22);

        i39 = $i33 + 5;

     label09:
        $i24 = $i33 + 10;

        if i39 > $i24 goto label10;

        virtualinvoke $r25.<java.awt.Polygon: void addPoint(int,int)>(i39, i38);

        i39 = i39 + 1;

        i38 = i38 + 1;

        goto label09;

     label10:
        i40 = $i33 + 9;

     label11:
        $i25 = $i33 + 5;

        if i40 < $i25 goto label12;

        virtualinvoke $r25.<java.awt.Polygon: void addPoint(int,int)>(i40, i38);

        $i44 = (int) -1;

        i40 = i40 + $i44;

        i38 = i38 + 1;

        goto label11;

     label12:
        $i27 = $i33 + 5;

        $i26 = i20 + 7;

        virtualinvoke $r25.<java.awt.Polygon: void addPoint(int,int)>($i27, $i26);

        $i28 = i20 + 7;

        virtualinvoke $r25.<java.awt.Polygon: void addPoint(int,int)>($i33, $i28);

        $r18 = <java.awt.Color: java.awt.Color yellow>;

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r18);

        virtualinvoke r1.<java.awt.Graphics: void fillPolygon(java.awt.Polygon)>($r25);

        $r19 = <java.awt.Color: java.awt.Color black>;

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r19);

        virtualinvoke r1.<java.awt.Graphics: void drawPolygon(java.awt.Polygon)>($r25);

     label13:
        i35 = i35 + 1;

        goto label03;

     label14:
        return;

        catch javax.swing.text.BadLocationException from label04 to label05 with label06;
    }

    public void mouseEntered(java.awt.event.MouseEvent)
    {
        org.mozilla.javascript.tools.debugger.FileHeader r0;
        java.awt.event.MouseEvent r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileHeader;

        r1 := @parameter0: java.awt.event.MouseEvent;

        return;
    }

    public void mousePressed(java.awt.event.MouseEvent)
    {
        org.mozilla.javascript.tools.debugger.FileHeader r0;
        java.awt.Font $r3;
        org.mozilla.javascript.tools.debugger.FileWindow $r1;
        java.awt.event.MouseEvent r5;
        java.awt.FontMetrics $r4;
        org.mozilla.javascript.tools.debugger.FileTextArea $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileHeader;

        r5 := @parameter0: java.awt.event.MouseEvent;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.FileHeader: org.mozilla.javascript.tools.debugger.FileWindow fileWindow>;

        $r2 = $r1.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.FileTextArea: java.awt.Font getFont()>();

        $r4 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileHeader: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r3);

        $i0 = virtualinvoke $r4.<java.awt.FontMetrics: int getHeight()>();

        $i1 = virtualinvoke r5.<java.awt.event.MouseEvent: int getY()>();

        $i2 = $i1 / $i0;

        r0.<org.mozilla.javascript.tools.debugger.FileHeader: int pressLine> = $i2;

        return;
    }

    public void mouseClicked(java.awt.event.MouseEvent)
    {
        org.mozilla.javascript.tools.debugger.FileHeader r0;
        java.awt.event.MouseEvent r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileHeader;

        r1 := @parameter0: java.awt.event.MouseEvent;

        return;
    }

    public void mouseExited(java.awt.event.MouseEvent)
    {
        org.mozilla.javascript.tools.debugger.FileHeader r0;
        java.awt.event.MouseEvent r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileHeader;

        r1 := @parameter0: java.awt.event.MouseEvent;

        return;
    }

    public void mouseReleased(java.awt.event.MouseEvent)
    {
        org.mozilla.javascript.tools.debugger.FileTextArea $r4;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i8;
        org.mozilla.javascript.tools.debugger.FileHeader r2;
        java.awt.Font $r5;
        java.awt.Component $r1;
        java.awt.event.MouseEvent r0;
        org.mozilla.javascript.tools.debugger.FileWindow $r3, $r7;
        java.awt.FontMetrics $r6;

        r2 := @this: org.mozilla.javascript.tools.debugger.FileHeader;

        r0 := @parameter0: java.awt.event.MouseEvent;

        $r1 = virtualinvoke r0.<java.awt.event.MouseEvent: java.awt.Component getComponent()>();

        if $r1 != r2 goto label2;

        $i0 = virtualinvoke r0.<java.awt.event.MouseEvent: int getModifiers()>();

        $i1 = $i0 & 16;

        if $i1 == 0 goto label2;

        virtualinvoke r0.<java.awt.event.MouseEvent: int getX()>();

        $i2 = virtualinvoke r0.<java.awt.event.MouseEvent: int getY()>();

        $r3 = r2.<org.mozilla.javascript.tools.debugger.FileHeader: org.mozilla.javascript.tools.debugger.FileWindow fileWindow>;

        $r4 = $r3.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        $r5 = virtualinvoke $r4.<org.mozilla.javascript.tools.debugger.FileTextArea: java.awt.Font getFont()>();

        $r6 = virtualinvoke r2.<org.mozilla.javascript.tools.debugger.FileHeader: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r5);

        $i3 = virtualinvoke $r6.<java.awt.FontMetrics: int getHeight()>();

        i4 = $i2 / $i3;

        $i5 = r2.<org.mozilla.javascript.tools.debugger.FileHeader: int pressLine>;

        if i4 != $i5 goto label1;

        $r7 = r2.<org.mozilla.javascript.tools.debugger.FileHeader: org.mozilla.javascript.tools.debugger.FileWindow fileWindow>;

        $i6 = i4 + 1;

        virtualinvoke $r7.<org.mozilla.javascript.tools.debugger.FileWindow: void toggleBreakPoint(int)>($i6);

        goto label2;

     label1:
        $i8 = (int) -1;

        r2.<org.mozilla.javascript.tools.debugger.FileHeader: int pressLine> = $i8;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.tools.debugger.FileHeader: long serialVersionUID> = -2858905404778259127L;

        return;
    }
}
