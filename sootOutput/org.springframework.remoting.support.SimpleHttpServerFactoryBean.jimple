public class org.springframework.remoting.support.SimpleHttpServerFactoryBean extends java.lang.Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    protected final org.apache.commons.logging.Log logger;
    private int port;
    private java.lang.String hostname;
    private int backlog;
    private int shutdownDelay;
    private java.util.concurrent.Executor executor;
    private java.util.Map contexts;
    private java.util.List filters;
    private com.sun.net.httpserver.Authenticator authenticator;
    private com.sun.net.httpserver.HttpServer server;

    public void <init>()
    {
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;
        int $i1;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: int port> = 8080;

        $i1 = (int) -1;

        r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: int backlog> = $i1;

        r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: int shutdownDelay> = 0;

        return;
    }

    public void setPort(int)
    {
        int i0;
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        i0 := @parameter0: int;

        r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: int port> = i0;

        return;
    }

    public void setHostname(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: java.lang.String hostname> = r1;

        return;
    }

    public void setBacklog(int)
    {
        int i0;
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        i0 := @parameter0: int;

        r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: int backlog> = i0;

        return;
    }

    public void setShutdownDelay(int)
    {
        int i0;
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        i0 := @parameter0: int;

        r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: int shutdownDelay> = i0;

        return;
    }

    public void setExecutor(java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor r1;
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        r1 := @parameter0: java.util.concurrent.Executor;

        r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: java.util.concurrent.Executor executor> = r1;

        return;
    }

    public void setContexts(java.util.Map)
    {
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;
        java.util.Map r1;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        r1 := @parameter0: java.util.Map;

        r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: java.util.Map contexts> = r1;

        return;
    }

    public void setFilters(java.util.List)
    {
        java.util.List r1;
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        r1 := @parameter0: java.util.List;

        r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: java.util.List filters> = r1;

        return;
    }

    public void setAuthenticator(com.sun.net.httpserver.Authenticator)
    {
        com.sun.net.httpserver.Authenticator r1;
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        r1 := @parameter0: com.sun.net.httpserver.Authenticator;

        r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: com.sun.net.httpserver.Authenticator authenticator> = r1;

        return;
    }

    public void afterPropertiesSet() throws java.io.IOException
    {
        com.sun.net.httpserver.HttpServer $r3, $r7, $r18, $r28;
        java.util.Map $r5, $r12, $r17;
        com.sun.net.httpserver.HttpContext $r21;
        boolean $z0, $z1;
        java.util.Set $r13;
        java.net.InetSocketAddress r2, $r30;
        java.util.List $r22, $r25, $r26;
        java.lang.StringBuilder $r8, $r10;
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;
        com.sun.net.httpserver.Authenticator $r23, $r24;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r11, r16, $r29;
        java.util.Iterator $r14;
        java.util.concurrent.Executor $r4, $r27;
        com.sun.net.httpserver.HttpHandler $r20;
        org.apache.commons.logging.Log $r6, $r9;
        java.lang.Object $r15, $r19;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        $r1 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: java.lang.String hostname>;

        if $r1 == null goto label1;

        $r30 = new java.net.InetSocketAddress;

        $r29 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: java.lang.String hostname>;

        $i2 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: int port>;

        specialinvoke $r30.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r29, $i2);

        goto label2;

     label1:
        $r30 = new java.net.InetSocketAddress;

        $i0 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: int port>;

        specialinvoke $r30.<java.net.InetSocketAddress: void <init>(int)>($i0);

     label2:
        r2 = $r30;

        $i1 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: int backlog>;

        $r3 = staticinvoke <com.sun.net.httpserver.HttpServer: com.sun.net.httpserver.HttpServer create(java.net.InetSocketAddress,int)>($r30, $i1);

        r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: com.sun.net.httpserver.HttpServer server> = $r3;

        $r4 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: java.util.concurrent.Executor executor>;

        if $r4 == null goto label3;

        $r28 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: com.sun.net.httpserver.HttpServer server>;

        $r27 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: java.util.concurrent.Executor executor>;

        virtualinvoke $r28.<com.sun.net.httpserver.HttpServer: void setExecutor(java.util.concurrent.Executor)>($r27);

     label3:
        $r5 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: java.util.Map contexts>;

        if $r5 == null goto label7;

        $r12 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: java.util.Map contexts>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set keySet()>();

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

        goto label6;

     label4:
        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.String) $r15;

        $r18 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: com.sun.net.httpserver.HttpServer server>;

        $r17 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: java.util.Map contexts>;

        $r19 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16);

        $r20 = (com.sun.net.httpserver.HttpHandler) $r19;

        $r21 = virtualinvoke $r18.<com.sun.net.httpserver.HttpServer: com.sun.net.httpserver.HttpContext createContext(java.lang.String,com.sun.net.httpserver.HttpHandler)>(r16, $r20);

        $r22 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: java.util.List filters>;

        if $r22 == null goto label5;

        $r25 = virtualinvoke $r21.<com.sun.net.httpserver.HttpContext: java.util.List getFilters()>();

        $r26 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: java.util.List filters>;

        interfaceinvoke $r25.<java.util.List: boolean addAll(java.util.Collection)>($r26);

     label5:
        $r23 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: com.sun.net.httpserver.Authenticator authenticator>;

        if $r23 == null goto label6;

        $r24 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: com.sun.net.httpserver.Authenticator authenticator>;

        virtualinvoke $r21.<com.sun.net.httpserver.HttpContext: com.sun.net.httpserver.Authenticator setAuthenticator(com.sun.net.httpserver.Authenticator)>($r24);

     label6:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

     label7:
        $r6 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label8;

        $r9 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: org.apache.commons.logging.Log logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Starting HttpServer at address ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r11);

     label8:
        $r7 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: com.sun.net.httpserver.HttpServer server>;

        virtualinvoke $r7.<com.sun.net.httpserver.HttpServer: void start()>();

        return;
    }

    public com.sun.net.httpserver.HttpServer getObject()
    {
        com.sun.net.httpserver.HttpServer $r1;
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        $r1 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: com.sun.net.httpserver.HttpServer server>;

        return $r1;
    }

    public java.lang.Class getObjectType()
    {
        com.sun.net.httpserver.HttpServer $r1, $r2;
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;
        java.lang.Class $r3;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        $r1 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: com.sun.net.httpserver.HttpServer server>;

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: com.sun.net.httpserver.HttpServer server>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        goto label2;

     label1:
        $r3 = class "Lcom/sun/net/httpserver/HttpServer;";

     label2:
        return $r3;
    }

    public boolean isSingleton()
    {
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        return 1;
    }

    public void destroy()
    {
        com.sun.net.httpserver.HttpServer $r2;
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;
        int $i0;
        org.apache.commons.logging.Log $r1;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        $r1 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Stopping HttpServer");

        $r2 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: com.sun.net.httpserver.HttpServer server>;

        $i0 = r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: int shutdownDelay>;

        virtualinvoke $r2.<com.sun.net.httpserver.HttpServer: void stop(int)>($i0);

        return;
    }

    public volatile java.lang.Object getObject() throws java.lang.Exception
    {
        com.sun.net.httpserver.HttpServer $r1;
        org.springframework.remoting.support.SimpleHttpServerFactoryBean r0;

        r0 := @this: org.springframework.remoting.support.SimpleHttpServerFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.remoting.support.SimpleHttpServerFactoryBean: com.sun.net.httpserver.HttpServer getObject()>();

        return $r1;
    }
}
