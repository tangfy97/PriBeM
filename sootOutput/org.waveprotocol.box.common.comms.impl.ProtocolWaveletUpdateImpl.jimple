public class org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl extends java.lang.Object implements org.waveprotocol.box.common.comms.ProtocolWaveletUpdate
{
    private java.lang.String waveletName;
    private final java.util.List appliedDelta;
    private org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl commitNotice;
    private org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl resultingVersion;
    private org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl snapshot;
    private java.lang.Boolean marker;
    private java.lang.String channelId;

    public void <init>()
    {
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.util.List appliedDelta> = $r1;

        return;
    }

    public void <init>(org.waveprotocol.box.common.comms.ProtocolWaveletUpdate)
    {
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;
        org.waveprotocol.box.common.comms.ProtocolWaveletUpdate r2;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r2 := @parameter0: org.waveprotocol.box.common.comms.ProtocolWaveletUpdate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.util.List appliedDelta> = $r1;

        virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void copyFrom(org.waveprotocol.box.common.comms.ProtocolWaveletUpdate)>(r2);

        return;
    }

    public void copyFrom(org.waveprotocol.box.common.comms.ProtocolWaveletUpdate)
    {
        org.waveprotocol.box.common.comms.WaveletSnapshot $r6;
        java.lang.String $r2, $r5;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Iterator $r4;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta r10;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl $r11;
        java.util.List $r3;
        org.waveprotocol.box.common.comms.ProtocolWaveletUpdate r1;
        java.lang.Object $r9;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r1 := @parameter0: org.waveprotocol.box.common.comms.ProtocolWaveletUpdate;

        $r2 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: java.lang.String getWaveletName()>();

        virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void setWaveletName(java.lang.String)>($r2);

        virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void clearAppliedDelta()>();

        $r3 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: java.util.List getAppliedDelta()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r9 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.waveprotocol.wave.federation.ProtocolWaveletDelta) $r9;

        $r11 = new org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl;

        specialinvoke $r11.<org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl: void <init>(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>(r10);

        virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void addAppliedDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>($r11);

        goto label01;

     label02:
        $z1 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: boolean hasCommitNotice()>();

        if $z1 == 0 goto label03;

        $r8 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: org.waveprotocol.wave.federation.ProtocolHashedVersion getCommitNotice()>();

        virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void setCommitNotice(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r8);

        goto label04;

     label03:
        virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void clearCommitNotice()>();

     label04:
        $z2 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: boolean hasResultingVersion()>();

        if $z2 == 0 goto label05;

        $r7 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: org.waveprotocol.wave.federation.ProtocolHashedVersion getResultingVersion()>();

        virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void setResultingVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r7);

        goto label06;

     label05:
        virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void clearResultingVersion()>();

     label06:
        $z3 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: boolean hasSnapshot()>();

        if $z3 == 0 goto label07;

        $r6 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: org.waveprotocol.box.common.comms.WaveletSnapshot getSnapshot()>();

        virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void setSnapshot(org.waveprotocol.box.common.comms.WaveletSnapshot)>($r6);

        goto label08;

     label07:
        virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void clearSnapshot()>();

     label08:
        $z4 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: boolean hasMarker()>();

        if $z4 == 0 goto label09;

        $z6 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: boolean getMarker()>();

        virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void setMarker(boolean)>($z6);

        goto label10;

     label09:
        virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void clearMarker()>();

     label10:
        $z5 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: boolean hasChannelId()>();

        if $z5 == 0 goto label11;

        $r5 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: java.lang.String getChannelId()>();

        virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void setChannelId(java.lang.String)>($r5);

        goto label12;

     label11:
        virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void clearChannelId()>();

     label12:
        return;
    }

    public java.lang.String getWaveletName()
    {
        java.lang.String $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r1 = r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.lang.String waveletName>;

        return $r1;
    }

    public void setWaveletName(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.lang.String waveletName> = r1;

        return;
    }

    public java.util.List getAppliedDelta()
    {
        java.util.List $r1, $r2;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r1 = r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.util.List appliedDelta>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public void addAllAppliedDelta(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta r3;
        java.lang.Object $r2;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r4;
        boolean $z0;

        r4 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.waveprotocol.wave.federation.ProtocolWaveletDelta) $r2;

        virtualinvoke r4.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: void addAppliedDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>(r3);

        goto label1;

     label2:
        return;
    }

    public org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl getAppliedDelta(int)
    {
        java.util.List $r2;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta $r4;
        int i0;
        java.lang.Object $r3;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl $r0;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r1;

        r1 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        i0 := @parameter0: int;

        $r0 = new org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl;

        $r2 = r1.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.util.List appliedDelta>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (org.waveprotocol.wave.federation.ProtocolWaveletDelta) $r3;

        specialinvoke $r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl: void <init>(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>($r4);

        return $r0;
    }

    public void setAppliedDelta(int, org.waveprotocol.wave.federation.ProtocolWaveletDelta)
    {
        java.util.List $r3;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta r2;
        int i0;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        i0 := @parameter0: int;

        r2 := @parameter1: org.waveprotocol.wave.federation.ProtocolWaveletDelta;

        $r3 = r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.util.List appliedDelta>;

        $r1 = new org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl: void <init>(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>(r2);

        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r1);

        return;
    }

    public int getAppliedDeltaSize()
    {
        int $i0;
        java.util.List $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r1 = r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.util.List appliedDelta>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public void addAppliedDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)
    {
        java.util.List $r3;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta r2;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolWaveletDelta;

        $r3 = r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.util.List appliedDelta>;

        $r1 = new org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl: void <init>(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>(r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void clearAppliedDelta()
    {
        java.util.List $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r1 = r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.util.List appliedDelta>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public boolean hasCommitNotice()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r1 = r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl commitNotice>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearCommitNotice()
    {
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl commitNotice> = null;

        return;
    }

    public org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl getCommitNotice()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r0, $r2;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r1;

        r1 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r0 = new org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        $r2 = r1.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl commitNotice>;

        specialinvoke $r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r2);

        return $r0;
    }

    public void setCommitNotice(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r2;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        $r1 = new org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r2);

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl commitNotice> = $r1;

        return;
    }

    public boolean hasResultingVersion()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r1 = r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl resultingVersion>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearResultingVersion()
    {
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl resultingVersion> = null;

        return;
    }

    public org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl getResultingVersion()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r0, $r2;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r1;

        r1 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r0 = new org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        $r2 = r1.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl resultingVersion>;

        specialinvoke $r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r2);

        return $r0;
    }

    public void setResultingVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r2;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        $r1 = new org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r2);

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl resultingVersion> = $r1;

        return;
    }

    public boolean hasSnapshot()
    {
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;
        org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r1 = r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl snapshot>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearSnapshot()
    {
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl snapshot> = null;

        return;
    }

    public org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl getSnapshot()
    {
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r1;
        org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl $r0, $r2;

        r1 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r0 = new org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl;

        $r2 = r1.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl snapshot>;

        specialinvoke $r0.<org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl: void <init>(org.waveprotocol.box.common.comms.WaveletSnapshot)>($r2);

        return $r0;
    }

    public void setSnapshot(org.waveprotocol.box.common.comms.WaveletSnapshot)
    {
        org.waveprotocol.box.common.comms.WaveletSnapshot r2;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;
        org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl $r1;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r2 := @parameter0: org.waveprotocol.box.common.comms.WaveletSnapshot;

        $r1 = new org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl;

        specialinvoke $r1.<org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl: void <init>(org.waveprotocol.box.common.comms.WaveletSnapshot)>(r2);

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl snapshot> = $r1;

        return;
    }

    public boolean hasMarker()
    {
        java.lang.Boolean $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r1 = r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.lang.Boolean marker>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearMarker()
    {
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.lang.Boolean marker> = null;

        return;
    }

    public boolean getMarker()
    {
        java.lang.Boolean $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r1 = r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.lang.Boolean marker>;

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public void setMarker(boolean)
    {
        java.lang.Boolean $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;
        boolean z0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.lang.Boolean marker> = $r1;

        return;
    }

    public boolean hasChannelId()
    {
        java.lang.String $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r1 = r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.lang.String channelId>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearChannelId()
    {
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.lang.String channelId> = null;

        return;
    }

    public java.lang.String getChannelId()
    {
        java.lang.String $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r1 = r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.lang.String channelId>;

        return $r1;
    }

    public void setChannelId(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.lang.String channelId> = r1;

        return;
    }

    protected void reset()
    {
        java.util.List $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.lang.String waveletName> = null;

        $r1 = r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.util.List appliedDelta>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl commitNotice> = null;

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl resultingVersion> = null;

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl snapshot> = null;

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.lang.Boolean marker> = null;

        r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: java.lang.String channelId> = null;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: boolean isEqualTo(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.box.common.comms.ProtocolWaveletUpdate $r2;
        java.lang.Object r0;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r1;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.box.common.comms.ProtocolWaveletUpdate;

        if $z0 == 0 goto label2;

        $r2 = (org.waveprotocol.box.common.comms.ProtocolWaveletUpdate) r0;

        $z1 = staticinvoke <org.waveprotocol.box.common.comms.ProtocolWaveletUpdateUtil: boolean isEqual(org.waveprotocol.box.common.comms.ProtocolWaveletUpdate,org.waveprotocol.box.common.comms.ProtocolWaveletUpdate)>(r1, $r2);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $i0 = staticinvoke <org.waveprotocol.box.common.comms.ProtocolWaveletUpdateUtil: int getHashCode(org.waveprotocol.box.common.comms.ProtocolWaveletUpdate)>(r0);

        return $i0;
    }

    public volatile org.waveprotocol.box.common.comms.WaveletSnapshot getSnapshot()
    {
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;
        org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl $r1;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.box.common.comms.impl.WaveletSnapshotImpl getSnapshot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolHashedVersion getResultingVersion()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl getResultingVersion()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolHashedVersion getCommitNotice()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl getCommitNotice()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolWaveletDelta getAppliedDelta(int)
    {
        int i0;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl $r1;
        org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.common.comms.impl.ProtocolWaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl getAppliedDelta(int)>(i0);

        return $r1;
    }
}
