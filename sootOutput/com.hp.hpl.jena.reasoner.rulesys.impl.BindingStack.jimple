public class com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack extends java.lang.Object implements com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment
{
    protected com.hp.hpl.jena.graph.Node[] environment;
    protected java.util.ArrayList trail;
    protected int index;

    public void <init>()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack r0;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: java.util.ArrayList trail> = $r1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index> = 0;

        return;
    }

    public void push()
    {
        java.util.ArrayList $r1, $r3, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack r0;
        com.hp.hpl.jena.graph.Node[] $r2, $r4, $r5, $r6, $r7, $r9;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: java.util.ArrayList trail>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index>;

        if $i0 <= $i1 goto label1;

        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: java.util.ArrayList trail>;

        $i6 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index>;

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node[] environment>;

        virtualinvoke $r8.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i6, $r7);

        goto label2;

     label1:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: java.util.ArrayList trail>;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node[] environment>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

     label2:
        $i2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index>;

        $i3 = $i2 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index> = $i3;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node[] environment>;

        $i4 = lengthof $r4;

        $r9 = newarray (com.hp.hpl.jena.graph.Node)[$i4];

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node[] environment>;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node[] environment>;

        $i5 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r9, 0, $i5);

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node[] environment> = $r9;

        return;
    }

    public void unwind() throws java.lang.IndexOutOfBoundsException
    {
        java.lang.IndexOutOfBoundsException $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack r0;
        com.hp.hpl.jena.graph.Node[] $r4;
        java.util.ArrayList $r2, $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: java.util.ArrayList trail>;

        $i1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index>;

        $i2 = $i1 - 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index> = $i2;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r4 = (com.hp.hpl.jena.graph.Node[]) $r3;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node[] environment> = $r4;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: java.util.ArrayList trail>;

        $i3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index>;

        virtualinvoke $r5.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i3, null);

        goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Underflow of BindingEnvironment");

        throw $r1;

     label2:
        return;
    }

    public void commit() throws java.lang.IndexOutOfBoundsException
    {
        java.lang.IndexOutOfBoundsException $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack r0;
        java.util.ArrayList $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: java.util.ArrayList trail>;

        $i1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index>;

        $i2 = $i1 - 1;

        virtualinvoke $r2.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i2, null);

        $i3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index>;

        $i4 = $i3 - 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index> = $i4;

        goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Underflow of BindingEnvironment");

        throw $r1;

     label2:
        return;
    }

    public void reset(int)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack r0;
        com.hp.hpl.jena.graph.Node[] $r2;
        int i0;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        i0 := @parameter0: int;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: int index> = 0;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: java.util.ArrayList trail>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        $r2 = newarray (com.hp.hpl.jena.graph.Node)[i0];

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node[] environment> = $r2;

        return;
    }

    public com.hp.hpl.jena.graph.Node[] getEnvironment()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack r0;
        com.hp.hpl.jena.graph.Node[] $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node[] environment>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.Node getBinding(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r7, $r9, $r10, $r13;
        java.util.ArrayList $r4;
        int $i0, $i1, $i2, i3;
        java.lang.String $r6;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.graph.Node[] $r3, $r12;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack r8;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r11;
        java.lang.Object $r1;
        com.hp.hpl.jena.reasoner.rulesys.Functor r2, $r5;

        r8 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label1;

        $r12 = r8.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node[] environment>;

        $r11 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r0;

        $i2 = virtualinvoke $r11.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        $r13 = $r12[$i2];

        return $r13;

     label1:
        $z1 = r0 instanceof com.hp.hpl.jena.graph.Node_ANY;

        if $z1 == 0 goto label2;

        return null;

     label2:
        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>(r0);

        if $z2 == 0 goto label7;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r2 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r1;

        $z3 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isGround()>();

        if $z3 == 0 goto label3;

        return r0;

     label3:
        $r3 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $r4 = new java.util.ArrayList;

        $i0 = lengthof $r3;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        i3 = 0;

     label4:
        $i1 = lengthof $r3;

        if i3 >= $i1 goto label6;

        $r9 = $r3[i3];

        $r10 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node getBinding(com.hp.hpl.jena.graph.Node)>($r9);

        if $r10 != null goto label5;

        return null;

     label5:
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r10);

        i3 = i3 + 1;

        goto label4;

     label6:
        $r5 = new com.hp.hpl.jena.reasoner.rulesys.Functor;

        $r6 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        specialinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.Functor: void <init>(java.lang.String,java.util.List)>($r6, $r4);

        $r7 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node makeFunctorNode(com.hp.hpl.jena.reasoner.rulesys.Functor)>($r5);

        return $r7;

     label7:
        return r0;
    }

    public com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack r0;
        com.hp.hpl.jena.graph.Node r1, $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node getBinding(com.hp.hpl.jena.graph.Node)>(r1);

        if $r2 != null goto label1;

        return r1;

     label1:
        return $r2;
    }

    public boolean bind(int, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack r0;
        com.hp.hpl.jena.graph.Node[] $r1, $r4;
        int i0;
        com.hp.hpl.jena.graph.Node r2, r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        i0 := @parameter0: int;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node[] environment>;

        r2 = $r1[i0];

        if r2 != null goto label1;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node[] environment>;

        $r4[i0] = r3;

        return 1;

     label1:
        $z0 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r3);

        return $z0;
    }

    public boolean bind(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack r2;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r3;
        com.hp.hpl.jena.graph.Node r0, r1;
        int $i0;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label1;

        $r3 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r0;

        $i0 = virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        $z2 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: boolean bind(int,com.hp.hpl.jena.graph.Node)>($i0, r1);

        return $z2;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r1);

        return $z1;
    }

    public void bindNoCheck(com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack r0;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r1;
        com.hp.hpl.jena.graph.Node[] $r2;
        int $i0;
        com.hp.hpl.jena.graph.Node r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node[] environment>;

        $i0 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        $r2[$i0] = r3;

        return;
    }

    public com.hp.hpl.jena.graph.Triple instantiate(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack r0;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5, $r6, $r7, r9, r10, r11;
        com.hp.hpl.jena.graph.Triple $r8;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>($r2);

        r9 = $r3;

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label1;

        r9 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

     label1:
        $r4 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>($r4);

        r10 = $r5;

        $z1 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 == 0 goto label2;

        r10 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

     label2:
        $r6 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>($r6);

        r11 = $r7;

        $z2 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z2 == 0 goto label3;

        r11 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

     label3:
        $r8 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r8.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r9, r10, r11);

        return $r8;
    }
}
