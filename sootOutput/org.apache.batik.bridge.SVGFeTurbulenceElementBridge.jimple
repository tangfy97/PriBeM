public class org.apache.batik.bridge.SVGFeTurbulenceElementBridge extends org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge
{

    public void <init>()
    {
        org.apache.batik.bridge.SVGFeTurbulenceElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGFeTurbulenceElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: void <init>()>();

        return;
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.bridge.SVGFeTurbulenceElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGFeTurbulenceElementBridge;

        return "feTurbulence";
    }

    public org.apache.batik.ext.awt.image.renderable.Filter createFilter(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.ext.awt.image.renderable.Filter, java.awt.geom.Rectangle2D, java.util.Map)
    {
        java.awt.geom.Rectangle2D r7, $r8;
        float[] $r9;
        java.util.Map r4;
        int $i0, $i1;
        boolean $z0, $z1;
        double $d0, $d1;
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit $r10;
        org.apache.batik.gvt.GraphicsNode r2;
        org.apache.batik.bridge.BridgeContext r5;
        org.apache.batik.ext.awt.image.renderable.Filter r3, $r6;
        org.w3c.dom.Element r0, r1;
        float $f0, $f1;
        org.apache.batik.bridge.SVGFeTurbulenceElementBridge r11;

        r11 := @this: org.apache.batik.bridge.SVGFeTurbulenceElementBridge;

        r5 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        r1 := @parameter2: org.w3c.dom.Element;

        r2 := @parameter3: org.apache.batik.gvt.GraphicsNode;

        r3 := @parameter4: org.apache.batik.ext.awt.image.renderable.Filter;

        r7 := @parameter5: java.awt.geom.Rectangle2D;

        r4 := @parameter6: java.util.Map;

        $r6 = staticinvoke <org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: org.apache.batik.ext.awt.image.renderable.Filter getIn(org.w3c.dom.Element,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map,org.apache.batik.bridge.BridgeContext)>(r0, r1, r2, r3, r4, r5);

        if $r6 != null goto label1;

        return null;

     label1:
        $r8 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.Rectangle2D convertFilterPrimitiveRegion(org.w3c.dom.Element,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.apache.batik.bridge.BridgeContext)>(r0, r1, r2, r7, r7, r5);

        $r9 = staticinvoke <org.apache.batik.bridge.SVGFeTurbulenceElementBridge: float[] convertBaseFrenquency(org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r0, r5);

        $i0 = staticinvoke <org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: int convertInteger(org.w3c.dom.Element,java.lang.String,int,org.apache.batik.bridge.BridgeContext)>(r0, "numOctaves", 1, r5);

        $i1 = staticinvoke <org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: int convertInteger(org.w3c.dom.Element,java.lang.String,int,org.apache.batik.bridge.BridgeContext)>(r0, "seed", 0, r5);

        $z0 = staticinvoke <org.apache.batik.bridge.SVGFeTurbulenceElementBridge: boolean convertStitchTiles(org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r0, r5);

        $z1 = staticinvoke <org.apache.batik.bridge.SVGFeTurbulenceElementBridge: boolean convertType(org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r0, r5);

        $r10 = new org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        specialinvoke $r10.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: void <init>(java.awt.geom.Rectangle2D)>($r8);

        $f0 = $r9[0];

        $d0 = (double) $f0;

        interfaceinvoke $r10.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable: void setBaseFrequencyX(double)>($d0);

        $f1 = $r9[1];

        $d1 = (double) $f1;

        interfaceinvoke $r10.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable: void setBaseFrequencyY(double)>($d1);

        interfaceinvoke $r10.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable: void setNumOctaves(int)>($i0);

        interfaceinvoke $r10.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable: void setSeed(int)>($i1);

        interfaceinvoke $r10.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable: void setStitched(boolean)>($z0);

        interfaceinvoke $r10.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable: void setFractalNoise(boolean)>($z1);

        staticinvoke <org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: void handleColorInterpolationFilters(org.apache.batik.ext.awt.image.renderable.Filter,org.w3c.dom.Element)>($r10, r0);

        staticinvoke <org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: void updateFilterMap(org.w3c.dom.Element,org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r0, $r10, r4);

        return $r10;
    }

    protected static float[] convertBaseFrenquency(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r7, $r9, $r14;
        float[] r2, $r11;
        byte $b1, $b2;
        java.util.StringTokenizer $r15;
        int $i0, $i3, $i4;
        java.lang.String $r1, $r4, $r10;
        boolean $z0, $z1;
        org.apache.batik.bridge.BridgeException $r16, $r17, $r18;
        org.apache.batik.bridge.BridgeContext r6;
        java.lang.NumberFormatException $r12;
        org.w3c.dom.Element r0;
        float $f0, $f1, $f2, $f3, $f4;

        r0 := @parameter0: org.w3c.dom.Element;

        r6 := @parameter1: org.apache.batik.bridge.BridgeContext;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "baseFrequency");

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r11 = newarray (float)[2];

        $r11[0] = 0.001F;

        $r11[1] = 0.001F;

        return $r11;

     label1:
        r2 = newarray (float)[2];

        $r15 = new java.util.StringTokenizer;

        specialinvoke $r15.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, " ,");

     label2:
        $r4 = virtualinvoke $r15.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f0 = staticinvoke <org.apache.batik.bridge.SVGUtilities: float convertSVGNumber(java.lang.String)>($r4);

        r2[0] = $f0;

        $z0 = virtualinvoke $r15.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r10 = virtualinvoke $r15.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f4 = staticinvoke <org.apache.batik.bridge.SVGUtilities: float convertSVGNumber(java.lang.String)>($r10);

        r2[1] = $f4;

        goto label4;

     label3:
        $f1 = r2[0];

        r2[1] = $f1;

     label4:
        $z1 = virtualinvoke $r15.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label5;

        $r16 = new org.apache.batik.bridge.BridgeException;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = "baseFrequency";

        $r9[1] = $r1;

        specialinvoke $r16.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r6, r0, "attribute.malformed", $r9);

        throw $r16;

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

        $r17 = new org.apache.batik.bridge.BridgeException;

        $r14 = newarray (java.lang.Object)[2];

        $r14[0] = "baseFrequency";

        $r14[1] = $r1;

        specialinvoke $r17.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r6, r0, $r12, "attribute.malformed", $r14);

        throw $r17;

     label7:
        $f2 = r2[0];

        $b1 = $f2 cmpg 0.0F;

        $i3 = (int) $b1;

        if $i3 < 0 goto label8;

        $f3 = r2[1];

        $b2 = $f3 cmpg 0.0F;

        $i4 = (int) $b2;

        if $i4 >= 0 goto label9;

     label8:
        $r18 = new org.apache.batik.bridge.BridgeException;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = "baseFrequency";

        $r7[1] = $r1;

        specialinvoke $r18.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r6, r0, "attribute.malformed", $r7);

        throw $r18;

     label9:
        return r2;

        catch java.lang.NumberFormatException from label2 to label5 with label6;
    }

    protected static boolean convertStitchTiles(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r6;
        org.apache.batik.bridge.BridgeException $r4;
        org.apache.batik.bridge.BridgeContext r5;
        org.w3c.dom.Element r0;
        int $i0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.w3c.dom.Element;

        r5 := @parameter1: org.apache.batik.bridge.BridgeContext;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "stitchTiles");

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $r2 = "stitch";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r3 = "noStitch";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r4 = new org.apache.batik.bridge.BridgeException;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "stitchTiles";

        $r6[1] = $r1;

        specialinvoke $r4.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r5, r0, "attribute.malformed", $r6);

        throw $r4;
    }

    protected static boolean convertType(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r6;
        org.apache.batik.bridge.BridgeException $r4;
        org.apache.batik.bridge.BridgeContext r5;
        org.w3c.dom.Element r0;
        int $i0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.w3c.dom.Element;

        r5 := @parameter1: org.apache.batik.bridge.BridgeContext;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "type");

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $r2 = "fractalNoise";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r3 = "turbulence";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r4 = new org.apache.batik.bridge.BridgeException;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "type";

        $r6[1] = $r1;

        specialinvoke $r4.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r5, r0, "attribute.malformed", $r6);

        throw $r4;
    }
}
