final class org.apache.lucene.index.ByteSliceWriter extends org.apache.lucene.store.DataOutput
{
    private byte[] slice;
    private int upto;
    private final org.apache.lucene.util.ByteBlockPool pool;
    int offset0;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.util.ByteBlockPool)
    {
        org.apache.lucene.index.ByteSliceWriter r0;
        org.apache.lucene.util.ByteBlockPool r1;

        r0 := @this: org.apache.lucene.index.ByteSliceWriter;

        r1 := @parameter0: org.apache.lucene.util.ByteBlockPool;

        specialinvoke r0.<org.apache.lucene.store.DataOutput: void <init>()>();

        r0.<org.apache.lucene.index.ByteSliceWriter: org.apache.lucene.util.ByteBlockPool pool> = r1;

        return;
    }

    public void init(int)
    {
        byte[] $r3, $r4, $r6;
        org.apache.lucene.index.ByteSliceWriter r0;
        java.lang.AssertionError $r5, $r7;
        org.apache.lucene.util.ByteBlockPool $r1;
        byte[][] $r2;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.ByteSliceWriter;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.index.ByteSliceWriter: org.apache.lucene.util.ByteBlockPool pool>;

        $r2 = $r1.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $i1 = i0 >> 15;

        $r3 = $r2[$i1];

        r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice> = $r3;

        $z0 = <org.apache.lucene.index.ByteSliceWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r6 = r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice>;

        if $r6 != null goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $i2 = i0 & 32767;

        r0.<org.apache.lucene.index.ByteSliceWriter: int upto> = $i2;

        r0.<org.apache.lucene.index.ByteSliceWriter: int offset0> = i0;

        $z1 = <org.apache.lucene.index.ByteSliceWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i4 = r0.<org.apache.lucene.index.ByteSliceWriter: int upto>;

        $r4 = r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice>;

        $i3 = lengthof $r4;

        if $i4 < $i3 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        return;
    }

    public void writeByte(byte)
    {
        byte[] $r1, $r2, $r4, $r7, $r9, $r11, $r13;
        org.apache.lucene.index.ByteSliceWriter r0;
        java.lang.AssertionError $r3, $r10, $r12;
        org.apache.lucene.util.ByteBlockPool $r5, $r6, $r8;
        byte $b1, b2;
        int $i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.index.ByteSliceWriter;

        b2 := @parameter0: byte;

        $z0 = <org.apache.lucene.index.ByteSliceWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r11 = r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice>;

        if $r11 != null goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $r1 = r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice>;

        $i0 = r0.<org.apache.lucene.index.ByteSliceWriter: int upto>;

        $b1 = $r1[$i0];

        if $b1 == 0 goto label2;

        $r5 = r0.<org.apache.lucene.index.ByteSliceWriter: org.apache.lucene.util.ByteBlockPool pool>;

        $r4 = r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice>;

        $i5 = r0.<org.apache.lucene.index.ByteSliceWriter: int upto>;

        $i6 = virtualinvoke $r5.<org.apache.lucene.util.ByteBlockPool: int allocSlice(byte[],int)>($r4, $i5);

        r0.<org.apache.lucene.index.ByteSliceWriter: int upto> = $i6;

        $r6 = r0.<org.apache.lucene.index.ByteSliceWriter: org.apache.lucene.util.ByteBlockPool pool>;

        $r7 = $r6.<org.apache.lucene.util.ByteBlockPool: byte[] buffer>;

        r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice> = $r7;

        $r8 = r0.<org.apache.lucene.index.ByteSliceWriter: org.apache.lucene.util.ByteBlockPool pool>;

        $i7 = $r8.<org.apache.lucene.util.ByteBlockPool: int byteOffset>;

        r0.<org.apache.lucene.index.ByteSliceWriter: int offset0> = $i7;

        $z1 = <org.apache.lucene.index.ByteSliceWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r9 = r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice>;

        if $r9 != null goto label2;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label2:
        $r13 = r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice>;

        $i8 = r0.<org.apache.lucene.index.ByteSliceWriter: int upto>;

        $i9 = $i8 + 1;

        r0.<org.apache.lucene.index.ByteSliceWriter: int upto> = $i9;

        $r13[$i8] = b2;

        $z2 = <org.apache.lucene.index.ByteSliceWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $i4 = r0.<org.apache.lucene.index.ByteSliceWriter: int upto>;

        $r2 = r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice>;

        $i3 = lengthof $r2;

        if $i4 != $i3 goto label3;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        return;
    }

    public void writeBytes(byte[], int, int)
    {
        byte[] $r1, $r2, r3, $r4, $r6, $r9;
        org.apache.lucene.index.ByteSliceWriter r0;
        java.lang.AssertionError $r5;
        org.apache.lucene.util.ByteBlockPool $r7, $r8, $r10;
        byte $b3, $b7;
        int i0, i1, $i2, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, i13;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ByteSliceWriter;

        r3 := @parameter0: byte[];

        i13 := @parameter1: int;

        i0 := @parameter2: int;

        i1 = i13 + i0;

     label1:
        if i13 >= i1 goto label3;

        $r1 = r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice>;

        $i2 = r0.<org.apache.lucene.index.ByteSliceWriter: int upto>;

        $b3 = $r1[$i2];

        if $b3 == 0 goto label2;

        $r7 = r0.<org.apache.lucene.index.ByteSliceWriter: org.apache.lucene.util.ByteBlockPool pool>;

        $r6 = r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice>;

        $i10 = r0.<org.apache.lucene.index.ByteSliceWriter: int upto>;

        $i11 = virtualinvoke $r7.<org.apache.lucene.util.ByteBlockPool: int allocSlice(byte[],int)>($r6, $i10);

        r0.<org.apache.lucene.index.ByteSliceWriter: int upto> = $i11;

        $r8 = r0.<org.apache.lucene.index.ByteSliceWriter: org.apache.lucene.util.ByteBlockPool pool>;

        $r9 = $r8.<org.apache.lucene.util.ByteBlockPool: byte[] buffer>;

        r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice> = $r9;

        $r10 = r0.<org.apache.lucene.index.ByteSliceWriter: org.apache.lucene.util.ByteBlockPool pool>;

        $i12 = $r10.<org.apache.lucene.util.ByteBlockPool: int byteOffset>;

        r0.<org.apache.lucene.index.ByteSliceWriter: int offset0> = $i12;

     label2:
        $r2 = r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice>;

        $i4 = r0.<org.apache.lucene.index.ByteSliceWriter: int upto>;

        $i5 = $i4 + 1;

        r0.<org.apache.lucene.index.ByteSliceWriter: int upto> = $i5;

        $i6 = i13;

        i13 = i13 + 1;

        $b7 = r3[$i6];

        $r2[$i4] = $b7;

        $z0 = <org.apache.lucene.index.ByteSliceWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i9 = r0.<org.apache.lucene.index.ByteSliceWriter: int upto>;

        $r4 = r0.<org.apache.lucene.index.ByteSliceWriter: byte[] slice>;

        $i8 = lengthof $r4;

        if $i9 != $i8 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        return;
    }

    public int getAddress()
    {
        org.apache.lucene.index.ByteSliceWriter r0;
        int $i0, $i1, $i2, $i3, $i5;

        r0 := @this: org.apache.lucene.index.ByteSliceWriter;

        $i2 = r0.<org.apache.lucene.index.ByteSliceWriter: int upto>;

        $i0 = r0.<org.apache.lucene.index.ByteSliceWriter: int offset0>;

        $i5 = (int) -32768;

        $i1 = $i0 & $i5;

        $i3 = $i2 + $i1;

        return $i3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/ByteSliceWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.ByteSliceWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
