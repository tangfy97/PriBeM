class org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset extends org.apache.jena.riot.system.StreamRDFBase
{
    protected final com.hp.hpl.jena.sparql.core.DatasetGraph dsg;
    protected final com.hp.hpl.jena.shared.PrefixMapping prefixMapping;

    public void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.shared.PrefixMapping $r3;
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset r0;

        r0 := @this: org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        specialinvoke r0.<org.apache.jena.riot.system.StreamRDFBase: void <init>()>();

        r0.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset: com.hp.hpl.jena.sparql.core.DatasetGraph dsg> = r1;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        r0.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset: com.hp.hpl.jena.shared.PrefixMapping prefixMapping> = $r3;

        return;
    }

    public void triple(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5, $r6;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r3 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.core.DatasetGraph: void add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r4, $r5, $r6);

        return;
    }

    public void quad(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.graph.Node $r4, $r5, $r6, $r7;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2, $r3;
        com.hp.hpl.jena.sparql.core.Quad r0;
        boolean $z0;
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset r1;

        r1 := @this: org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: boolean isTriple()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r4 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.sparql.core.DatasetGraph: void add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r5, $r6, $r7);

        goto label2;

     label1:
        $r2 = r1.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.core.DatasetGraph: void add(com.hp.hpl.jena.sparql.core.Quad)>(r0);

     label2:
        return;
    }

    public void base(java.lang.String)
    {
        java.lang.String r1;
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset r0;

        r0 := @this: org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void prefix(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.shared.JenaException $r4;
        java.lang.String r1, r2;
        com.hp.hpl.jena.shared.PrefixMapping $r3;
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset r0;

        r0 := @this: org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r3 = r0.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        interfaceinvoke $r3.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch com.hp.hpl.jena.shared.JenaException from label1 to label2 with label3;
    }
}
