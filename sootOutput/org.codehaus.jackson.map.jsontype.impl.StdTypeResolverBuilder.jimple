public class org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder extends java.lang.Object implements org.codehaus.jackson.map.jsontype.TypeResolverBuilder
{
    protected org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType;
    protected org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs;
    protected java.lang.String _typeProperty;
    protected java.lang.Class _defaultImpl;
    protected org.codehaus.jackson.map.jsontype.TypeIdResolver _customIdResolver;

    public java.lang.Class getDefaultImpl()
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        java.lang.Class $r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;

        return $r1;
    }

    public void <init>()
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder noTypeInfoBuilder()
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder $r0, $r2;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r1;

        $r0 = new org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        specialinvoke $r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: void <init>()>();

        $r1 = <org.codehaus.jackson.annotate.JsonTypeInfo$Id: org.codehaus.jackson.annotate.JsonTypeInfo$Id NONE>;

        $r2 = virtualinvoke $r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder init(org.codehaus.jackson.annotate.JsonTypeInfo$Id,org.codehaus.jackson.map.jsontype.TypeIdResolver)>($r1, null);

        return $r2;
    }

    public org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder init(org.codehaus.jackson.annotate.JsonTypeInfo$Id, org.codehaus.jackson.map.jsontype.TypeIdResolver)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r1;
        org.codehaus.jackson.map.jsontype.TypeIdResolver r2;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id r0;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        r0 := @parameter0: org.codehaus.jackson.annotate.JsonTypeInfo$Id;

        r2 := @parameter1: org.codehaus.jackson.map.jsontype.TypeIdResolver;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("idType can not be null");

        throw $r4;

     label1:
        r1.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType> = r0;

        r1.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeIdResolver _customIdResolver> = r2;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.annotate.JsonTypeInfo$Id: java.lang.String getDefaultPropertyName()>();

        r1.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty> = $r3;

        return r1;
    }

    public org.codehaus.jackson.map.TypeSerializer buildTypeSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, java.util.Collection, org.codehaus.jackson.map.BeanProperty)
    {
        java.lang.IllegalStateException $r16;
        org.codehaus.jackson.map.jsontype.impl.AsExternalTypeSerializer $r9;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer $r13;
        org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeSerializer $r12;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r1, $r2;
        org.codehaus.jackson.map.SerializationConfig r3;
        int[] $r8;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType r4;
        java.lang.String $r11, $r14, $r21;
        org.codehaus.jackson.annotate.JsonTypeInfo$As $r7, $r19;
        java.util.Collection r5;
        org.codehaus.jackson.map.BeanProperty r10;
        org.codehaus.jackson.map.jsontype.impl.AsArrayTypeSerializer $r15;
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r6;
        java.lang.StringBuilder $r17, $r18, $r20;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        r3 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r4 := @parameter1: org.codehaus.jackson.type.JavaType;

        r5 := @parameter2: java.util.Collection;

        r10 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r2 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType>;

        $r1 = <org.codehaus.jackson.annotate.JsonTypeInfo$Id: org.codehaus.jackson.annotate.JsonTypeInfo$Id NONE>;

        if $r2 != $r1 goto label1;

        return null;

     label1:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeIdResolver idResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,boolean,boolean)>(r3, r4, r5, 1, 0);

        $r8 = <org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder$1: int[] $SwitchMap$org$codehaus$jackson$annotate$JsonTypeInfo$As>;

        $r7 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs>;

        $i0 = virtualinvoke $r7.<org.codehaus.jackson.annotate.JsonTypeInfo$As: int ordinal()>();

        $i1 = $r8[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label2:
        $r15 = new org.codehaus.jackson.map.jsontype.impl.AsArrayTypeSerializer;

        specialinvoke $r15.<org.codehaus.jackson.map.jsontype.impl.AsArrayTypeSerializer: void <init>(org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty)>($r6, r10);

        return $r15;

     label3:
        $r13 = new org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer;

        $r14 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;

        specialinvoke $r13.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer: void <init>(org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty,java.lang.String)>($r6, r10, $r14);

        return $r13;

     label4:
        $r12 = new org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeSerializer;

        specialinvoke $r12.<org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeSerializer: void <init>(org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty)>($r6, r10);

        return $r12;

     label5:
        $r9 = new org.codehaus.jackson.map.jsontype.impl.AsExternalTypeSerializer;

        $r11 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;

        specialinvoke $r9.<org.codehaus.jackson.map.jsontype.impl.AsExternalTypeSerializer: void <init>(org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty,java.lang.String)>($r6, r10, $r11);

        return $r9;

     label6:
        $r16 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Do not know how to construct standard type serializer for inclusion type: ");

        $r19 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw $r16;
    }

    public org.codehaus.jackson.map.TypeDeserializer buildTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, java.util.Collection, org.codehaus.jackson.map.BeanProperty)
    {
        java.lang.IllegalStateException $r20;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r1, $r2;
        org.codehaus.jackson.map.DeserializationConfig r3;
        org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer $r18;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer $r15;
        int[] $r8;
        org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer $r13;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType r4;
        java.lang.String $r11, $r16, $r25;
        org.codehaus.jackson.annotate.JsonTypeInfo$As $r7, $r23;
        java.util.Collection r5;
        org.codehaus.jackson.map.jsontype.impl.AsExternalTypeDeserializer $r9;
        org.codehaus.jackson.map.BeanProperty r10;
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r6;
        java.lang.Class $r12, $r14, $r17, $r19;
        java.lang.StringBuilder $r21, $r22, $r24;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        r3 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r4 := @parameter1: org.codehaus.jackson.type.JavaType;

        r5 := @parameter2: java.util.Collection;

        r10 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r2 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType>;

        $r1 = <org.codehaus.jackson.annotate.JsonTypeInfo$Id: org.codehaus.jackson.annotate.JsonTypeInfo$Id NONE>;

        if $r2 != $r1 goto label1;

        return null;

     label1:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeIdResolver idResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,boolean,boolean)>(r3, r4, r5, 0, 1);

        $r8 = <org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder$1: int[] $SwitchMap$org$codehaus$jackson$annotate$JsonTypeInfo$As>;

        $r7 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs>;

        $i0 = virtualinvoke $r7.<org.codehaus.jackson.annotate.JsonTypeInfo$As: int ordinal()>();

        $i1 = $r8[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label2:
        $r18 = new org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer;

        $r19 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;

        specialinvoke $r18.<org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty,java.lang.Class)>(r4, $r6, r10, $r19);

        return $r18;

     label3:
        $r15 = new org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer;

        $r17 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;

        $r16 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;

        specialinvoke $r15.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty,java.lang.Class,java.lang.String)>(r4, $r6, r10, $r17, $r16);

        return $r15;

     label4:
        $r13 = new org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer;

        $r14 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;

        specialinvoke $r13.<org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty,java.lang.Class)>(r4, $r6, r10, $r14);

        return $r13;

     label5:
        $r9 = new org.codehaus.jackson.map.jsontype.impl.AsExternalTypeDeserializer;

        $r12 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;

        $r11 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;

        specialinvoke $r9.<org.codehaus.jackson.map.jsontype.impl.AsExternalTypeDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty,java.lang.Class,java.lang.String)>(r4, $r6, r10, $r12, $r11);

        return $r9;

     label6:
        $r20 = new java.lang.IllegalStateException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Do not know how to construct standard type serializer for inclusion type: ");

        $r23 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r20;
    }

    public org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder inclusion(org.codehaus.jackson.annotate.JsonTypeInfo$As)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r1;
        org.codehaus.jackson.annotate.JsonTypeInfo$As r0;
        java.lang.IllegalArgumentException $r2;

        r1 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        r0 := @parameter0: org.codehaus.jackson.annotate.JsonTypeInfo$As;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("includeAs can not be null");

        throw $r2;

     label1:
        r1.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs> = r0;

        return r1;
    }

    public org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder typeProperty(java.lang.String)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        int $i0;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r1;
        java.lang.String r2;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        r2 := @parameter0: java.lang.String;

        if r2 == null goto label1;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType>;

        r2 = virtualinvoke $r1.<org.codehaus.jackson.annotate.JsonTypeInfo$Id: java.lang.String getDefaultPropertyName()>();

     label2:
        r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty> = r2;

        return r0;
    }

    public org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder defaultImpl(java.lang.Class)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        java.lang.Class r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        r1 := @parameter0: java.lang.Class;

        r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl> = r1;

        return r0;
    }

    public java.lang.String getTypeProperty()
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;

        return $r1;
    }

    protected org.codehaus.jackson.map.jsontype.TypeIdResolver idResolver(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, java.util.Collection, boolean, boolean)
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver $r8;
        java.lang.IllegalStateException $r13, $r19;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r2, $r3, $r16;
        org.codehaus.jackson.map.type.TypeFactory $r10, $r12;
        int[] $r4;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType r6;
        java.lang.String $r18;
        boolean z0, z1;
        java.util.Collection r7;
        org.codehaus.jackson.map.MapperConfig r5;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver $r11;
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r1, $r20;
        org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver $r9;
        java.lang.StringBuilder $r14, $r15, $r17;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        r5 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r6 := @parameter1: org.codehaus.jackson.type.JavaType;

        r7 := @parameter2: java.util.Collection;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r1 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeIdResolver _customIdResolver>;

        if $r1 == null goto label1;

        $r20 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeIdResolver _customIdResolver>;

        return $r20;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType>;

        if $r2 != null goto label2;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can not build, \'init()\' not yet called");

        throw $r19;

     label2:
        $r4 = <org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder$1: int[] $SwitchMap$org$codehaus$jackson$annotate$JsonTypeInfo$Id>;

        $r3 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType>;

        $i0 = virtualinvoke $r3.<org.codehaus.jackson.annotate.JsonTypeInfo$Id: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 5: goto label7;
            default: goto label7;
        };

     label3:
        $r11 = new org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        $r12 = virtualinvoke r5.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.type.TypeFactory getTypeFactory()>();

        specialinvoke $r11.<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.type.TypeFactory)>(r6, $r12);

        return $r11;

     label4:
        $r9 = new org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver;

        $r10 = virtualinvoke r5.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.type.TypeFactory getTypeFactory()>();

        specialinvoke $r9.<org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.type.TypeFactory)>(r6, $r10);

        return $r9;

     label5:
        $r8 = staticinvoke <org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver construct(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,boolean,boolean)>(r5, r6, r7, z0, z1);

        return $r8;

     label6:
        return null;

     label7:
        $r13 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Do not know how to construct standard type id resolver for idType: ");

        $r16 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r13;
    }

    public volatile org.codehaus.jackson.map.jsontype.TypeResolverBuilder defaultImpl(java.lang.Class)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0, $r2;
        java.lang.Class r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder defaultImpl(java.lang.Class)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.jsontype.TypeResolverBuilder typeProperty(java.lang.String)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0, $r2;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder typeProperty(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.jsontype.TypeResolverBuilder inclusion(org.codehaus.jackson.annotate.JsonTypeInfo$As)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0, $r2;
        org.codehaus.jackson.annotate.JsonTypeInfo$As r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        r1 := @parameter0: org.codehaus.jackson.annotate.JsonTypeInfo$As;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder inclusion(org.codehaus.jackson.annotate.JsonTypeInfo$As)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.jsontype.TypeResolverBuilder init(org.codehaus.jackson.annotate.JsonTypeInfo$Id, org.codehaus.jackson.map.jsontype.TypeIdResolver)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0, $r3;
        org.codehaus.jackson.map.jsontype.TypeIdResolver r2;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        r1 := @parameter0: org.codehaus.jackson.annotate.JsonTypeInfo$Id;

        r2 := @parameter1: org.codehaus.jackson.map.jsontype.TypeIdResolver;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder init(org.codehaus.jackson.annotate.JsonTypeInfo$Id,org.codehaus.jackson.map.jsontype.TypeIdResolver)>(r1, r2);

        return $r3;
    }
}
