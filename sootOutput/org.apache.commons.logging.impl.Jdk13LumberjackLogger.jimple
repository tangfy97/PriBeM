public class org.apache.commons.logging.impl.Jdk13LumberjackLogger extends java.lang.Object implements org.apache.commons.logging.Log, java.io.Serializable
{
    protected transient java.util.logging.Logger logger;
    protected java.lang.String name;
    private java.lang.String sourceClassName;
    private java.lang.String sourceMethodName;
    private boolean classAndMethodFound;
    protected static final java.util.logging.Level dummyLevel;

    public void <init>(java.lang.String)
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.String r1;
        java.util.logging.Logger $r2;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger logger> = null;

        r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.lang.String name> = null;

        r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.lang.String sourceClassName> = "unknown";

        r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.lang.String sourceMethodName> = "unknown";

        r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean classAndMethodFound> = 0;

        r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.lang.String name> = r1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>();

        r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger logger> = $r2;

        return;
    }

    private void log(java.util.logging.Level, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r7;
        java.util.logging.Logger $r1, $r8;
        java.util.logging.LogRecord $r3;
        java.util.logging.Level r2;
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.String r4, $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        r2 := @parameter0: java.util.logging.Level;

        r4 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.Throwable;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>();

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(r2);

        if $z0 == 0 goto label3;

        $r3 = new java.util.logging.LogRecord;

        specialinvoke $r3.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r2, r4);

        $z1 = r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean classAndMethodFound>;

        if $z1 != 0 goto label1;

        specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void getClassAndMethod()>();

     label1:
        $r5 = r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.lang.String sourceClassName>;

        virtualinvoke $r3.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>($r5);

        $r6 = r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.lang.String sourceMethodName>;

        virtualinvoke $r3.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>($r6);

        if r7 == null goto label2;

        virtualinvoke $r3.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r7);

     label2:
        $r8 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>();

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>($r3);

     label3:
        return;
    }

    private void getClassAndMethod()
    {
        java.lang.Throwable $r16;
        java.lang.StringBuffer $r3;
        java.util.StringTokenizer $r19;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i8;
        java.lang.String $r4, $r8, $r10, $r11, $r12, $r13, r15;
        java.io.PrintWriter $r18;
        java.io.StringWriter $r17;
        java.lang.Exception $r14;
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r6;
        java.lang.Class $r7, $r9;

        r6 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

     label1:
        $r16 = new java.lang.Throwable;

        specialinvoke $r16.<java.lang.Throwable: void <init>()>();

        virtualinvoke $r16.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        $r17 = new java.io.StringWriter;

        specialinvoke $r17.<java.io.StringWriter: void <init>()>();

        $r18 = new java.io.PrintWriter;

        specialinvoke $r18.<java.io.PrintWriter: void <init>(java.io.Writer)>($r17);

        virtualinvoke $r16.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r18);

        $r3 = virtualinvoke $r17.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $r19 = new java.util.StringTokenizer;

        specialinvoke $r19.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r4, "\n");

        virtualinvoke $r19.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r15 = virtualinvoke $r19.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label2:
        $r7 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke r15.<java.lang.String: int indexOf(java.lang.String)>($r8);

        $i8 = (int) -1;

        if $i0 != $i8 goto label3;

        r15 = virtualinvoke $r19.<java.util.StringTokenizer: java.lang.String nextToken()>();

        goto label2;

     label3:
        $r9 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $i1 = virtualinvoke r15.<java.lang.String: int indexOf(java.lang.String)>($r10);

        if $i1 < 0 goto label4;

        r15 = virtualinvoke $r19.<java.util.StringTokenizer: java.lang.String nextToken()>();

        goto label3;

     label4:
        $i2 = virtualinvoke r15.<java.lang.String: int indexOf(java.lang.String)>("at ");

        i3 = $i2 + 3;

        $i4 = virtualinvoke r15.<java.lang.String: int indexOf(int)>(40);

        $r11 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int,int)>(i3, $i4);

        $i5 = virtualinvoke $r11.<java.lang.String: int lastIndexOf(int)>(46);

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        r6.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.lang.String sourceClassName> = $r12;

        $i6 = $i5 + 1;

        $r13 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int)>($i6);

        r6.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.lang.String sourceMethodName> = $r13;

     label5:
        goto label7;

     label6:
        $r14 := @caughtexception;

     label7:
        r6.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: boolean classAndMethodFound> = 1;

        return;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    public void debug(java.lang.Object)
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.Object r1;
        java.lang.String $r3;
        java.util.logging.Level $r2;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null);

        return;
    }

    public void debug(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.Throwable r4;
        java.lang.Object r1;
        java.lang.String $r3;
        java.util.logging.Level $r2;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Throwable;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4);

        return;
    }

    public void error(java.lang.Object)
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.Object r1;
        java.lang.String $r3;
        java.util.logging.Level $r2;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null);

        return;
    }

    public void error(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.Throwable r4;
        java.lang.Object r1;
        java.lang.String $r3;
        java.util.logging.Level $r2;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Throwable;

        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4);

        return;
    }

    public void fatal(java.lang.Object)
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.Object r1;
        java.lang.String $r3;
        java.util.logging.Level $r2;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null);

        return;
    }

    public void fatal(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.Throwable r4;
        java.lang.Object r1;
        java.lang.String $r3;
        java.util.logging.Level $r2;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Throwable;

        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4);

        return;
    }

    public java.util.logging.Logger getLogger()
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.String $r3;
        java.util.logging.Logger $r1, $r2, $r4;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        $r1 = r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger logger>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.lang.String name>;

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3);

        r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger logger> = $r4;

     label1:
        $r2 = r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger logger>;

        return $r2;
    }

    public void info(java.lang.Object)
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.Object r1;
        java.lang.String $r3;
        java.util.logging.Level $r2;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null);

        return;
    }

    public void info(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.Throwable r4;
        java.lang.Object r1;
        java.lang.String $r3;
        java.util.logging.Level $r2;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Throwable;

        $r2 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4);

        return;
    }

    public boolean isDebugEnabled()
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>();

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2);

        return $z0;
    }

    public boolean isErrorEnabled()
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>();

        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2);

        return $z0;
    }

    public boolean isFatalEnabled()
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>();

        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2);

        return $z0;
    }

    public boolean isInfoEnabled()
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>();

        $r2 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2);

        return $z0;
    }

    public boolean isTraceEnabled()
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>();

        $r2 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2);

        return $z0;
    }

    public boolean isWarnEnabled()
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Logger getLogger()>();

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2);

        return $z0;
    }

    public void trace(java.lang.Object)
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.Object r1;
        java.lang.String $r3;
        java.util.logging.Level $r2;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null);

        return;
    }

    public void trace(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.Throwable r4;
        java.lang.Object r1;
        java.lang.String $r3;
        java.util.logging.Level $r2;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Throwable;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4);

        return;
    }

    public void warn(java.lang.Object)
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.Object r1;
        java.lang.String $r3;
        java.util.logging.Level $r2;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null);

        return;
    }

    public void warn(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Jdk13LumberjackLogger r0;
        java.lang.Throwable r4;
        java.lang.Object r1;
        java.lang.String $r3;
        java.util.logging.Level $r2;

        r0 := @this: org.apache.commons.logging.impl.Jdk13LumberjackLogger;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Throwable;

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.commons.logging.impl.Jdk13LumberjackLogger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, r4);

        return;
    }

    static void <clinit>()
    {
        java.util.logging.Level $r0;

        $r0 = <java.util.logging.Level: java.util.logging.Level FINE>;

        <org.apache.commons.logging.impl.Jdk13LumberjackLogger: java.util.logging.Level dummyLevel> = $r0;

        return;
    }
}
