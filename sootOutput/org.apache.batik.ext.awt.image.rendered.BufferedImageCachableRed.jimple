public class org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{
    java.awt.image.BufferedImage bi;

    public void <init>(java.awt.image.BufferedImage)
    {
        java.awt.Rectangle $r1;
        java.awt.image.BufferedImage r2;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed r0;
        java.awt.image.SampleModel $r4;
        java.awt.image.ColorModel $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        r2 := @parameter0: java.awt.image.BufferedImage;

        $r1 = new java.awt.Rectangle;

        $i0 = virtualinvoke r2.<java.awt.image.BufferedImage: int getMinX()>();

        $i1 = virtualinvoke r2.<java.awt.image.BufferedImage: int getMinY()>();

        $i2 = virtualinvoke r2.<java.awt.image.BufferedImage: int getWidth()>();

        $i3 = virtualinvoke r2.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r1.<java.awt.Rectangle: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        $r3 = virtualinvoke r2.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r4 = virtualinvoke r2.<java.awt.image.BufferedImage: java.awt.image.SampleModel getSampleModel()>();

        $i4 = virtualinvoke r2.<java.awt.image.BufferedImage: int getMinX()>();

        $i5 = virtualinvoke r2.<java.awt.image.BufferedImage: int getMinY()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(null, $r1, $r3, $r4, $i4, $i5, null);

        r0.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: java.awt.image.BufferedImage bi> = r2;

        return;
    }

    public void <init>(java.awt.image.BufferedImage, int, int)
    {
        java.awt.Rectangle $r1;
        java.awt.image.BufferedImage r2;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed r0;
        java.awt.image.SampleModel $r4;
        java.awt.image.ColorModel $r3;
        int i0, i1, $i2, $i3;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        r2 := @parameter0: java.awt.image.BufferedImage;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new java.awt.Rectangle;

        $i2 = virtualinvoke r2.<java.awt.image.BufferedImage: int getWidth()>();

        $i3 = virtualinvoke r2.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r1.<java.awt.Rectangle: void <init>(int,int,int,int)>(i0, i1, $i2, $i3);

        $r3 = virtualinvoke r2.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r4 = virtualinvoke r2.<java.awt.image.BufferedImage: java.awt.image.SampleModel getSampleModel()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(null, $r1, $r3, $r4, i0, i1, null);

        r0.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: java.awt.image.BufferedImage bi> = r2;

        return;
    }

    public java.awt.Rectangle getBounds()
    {
        java.awt.Rectangle $r0;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed r1;
        int $i0, $i1, $i2, $i3;

        r1 := @this: org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        $r0 = new java.awt.Rectangle;

        $i0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinX()>();

        $i1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinY()>();

        $i2 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getWidth()>();

        $i3 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getHeight()>();

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $r0;
    }

    public java.awt.image.BufferedImage getBufferedImage()
    {
        java.awt.image.BufferedImage $r1;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: java.awt.image.BufferedImage bi>;

        return $r1;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        java.awt.image.BufferedImage $r2;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed r0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: java.awt.image.BufferedImage bi>;

        $r3 = virtualinvoke $r2.<java.awt.image.BufferedImage: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r3;
    }

    public java.lang.String[] getPropertyNames()
    {
        java.lang.String[] $r2;
        java.awt.image.BufferedImage $r1;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: java.awt.image.BufferedImage bi>;

        $r2 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.lang.String[] getPropertyNames()>();

        return $r2;
    }

    public java.awt.image.Raster getTile(int, int)
    {
        java.awt.image.BufferedImage $r1;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed r0;
        int i0, i1;
        java.awt.image.Raster $r2;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: java.awt.image.BufferedImage bi>;

        $r2 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.image.Raster getTile(int,int)>(i0, i1);

        return $r2;
    }

    public java.awt.image.Raster getData()
    {
        java.awt.image.BufferedImage $r1;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed r0;
        java.awt.image.Raster $r2, $r3;
        int $i0, $i1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: java.awt.image.BufferedImage bi>;

        $r2 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.image.Raster getData()>();

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinX()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinY()>();

        $r3 = virtualinvoke $r2.<java.awt.image.Raster: java.awt.image.Raster createTranslatedChild(int,int)>($i0, $i1);

        return $r3;
    }

    public java.awt.image.Raster getData(java.awt.Rectangle)
    {
        java.awt.Rectangle r0, $r3, $r4, $r5, r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.awt.image.Raster $r7, $r8;
        boolean $z0;
        java.awt.image.BufferedImage $r6;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed r2;
        java.lang.Object $r1;

        r2 := @this: org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        r0 := @parameter0: java.awt.Rectangle;

        $r1 = virtualinvoke r0.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r9 = (java.awt.Rectangle) $r1;

        $r3 = virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: java.awt.Rectangle getBounds()>();

        $z0 = virtualinvoke r9.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>($r3);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: java.awt.Rectangle getBounds()>();

        $r5 = virtualinvoke r9.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r4);

        $i0 = virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinX()>();

        $i1 = neg $i0;

        $i2 = virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinY()>();

        $i3 = neg $i2;

        virtualinvoke $r5.<java.awt.Rectangle: void translate(int,int)>($i1, $i3);

        $r6 = r2.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: java.awt.image.BufferedImage bi>;

        $r7 = virtualinvoke $r6.<java.awt.image.BufferedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r5);

        $i4 = virtualinvoke $r7.<java.awt.image.Raster: int getMinX()>();

        $i5 = virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinX()>();

        $i6 = $i4 + $i5;

        $i7 = virtualinvoke $r7.<java.awt.image.Raster: int getMinY()>();

        $i8 = virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinY()>();

        $i9 = $i7 + $i8;

        $r8 = virtualinvoke $r7.<java.awt.image.Raster: java.awt.image.Raster createTranslatedChild(int,int)>($i6, $i9);

        return $r8;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        java.awt.image.BufferedImage $r3;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.awt.image.WritableRaster r0, $r2, $r4;

        r1 := @this: org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinX()>();

        $i2 = $i0 - $i1;

        $i3 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i4 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinY()>();

        $i5 = $i3 - $i4;

        $r2 = virtualinvoke r0.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>($i2, $i5);

        $r3 = r1.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: java.awt.image.BufferedImage bi>;

        $r4 = virtualinvoke $r3.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData(java.awt.image.Raster,java.awt.image.WritableRaster)>($r4, $r2);

        return r0;
    }
}
