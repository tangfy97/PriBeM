public class org.springframework.jmx.access.MBeanClientInterceptor extends java.lang.Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    protected final org.apache.commons.logging.Log logger;
    private javax.management.MBeanServerConnection server;
    private javax.management.remote.JMXServiceURL serviceUrl;
    private java.util.Map environment;
    private java.lang.String agentId;
    private boolean connectOnStartup;
    private boolean refreshOnConnectFailure;
    private javax.management.ObjectName objectName;
    private boolean useStrictCasing;
    private java.lang.Class managementInterface;
    private java.lang.ClassLoader beanClassLoader;
    private final org.springframework.jmx.access.ConnectorDelegate connector;
    private javax.management.MBeanServerConnection serverToUse;
    private javax.management.MBeanServerInvocationHandler invocationHandler;
    private java.util.Map allowedAttributes;
    private java.util.Map allowedOperations;
    private final java.util.Map signatureCache;
    private final java.lang.Object preparationMonitor;

    public void <init>()
    {
        org.springframework.jmx.access.MBeanClientInterceptor r0;
        org.springframework.jmx.access.ConnectorDelegate $r4;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.util.HashMap $r5;
        java.lang.Object $r6;
        java.lang.ClassLoader $r3;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: boolean connectOnStartup> = 1;

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: boolean refreshOnConnectFailure> = 0;

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: boolean useStrictCasing> = 1;

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.ClassLoader beanClassLoader> = $r3;

        $r4 = new org.springframework.jmx.access.ConnectorDelegate;

        specialinvoke $r4.<org.springframework.jmx.access.ConnectorDelegate: void <init>()>();

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: org.springframework.jmx.access.ConnectorDelegate connector> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Map signatureCache> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object preparationMonitor> = $r6;

        return;
    }

    public void setServer(javax.management.MBeanServerConnection)
    {
        javax.management.MBeanServerConnection r1;
        org.springframework.jmx.access.MBeanClientInterceptor r0;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r1 := @parameter0: javax.management.MBeanServerConnection;

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerConnection server> = r1;

        return;
    }

    public void setServiceUrl(java.lang.String) throws java.net.MalformedURLException
    {
        javax.management.remote.JMXServiceURL $r1;
        java.lang.String r2;
        org.springframework.jmx.access.MBeanClientInterceptor r0;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r2 := @parameter0: java.lang.String;

        $r1 = new javax.management.remote.JMXServiceURL;

        specialinvoke $r1.<javax.management.remote.JMXServiceURL: void <init>(java.lang.String)>(r2);

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.remote.JMXServiceURL serviceUrl> = $r1;

        return;
    }

    public void setEnvironment(java.util.Map)
    {
        org.springframework.jmx.access.MBeanClientInterceptor r0;
        java.util.Map r1;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r1 := @parameter0: java.util.Map;

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Map environment> = r1;

        return;
    }

    public java.util.Map getEnvironment()
    {
        org.springframework.jmx.access.MBeanClientInterceptor r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        $r1 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Map environment>;

        return $r1;
    }

    public void setAgentId(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.jmx.access.MBeanClientInterceptor r0;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.String agentId> = r1;

        return;
    }

    public void setConnectOnStartup(boolean)
    {
        org.springframework.jmx.access.MBeanClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: boolean connectOnStartup> = z0;

        return;
    }

    public void setRefreshOnConnectFailure(boolean)
    {
        org.springframework.jmx.access.MBeanClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: boolean refreshOnConnectFailure> = z0;

        return;
    }

    public void setObjectName(java.lang.Object) throws javax.management.MalformedObjectNameException
    {
        java.lang.Object r1;
        javax.management.ObjectName $r2;
        org.springframework.jmx.access.MBeanClientInterceptor r0;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <org.springframework.jmx.support.ObjectNameManager: javax.management.ObjectName getInstance(java.lang.Object)>(r1);

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.ObjectName objectName> = $r2;

        return;
    }

    public void setUseStrictCasing(boolean)
    {
        org.springframework.jmx.access.MBeanClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: boolean useStrictCasing> = z0;

        return;
    }

    public void setManagementInterface(java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.jmx.access.MBeanClientInterceptor r0;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r1 := @parameter0: java.lang.Class;

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Class managementInterface> = r1;

        return;
    }

    protected final java.lang.Class getManagementInterface()
    {
        java.lang.Class $r1;
        org.springframework.jmx.access.MBeanClientInterceptor r0;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        $r1 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Class managementInterface>;

        return $r1;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.springframework.jmx.access.MBeanClientInterceptor r0;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.ClassLoader beanClassLoader> = r1;

        return;
    }

    public void afterPropertiesSet()
    {
        javax.management.MBeanServerConnection $r1;
        org.springframework.jmx.access.MBeanClientInterceptor r0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0, $z1;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        $r1 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerConnection server>;

        if $r1 == null goto label1;

        $z1 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: boolean refreshOnConnectFailure>;

        if $z1 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'refreshOnConnectFailure\' does not work when setting a \'server\' reference. Prefer \'serviceUrl\' etc instead.");

        throw $r2;

     label1:
        $z0 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: boolean connectOnStartup>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.springframework.jmx.access.MBeanClientInterceptor: void prepare()>();

     label2:
        return;
    }

    public void prepare()
    {
        java.lang.Throwable $r14;
        org.springframework.jmx.access.ConnectorDelegate $r6;
        java.util.Map $r4;
        javax.management.MBeanServerInvocationHandler $r8, $r15;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3;
        javax.management.MBeanServerConnection $r2, $r7, $r10, $r13, $r16;
        javax.management.remote.JMXServiceURL $r5;
        javax.management.ObjectName $r9, $r17;
        org.springframework.jmx.access.MBeanClientInterceptor r0;
        java.lang.Object $r1;
        java.lang.Class $r11, $r12;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        $r1 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object preparationMonitor>;

        entermonitor $r1;

     label01:
        $r2 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerConnection server>;

        if $r2 == null goto label02;

        $r13 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerConnection server>;

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerConnection serverToUse> = $r13;

        goto label03;

     label02:
        r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerConnection serverToUse> = null;

        $r6 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: org.springframework.jmx.access.ConnectorDelegate connector>;

        $r5 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.remote.JMXServiceURL serviceUrl>;

        $r4 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Map environment>;

        $r3 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.String agentId>;

        $r7 = virtualinvoke $r6.<org.springframework.jmx.access.ConnectorDelegate: javax.management.MBeanServerConnection connect(javax.management.remote.JMXServiceURL,java.util.Map,java.lang.String)>($r5, $r4, $r3);

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerConnection serverToUse> = $r7;

     label03:
        r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerInvocationHandler invocationHandler> = null;

        $z0 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: boolean useStrictCasing>;

        if $z0 == 0 goto label07;

        $z1 = staticinvoke <org.springframework.jmx.support.JmxUtils: boolean isMXBeanSupportAvailable()>();

        if $z1 == 0 goto label06;

        $r15 = new javax.management.MBeanServerInvocationHandler;

        $r16 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerConnection serverToUse>;

        $r17 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.ObjectName objectName>;

        $r11 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Class managementInterface>;

        if $r11 == null goto label04;

        $r12 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Class managementInterface>;

        $z2 = staticinvoke <javax.management.JMX: boolean isMXBeanInterface(java.lang.Class)>($r12);

        if $z2 == 0 goto label04;

        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        specialinvoke $r15.<javax.management.MBeanServerInvocationHandler: void <init>(javax.management.MBeanServerConnection,javax.management.ObjectName,boolean)>($r16, $r17, $z3);

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerInvocationHandler invocationHandler> = $r15;

        goto label08;

     label06:
        $r8 = new javax.management.MBeanServerInvocationHandler;

        $r10 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerConnection serverToUse>;

        $r9 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.ObjectName objectName>;

        specialinvoke $r8.<javax.management.MBeanServerInvocationHandler: void <init>(javax.management.MBeanServerConnection,javax.management.ObjectName)>($r10, $r9);

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerInvocationHandler invocationHandler> = $r8;

        goto label08;

     label07:
        specialinvoke r0.<org.springframework.jmx.access.MBeanClientInterceptor: void retrieveMBeanInfo()>();

     label08:
        exitmonitor $r1;

     label09:
        goto label12;

     label10:
        $r14 := @caughtexception;

        exitmonitor $r1;

     label11:
        throw $r14;

     label12:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void retrieveMBeanInfo() throws org.springframework.jmx.access.MBeanInfoRetrievalException
    {
        javax.management.IntrospectionException $r32;
        javax.management.MBeanAttributeInfo r41;
        java.util.Map $r6, $r14;
        javax.management.MBeanOperationInfo[] $r8;
        javax.management.ReflectionException $r18;
        javax.management.MBeanServerConnection $r2;
        javax.management.MBeanOperationInfo r42;
        javax.management.ObjectName $r1, $r21, $r28, $r35;
        org.springframework.jmx.access.MBeanInfoRetrievalException $r17, $r19, $r26, $r33, $r40;
        org.springframework.jmx.access.MBeanClientInterceptor r0;
        javax.management.MBeanParameterInfo[] $r10;
        org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey $r13;
        java.lang.StringBuilder $r20, $r22, $r23, $r27, $r29, $r30, $r34, $r36, $r37;
        java.lang.ClassLoader $r11;
        java.util.HashMap $r5, $r9;
        int $i0, $i1, i2, i3, i4, i5;
        java.lang.String $r7, $r15, $r24, $r31, $r38;
        javax.management.InstanceNotFoundException $r25;
        java.lang.Class[] $r12;
        java.io.IOException $r16;
        javax.management.MBeanInfo $r3;
        javax.management.MBeanAttributeInfo[] $r4;
        java.lang.ClassNotFoundException $r39;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

     label01:
        $r2 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerConnection serverToUse>;

        $r1 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.ObjectName objectName>;

        $r3 = interfaceinvoke $r2.<javax.management.MBeanServerConnection: javax.management.MBeanInfo getMBeanInfo(javax.management.ObjectName)>($r1);

        $r4 = virtualinvoke $r3.<javax.management.MBeanInfo: javax.management.MBeanAttributeInfo[] getAttributes()>();

        $r5 = new java.util.HashMap;

        $i0 = lengthof $r4;

        specialinvoke $r5.<java.util.HashMap: void <init>(int)>($i0);

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Map allowedAttributes> = $r5;

        i2 = lengthof $r4;

        i3 = 0;

        goto label03;

     label02:
        r41 = $r4[i3];

        $r6 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Map allowedAttributes>;

        $r7 = virtualinvoke r41.<javax.management.MBeanAttributeInfo: java.lang.String getName()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r41);

        i3 = i3 + 1;

     label03:
        if i3 < i2 goto label02;

        $r8 = virtualinvoke $r3.<javax.management.MBeanInfo: javax.management.MBeanOperationInfo[] getOperations()>();

        $r9 = new java.util.HashMap;

        $i1 = lengthof $r8;

        specialinvoke $r9.<java.util.HashMap: void <init>(int)>($i1);

        r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Map allowedOperations> = $r9;

        i4 = lengthof $r8;

        i5 = 0;

        goto label05;

     label04:
        r42 = $r8[i5];

        $r10 = virtualinvoke r42.<javax.management.MBeanOperationInfo: javax.management.MBeanParameterInfo[] getSignature()>();

        $r11 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.ClassLoader beanClassLoader>;

        $r12 = staticinvoke <org.springframework.jmx.support.JmxUtils: java.lang.Class[] parameterInfoToTypes(javax.management.MBeanParameterInfo[],java.lang.ClassLoader)>($r10, $r11);

        $r14 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Map allowedOperations>;

        $r13 = new org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey;

        $r15 = virtualinvoke r42.<javax.management.MBeanOperationInfo: java.lang.String getName()>();

        specialinvoke $r13.<org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey: void <init>(java.lang.String,java.lang.Class[])>($r15, $r12);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r42);

        i5 = i5 + 1;

     label05:
        if i5 < i4 goto label04;

     label06:
        goto label12;

     label07:
        $r39 := @caughtexception;

        $r40 = new org.springframework.jmx.access.MBeanInfoRetrievalException;

        specialinvoke $r40.<org.springframework.jmx.access.MBeanInfoRetrievalException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to locate class specified in method signature", $r39);

        throw $r40;

     label08:
        $r32 := @caughtexception;

        $r33 = new org.springframework.jmx.access.MBeanInfoRetrievalException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to obtain MBean info for bean [");

        $r35 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.ObjectName objectName>;

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<org.springframework.jmx.access.MBeanInfoRetrievalException: void <init>(java.lang.String,java.lang.Throwable)>($r38, $r32);

        throw $r33;

     label09:
        $r25 := @caughtexception;

        $r26 = new org.springframework.jmx.access.MBeanInfoRetrievalException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to obtain MBean info for bean [");

        $r28 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.ObjectName objectName>;

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: it is likely that this bean was unregistered during the proxy creation process");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<org.springframework.jmx.access.MBeanInfoRetrievalException: void <init>(java.lang.String,java.lang.Throwable)>($r31, $r25);

        throw $r26;

     label10:
        $r18 := @caughtexception;

        $r19 = new org.springframework.jmx.access.MBeanInfoRetrievalException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to read MBean info for bean [ ");

        $r21 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.ObjectName objectName>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<org.springframework.jmx.access.MBeanInfoRetrievalException: void <init>(java.lang.String,java.lang.Throwable)>($r24, $r18);

        throw $r19;

     label11:
        $r16 := @caughtexception;

        $r17 = new org.springframework.jmx.access.MBeanInfoRetrievalException;

        specialinvoke $r17.<org.springframework.jmx.access.MBeanInfoRetrievalException: void <init>(java.lang.String,java.lang.Throwable)>("An IOException occurred when communicating with the MBeanServer. It is likely that you are communicating with a remote MBeanServer. Check the inner exception for exact details.", $r16);

        throw $r17;

     label12:
        return;

        catch java.lang.ClassNotFoundException from label01 to label06 with label07;
        catch javax.management.IntrospectionException from label01 to label06 with label08;
        catch javax.management.InstanceNotFoundException from label01 to label06 with label09;
        catch javax.management.ReflectionException from label01 to label06 with label10;
        catch java.io.IOException from label01 to label06 with label11;
    }

    protected boolean isPrepared()
    {
        java.lang.Throwable $r3;
        javax.management.MBeanServerConnection $r2;
        org.springframework.jmx.access.MBeanClientInterceptor r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        $r1 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object preparationMonitor>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerConnection serverToUse>;

        if $r2 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor $r1;

     label4:
        return $z0;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Throwable $r8;
        java.io.IOException $r4;
        org.aopalliance.intercept.MethodInvocation r2;
        org.springframework.jmx.access.MBeanConnectFailureException $r6;
        org.springframework.jmx.access.MBeanClientInterceptor r0;
        java.lang.Object $r1, $r3, $r5, $r7;
        boolean $z0;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r2 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object preparationMonitor>;

        entermonitor $r1;

     label1:
        $z0 = virtualinvoke r0.<org.springframework.jmx.access.MBeanClientInterceptor: boolean isPrepared()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<org.springframework.jmx.access.MBeanClientInterceptor: void prepare()>();

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r8;

     label6:
        $r3 = virtualinvoke r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation)>(r2);

     label7:
        return $r3;

     label8:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object handleConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)>(r2, $r6);

        return $r7;

     label9:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object handleConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)>(r2, $r4);

        return $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch org.springframework.jmx.access.MBeanConnectFailureException from label6 to label7 with label8;
        catch java.io.IOException from label6 to label7 with label9;
    }

    protected java.lang.Object handleConnectFailure(org.aopalliance.intercept.MethodInvocation, java.lang.Exception) throws java.lang.Throwable
    {
        java.lang.Exception r1;
        org.aopalliance.intercept.MethodInvocation r4;
        org.springframework.jmx.access.MBeanClientInterceptor r0;
        org.apache.commons.logging.Log $r2, $r3, $r5, $r6;
        java.lang.Object $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r4 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r1 := @parameter1: java.lang.Exception;

        $z0 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: boolean refreshOnConnectFailure>;

        if $z0 == 0 goto label3;

        $r2 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label1;

        $r6 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Could not connect to JMX server - retrying", r1);

        goto label2;

     label1:
        $r3 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z2 == 0 goto label2;

        $r5 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Could not connect to JMX server - retrying");

     label2:
        virtualinvoke r0.<org.springframework.jmx.access.MBeanClientInterceptor: void prepare()>();

        $r7 = virtualinvoke r0.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation)>(r4);

        return $r7;

     label3:
        throw r1;
    }

    protected java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        javax.management.OperationsException $r15;
        org.aopalliance.intercept.MethodInvocation r0;
        org.springframework.jmx.access.InvocationFailureException $r36;
        org.springframework.core.MethodParameter $r34;
        java.lang.reflect.Method $r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.management.RuntimeMBeanException $r23, $r27;
        javax.management.RuntimeErrorException $r21, $r25;
        java.lang.Exception $r30;
        org.springframework.jmx.access.MBeanClientInterceptor r2;
        java.beans.PropertyDescriptor $r4;
        javax.management.JMException $r12;
        javax.management.RuntimeOperationsException $r19;
        org.springframework.jmx.access.InvalidInvocationException $r35;
        java.lang.Object[] $r5, $r8;
        java.lang.Error $r22, $r26;
        org.springframework.jmx.access.MBeanConnectFailureException $r37;
        javax.management.MBeanServerInvocationHandler $r3, $r6;
        int $i1;
        java.lang.String $r18;
        java.io.IOException $r9;
        java.lang.RuntimeException $r20, $r24, $r28;
        javax.management.MBeanException $r29;
        java.lang.Object $r7, r31, $r33;
        java.lang.Class $r10, $r13, $r16;

        r2 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

     label01:
        $r3 = r2.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerInvocationHandler invocationHandler>;

        if $r3 == null goto label02;

        $r6 = r2.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerInvocationHandler invocationHandler>;

        $r7 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.Object getThis()>();

        $r8 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.Object[] getArguments()>();

        r31 = virtualinvoke $r6.<javax.management.MBeanServerInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>($r7, $r1, $r8);

        goto label04;

     label02:
        $r4 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyDescriptor findPropertyForMethod(java.lang.reflect.Method)>($r1);

        if $r4 == null goto label03;

        r31 = specialinvoke r2.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object invokeAttribute(java.beans.PropertyDescriptor,org.aopalliance.intercept.MethodInvocation)>($r4, r0);

        goto label04;

     label03:
        $r5 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.Object[] getArguments()>();

        r31 = specialinvoke r2.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object invokeOperation(java.lang.reflect.Method,java.lang.Object[])>($r1, $r5);

     label04:
        $r34 = new org.springframework.core.MethodParameter;

        $i1 = (int) -1;

        specialinvoke $r34.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>($r1, $i1);

        $r33 = virtualinvoke r2.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object convertResultValueIfNecessary(java.lang.Object,org.springframework.core.MethodParameter)>(r31, $r34);

     label05:
        return $r33;

     label06:
        $r29 := @caughtexception;

        $r30 = virtualinvoke $r29.<javax.management.MBeanException: java.lang.Exception getTargetException()>();

        throw $r30;

     label07:
        $r27 := @caughtexception;

        $r28 = virtualinvoke $r27.<javax.management.RuntimeMBeanException: java.lang.RuntimeException getTargetException()>();

        throw $r28;

     label08:
        $r25 := @caughtexception;

        $r26 = virtualinvoke $r25.<javax.management.RuntimeErrorException: java.lang.Error getTargetError()>();

        throw $r26;

     label09:
        $r19 := @caughtexception;

        $r20 = virtualinvoke $r19.<javax.management.RuntimeOperationsException: java.lang.RuntimeException getTargetException()>();

        $z3 = $r20 instanceof javax.management.RuntimeMBeanException;

        if $z3 == 0 goto label10;

        $r23 = (javax.management.RuntimeMBeanException) $r20;

        $r24 = virtualinvoke $r23.<javax.management.RuntimeMBeanException: java.lang.RuntimeException getTargetException()>();

        throw $r24;

     label10:
        $z4 = $r20 instanceof javax.management.RuntimeErrorException;

        if $z4 == 0 goto label11;

        $r21 = (javax.management.RuntimeErrorException) $r20;

        $r22 = virtualinvoke $r21.<javax.management.RuntimeErrorException: java.lang.Error getTargetError()>();

        throw $r22;

     label11:
        throw $r20;

     label12:
        $r15 := @caughtexception;

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = staticinvoke <org.springframework.util.ReflectionUtils: boolean declaresException(java.lang.reflect.Method,java.lang.Class)>($r1, $r16);

        if $z2 == 0 goto label13;

        throw $r15;

     label13:
        $r35 = new org.springframework.jmx.access.InvalidInvocationException;

        $r18 = virtualinvoke $r15.<javax.management.OperationsException: java.lang.String getMessage()>();

        specialinvoke $r35.<org.springframework.jmx.access.InvalidInvocationException: void <init>(java.lang.String)>($r18);

        throw $r35;

     label14:
        $r12 := @caughtexception;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = staticinvoke <org.springframework.util.ReflectionUtils: boolean declaresException(java.lang.reflect.Method,java.lang.Class)>($r1, $r13);

        if $z1 == 0 goto label15;

        throw $r12;

     label15:
        $r36 = new org.springframework.jmx.access.InvocationFailureException;

        specialinvoke $r36.<org.springframework.jmx.access.InvocationFailureException: void <init>(java.lang.String,java.lang.Throwable)>("JMX access failed", $r12);

        throw $r36;

     label16:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = staticinvoke <org.springframework.util.ReflectionUtils: boolean declaresException(java.lang.reflect.Method,java.lang.Class)>($r1, $r10);

        if $z0 == 0 goto label17;

        throw $r9;

     label17:
        $r37 = new org.springframework.jmx.access.MBeanConnectFailureException;

        specialinvoke $r37.<org.springframework.jmx.access.MBeanConnectFailureException: void <init>(java.lang.String,java.lang.Throwable)>("I/O failure during JMX access", $r9);

        throw $r37;

        catch javax.management.MBeanException from label01 to label05 with label06;
        catch javax.management.RuntimeMBeanException from label01 to label05 with label07;
        catch javax.management.RuntimeErrorException from label01 to label05 with label08;
        catch javax.management.RuntimeOperationsException from label01 to label05 with label09;
        catch javax.management.OperationsException from label01 to label05 with label12;
        catch javax.management.JMException from label01 to label05 with label14;
        catch java.io.IOException from label01 to label05 with label16;
    }

    private java.lang.Object invokeAttribute(java.beans.PropertyDescriptor, org.aopalliance.intercept.MethodInvocation) throws javax.management.JMException, java.io.IOException
    {
        java.lang.IllegalStateException $r11;
        javax.management.MBeanAttributeInfo r5;
        org.aopalliance.intercept.MethodInvocation r6;
        java.util.Map $r3;
        java.lang.reflect.Method $r7, $r8, $r9, $r10, $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.management.MBeanServerConnection $r23, $r33;
        javax.management.ObjectName $r24, $r32;
        java.beans.PropertyDescriptor r0;
        org.springframework.jmx.access.MBeanClientInterceptor r1;
        java.lang.StringBuilder $r12, $r14, $r15, $r18, $r19, $r20, $r28, $r29, $r30, $r36, $r38, $r39;
        org.springframework.jmx.access.InvalidInvocationException $r17, $r27, $r35;
        java.lang.Object[] $r25;
        javax.management.Attribute $r22;
        java.lang.String $r2, $r16, $r21, $r31, $r37, $r40;
        java.lang.Object $r4, $r26, $r34;

        r1 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r0 := @parameter0: java.beans.PropertyDescriptor;

        r6 := @parameter1: org.aopalliance.intercept.MethodInvocation;

        $z0 = r1.<org.springframework.jmx.access.MBeanClientInterceptor: boolean useStrictCasing>;

        $r2 = staticinvoke <org.springframework.jmx.support.JmxUtils: java.lang.String getAttributeName(java.beans.PropertyDescriptor,boolean)>(r0, $z0);

        $r3 = r1.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Map allowedAttributes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (javax.management.MBeanAttributeInfo) $r4;

        if r5 != null goto label1;

        $r35 = new org.springframework.jmx.access.InvalidInvocationException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>(java.lang.String)>("Attribute \'");

        $r37 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not exposed on the management interface");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<org.springframework.jmx.access.InvalidInvocationException: void <init>(java.lang.String)>($r40);

        throw $r35;

     label1:
        $r7 = interfaceinvoke r6.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r8 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        $z1 = virtualinvoke $r7.<java.lang.reflect.Method: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label3;

        $z4 = virtualinvoke r5.<javax.management.MBeanAttributeInfo: boolean isReadable()>();

        if $z4 == 0 goto label2;

        $r33 = r1.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerConnection serverToUse>;

        $r32 = r1.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.ObjectName objectName>;

        $r34 = interfaceinvoke $r33.<javax.management.MBeanServerConnection: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>($r32, $r2);

        return $r34;

     label2:
        $r27 = new org.springframework.jmx.access.InvalidInvocationException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Attribute \'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not readable");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.springframework.jmx.access.InvalidInvocationException: void <init>(java.lang.String)>($r31);

        throw $r27;

     label3:
        $r9 = interfaceinvoke r6.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r10 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        $z2 = virtualinvoke $r9.<java.lang.reflect.Method: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label5;

        $z3 = virtualinvoke r5.<javax.management.MBeanAttributeInfo: boolean isWritable()>();

        if $z3 == 0 goto label4;

        $r23 = r1.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerConnection serverToUse>;

        $r24 = r1.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.ObjectName objectName>;

        $r22 = new javax.management.Attribute;

        $r25 = interfaceinvoke r6.<org.aopalliance.intercept.MethodInvocation: java.lang.Object[] getArguments()>();

        $r26 = $r25[0];

        specialinvoke $r22.<javax.management.Attribute: void <init>(java.lang.String,java.lang.Object)>($r2, $r26);

        interfaceinvoke $r23.<javax.management.MBeanServerConnection: void setAttribute(javax.management.ObjectName,javax.management.Attribute)>($r24, $r22);

        return null;

     label4:
        $r17 = new org.springframework.jmx.access.InvalidInvocationException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Attribute \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not writable");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.springframework.jmx.access.InvalidInvocationException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label5:
        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Method [");

        $r13 = interfaceinvoke r6.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is neither a bean property getter nor a setter");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r11;
    }

    private java.lang.Object invokeOperation(java.lang.reflect.Method, java.lang.Object[]) throws javax.management.JMException, java.io.IOException
    {
        java.lang.Throwable $r24;
        org.springframework.jmx.access.InvalidInvocationException $r18;
        java.lang.Object[] r14;
        java.lang.String[] $r16, r25;
        java.util.Map $r5, $r8, $r9, $r17;
        java.lang.String $r2, $r13, $r20, $r23;
        java.lang.reflect.Method r1;
        javax.management.MBeanServerConnection $r11;
        javax.management.MBeanOperationInfo r7;
        java.lang.Class[] $r3;
        javax.management.ObjectName $r12;
        org.springframework.jmx.access.MBeanClientInterceptor r4;
        org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey $r0;
        java.lang.Object $r6, $r10, $r15;
        java.lang.StringBuilder $r19, $r21, $r22;

        r4 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r1 := @parameter0: java.lang.reflect.Method;

        r14 := @parameter1: java.lang.Object[];

        $r0 = new org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey;

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        specialinvoke $r0.<org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey: void <init>(java.lang.String,java.lang.Class[])>($r2, $r3);

        $r5 = r4.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Map allowedOperations>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r7 = (javax.management.MBeanOperationInfo) $r6;

        if r7 != null goto label1;

        $r18 = new org.springframework.jmx.access.InvalidInvocationException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Operation \'");

        $r20 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not exposed on the management interface");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.springframework.jmx.access.InvalidInvocationException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label1:
        $r8 = r4.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Map signatureCache>;

        entermonitor $r8;

     label2:
        $r9 = r4.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Map signatureCache>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r25 = (java.lang.String[]) $r10;

        if r25 != null goto label3;

        $r16 = staticinvoke <org.springframework.jmx.support.JmxUtils: java.lang.String[] getMethodSignature(java.lang.reflect.Method)>(r1);

        r25 = $r16;

        $r17 = r4.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Map signatureCache>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r16);

     label3:
        exitmonitor $r8;

     label4:
        goto label7;

     label5:
        $r24 := @caughtexception;

        exitmonitor $r8;

     label6:
        throw $r24;

     label7:
        $r11 = r4.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.MBeanServerConnection serverToUse>;

        $r12 = r4.<org.springframework.jmx.access.MBeanClientInterceptor: javax.management.ObjectName objectName>;

        $r13 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r15 = interfaceinvoke $r11.<javax.management.MBeanServerConnection: java.lang.Object invoke(javax.management.ObjectName,java.lang.String,java.lang.Object[],java.lang.String[])>($r12, $r13, r14, r25);

        return $r15;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected java.lang.Object convertResultValueIfNecessary(java.lang.Object, org.springframework.core.MethodParameter)
    {
        java.lang.NoSuchMethodException $r20;
        org.springframework.jmx.access.InvocationFailureException $r21, $r31;
        org.springframework.core.MethodParameter r0;
        javax.management.openmbean.TabularData[] r30;
        java.lang.reflect.Method $r9, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Collection $r6, $r14;
        org.springframework.jmx.access.MBeanClientInterceptor r5;
        java.lang.StringBuilder $r22, $r24, $r25, $r26, $r27, $r32, $r33, $r34, $r36, $r37;
        java.lang.Object[] $r10, $r18;
        java.lang.String $r23, $r28, $r35, $r38;
        javax.management.openmbean.CompositeData[] r29;
        java.lang.Class[] $r8, $r16;
        java.lang.Class $r1, $r3, $r4, $r12, $r13;
        java.lang.Object r2, $r7, $r11, $r15, $r19;

        r5 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.springframework.core.MethodParameter;

        $r1 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

     label01:
        if r2 != null goto label03;

     label02:
        return null;

     label03:
        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isAssignableValue(java.lang.Class,java.lang.Object)>($r1, r2);

        if $z0 == 0 goto label05;

     label04:
        return r2;

     label05:
        $z1 = r2 instanceof javax.management.openmbean.CompositeData;

        if $z1 == 0 goto label07;

        $r16 = newarray (java.lang.Class)[1];

        $r16[0] = class "Ljavax/management/openmbean/CompositeData;";

        $r17 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("from", $r16);

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = r2;

        $r19 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r17, null, $r18);

     label06:
        return $r19;

     label07:
        $z2 = r2 instanceof javax.management.openmbean.CompositeData[];

        if $z2 == 0 goto label11;

        r29 = (javax.management.openmbean.CompositeData[]) r2;

        $z7 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z7 == 0 goto label09;

        $r15 = specialinvoke r5.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object convertDataArrayToTargetArray(java.lang.Object[],java.lang.Class)>(r29, $r1);

     label08:
        return $r15;

     label09:
        $r12 = class "Ljava/util/Collection;";

        $z8 = virtualinvoke $r12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z8 == 0 goto label17;

        $r13 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getCollectionParameterType(org.springframework.core.MethodParameter)>(r0);

        if $r13 == null goto label17;

        $r14 = specialinvoke r5.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Collection convertDataArrayToTargetCollection(java.lang.Object[],java.lang.Class,java.lang.Class)>(r29, $r1, $r13);

     label10:
        return $r14;

     label11:
        $z3 = r2 instanceof javax.management.openmbean.TabularData;

        if $z3 == 0 goto label13;

        $r8 = newarray (java.lang.Class)[1];

        $r8[0] = class "Ljavax/management/openmbean/TabularData;";

        $r9 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("from", $r8);

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r2;

        $r11 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r9, null, $r10);

     label12:
        return $r11;

     label13:
        $z4 = r2 instanceof javax.management.openmbean.TabularData[];

        if $z4 == 0 goto label17;

        r30 = (javax.management.openmbean.TabularData[]) r2;

        $z5 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z5 == 0 goto label15;

        $r7 = specialinvoke r5.<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object convertDataArrayToTargetArray(java.lang.Object[],java.lang.Class)>(r30, $r1);

     label14:
        return $r7;

     label15:
        $r3 = class "Ljava/util/Collection;";

        $z6 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z6 == 0 goto label17;

        $r4 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getCollectionParameterType(org.springframework.core.MethodParameter)>(r0);

        if $r4 == null goto label17;

        $r6 = specialinvoke r5.<org.springframework.jmx.access.MBeanClientInterceptor: java.util.Collection convertDataArrayToTargetCollection(java.lang.Object[],java.lang.Class,java.lang.Class)>(r30, $r1, $r4);

     label16:
        return $r6;

     label17:
        $r31 = new org.springframework.jmx.access.InvocationFailureException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("Incompatible result value [");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for target type [");

        $r35 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<org.springframework.jmx.access.InvocationFailureException: void <init>(java.lang.String)>($r38);

        throw $r31;

     label18:
        $r20 := @caughtexception;

        $r21 = new org.springframework.jmx.access.InvocationFailureException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not obtain \'from(CompositeData)\' / \'from(TabularData)\' method on target type [");

        $r23 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for conversion of MXBean data structure [");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.springframework.jmx.access.InvocationFailureException: void <init>(java.lang.String)>($r28);

        throw $r21;

        catch java.lang.NoSuchMethodException from label01 to label02 with label18;
        catch java.lang.NoSuchMethodException from label03 to label04 with label18;
        catch java.lang.NoSuchMethodException from label05 to label06 with label18;
        catch java.lang.NoSuchMethodException from label07 to label08 with label18;
        catch java.lang.NoSuchMethodException from label09 to label10 with label18;
        catch java.lang.NoSuchMethodException from label11 to label12 with label18;
        catch java.lang.NoSuchMethodException from label13 to label14 with label18;
        catch java.lang.NoSuchMethodException from label15 to label16 with label18;
        catch java.lang.NoSuchMethodException from label17 to label18 with label18;
    }

    private java.lang.Object convertDataArrayToTargetArray(java.lang.Object[], java.lang.Class) throws java.lang.NoSuchMethodException
    {
        java.lang.Object[] r3, $r8;
        java.lang.Class[] $r2;
        org.springframework.jmx.access.MBeanClientInterceptor r11;
        int $i0, $i1, i2;
        java.lang.Class r0, $r1, $r4, $r5;
        java.lang.Object $r7, $r9, $r10;
        java.lang.reflect.Method $r6;

        r11 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r3 := @parameter0: java.lang.Object[];

        r0 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r2 = newarray (java.lang.Class)[1];

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $r2[0] = $r5;

        $r6 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("from", $r2);

        $i0 = lengthof r3;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, $i0);

        i2 = 0;

        goto label2;

     label1:
        $r8 = newarray (java.lang.Object)[1];

        $r9 = r3[i2];

        $r8[0] = $r9;

        $r10 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r6, null, $r8);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r7, i2, $r10);

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r3;

        if i2 < $i1 goto label1;

        return $r7;
    }

    private java.util.Collection convertDataArrayToTargetCollection(java.lang.Object[], java.lang.Class, java.lang.Class) throws java.lang.NoSuchMethodException
    {
        java.lang.Object[] r2, $r8;
        java.util.Collection $r7;
        java.lang.Class[] $r1;
        org.springframework.jmx.access.MBeanClientInterceptor r11;
        int $i0, $i1, i2;
        java.lang.Class r0, $r3, $r4, r6;
        java.lang.Object $r9, $r10;
        java.lang.reflect.Method $r5;

        r11 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        r2 := @parameter0: java.lang.Object[];

        r6 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.Class;

        $r1 = newarray (java.lang.Class)[1];

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getComponentType()>();

        $r1[0] = $r4;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("from", $r1);

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r2);

        $r7 = staticinvoke <org.springframework.core.CollectionFactory: java.util.Collection createCollection(java.lang.Class,int)>(r6, $i0);

        i2 = 0;

        goto label2;

     label1:
        $r8 = newarray (java.lang.Object)[1];

        $r9 = r2[i2];

        $r8[0] = $r9;

        $r10 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r5, null, $r8);

        interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r2;

        if i2 < $i1 goto label1;

        return $r7;
    }

    public void destroy()
    {
        org.springframework.jmx.access.MBeanClientInterceptor r0;
        org.springframework.jmx.access.ConnectorDelegate $r1;

        r0 := @this: org.springframework.jmx.access.MBeanClientInterceptor;

        $r1 = r0.<org.springframework.jmx.access.MBeanClientInterceptor: org.springframework.jmx.access.ConnectorDelegate connector>;

        virtualinvoke $r1.<org.springframework.jmx.access.ConnectorDelegate: void close()>();

        return;
    }
}
