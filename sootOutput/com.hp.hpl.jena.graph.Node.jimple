public abstract class com.hp.hpl.jena.graph.Node extends java.lang.Object
{
    protected final java.lang.Object label;
    static final int THRESHOLD;
    public static final com.hp.hpl.jena.graph.Node ANY;
    static final java.lang.String RDFprefix;
    static final com.hp.hpl.jena.graph.Node$NodeMaker makeAnon;
    static final com.hp.hpl.jena.graph.Node$NodeMaker makeLiteral;
    static final com.hp.hpl.jena.graph.Node$NodeMaker makeURI;
    static final com.hp.hpl.jena.graph.Node$NodeMaker makeVariable;
    public static final com.hp.hpl.jena.graph.Node NULL;

    public static com.hp.hpl.jena.datatypes.RDFDatatype getType(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.datatypes.RDFDatatype $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.datatypes.RDFDatatype getType(java.lang.String)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.graph.Node createAnon()
    {
        com.hp.hpl.jena.graph.Node $r0;

        $r0 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

        return $r0;
    }

    public static com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.rdf.model.AnonId r0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.AnonId;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.graph.Node createLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)
    {
        com.hp.hpl.jena.graph.impl.LiteralLabel r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.LiteralLabel;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.graph.Node createURI(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.graph.Node createVariable(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createVariable(java.lang.String)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.graph.Node createLiteral(java.lang.String, java.lang.String, boolean)
    {
        java.lang.String r0, r1;
        com.hp.hpl.jena.graph.Node $r2;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,boolean)>(r0, r1, z0);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node createLiteral(java.lang.String, java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        com.hp.hpl.jena.datatypes.RDFDatatype r2;
        java.lang.String r0, r1;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.hp.hpl.jena.datatypes.RDFDatatype;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, r1, r2);

        return $r3;
    }

    public static com.hp.hpl.jena.graph.Node createLiteral(java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.datatypes.RDFDatatype r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.datatypes.RDFDatatype;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, r1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node createUncachedLiteral(java.lang.Object, java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        com.hp.hpl.jena.datatypes.RDFDatatype r2;
        java.lang.Object r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.hp.hpl.jena.datatypes.RDFDatatype;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createUncachedLiteral(java.lang.Object,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, r1, r2);

        return $r3;
    }

    public static com.hp.hpl.jena.graph.Node createUncachedLiteral(java.lang.Object, com.hp.hpl.jena.datatypes.RDFDatatype) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        java.lang.Object r0;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.datatypes.RDFDatatype r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: com.hp.hpl.jena.datatypes.RDFDatatype;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createUncachedLiteral(java.lang.Object,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, r1);

        return $r2;
    }

    public abstract java.lang.Object visitWith(com.hp.hpl.jena.graph.NodeVisitor);

    public abstract boolean isConcrete();

    public boolean isLiteral()
    {
        com.hp.hpl.jena.graph.Node r0;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        return 0;
    }

    public boolean isBlank()
    {
        com.hp.hpl.jena.graph.Node r0;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        return 0;
    }

    public boolean isURI()
    {
        com.hp.hpl.jena.graph.Node r0;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        return 0;
    }

    public boolean isVariable()
    {
        com.hp.hpl.jena.graph.Node r0;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        return 0;
    }

    public com.hp.hpl.jena.rdf.model.AnonId getBlankNodeId()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        com.hp.hpl.jena.graph.Node r2;
        java.lang.String $r5;

        r2 := @this: com.hp.hpl.jena.graph.Node;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a blank node");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    public java.lang.String getBlankNodeLabel()
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r2;
        com.hp.hpl.jena.rdf.model.AnonId $r1;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.rdf.model.AnonId getBlankNodeId()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.rdf.model.AnonId: java.lang.String getLabelString()>();

        return $r2;
    }

    public com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        com.hp.hpl.jena.graph.Node r2;
        java.lang.String $r5;

        r2 := @this: com.hp.hpl.jena.graph.Node;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a literal node");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    public java.lang.Object getLiteralValue()
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.graph.Node$NotLiteral $r0;

        r1 := @this: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.graph.Node$NotLiteral;

        specialinvoke $r0.<com.hp.hpl.jena.graph.Node$NotLiteral: void <init>(com.hp.hpl.jena.graph.Node)>(r1);

        throw $r0;
    }

    public java.lang.String getLiteralLexicalForm()
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.graph.Node$NotLiteral $r0;

        r1 := @this: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.graph.Node$NotLiteral;

        specialinvoke $r0.<com.hp.hpl.jena.graph.Node$NotLiteral: void <init>(com.hp.hpl.jena.graph.Node)>(r1);

        throw $r0;
    }

    public java.lang.String getLiteralLanguage()
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.graph.Node$NotLiteral $r0;

        r1 := @this: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.graph.Node$NotLiteral;

        specialinvoke $r0.<com.hp.hpl.jena.graph.Node$NotLiteral: void <init>(com.hp.hpl.jena.graph.Node)>(r1);

        throw $r0;
    }

    public java.lang.String getLiteralDatatypeURI()
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.graph.Node$NotLiteral $r0;

        r1 := @this: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.graph.Node$NotLiteral;

        specialinvoke $r0.<com.hp.hpl.jena.graph.Node$NotLiteral: void <init>(com.hp.hpl.jena.graph.Node)>(r1);

        throw $r0;
    }

    public com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.graph.Node$NotLiteral $r0;

        r1 := @this: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.graph.Node$NotLiteral;

        specialinvoke $r0.<com.hp.hpl.jena.graph.Node$NotLiteral: void <init>(com.hp.hpl.jena.graph.Node)>(r1);

        throw $r0;
    }

    public boolean getLiteralIsXML()
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.graph.Node$NotLiteral $r0;

        r1 := @this: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.graph.Node$NotLiteral;

        specialinvoke $r0.<com.hp.hpl.jena.graph.Node$NotLiteral: void <init>(com.hp.hpl.jena.graph.Node)>(r1);

        throw $r0;
    }

    public java.lang.Object getIndexingValue()
    {
        com.hp.hpl.jena.graph.Node r0;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        return r0;
    }

    public java.lang.String getURI()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        com.hp.hpl.jena.graph.Node r2;
        java.lang.String $r5;

        r2 := @this: com.hp.hpl.jena.graph.Node;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a URI node");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    public java.lang.String getNameSpace()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        com.hp.hpl.jena.graph.Node r2;
        java.lang.String $r5;

        r2 := @this: com.hp.hpl.jena.graph.Node;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a URI node");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    public java.lang.String getLocalName()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        com.hp.hpl.jena.graph.Node r2;
        java.lang.String $r5;

        r2 := @this: com.hp.hpl.jena.graph.Node;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a URI node");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    public java.lang.String getName()
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.graph.Node r3;
        java.lang.StringBuilder $r1, $r2, $r5, $r6;
        java.lang.Class $r4;
        java.lang.String $r7;

        r3 := @this: com.hp.hpl.jena.graph.Node;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this (");

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not a variable node");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r0;
    }

    public boolean hasURI(java.lang.String)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    void <init>(java.lang.Object)
    {
        java.lang.Object r1;
        com.hp.hpl.jena.graph.Node r0;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.graph.Node: java.lang.Object label> = r1;

        return;
    }

    public static com.hp.hpl.jena.graph.Node create(com.hp.hpl.jena.graph.Node$NodeMaker, java.lang.Object)
    {
        com.hp.hpl.jena.shared.JenaException $r3;
        java.lang.Object r0;
        com.hp.hpl.jena.graph.Node$NodeMaker r1;
        com.hp.hpl.jena.graph.Node $r2;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node$NodeMaker;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r3 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r3.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.String)>("Node.make: null label");

        throw $r3;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node$NodeMaker: com.hp.hpl.jena.graph.Node construct(java.lang.Object)>(r0);

        return $r2;
    }

    public abstract boolean equals(java.lang.Object);

    public boolean sameValueAs(java.lang.Object)
    {
        java.lang.Object r1;
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public int hashCode()
    {
        int $i0, $i1;
        java.lang.Object $r1;
        com.hp.hpl.jena.graph.Node r0;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        $r1 = r0.<com.hp.hpl.jena.graph.Node: java.lang.Object label>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = $i0 * 31;

        return $i1;
    }

    public boolean matches(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String toString(com.hp.hpl.jena.shared.PrefixMapping)>(null);

        return $r1;
    }

    public java.lang.String toString(boolean)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String toString(com.hp.hpl.jena.shared.PrefixMapping,boolean)>(null, z0);

        return $r1;
    }

    public java.lang.String toString(com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r2;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        r1 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String toString(com.hp.hpl.jena.shared.PrefixMapping,boolean)>(r1, 1);

        return $r2;
    }

    public java.lang.String toString(com.hp.hpl.jena.shared.PrefixMapping, boolean)
    {
        java.lang.Object $r1;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r2;
        com.hp.hpl.jena.shared.PrefixMapping r3;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.graph.Node;

        r3 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.hp.hpl.jena.graph.Node: java.lang.Object label>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.graph.Node$3 $r3;
        com.hp.hpl.jena.graph.Node$4 $r4;
        com.hp.hpl.jena.graph.Node$1 $r1;
        com.hp.hpl.jena.graph.Node$2 $r2;
        com.hp.hpl.jena.graph.Node_ANY $r0;
        com.hp.hpl.jena.graph.Node_NULL $r5;

        <com.hp.hpl.jena.graph.Node: java.lang.String RDFprefix> = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

        <com.hp.hpl.jena.graph.Node: int THRESHOLD> = 10000;

        $r0 = new com.hp.hpl.jena.graph.Node_ANY;

        specialinvoke $r0.<com.hp.hpl.jena.graph.Node_ANY: void <init>()>();

        <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY> = $r0;

        $r1 = new com.hp.hpl.jena.graph.Node$1;

        specialinvoke $r1.<com.hp.hpl.jena.graph.Node$1: void <init>()>();

        <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node$NodeMaker makeAnon> = $r1;

        $r2 = new com.hp.hpl.jena.graph.Node$2;

        specialinvoke $r2.<com.hp.hpl.jena.graph.Node$2: void <init>()>();

        <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node$NodeMaker makeLiteral> = $r2;

        $r3 = new com.hp.hpl.jena.graph.Node$3;

        specialinvoke $r3.<com.hp.hpl.jena.graph.Node$3: void <init>()>();

        <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node$NodeMaker makeURI> = $r3;

        $r4 = new com.hp.hpl.jena.graph.Node$4;

        specialinvoke $r4.<com.hp.hpl.jena.graph.Node$4: void <init>()>();

        <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node$NodeMaker makeVariable> = $r4;

        $r5 = new com.hp.hpl.jena.graph.Node_NULL;

        specialinvoke $r5.<com.hp.hpl.jena.graph.Node_NULL: void <init>()>();

        <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node NULL> = $r5;

        return;
    }
}
