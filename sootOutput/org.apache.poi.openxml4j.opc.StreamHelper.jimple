public final class org.apache.poi.openxml4j.opc.StreamHelper extends java.lang.Object
{
    private static final javax.xml.transform.TransformerFactory transformerFactory;

    private void <init>()
    {
        org.apache.poi.openxml4j.opc.StreamHelper r0;

        r0 := @this: org.apache.poi.openxml4j.opc.StreamHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static synchronized javax.xml.transform.Transformer getIdentityTransformer() throws javax.xml.transform.TransformerException
    {
        javax.xml.transform.Transformer $r1;
        javax.xml.transform.TransformerFactory $r0;

        $r0 = <org.apache.poi.openxml4j.opc.StreamHelper: javax.xml.transform.TransformerFactory transformerFactory>;

        $r1 = virtualinvoke $r0.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        return $r1;
    }

    public static boolean saveXmlInStream(org.w3c.dom.Document, java.io.OutputStream)
    {
        org.apache.poi.openxml4j.opc.StreamHelper$1 $r4;
        java.io.OutputStream r5;
        javax.xml.transform.Transformer $r0;
        javax.xml.transform.dom.DOMSource $r1;
        javax.xml.transform.TransformerException $r6;
        org.w3c.dom.Document r2;
        javax.xml.transform.stream.StreamResult $r3;

        r2 := @parameter0: org.w3c.dom.Document;

        r5 := @parameter1: java.io.OutputStream;

     label1:
        $r0 = staticinvoke <org.apache.poi.openxml4j.opc.StreamHelper: javax.xml.transform.Transformer getIdentityTransformer()>();

        $r1 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r1.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r2);

        $r3 = new javax.xml.transform.stream.StreamResult;

        $r4 = new org.apache.poi.openxml4j.opc.StreamHelper$1;

        specialinvoke $r4.<org.apache.poi.openxml4j.opc.StreamHelper$1: void <init>(java.io.OutputStream)>(r5);

        specialinvoke $r3.<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>($r4);

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("encoding", "UTF-8");

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "yes");

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("standalone", "yes");

        virtualinvoke $r0.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r1, $r3);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        return 0;

     label4:
        return 1;

        catch javax.xml.transform.TransformerException from label1 to label2 with label3;
    }

    public static boolean copyStream(java.io.InputStream, java.io.OutputStream)
    {
        java.io.OutputStream r1;
        byte[] r3;
        int $i0;
        java.lang.Exception $r2;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

     label1:
        r3 = newarray (byte)[1024];

     label2:
        $i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r3);

        if $i0 < 0 goto label3;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, $i0);

        goto label2;

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        return 0;

     label5:
        return 1;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    static void <clinit>()
    {
        javax.xml.transform.TransformerFactory $r0;

        $r0 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

        <org.apache.poi.openxml4j.opc.StreamHelper: javax.xml.transform.TransformerFactory transformerFactory> = $r0;

        return;
    }
}
