public class groovy.mock.interceptor.LooseExpectation extends java.lang.Object implements groovy.lang.GroovyObject
{
    private groovy.mock.interceptor.Demand fDemand;
    private java.util.List fCalls;
    transient groovy.lang.MetaClass metaClass;
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119696497;
    static java.lang.Class class$java$util$List;
    static java.lang.Class class$groovy$mock$interceptor$Demand;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$junit$framework$AssertionFailedError;
    static java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter;
    static java.lang.Class class$java$lang$Boolean;
    static java.lang.Class class$groovy$lang$Closure;

    public void <init>(groovy.mock.interceptor.Demand)
    {
        java.util.List $r12, $r15;
        java.lang.Object[] $r11, $r17;
        groovy.mock.interceptor.Demand $r7, $r10, r23, $r26;
        groovy.lang.MetaClass $r20, $r22;
        java.lang.Class $r1, r2, $r3, r4, $r5, $r8, $r13, $r16, $r24, $r27, $r28, $r29, $r30, $r31, $r32, $r33;
        java.lang.Object $r6, $r9, $r14, $r18, $r19, $r21, $r25;
        groovy.mock.interceptor.LooseExpectation r0;

        r0 := @this: groovy.mock.interceptor.LooseExpectation;

        r23 := @parameter0: groovy.mock.interceptor.Demand;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

        if $r1 != null goto label01;

        $r27 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.LooseExpectation");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0> = $r27;

        goto label02;

     label01:
        $r27 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

     label02:
        r2 = $r27;

        $r3 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r3 != null goto label03;

        $r28 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r28;

        goto label04;

     label03:
        $r28 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        r4 = $r28;

        $r5 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r5 != null goto label05;

        $r29 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand> = $r29;

        goto label06;

     label05:
        $r29 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label06:
        $r6 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(null, $r29);

        $r7 = (groovy.mock.interceptor.Demand) $r6;

        $r8 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r8 != null goto label07;

        $r30 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand> = $r30;

        goto label08;

     label07:
        $r30 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label08:
        $r9 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r7, $r30);

        $r10 = (groovy.mock.interceptor.Demand) $r9;

        r0.<groovy.mock.interceptor.LooseExpectation: groovy.mock.interceptor.Demand fDemand> = $r10;

        $r11 = newarray (java.lang.Object)[0];

        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.List createList(java.lang.Object[])>($r11);

        $r13 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$util$List>;

        if $r13 != null goto label09;

        $r31 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("java.util.List");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$util$List> = $r31;

        goto label10;

     label09:
        $r31 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$util$List>;

     label10:
        $r14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r12, $r31);

        $r15 = (java.util.List) $r14;

        r0.<groovy.mock.interceptor.LooseExpectation: java.util.List fCalls> = $r15;

        $r16 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r16 != null goto label11;

        $r32 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r32;

        goto label12;

     label11:
        $r32 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label12:
        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r0;

        $r18 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r2, $r32, "initMetaClass", $r17);

        $r19 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r18, r4);

        $r20 = (groovy.lang.MetaClass) $r19;

        $r21 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r20, r4);

        $r22 = (groovy.lang.MetaClass) $r21;

        r0.<groovy.mock.interceptor.LooseExpectation: groovy.lang.MetaClass metaClass> = $r22;

        $r24 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r24 != null goto label13;

        $r33 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand> = $r33;

        goto label14;

     label13:
        $r33 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label14:
        $r25 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r23, $r33);

        $r26 = (groovy.mock.interceptor.Demand) $r25;

        r0.<groovy.mock.interceptor.LooseExpectation: groovy.mock.interceptor.Demand fDemand> = $r26;

        return;
    }

    public groovy.lang.Closure match(java.lang.String)
    {
        java.lang.Object[] $r6, $r8, $r11, $r14, $r23;
        groovy.lang.Closure $r19;
        java.lang.Integer $r3, $r9;
        groovy.mock.interceptor.Demand $r12;
        java.lang.String r5;
        boolean $z0, $z1;
        java.util.List r25;
        java.lang.Class $r0, r1, $r2, $r17, $r20, $r21, $r26;
        java.lang.Object $r7, $r10, $r13, $r15, $r16, $r18, r22, $r24;
        groovy.mock.interceptor.LooseExpectation r4;

        r4 := @this: groovy.mock.interceptor.LooseExpectation;

        r5 := @parameter0: java.lang.String;

        $r0 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r20 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.LooseExpectation");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0> = $r20;

        goto label02;

     label01:
        $r20 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

     label02:
        r1 = $r20;

        $r2 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r21 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r21;

        goto label04;

     label03:
        $r21 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(0);

        r22 = $r3;

     label05:
        $r23 = newarray (java.lang.Object)[2];

        $r23[0] = r5;

        $r23[1] = r22;

        $r24 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodOnCurrentN(java.lang.Class,groovy.lang.GroovyObject,java.lang.String,java.lang.Object[])>(r1, r4, "isEligible", $r23);

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r24);

        if $z0 != 0 goto label06;

        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        if $z1 == 0 goto label08;

        r22 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r22, "next");

        goto label05;

     label08:
        r25 = r4.<groovy.mock.interceptor.LooseExpectation: java.util.List fCalls>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r22;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r25, "getAt", $r6);

        $r8 = newarray (java.lang.Object)[1];

        $r9 = new java.lang.Integer;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>(1);

        $r8[0] = $r9;

        $r10 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r7, "plus", $r8);

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = r22;

        $r11[1] = $r10;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r25, "putAt", $r11);

        $r12 = r4.<groovy.mock.interceptor.LooseExpectation: groovy.mock.interceptor.Demand fDemand>;

        $r13 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r12, "recorded");

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r22;

        $r15 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r13, "getAt", $r14);

        $r16 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r15, "behavior");

        $r17 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$Closure>;

        if $r17 != null goto label09;

        $r26 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.Closure");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$Closure> = $r26;

        goto label10;

     label09:
        $r26 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$Closure>;

     label10:
        $r18 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r16, $r26);

        $r19 = (groovy.lang.Closure) $r18;

        return $r19;
    }

    public boolean isEligible(java.lang.String, int)
    {
        java.lang.Integer $r34;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.codehaus.groovy.runtime.GStringImpl $r44;
        java.util.List $r14, $r18, $r36;
        java.lang.Throwable $r48;
        java.lang.Object[] $r8, $r13, $r17, $r21, $r35, $r43, $r45;
        java.lang.String[] $r46;
        groovy.mock.interceptor.Demand $r4;
        int i0;
        java.lang.Boolean $r27, $r29, $r31, $r33, $r39, $r41;
        java.lang.String r12;
        java.lang.Class $r0, r1, $r2, $r26, $r30, $r38, $r42, $r49, $r50, $r51, $r52, $r53, $r54;
        java.lang.Object $r5, $r6, $r7, $r9, $r10, $r11, $r15, $r16, $r19, $r20, $r22, $r23, $r24, $r25, $r28, $r32, $r37, $r40, $r47;
        groovy.mock.interceptor.LooseExpectation r3;

        r3 := @this: groovy.mock.interceptor.LooseExpectation;

        r12 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r49 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.LooseExpectation");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0> = $r49;

        goto label02;

     label01:
        $r49 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

     label02:
        r1 = $r49;

        $r2 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r50 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r50;

        goto label04;

     label03:
        $r50 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r4 = r3.<groovy.mock.interceptor.LooseExpectation: groovy.mock.interceptor.Demand fDemand>;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r4, "recorded");

        $r6 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>(i0);

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r5, "size");

        $z0 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareGreaterThanEqual(java.lang.Object,java.lang.Object)>($r6, $r7);

        if $z0 == 0 goto label07;

        $r42 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$junit$framework$AssertionFailedError>;

        if $r42 != null goto label05;

        $r51 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("junit.framework.AssertionFailedError");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$junit$framework$AssertionFailedError> = $r51;

        goto label06;

     label05:
        $r51 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$junit$framework$AssertionFailedError>;

     label06:
        $r43 = newarray (java.lang.Object)[1];

        $r44 = new org.codehaus.groovy.runtime.GStringImpl;

        $r45 = newarray (java.lang.Object)[1];

        $r45[0] = r12;

        $r46 = newarray (java.lang.String)[2];

        $r46[0] = "No more calls to \'";

        $r46[1] = "\' expected at this point. End of demands.";

        specialinvoke $r44.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r45, $r46);

        $r43[0] = $r44;

        $r47 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r51, $r43);

        $r48 = (java.lang.Throwable) $r47;

        throw $r48;

     label07:
        $r8 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>(i0);

        $r8[0] = $r9;

        $r10 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r5, "getAt", $r8);

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r10, "name");

        $z1 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareNotEqual(java.lang.Object,java.lang.Object)>($r11, r12);

        if $z1 == 0 goto label10;

        $r39 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r38 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$lang$Boolean>;

        if $r38 != null goto label08;

        $r52 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$lang$Boolean> = $r52;

        goto label09;

     label08:
        $r52 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$lang$Boolean>;

     label09:
        $r40 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r39, $r52);

        $r41 = (java.lang.Boolean) $r40;

        $z6 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r41);

        return $z6;

     label10:
        $r14 = r3.<groovy.mock.interceptor.LooseExpectation: java.util.List fCalls>;

        $r13 = newarray (java.lang.Object)[1];

        $r15 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>(i0);

        $r13[0] = $r15;

        $r16 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r14, "getAt", $r13);

        $z2 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>(null, $r16);

        if $z2 == 0 goto label11;

        $r34 = new java.lang.Integer;

        specialinvoke $r34.<java.lang.Integer: void <init>(int)>(0);

        $r36 = r3.<groovy.mock.interceptor.LooseExpectation: java.util.List fCalls>;

        $r35 = newarray (java.lang.Object)[2];

        $r37 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>(i0);

        $r35[0] = $r37;

        $r35[1] = $r34;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r36, "putAt", $r35);

        goto label11;

     label11:
        $r18 = r3.<groovy.mock.interceptor.LooseExpectation: java.util.List fCalls>;

        $r17 = newarray (java.lang.Object)[1];

        $r19 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>(i0);

        $r17[0] = $r19;

        $r20 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r18, "getAt", $r17);

        $r21 = newarray (java.lang.Object)[1];

        $r22 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>(i0);

        $r21[0] = $r22;

        $r23 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r5, "getAt", $r21);

        $r24 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r23, "range");

        $r25 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r24, "to");

        $z3 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareGreaterThanEqual(java.lang.Object,java.lang.Object)>($r20, $r25);

        if $z3 == 0 goto label14;

        $r31 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r30 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$lang$Boolean>;

        if $r30 != null goto label12;

        $r53 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$lang$Boolean> = $r53;

        goto label13;

     label12:
        $r53 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$lang$Boolean>;

     label13:
        $r32 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r31, $r53);

        $r33 = (java.lang.Boolean) $r32;

        $z5 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r33);

        return $z5;

     label14:
        $r27 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r26 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$lang$Boolean>;

        if $r26 != null goto label15;

        $r54 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$lang$Boolean> = $r54;

        goto label16;

     label15:
        $r54 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$lang$Boolean>;

     label16:
        $r28 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r27, $r54);

        $r29 = (java.lang.Boolean) $r28;

        $z4 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r29);

        return $z4;
    }

    public void verify()
    {
        java.lang.Object[] $r4;
        groovy.mock.interceptor.Demand $r6;
        java.util.List $r5;
        java.lang.Class $r0, r1, $r2, $r7, $r8;
        groovy.mock.interceptor.LooseExpectation r3;

        r3 := @this: groovy.mock.interceptor.LooseExpectation;

        $r0 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.LooseExpectation");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

     label2:
        r1 = $r7;

        $r2 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r6 = r3.<groovy.mock.interceptor.LooseExpectation: groovy.mock.interceptor.Demand fDemand>;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r3.<groovy.mock.interceptor.LooseExpectation: java.util.List fCalls>;

        $r4[0] = $r5;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r6, "verify", $r4);

        return;
    }

    public groovy.lang.MetaClass getMetaClass()
    {
        java.lang.Object[] $r10;
        boolean $z0;
        groovy.lang.MetaClass $r5, $r6, $r8, $r13, $r15;
        java.lang.Class $r0, r1, $r2, r3, $r9, $r16, $r17, $r18;
        java.lang.Object $r7, $r11, $r12, $r14;
        groovy.mock.interceptor.LooseExpectation r4;

        r4 := @this: groovy.mock.interceptor.LooseExpectation;

        $r0 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r16 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.LooseExpectation");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0> = $r16;

        goto label2;

     label1:
        $r16 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

     label2:
        r1 = $r16;

        $r2 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r17 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r17;

        goto label4;

     label3:
        $r17 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r3 = $r17;

        $r5 = r4.<groovy.mock.interceptor.LooseExpectation: groovy.lang.MetaClass metaClass>;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r5, null);

        if $z0 == 0 goto label7;

        $r9 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r9 != null goto label5;

        $r18 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r18;

        goto label6;

     label5:
        $r18 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label6:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r4;

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r1, $r18, "initMetaClass", $r10);

        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r11, r3);

        $r13 = (groovy.lang.MetaClass) $r12;

        $r14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r13, r3);

        $r15 = (groovy.lang.MetaClass) $r14;

        r4.<groovy.mock.interceptor.LooseExpectation: groovy.lang.MetaClass metaClass> = $r15;

        goto label7;

     label7:
        $r6 = r4.<groovy.mock.interceptor.LooseExpectation: groovy.lang.MetaClass metaClass>;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r6, r3);

        $r8 = (groovy.lang.MetaClass) $r7;

        return $r8;
    }

    public void setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r3;
        java.lang.Class $r0, $r1, $r4, $r5;
        groovy.mock.interceptor.LooseExpectation r2;

        r2 := @this: groovy.mock.interceptor.LooseExpectation;

        r3 := @parameter0: groovy.lang.MetaClass;

        $r0 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.LooseExpectation");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0> = $r4;

        goto label2;

     label1:
        $r4 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r5 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r5;

        goto label4;

     label3:
        $r5 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r2.<groovy.mock.interceptor.LooseExpectation: groovy.lang.MetaClass metaClass> = r3;

        return;
    }

    public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.lang.MetaClass $r3;
        java.lang.Class $r0, $r1, $r7, $r8;
        java.lang.Object r5, $r6;
        java.lang.String r4;
        groovy.mock.interceptor.LooseExpectation r2;

        r2 := @this: groovy.mock.interceptor.LooseExpectation;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r0 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.LooseExpectation");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.mock.interceptor.LooseExpectation: groovy.lang.MetaClass getMetaClass()>();

        $r6 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r2, r4, r5);

        return $r6;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        groovy.lang.MetaClass $r3;
        java.lang.Class $r0, $r1, $r6, $r7;
        java.lang.Object $r5;
        java.lang.String r4;
        groovy.mock.interceptor.LooseExpectation r2;

        r2 := @this: groovy.mock.interceptor.LooseExpectation;

        r4 := @parameter0: java.lang.String;

        $r0 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.LooseExpectation");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.mock.interceptor.LooseExpectation: groovy.lang.MetaClass getMetaClass()>();

        $r5 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object getProperty(java.lang.Object,java.lang.String)>(r2, r4);

        return $r5;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        groovy.lang.MetaClass $r3;
        java.lang.Class $r0, $r1, $r6, $r7;
        java.lang.Object r5;
        java.lang.String r4;
        groovy.mock.interceptor.LooseExpectation r2;

        r2 := @this: groovy.mock.interceptor.LooseExpectation;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r0 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.LooseExpectation");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.mock.interceptor.LooseExpectation: groovy.lang.MetaClass getMetaClass()>();

        interfaceinvoke $r3.<groovy.lang.MetaClass: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>(r2, r4, r5);

        return;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.LooseExpectation");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119696497L);

        $r3 = (java.lang.Long) $r2;

        <groovy.mock.interceptor.LooseExpectation: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <groovy.mock.interceptor.LooseExpectation: java.lang.Long __timeStamp__239_neverHappen1239119696497> = $r5;

        return;
    }

    public groovy.mock.interceptor.Demand getFDemand()
    {
        groovy.mock.interceptor.Demand $r4, $r6;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r5;
        groovy.mock.interceptor.LooseExpectation r2;

        r2 := @this: groovy.mock.interceptor.LooseExpectation;

        $r0 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.LooseExpectation");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r4 = r2.<groovy.mock.interceptor.LooseExpectation: groovy.mock.interceptor.Demand fDemand>;

        $r3 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label6:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r4, $r9);

        $r6 = (groovy.mock.interceptor.Demand) $r5;

        return $r6;
    }

    public void setFDemand(groovy.mock.interceptor.Demand)
    {
        groovy.mock.interceptor.Demand r2, $r6;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r4;
        groovy.mock.interceptor.LooseExpectation r5;

        r5 := @this: groovy.mock.interceptor.LooseExpectation;

        r2 := @parameter0: groovy.mock.interceptor.Demand;

        $r0 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.LooseExpectation");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label6:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r2, $r9);

        $r6 = (groovy.mock.interceptor.Demand) $r4;

        r5.<groovy.mock.interceptor.LooseExpectation: groovy.mock.interceptor.Demand fDemand> = $r6;

        return;
    }

    public java.util.List getFCalls()
    {
        java.util.List $r4, $r6;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r5;
        groovy.mock.interceptor.LooseExpectation r2;

        r2 := @this: groovy.mock.interceptor.LooseExpectation;

        $r0 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.LooseExpectation");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r4 = r2.<groovy.mock.interceptor.LooseExpectation: java.util.List fCalls>;

        $r3 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$util$List>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("java.util.List");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$util$List> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$util$List>;

     label6:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r4, $r9);

        $r6 = (java.util.List) $r5;

        return $r6;
    }

    public void setFCalls(java.util.List)
    {
        java.util.List r2, $r6;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r4;
        groovy.mock.interceptor.LooseExpectation r5;

        r5 := @this: groovy.mock.interceptor.LooseExpectation;

        r2 := @parameter0: java.util.List;

        $r0 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.LooseExpectation");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$util$List>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$(java.lang.String)>("java.util.List");

        <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$util$List> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.LooseExpectation: java.lang.Class class$java$util$List>;

     label6:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r2, $r9);

        $r6 = (java.util.List) $r4;

        r5.<groovy.mock.interceptor.LooseExpectation: java.util.List fCalls> = $r6;

        return;
    }

    void super$1$wait()
    {
        groovy.mock.interceptor.LooseExpectation r0;

        r0 := @this: groovy.mock.interceptor.LooseExpectation;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    java.lang.String super$1$toString()
    {
        java.lang.String $r1;
        groovy.mock.interceptor.LooseExpectation r0;

        r0 := @this: groovy.mock.interceptor.LooseExpectation;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    void super$1$wait(long)
    {
        long l0;
        groovy.mock.interceptor.LooseExpectation r0;

        r0 := @this: groovy.mock.interceptor.LooseExpectation;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    void super$1$wait(long, int)
    {
        int i1;
        long l0;
        groovy.mock.interceptor.LooseExpectation r0;

        r0 := @this: groovy.mock.interceptor.LooseExpectation;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$1$notify()
    {
        groovy.mock.interceptor.LooseExpectation r0;

        r0 := @this: groovy.mock.interceptor.LooseExpectation;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        groovy.mock.interceptor.LooseExpectation r0;

        r0 := @this: groovy.mock.interceptor.LooseExpectation;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    java.lang.Class super$1$getClass()
    {
        java.lang.Class $r1;
        groovy.mock.interceptor.LooseExpectation r0;

        r0 := @this: groovy.mock.interceptor.LooseExpectation;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    boolean super$1$equals(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.mock.interceptor.LooseExpectation r0;
        boolean $z0;

        r0 := @this: groovy.mock.interceptor.LooseExpectation;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    java.lang.Object super$1$clone()
    {
        java.lang.Object $r1;
        groovy.mock.interceptor.LooseExpectation r0;

        r0 := @this: groovy.mock.interceptor.LooseExpectation;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    int super$1$hashCode()
    {
        int $i0;
        groovy.mock.interceptor.LooseExpectation r0;

        r0 := @this: groovy.mock.interceptor.LooseExpectation;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    void super$1$finalize()
    {
        groovy.mock.interceptor.LooseExpectation r0;

        r0 := @this: groovy.mock.interceptor.LooseExpectation;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
