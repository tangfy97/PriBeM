public class groovy.swing.factory.InternalFrameFactory extends groovy.swing.factory.RootPaneContainerFactory
{
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119697202;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$javax$swing$JInternalFrame;
    static java.lang.Class class$groovy$util$FactoryBuilderSupport;

    public void <init>()
    {
        groovy.swing.factory.InternalFrameFactory r0;
        java.lang.Class $r1, $r2, $r3, $r4;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: void <init>()>();

        $r1 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$0>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.InternalFrameFactory");

        <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$0> = $r3;

        goto label2;

     label1:
        $r3 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$0>;

     label2:
        $r2 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r4 = staticinvoke <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$groovy$lang$MetaClass> = $r4;

        goto label4;

     label3:
        $r4 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        return;
    }

    public java.lang.Object newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        java.lang.Object[] $r22;
        java.util.Map r18;
        boolean $z0;
        groovy.util.FactoryBuilderSupport r17;
        groovy.swing.factory.InternalFrameFactory r16;
        java.lang.Class $r0, r1, $r2, $r3, $r6, $r7, $r9, $r12, $r15, $r19, $r20, $r21, $r23, $r24, $r26, $r27, $r28;
        java.lang.Object r4, r5, $r8, $r10, $r11, $r13, $r14, $r25;

        r16 := @this: groovy.swing.factory.InternalFrameFactory;

        r17 := @parameter0: groovy.util.FactoryBuilderSupport;

        r5 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        r18 := @parameter3: java.util.Map;

        $r0 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r19 = staticinvoke <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.InternalFrameFactory");

        <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$0> = $r19;

        goto label02;

     label01:
        $r19 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$0>;

     label02:
        r1 = $r19;

        $r2 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r20 = staticinvoke <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$groovy$lang$MetaClass> = $r20;

        goto label04;

     label03:
        $r20 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r3 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$groovy$util$FactoryBuilderSupport>;

        if $r3 != null goto label05;

        $r15 = staticinvoke <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$(java.lang.String)>("groovy.util.FactoryBuilderSupport");

        $r21 = $r15;

        <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$groovy$util$FactoryBuilderSupport> = $r15;

        goto label06;

     label05:
        $r21 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$groovy$util$FactoryBuilderSupport>;

     label06:
        $r22 = newarray (java.lang.Object)[3];

        $r22[0] = r4;

        $r22[1] = r5;

        $r6 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$javax$swing$JInternalFrame>;

        if $r6 != null goto label07;

        $r23 = staticinvoke <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$(java.lang.String)>("javax.swing.JInternalFrame");

        $r24 = $r23;

        <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$javax$swing$JInternalFrame> = $r23;

        goto label08;

     label07:
        $r24 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$javax$swing$JInternalFrame>;

     label08:
        $r22[2] = $r24;

        $r25 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r21, "checkValueIsType", $r22);

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r25);

        if $z0 == 0 goto label11;

        $r12 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$java$lang$Object>;

        if $r12 != null goto label09;

        $r26 = staticinvoke <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$java$lang$Object> = $r26;

        goto label10;

     label09:
        $r26 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$java$lang$Object>;

     label10:
        $r13 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r4, $r26);

        $r14 = (java.lang.Object) $r13;

        return $r14;

     label11:
        $r7 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$javax$swing$JInternalFrame>;

        if $r7 != null goto label12;

        $r27 = staticinvoke <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$(java.lang.String)>("javax.swing.JInternalFrame");

        <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$javax$swing$JInternalFrame> = $r27;

        goto label13;

     label12:
        $r27 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$javax$swing$JInternalFrame>;

     label13:
        $r8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNew0(java.lang.Class,java.lang.Class)>(r1, $r27);

        $r9 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$java$lang$Object>;

        if $r9 != null goto label14;

        $r28 = staticinvoke <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$java$lang$Object> = $r28;

        goto label15;

     label14:
        $r28 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$java$lang$Object>;

     label15:
        $r10 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r8, $r28);

        $r11 = (java.lang.Object) $r10;

        return $r11;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.InternalFrameFactory");

        <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.swing.factory.InternalFrameFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119697202L);

        $r3 = (java.lang.Long) $r2;

        <groovy.swing.factory.InternalFrameFactory: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <groovy.swing.factory.InternalFrameFactory: java.lang.Long __timeStamp__239_neverHappen1239119697202> = $r5;

        return;
    }

    java.lang.Object super$3$getProperty(java.lang.String)
    {
        groovy.swing.factory.InternalFrameFactory r0;
        java.lang.Object $r2;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r2;
    }

    java.lang.String super$1$toString()
    {
        groovy.swing.factory.InternalFrameFactory r0;
        java.lang.String $r1;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    boolean super$2$isLeaf()
    {
        groovy.swing.factory.InternalFrameFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        $z0 = specialinvoke r0.<groovy.util.AbstractFactory: boolean isLeaf()>();

        return $z0;
    }

    void super$3$setChild(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.InternalFrameFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: void setChild(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$3$setProperty(java.lang.String, java.lang.Object)
    {
        groovy.swing.factory.InternalFrameFactory r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: void setProperty(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    void super$1$notify()
    {
        groovy.swing.factory.InternalFrameFactory r0;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        groovy.swing.factory.InternalFrameFactory r0;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    void super$2$setParent(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.InternalFrameFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void setParent(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    java.lang.Object super$1$clone()
    {
        groovy.swing.factory.InternalFrameFactory r0;
        java.lang.Object $r1;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    void super$1$wait()
    {
        groovy.swing.factory.InternalFrameFactory r0;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    groovy.lang.MetaClass super$3$getMetaClass()
    {
        groovy.lang.MetaClass $r1;
        groovy.swing.factory.InternalFrameFactory r0;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        $r1 = specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: groovy.lang.MetaClass getMetaClass()>();

        return $r1;
    }

    void super$3$handleRootPaneTasks(groovy.util.FactoryBuilderSupport, java.awt.Window, java.util.Map)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.InternalFrameFactory r0;
        java.awt.Window r2;
        java.util.Map r3;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.awt.Window;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: void handleRootPaneTasks(groovy.util.FactoryBuilderSupport,java.awt.Window,java.util.Map)>(r1, r2, r3);

        return;
    }

    void super$1$wait(long, int)
    {
        int i1;
        groovy.swing.factory.InternalFrameFactory r0;
        long l0;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$3$setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r1;
        groovy.swing.factory.InternalFrameFactory r0;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        r1 := @parameter0: groovy.lang.MetaClass;

        specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: void setMetaClass(groovy.lang.MetaClass)>(r1);

        return;
    }

    java.lang.Class super$1$getClass()
    {
        groovy.swing.factory.InternalFrameFactory r0;
        java.lang.Class $r1;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    void super$3$onNodeCompleted(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.InternalFrameFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: void onNodeCompleted(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$1$finalize()
    {
        groovy.swing.factory.InternalFrameFactory r0;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    void super$1$wait(long)
    {
        groovy.swing.factory.InternalFrameFactory r0;
        long l0;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    boolean super$2$onHandleNodeAttributes(groovy.util.FactoryBuilderSupport, java.lang.Object, java.util.Map)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.InternalFrameFactory r0;
        java.util.Map r3;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Map;

        $z0 = specialinvoke r0.<groovy.util.AbstractFactory: boolean onHandleNodeAttributes(groovy.util.FactoryBuilderSupport,java.lang.Object,java.util.Map)>(r1, r2, r3);

        return $z0;
    }

    boolean super$1$equals(java.lang.Object)
    {
        groovy.swing.factory.InternalFrameFactory r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    java.lang.Object super$3$invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.swing.factory.InternalFrameFactory r0;
        java.lang.Object r2, $r3;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>(r1, r2);

        return $r3;
    }

    int super$1$hashCode()
    {
        int $i0;
        groovy.swing.factory.InternalFrameFactory r0;

        r0 := @this: groovy.swing.factory.InternalFrameFactory;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
