public class com.mongodb.util.ThreadUtil extends java.lang.Object
{
    private static final java.util.Map _threads;

    public void <init>()
    {
        com.mongodb.util.ThreadUtil r0;

        r0 := @this: com.mongodb.util.ThreadUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void printStackTrace()
    {
        java.lang.Exception $r0;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>()>();

        virtualinvoke $r0.<java.lang.Exception: java.lang.Throwable fillInStackTrace()>();

        virtualinvoke $r0.<java.lang.Exception: void printStackTrace()>();

        return;
    }

    public static void sleep(long)
    {
        long l0;
        java.lang.InterruptedException $r0;

        l0 := @parameter0: long;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(l0);

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static void pushStatus(java.lang.String)
    {
        java.lang.String r1;
        java.lang.Thread $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        staticinvoke <com.mongodb.util.ThreadUtil: void pushStatus(java.lang.Thread,java.lang.String)>($r0, r1);

        return;
    }

    public static void pushStatus(java.lang.Thread, java.lang.String)
    {
        java.lang.String r2;
        com.mongodb.util.FastStack $r1;
        java.lang.Thread r0;

        r0 := @parameter0: java.lang.Thread;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <com.mongodb.util.ThreadUtil: com.mongodb.util.FastStack getStatus(java.lang.Thread)>(r0);

        virtualinvoke $r1.<com.mongodb.util.FastStack: void push(java.lang.Object)>(r2);

        return;
    }

    public static void clearStatus()
    {
        java.lang.Thread $r0;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        staticinvoke <com.mongodb.util.ThreadUtil: void clearStatus(java.lang.Thread)>($r0);

        return;
    }

    public static void clearStatus(java.lang.Thread)
    {
        com.mongodb.util.FastStack $r1;
        java.lang.Thread r0;

        r0 := @parameter0: java.lang.Thread;

        $r1 = staticinvoke <com.mongodb.util.ThreadUtil: com.mongodb.util.FastStack getStatus(java.lang.Thread)>(r0);

        virtualinvoke $r1.<com.mongodb.util.FastStack: void clear()>();

        return;
    }

    public static com.mongodb.util.FastStack getStatus()
    {
        com.mongodb.util.FastStack $r1;
        java.lang.Thread $r0;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = staticinvoke <com.mongodb.util.ThreadUtil: com.mongodb.util.FastStack getStatus(java.lang.Thread)>($r0);

        return $r1;
    }

    public static com.mongodb.util.FastStack getStatus(java.lang.Thread)
    {
        long $l0, $l1;
        java.lang.Long $r2, $r6;
        com.mongodb.util.FastStack $r4, r7;
        java.lang.Thread r0;
        java.util.Map $r1, $r5;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Thread;

        $r1 = <com.mongodb.util.ThreadUtil: java.util.Map _threads>;

        $l0 = virtualinvoke r0.<java.lang.Thread: long getId()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r7 = (com.mongodb.util.FastStack) $r3;

        if r7 != null goto label1;

        $r4 = new com.mongodb.util.FastStack;

        specialinvoke $r4.<com.mongodb.util.FastStack: void <init>()>();

        r7 = $r4;

        $r5 = <com.mongodb.util.ThreadUtil: java.util.Map _threads>;

        $l1 = virtualinvoke r0.<java.lang.Thread: long getId()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r4);

     label1:
        return r7;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.Map $r1;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r0);

        <com.mongodb.util.ThreadUtil: java.util.Map _threads> = $r1;

        return;
    }
}
