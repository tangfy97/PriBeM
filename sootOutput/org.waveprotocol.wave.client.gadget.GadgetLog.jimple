public final class org.waveprotocol.wave.client.gadget.GadgetLog extends java.lang.Object
{
    public static final org.waveprotocol.wave.common.logging.LoggerBundle LOG;
    public static final org.waveprotocol.wave.common.logging.LoggerBundle FINE_LOG;
    public static final org.waveprotocol.wave.common.logging.LoggerBundle DEVELOPER_LOG;

    private void <init>()
    {
        org.waveprotocol.wave.client.gadget.GadgetLog r0;

        r0 := @this: org.waveprotocol.wave.client.gadget.GadgetLog;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean shouldLog()
    {
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;
        boolean $z0;

        $r0 = <org.waveprotocol.wave.client.gadget.GadgetLog: org.waveprotocol.wave.common.logging.LoggerBundle LOG>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        return $z0;
    }

    public static void log(java.lang.String)
    {
        java.lang.String r2;
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;

        r2 := @parameter0: java.lang.String;

        $r0 = <org.waveprotocol.wave.client.gadget.GadgetLog: org.waveprotocol.wave.common.logging.LoggerBundle LOG>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>(r2);

        return;
    }

    public static transient void logLazy(java.lang.Object[])
    {
        java.lang.Object[] r2;
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;

        r2 := @parameter0: java.lang.Object[];

        $r0 = <org.waveprotocol.wave.client.gadget.GadgetLog: org.waveprotocol.wave.common.logging.LoggerBundle LOG>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void logLazyObjects(java.lang.Object[])>(r2);

        return;
    }

    public static void logError(java.lang.String)
    {
        java.lang.String r2;
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;

        r2 := @parameter0: java.lang.String;

        $r0 = <org.waveprotocol.wave.client.gadget.GadgetLog: org.waveprotocol.wave.common.logging.LoggerBundle LOG>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>(r2);

        return;
    }

    public static boolean shouldLogFine()
    {
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;
        boolean $z0;

        $r0 = <org.waveprotocol.wave.client.gadget.GadgetLog: org.waveprotocol.wave.common.logging.LoggerBundle FINE_LOG>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        return $z0;
    }

    public static void logFine(java.lang.String)
    {
        java.lang.String r2;
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;

        r2 := @parameter0: java.lang.String;

        $r0 = <org.waveprotocol.wave.client.gadget.GadgetLog: org.waveprotocol.wave.common.logging.LoggerBundle FINE_LOG>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>(r2);

        return;
    }

    public static transient void logFineLazy(java.lang.Object[])
    {
        java.lang.Object[] r2;
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;

        r2 := @parameter0: java.lang.Object[];

        $r0 = <org.waveprotocol.wave.client.gadget.GadgetLog: org.waveprotocol.wave.common.logging.LoggerBundle FINE_LOG>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void logLazyObjects(java.lang.Object[])>(r2);

        return;
    }

    public static void developerLog(java.lang.String)
    {
        java.lang.String r2;
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;

        r2 := @parameter0: java.lang.String;

        $r0 = <org.waveprotocol.wave.client.gadget.GadgetLog: org.waveprotocol.wave.common.logging.LoggerBundle DEVELOPER_LOG>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>(r2);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.debug.logger.DomLogger $r3, $r4, $r5;
        org.waveprotocol.wave.common.logging.LoggerBundle $r6, $r7, $r8;

        $r3 = new org.waveprotocol.wave.client.debug.logger.DomLogger;

        specialinvoke $r3.<org.waveprotocol.wave.client.debug.logger.DomLogger: void <init>(java.lang.String)>("gadgets");

        $r6 = (org.waveprotocol.wave.common.logging.LoggerBundle) $r3;

        <org.waveprotocol.wave.client.gadget.GadgetLog: org.waveprotocol.wave.common.logging.LoggerBundle LOG> = $r6;

        $r4 = new org.waveprotocol.wave.client.debug.logger.DomLogger;

        specialinvoke $r4.<org.waveprotocol.wave.client.debug.logger.DomLogger: void <init>(java.lang.String)>("gadgets-fine");

        $r7 = (org.waveprotocol.wave.common.logging.LoggerBundle) $r4;

        <org.waveprotocol.wave.client.gadget.GadgetLog: org.waveprotocol.wave.common.logging.LoggerBundle FINE_LOG> = $r7;

        $r5 = new org.waveprotocol.wave.client.debug.logger.DomLogger;

        specialinvoke $r5.<org.waveprotocol.wave.client.debug.logger.DomLogger: void <init>(java.lang.String)>("gadgets-dev");

        $r8 = (org.waveprotocol.wave.common.logging.LoggerBundle) $r5;

        <org.waveprotocol.wave.client.gadget.GadgetLog: org.waveprotocol.wave.common.logging.LoggerBundle DEVELOPER_LOG> = $r8;

        return;
    }
}
