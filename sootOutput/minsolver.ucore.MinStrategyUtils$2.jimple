class minsolver.ucore.MinStrategyUtils$2 extends java.lang.Object implements minsolver.fol2sat.MinRecordFilter
{
    private final java.util.Set val$roots;

    void <init>(java.util.Set)
    {
        java.util.Set r1;
        minsolver.ucore.MinStrategyUtils$2 r0;

        r0 := @this: minsolver.ucore.MinStrategyUtils$2;

        r1 := @parameter0: java.util.Set;

        r0.<minsolver.ucore.MinStrategyUtils$2: java.util.Set val$roots> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean accept(kodkod.ast.Node, kodkod.ast.Formula, int, java.util.Map)
    {
        kodkod.ast.Formula r1;
        java.util.Set $r2;
        minsolver.ucore.MinStrategyUtils$2 r0;
        kodkod.ast.Node r4;
        java.util.Map r3;
        int i0;
        boolean $z0, $z1;

        r0 := @this: minsolver.ucore.MinStrategyUtils$2;

        r4 := @parameter0: kodkod.ast.Node;

        r1 := @parameter1: kodkod.ast.Formula;

        i0 := @parameter2: int;

        r3 := @parameter3: java.util.Map;

        $r2 = r0.<minsolver.ucore.MinStrategyUtils$2: java.util.Set val$roots>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = interfaceinvoke r3.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
