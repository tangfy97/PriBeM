class com.hp.hpl.jena.reasoner.FinderUtil$Cascade extends java.lang.Object implements com.hp.hpl.jena.reasoner.Finder
{
    com.hp.hpl.jena.reasoner.Finder first;
    com.hp.hpl.jena.reasoner.Finder second;

    void <init>(com.hp.hpl.jena.reasoner.Finder, com.hp.hpl.jena.reasoner.Finder)
    {
        com.hp.hpl.jena.reasoner.Finder r1, r2;
        com.hp.hpl.jena.reasoner.FinderUtil$Cascade r0;

        r0 := @this: com.hp.hpl.jena.reasoner.FinderUtil$Cascade;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.Finder;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.Finder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.FinderUtil$Cascade: com.hp.hpl.jena.reasoner.Finder first> = r1;

        r0.<com.hp.hpl.jena.reasoner.FinderUtil$Cascade: com.hp.hpl.jena.reasoner.Finder second> = r2;

        return;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.reasoner.Finder $r1, $r2, $r4, $r5, $r7, $r9;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6, $r8, $r10;
        com.hp.hpl.jena.reasoner.FinderUtil$Cascade r0;
        com.hp.hpl.jena.reasoner.TriplePattern r3;

        r0 := @this: com.hp.hpl.jena.reasoner.FinderUtil$Cascade;

        r3 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r1 = r0.<com.hp.hpl.jena.reasoner.FinderUtil$Cascade: com.hp.hpl.jena.reasoner.Finder second>;

        if $r1 != null goto label1;

        $r9 = r0.<com.hp.hpl.jena.reasoner.FinderUtil$Cascade: com.hp.hpl.jena.reasoner.Finder first>;

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r3);

        return $r10;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.FinderUtil$Cascade: com.hp.hpl.jena.reasoner.Finder first>;

        if $r2 != null goto label2;

        $r7 = r0.<com.hp.hpl.jena.reasoner.FinderUtil$Cascade: com.hp.hpl.jena.reasoner.Finder second>;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r3);

        return $r8;

     label2:
        $r5 = r0.<com.hp.hpl.jena.reasoner.FinderUtil$Cascade: com.hp.hpl.jena.reasoner.Finder first>;

        $r4 = r0.<com.hp.hpl.jena.reasoner.FinderUtil$Cascade: com.hp.hpl.jena.reasoner.Finder second>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>(r3, $r4);

        return $r6;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder)
    {
        com.hp.hpl.jena.reasoner.Finder r1, $r2, $r3, $r4;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6;
        com.hp.hpl.jena.reasoner.FinderUtil$Cascade r0;
        com.hp.hpl.jena.reasoner.TriplePattern r5;

        r0 := @this: com.hp.hpl.jena.reasoner.FinderUtil$Cascade;

        r5 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        r1 := @parameter1: com.hp.hpl.jena.reasoner.Finder;

        $r3 = r0.<com.hp.hpl.jena.reasoner.FinderUtil$Cascade: com.hp.hpl.jena.reasoner.Finder first>;

        $r2 = r0.<com.hp.hpl.jena.reasoner.FinderUtil$Cascade: com.hp.hpl.jena.reasoner.Finder second>;

        $r4 = staticinvoke <com.hp.hpl.jena.reasoner.FinderUtil: com.hp.hpl.jena.reasoner.Finder cascade(com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.Finder)>($r3, $r2, r1);

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r5);

        return $r6;
    }

    public boolean contains(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.reasoner.FinderUtil$Cascade r0;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.FinderUtil$Cascade;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.FinderUtil$Cascade: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r1);

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        return $z0;
    }
}
