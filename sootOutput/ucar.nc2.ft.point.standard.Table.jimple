public abstract class ucar.nc2.ft.point.standard.Table extends java.lang.Object
{
    private static org.slf4j.Logger log;
    java.lang.String name;
    ucar.nc2.constants.FeatureType featureType;
    ucar.nc2.ft.point.standard.Table parent;
    ucar.nc2.ft.point.standard.Table child;
    java.util.List extraJoins;
    java.lang.String lat;
    java.lang.String lon;
    java.lang.String elev;
    java.lang.String time;
    java.lang.String timeNominal;
    java.lang.String stnId;
    java.lang.String stnDesc;
    java.lang.String stnNpts;
    java.lang.String stnWmoId;
    java.lang.String stnAlt;
    java.lang.String limit;
    java.lang.String feature_id;
    java.lang.String missingVar;
    java.util.List cols;
    java.util.List nondataVars;

    public static ucar.nc2.ft.point.standard.Table factory(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.ft.point.standard.TableConfig)
    {
        java.lang.IllegalStateException $r19;
        ucar.nc2.ft.point.standard.Table$TableArrayStructure $r18;
        ucar.nc2.ft.point.standard.Table$TableMultidimInnerPsuedo3D $r10;
        ucar.nc2.ft.point.standard.Table$TableConstruct $r17;
        ucar.nc2.ft.point.standard.Table$TableNestedStructure $r9;
        ucar.nc2.ft.point.standard.TableConfig r0;
        ucar.nc2.ft.point.standard.Table$Type $r1, $r22;
        ucar.nc2.ft.point.standard.Table$TableMultidimStructure $r12;
        ucar.nc2.ft.point.standard.Table$TableMultidimInner $r14;
        int[] $r2;
        int $i0, $i1;
        ucar.nc2.ft.point.standard.Table$TableContiguous $r16;
        java.lang.String $r24;
        ucar.nc2.ft.point.standard.Table$TableMultidimInnerPsuedo $r11;
        ucar.nc2.ft.point.standard.Table$TableParentIndex $r7;
        ucar.nc2.ft.point.standard.Table$TableSingleton $r6;
        ucar.nc2.ft.point.standard.Table$TableLinkedList $r15;
        ucar.nc2.ft.point.standard.Table$TableTop $r3;
        ucar.nc2.ft.point.standard.Table$TableStructure $r5;
        java.lang.StringBuilder $r20, $r21, $r23;
        ucar.nc2.dataset.NetcdfDataset r4;
        ucar.nc2.ft.point.standard.Table$TableParentId $r8;
        ucar.nc2.ft.point.standard.Table$TableMultidimInner3D $r13;

        r4 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r0 := @parameter1: ucar.nc2.ft.point.standard.TableConfig;

        $r2 = <ucar.nc2.ft.point.standard.Table$1: int[] $SwitchMap$ucar$nc2$ft$point$standard$Table$Type>;

        $r1 = r0.<ucar.nc2.ft.point.standard.TableConfig: ucar.nc2.ft.point.standard.Table$Type type>;

        $i0 = virtualinvoke $r1.<ucar.nc2.ft.point.standard.Table$Type: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label11;
            case 12: goto label12;
            case 13: goto label13;
            case 14: goto label14;
            case 15: goto label15;
            default: goto label16;
        };

     label01:
        $r18 = new ucar.nc2.ft.point.standard.Table$TableArrayStructure;

        specialinvoke $r18.<ucar.nc2.ft.point.standard.Table$TableArrayStructure: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r18;

     label02:
        $r17 = new ucar.nc2.ft.point.standard.Table$TableConstruct;

        specialinvoke $r17.<ucar.nc2.ft.point.standard.Table$TableConstruct: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r17;

     label03:
        $r16 = new ucar.nc2.ft.point.standard.Table$TableContiguous;

        specialinvoke $r16.<ucar.nc2.ft.point.standard.Table$TableContiguous: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r16;

     label04:
        $r15 = new ucar.nc2.ft.point.standard.Table$TableLinkedList;

        specialinvoke $r15.<ucar.nc2.ft.point.standard.Table$TableLinkedList: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r15;

     label05:
        $r14 = new ucar.nc2.ft.point.standard.Table$TableMultidimInner;

        specialinvoke $r14.<ucar.nc2.ft.point.standard.Table$TableMultidimInner: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r14;

     label06:
        $r13 = new ucar.nc2.ft.point.standard.Table$TableMultidimInner3D;

        specialinvoke $r13.<ucar.nc2.ft.point.standard.Table$TableMultidimInner3D: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r13;

     label07:
        $r12 = new ucar.nc2.ft.point.standard.Table$TableMultidimStructure;

        specialinvoke $r12.<ucar.nc2.ft.point.standard.Table$TableMultidimStructure: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r12;

     label08:
        $r11 = new ucar.nc2.ft.point.standard.Table$TableMultidimInnerPsuedo;

        specialinvoke $r11.<ucar.nc2.ft.point.standard.Table$TableMultidimInnerPsuedo: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r11;

     label09:
        $r10 = new ucar.nc2.ft.point.standard.Table$TableMultidimInnerPsuedo3D;

        specialinvoke $r10.<ucar.nc2.ft.point.standard.Table$TableMultidimInnerPsuedo3D: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r10;

     label10:
        $r9 = new ucar.nc2.ft.point.standard.Table$TableNestedStructure;

        specialinvoke $r9.<ucar.nc2.ft.point.standard.Table$TableNestedStructure: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r9;

     label11:
        $r8 = new ucar.nc2.ft.point.standard.Table$TableParentId;

        specialinvoke $r8.<ucar.nc2.ft.point.standard.Table$TableParentId: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r8;

     label12:
        $r7 = new ucar.nc2.ft.point.standard.Table$TableParentIndex;

        specialinvoke $r7.<ucar.nc2.ft.point.standard.Table$TableParentIndex: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r7;

     label13:
        $r6 = new ucar.nc2.ft.point.standard.Table$TableSingleton;

        specialinvoke $r6.<ucar.nc2.ft.point.standard.Table$TableSingleton: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r6;

     label14:
        $r5 = new ucar.nc2.ft.point.standard.Table$TableStructure;

        specialinvoke $r5.<ucar.nc2.ft.point.standard.Table$TableStructure: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r5;

     label15:
        $r3 = new ucar.nc2.ft.point.standard.Table$TableTop;

        specialinvoke $r3.<ucar.nc2.ft.point.standard.Table$TableTop: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r4, r0);

        return $r3;

     label16:
        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unimplemented Table type = ");

        $r22 = r0.<ucar.nc2.ft.point.standard.TableConfig: ucar.nc2.ft.point.standard.Table$Type type>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r19;
    }

    protected void <init>(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.ft.point.standard.TableConfig)
    {
        java.util.ArrayList $r1, $r2;
        ucar.nc2.ft.point.standard.TableConfig r3, $r19, $r24;
        java.lang.String $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r21, $r22;
        ucar.nc2.constants.FeatureType $r5;
        java.util.List $r20;
        ucar.nc2.ft.point.standard.Table r0, $r25, $r26;
        ucar.nc2.dataset.NetcdfDataset r23;

        r0 := @this: ucar.nc2.ft.point.standard.Table;

        r23 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r3 := @parameter1: ucar.nc2.ft.point.standard.TableConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.ft.point.standard.Table: java.util.List cols> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.ft.point.standard.Table: java.util.List nondataVars> = $r2;

        $r4 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String name>;

        r0.<ucar.nc2.ft.point.standard.Table: java.lang.String name> = $r4;

        $r5 = r3.<ucar.nc2.ft.point.standard.TableConfig: ucar.nc2.constants.FeatureType featureType>;

        r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.constants.FeatureType featureType> = $r5;

        $r6 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String lat>;

        r0.<ucar.nc2.ft.point.standard.Table: java.lang.String lat> = $r6;

        $r7 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String lon>;

        r0.<ucar.nc2.ft.point.standard.Table: java.lang.String lon> = $r7;

        $r8 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String elev>;

        r0.<ucar.nc2.ft.point.standard.Table: java.lang.String elev> = $r8;

        $r9 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String time>;

        r0.<ucar.nc2.ft.point.standard.Table: java.lang.String time> = $r9;

        $r10 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String timeNominal>;

        r0.<ucar.nc2.ft.point.standard.Table: java.lang.String timeNominal> = $r10;

        $r11 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String stnId>;

        r0.<ucar.nc2.ft.point.standard.Table: java.lang.String stnId> = $r11;

        $r12 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String stnDesc>;

        r0.<ucar.nc2.ft.point.standard.Table: java.lang.String stnDesc> = $r12;

        $r13 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String stnNpts>;

        r0.<ucar.nc2.ft.point.standard.Table: java.lang.String stnNpts> = $r13;

        $r14 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String stnWmoId>;

        r0.<ucar.nc2.ft.point.standard.Table: java.lang.String stnWmoId> = $r14;

        $r15 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String stnAlt>;

        r0.<ucar.nc2.ft.point.standard.Table: java.lang.String stnAlt> = $r15;

        $r16 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String limit>;

        r0.<ucar.nc2.ft.point.standard.Table: java.lang.String limit> = $r16;

        $r17 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String feature_id>;

        r0.<ucar.nc2.ft.point.standard.Table: java.lang.String feature_id> = $r17;

        $r18 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String missingVar>;

        r0.<ucar.nc2.ft.point.standard.Table: java.lang.String missingVar> = $r18;

        $r19 = r3.<ucar.nc2.ft.point.standard.TableConfig: ucar.nc2.ft.point.standard.TableConfig parent>;

        if $r19 == null goto label1;

        $r24 = r3.<ucar.nc2.ft.point.standard.TableConfig: ucar.nc2.ft.point.standard.TableConfig parent>;

        $r25 = staticinvoke <ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table factory(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r23, $r24);

        r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent> = $r25;

        $r26 = r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        $r26.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table child> = r0;

     label1:
        $r20 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.util.List extraJoin>;

        r0.<ucar.nc2.ft.point.standard.Table: java.util.List extraJoins> = $r20;

        $r21 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String stnNpts>;

        virtualinvoke r0.<ucar.nc2.ft.point.standard.Table: void checkNonDataVariable(java.lang.String)>($r21);

        $r22 = r3.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String limit>;

        virtualinvoke r0.<ucar.nc2.ft.point.standard.Table: void checkNonDataVariable(java.lang.String)>($r22);

        return;
    }

    protected void checkNonDataVariable(java.lang.String)
    {
        java.util.List $r2;
        java.lang.String r0;
        ucar.nc2.ft.point.standard.Table r1;

        r1 := @this: ucar.nc2.ft.point.standard.Table;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r2 = r1.<ucar.nc2.ft.point.standard.Table: java.util.List nondataVars>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

     label1:
        return;
    }

    public abstract ucar.ma2.StructureDataIterator getStructureDataIterator(ucar.nc2.ft.point.standard.Cursor, int) throws java.io.IOException;

    java.lang.String findCoordinateVariableName(ucar.nc2.ft.point.standard.Table$CoordName)
    {
        ucar.nc2.ft.point.standard.Table$CoordName r0;
        int[] $r1;
        int $i0, $i1;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        ucar.nc2.ft.point.standard.Table r2;

        r2 := @this: ucar.nc2.ft.point.standard.Table;

        r0 := @parameter0: ucar.nc2.ft.point.standard.Table$CoordName;

        $r1 = <ucar.nc2.ft.point.standard.Table$1: int[] $SwitchMap$ucar$nc2$ft$point$standard$Table$CoordName>;

        $i0 = virtualinvoke r0.<ucar.nc2.ft.point.standard.Table$CoordName: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label11;
            default: goto label12;
        };

     label01:
        $r13 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String elev>;

        return $r13;

     label02:
        $r12 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String lat>;

        return $r12;

     label03:
        $r11 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String lon>;

        return $r11;

     label04:
        $r10 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String time>;

        return $r10;

     label05:
        $r9 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String timeNominal>;

        return $r9;

     label06:
        $r8 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String stnId>;

        return $r8;

     label07:
        $r7 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String stnDesc>;

        return $r7;

     label08:
        $r6 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String stnWmoId>;

        return $r6;

     label09:
        $r5 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String stnAlt>;

        return $r5;

     label10:
        $r4 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String feature_id>;

        return $r4;

     label11:
        $r3 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String missingVar>;

        return $r3;

     label12:
        return null;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        ucar.nc2.ft.point.standard.Table r0;

        r0 := @this: ucar.nc2.ft.point.standard.Table;

        $r1 = r0.<ucar.nc2.ft.point.standard.Table: java.lang.String name>;

        return $r1;
    }

    public ucar.nc2.constants.FeatureType getFeatureType()
    {
        ucar.nc2.constants.FeatureType $r1;
        ucar.nc2.ft.point.standard.Table r0;

        r0 := @this: ucar.nc2.ft.point.standard.Table;

        $r1 = r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.constants.FeatureType featureType>;

        return $r1;
    }

    public ucar.nc2.dataset.VariableDS findVariable(java.lang.String)
    {
        java.lang.String r1;
        ucar.nc2.ft.point.standard.Table r0;

        r0 := @this: ucar.nc2.ft.point.standard.Table;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.lang.String showDimension()
    {
        ucar.nc2.ft.point.standard.Table r0;

        r0 := @this: ucar.nc2.ft.point.standard.Table;

        return "";
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r1, $r7, $r8, $r11;
        java.lang.Integer $r10;
        java.util.Formatter $r0;
        int $i0;
        java.lang.String $r3, $r4, $r6, $r14, $r15;
        java.util.List $r9;
        ucar.nc2.ft.point.standard.Table r2, $r12, $r13;
        java.lang.Class $r5;

        r2 := @this: ucar.nc2.ft.point.standard.Table;

        $r0 = new java.util.Formatter;

        specialinvoke $r0.<java.util.Formatter: void <init>()>();

        $r1 = newarray (java.lang.Object)[3];

        $r3 = virtualinvoke r2.<ucar.nc2.ft.point.standard.Table: java.lang.String getName()>();

        $r1[0] = $r3;

        $r4 = virtualinvoke r2.<ucar.nc2.ft.point.standard.Table: java.lang.String showDimension()>();

        $r1[1] = $r4;

        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String toString()>();

        $r1[2] = $r6;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" Table %s on dimension %s type=%s\n", $r1);

        $r7 = newarray (java.lang.Object)[0];

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  Coordinates=", $r7);

        $r8 = newarray (java.lang.Object)[1];

        $r9 = r2.<ucar.nc2.ft.point.standard.Table: java.util.List cols>;

        $i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8[0] = $r10;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("\n  Data Variables= %d\n", $r8);

        $r11 = newarray (java.lang.Object)[1];

        $r12 = r2.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        if $r12 != null goto label1;

        $r15 = "none";

        goto label2;

     label1:
        $r13 = r2.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        $r15 = virtualinvoke $r13.<ucar.nc2.ft.point.standard.Table: java.lang.String getName()>();

     label2:
        $r11[0] = $r15;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  Parent= %s\n", $r11);

        $r14 = virtualinvoke $r0.<java.util.Formatter: java.lang.String toString()>();

        return $r14;
    }

    public java.lang.String showAll()
    {
        java.util.Iterator $r6;
        java.util.List $r5;
        ucar.nc2.ft.point.standard.Table r2;
        ucar.nc2.VariableSimpleIF r9;
        java.lang.StringBuilder $r0, $r1, $r4, $r10, $r12;
        java.lang.Object $r8;
        java.lang.String $r3, $r7, $r11;
        boolean $z0;

        r2 := @this: ucar.nc2.ft.point.standard.Table;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Table on dimension ");

        $r3 = virtualinvoke r2.<ucar.nc2.ft.point.standard.Table: java.lang.String showDimension()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r5 = r2.<ucar.nc2.ft.point.standard.Table: java.util.List cols>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (ucar.nc2.VariableSimpleIF) $r8;

        $r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r11 = interfaceinvoke r9.<ucar.nc2.VariableSimpleIF: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label1;

     label2:
        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public int show(java.util.Formatter, int)
    {
        java.util.Formatter r9;
        ucar.nc2.constants.FeatureType $r3, $r6;
        boolean $z0, $z1;
        java.util.List $r14, $r17, $r25;
        ucar.nc2.ft.point.standard.Join r31;
        ucar.nc2.ft.point.standard.Table r0, $r1, $r29;
        ucar.nc2.VariableSimpleIF r32;
        java.lang.StringBuilder $r4, $r5, $r8;
        java.lang.Object[] $r10, $r16, $r20, $r24, $r28;
        int $i0, $i1, i2;
        java.lang.String $r2, $r7, $r11, $r13, $r15, $r21, $r22, $r23, $r30;
        java.util.Iterator $r18, $r26;
        java.lang.Class $r12;
        java.lang.Object $r19, $r27;

        r0 := @this: ucar.nc2.ft.point.standard.Table;

        r9 := @parameter0: java.util.Formatter;

        i2 := @parameter1: int;

        $r1 = r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        if $r1 == null goto label1;

        $r29 = r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        i2 = virtualinvoke $r29.<ucar.nc2.ft.point.standard.Table: int show(java.util.Formatter,int)>(r9, i2);

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.ft.point.standard.Table: java.lang.String indent(int)>(i2);

        $r3 = r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.constants.FeatureType featureType>;

        if $r3 != null goto label2;

        $r30 = "";

        goto label3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("featureType=");

        $r6 = r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.constants.FeatureType featureType>;

        $r7 = virtualinvoke $r6.<ucar.nc2.constants.FeatureType: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r30 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r10 = newarray (java.lang.Object)[4];

        $r10[0] = $r2;

        $r11 = virtualinvoke r0.<ucar.nc2.ft.point.standard.Table: java.lang.String getName()>();

        $r10[1] = $r11;

        $r12 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String toString()>();

        $r10[2] = $r13;

        $r10[3] = $r30;

        virtualinvoke r9.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n%sTable %s: type=%s %s%n", $r10);

        $r14 = r0.<ucar.nc2.ft.point.standard.Table: java.util.List extraJoins>;

        if $r14 == null goto label5;

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = $r2;

        virtualinvoke r9.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  %sExtraJoins:\n", $r24);

        $r25 = r0.<ucar.nc2.ft.point.standard.Table: java.util.List extraJoins>;

        $r26 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r26.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r27 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r31 = (ucar.nc2.ft.point.standard.Join) $r27;

        $r28 = newarray (java.lang.Object)[2];

        $r28[0] = $r2;

        $r28[1] = r31;

        virtualinvoke r9.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("   %s  %s \n", $r28);

        goto label4;

     label5:
        $i0 = i2 + 2;

        $r15 = virtualinvoke r0.<ucar.nc2.ft.point.standard.Table: java.lang.String indent(int)>($i0);

        virtualinvoke r0.<ucar.nc2.ft.point.standard.Table: void showTableExtraInfo(java.lang.String,java.util.Formatter)>($r15, r9);

        specialinvoke r0.<ucar.nc2.ft.point.standard.Table: void showCoords(java.lang.String,java.util.Formatter)>($r2, r9);

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = $r2;

        virtualinvoke r9.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  %sVariables:\n", $r16);

        $r17 = r0.<ucar.nc2.ft.point.standard.Table: java.util.List cols>;

        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r32 = (ucar.nc2.VariableSimpleIF) $r19;

        $r20 = newarray (java.lang.Object)[3];

        $r20[0] = $r2;

        $r21 = interfaceinvoke r32.<ucar.nc2.VariableSimpleIF: java.lang.String getName()>();

        $r20[1] = $r21;

        $r22 = interfaceinvoke r32.<ucar.nc2.VariableSimpleIF: java.lang.String getShortName()>();

        $r23 = virtualinvoke r0.<ucar.nc2.ft.point.standard.Table: java.lang.String getKind(java.lang.String)>($r22);

        $r20[2] = $r23;

        virtualinvoke r9.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("   %s  %s %s\n", $r20);

        goto label6;

     label7:
        $i1 = i2 + 2;

        return $i1;
    }

    java.lang.String indent(int)
    {
        ucar.nc2.ft.point.standard.Table r2;
        int i0, i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r1;

        r2 := @this: ucar.nc2.ft.point.standard.Table;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    protected abstract void showTableExtraInfo(java.lang.String, java.util.Formatter);

    java.lang.String getKind(java.lang.String)
    {
        java.lang.String r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        ucar.nc2.ft.point.standard.Table r1;

        r1 := @this: ucar.nc2.ft.point.standard.Table;

        r0 := @parameter0: java.lang.String;

        $r2 = r1.<ucar.nc2.ft.point.standard.Table: java.lang.String lat>;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label01;

        return "[Lat]";

     label01:
        $r3 = r1.<ucar.nc2.ft.point.standard.Table: java.lang.String lon>;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label02;

        return "[Lon]";

     label02:
        $r4 = r1.<ucar.nc2.ft.point.standard.Table: java.lang.String elev>;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label03;

        return "[Elev]";

     label03:
        $r5 = r1.<ucar.nc2.ft.point.standard.Table: java.lang.String time>;

        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label04;

        return "[Time]";

     label04:
        $r6 = r1.<ucar.nc2.ft.point.standard.Table: java.lang.String timeNominal>;

        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z4 == 0 goto label05;

        return "[timeNominal]";

     label05:
        $r7 = r1.<ucar.nc2.ft.point.standard.Table: java.lang.String stnId>;

        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z5 == 0 goto label06;

        return "[stnId]";

     label06:
        $r8 = r1.<ucar.nc2.ft.point.standard.Table: java.lang.String stnDesc>;

        $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z6 == 0 goto label07;

        return "[stnDesc]";

     label07:
        $r9 = r1.<ucar.nc2.ft.point.standard.Table: java.lang.String stnNpts>;

        $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z7 == 0 goto label08;

        return "[stnNpts]";

     label08:
        $r10 = r1.<ucar.nc2.ft.point.standard.Table: java.lang.String stnWmoId>;

        $z8 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z8 == 0 goto label09;

        return "[stnWmoId]";

     label09:
        $r11 = r1.<ucar.nc2.ft.point.standard.Table: java.lang.String stnAlt>;

        $z9 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z9 == 0 goto label10;

        return "[stnAlt]";

     label10:
        $r12 = r1.<ucar.nc2.ft.point.standard.Table: java.lang.String limit>;

        $z10 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z10 == 0 goto label11;

        return "[limit]";

     label11:
        return "";
    }

    private void showCoords(java.lang.String, java.util.Formatter)
    {
        java.util.Formatter r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, z12, z13, z14, z15, z16, z17, z18, z19, z20;
        ucar.nc2.ft.point.standard.Table r0;
        java.lang.Object[] $r14;
        java.lang.String r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: ucar.nc2.ft.point.standard.Table;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Formatter;

        $r3 = r0.<ucar.nc2.ft.point.standard.Table: java.lang.String lat>;

        $z0 = specialinvoke r0.<ucar.nc2.ft.point.standard.Table: boolean showCoord(java.util.Formatter,java.lang.String,java.lang.String)>(r1, $r3, r2);

        $r4 = r0.<ucar.nc2.ft.point.standard.Table: java.lang.String lon>;

        $z1 = specialinvoke r0.<ucar.nc2.ft.point.standard.Table: boolean showCoord(java.util.Formatter,java.lang.String,java.lang.String)>(r1, $r4, r2);

        z11 = $z0 | $z1;

        $r5 = r0.<ucar.nc2.ft.point.standard.Table: java.lang.String elev>;

        $z2 = specialinvoke r0.<ucar.nc2.ft.point.standard.Table: boolean showCoord(java.util.Formatter,java.lang.String,java.lang.String)>(r1, $r5, r2);

        z12 = z11 | $z2;

        $r6 = r0.<ucar.nc2.ft.point.standard.Table: java.lang.String time>;

        $z3 = specialinvoke r0.<ucar.nc2.ft.point.standard.Table: boolean showCoord(java.util.Formatter,java.lang.String,java.lang.String)>(r1, $r6, r2);

        z13 = z12 | $z3;

        $r7 = r0.<ucar.nc2.ft.point.standard.Table: java.lang.String timeNominal>;

        $z4 = specialinvoke r0.<ucar.nc2.ft.point.standard.Table: boolean showCoord(java.util.Formatter,java.lang.String,java.lang.String)>(r1, $r7, r2);

        z14 = z13 | $z4;

        $r8 = r0.<ucar.nc2.ft.point.standard.Table: java.lang.String stnId>;

        $z5 = specialinvoke r0.<ucar.nc2.ft.point.standard.Table: boolean showCoord(java.util.Formatter,java.lang.String,java.lang.String)>(r1, $r8, r2);

        z15 = z14 | $z5;

        $r9 = r0.<ucar.nc2.ft.point.standard.Table: java.lang.String stnDesc>;

        $z6 = specialinvoke r0.<ucar.nc2.ft.point.standard.Table: boolean showCoord(java.util.Formatter,java.lang.String,java.lang.String)>(r1, $r9, r2);

        z16 = z15 | $z6;

        $r10 = r0.<ucar.nc2.ft.point.standard.Table: java.lang.String stnNpts>;

        $z7 = specialinvoke r0.<ucar.nc2.ft.point.standard.Table: boolean showCoord(java.util.Formatter,java.lang.String,java.lang.String)>(r1, $r10, r2);

        z17 = z16 | $z7;

        $r11 = r0.<ucar.nc2.ft.point.standard.Table: java.lang.String stnWmoId>;

        $z8 = specialinvoke r0.<ucar.nc2.ft.point.standard.Table: boolean showCoord(java.util.Formatter,java.lang.String,java.lang.String)>(r1, $r11, r2);

        z18 = z17 | $z8;

        $r12 = r0.<ucar.nc2.ft.point.standard.Table: java.lang.String stnAlt>;

        $z9 = specialinvoke r0.<ucar.nc2.ft.point.standard.Table: boolean showCoord(java.util.Formatter,java.lang.String,java.lang.String)>(r1, $r12, r2);

        z19 = z18 | $z9;

        $r13 = r0.<ucar.nc2.ft.point.standard.Table: java.lang.String limit>;

        $z10 = specialinvoke r0.<ucar.nc2.ft.point.standard.Table: boolean showCoord(java.util.Formatter,java.lang.String,java.lang.String)>(r1, $r13, r2);

        z20 = z19 | $z10;

        if z20 == 0 goto label1;

        $r14 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("\n", $r14);

     label1:
        return;
    }

    private boolean showCoord(java.util.Formatter, java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r2;
        ucar.nc2.ft.point.standard.Table r4;
        java.lang.String r0, r3, $r5;
        java.util.Formatter r1;

        r4 := @this: ucar.nc2.ft.point.standard.Table;

        r1 := @parameter0: java.util.Formatter;

        r0 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = r3;

        $r2[1] = r0;

        $r5 = virtualinvoke r4.<ucar.nc2.ft.point.standard.Table: java.lang.String getKind(java.lang.String)>(r0);

        $r2[2] = $r5;

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" %s Coord %s %s\n", $r2);

        return 1;

     label1:
        return 0;
    }

    static org.slf4j.Logger access$100()
    {
        org.slf4j.Logger $r0;

        $r0 = <ucar.nc2.ft.point.standard.Table: org.slf4j.Logger log>;

        return $r0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/ft/point/standard/Table;");

        <ucar.nc2.ft.point.standard.Table: org.slf4j.Logger log> = $r0;

        return;
    }
}
