public class org.codehaus.jackson.map.ser.impl.JsonSerializerMap extends java.lang.Object
{
    private final org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket[] _buckets;
    private final int _size;

    public void <init>(java.util.Map)
    {
        org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey r8;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap r0;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket $r9, $r10;
        java.util.Map r1;
        int $i0, $i1, i2, $i3, i4;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket[] r2;
        boolean $z0;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.codehaus.jackson.map.JsonSerializer $r12;
        java.lang.Object $r5, $r7, $r11;

        r0 := @this: org.codehaus.jackson.map.ser.impl.JsonSerializerMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $i1 = staticinvoke <org.codehaus.jackson.map.ser.impl.JsonSerializerMap: int findSize(int)>($i0);

        r0.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap: int _size> = $i1;

        i2 = $i1 - 1;

        r2 = newarray (org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket)[$i1];

        $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey) $r7;

        $i3 = virtualinvoke r8.<org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: int hashCode()>();

        i4 = $i3 & i2;

        $r9 = new org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket;

        $r10 = r2[i4];

        $r11 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (org.codehaus.jackson.map.JsonSerializer) $r11;

        specialinvoke $r9.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket: void <init>(org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket,org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey,org.codehaus.jackson.map.JsonSerializer)>($r10, r8, $r12);

        r2[i4] = $r9;

        goto label1;

     label2:
        r0.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap: org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket[] _buckets> = r2;

        return;
    }

    private static final int findSize(int)
    {
        int i0, $i1, i2, $i3, i4;

        i0 := @parameter0: int;

        if i0 > 64 goto label1;

        $i3 = i0 + i0;

        goto label2;

     label1:
        $i1 = i0 >> 2;

        $i3 = i0 + $i1;

     label2:
        i2 = $i3;

        i4 = 8;

     label3:
        if i4 >= i2 goto label4;

        i4 = i4 + i4;

        goto label3;

     label4:
        return i4;
    }

    public int size()
    {
        int $i0;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.JsonSerializerMap;

        $i0 = r0.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap: int _size>;

        return $i0;
    }

    public org.codehaus.jackson.map.JsonSerializer find(org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey)
    {
        org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey r0, $r4, $r6;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap r1;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket $r5, r9;
        int $i0, $i1, $i2, i3;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket[] $r2, $r3;
        boolean $z0, $z1;
        org.codehaus.jackson.map.JsonSerializer $r7, $r8;

        r1 := @this: org.codehaus.jackson.map.ser.impl.JsonSerializerMap;

        r0 := @parameter0: org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: int hashCode()>();

        $r2 = r1.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap: org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket[] _buckets>;

        $i1 = lengthof $r2;

        $i2 = $i1 - 1;

        i3 = $i0 & $i2;

        $r3 = r1.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap: org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket[] _buckets>;

        r9 = $r3[i3];

        if r9 != null goto label1;

        return null;

     label1:
        $r4 = r9.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket: org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey key>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r8 = r9.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket: org.codehaus.jackson.map.JsonSerializer value>;

        return $r8;

     label2:
        $r5 = r9.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket: org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket next>;

        r9 = $r5;

        if $r5 == null goto label3;

        $r6 = $r5.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket: org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey key>;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        $r7 = $r5.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket: org.codehaus.jackson.map.JsonSerializer value>;

        return $r7;

     label3:
        return null;
    }
}
