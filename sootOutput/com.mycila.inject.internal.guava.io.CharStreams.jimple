public final class com.mycila.inject.internal.guava.io.CharStreams extends java.lang.Object
{
    private static final int BUF_SIZE;

    private void <init>()
    {
        com.mycila.inject.internal.guava.io.CharStreams r0;

        r0 := @this: com.mycila.inject.internal.guava.io.CharStreams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.mycila.inject.internal.guava.io.InputSupplier newReaderSupplier(java.lang.String)
    {
        java.lang.String r0;
        com.mycila.inject.internal.guava.io.CharStreams$1 $r1;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.mycila.inject.internal.guava.io.CharStreams$1;

        specialinvoke $r1.<com.mycila.inject.internal.guava.io.CharStreams$1: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public static com.mycila.inject.internal.guava.io.InputSupplier newReaderSupplier(com.mycila.inject.internal.guava.io.InputSupplier, java.nio.charset.Charset)
    {
        com.mycila.inject.internal.guava.io.CharStreams$2 $r2;
        com.mycila.inject.internal.guava.io.InputSupplier r0;
        java.nio.charset.Charset r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.io.InputSupplier;

        r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = new com.mycila.inject.internal.guava.io.CharStreams$2;

        specialinvoke $r2.<com.mycila.inject.internal.guava.io.CharStreams$2: void <init>(com.mycila.inject.internal.guava.io.InputSupplier,java.nio.charset.Charset)>(r0, r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.io.OutputSupplier newWriterSupplier(com.mycila.inject.internal.guava.io.OutputSupplier, java.nio.charset.Charset)
    {
        com.mycila.inject.internal.guava.io.OutputSupplier r0;
        com.mycila.inject.internal.guava.io.CharStreams$3 $r2;
        java.nio.charset.Charset r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.io.OutputSupplier;

        r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = new com.mycila.inject.internal.guava.io.CharStreams$3;

        specialinvoke $r2.<com.mycila.inject.internal.guava.io.CharStreams$3: void <init>(com.mycila.inject.internal.guava.io.OutputSupplier,java.nio.charset.Charset)>(r0, r1);

        return $r2;
    }

    public static void write(java.lang.CharSequence, com.mycila.inject.internal.guava.io.OutputSupplier) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        java.lang.CharSequence r0;
        java.lang.Appendable r3;
        java.io.Closeable $r4, $r6;
        com.mycila.inject.internal.guava.io.OutputSupplier r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: com.mycila.inject.internal.guava.io.OutputSupplier;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = interfaceinvoke r1.<com.mycila.inject.internal.guava.io.OutputSupplier: java.lang.Object getOutput()>();

        r3 = (java.lang.Appendable) $r2;

     label1:
        interfaceinvoke r3.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r0);

     label2:
        $r4 = (java.io.Closeable) r3;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r4, 0);

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = (java.io.Closeable) r3;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r6, 1);

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long copy(com.mycila.inject.internal.guava.io.InputSupplier, com.mycila.inject.internal.guava.io.OutputSupplier) throws java.io.IOException
    {
        java.lang.Throwable $r8, $r10;
        java.lang.Appendable r5;
        com.mycila.inject.internal.guava.io.OutputSupplier r3;
        long $l0;
        com.mycila.inject.internal.guava.io.InputSupplier r0;
        java.io.Closeable $r6, $r7, $r9, $r11;
        java.lang.Readable r2;
        java.lang.Object $r1, $r4;
        boolean z0;

        r0 := @parameter0: com.mycila.inject.internal.guava.io.InputSupplier;

        r3 := @parameter1: com.mycila.inject.internal.guava.io.OutputSupplier;

        z0 = 1;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.io.InputSupplier: java.lang.Object getInput()>();

        r2 = (java.lang.Readable) $r1;

     label1:
        $r4 = interfaceinvoke r3.<com.mycila.inject.internal.guava.io.OutputSupplier: java.lang.Object getOutput()>();

        r5 = (java.lang.Appendable) $r4;

     label2:
        $l0 = staticinvoke <com.mycila.inject.internal.guava.io.CharStreams: long copy(java.lang.Readable,java.lang.Appendable)>(r2, r5);

        z0 = 0;

     label3:
        $r6 = (java.io.Closeable) r5;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r6, 0);

     label4:
        $r7 = (java.io.Closeable) r2;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r7, 0);

        return $l0;

     label5:
        $r10 := @caughtexception;

     label6:
        $r11 = (java.io.Closeable) r5;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r11, 1);

        throw $r10;

     label7:
        $r8 := @caughtexception;

     label8:
        $r9 = (java.io.Closeable) r2;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r9, z0);

        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label8 with label7;
    }

    public static long copy(com.mycila.inject.internal.guava.io.InputSupplier, java.lang.Appendable) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        java.lang.Appendable r3;
        long $l0;
        com.mycila.inject.internal.guava.io.InputSupplier r0;
        java.io.Closeable $r4, $r6;
        java.lang.Readable r2;
        java.lang.Object $r1;
        boolean z0;

        r0 := @parameter0: com.mycila.inject.internal.guava.io.InputSupplier;

        r3 := @parameter1: java.lang.Appendable;

        z0 = 1;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.io.InputSupplier: java.lang.Object getInput()>();

        r2 = (java.lang.Readable) $r1;

     label1:
        $l0 = staticinvoke <com.mycila.inject.internal.guava.io.CharStreams: long copy(java.lang.Readable,java.lang.Appendable)>(r2, r3);

        z0 = 0;

     label2:
        $r4 = (java.io.Closeable) r2;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r4, 0);

        return $l0;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = (java.io.Closeable) r2;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r6, 1);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long copy(java.lang.Readable, java.lang.Appendable) throws java.io.IOException
    {
        java.nio.CharBuffer $r0;
        java.lang.Appendable r2;
        java.lang.Readable r1;
        int $i0, $i4;
        long $l1, l2;

        r1 := @parameter0: java.lang.Readable;

        r2 := @parameter1: java.lang.Appendable;

        $r0 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(2048);

        l2 = 0L;

     label1:
        $i0 = interfaceinvoke r1.<java.lang.Readable: int read(java.nio.CharBuffer)>($r0);

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        goto label3;

     label2:
        virtualinvoke $r0.<java.nio.CharBuffer: java.nio.Buffer flip()>();

        interfaceinvoke r2.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence,int,int)>($r0, 0, $i0);

        $l1 = (long) $i0;

        l2 = l2 + $l1;

        goto label1;

     label3:
        return l2;
    }

    public static java.lang.String toString(java.lang.Readable) throws java.io.IOException
    {
        java.lang.Readable r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.Readable;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.io.CharStreams: java.lang.StringBuilder toStringBuilder(java.lang.Readable)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String toString(com.mycila.inject.internal.guava.io.InputSupplier) throws java.io.IOException
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        com.mycila.inject.internal.guava.io.InputSupplier r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.io.InputSupplier;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.io.CharStreams: java.lang.StringBuilder toStringBuilder(com.mycila.inject.internal.guava.io.InputSupplier)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private static java.lang.StringBuilder toStringBuilder(java.lang.Readable) throws java.io.IOException
    {
        java.lang.Readable r1;
        java.lang.StringBuilder $r0;

        r1 := @parameter0: java.lang.Readable;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        staticinvoke <com.mycila.inject.internal.guava.io.CharStreams: long copy(java.lang.Readable,java.lang.Appendable)>(r1, $r0);

        return $r0;
    }

    private static java.lang.StringBuilder toStringBuilder(com.mycila.inject.internal.guava.io.InputSupplier) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        com.mycila.inject.internal.guava.io.InputSupplier r0;
        java.io.Closeable $r4, $r6;
        java.lang.Readable r2;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3;
        boolean z0;

        r0 := @parameter0: com.mycila.inject.internal.guava.io.InputSupplier;

        z0 = 1;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.io.InputSupplier: java.lang.Object getInput()>();

        r2 = (java.lang.Readable) $r1;

     label1:
        $r3 = staticinvoke <com.mycila.inject.internal.guava.io.CharStreams: java.lang.StringBuilder toStringBuilder(java.lang.Readable)>(r2);

        z0 = 0;

     label2:
        $r4 = (java.io.Closeable) r2;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r4, 0);

        return $r3;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = (java.io.Closeable) r2;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r6, 1);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.lang.String readFirstLine(com.mycila.inject.internal.guava.io.InputSupplier) throws java.io.IOException
    {
        java.lang.Throwable $r6;
        com.mycila.inject.internal.guava.io.LineReader $r3;
        com.mycila.inject.internal.guava.io.InputSupplier r0;
        java.io.Closeable $r5, $r7;
        java.lang.Readable r2;
        java.lang.Object $r1;
        java.lang.String $r4;
        boolean z0;

        r0 := @parameter0: com.mycila.inject.internal.guava.io.InputSupplier;

        z0 = 1;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.io.InputSupplier: java.lang.Object getInput()>();

        r2 = (java.lang.Readable) $r1;

     label1:
        $r3 = new com.mycila.inject.internal.guava.io.LineReader;

        specialinvoke $r3.<com.mycila.inject.internal.guava.io.LineReader: void <init>(java.lang.Readable)>(r2);

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.guava.io.LineReader: java.lang.String readLine()>();

        z0 = 0;

     label2:
        $r5 = (java.io.Closeable) r2;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r5, 0);

        return $r4;

     label3:
        $r6 := @caughtexception;

     label4:
        $r7 = (java.io.Closeable) r2;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r7, 1);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.util.List readLines(com.mycila.inject.internal.guava.io.InputSupplier) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        java.util.List $r3;
        com.mycila.inject.internal.guava.io.InputSupplier r0;
        java.io.Closeable $r4, $r6;
        java.lang.Readable r2;
        java.lang.Object $r1;
        boolean z0;

        r0 := @parameter0: com.mycila.inject.internal.guava.io.InputSupplier;

        z0 = 1;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.io.InputSupplier: java.lang.Object getInput()>();

        r2 = (java.lang.Readable) $r1;

     label1:
        $r3 = staticinvoke <com.mycila.inject.internal.guava.io.CharStreams: java.util.List readLines(java.lang.Readable)>(r2);

        z0 = 0;

     label2:
        $r4 = (java.io.Closeable) r2;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r4, 0);

        return $r3;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = (java.io.Closeable) r2;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r6, 1);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.util.List readLines(java.lang.Readable) throws java.io.IOException
    {
        com.mycila.inject.internal.guava.io.LineReader $r1;
        java.lang.Readable r2;
        java.lang.String $r3;
        java.util.ArrayList $r0;

        r2 := @parameter0: java.lang.Readable;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new com.mycila.inject.internal.guava.io.LineReader;

        specialinvoke $r1.<com.mycila.inject.internal.guava.io.LineReader: void <init>(java.lang.Readable)>(r2);

     label1:
        $r3 = virtualinvoke $r1.<com.mycila.inject.internal.guava.io.LineReader: java.lang.String readLine()>();

        if $r3 == null goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r0;
    }

    public static java.lang.Object readLines(com.mycila.inject.internal.guava.io.InputSupplier, com.mycila.inject.internal.guava.io.LineProcessor) throws java.io.IOException
    {
        java.lang.Throwable $r8;
        com.mycila.inject.internal.guava.io.LineReader $r3;
        com.mycila.inject.internal.guava.io.InputSupplier r0;
        com.mycila.inject.internal.guava.io.LineProcessor r6;
        java.io.Closeable $r5, $r9;
        java.lang.Readable r2;
        java.lang.Object $r1, $r7;
        java.lang.String $r4;
        boolean $z0;

        r0 := @parameter0: com.mycila.inject.internal.guava.io.InputSupplier;

        r6 := @parameter1: com.mycila.inject.internal.guava.io.LineProcessor;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.io.InputSupplier: java.lang.Object getInput()>();

        r2 = (java.lang.Readable) $r1;

     label1:
        $r3 = new com.mycila.inject.internal.guava.io.LineReader;

        specialinvoke $r3.<com.mycila.inject.internal.guava.io.LineReader: void <init>(java.lang.Readable)>(r2);

     label2:
        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.guava.io.LineReader: java.lang.String readLine()>();

        if $r4 == null goto label3;

        $z0 = interfaceinvoke r6.<com.mycila.inject.internal.guava.io.LineProcessor: boolean processLine(java.lang.String)>($r4);

        if $z0 != 0 goto label2;

        goto label3;

     label3:
        $r5 = (java.io.Closeable) r2;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r5, 0);

        goto label6;

     label4:
        $r8 := @caughtexception;

     label5:
        $r9 = (java.io.Closeable) r2;

        staticinvoke <com.mycila.inject.internal.guava.io.Closeables: void close(java.io.Closeable,boolean)>($r9, 1);

        throw $r8;

     label6:
        $r7 = interfaceinvoke r6.<com.mycila.inject.internal.guava.io.LineProcessor: java.lang.Object getResult()>();

        return $r7;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static com.mycila.inject.internal.guava.io.InputSupplier join(java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.io.CharStreams$4 $r0;
        java.lang.Iterable r1;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = new com.mycila.inject.internal.guava.io.CharStreams$4;

        specialinvoke $r0.<com.mycila.inject.internal.guava.io.CharStreams$4: void <init>(java.lang.Iterable)>(r1);

        return $r0;
    }

    public static transient com.mycila.inject.internal.guava.io.InputSupplier join(com.mycila.inject.internal.guava.io.InputSupplier[])
    {
        java.util.List $r1;
        com.mycila.inject.internal.guava.io.InputSupplier[] r0;
        com.mycila.inject.internal.guava.io.InputSupplier $r2;

        r0 := @parameter0: com.mycila.inject.internal.guava.io.InputSupplier[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.io.CharStreams: com.mycila.inject.internal.guava.io.InputSupplier join(java.lang.Iterable)>($r1);

        return $r2;
    }

    public static void skipFully(java.io.Reader, long) throws java.io.IOException
    {
        long $l1, l4;
        java.io.Reader r0;
        java.io.EOFException $r2;
        byte $b0, $b2;
        int $i3, $i5, $i7;

        r0 := @parameter0: java.io.Reader;

        l4 := @parameter1: long;

     label1:
        $b0 = l4 cmp 0L;

        $i5 = (int) $b0;

        if $i5 <= 0 goto label5;

        $l1 = virtualinvoke r0.<java.io.Reader: long skip(long)>(l4);

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label3;

        $i3 = virtualinvoke r0.<java.io.Reader: int read()>();

        $i7 = (int) -1;

        if $i3 != $i7 goto label2;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label2:
        l4 = l4 - 1L;

        goto label4;

     label3:
        l4 = l4 - $l1;

     label4:
        goto label1;

     label5:
        return;
    }

    public static java.io.Writer asWriter(java.lang.Appendable)
    {
        com.mycila.inject.internal.guava.io.AppendableWriter $r1;
        java.lang.Appendable r0;
        java.io.Writer $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Appendable;

        $z0 = r0 instanceof java.io.Writer;

        if $z0 == 0 goto label1;

        $r2 = (java.io.Writer) r0;

        return $r2;

     label1:
        $r1 = new com.mycila.inject.internal.guava.io.AppendableWriter;

        specialinvoke $r1.<com.mycila.inject.internal.guava.io.AppendableWriter: void <init>(java.lang.Appendable)>(r0);

        return $r1;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.io.CharStreams: int BUF_SIZE> = 2048;

        return;
    }
}
