public class org.bouncycastle.util.encoders.Base64Encoder extends java.lang.Object implements org.bouncycastle.util.encoders.Encoder
{
    protected final byte[] encodingTable;
    protected byte padding;
    protected final byte[] decodingTable;

    protected void initialiseDecodingTable()
    {
        byte[] $r1, $r2, $r3;
        byte $b1, $b2;
        org.bouncycastle.util.encoders.Base64Encoder r0;
        int $i0, i3, $i4;

        r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        i3 = 0;

     label1:
        $r1 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label2;

        $r3 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $r2 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $b2 = $r2[i3];

        $b1 = (byte) i3;

        $i4 = (int) $b2;

        $r3[$i4] = $b1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>()
    {
        byte[] $r1, $r2;
        org.bouncycastle.util.encoders.Base64Encoder r0;

        r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[64];

        $r1[0] = 65;

        $r1[1] = 66;

        $r1[2] = 67;

        $r1[3] = 68;

        $r1[4] = 69;

        $r1[5] = 70;

        $r1[6] = 71;

        $r1[7] = 72;

        $r1[8] = 73;

        $r1[9] = 74;

        $r1[10] = 75;

        $r1[11] = 76;

        $r1[12] = 77;

        $r1[13] = 78;

        $r1[14] = 79;

        $r1[15] = 80;

        $r1[16] = 81;

        $r1[17] = 82;

        $r1[18] = 83;

        $r1[19] = 84;

        $r1[20] = 85;

        $r1[21] = 86;

        $r1[22] = 87;

        $r1[23] = 88;

        $r1[24] = 89;

        $r1[25] = 90;

        $r1[26] = 97;

        $r1[27] = 98;

        $r1[28] = 99;

        $r1[29] = 100;

        $r1[30] = 101;

        $r1[31] = 102;

        $r1[32] = 103;

        $r1[33] = 104;

        $r1[34] = 105;

        $r1[35] = 106;

        $r1[36] = 107;

        $r1[37] = 108;

        $r1[38] = 109;

        $r1[39] = 110;

        $r1[40] = 111;

        $r1[41] = 112;

        $r1[42] = 113;

        $r1[43] = 114;

        $r1[44] = 115;

        $r1[45] = 116;

        $r1[46] = 117;

        $r1[47] = 118;

        $r1[48] = 119;

        $r1[49] = 120;

        $r1[50] = 121;

        $r1[51] = 122;

        $r1[52] = 48;

        $r1[53] = 49;

        $r1[54] = 50;

        $r1[55] = 51;

        $r1[56] = 52;

        $r1[57] = 53;

        $r1[58] = 54;

        $r1[59] = 55;

        $r1[60] = 56;

        $r1[61] = 57;

        $r1[62] = 43;

        $r1[63] = 47;

        r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable> = $r1;

        r0.<org.bouncycastle.util.encoders.Base64Encoder: byte padding> = 61;

        $r2 = newarray (byte)[128];

        r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable> = $r2;

        virtualinvoke r0.<org.bouncycastle.util.encoders.Base64Encoder: void initialiseDecodingTable()>();

        return;
    }

    public int encode(byte[], int, int, java.io.OutputStream) throws java.io.IOException
    {
        byte[] r0, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        byte $b6, $b9, $b17, $b18, $b19, $b20, $b24, $b27, $b28, $b29, $b30, $b31, $b34, $b37, $b41, $b46, $b51, $b53, $b62;
        org.bouncycastle.util.encoders.Base64Encoder r2;
        short s10, s32, s35, s38, $s52, s55, s58, $s63, $s64, $s65, $s76, $s83, $s84;
        int i0, i1, i2, i3, $i4, $i5, $i7, $i8, $i11, $i12, $i13, $i14, $i15, i16, $i21, $i22, $i23, $i25, $i26, $i33, $i36, $i39, $i40, $i42, $i43, $i44, $i45, $i47, $i48, $i49, $i50, i54, i56, i57, i59, i60, $i61, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i77, $i78, $i79, $i80, $i81, $i82, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92;
        java.io.OutputStream r1;

        r2 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        r0 := @parameter0: byte[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.io.OutputStream;

        i1 = i0 % 3;

        i2 = i0 - i1;

        i54 = i3;

     label1:
        $i4 = i3 + i2;

        if i54 >= $i4 goto label2;

        $b31 = r0[i54];

        $s63 = (short) $b31;

        s32 = $s63 & 255;

        $i33 = i54 + 1;

        $b34 = r0[$i33];

        $s64 = (short) $b34;

        s35 = $s64 & 255;

        $i36 = i54 + 2;

        $b37 = r0[$i36];

        $s65 = (short) $b37;

        s38 = $s65 & 255;

        $r8 = r2.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $i66 = (int) s32;

        $i39 = $i66 >>> 2;

        $i40 = $i39 & 63;

        $b41 = $r8[$i40];

        $i67 = (int) $b41;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i67);

        $r9 = r2.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $i68 = (int) s32;

        $i43 = $i68 << 4;

        $i69 = (int) s35;

        $i42 = $i69 >>> 4;

        $i44 = $i43 | $i42;

        $i45 = $i44 & 63;

        $b46 = $r9[$i45];

        $i70 = (int) $b46;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i70);

        $r10 = r2.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $i71 = (int) s35;

        $i48 = $i71 << 2;

        $i72 = (int) s38;

        $i47 = $i72 >>> 6;

        $i49 = $i48 | $i47;

        $i50 = $i49 & 63;

        $b51 = $r10[$i50];

        $i73 = (int) $b51;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i73);

        $r11 = r2.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $s52 = s38 & 63;

        $i74 = (int) $s52;

        $b53 = $r11[$i74];

        $i75 = (int) $b53;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i75);

        i54 = i54 + 3;

        goto label1;

     label2:
        tableswitch(i1)
        {
            case 0: goto label3;
            case 1: goto label4;
            case 2: goto label5;
            default: goto label6;
        };

     label3:
        goto label6;

     label4:
        $i23 = i3 + i2;

        $b24 = r0[$i23];

        $s76 = (short) $b24;

        s55 = $s76 & 255;

        $i77 = (int) s55;

        $i25 = $i77 >>> 2;

        i56 = $i25 & 63;

        $i78 = (int) s55;

        $i26 = $i78 << 4;

        i57 = $i26 & 63;

        $r6 = r2.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $b27 = $r6[i56];

        $i79 = (int) $b27;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i79);

        $r7 = r2.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $b28 = $r7[i57];

        $i80 = (int) $b28;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i80);

        $b29 = r2.<org.bouncycastle.util.encoders.Base64Encoder: byte padding>;

        $i81 = (int) $b29;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i81);

        $b30 = r2.<org.bouncycastle.util.encoders.Base64Encoder: byte padding>;

        $i82 = (int) $b30;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i82);

        goto label6;

     label5:
        $i5 = i3 + i2;

        $b6 = r0[$i5];

        $s83 = (short) $b6;

        s58 = $s83 & 255;

        $i7 = i3 + i2;

        $i8 = $i7 + 1;

        $b9 = r0[$i8];

        $s84 = (short) $b9;

        s10 = $s84 & 255;

        $i85 = (int) s58;

        $i11 = $i85 >>> 2;

        i59 = $i11 & 63;

        $i86 = (int) s58;

        $i13 = $i86 << 4;

        $i87 = (int) s10;

        $i12 = $i87 >>> 4;

        $i14 = $i13 | $i12;

        i60 = $i14 & 63;

        $i88 = (int) s10;

        $i15 = $i88 << 2;

        i16 = $i15 & 63;

        $r3 = r2.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $b17 = $r3[i59];

        $i89 = (int) $b17;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i89);

        $r4 = r2.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $b18 = $r4[i60];

        $i90 = (int) $b18;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i90);

        $r5 = r2.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $b19 = $r5[i16];

        $i91 = (int) $b19;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i91);

        $b20 = r2.<org.bouncycastle.util.encoders.Base64Encoder: byte padding>;

        $i92 = (int) $b20;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i92);

     label6:
        $i61 = i2 / 3;

        $i21 = $i61 * 4;

        if i1 != 0 goto label7;

        $b62 = 0;

        goto label8;

     label7:
        $b62 = 4;

     label8:
        $i22 = $i21 + $b62;

        return $i22;
    }

    private boolean ignore(char)
    {
        org.bouncycastle.util.encoders.Base64Encoder r0;
        int $i1, $i2, $i3, $i4;
        char c0;
        boolean $z0;

        r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 10 goto label1;

        $i2 = (int) c0;

        if $i2 == 13 goto label1;

        $i3 = (int) c0;

        if $i3 == 9 goto label1;

        $i4 = (int) c0;

        if $i4 != 32 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public int decode(byte[], int, int, java.io.OutputStream) throws java.io.IOException
    {
        byte[] r1, $r3, $r4, $r5, $r6;
        byte $b3, $b5, $b7, $b9, $b15, b16, $b18, b19, $b21, b22, $b24, b25, $b35;
        org.bouncycastle.util.encoders.Base64Encoder r0;
        boolean $z0;
        int i0, i1, $i2, $i4, $i6, $i8, $i14, $i17, $i20, $i23, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i37, i38, i39, i40, i41, i42, i43, i44, i45, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57;
        java.io.OutputStream r2;
        char $c10, $c11, $c12, $c13, $c36;

        r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.io.OutputStream;

        i38 = 0;

        i39 = i0 + i1;

     label1:
        if i39 <= i0 goto label3;

        $i34 = i39 - 1;

        $b35 = r1[$i34];

        $c36 = (char) $b35;

        $z0 = specialinvoke r0.<org.bouncycastle.util.encoders.Base64Encoder: boolean ignore(char)>($c36);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $i47 = (int) -1;

        i39 = i39 + $i47;

        goto label1;

     label3:
        $i37 = i39 - 4;

        i40 = specialinvoke r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(byte[],int,int)>(r1, i0, $i37);

     label4:
        if i40 >= $i37 goto label5;

        $r3 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        i41 = i40 + 1;

        $b15 = r1[i40];

        $i48 = (int) $b15;

        b16 = $r3[$i48];

        $i17 = specialinvoke r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(byte[],int,int)>(r1, i41, $i37);

        $r4 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        i42 = $i17 + 1;

        $b18 = r1[$i17];

        $i49 = (int) $b18;

        b19 = $r4[$i49];

        $i20 = specialinvoke r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(byte[],int,int)>(r1, i42, $i37);

        $r5 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        i43 = $i20 + 1;

        $b21 = r1[$i20];

        $i50 = (int) $b21;

        b22 = $r5[$i50];

        $i23 = specialinvoke r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(byte[],int,int)>(r1, i43, $i37);

        $r6 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        i44 = $i23 + 1;

        $b24 = r1[$i23];

        $i51 = (int) $b24;

        b25 = $r6[$i51];

        $i52 = (int) b16;

        $i27 = $i52 << 2;

        $i53 = (int) b19;

        $i26 = $i53 >> 4;

        $i28 = $i27 | $i26;

        virtualinvoke r2.<java.io.OutputStream: void write(int)>($i28);

        $i54 = (int) b19;

        $i30 = $i54 << 4;

        $i55 = (int) b22;

        $i29 = $i55 >> 2;

        $i31 = $i30 | $i29;

        virtualinvoke r2.<java.io.OutputStream: void write(int)>($i31);

        $i56 = (int) b22;

        $i32 = $i56 << 6;

        $i57 = (int) b25;

        $i33 = $i32 | $i57;

        virtualinvoke r2.<java.io.OutputStream: void write(int)>($i33);

        i38 = i38 + 3;

        i40 = specialinvoke r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(byte[],int,int)>(r1, i44, $i37);

        goto label4;

     label5:
        $i2 = i39 - 4;

        $b3 = r1[$i2];

        $c13 = (char) $b3;

        $i4 = i39 - 3;

        $b5 = r1[$i4];

        $c12 = (char) $b5;

        $i6 = i39 - 2;

        $b7 = r1[$i6];

        $c11 = (char) $b7;

        $i8 = i39 - 1;

        $b9 = r1[$i8];

        $c10 = (char) $b9;

        $i14 = specialinvoke r0.<org.bouncycastle.util.encoders.Base64Encoder: int decodeLastBlock(java.io.OutputStream,char,char,char,char)>(r2, $c13, $c12, $c11, $c10);

        i45 = i38 + $i14;

        return i45;
    }

    private int nextI(byte[], int, int)
    {
        byte[] r1;
        byte $b1;
        org.bouncycastle.util.encoders.Base64Encoder r0;
        int i0, i3;
        char $c2;
        boolean $z0;

        r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        r1 := @parameter0: byte[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

     label1:
        if i3 >= i0 goto label2;

        $b1 = r1[i3];

        $c2 = (char) $b1;

        $z0 = specialinvoke r0.<org.bouncycastle.util.encoders.Base64Encoder: boolean ignore(char)>($c2);

        if $z0 == 0 goto label2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i3;
    }

    public int decode(java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        byte[] $r3, $r4, $r5, $r6;
        byte b10, b13, b16, b19;
        boolean $z0;
        org.bouncycastle.util.encoders.Base64Encoder r1;
        int $i0, $i2, $i4, $i6, $i8, $i11, $i14, $i17, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, i31, i32, i33, i34, i35, i36, i37, i38, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50;
        java.lang.String r0;
        java.io.OutputStream r2;
        char $c1, $c3, $c5, $c7, $c9, $c12, $c15, $c18, $c29;

        r1 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.OutputStream;

        i31 = 0;

        i32 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        if i32 <= 0 goto label3;

        $i28 = i32 - 1;

        $c29 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i28);

        $z0 = specialinvoke r1.<org.bouncycastle.util.encoders.Base64Encoder: boolean ignore(char)>($c29);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $i40 = (int) -1;

        i32 = i32 + $i40;

        goto label1;

     label3:
        $i30 = i32 - 4;

        i33 = specialinvoke r1.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(java.lang.String,int,int)>(r0, 0, $i30);

     label4:
        if i33 >= $i30 goto label5;

        $r3 = r1.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        i34 = i33 + 1;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i33);

        $i41 = (int) $c9;

        b10 = $r3[$i41];

        $i11 = specialinvoke r1.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(java.lang.String,int,int)>(r0, i34, $i30);

        $r4 = r1.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        i35 = $i11 + 1;

        $c12 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i11);

        $i42 = (int) $c12;

        b13 = $r4[$i42];

        $i14 = specialinvoke r1.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(java.lang.String,int,int)>(r0, i35, $i30);

        $r5 = r1.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        i36 = $i14 + 1;

        $c15 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i14);

        $i43 = (int) $c15;

        b16 = $r5[$i43];

        $i17 = specialinvoke r1.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(java.lang.String,int,int)>(r0, i36, $i30);

        $r6 = r1.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        i37 = $i17 + 1;

        $c18 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i17);

        $i44 = (int) $c18;

        b19 = $r6[$i44];

        $i45 = (int) b10;

        $i21 = $i45 << 2;

        $i46 = (int) b13;

        $i20 = $i46 >> 4;

        $i22 = $i21 | $i20;

        virtualinvoke r2.<java.io.OutputStream: void write(int)>($i22);

        $i47 = (int) b13;

        $i24 = $i47 << 4;

        $i48 = (int) b16;

        $i23 = $i48 >> 2;

        $i25 = $i24 | $i23;

        virtualinvoke r2.<java.io.OutputStream: void write(int)>($i25);

        $i49 = (int) b16;

        $i26 = $i49 << 6;

        $i50 = (int) b19;

        $i27 = $i26 | $i50;

        virtualinvoke r2.<java.io.OutputStream: void write(int)>($i27);

        i31 = i31 + 3;

        i33 = specialinvoke r1.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(java.lang.String,int,int)>(r0, i37, $i30);

        goto label4;

     label5:
        $i0 = i32 - 4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i0);

        $i2 = i32 - 3;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i4 = i32 - 2;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        $i6 = i32 - 1;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6);

        $i8 = specialinvoke r1.<org.bouncycastle.util.encoders.Base64Encoder: int decodeLastBlock(java.io.OutputStream,char,char,char,char)>(r2, $c1, $c3, $c5, $c7);

        i38 = i31 + $i8;

        return i38;
    }

    private int decodeLastBlock(java.io.OutputStream, char, char, char, char) throws java.io.IOException
    {
        byte[] $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;
        byte $b1, $b3, b6, b24, b25, b26, b27, b28, b29, b30, b31;
        org.bouncycastle.util.encoders.Base64Encoder r0;
        int $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56;
        java.io.OutputStream r5;
        char c0, c2, c4, c5;

        r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        r5 := @parameter0: java.io.OutputStream;

        c4 := @parameter1: char;

        c5 := @parameter2: char;

        c0 := @parameter3: char;

        c2 := @parameter4: char;

        $b1 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte padding>;

        $i32 = (int) c0;

        $i33 = (int) $b1;

        if $i32 != $i33 goto label1;

        $r9 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i34 = (int) c4;

        b24 = $r9[$i34];

        $r10 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i35 = (int) c5;

        b25 = $r10[$i35];

        $i36 = (int) b24;

        $i22 = $i36 << 2;

        $i37 = (int) b25;

        $i21 = $i37 >> 4;

        $i23 = $i22 | $i21;

        virtualinvoke r5.<java.io.OutputStream: void write(int)>($i23);

        return 1;

     label1:
        $b3 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte padding>;

        $i38 = (int) c2;

        $i39 = (int) $b3;

        if $i38 != $i39 goto label2;

        $r6 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i40 = (int) c4;

        b26 = $r6[$i40];

        $r7 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i41 = (int) c5;

        b27 = $r7[$i41];

        $r8 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i42 = (int) c0;

        b28 = $r8[$i42];

        $i43 = (int) b26;

        $i16 = $i43 << 2;

        $i44 = (int) b27;

        $i15 = $i44 >> 4;

        $i17 = $i16 | $i15;

        virtualinvoke r5.<java.io.OutputStream: void write(int)>($i17);

        $i45 = (int) b27;

        $i19 = $i45 << 4;

        $i46 = (int) b28;

        $i18 = $i46 >> 2;

        $i20 = $i19 | $i18;

        virtualinvoke r5.<java.io.OutputStream: void write(int)>($i20);

        return 2;

     label2:
        $r1 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i47 = (int) c4;

        b29 = $r1[$i47];

        $r2 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i48 = (int) c5;

        b30 = $r2[$i48];

        $r3 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i49 = (int) c0;

        b31 = $r3[$i49];

        $r4 = r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i50 = (int) c2;

        b6 = $r4[$i50];

        $i51 = (int) b29;

        $i8 = $i51 << 2;

        $i52 = (int) b30;

        $i7 = $i52 >> 4;

        $i9 = $i8 | $i7;

        virtualinvoke r5.<java.io.OutputStream: void write(int)>($i9);

        $i53 = (int) b30;

        $i11 = $i53 << 4;

        $i54 = (int) b31;

        $i10 = $i54 >> 2;

        $i12 = $i11 | $i10;

        virtualinvoke r5.<java.io.OutputStream: void write(int)>($i12);

        $i55 = (int) b31;

        $i13 = $i55 << 6;

        $i56 = (int) b6;

        $i14 = $i13 | $i56;

        virtualinvoke r5.<java.io.OutputStream: void write(int)>($i14);

        return 3;
    }

    private int nextI(java.lang.String, int, int)
    {
        org.bouncycastle.util.encoders.Base64Encoder r0;
        int i0, i2;
        char $c1;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

     label1:
        if i2 >= i0 goto label2;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $z0 = specialinvoke r0.<org.bouncycastle.util.encoders.Base64Encoder: boolean ignore(char)>($c1);

        if $z0 == 0 goto label2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return i2;
    }
}
