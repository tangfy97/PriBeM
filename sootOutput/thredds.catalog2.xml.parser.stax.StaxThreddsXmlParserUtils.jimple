class thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils extends java.lang.Object
{
    private static org.slf4j.Logger log;

    private void <init>()
    {
        thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils r0;

        r0 := @this: thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static boolean isEventStartOrEndElementWithMatchingName(javax.xml.stream.events.XMLEvent, javax.xml.namespace.QName)
    {
        java.lang.IllegalArgumentException $r4;
        javax.xml.stream.events.XMLEvent r0;
        javax.xml.stream.events.EndElement $r1;
        javax.xml.namespace.QName r2, r5;
        javax.xml.stream.events.StartElement $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: javax.xml.stream.events.XMLEvent;

        r2 := @parameter1: javax.xml.namespace.QName;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Event may not be null.");

        throw $r4;

     label1:
        $z0 = interfaceinvoke r0.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r0.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

        r5 = interfaceinvoke $r3.<javax.xml.stream.events.StartElement: javax.xml.namespace.QName getName()>();

        goto label4;

     label2:
        $z1 = interfaceinvoke r0.<javax.xml.stream.events.XMLEvent: boolean isEndElement()>();

        if $z1 == 0 goto label3;

        $r1 = interfaceinvoke r0.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.EndElement asEndElement()>();

        r5 = interfaceinvoke $r1.<javax.xml.stream.events.EndElement: javax.xml.namespace.QName getName()>();

        goto label4;

     label3:
        return 0;

     label4:
        $z2 = virtualinvoke r5.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    public static javax.xml.stream.events.StartElement readNextEventCheckItIsStartElementWithExpectedName(javax.xml.stream.XMLEventReader, javax.xml.namespace.QName) throws thredds.catalog2.xml.parser.ThreddsXmlParserException
    {
        java.lang.IllegalStateException $r7, $r14, $r15;
        thredds.catalog2.xml.parser.ThreddsXmlParserException $r22;
        javax.xml.stream.events.XMLEvent $r1, $r5;
        javax.xml.stream.XMLStreamException $r16;
        javax.xml.stream.events.StartElement $r2, $r6;
        java.lang.String $r10, $r13, $r21;
        boolean $z0, $z1, $z2;
        javax.xml.stream.XMLEventReader r0;
        org.slf4j.Logger $r18;
        thredds.catalog2.xml.parser.ThreddsXmlParserIssue $r23;
        thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity $r24;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r17, $r19, $r20;
        javax.xml.namespace.QName $r3, r4;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        r4 := @parameter1: javax.xml.namespace.QName;

        $z0 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("XMLEventReader has no further events.");

        throw $r15;

     label1:
        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $z1 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z1 != 0 goto label2;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Next event must be StartElement.");

        throw $r14;

     label2:
        $r2 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

        $r3 = interfaceinvoke $r2.<javax.xml.stream.events.StartElement: javax.xml.namespace.QName getName()>();

        $z2 = virtualinvoke $r3.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>(r4);

        if $z2 != 0 goto label3;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Start element must be an \'");

        $r10 = virtualinvoke r4.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' element.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label3:
        $r5 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        $r6 = interfaceinvoke $r5.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        $r18 = <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: org.slf4j.Logger log>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readNextEventCheckItIsStartElementWithExpectedName(): ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem reading XML stream.");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r21, $r16);

        $r22 = new thredds.catalog2.xml.parser.ThreddsXmlParserException;

        $r23 = new thredds.catalog2.xml.parser.ThreddsXmlParserIssue;

        $r24 = <thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity: thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity FATAL>;

        specialinvoke $r23.<thredds.catalog2.xml.parser.ThreddsXmlParserIssue: void <init>(thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity,java.lang.String,thredds.catalog2.builder.ThreddsBuilder,java.lang.Exception)>($r24, "Problem reading XML stream.", null, $r16);

        specialinvoke $r22.<thredds.catalog2.xml.parser.ThreddsXmlParserException: void <init>(thredds.catalog2.xml.parser.ThreddsXmlParserIssue)>($r23);

        throw $r22;

     label6:
        return $r6;

        catch javax.xml.stream.XMLStreamException from label1 to label4 with label5;
    }

    public static void readNextEventCheckItIsEndElementWithExpectedName(javax.xml.stream.XMLEventReader, javax.xml.namespace.QName) throws thredds.catalog2.xml.parser.ThreddsXmlParserException
    {
        java.lang.IllegalStateException $r5, $r12, $r13;
        thredds.catalog2.xml.parser.ThreddsXmlParserException $r20;
        javax.xml.stream.events.XMLEvent $r1;
        javax.xml.stream.XMLStreamException $r14;
        javax.xml.stream.events.EndElement $r2;
        java.lang.String $r8, $r11, $r19;
        boolean $z0, $z1, $z2;
        javax.xml.stream.XMLEventReader r0;
        org.slf4j.Logger $r16;
        thredds.catalog2.xml.parser.ThreddsXmlParserIssue $r21;
        thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity $r22;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r15, $r17, $r18;
        javax.xml.namespace.QName $r3, r4;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        r4 := @parameter1: javax.xml.namespace.QName;

        $z0 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("XMLEventReader has no further events.");

        throw $r13;

     label1:
        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $z1 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isEndElement()>();

        if $z1 != 0 goto label2;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Next event must be EndElement.");

        throw $r12;

     label2:
        $r2 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.EndElement asEndElement()>();

        $r3 = interfaceinvoke $r2.<javax.xml.stream.events.EndElement: javax.xml.namespace.QName getName()>();

        $z2 = virtualinvoke $r3.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>(r4);

        if $z2 != 0 goto label3;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("End element must be an \'");

        $r8 = virtualinvoke r4.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' element.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label3:
        interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

        $r16 = <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: org.slf4j.Logger log>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readNextEventCheckItIsEndElementWithExpectedName(): ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem reading XML stream.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r19, $r14);

        $r20 = new thredds.catalog2.xml.parser.ThreddsXmlParserException;

        $r21 = new thredds.catalog2.xml.parser.ThreddsXmlParserIssue;

        $r22 = <thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity: thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity FATAL>;

        specialinvoke $r21.<thredds.catalog2.xml.parser.ThreddsXmlParserIssue: void <init>(thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity,java.lang.String,thredds.catalog2.builder.ThreddsBuilder,java.lang.Exception)>($r22, "Problem reading XML stream.", null, $r14);

        specialinvoke $r20.<thredds.catalog2.xml.parser.ThreddsXmlParserException: void <init>(thredds.catalog2.xml.parser.ThreddsXmlParserIssue)>($r21);

        throw $r20;

     label6:
        return;

        catch javax.xml.stream.XMLStreamException from label1 to label4 with label5;
    }

    static java.lang.String getLocationInfo(javax.xml.stream.XMLEventReader)
    {
        int $i0, $i1, $i2;
        java.lang.String $r4, $r13;
        javax.xml.stream.XMLEventReader r0;
        javax.xml.stream.Location $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        $r1 = staticinvoke <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: javax.xml.stream.Location getLocation(javax.xml.stream.XMLEventReader)>(r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Location: SysId[");

        $r4 = interfaceinvoke $r1.<javax.xml.stream.Location: java.lang.String getSystemId()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] line[");

        $i0 = interfaceinvoke $r1.<javax.xml.stream.Location: int getLineNumber()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] column[");

        $i1 = interfaceinvoke $r1.<javax.xml.stream.Location: int getColumnNumber()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] charOffset[");

        $i2 = interfaceinvoke $r1.<javax.xml.stream.Location: int getCharacterOffset()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    static javax.xml.stream.Location getLocation(javax.xml.stream.XMLEventReader)
    {
        javax.xml.stream.XMLEventReader r0;
        java.lang.IllegalArgumentException $r3, $r4, $r6;
        javax.xml.stream.events.XMLEvent $r1;
        javax.xml.stream.Location $r2;
        javax.xml.stream.XMLStreamException $r5;
        boolean $z0;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("XMLEventReader may not be null.");

        throw $r4;

     label1:
        $z0 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("XMLEventReader must have next event.");

        throw $r3;

     label2:
        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Could not peek() next event.");

        throw $r6;

     label5:
        $r2 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: javax.xml.stream.Location getLocation()>();

        return $r2;

        catch javax.xml.stream.XMLStreamException from label2 to label3 with label4;
    }

    static thredds.catalog2.xml.parser.ThreddsXmlParserIssue createIssueForException(java.lang.String, javax.xml.stream.XMLEventReader, java.lang.Exception) throws thredds.catalog2.xml.parser.ThreddsXmlParserException
    {
        java.lang.String $r1, r3, $r9, $r11, $r16;
        javax.xml.stream.XMLEventReader r0;
        org.slf4j.Logger $r13;
        thredds.catalog2.xml.parser.ThreddsXmlParserIssue $r17;
        java.lang.Exception r8;
        thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity $r18;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7, $r10, $r12, $r14, $r15;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: javax.xml.stream.XMLEventReader;

        r8 := @parameter2: java.lang.Exception;

        $r1 = staticinvoke <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: java.lang.String getLocationInfo(javax.xml.stream.XMLEventReader)>(r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\n    ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r9 = virtualinvoke r8.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: org.slf4j.Logger log>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createIssueForException(): ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String)>($r16);

        $r17 = new thredds.catalog2.xml.parser.ThreddsXmlParserIssue;

        $r18 = <thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity: thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity WARNING>;

        specialinvoke $r17.<thredds.catalog2.xml.parser.ThreddsXmlParserIssue: void <init>(thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity,java.lang.String,thredds.catalog2.builder.ThreddsBuilder,java.lang.Exception)>($r18, $r11, null, r8);

        return $r17;
    }

    static thredds.catalog2.xml.parser.ThreddsXmlParserIssue createIssueForUnexpectedElement(java.lang.String, javax.xml.stream.XMLEventReader) throws thredds.catalog2.xml.parser.ThreddsXmlParserException
    {
        java.lang.String $r1, $r2, r4, $r10, $r15;
        javax.xml.stream.XMLEventReader r0;
        org.slf4j.Logger $r12;
        thredds.catalog2.xml.parser.ThreddsXmlParserIssue $r16;
        thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity $r17;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r8, $r9, $r11, $r13, $r14;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: javax.xml.stream.XMLEventReader;

        $r1 = staticinvoke <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: java.lang.String getLocationInfo(javax.xml.stream.XMLEventReader)>(r0);

        $r2 = staticinvoke <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: java.lang.String consumeElementAndConvertToXmlString(javax.xml.stream.XMLEventReader)>(r0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\n    ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: org.slf4j.Logger log>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createIssueForUnexpectedElement(): ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String)>($r15);

        $r16 = new thredds.catalog2.xml.parser.ThreddsXmlParserIssue;

        $r17 = <thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity: thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity WARNING>;

        specialinvoke $r16.<thredds.catalog2.xml.parser.ThreddsXmlParserIssue: void <init>(thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity,java.lang.String,thredds.catalog2.builder.ThreddsBuilder,java.lang.Exception)>($r17, $r10, null, null);

        return $r16;
    }

    static thredds.catalog2.xml.parser.ThreddsXmlParserIssue createIssueForUnexpectedEvent(java.lang.String, thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity, javax.xml.stream.XMLEventReader, javax.xml.stream.events.XMLEvent) throws thredds.catalog2.xml.parser.ThreddsXmlParserException
    {
        javax.xml.stream.events.XMLEvent r19;
        java.lang.String $r1, r3, $r7, $r12, $r17;
        javax.xml.stream.XMLEventReader r0;
        org.slf4j.Logger $r14;
        thredds.catalog2.xml.parser.ThreddsXmlParserIssue $r18;
        thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity r6;
        java.lang.StringBuilder $r2, $r4, $r5, $r8, $r9, $r10, $r11, $r13, $r15, $r16;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity;

        r0 := @parameter2: javax.xml.stream.XMLEventReader;

        r19 := @parameter3: javax.xml.stream.events.XMLEvent;

        $r1 = staticinvoke <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: java.lang.String getLocationInfo(javax.xml.stream.XMLEventReader)>(r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        $r7 = virtualinvoke r6.<thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:\n    ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\n");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: org.slf4j.Logger log>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createIssueForUnexpectedElement(): ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String)>($r17);

        $r18 = new thredds.catalog2.xml.parser.ThreddsXmlParserIssue;

        specialinvoke $r18.<thredds.catalog2.xml.parser.ThreddsXmlParserIssue: void <init>(thredds.catalog2.xml.parser.ThreddsXmlParserIssue$Severity,java.lang.String,thredds.catalog2.builder.ThreddsBuilder,java.lang.Exception)>(r6, $r12, null, null);

        return $r18;
    }

    static java.lang.String consumeElementAndConvertToXmlString(javax.xml.stream.XMLEventReader) throws thredds.catalog2.xml.parser.ThreddsXmlParserException
    {
        thredds.catalog2.xml.parser.ThreddsXmlParserException $r25, $r35;
        javax.xml.stream.events.XMLEvent $r3, $r6;
        javax.xml.stream.XMLStreamException $r34;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r17, $r18, $r20, $r22, $r23, $r26, $r27, $r28, $r36, $r37, $r38, $r39, $r41;
        javax.xml.namespace.QName $r8, r10, $r31;
        java.util.ArrayList $r4;
        int $i0, $i1, $i2, $i3, $i4;
        javax.xml.stream.events.EndElement $r7;
        java.lang.String $r5, $r13, $r16, $r19, $r24, $r29, $r40, $r42, $r44, r45;
        javax.xml.stream.events.StartElement $r30;
        javax.xml.stream.XMLEventReader r0;
        org.slf4j.Logger $r21;
        java.io.StringWriter $r1, $r2;
        java.lang.IllegalArgumentException $r32, $r33;
        javax.xml.stream.Location r43;
        java.lang.Object $r9;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        if r0 != null goto label01;

        $r33 = new java.lang.IllegalArgumentException;

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("XMLEventReader may not be null.");

        throw $r33;

     label01:
        $r1 = new java.io.StringWriter;

        specialinvoke $r1.<java.io.StringWriter: void <init>()>();

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

        r43 = null;

     label02:
        $r3 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $z0 = interfaceinvoke $r3.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z0 != 0 goto label03;

        $r32 = new java.lang.IllegalArgumentException;

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Next event in reader must be start element.");

        throw $r32;

     label03:
        r43 = interfaceinvoke $r3.<javax.xml.stream.events.XMLEvent: javax.xml.stream.Location getLocation()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label04:
        $z1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r6 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        $z2 = interfaceinvoke $r6.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z2 == 0 goto label05;

        $r30 = interfaceinvoke $r6.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

        $r31 = interfaceinvoke $r30.<javax.xml.stream.events.StartElement: javax.xml.namespace.QName getName()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r31);

        goto label07;

     label05:
        $z3 = interfaceinvoke $r6.<javax.xml.stream.events.XMLEvent: boolean isEndElement()>();

        if $z3 == 0 goto label07;

        $r7 = interfaceinvoke $r6.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.EndElement asEndElement()>();

        $r8 = interfaceinvoke $r7.<javax.xml.stream.events.EndElement: javax.xml.namespace.QName getName()>();

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r9 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2);

        r10 = (javax.xml.namespace.QName) $r9;

        $z4 = virtualinvoke r10.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r8);

        if $z4 == 0 goto label06;

        $i3 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>($i4);

        goto label07;

     label06:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Badly formed XML? End element [");

        $r13 = virtualinvoke $r8.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] doesn\'t match expected start element [");

        $r16 = virtualinvoke r10.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: org.slf4j.Logger log>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("consumeElementAndConvertToXmlString(): ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.slf4j.Logger: void error(java.lang.String)>($r24);

        $r25 = new thredds.catalog2.xml.parser.ThreddsXmlParserException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FATAL? ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<thredds.catalog2.xml.parser.ThreddsXmlParserException: void <init>(java.lang.String)>($r29);

        throw $r25;

     label07:
        interfaceinvoke $r6.<javax.xml.stream.events.XMLEvent: void writeAsEncodedUnicode(java.io.Writer)>($r1);

        $r44 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.StringWriter: void write(java.lang.String)>($r44);

        $z5 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z5 == 0 goto label04;

        goto label08;

     label08:
        goto label10;

     label09:
        $r34 := @caughtexception;

        $r35 = new thredds.catalog2.xml.parser.ThreddsXmlParserException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem reading unknown element [");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r43);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Underlying cause: ");

        $r40 = virtualinvoke $r34.<javax.xml.stream.XMLStreamException: java.lang.String getMessage()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<thredds.catalog2.xml.parser.ThreddsXmlParserException: void <init>(java.lang.String,java.lang.Throwable)>($r42, $r34);

        throw $r35;

     label10:
        $r5 = virtualinvoke $r1.<java.io.StringWriter: java.lang.String toString()>();

        r45 = $r5;

        if $r5 == null goto label11;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label12;

     label11:
        r45 = virtualinvoke $r2.<java.io.StringWriter: java.lang.String toString()>();

     label12:
        return r45;

        catch javax.xml.stream.XMLStreamException from label02 to label08 with label09;
    }

    static java.lang.String getCharacterContent(javax.xml.stream.XMLEventReader, javax.xml.namespace.QName) throws thredds.catalog2.xml.parser.ThreddsXmlParserException
    {
        java.lang.IllegalStateException $r6, $r19, $r38;
        thredds.catalog2.xml.parser.ThreddsXmlParserException $r3, $r42;
        javax.xml.stream.events.XMLEvent $r4, $r35;
        javax.xml.stream.XMLStreamException $r41;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r2, $r7, $r8, $r12, $r13, $r14, $r15, $r20, $r21, $r25, $r26, $r27, $r28, $r30, $r31, $r43, $r44, $r45, $r46, $r48;
        javax.xml.namespace.QName r1, $r10, $r18, $r23;
        javax.xml.stream.events.EndElement $r17, $r22;
        javax.xml.stream.events.StartElement $r9;
        java.lang.String $r11, $r16, $r24, $r29, $r32, $r33, $r34, $r37, $r47, $r49;
        javax.xml.stream.XMLEventReader r0;
        java.lang.IllegalArgumentException $r39, $r40;
        javax.xml.stream.events.Characters $r36;
        javax.xml.stream.Location $r5, r50;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        r1 := @parameter1: javax.xml.namespace.QName;

        if r0 != null goto label01;

        $r40 = new java.lang.IllegalArgumentException;

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("XMLEventReader may not be null.");

        throw $r40;

     label01:
        if r1 != null goto label02;

        $r39 = new java.lang.IllegalArgumentException;

        specialinvoke $r39.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Containing element name may not be null.");

        throw $r39;

     label02:
        $z0 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: boolean hasNext()>();

        if $z0 != 0 goto label03;

        $r38 = new java.lang.IllegalStateException;

        specialinvoke $r38.<java.lang.IllegalStateException: void <init>(java.lang.String)>("XMLEventReader must have next.");

        throw $r38;

     label03:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r50 = null;

     label04:
        $z1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r4 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $r5 = interfaceinvoke $r4.<javax.xml.stream.events.XMLEvent: javax.xml.stream.Location getLocation()>();

        r50 = $r5;

        $z2 = interfaceinvoke $r4.<javax.xml.stream.events.XMLEvent: boolean isCharacters()>();

        if $z2 == 0 goto label05;

        $r35 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        $r36 = interfaceinvoke $r35.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.Characters asCharacters()>();

        $r37 = interfaceinvoke $r36.<javax.xml.stream.events.Characters: java.lang.String getData()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        goto label10;

     label05:
        $z3 = interfaceinvoke $r4.<javax.xml.stream.events.XMLEvent: boolean isEndElement()>();

        if $z3 == 0 goto label08;

        $r17 = interfaceinvoke $r4.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.EndElement asEndElement()>();

        $r18 = interfaceinvoke $r17.<javax.xml.stream.events.EndElement: javax.xml.namespace.QName getName()>();

        $z5 = virtualinvoke $r18.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>(r1);

        if $z5 == 0 goto label07;

        $r33 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r34 = virtualinvoke $r33.<java.lang.String: java.lang.String trim()>();

     label06:
        return $r34;

     label07:
        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Badly formed XML? Unexpected end element [");

        $r22 = interfaceinvoke $r4.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.EndElement asEndElement()>();

        $r23 = interfaceinvoke $r22.<javax.xml.stream.events.EndElement: javax.xml.namespace.QName getName()>();

        $r24 = virtualinvoke $r23.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("][");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] doesn\'t match expected start element [");

        $r29 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r32);

        throw $r19;

     label08:
        $z4 = interfaceinvoke $r4.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z4 == 0 goto label09;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Badly formed XML? Unexpected start element [");

        $r9 = interfaceinvoke $r4.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

        $r10 = interfaceinvoke $r9.<javax.xml.stream.events.StartElement: javax.xml.namespace.QName getName()>();

        $r11 = virtualinvoke $r10.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("][");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] when characters expected.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r6;

     label09:
        interfaceinvoke r0.<javax.xml.stream.XMLEventReader: java.lang.Object next()>();

     label10:
        goto label04;

     label11:
        goto label13;

     label12:
        $r41 := @caughtexception;

        $r42 = new thredds.catalog2.xml.parser.ThreddsXmlParserException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem reading unknown event [");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r50);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Underlying cause: ");

        $r47 = virtualinvoke $r41.<javax.xml.stream.XMLStreamException: java.lang.String getMessage()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<thredds.catalog2.xml.parser.ThreddsXmlParserException: void <init>(java.lang.String,java.lang.Throwable)>($r49, $r41);

        throw $r42;

     label13:
        $r3 = new thredds.catalog2.xml.parser.ThreddsXmlParserException;

        specialinvoke $r3.<thredds.catalog2.xml.parser.ThreddsXmlParserException: void <init>(java.lang.String)>("Unexpected end of XMLEventReader.");

        throw $r3;

        catch javax.xml.stream.XMLStreamException from label04 to label06 with label12;
        catch javax.xml.stream.XMLStreamException from label07 to label11 with label12;
    }

    static javax.xml.transform.Source getSourceFromUri(java.net.URI) throws thredds.catalog2.xml.parser.ThreddsXmlParserException
    {
        javax.xml.transform.stream.StreamSource $r3;
        thredds.util.HttpUriResolver $r1;
        java.io.IOException $r5;
        thredds.catalog2.xml.parser.ThreddsXmlParserException $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;
        java.net.URI r0;
        java.lang.String $r4, $r9, $r12;
        java.io.InputStream $r2;

        r0 := @parameter0: java.net.URI;

        $r1 = staticinvoke <thredds.util.HttpUriResolverFactory: thredds.util.HttpUriResolver getDefaultHttpUriResolver(java.net.URI)>(r0);

     label1:
        virtualinvoke $r1.<thredds.util.HttpUriResolver: void makeRequest()>();

        $r2 = virtualinvoke $r1.<thredds.util.HttpUriResolver: java.io.InputStream getResponseBodyAsInputStream()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new thredds.catalog2.xml.parser.ThreddsXmlParserException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem accessing resource [");

        $r9 = virtualinvoke r0.<java.net.URI: java.lang.String toString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<thredds.catalog2.xml.parser.ThreddsXmlParserException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r5);

        throw $r6;

     label4:
        $r3 = new javax.xml.transform.stream.StreamSource;

        $r4 = virtualinvoke r0.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r3.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream,java.lang.String)>($r2, $r4);

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static javax.xml.transform.Source getSourceFromFile(java.io.File, java.net.URI) throws thredds.catalog2.xml.parser.ThreddsXmlParserException
    {
        javax.xml.transform.stream.StreamSource $r3, $r5, r20;
        thredds.catalog2.xml.parser.ThreddsXmlParserException $r19;
        java.net.URI r1;
        java.lang.String $r4, $r10, $r13, $r18;
        org.slf4j.Logger $r15;
        java.io.FileInputStream $r2;
        java.lang.IllegalArgumentException $r6;
        java.io.File r0;
        java.io.FileNotFoundException $r7;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r14, $r16, $r17;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.net.URI;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File may not be null.");

        throw $r6;

     label1:
        if r1 != null goto label2;

        $r5 = new javax.xml.transform.stream.StreamSource;

        specialinvoke $r5.<javax.xml.transform.stream.StreamSource: void <init>(java.io.File)>(r0);

        r20 = $r5;

        goto label6;

     label2:
        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find file [");

        $r10 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: org.slf4j.Logger log>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parseIntoBuilder(): ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r18, $r7);

        $r19 = new thredds.catalog2.xml.parser.ThreddsXmlParserException;

        specialinvoke $r19.<thredds.catalog2.xml.parser.ThreddsXmlParserException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r7);

        throw $r19;

     label5:
        $r3 = new javax.xml.transform.stream.StreamSource;

        $r4 = virtualinvoke r1.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r3.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream,java.lang.String)>($r2, $r4);

        r20 = $r3;

     label6:
        return r20;

        catch java.io.FileNotFoundException from label2 to label3 with label4;
    }

    static javax.xml.stream.XMLEventReader getEventReaderFromSource(javax.xml.transform.Source, javax.xml.stream.XMLInputFactory) throws thredds.catalog2.xml.parser.ThreddsXmlParserException
    {
        javax.xml.stream.XMLInputFactory r0;
        javax.xml.transform.Source r1;
        thredds.catalog2.xml.parser.ThreddsXmlParserException $r15;
        javax.xml.stream.XMLStreamException $r3;
        java.lang.String $r6, $r9, $r14;
        javax.xml.stream.XMLEventReader $r2;
        org.slf4j.Logger $r11;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r10, $r12, $r13;

        r1 := @parameter0: javax.xml.transform.Source;

        r0 := @parameter1: javax.xml.stream.XMLInputFactory;

     label1:
        $r2 = virtualinvoke r0.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLEventReader createXMLEventReader(javax.xml.transform.Source)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems reading stream [");

        $r6 = interfaceinvoke r1.<javax.xml.transform.Source: java.lang.String getSystemId()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: org.slf4j.Logger log>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getEventReaderFromSource(): ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r14, $r3);

        $r15 = new thredds.catalog2.xml.parser.ThreddsXmlParserException;

        specialinvoke $r15.<thredds.catalog2.xml.parser.ThreddsXmlParserException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r3);

        throw $r15;

     label4:
        return $r2;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lthredds/catalog2/xml/parser/stax/StaxThreddsXmlParserUtils;");

        <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: org.slf4j.Logger log> = $r0;

        return;
    }
}
