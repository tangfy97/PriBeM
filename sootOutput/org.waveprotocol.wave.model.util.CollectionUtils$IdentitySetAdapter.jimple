class org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter extends java.lang.Object implements org.waveprotocol.wave.model.util.IdentitySet
{
    private final java.util.Map backend;

    private void <init>()
    {
        java.util.IdentityHashMap $r1;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.IdentityHashMap;

        specialinvoke $r1.<java.util.IdentityHashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter: java.util.Map backend> = $r1;

        return;
    }

    public void add(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r3;
        java.util.Map $r2;
        java.lang.Object r0;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "IdentitySet cannot contain null values");

        $z0 = r0 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.Integer;

        if $z1 != 0 goto label1;

        $z2 = r0 instanceof java.lang.Double;

        if $z2 != 0 goto label1;

        $z3 = r0 instanceof java.lang.Long;

        if $z3 != 0 goto label1;

        $z4 = r0 instanceof java.lang.Boolean;

        if $z4 == 0 goto label2;

     label1:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Should NOT use boxed primitives with IdentitySet");

        throw $r3;

     label2:
        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter: java.util.Map backend>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r0);

        return;
    }

    public void clear()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter: java.util.Map backend>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object r0;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "IdentitySet cannot contain null values");

        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter: java.util.Map backend>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    public void remove(java.lang.Object)
    {
        java.lang.Object r0;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter r1;
        java.util.Map $r2;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "IdentitySet cannot contain null values");

        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter: java.util.Map backend>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        return;
    }

    public boolean isEmpty()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter: java.util.Map backend>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public java.lang.Object someElement()
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter: java.util.Map backend>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        return $r4;

     label1:
        return null;
    }

    public void each(org.waveprotocol.wave.model.util.ReadableIdentitySet$Proc)
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.util.ReadableIdentitySet$Proc r5;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter;

        r5 := @parameter0: org.waveprotocol.wave.model.util.ReadableIdentitySet$Proc;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter: java.util.Map backend>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r5.<org.waveprotocol.wave.model.util.ReadableIdentitySet$Proc: void apply(java.lang.Object)>($r4);

        goto label1;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter: java.util.Map backend>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public int countEntries()
    {
        int $i0;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter: java.util.Map backend>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    void <init>(org.waveprotocol.wave.model.util.CollectionUtils$1)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$1 r1;
        org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter;

        r1 := @parameter0: org.waveprotocol.wave.model.util.CollectionUtils$1;

        specialinvoke r0.<org.waveprotocol.wave.model.util.CollectionUtils$IdentitySetAdapter: void <init>()>();

        return;
    }
}
