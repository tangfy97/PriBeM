class com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource extends java.lang.Object implements com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource
{
    com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound;
    com.hp.hpl.jena.graph.Node r;
    java.util.Set occursIn;
    int[] hash;
    int boundHash;
    java.util.Set friends;
    int myHash;
    final com.hp.hpl.jena.graph.impl.GraphMatcher this$0;

    public java.lang.String toString()
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource r0, $r3, $r7;
        com.hp.hpl.jena.graph.Node $r1, $r8;
        java.lang.StringBuilder $r4, $r5, $r6, $r10, $r11;
        java.lang.String $r2, $r9, r12;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.Node r>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String toString()>();

        r12 = $r2;

        $r3 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        if $r3 == null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r7 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        $r8 = $r7.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.Node r>;

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Node: java.lang.String toString()>();

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r12;
    }

    void <init>(com.hp.hpl.jena.graph.impl.GraphMatcher, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r1;
        int[] $r3;
        java.util.Set $r2, $r4, $r5;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource r0;
        com.hp.hpl.jena.graph.Node r6;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        r1 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher;

        r6 := @parameter1: com.hp.hpl.jena.graph.Node;

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Set createHashedSet()>();

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: java.util.Set occursIn> = $r2;

        $r3 = newarray (int)[3];

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: int[] hash> = $r3;

        $r4 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Set createHashedSet()>();

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: java.util.Set friends> = $r4;

        $r5 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Set access$600(com.hp.hpl.jena.graph.impl.GraphMatcher)>(r1);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r0);

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.Node r> = r6;

        return;
    }

    public int myHashCodeFromStatement()
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource r0, $r1;
        com.hp.hpl.jena.graph.impl.GraphMatcher $r2, $r3, $r4;
        int[] $r5;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        if $r1 == null goto label1;

        $i4 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: int boundHash>;

        return $i4;

     label1:
        $r2 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher this$0>;

        $i0 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: int access$700(com.hp.hpl.jena.graph.impl.GraphMatcher)>($r2);

        if $i0 != 0 goto label2;

        return -889275714;

     label2:
        $r3 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher this$0>;

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void access$800(com.hp.hpl.jena.graph.impl.GraphMatcher,int)>($r3, 3);

        $r5 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: int[] hash>;

        $r4 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher this$0>;

        $i1 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: int access$700(com.hp.hpl.jena.graph.impl.GraphMatcher)>($r4);

        $i2 = $i1 - 1;

        $i3 = $r5[$i2];

        return $i3;
    }

    int myHashCode()
    {
        int[] $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        java.util.Iterator $r4;
        java.util.Set $r3;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource r0, $r2;
        com.hp.hpl.jena.graph.impl.GraphMatcher $r1, $r5;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement r8;
        java.lang.Object $r7;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher this$0>;

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void access$800(com.hp.hpl.jena.graph.impl.GraphMatcher,int)>($r1, 1);

        $r2 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        if $r2 == null goto label1;

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void access$400()>();

     label1:
        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: int myHash> = 0;

        $r3 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: java.util.Set occursIn>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement) $r7;

        $i3 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: int myHash>;

        $i4 = virtualinvoke r8.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement: int myHashCode(com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource)>(r0);

        $i5 = $i3 + $i4;

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: int myHash> = $i5;

        goto label2;

     label3:
        $r6 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: int[] hash>;

        $r5 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher this$0>;

        $i0 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: int access$700(com.hp.hpl.jena.graph.impl.GraphMatcher)>($r5);

        $i1 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: int myHash>;

        $r6[$i0] = $i1;

        $i2 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: int myHash>;

        return $i2;
    }

    void bind(com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource)
    {
        java.util.Random $r20;
        com.hp.hpl.jena.graph.Node $r10, $r14;
        com.hp.hpl.jena.rdf.model.AnonId $r11, $r15;
        int $i0;
        java.lang.String $r18;
        boolean $z0;
        java.util.Set $r3, $r5;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource r0, r1, $r6, $r7, $r8, $r19;
        com.hp.hpl.jena.graph.impl.GraphMatcher $r2, $r4;
        java.lang.StringBuilder $r9, $r12, $r13, $r16, $r17;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        r1 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound> = r1;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher this$0>;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Set access$600(com.hp.hpl.jena.graph.impl.GraphMatcher)>($r2);

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void access$400()>();

     label1:
        $r4 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher this$0>;

        $r5 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Set access$900(com.hp.hpl.jena.graph.impl.GraphMatcher)>($r4);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r0);

        $r6 = r1.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        if $r6 != null goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.Node r>;

        $r11 = virtualinvoke $r10.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.rdf.model.AnonId getBlankNodeId()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r14 = r1.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.Node r>;

        $r15 = virtualinvoke $r14.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.rdf.model.AnonId getBlankNodeId()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void access$1000(boolean,java.lang.String)>(1, $r18);

        virtualinvoke r1.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: void bind(com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource)>(r0);

        $r19 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        $r20 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Random access$1100()>();

        $i0 = virtualinvoke $r20.<java.util.Random: int nextInt()>();

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: int boundHash> = $i0;

        $r19.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: int boundHash> = $i0;

     label2:
        $r7 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        $r8 = $r7.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        if $r8 == r0 goto label3;

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void access$400()>();

     label3:
        return;
    }

    void unbind()
    {
        com.hp.hpl.jena.graph.Node $r8, $r12;
        com.hp.hpl.jena.rdf.model.AnonId $r9, $r13;
        java.lang.String $r16;
        boolean $z0;
        java.util.Set $r3, $r5;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource r0, r1, $r6, $r17;
        com.hp.hpl.jena.graph.impl.GraphMatcher $r2, $r4, $r18;
        java.lang.StringBuilder $r7, $r10, $r11, $r14, $r15;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        r1 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound> = null;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher this$0>;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Set access$900(com.hp.hpl.jena.graph.impl.GraphMatcher)>($r2);

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void access$400()>();

     label1:
        $r4 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher this$0>;

        $r5 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Set access$600(com.hp.hpl.jena.graph.impl.GraphMatcher)>($r4);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r0);

        $r6 = r1.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        if $r6 == null goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.Node r>;

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.rdf.model.AnonId getBlankNodeId()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!=");

        $r12 = r1.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.Node r>;

        $r13 = virtualinvoke $r12.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.rdf.model.AnonId getBlankNodeId()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void access$1000(boolean,java.lang.String)>(0, $r16);

        $r17 = r1.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        if $r17 == r0 goto label2;

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void access$400()>();

     label2:
        virtualinvoke r1.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: void unbind()>();

     label3:
        $r18 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher this$0>;

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void access$1200(com.hp.hpl.jena.graph.impl.GraphMatcher,int)>($r18, 4);

        return;
    }

    boolean checkBinding(com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource)
    {
        java.util.Set $r1, $r3, $r4, $r5;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource r0, r2;
        int $i0, $i1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        r2 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: java.util.Set occursIn>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $r3 = r2.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: java.util.Set occursIn>;

        $i1 = interfaceinvoke $r3.<java.util.Set: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: java.util.Set wrapStatements()>();

        $r5 = specialinvoke r2.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: java.util.Set wrapStatements()>();

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean removeAll(java.util.Collection)>($r5);

        if $z0 == 0 goto label2;

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private java.util.Set wrapStatements()
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource$StatementWrapper $r7;
        java.util.Set $r2, $r3;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource r0;
        com.hp.hpl.jena.graph.impl.GraphMatcher $r1, $r8;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement $r6;
        int $i0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher this$0>;

        $i0 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: int access$1300(com.hp.hpl.jena.graph.impl.GraphMatcher)>($r1);

        if $i0 != 4 goto label1;

        $r8 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher this$0>;

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: int access$702(com.hp.hpl.jena.graph.impl.GraphMatcher,int)>($r8, 0);

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Set createHashedSet()>();

        $r3 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: java.util.Set occursIn>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement) $r5;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource$StatementWrapper wrapStatement(com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement)>($r6);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        return $r2;
    }

    public boolean mightBeEqual(com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource r1, r2, $r3, $r4, $r5;
        com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource r0;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource;

        if r0 == null goto label4;

        $z0 = r0 instanceof com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        if $z0 == 0 goto label4;

        r1 = (com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource) r0;

        if r1 == r2 goto label1;

        $r3 = r2.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        if $r3 == r1 goto label1;

        $r4 = r2.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        if $r4 != null goto label2;

        $r5 = r1.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        if $r5 != null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        return 0;
    }

    com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource$StatementWrapper wrapStatement(com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement r2;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource r1;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource$StatementWrapper $r0;

        r1 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        r2 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement;

        $r0 = new com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource$StatementWrapper;

        specialinvoke $r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource$StatementWrapper: void <init>(com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource,com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement)>(r1, r2);

        return $r0;
    }
}
