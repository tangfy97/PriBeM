public final enum class org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType extends java.lang.Enum
{
    public static final enum org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType KEYNOTE;
    public static final enum org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType NUMBERS;
    public static final enum org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType PAGES;
    public static final enum org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType ENCRYPTED;
    private final java.lang.String namespace;
    private final java.lang.String part;
    private final org.apache.tika.mime.MediaType type;
    private static final org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType[] $VALUES;

    public static org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType[] values()
    {
        java.lang.Object $r1;
        org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType[] $r0, $r2;

        $r0 = <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType[]) $r1;

        return $r2;
    }

    public static org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType valueOf(java.lang.String)
    {
        org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType $r2;
        java.lang.String r0;
        java.lang.Enum $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/tika/parser/iwork/IWorkPackageParser$IWORKDocumentType;", r0);

        $r2 = (org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, java.lang.String, java.lang.String, org.apache.tika.mime.MediaType)
    {
        org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType r0;
        int i0;
        java.lang.String r1, r2, r3;
        org.apache.tika.mime.MediaType r4;

        r0 := @this: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: org.apache.tika.mime.MediaType;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: java.lang.String namespace> = r2;

        r0.<org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: java.lang.String part> = r3;

        r0.<org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.mime.MediaType type> = r4;

        return;
    }

    public java.lang.String getNamespace()
    {
        org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType r0;
        java.lang.String $r1;

        r0 := @this: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType;

        $r1 = r0.<org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: java.lang.String namespace>;

        return $r1;
    }

    public java.lang.String getPart()
    {
        org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType r0;
        java.lang.String $r1;

        r0 := @this: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType;

        $r1 = r0.<org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: java.lang.String part>;

        return $r1;
    }

    public org.apache.tika.mime.MediaType getType()
    {
        org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType r0;
        org.apache.tika.mime.MediaType $r1;

        r0 := @this: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType;

        $r1 = r0.<org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.mime.MediaType type>;

        return $r1;
    }

    public static org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType detectType(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile)
    {
        java.lang.Throwable $r5;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r0;
        org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType $r3;
        java.io.IOException $r4;
        org.apache.commons.compress.archivers.zip.ZipFile r1;
        java.io.InputStream $r2;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        r1 := @parameter1: org.apache.commons.compress.archivers.zip.ZipFile;

     label1:
        if r0 != null goto label3;

     label2:
        return null;

     label3:
        $r2 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipFile: java.io.InputStream getInputStream(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r0);

     label4:
        $r3 = staticinvoke <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType detectType(java.io.InputStream)>($r2);

     label5:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label6:
        return $r3;

     label7:
        $r5 := @caughtexception;

     label8:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

        throw $r5;

     label9:
        $r4 := @caughtexception;

        return null;

        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
        catch java.io.IOException from label1 to label2 with label9;
        catch java.io.IOException from label3 to label6 with label9;
        catch java.io.IOException from label7 to label9 with label9;
    }

    public static org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType detectType(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipArchiveInputStream)
    {
        org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType $r2;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r0;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r1;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        r1 := @parameter1: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType detectType(java.io.InputStream)>(r1);

        return $r2;
    }

    private static org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType detectType(java.io.InputStream)
    {
        org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType[] $r5;
        int i0, i1;
        org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType r6, $r11;
        java.lang.String $r3, $r4, $r7, $r8;
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException $r10;
        boolean $z0, $z1;
        java.lang.Exception $r9;
        org.apache.tika.detect.XmlRootExtractor $r0;
        javax.xml.namespace.QName $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new org.apache.tika.detect.XmlRootExtractor;

        specialinvoke $r0.<org.apache.tika.detect.XmlRootExtractor: void <init>()>();

        $r2 = virtualinvoke $r0.<org.apache.tika.detect.XmlRootExtractor: javax.xml.namespace.QName extractRootElement(java.io.InputStream)>(r1);

        if $r2 == null goto label4;

        $r3 = virtualinvoke $r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r4 = virtualinvoke $r2.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r5 = staticinvoke <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType[] values()>();

        i0 = lengthof $r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r6 = $r5[i1];

        $r7 = virtualinvoke r6.<org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: java.lang.String getNamespace()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r6.<org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: java.lang.String getPart()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        return r6;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        goto label8;

     label4:
        virtualinvoke r1.<java.io.InputStream: int read()>();

     label5:
        goto label8;

     label6:
        $r10 := @caughtexception;

        $r11 = <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType ENCRYPTED>;

        return $r11;

     label7:
        $r9 := @caughtexception;

     label8:
        return null;

        catch org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException from label4 to label5 with label6;
        catch java.lang.Exception from label4 to label5 with label7;
    }

    static org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType access$000(java.io.InputStream)
    {
        org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType detectType(java.io.InputStream)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.tika.mime.MediaType $r1, $r3, $r5, $r7;
        org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType[] $r8;
        org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType $r0, $r2, $r4, $r6, $r9, $r10, $r11, $r12;

        $r0 = new org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType;

        $r1 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("vnd.apple.keynote");

        specialinvoke $r0.<org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.apache.tika.mime.MediaType)>("KEYNOTE", 0, "http://developer.apple.com/namespaces/keynote2", "presentation", $r1);

        <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType KEYNOTE> = $r0;

        $r2 = new org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType;

        $r3 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("vnd.apple.numbers");

        specialinvoke $r2.<org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.apache.tika.mime.MediaType)>("NUMBERS", 1, "http://developer.apple.com/namespaces/ls", "document", $r3);

        <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType NUMBERS> = $r2;

        $r4 = new org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType;

        $r5 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("vnd.apple.pages");

        specialinvoke $r4.<org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.apache.tika.mime.MediaType)>("PAGES", 2, "http://developer.apple.com/namespaces/sl", "document", $r5);

        <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType PAGES> = $r4;

        $r6 = new org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType;

        $r7 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("x-tika-iworks-protected");

        specialinvoke $r6.<org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.apache.tika.mime.MediaType)>("ENCRYPTED", 3, null, null, $r7);

        <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType ENCRYPTED> = $r6;

        $r8 = newarray (org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType)[4];

        $r9 = <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType KEYNOTE>;

        $r8[0] = $r9;

        $r10 = <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType NUMBERS>;

        $r8[1] = $r10;

        $r11 = <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType PAGES>;

        $r8[2] = $r11;

        $r12 = <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType ENCRYPTED>;

        $r8[3] = $r12;

        <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType[] $VALUES> = $r8;

        return;
    }
}
