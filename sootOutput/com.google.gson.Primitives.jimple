final class com.google.gson.Primitives extends java.lang.Object
{
    private static final java.util.Map PRIMITIVE_TO_WRAPPER_TYPE;
    private static final java.util.Map WRAPPER_TO_PRIMITIVE_TYPE;

    private void <init>()
    {
        com.google.gson.Primitives r0;

        r0 := @this: com.google.gson.Primitives;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void add(java.util.Map, java.util.Map, java.lang.Class, java.lang.Class)
    {
        java.util.Map r0, r3;
        java.lang.Class r1, r2;

        r0 := @parameter0: java.util.Map;

        r3 := @parameter1: java.util.Map;

        r1 := @parameter2: java.lang.Class;

        r2 := @parameter3: java.lang.Class;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        return;
    }

    public static boolean isPrimitive(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Type;

        $r1 = <com.google.gson.Primitives: java.util.Map PRIMITIVE_TO_WRAPPER_TYPE>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    public static boolean isWrapperType(java.lang.Class)
    {
        java.util.Map $r1;
        java.lang.Class r0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.google.gson.Primitives: java.util.Map WRAPPER_TO_PRIMITIVE_TYPE>;

        $r2 = staticinvoke <com.google.gson.internal.$Gson$Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public static java.lang.Class wrap(java.lang.Class)
    {
        java.util.Map $r1;
        java.lang.Class r0, r4, $r5;
        java.lang.Object $r2, $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.google.gson.Primitives: java.util.Map PRIMITIVE_TO_WRAPPER_TYPE>;

        $r2 = staticinvoke <com.google.gson.internal.$Gson$Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.lang.Class) $r3;

        if r4 != null goto label1;

        $r5 = r0;

        goto label2;

     label1:
        $r5 = r4;

     label2:
        return $r5;
    }

    public static java.lang.Class unwrap(java.lang.Class)
    {
        java.util.Map $r1;
        java.lang.Class r0, r4, $r5;
        java.lang.Object $r2, $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.google.gson.Primitives: java.util.Map WRAPPER_TO_PRIMITIVE_TYPE>;

        $r2 = staticinvoke <com.google.gson.internal.$Gson$Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.lang.Class) $r3;

        if r4 != null goto label1;

        $r5 = r0;

        goto label2;

     label1:
        $r5 = r4;

     label2:
        return $r5;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r1;
        java.util.Map $r11, $r12;
        java.lang.Class $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(16);

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(16);

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        staticinvoke <com.google.gson.Primitives: void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class)>($r0, $r1, $r2, class "Ljava/lang/Boolean;");

        $r3 = <java.lang.Byte: java.lang.Class TYPE>;

        staticinvoke <com.google.gson.Primitives: void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class)>($r0, $r1, $r3, class "Ljava/lang/Byte;");

        $r4 = <java.lang.Character: java.lang.Class TYPE>;

        staticinvoke <com.google.gson.Primitives: void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class)>($r0, $r1, $r4, class "Ljava/lang/Character;");

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        staticinvoke <com.google.gson.Primitives: void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class)>($r0, $r1, $r5, class "Ljava/lang/Double;");

        $r6 = <java.lang.Float: java.lang.Class TYPE>;

        staticinvoke <com.google.gson.Primitives: void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class)>($r0, $r1, $r6, class "Ljava/lang/Float;");

        $r7 = <java.lang.Integer: java.lang.Class TYPE>;

        staticinvoke <com.google.gson.Primitives: void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class)>($r0, $r1, $r7, class "Ljava/lang/Integer;");

        $r8 = <java.lang.Long: java.lang.Class TYPE>;

        staticinvoke <com.google.gson.Primitives: void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class)>($r0, $r1, $r8, class "Ljava/lang/Long;");

        $r9 = <java.lang.Short: java.lang.Class TYPE>;

        staticinvoke <com.google.gson.Primitives: void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class)>($r0, $r1, $r9, class "Ljava/lang/Short;");

        $r10 = <java.lang.Void: java.lang.Class TYPE>;

        staticinvoke <com.google.gson.Primitives: void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class)>($r0, $r1, $r10, class "Ljava/lang/Void;");

        $r11 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0);

        <com.google.gson.Primitives: java.util.Map PRIMITIVE_TO_WRAPPER_TYPE> = $r11;

        $r12 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        <com.google.gson.Primitives: java.util.Map WRAPPER_TO_PRIMITIVE_TYPE> = $r12;

        return;
    }
}
