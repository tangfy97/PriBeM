public class org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint extends java.lang.Object
{
    public static final java.lang.String MOUSE_LISTENER_ATTR;
    static final java.util.Map mutationHandlerRegistry;
    public static final java.lang.String MUTATION_LISTENER_ATTR;
    static final java.util.Map eventHandlerRegistry;
    public static final java.lang.String LINK_ATTR;
    public static final java.lang.String SPREAD_FULL_TAGNAME;
    public static final java.lang.String BOUNDARY_FULL_TAGNAME;

    public static void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)
    {
        org.waveprotocol.wave.client.editor.content.misc.AnnotationBoundaryRenderer $r3;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer $r0;
        org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer $r2;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r4;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r1;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        $r0 = new org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void <init>()>();

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerRenderingMutationHandler(java.lang.String,org.waveprotocol.wave.client.editor.RenderingMutationHandler)>("l:s", $r0);

        $r2 = <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderers: org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer SHALLOW_CLONE_RENDERER>;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerNiceHtmlRenderer(java.lang.String,org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer)>("l:s", $r2);

        $r3 = new org.waveprotocol.wave.client.editor.content.misc.AnnotationBoundaryRenderer;

        specialinvoke $r3.<org.waveprotocol.wave.client.editor.content.misc.AnnotationBoundaryRenderer: void <init>()>();

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerRenderer(java.lang.String,org.waveprotocol.wave.client.editor.content.Renderer)>("l:b", $r3);

        $r4 = <org.waveprotocol.wave.client.editor.content.misc.AnnotationBoundaryRenderer: org.waveprotocol.wave.client.editor.NodeEventHandler EVENT_HANDLER>;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerEventHandler(java.lang.String,org.waveprotocol.wave.client.editor.NodeEventHandler)>("l:b", $r4);

        return;
    }

    public static void registerEventHandler(java.lang.String, org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$EventHandler)
    {
        java.lang.String r0;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$EventHandler r1;
        java.util.Map $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$EventHandler;

        $r2 = <org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint: java.util.Map eventHandlerRegistry>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    public static void setMutationHandler(java.lang.String, org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$MutationHandler)
    {
        java.lang.String r0;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$MutationHandler r1;
        java.util.Map $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$MutationHandler;

        $r2 = <org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint: java.util.Map mutationHandlerRegistry>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    public static void clearMutationHandler(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint: java.util.Map mutationHandlerRegistry>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        return;
    }

    private void <init>()
    {
        org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r1;

        <org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint: java.lang.String BOUNDARY_FULL_TAGNAME> = "l:b";

        <org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint: java.lang.String SPREAD_FULL_TAGNAME> = "l:s";

        <org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint: java.lang.String LINK_ATTR> = "link";

        <org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint: java.lang.String MUTATION_LISTENER_ATTR> = "mutationListener";

        <org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint: java.lang.String MOUSE_LISTENER_ATTR> = "mouseListener";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint: java.util.Map mutationHandlerRegistry> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint: java.util.Map eventHandlerRegistry> = $r1;

        return;
    }
}
