public class org.apache.batik.ext.awt.image.rendered.IndexImage extends java.lang.Object
{

    public void <init>()
    {
        org.apache.batik.ext.awt.image.rendered.IndexImage r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.IndexImage;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static byte[][] computeRGB(int, org.apache.batik.ext.awt.image.rendered.IndexImage$Cube[])
    {
        org.apache.batik.ext.awt.image.rendered.IndexImage$Cube $r4;
        byte[] r0, r1, r2, $r5, r7;
        byte[][] r6;
        byte $b1, $b2, $b3;
        org.apache.batik.ext.awt.image.rendered.IndexImage$Cube[] r3;
        int i0, i4;

        i0 := @parameter0: int;

        r3 := @parameter1: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube[];

        r0 = newarray (byte)[i0];

        r1 = newarray (byte)[i0];

        r2 = newarray (byte)[i0];

        r7 = newarray (byte)[3];

        i4 = 0;

        goto label2;

     label1:
        $r4 = r3[i4];

        $r5 = virtualinvoke $r4.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: byte[] averageColorRGB(byte[])>(r7);

        r7 = $r5;

        $b1 = $r5[0];

        r0[i4] = $b1;

        $b2 = $r5[1];

        r1[i4] = $b2;

        $b3 = $r5[2];

        r2[i4] = $b3;

        i4 = i4 + 1;

     label2:
        if i4 < i0 goto label1;

        r6 = newarray (byte[])[3];

        r6[0] = r0;

        r6[1] = r1;

        r6[2] = r2;

        return r6;
    }

    static void logRGB(byte[], byte[], byte[])
    {
        byte[] r1, r6, r9;
        byte $b1, $b3, $b5;
        java.lang.StringBuffer $r3, $r4, $r5, $r7, $r8, $r10, $r11, $r15, $r16, $r17, $r19, $r20, $r21;
        int i0, $i2, $i4, $i6, i7, $i8, $i9, $i10;
        java.lang.String $r12, $r18;
        java.io.PrintStream $r14;

        r1 := @parameter0: byte[];

        r6 := @parameter1: byte[];

        r9 := @parameter2: byte[];

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>(int)>(100);

        i0 = lengthof r1;

        i7 = 0;

        goto label2;

     label1:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $b1 = r1[i7];

        $i8 = (int) $b1;

        $i2 = $i8 + 128;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        $b3 = r6[i7];

        $i9 = (int) $b3;

        $i4 = $i9 + 128;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        $b5 = r9[i7];

        $i10 = (int) $b5;

        $i6 = $i10 + 128;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("),");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        i7 = i7 + 1;

     label2:
        if i7 < i0 goto label1;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("RGB:");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18);

        return;
    }

    static java.util.List[] createColorList(java.awt.image.BufferedImage)
    {
        org.apache.batik.ext.awt.image.rendered.IndexImage$Counter $r5, $r10, $r11;
        java.util.ArrayList r8, $r9;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, $i15;
        java.util.ArrayList[] r1;
        boolean $z0, $z1;
        java.util.Iterator $r2;
        java.awt.image.BufferedImage r0;
        java.lang.Object $r4;

        r0 := @parameter0: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        r1 = newarray (java.util.ArrayList)[4096];

        i12 = 0;

        goto label8;

     label1:
        i13 = 0;

        goto label7;

     label2:
        $i2 = virtualinvoke r0.<java.awt.image.BufferedImage: int getRGB(int,int)>(i12, i13);

        i3 = $i2 & 16777215;

        $i4 = i3 & 15728640;

        $i7 = $i4 >>> 12;

        $i15 = (int) 61440;

        $i5 = i3 & $i15;

        $i6 = $i5 >>> 8;

        $i10 = $i7 | $i6;

        $i8 = i3 & 240;

        $i9 = $i8 >>> 4;

        i11 = $i10 | $i9;

        r8 = r1[i11];

        if r8 != null goto label3;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = new org.apache.batik.ext.awt.image.rendered.IndexImage$Counter;

        specialinvoke $r10.<org.apache.batik.ext.awt.image.rendered.IndexImage$Counter: void <init>(int)>(i3);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        r1[i11] = $r9;

        goto label6;

     label3:
        $r2 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label4:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.batik.ext.awt.image.rendered.IndexImage$Counter) $r4;

        $z1 = virtualinvoke $r5.<org.apache.batik.ext.awt.image.rendered.IndexImage$Counter: boolean add(int)>(i3);

        if $z1 == 0 goto label4;

        goto label6;

     label5:
        $r11 = new org.apache.batik.ext.awt.image.rendered.IndexImage$Counter;

        specialinvoke $r11.<org.apache.batik.ext.awt.image.rendered.IndexImage$Counter: void <init>(int)>(i3);

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label6;

     label6:
        i13 = i13 + 1;

     label7:
        if i13 < $i1 goto label2;

        i12 = i12 + 1;

     label8:
        if i12 < $i0 goto label1;

        return r1;
    }

    static org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][] convertColorList(java.util.List[])
    {
        java.lang.Object[] $r5;
        java.util.List[] r2;
        org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][] r1;
        java.util.List r3;
        int $i0, i1, $i2;
        org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[] r0, $r4, $r6;

        r2 := @parameter0: java.util.List[];

        r0 = newarray (org.apache.batik.ext.awt.image.rendered.IndexImage$Counter)[0];

        r1 = newarray (org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[])[4096];

        i1 = 0;

        goto label4;

     label1:
        r3 = r2[i1];

        if r3 != null goto label2;

        r1[i1] = r0;

        goto label3;

     label2:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $r4 = newarray (org.apache.batik.ext.awt.image.rendered.IndexImage$Counter)[$i0];

        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[]) $r5;

        r1[i1] = $r6;

        r2[i1] = null;

     label3:
        i1 = i1 + 1;

     label4:
        $i2 = lengthof r2;

        if i1 < $i2 goto label1;

        return r1;
    }

    public static java.awt.image.BufferedImage getIndexedImage(java.awt.image.BufferedImage, int)
    {
        org.apache.batik.ext.awt.image.rendered.IndexImage$Cube $r4, $r5, $r6, $r7, $r8, $r9, r28, r29, r30, $r31;
        byte[] $r12, $r13, $r14, $r20, $r21, $r22;
        java.util.List[] $r0;
        java.awt.Point $r36;
        org.apache.batik.ext.awt.image.rendered.IndexImage$Cube[] r2;
        java.awt.image.IndexColorModel $r32, $r34;
        boolean $z0, $z1;
        java.awt.image.BufferedImage r27, $r33, $r37;
        org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][] $r1;
        byte[][] $r10;
        java.awt.Graphics2D $r16;
        java.awt.image.MultiPixelPackedSampleModel $r35;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17, i18, i19, $i21;
        java.awt.RenderingHints$Key $r18;
        java.lang.Object $r17;
        java.awt.image.WritableRaster $r25;

        r27 := @parameter0: java.awt.image.BufferedImage;

        i2 := @parameter1: int;

        $i0 = virtualinvoke r27.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r27.<java.awt.image.BufferedImage: int getHeight()>();

        $r0 = staticinvoke <org.apache.batik.ext.awt.image.rendered.IndexImage: java.util.List[] createColorList(java.awt.image.BufferedImage)>(r27);

        $r1 = staticinvoke <org.apache.batik.ext.awt.image.rendered.IndexImage: org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][] convertColorList(java.util.List[])>($r0);

        i13 = 1;

        i14 = 0;

        r2 = newarray (org.apache.batik.ext.awt.image.rendered.IndexImage$Cube)[i2];

        $r31 = new org.apache.batik.ext.awt.image.rendered.IndexImage$Cube;

        $i3 = $i0 * $i1;

        specialinvoke $r31.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: void <init>(org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][],int)>($r1, $i3);

        r2[0] = $r31;

        goto label16;

     label01:
        i14 = i14 + 1;

        if i14 != i13 goto label02;

        goto label03;

     label02:
        $r4 = r2[i14];

        $z0 = virtualinvoke $r4.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: boolean isDone()>();

        if $z0 != 0 goto label01;

     label03:
        if i14 != i13 goto label04;

        goto label17;

     label04:
        r28 = r2[i14];

        $r5 = virtualinvoke r28.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube split()>();

        r29 = $r5;

        if $r5 == null goto label16;

        $i5 = $r5.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        $i4 = r28.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        if $i5 <= $i4 goto label05;

        r30 = r28;

        r28 = $r5;

        r29 = r30;

     label05:
        i15 = i14;

        $i11 = r28.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        i16 = i14 + 1;

        goto label08;

     label06:
        $r6 = r2[i16];

        $i6 = $r6.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        if $i6 >= $i11 goto label07;

        goto label09;

     label07:
        $i7 = i15;

        i15 = i15 + 1;

        $r7 = r2[i16];

        r2[$i7] = $r7;

        i16 = i16 + 1;

     label08:
        if i16 < i13 goto label06;

     label09:
        i17 = i15 + 1;

        r2[i15] = r28;

        $i10 = r29.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        goto label12;

     label10:
        $r8 = r2[i17];

        $i8 = $r8.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        if $i8 >= $i10 goto label11;

        goto label13;

     label11:
        i17 = i17 + 1;

     label12:
        if i17 < i13 goto label10;

     label13:
        i18 = i13;

        goto label15;

     label14:
        $i9 = i18 - 1;

        $r9 = r2[$i9];

        r2[i18] = $r9;

        $i21 = (int) -1;

        i18 = i18 + $i21;

     label15:
        if i18 > i17 goto label14;

        r2[i17] = r29;

        i13 = i13 + 1;

     label16:
        if i13 < i2 goto label02;

     label17:
        $r10 = staticinvoke <org.apache.batik.ext.awt.image.rendered.IndexImage: byte[][] computeRGB(int,org.apache.batik.ext.awt.image.rendered.IndexImage$Cube[])>(i13, r2);

        $r32 = new java.awt.image.IndexColorModel;

        $r14 = $r10[0];

        $r13 = $r10[1];

        $r12 = $r10[2];

        specialinvoke $r32.<java.awt.image.IndexColorModel: void <init>(int,int,byte[],byte[],byte[])>(8, i13, $r14, $r13, $r12);

        $r33 = new java.awt.image.BufferedImage;

        specialinvoke $r33.<java.awt.image.BufferedImage: void <init>(int,int,int,java.awt.image.IndexColorModel)>($i0, $i1, 13, $r32);

        $r16 = virtualinvoke $r33.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r18 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_DITHERING>;

        $r17 = <java.awt.RenderingHints: java.lang.Object VALUE_DITHER_ENABLE>;

        virtualinvoke $r16.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r18, $r17);

        virtualinvoke $r16.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r27, 0, 0, null);

        virtualinvoke $r16.<java.awt.Graphics: void dispose()>();

        i19 = 1;

        goto label20;

     label18:
        $i12 = 1 << i19;

        if $i12 < i13 goto label19;

        goto label21;

     label19:
        i19 = i19 + 1;

     label20:
        if i19 <= 8 goto label18;

     label21:
        if i19 <= 4 goto label22;

        return $r33;

     label22:
        if i19 != 3 goto label23;

        i19 = 4;

     label23:
        $r34 = new java.awt.image.IndexColorModel;

        $r22 = $r10[0];

        $r21 = $r10[1];

        $r20 = $r10[2];

        specialinvoke $r34.<java.awt.image.IndexColorModel: void <init>(int,int,byte[],byte[],byte[])>(i19, i13, $r22, $r21, $r20);

        $r35 = new java.awt.image.MultiPixelPackedSampleModel;

        specialinvoke $r35.<java.awt.image.MultiPixelPackedSampleModel: void <init>(int,int,int,int)>(0, $i0, $i1, i19);

        $r36 = new java.awt.Point;

        specialinvoke $r36.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r25 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r35, $r36);

        $r37 = new java.awt.image.BufferedImage;

        $z1 = virtualinvoke $r33.<java.awt.image.BufferedImage: boolean isAlphaPremultiplied()>();

        specialinvoke $r37.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r34, $r25, $z1, null);

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r33, $r37);

        return $r37;
    }
}
