public abstract class org.apache.lucene.util.mutable.MutableValue extends java.lang.Object implements java.lang.Comparable
{
    public boolean exists;

    public void <init>()
    {
        org.apache.lucene.util.mutable.MutableValue r0;

        r0 := @this: org.apache.lucene.util.mutable.MutableValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.mutable.MutableValue: boolean exists> = 1;

        return;
    }

    public abstract void copy(org.apache.lucene.util.mutable.MutableValue);

    public abstract org.apache.lucene.util.mutable.MutableValue duplicate();

    public abstract boolean equalsSameType(java.lang.Object);

    public abstract int compareSameType(java.lang.Object);

    public abstract java.lang.Object toObject();

    public boolean exists()
    {
        org.apache.lucene.util.mutable.MutableValue r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.mutable.MutableValue;

        $z0 = r0.<org.apache.lucene.util.mutable.MutableValue: boolean exists>;

        return $z0;
    }

    public int compareTo(org.apache.lucene.util.mutable.MutableValue)
    {
        org.apache.lucene.util.mutable.MutableValue r0, r2;
        int $i0, $i1, $i2, i3;
        java.lang.Class $r1, $r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.apache.lucene.util.mutable.MutableValue;

        r2 := @parameter0: org.apache.lucene.util.mutable.MutableValue;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r3 goto label2;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i2 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        i3 = $i1 - $i2;

        if i3 != 0 goto label1;

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.String getCanonicalName()>();

        i3 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>($r5);

     label1:
        return i3;

     label2:
        $i0 = virtualinvoke r0.<org.apache.lucene.util.mutable.MutableValue: int compareSameType(java.lang.Object)>(r2);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Class $r1, $r3;
        java.lang.Object r2;
        org.apache.lucene.util.mutable.MutableValue r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.mutable.MutableValue;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != $r3 goto label1;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.mutable.MutableValue: boolean equalsSameType(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public abstract int hashCode();

    public java.lang.String toString()
    {
        java.lang.Object $r1;
        java.lang.String $r2;
        org.apache.lucene.util.mutable.MutableValue r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.mutable.MutableValue;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.mutable.MutableValue: boolean exists()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.mutable.MutableValue: java.lang.Object toObject()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label1:
        $r2 = "(null)";

     label2:
        return $r2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        org.apache.lucene.util.mutable.MutableValue r0, $r2;

        r0 := @this: org.apache.lucene.util.mutable.MutableValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.lucene.util.mutable.MutableValue) r1;

        $i0 = virtualinvoke r0.<org.apache.lucene.util.mutable.MutableValue: int compareTo(org.apache.lucene.util.mutable.MutableValue)>($r2);

        return $i0;
    }
}
