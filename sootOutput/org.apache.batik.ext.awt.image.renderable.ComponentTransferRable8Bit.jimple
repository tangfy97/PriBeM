public class org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit extends org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable implements org.apache.batik.ext.awt.image.renderable.ComponentTransferRable
{
    public static final int ALPHA;
    public static final int RED;
    public static final int GREEN;
    public static final int BLUE;
    private org.apache.batik.ext.awt.image.ComponentTransferFunction[] functions;
    private org.apache.batik.ext.awt.image.TransferFunction[] txfFunc;

    public void <init>(org.apache.batik.ext.awt.image.renderable.Filter, org.apache.batik.ext.awt.image.ComponentTransferFunction, org.apache.batik.ext.awt.image.ComponentTransferFunction, org.apache.batik.ext.awt.image.ComponentTransferFunction, org.apache.batik.ext.awt.image.ComponentTransferFunction)
    {
        org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit r0;
        org.apache.batik.ext.awt.image.ComponentTransferFunction[] $r2;
        org.apache.batik.ext.awt.image.renderable.Filter r1;
        org.apache.batik.ext.awt.image.ComponentTransferFunction r4, r5, r6, r7;
        org.apache.batik.ext.awt.image.TransferFunction[] $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        r4 := @parameter1: org.apache.batik.ext.awt.image.ComponentTransferFunction;

        r5 := @parameter2: org.apache.batik.ext.awt.image.ComponentTransferFunction;

        r6 := @parameter3: org.apache.batik.ext.awt.image.ComponentTransferFunction;

        r7 := @parameter4: org.apache.batik.ext.awt.image.ComponentTransferFunction;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        $r2 = newarray (org.apache.batik.ext.awt.image.ComponentTransferFunction)[4];

        r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.ComponentTransferFunction[] functions> = $r2;

        $r3 = newarray (org.apache.batik.ext.awt.image.TransferFunction)[4];

        r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.TransferFunction[] txfFunc> = $r3;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: void setAlphaFunction(org.apache.batik.ext.awt.image.ComponentTransferFunction)>(r4);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: void setRedFunction(org.apache.batik.ext.awt.image.ComponentTransferFunction)>(r5);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: void setGreenFunction(org.apache.batik.ext.awt.image.ComponentTransferFunction)>(r6);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: void setBlueFunction(org.apache.batik.ext.awt.image.ComponentTransferFunction)>(r7);

        return;
    }

    public void setSource(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        return;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getSource()
    {
        java.util.Vector $r1;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        return $r3;
    }

    public org.apache.batik.ext.awt.image.ComponentTransferFunction getAlphaFunction()
    {
        org.apache.batik.ext.awt.image.ComponentTransferFunction $r2;
        org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit r0;
        org.apache.batik.ext.awt.image.ComponentTransferFunction[] $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.ComponentTransferFunction[] functions>;

        $r2 = $r1[0];

        return $r2;
    }

    public void setAlphaFunction(org.apache.batik.ext.awt.image.ComponentTransferFunction)
    {
        org.apache.batik.ext.awt.image.ComponentTransferFunction r1;
        org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit r0;
        org.apache.batik.ext.awt.image.ComponentTransferFunction[] $r2;
        org.apache.batik.ext.awt.image.TransferFunction[] $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.ComponentTransferFunction;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        $r2 = r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.ComponentTransferFunction[] functions>;

        $r2[0] = r1;

        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.TransferFunction[] txfFunc>;

        $r3[0] = null;

        return;
    }

    public org.apache.batik.ext.awt.image.ComponentTransferFunction getRedFunction()
    {
        org.apache.batik.ext.awt.image.ComponentTransferFunction $r2;
        org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit r0;
        org.apache.batik.ext.awt.image.ComponentTransferFunction[] $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.ComponentTransferFunction[] functions>;

        $r2 = $r1[1];

        return $r2;
    }

    public void setRedFunction(org.apache.batik.ext.awt.image.ComponentTransferFunction)
    {
        org.apache.batik.ext.awt.image.ComponentTransferFunction r1;
        org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit r0;
        org.apache.batik.ext.awt.image.ComponentTransferFunction[] $r2;
        org.apache.batik.ext.awt.image.TransferFunction[] $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.ComponentTransferFunction;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        $r2 = r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.ComponentTransferFunction[] functions>;

        $r2[1] = r1;

        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.TransferFunction[] txfFunc>;

        $r3[1] = null;

        return;
    }

    public org.apache.batik.ext.awt.image.ComponentTransferFunction getGreenFunction()
    {
        org.apache.batik.ext.awt.image.ComponentTransferFunction $r2;
        org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit r0;
        org.apache.batik.ext.awt.image.ComponentTransferFunction[] $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.ComponentTransferFunction[] functions>;

        $r2 = $r1[2];

        return $r2;
    }

    public void setGreenFunction(org.apache.batik.ext.awt.image.ComponentTransferFunction)
    {
        org.apache.batik.ext.awt.image.ComponentTransferFunction r1;
        org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit r0;
        org.apache.batik.ext.awt.image.ComponentTransferFunction[] $r2;
        org.apache.batik.ext.awt.image.TransferFunction[] $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.ComponentTransferFunction;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        $r2 = r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.ComponentTransferFunction[] functions>;

        $r2[2] = r1;

        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.TransferFunction[] txfFunc>;

        $r3[2] = null;

        return;
    }

    public org.apache.batik.ext.awt.image.ComponentTransferFunction getBlueFunction()
    {
        org.apache.batik.ext.awt.image.ComponentTransferFunction $r2;
        org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit r0;
        org.apache.batik.ext.awt.image.ComponentTransferFunction[] $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.ComponentTransferFunction[] functions>;

        $r2 = $r1[3];

        return $r2;
    }

    public void setBlueFunction(org.apache.batik.ext.awt.image.ComponentTransferFunction)
    {
        org.apache.batik.ext.awt.image.ComponentTransferFunction r1;
        org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit r0;
        org.apache.batik.ext.awt.image.ComponentTransferFunction[] $r2;
        org.apache.batik.ext.awt.image.TransferFunction[] $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.ComponentTransferFunction;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        $r2 = r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.ComponentTransferFunction[] functions>;

        $r2[3] = r1;

        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.TransferFunction[] txfFunc>;

        $r3[3] = null;

        return;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        org.apache.batik.ext.awt.image.rendered.ComponentTransferRed $r4;
        java.awt.image.RenderedImage $r3;
        java.awt.RenderingHints $r7;
        org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;
        java.awt.image.renderable.RenderContext r2;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r5;
        org.apache.batik.ext.awt.image.TransferFunction[] $r6;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit;

        r2 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r3 = interfaceinvoke $r1.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>(r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = new org.apache.batik.ext.awt.image.rendered.ComponentTransferRed;

        $r5 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: org.apache.batik.ext.awt.image.rendered.CachableRed convertSourceCS(java.awt.image.RenderedImage)>($r3);

        $r6 = specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.TransferFunction[] getTransferFunctions()>();

        $r7 = virtualinvoke r2.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        specialinvoke $r4.<org.apache.batik.ext.awt.image.rendered.ComponentTransferRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,org.apache.batik.ext.awt.image.TransferFunction[],java.awt.RenderingHints)>($r5, $r6, $r7);

        return $r4;
    }

    private org.apache.batik.ext.awt.image.TransferFunction[] getTransferFunctions()
    {
        java.lang.Throwable $r14;
        org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit r1;
        org.apache.batik.ext.awt.image.ComponentTransferFunction[] r3, $r4, r8, $r9;
        int i0;
        org.apache.batik.ext.awt.image.ComponentTransferFunction $r6, $r10, $r11;
        org.apache.batik.ext.awt.image.TransferFunction[] r0, $r2, $r13;
        org.apache.batik.ext.awt.image.TransferFunction $r5, $r7, $r12;

        r1 := @this: org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit;

        r0 = newarray (org.apache.batik.ext.awt.image.TransferFunction)[4];

        $r2 = r1.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.TransferFunction[] txfFunc>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r0, 0, 4);

        r3 = newarray (org.apache.batik.ext.awt.image.ComponentTransferFunction)[4];

        $r4 = r1.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.ComponentTransferFunction[] functions>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r3, 0, 4);

        i0 = 0;

        goto label6;

     label1:
        $r5 = r0[i0];

        if $r5 != null goto label5;

        $r6 = r3[i0];

        $r7 = staticinvoke <org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.TransferFunction getTransferFunction(org.apache.batik.ext.awt.image.ComponentTransferFunction)>($r6);

        r0[i0] = $r7;

        r8 = r1.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.ComponentTransferFunction[] functions>;

        entermonitor r8;

     label2:
        $r9 = r1.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.ComponentTransferFunction[] functions>;

        $r11 = $r9[i0];

        $r10 = r3[i0];

        if $r11 != $r10 goto label3;

        $r13 = r1.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: org.apache.batik.ext.awt.image.TransferFunction[] txfFunc>;

        $r12 = r0[i0];

        $r13[i0] = $r12;

     label3:
        exitmonitor r8;

        goto label5;

     label4:
        $r14 := @caughtexception;

        exitmonitor r8;

        throw $r14;

     label5:
        i0 = i0 + 1;

     label6:
        if i0 < 4 goto label1;

        return r0;

        catch java.lang.Throwable from label2 to label4 with label4;
    }

    private static org.apache.batik.ext.awt.image.TransferFunction getTransferFunction(org.apache.batik.ext.awt.image.ComponentTransferFunction)
    {
        java.lang.Error $r10;
        float[] $r4, $r7;
        org.apache.batik.ext.awt.image.GammaTransfer $r1;
        int[] $r5, $r8;
        int $i0;
        org.apache.batik.ext.awt.image.ComponentTransferFunction r0;
        org.apache.batik.ext.awt.image.TableTransfer $r6;
        org.apache.batik.ext.awt.image.IdentityTransfer $r9, $r11;
        org.apache.batik.ext.awt.image.TransferFunction r12;
        float $f0, $f1, $f2, $f3, $f4;
        org.apache.batik.ext.awt.image.DiscreteTransfer $r3;
        org.apache.batik.ext.awt.image.LinearTransfer $r2;

        r0 := @parameter0: org.apache.batik.ext.awt.image.ComponentTransferFunction;

        if r0 != null goto label1;

        $r11 = new org.apache.batik.ext.awt.image.IdentityTransfer;

        specialinvoke $r11.<org.apache.batik.ext.awt.image.IdentityTransfer: void <init>()>();

        r12 = $r11;

        goto label8;

     label1:
        $i0 = interfaceinvoke r0.<org.apache.batik.ext.awt.image.ComponentTransferFunction: int getType()>();

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label7;
        };

     label2:
        $r9 = new org.apache.batik.ext.awt.image.IdentityTransfer;

        specialinvoke $r9.<org.apache.batik.ext.awt.image.IdentityTransfer: void <init>()>();

        r12 = $r9;

        goto label8;

     label3:
        $r6 = new org.apache.batik.ext.awt.image.TableTransfer;

        $r7 = interfaceinvoke r0.<org.apache.batik.ext.awt.image.ComponentTransferFunction: float[] getTableValues()>();

        $r8 = staticinvoke <org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: int[] tableFloatToInt(float[])>($r7);

        specialinvoke $r6.<org.apache.batik.ext.awt.image.TableTransfer: void <init>(int[])>($r8);

        r12 = $r6;

        goto label8;

     label4:
        $r3 = new org.apache.batik.ext.awt.image.DiscreteTransfer;

        $r4 = interfaceinvoke r0.<org.apache.batik.ext.awt.image.ComponentTransferFunction: float[] getTableValues()>();

        $r5 = staticinvoke <org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: int[] tableFloatToInt(float[])>($r4);

        specialinvoke $r3.<org.apache.batik.ext.awt.image.DiscreteTransfer: void <init>(int[])>($r5);

        r12 = $r3;

        goto label8;

     label5:
        $r2 = new org.apache.batik.ext.awt.image.LinearTransfer;

        $f3 = interfaceinvoke r0.<org.apache.batik.ext.awt.image.ComponentTransferFunction: float getSlope()>();

        $f4 = interfaceinvoke r0.<org.apache.batik.ext.awt.image.ComponentTransferFunction: float getIntercept()>();

        specialinvoke $r2.<org.apache.batik.ext.awt.image.LinearTransfer: void <init>(float,float)>($f3, $f4);

        r12 = $r2;

        goto label8;

     label6:
        $r1 = new org.apache.batik.ext.awt.image.GammaTransfer;

        $f0 = interfaceinvoke r0.<org.apache.batik.ext.awt.image.ComponentTransferFunction: float getAmplitude()>();

        $f1 = interfaceinvoke r0.<org.apache.batik.ext.awt.image.ComponentTransferFunction: float getExponent()>();

        $f2 = interfaceinvoke r0.<org.apache.batik.ext.awt.image.ComponentTransferFunction: float getOffset()>();

        specialinvoke $r1.<org.apache.batik.ext.awt.image.GammaTransfer: void <init>(float,float,float)>($f0, $f1, $f2);

        r12 = $r1;

        goto label8;

     label7:
        $r10 = new java.lang.Error;

        specialinvoke $r10.<java.lang.Error: void <init>()>();

        throw $r10;

     label8:
        return r12;
    }

    private static int[] tableFloatToInt(float[])
    {
        float[] r0;
        int[] r1;
        int $i0, $i1, $i2, i3;
        float $f0, $f1;

        r0 := @parameter0: float[];

        $i0 = lengthof r0;

        r1 = newarray (int)[$i0];

        i3 = 0;

        goto label2;

     label1:
        $f0 = r0[i3];

        $f1 = $f0 * 255.0F;

        $i2 = (int) $f1;

        r1[i3] = $i2;

        i3 = i3 + 1;

     label2:
        $i1 = lengthof r0;

        if i3 < $i1 goto label1;

        return r1;
    }

    public static void <clinit>()
    {
        <org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: int BLUE> = 3;

        <org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: int GREEN> = 2;

        <org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: int RED> = 1;

        <org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: int ALPHA> = 0;

        return;
    }
}
