abstract class com.sun.xml.bind.v2.runtime.property.ArrayProperty extends com.sun.xml.bind.v2.runtime.property.PropertyImpl
{
    protected final com.sun.xml.bind.v2.runtime.reflect.Accessor acc;
    protected final com.sun.xml.bind.v2.runtime.reflect.Lister lister;
    static final boolean $assertionsDisabled;

    protected void <init>(com.sun.xml.bind.v2.runtime.JAXBContextImpl, com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo)
    {
        com.sun.xml.bind.v2.runtime.property.ArrayProperty r0;
        java.lang.AssertionError $r12, $r14, $r15;
        com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator $r3;
        com.sun.xml.bind.v2.runtime.JAXBContextImpl r1;
        boolean $z0, $z1, $z2, $z3;
        com.sun.xml.bind.v2.runtime.reflect.Lister $r8, $r13;
        com.sun.xml.bind.v2.model.core.Adapter $r7;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r9, $r10, $r11;
        java.lang.reflect.Type $r4;
        java.lang.Class $r5;
        com.sun.xml.bind.v2.model.core.ID $r6;

        r0 := @this: com.sun.xml.bind.v2.runtime.property.ArrayProperty;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.JAXBContextImpl;

        r2 := @parameter1: com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.property.PropertyImpl: void <init>(com.sun.xml.bind.v2.runtime.JAXBContextImpl,com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo)>(r1, r2);

        $z0 = <com.sun.xml.bind.v2.runtime.property.ArrayProperty: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z3 = interfaceinvoke r2.<com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo: boolean isCollection()>();

        if $z3 != 0 goto label1;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label1:
        $r3 = <com.sun.xml.bind.v2.model.nav.Navigator: com.sun.xml.bind.v2.model.nav.ReflectionNavigator REFLECTION>;

        $r4 = interfaceinvoke r2.<com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo: java.lang.reflect.Type getRawType()>();

        $r5 = virtualinvoke $r3.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class erasure(java.lang.reflect.Type)>($r4);

        $r6 = interfaceinvoke r2.<com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo: com.sun.xml.bind.v2.model.core.ID id()>();

        $r7 = interfaceinvoke r2.<com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo: com.sun.xml.bind.v2.model.core.Adapter getAdapter()>();

        $r8 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.Lister: com.sun.xml.bind.v2.runtime.reflect.Lister create(java.lang.reflect.Type,com.sun.xml.bind.v2.model.core.ID,com.sun.xml.bind.v2.model.core.Adapter)>($r5, $r6, $r7);

        r0.<com.sun.xml.bind.v2.runtime.property.ArrayProperty: com.sun.xml.bind.v2.runtime.reflect.Lister lister> = $r8;

        $z1 = <com.sun.xml.bind.v2.runtime.property.ArrayProperty: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r13 = r0.<com.sun.xml.bind.v2.runtime.property.ArrayProperty: com.sun.xml.bind.v2.runtime.reflect.Lister lister>;

        if $r13 != null goto label2;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label2:
        $r9 = interfaceinvoke r2.<com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo: com.sun.xml.bind.v2.runtime.reflect.Accessor getAccessor()>();

        $r10 = virtualinvoke $r9.<com.sun.xml.bind.v2.runtime.reflect.Accessor: com.sun.xml.bind.v2.runtime.reflect.Accessor optimize(com.sun.xml.bind.v2.runtime.JAXBContextImpl)>(r1);

        r0.<com.sun.xml.bind.v2.runtime.property.ArrayProperty: com.sun.xml.bind.v2.runtime.reflect.Accessor acc> = $r10;

        $z2 = <com.sun.xml.bind.v2.runtime.property.ArrayProperty: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r11 = r0.<com.sun.xml.bind.v2.runtime.property.ArrayProperty: com.sun.xml.bind.v2.runtime.reflect.Accessor acc>;

        if $r11 != null goto label3;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label3:
        return;
    }

    public void reset(java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        com.sun.xml.bind.v2.runtime.property.ArrayProperty r0;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r2;
        java.lang.Object r1;
        com.sun.xml.bind.v2.runtime.reflect.Lister $r3;

        r0 := @this: com.sun.xml.bind.v2.runtime.property.ArrayProperty;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<com.sun.xml.bind.v2.runtime.property.ArrayProperty: com.sun.xml.bind.v2.runtime.reflect.Lister lister>;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.property.ArrayProperty: com.sun.xml.bind.v2.runtime.reflect.Accessor acc>;

        virtualinvoke $r3.<com.sun.xml.bind.v2.runtime.reflect.Lister: void reset(java.lang.Object,com.sun.xml.bind.v2.runtime.reflect.Accessor)>(r1, $r2);

        return;
    }

    public final java.lang.String getIdValue(java.lang.Object)
    {
        com.sun.xml.bind.v2.runtime.property.ArrayProperty r0;
        java.lang.Object r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.property.ArrayProperty;

        r1 := @parameter0: java.lang.Object;

        return null;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/runtime/property/ArrayProperty;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.runtime.property.ArrayProperty: boolean $assertionsDisabled> = $z1;

        return;
    }
}
