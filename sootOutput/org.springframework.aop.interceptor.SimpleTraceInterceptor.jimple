public class org.springframework.aop.interceptor.SimpleTraceInterceptor extends org.springframework.aop.interceptor.AbstractTraceInterceptor
{

    public void <init>()
    {
        org.springframework.aop.interceptor.SimpleTraceInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.SimpleTraceInterceptor;

        specialinvoke r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: void <init>()>();

        return;
    }

    public void <init>(boolean)
    {
        org.springframework.aop.interceptor.SimpleTraceInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.aop.interceptor.SimpleTraceInterceptor;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: void <init>()>();

        virtualinvoke r0.<org.springframework.aop.interceptor.SimpleTraceInterceptor: void setUseDynamicLogger(boolean)>(z0);

        return;
    }

    protected java.lang.Object invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log) throws java.lang.Throwable
    {
        java.lang.Throwable $r11;
        org.springframework.aop.interceptor.SimpleTraceInterceptor r0;
        org.aopalliance.intercept.MethodInvocation r1;
        org.apache.commons.logging.Log r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r12, $r13;
        java.lang.Object $r7;
        java.lang.String $r2, $r6, $r10, $r14;

        r0 := @this: org.springframework.aop.interceptor.SimpleTraceInterceptor;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r3 := @parameter1: org.apache.commons.logging.Log;

        $r2 = virtualinvoke r0.<org.springframework.aop.interceptor.SimpleTraceInterceptor: java.lang.String getInvocationDescription(org.aopalliance.intercept.MethodInvocation)>(r1);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Entering ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r6);

     label1:
        $r7 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Exiting ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r10);

     label2:
        return $r7;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Exception thrown in ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r3.<org.apache.commons.logging.Log: void trace(java.lang.Object,java.lang.Throwable)>($r14, $r11);

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected java.lang.String getInvocationDescription(org.aopalliance.intercept.MethodInvocation)
    {
        org.springframework.aop.interceptor.SimpleTraceInterceptor r12;
        org.aopalliance.intercept.MethodInvocation r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r9, $r10;
        java.lang.Object $r6;
        java.lang.Class $r7;
        java.lang.String $r3, $r8, $r11;
        java.lang.reflect.Method $r2;

        r12 := @this: org.springframework.aop.interceptor.SimpleTraceInterceptor;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("method \'");

        $r2 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of class [");

        $r6 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.Object getThis()>();

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }
}
