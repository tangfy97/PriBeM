public class org.apache.solr.client.solrj.response.TermsResponse extends java.lang.Object
{
    private java.util.Map termMap;

    public void <init>(org.apache.solr.common.util.NamedList)
    {
        java.util.HashMap $r1;
        long $l2;
        java.util.ArrayList $r4;
        java.util.Map $r7;
        int $i0, $i1, i3, i4;
        java.lang.String $r3, $r9;
        java.lang.Number $r11;
        org.apache.solr.client.solrj.response.TermsResponse r0;
        org.apache.solr.common.util.NamedList r2, r6;
        org.apache.solr.client.solrj.response.TermsResponse$Term $r8;
        java.lang.Object $r5, $r10;

        r0 := @this: org.apache.solr.client.solrj.response.TermsResponse;

        r2 := @parameter0: org.apache.solr.common.util.NamedList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.solr.client.solrj.response.TermsResponse: java.util.Map termMap> = $r1;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r2.<org.apache.solr.common.util.NamedList: int size()>();

        if i3 >= $i0 goto label4;

        $r3 = virtualinvoke r2.<org.apache.solr.common.util.NamedList: java.lang.String getName(int)>(i3);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = virtualinvoke r2.<org.apache.solr.common.util.NamedList: java.lang.Object getVal(int)>(i3);

        r6 = (org.apache.solr.common.util.NamedList) $r5;

        i4 = 0;

     label2:
        $i1 = virtualinvoke r6.<org.apache.solr.common.util.NamedList: int size()>();

        if i4 >= $i1 goto label3;

        $r8 = new org.apache.solr.client.solrj.response.TermsResponse$Term;

        $r9 = virtualinvoke r6.<org.apache.solr.common.util.NamedList: java.lang.String getName(int)>(i4);

        $r10 = virtualinvoke r6.<org.apache.solr.common.util.NamedList: java.lang.Object getVal(int)>(i4);

        $r11 = (java.lang.Number) $r10;

        $l2 = virtualinvoke $r11.<java.lang.Number: long longValue()>();

        specialinvoke $r8.<org.apache.solr.client.solrj.response.TermsResponse$Term: void <init>(java.lang.String,long)>($r9, $l2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        i4 = i4 + 1;

        goto label2;

     label3:
        $r7 = r0.<org.apache.solr.client.solrj.response.TermsResponse: java.util.Map termMap>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        i3 = i3 + 1;

        goto label1;

     label4:
        return;
    }

    public java.util.List getTerms(java.lang.String)
    {
        java.util.List $r4;
        org.apache.solr.client.solrj.response.TermsResponse r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.solr.client.solrj.response.TermsResponse;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.client.solrj.response.TermsResponse: java.util.Map termMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public java.util.Map getTermMap()
    {
        org.apache.solr.client.solrj.response.TermsResponse r0;
        java.util.Map $r1;

        r0 := @this: org.apache.solr.client.solrj.response.TermsResponse;

        $r1 = r0.<org.apache.solr.client.solrj.response.TermsResponse: java.util.Map termMap>;

        return $r1;
    }
}
