public class org.waveprotocol.wave.client.editor.testing.FakeEditorEvent extends org.waveprotocol.wave.client.common.util.FakeSignalEvent implements org.waveprotocol.wave.client.editor.event.EditorEvent
{
    public static org.waveprotocol.wave.client.common.util.SignalEventImpl$SignalEventFactory ED_FACTORY;
    private boolean shouldAllowDefault;
    private org.waveprotocol.wave.client.editor.content.ContentPoint caret;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.testing.FakeEditorEvent r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorEvent;

        specialinvoke r0.<org.waveprotocol.wave.client.common.util.FakeSignalEvent: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorEvent: boolean shouldAllowDefault> = 0;

        return;
    }

    public static org.waveprotocol.wave.client.editor.testing.FakeEditorEvent create(java.lang.String)
    {
        org.waveprotocol.wave.client.common.util.SignalEventImpl$SignalEventFactory $r1;
        org.waveprotocol.wave.client.common.util.FakeSignalEvent $r2;
        java.lang.String r0;
        org.waveprotocol.wave.client.editor.testing.FakeEditorEvent $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.client.editor.testing.FakeEditorEvent: org.waveprotocol.wave.client.common.util.SignalEventImpl$SignalEventFactory ED_FACTORY>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.common.util.FakeSignalEvent: org.waveprotocol.wave.client.common.util.FakeSignalEvent createEvent(org.waveprotocol.wave.client.common.util.SignalEventImpl$SignalEventFactory,java.lang.String)>($r1, r0);

        $r3 = (org.waveprotocol.wave.client.editor.testing.FakeEditorEvent) $r2;

        return $r3;
    }

    public static org.waveprotocol.wave.client.editor.testing.FakeEditorEvent create(org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType, int)
    {
        org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType r0;
        org.waveprotocol.wave.client.common.util.SignalEventImpl$SignalEventFactory $r1;
        int i0;
        org.waveprotocol.wave.client.common.util.FakeSignalEvent $r2;
        org.waveprotocol.wave.client.editor.testing.FakeEditorEvent $r3;

        r0 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType;

        i0 := @parameter1: int;

        $r1 = <org.waveprotocol.wave.client.editor.testing.FakeEditorEvent: org.waveprotocol.wave.client.common.util.SignalEventImpl$SignalEventFactory ED_FACTORY>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.common.util.FakeSignalEvent: org.waveprotocol.wave.client.common.util.FakeSignalEvent createKeyPress(org.waveprotocol.wave.client.common.util.SignalEventImpl$SignalEventFactory,org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType,int,java.util.EnumSet)>($r1, r0, i0, null);

        $r3 = (org.waveprotocol.wave.client.editor.testing.FakeEditorEvent) $r2;

        return $r3;
    }

    public static org.waveprotocol.wave.client.editor.testing.FakeEditorEvent createPasteEvent()
    {
        org.waveprotocol.wave.client.editor.testing.FakeEditorEvent $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.testing.FakeEditorEvent: org.waveprotocol.wave.client.editor.testing.FakeEditorEvent create(java.lang.String)>("paste");

        return $r0;
    }

    public static org.waveprotocol.wave.client.editor.testing.FakeEditorEvent[] compositionSequence(int)
    {
        org.waveprotocol.wave.client.editor.testing.FakeEditorEvent $r1, $r2, $r3;
        int i0, $i1, $i2, i3;
        org.waveprotocol.wave.client.editor.testing.FakeEditorEvent[] r0;

        i0 := @parameter0: int;

        $i1 = i0 + 2;

        r0 = newarray (org.waveprotocol.wave.client.editor.testing.FakeEditorEvent)[$i1];

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.testing.FakeEditorEvent: org.waveprotocol.wave.client.editor.testing.FakeEditorEvent create(java.lang.String)>("compositionstart");

        r0[0] = $r1;

        i3 = 1;

     label1:
        if i3 > i0 goto label2;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.testing.FakeEditorEvent: org.waveprotocol.wave.client.editor.testing.FakeEditorEvent create(java.lang.String)>("compositionupdate");

        r0[i3] = $r3;

        i3 = i3 + 1;

        goto label1;

     label2:
        $i2 = i0 + 1;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.testing.FakeEditorEvent: org.waveprotocol.wave.client.editor.testing.FakeEditorEvent create(java.lang.String)>("compositionend");

        r0[$i2] = $r2;

        return r0;
    }

    public void allowBrowserDefault()
    {
        org.waveprotocol.wave.client.editor.testing.FakeEditorEvent r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorEvent;

        r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorEvent: boolean shouldAllowDefault> = 1;

        return;
    }

    public org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()
    {
        org.waveprotocol.wave.client.editor.content.ContentPoint $r1;
        org.waveprotocol.wave.client.editor.testing.FakeEditorEvent r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorEvent;

        $r1 = r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint caret>;

        return $r1;
    }

    public void setCaret(org.waveprotocol.wave.client.editor.content.ContentPoint)
    {
        org.waveprotocol.wave.client.editor.content.ContentPoint r1;
        org.waveprotocol.wave.client.editor.testing.FakeEditorEvent r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorEvent;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentPoint;

        r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint caret> = r1;

        return;
    }

    public boolean shouldAllowBrowserDefault()
    {
        org.waveprotocol.wave.client.editor.testing.FakeEditorEvent r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorEvent;

        $z0 = r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorEvent: boolean shouldAllowDefault>;

        return $z0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.testing.FakeEditorEvent$1 $r0;

        $r0 = new org.waveprotocol.wave.client.editor.testing.FakeEditorEvent$1;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorEvent$1: void <init>()>();

        <org.waveprotocol.wave.client.editor.testing.FakeEditorEvent: org.waveprotocol.wave.client.common.util.SignalEventImpl$SignalEventFactory ED_FACTORY> = $r0;

        return;
    }
}
