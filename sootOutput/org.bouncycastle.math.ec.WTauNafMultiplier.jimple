class org.bouncycastle.math.ec.WTauNafMultiplier extends java.lang.Object implements org.bouncycastle.math.ec.ECMultiplier
{

    void <init>()
    {
        org.bouncycastle.math.ec.WTauNafMultiplier r0;

        r0 := @this: org.bouncycastle.math.ec.WTauNafMultiplier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.bouncycastle.math.ec.ECPoint multiply(org.bouncycastle.math.ec.ECPoint, java.math.BigInteger, org.bouncycastle.math.ec.PreCompInfo)
    {
        org.bouncycastle.math.ec.ECFieldElement $r4;
        org.bouncycastle.math.ec.ECPoint r0;
        byte $b1, $b2;
        int $i0;
        org.bouncycastle.math.ec.ECPoint$F2m r1, $r11;
        java.math.BigInteger $r5, r7;
        org.bouncycastle.math.ec.ZTauElement $r8;
        boolean $z0;
        org.bouncycastle.math.ec.ECCurve $r2;
        java.math.BigInteger[] $r6;
        java.lang.IllegalArgumentException $r12;
        org.bouncycastle.math.ec.WTauNafMultiplier r9;
        org.bouncycastle.math.ec.PreCompInfo r10;
        org.bouncycastle.math.ec.ECCurve$F2m r3;

        r9 := @this: org.bouncycastle.math.ec.WTauNafMultiplier;

        r0 := @parameter0: org.bouncycastle.math.ec.ECPoint;

        r7 := @parameter1: java.math.BigInteger;

        r10 := @parameter2: org.bouncycastle.math.ec.PreCompInfo;

        $z0 = r0 instanceof org.bouncycastle.math.ec.ECPoint$F2m;

        if $z0 != 0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only ECPoint.F2m can be used in WTauNafMultiplier");

        throw $r12;

     label1:
        r1 = (org.bouncycastle.math.ec.ECPoint$F2m) r0;

        $r2 = virtualinvoke r1.<org.bouncycastle.math.ec.ECPoint$F2m: org.bouncycastle.math.ec.ECCurve getCurve()>();

        r3 = (org.bouncycastle.math.ec.ECCurve$F2m) $r2;

        $i0 = virtualinvoke r3.<org.bouncycastle.math.ec.ECCurve$F2m: int getM()>();

        $r4 = virtualinvoke r3.<org.bouncycastle.math.ec.ECCurve$F2m: org.bouncycastle.math.ec.ECFieldElement getA()>();

        $r5 = virtualinvoke $r4.<org.bouncycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $b1 = virtualinvoke $r5.<java.math.BigInteger: byte byteValue()>();

        $b2 = virtualinvoke r3.<org.bouncycastle.math.ec.ECCurve$F2m: byte getMu()>();

        $r6 = virtualinvoke r3.<org.bouncycastle.math.ec.ECCurve$F2m: java.math.BigInteger[] getSi()>();

        $r8 = staticinvoke <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.ZTauElement partModReduction(java.math.BigInteger,int,byte,java.math.BigInteger[],byte,byte)>(r7, $i0, $b1, $r6, $b2, 10);

        $r11 = specialinvoke r9.<org.bouncycastle.math.ec.WTauNafMultiplier: org.bouncycastle.math.ec.ECPoint$F2m multiplyWTnaf(org.bouncycastle.math.ec.ECPoint$F2m,org.bouncycastle.math.ec.ZTauElement,org.bouncycastle.math.ec.PreCompInfo,byte,byte)>(r1, $r8, r10, $b1, $b2);

        return $r11;
    }

    private org.bouncycastle.math.ec.ECPoint$F2m multiplyWTnaf(org.bouncycastle.math.ec.ECPoint$F2m, org.bouncycastle.math.ec.ZTauElement, org.bouncycastle.math.ec.PreCompInfo, byte, byte)
    {
        byte[] $r3;
        org.bouncycastle.math.ec.ZTauElement[] r8;
        org.bouncycastle.math.ec.WTauNafMultiplier r7;
        byte b0, b1;
        org.bouncycastle.math.ec.PreCompInfo r5;
        java.math.BigInteger $r0, $r2;
        org.bouncycastle.math.ec.ECPoint$F2m r4, $r6;
        org.bouncycastle.math.ec.ZTauElement r1;

        r7 := @this: org.bouncycastle.math.ec.WTauNafMultiplier;

        r4 := @parameter0: org.bouncycastle.math.ec.ECPoint$F2m;

        r1 := @parameter1: org.bouncycastle.math.ec.ZTauElement;

        r5 := @parameter2: org.bouncycastle.math.ec.PreCompInfo;

        b0 := @parameter3: byte;

        b1 := @parameter4: byte;

        if b0 != 0 goto label1;

        r8 = <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.ZTauElement[] alpha0>;

        goto label2;

     label1:
        r8 = <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.ZTauElement[] alpha1>;

     label2:
        $r0 = staticinvoke <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger getTw(byte,int)>(b1, 4);

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(16L);

        $r3 = staticinvoke <org.bouncycastle.math.ec.Tnaf: byte[] tauAdicWNaf(byte,org.bouncycastle.math.ec.ZTauElement,byte,java.math.BigInteger,java.math.BigInteger,org.bouncycastle.math.ec.ZTauElement[])>(b1, r1, 4, $r2, $r0, r8);

        $r6 = staticinvoke <org.bouncycastle.math.ec.WTauNafMultiplier: org.bouncycastle.math.ec.ECPoint$F2m multiplyFromWTnaf(org.bouncycastle.math.ec.ECPoint$F2m,byte[],org.bouncycastle.math.ec.PreCompInfo)>(r4, $r3, r5);

        return $r6;
    }

    private static org.bouncycastle.math.ec.ECPoint$F2m multiplyFromWTnaf(org.bouncycastle.math.ec.ECPoint$F2m, byte[], org.bouncycastle.math.ec.PreCompInfo)
    {
        byte[] r10;
        org.bouncycastle.math.ec.ECFieldElement $r3;
        org.bouncycastle.math.ec.ECPoint $r9;
        byte $b0, $b2, $b3, $b4, $b6;
        int $i1, $i5, i7, $i8, $i9, $i10, $i12;
        org.bouncycastle.math.ec.ECPoint$F2m r0, $r11, $r12, $r13, r16;
        java.math.BigInteger $r4;
        boolean $z0;
        org.bouncycastle.math.ec.ECCurve $r1, $r8;
        org.bouncycastle.math.ec.ECPoint$F2m[] $r6, r15;
        org.bouncycastle.math.ec.WTauNafPreCompInfo $r14, $r17;
        org.bouncycastle.math.ec.PreCompInfo r5;
        org.bouncycastle.math.ec.ECCurve$F2m r2;

        r0 := @parameter0: org.bouncycastle.math.ec.ECPoint$F2m;

        r10 := @parameter1: byte[];

        r5 := @parameter2: org.bouncycastle.math.ec.PreCompInfo;

        $r1 = virtualinvoke r0.<org.bouncycastle.math.ec.ECPoint$F2m: org.bouncycastle.math.ec.ECCurve getCurve()>();

        r2 = (org.bouncycastle.math.ec.ECCurve$F2m) $r1;

        $r3 = virtualinvoke r2.<org.bouncycastle.math.ec.ECCurve$F2m: org.bouncycastle.math.ec.ECFieldElement getA()>();

        $r4 = virtualinvoke $r3.<org.bouncycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $b0 = virtualinvoke $r4.<java.math.BigInteger: byte byteValue()>();

        if r5 == null goto label1;

        $z0 = r5 instanceof org.bouncycastle.math.ec.WTauNafPreCompInfo;

        if $z0 != 0 goto label2;

     label1:
        $r6 = staticinvoke <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.ECPoint$F2m[] getPreComp(org.bouncycastle.math.ec.ECPoint$F2m,byte)>(r0, $b0);

        r15 = $r6;

        $r17 = new org.bouncycastle.math.ec.WTauNafPreCompInfo;

        specialinvoke $r17.<org.bouncycastle.math.ec.WTauNafPreCompInfo: void <init>(org.bouncycastle.math.ec.ECPoint$F2m[])>($r6);

        virtualinvoke r0.<org.bouncycastle.math.ec.ECPoint$F2m: void setPreCompInfo(org.bouncycastle.math.ec.PreCompInfo)>($r17);

        goto label3;

     label2:
        $r14 = (org.bouncycastle.math.ec.WTauNafPreCompInfo) r5;

        r15 = virtualinvoke $r14.<org.bouncycastle.math.ec.WTauNafPreCompInfo: org.bouncycastle.math.ec.ECPoint$F2m[] getPreComp()>();

     label3:
        $r8 = virtualinvoke r0.<org.bouncycastle.math.ec.ECPoint$F2m: org.bouncycastle.math.ec.ECCurve getCurve()>();

        $r9 = virtualinvoke $r8.<org.bouncycastle.math.ec.ECCurve: org.bouncycastle.math.ec.ECPoint getInfinity()>();

        r16 = (org.bouncycastle.math.ec.ECPoint$F2m) $r9;

        $i1 = lengthof r10;

        i7 = $i1 - 1;

     label4:
        if i7 < 0 goto label7;

        $r11 = staticinvoke <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.ECPoint$F2m tau(org.bouncycastle.math.ec.ECPoint$F2m)>(r16);

        r16 = $r11;

        $b2 = r10[i7];

        if $b2 == 0 goto label6;

        $b3 = r10[i7];

        $i8 = (int) $b3;

        if $i8 <= 0 goto label5;

        $b6 = r10[i7];

        $i9 = (int) $b6;

        $r13 = r15[$i9];

        r16 = virtualinvoke $r11.<org.bouncycastle.math.ec.ECPoint$F2m: org.bouncycastle.math.ec.ECPoint$F2m addSimple(org.bouncycastle.math.ec.ECPoint$F2m)>($r13);

        goto label6;

     label5:
        $b4 = r10[i7];

        $i10 = (int) $b4;

        $i5 = neg $i10;

        $r12 = r15[$i5];

        r16 = virtualinvoke $r11.<org.bouncycastle.math.ec.ECPoint$F2m: org.bouncycastle.math.ec.ECPoint$F2m subtractSimple(org.bouncycastle.math.ec.ECPoint$F2m)>($r12);

     label6:
        $i12 = (int) -1;

        i7 = i7 + $i12;

        goto label4;

     label7:
        return r16;
    }
}
