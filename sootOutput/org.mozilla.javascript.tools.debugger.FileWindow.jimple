class org.mozilla.javascript.tools.debugger.FileWindow extends javax.swing.JInternalFrame implements java.awt.event.ActionListener
{
    private static final long serialVersionUID;
    private org.mozilla.javascript.tools.debugger.SwingGui debugGui;
    private org.mozilla.javascript.tools.debugger.Dim$SourceInfo sourceInfo;
    org.mozilla.javascript.tools.debugger.FileTextArea textArea;
    private org.mozilla.javascript.tools.debugger.FileHeader fileHeader;
    private javax.swing.JScrollPane p;
    int currentPos;
    private javax.swing.JLabel statusBar;

    void load()
    {
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo $r4;
        java.lang.Thread $r6;
        java.lang.String $r1, $r5;
        org.mozilla.javascript.tools.debugger.FileWindow r0;
        org.mozilla.javascript.tools.debugger.RunProxy $r2;
        org.mozilla.javascript.tools.debugger.SwingGui $r3;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileWindow;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileWindow: java.lang.String getUrl()>();

        if $r1 == null goto label1;

        $r2 = new org.mozilla.javascript.tools.debugger.RunProxy;

        $r3 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        specialinvoke $r2.<org.mozilla.javascript.tools.debugger.RunProxy: void <init>(org.mozilla.javascript.tools.debugger.SwingGui,int)>($r3, 2);

        $r2.<org.mozilla.javascript.tools.debugger.RunProxy: java.lang.String fileName> = $r1;

        $r4 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.Dim$SourceInfo sourceInfo>;

        $r5 = virtualinvoke $r4.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: java.lang.String source()>();

        $r2.<org.mozilla.javascript.tools.debugger.RunProxy: java.lang.String text> = $r5;

        $r6 = new java.lang.Thread;

        specialinvoke $r6.<java.lang.Thread: void <init>(java.lang.Runnable)>($r2);

        virtualinvoke $r6.<java.lang.Thread: void start()>();

     label1:
        return;
    }

    public int getPosition(int)
    {
        org.mozilla.javascript.tools.debugger.FileTextArea $r1;
        int i0, i1, $i3;
        javax.swing.text.BadLocationException $r2;
        org.mozilla.javascript.tools.debugger.FileWindow r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileWindow;

        i0 := @parameter0: int;

        $i3 = (int) -1;

        i1 = $i3;

     label1:
        $r1 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        i1 = virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.FileTextArea: int getLineStartOffset(int)>(i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return i1;

        catch javax.swing.text.BadLocationException from label1 to label2 with label3;
    }

    public boolean isBreakPoint(int)
    {
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo $r1, $r2;
        int i0;
        org.mozilla.javascript.tools.debugger.FileWindow r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileWindow;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.Dim$SourceInfo sourceInfo>;

        $z0 = virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean breakableLine(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.Dim$SourceInfo sourceInfo>;

        $z1 = virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean 'breakpoint'(int)>(i0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void toggleBreakPoint(int)
    {
        int i0;
        org.mozilla.javascript.tools.debugger.FileWindow r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileWindow;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileWindow: boolean isBreakPoint(int)>(i0);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileWindow: void setBreakPoint(int)>(i0);

        goto label2;

     label1:
        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileWindow: void clearBreakPoint(int)>(i0);

     label2:
        return;
    }

    public void setBreakPoint(int)
    {
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo $r1, $r2;
        org.mozilla.javascript.tools.debugger.FileHeader $r3;
        int i0;
        org.mozilla.javascript.tools.debugger.FileWindow r0;
        boolean $z0, $z1;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileWindow;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.Dim$SourceInfo sourceInfo>;

        $z0 = virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean breakableLine(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.Dim$SourceInfo sourceInfo>;

        $z1 = virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean 'breakpoint'(int,boolean)>(i0, 1);

        if $z1 == 0 goto label1;

        $r3 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileHeader fileHeader>;

        virtualinvoke $r3.<org.mozilla.javascript.tools.debugger.FileHeader: void repaint()>();

     label1:
        return;
    }

    public void clearBreakPoint(int)
    {
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo $r1, $r2;
        org.mozilla.javascript.tools.debugger.FileHeader $r3;
        int i0;
        org.mozilla.javascript.tools.debugger.FileWindow r0;
        boolean $z0, $z1;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileWindow;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.Dim$SourceInfo sourceInfo>;

        $z0 = virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean breakableLine(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.Dim$SourceInfo sourceInfo>;

        $z1 = virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean 'breakpoint'(int,boolean)>(i0, 0);

        if $z1 == 0 goto label1;

        $r3 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileHeader fileHeader>;

        virtualinvoke $r3.<org.mozilla.javascript.tools.debugger.FileHeader: void repaint()>();

     label1:
        return;
    }

    public void <init>(org.mozilla.javascript.tools.debugger.SwingGui, org.mozilla.javascript.tools.debugger.Dim$SourceInfo)
    {
        org.mozilla.javascript.tools.debugger.FileTextArea $r6, $r7, $r10, $r15, $r16;
        int $i1;
        java.lang.String $r2, $r3;
        org.mozilla.javascript.tools.debugger.FileHeader $r12, $r18;
        org.mozilla.javascript.tools.debugger.FileWindow r0;
        javax.swing.JScrollPane $r11, $r13, $r14, $r17;
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r1;
        org.mozilla.javascript.tools.debugger.SwingGui r4;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileWindow;

        r4 := @parameter0: org.mozilla.javascript.tools.debugger.SwingGui;

        r1 := @parameter1: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        $r2 = virtualinvoke r1.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: java.lang.String url()>();

        $r3 = staticinvoke <org.mozilla.javascript.tools.debugger.SwingGui: java.lang.String getShortName(java.lang.String)>($r2);

        specialinvoke r0.<javax.swing.JInternalFrame: void <init>(java.lang.String,boolean,boolean,boolean,boolean)>($r3, 1, 1, 1, 1);

        r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.SwingGui debugGui> = r4;

        r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.Dim$SourceInfo sourceInfo> = r1;

        specialinvoke r0.<org.mozilla.javascript.tools.debugger.FileWindow: void updateToolTip()>();

        $i1 = (int) -1;

        r0.<org.mozilla.javascript.tools.debugger.FileWindow: int currentPos> = $i1;

        $r16 = new org.mozilla.javascript.tools.debugger.FileTextArea;

        specialinvoke $r16.<org.mozilla.javascript.tools.debugger.FileTextArea: void <init>(org.mozilla.javascript.tools.debugger.FileWindow)>(r0);

        r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea> = $r16;

        $r6 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        virtualinvoke $r6.<org.mozilla.javascript.tools.debugger.FileTextArea: void setRows(int)>(24);

        $r7 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        virtualinvoke $r7.<org.mozilla.javascript.tools.debugger.FileTextArea: void setColumns(int)>(80);

        $r17 = new javax.swing.JScrollPane;

        specialinvoke $r17.<javax.swing.JScrollPane: void <init>()>();

        r0.<org.mozilla.javascript.tools.debugger.FileWindow: javax.swing.JScrollPane p> = $r17;

        $r18 = new org.mozilla.javascript.tools.debugger.FileHeader;

        specialinvoke $r18.<org.mozilla.javascript.tools.debugger.FileHeader: void <init>(org.mozilla.javascript.tools.debugger.FileWindow)>(r0);

        r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileHeader fileHeader> = $r18;

        $r11 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: javax.swing.JScrollPane p>;

        $r10 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        virtualinvoke $r11.<javax.swing.JScrollPane: void setViewportView(java.awt.Component)>($r10);

        $r13 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: javax.swing.JScrollPane p>;

        $r12 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileHeader fileHeader>;

        virtualinvoke $r13.<javax.swing.JScrollPane: void setRowHeaderView(java.awt.Component)>($r12);

        $r14 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: javax.swing.JScrollPane p>;

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileWindow: void setContentPane(java.awt.Container)>($r14);

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileWindow: void pack()>();

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileWindow: void updateText(org.mozilla.javascript.tools.debugger.Dim$SourceInfo)>(r1);

        $r15 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        virtualinvoke $r15.<org.mozilla.javascript.tools.debugger.FileTextArea: void select(int)>(0);

        return;
    }

    private void updateToolTip()
    {
        javax.swing.JComponent $r2;
        java.lang.String $r3;
        java.awt.Component $r1;
        org.mozilla.javascript.tools.debugger.FileWindow r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileWindow;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileWindow: java.awt.Component getComponent(int)>(1);

        if $r1 == null goto label1;

        $z0 = $r1 instanceof javax.swing.JComponent;

        if $z0 == 0 goto label1;

        $r2 = (javax.swing.JComponent) $r1;

        $r3 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.FileWindow: java.lang.String getUrl()>();

        virtualinvoke $r2.<javax.swing.JComponent: void setToolTipText(java.lang.String)>($r3);

     label1:
        return;
    }

    public java.lang.String getUrl()
    {
        java.lang.String $r2;
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo $r1;
        org.mozilla.javascript.tools.debugger.FileWindow r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileWindow;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.Dim$SourceInfo sourceInfo>;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: java.lang.String url()>();

        return $r2;
    }

    public void updateText(org.mozilla.javascript.tools.debugger.Dim$SourceInfo)
    {
        org.mozilla.javascript.tools.debugger.FileHeader $r7, $r8;
        org.mozilla.javascript.tools.debugger.FileWindow r0;
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r1;
        org.mozilla.javascript.tools.debugger.FileTextArea $r3, $r5, $r6;
        int $i0, i1, $i3;
        java.lang.String $r2, $r4;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileWindow;

        r1 := @parameter0: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.Dim$SourceInfo sourceInfo> = r1;

        $r2 = virtualinvoke r1.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: java.lang.String source()>();

        $r3 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        $r4 = virtualinvoke $r3.<org.mozilla.javascript.tools.debugger.FileTextArea: java.lang.String getText()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r5 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        virtualinvoke $r5.<org.mozilla.javascript.tools.debugger.FileTextArea: void setText(java.lang.String)>($r2);

        i1 = 0;

        $i0 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: int currentPos>;

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        i1 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: int currentPos>;

     label1:
        $r6 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        virtualinvoke $r6.<org.mozilla.javascript.tools.debugger.FileTextArea: void select(int)>(i1);

     label2:
        $r7 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileHeader fileHeader>;

        virtualinvoke $r7.<org.mozilla.javascript.tools.debugger.FileHeader: void update()>();

        $r8 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileHeader fileHeader>;

        virtualinvoke $r8.<org.mozilla.javascript.tools.debugger.FileHeader: void repaint()>();

        return;
    }

    public void setPosition(int)
    {
        org.mozilla.javascript.tools.debugger.FileHeader $r2;
        org.mozilla.javascript.tools.debugger.FileTextArea $r1;
        int i0;
        org.mozilla.javascript.tools.debugger.FileWindow r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileWindow;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.FileTextArea: void select(int)>(i0);

        r0.<org.mozilla.javascript.tools.debugger.FileWindow: int currentPos> = i0;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileHeader fileHeader>;

        virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.FileHeader: void repaint()>();

        return;
    }

    public void select(int, int)
    {
        org.mozilla.javascript.tools.debugger.FileWindow r0;
        org.mozilla.javascript.tools.debugger.FileTextArea $r1, $r3, $r4;
        int $i0, i1, i2;
        javax.swing.text.Document $r2;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileWindow;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.FileTextArea: javax.swing.text.Document getDocument()>();

        $i0 = interfaceinvoke $r2.<javax.swing.text.Document: int getLength()>();

        $r3 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        virtualinvoke $r3.<org.mozilla.javascript.tools.debugger.FileTextArea: void select(int,int)>($i0, $i0);

        $r4 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        virtualinvoke $r4.<org.mozilla.javascript.tools.debugger.FileTextArea: void select(int,int)>(i1, i2);

        return;
    }

    public void dispose()
    {
        org.mozilla.javascript.tools.debugger.FileWindow r0;
        org.mozilla.javascript.tools.debugger.SwingGui $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.FileWindow;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.SwingGui: void removeWindow(org.mozilla.javascript.tools.debugger.FileWindow)>(r0);

        specialinvoke r0.<javax.swing.JInternalFrame: void dispose()>();

        return;
    }

    public void actionPerformed(java.awt.event.ActionEvent)
    {
        org.mozilla.javascript.tools.debugger.FileTextArea $r3;
        java.lang.String $r1;
        java.awt.event.ActionEvent r0;
        org.mozilla.javascript.tools.debugger.FileWindow r2;
        boolean $z0, $z1, $z2;

        r2 := @this: org.mozilla.javascript.tools.debugger.FileWindow;

        r0 := @parameter0: java.awt.event.ActionEvent;

        $r1 = virtualinvoke r0.<java.awt.event.ActionEvent: java.lang.String getActionCommand()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("Cut");

        if $z0 == 0 goto label1;

        goto label3;

     label1:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("Copy");

        if $z1 == 0 goto label2;

        $r3 = r2.<org.mozilla.javascript.tools.debugger.FileWindow: org.mozilla.javascript.tools.debugger.FileTextArea textArea>;

        virtualinvoke $r3.<org.mozilla.javascript.tools.debugger.FileTextArea: void copy()>();

        goto label3;

     label2:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("Paste");

        if $z2 == 0 goto label3;

     label3:
        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.tools.debugger.FileWindow: long serialVersionUID> = -6212382604952082370L;

        return;
    }
}
