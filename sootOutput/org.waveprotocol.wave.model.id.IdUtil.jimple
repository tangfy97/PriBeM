public class org.waveprotocol.wave.model.id.IdUtil extends java.lang.Object implements org.waveprotocol.wave.model.id.IdConstants
{
    static final boolean $assertionsDisabled;

    protected void <init>()
    {
        org.waveprotocol.wave.model.id.IdUtil r0;

        r0 := @this: org.waveprotocol.wave.model.id.IdUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isConversationRootWaveletId(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r0;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getId()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("conv+root");

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isLegacyConversationRootWaveletId(org.waveprotocol.wave.model.id.WaveletId)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean isLegacyConversationRootWaveletId(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getId()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("conversation/root");

        return $z0;
    }

    public static boolean isConversationalId(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getId()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: java.lang.String getInitialToken(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("conv");

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isLegacyConversationalId(org.waveprotocol.wave.model.id.WaveletId)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean isLegacyConversationalId(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getId()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: java.lang.String getInitialToken(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        return $z0;
    }

    public static boolean isBlipId(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean hasInitialTokenUnescaped(java.lang.String,java.lang.String)>(r0, "b");

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isGhostBlipId(java.lang.String)>(r0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isLegacyBlipId(java.lang.String)>(r0);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private static final boolean isLegacyBlipId(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("*");

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("m/");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("attach+");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("spell+");

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    public static final boolean isGhostBlipId(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean hasInitialTokenUnescaped(java.lang.String,java.lang.String)>(r0, "g");

        return $z0;
    }

    public static boolean isAttachmentDataDocument(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean hasInitialTokenUnescaped(java.lang.String,java.lang.String)>(r0, "attach");

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isLegacyAttachmentDataDocumentId(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean isLegacyAttachmentDataDocumentId(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("m/attachment/");

        return $z0;
    }

    public static boolean isManifestDocument(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("conversation");

        return $z0;
    }

    public static boolean isTagsDataDocument(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("tags");

        return $z0;
    }

    public static boolean isRobotDocId(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean hasInitialTokenUnescaped(java.lang.String,java.lang.String)>(r0, "r");

        return $z0;
    }

    public static final java.lang.String getUserDataWaveletAddress(org.waveprotocol.wave.model.id.WaveletId)
    {
        int $i0;
        org.waveprotocol.wave.model.id.WaveletId r0;
        java.lang.String[] $r2;
        java.lang.String $r1, $r3, $r4;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getId()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: java.lang.String[] split(java.lang.String)>($r1);

        $i0 = lengthof $r2;

        if $i0 != 2 goto label1;

        $r3 = $r2[0];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("user");

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r4 = $r2[1];

        return $r4;
    }

    public static final boolean isUserDataWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getId()>();

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean hasInitialTokenUnescaped(java.lang.String,java.lang.String)>($r1, "user");

        return $z0;
    }

    public static final boolean isUserDataWavelet(java.lang.String, org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r0, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: java.lang.String getUserDataWaveletAddress(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public static java.lang.String getInitialToken(java.lang.String)
    {
        org.waveprotocol.wave.model.id.SimplePrefixEscaper $r1;
        int $i0;
        java.lang.String[] $r2;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.model.id.SimplePrefixEscaper: org.waveprotocol.wave.model.id.SimplePrefixEscaper DEFAULT_ESCAPER>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.lang.String[] split(char,java.lang.String)>(43, r0);

        $i0 = lengthof $r2;

        if $i0 <= 1 goto label1;

        $r3 = $r2[0];

        return $r3;

     label1:
        return "";
    }

    public static boolean hasInitialTokenUnescaped(java.lang.String, java.lang.String)
    {
        java.lang.AssertionError $r7;
        int $i0, $i2;
        java.lang.StringBuilder $r3, $r4, $r8;
        java.lang.String r0, r2, $r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.id.IdUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(43);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(43);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>($r5);

        return $z1;
    }

    public static java.lang.String[] split(java.lang.String)
    {
        org.waveprotocol.wave.model.id.SimplePrefixEscaper $r1;
        java.lang.String[] $r2;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = <org.waveprotocol.wave.model.id.SimplePrefixEscaper: org.waveprotocol.wave.model.id.SimplePrefixEscaper DEFAULT_ESCAPER>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.lang.String[] split(char,java.lang.String)>(43, r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static transient java.lang.String join(java.lang.String[])
    {
        java.lang.String[] r0;
        org.waveprotocol.wave.model.id.SimplePrefixEscaper $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.String[];

        $r1 = <org.waveprotocol.wave.model.id.SimplePrefixEscaper: org.waveprotocol.wave.model.id.SimplePrefixEscaper DEFAULT_ESCAPER>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.lang.String join(char,java.lang.String[])>(43, r0);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/id/IdUtil;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.id.IdUtil: boolean $assertionsDisabled> = $z1;

        return;
    }
}
