public class org.apache.log4j.NDC extends java.lang.Object
{
    static java.util.Hashtable ht;
    static int pushCounter;
    static final int REAP_THRESHOLD;

    private void <init>()
    {
        org.apache.log4j.NDC r0;

        r0 := @this: org.apache.log4j.NDC;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.util.Stack getCurrentStack()
    {
        java.lang.Thread $r2;
        java.lang.Object $r3;
        java.util.Hashtable $r0, $r1;
        java.util.Stack $r4;

        $r0 = <org.apache.log4j.NDC: java.util.Hashtable ht>;

        if $r0 == null goto label1;

        $r1 = <org.apache.log4j.NDC: java.util.Hashtable ht>;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.util.Stack) $r3;

        return $r4;

     label1:
        return null;
    }

    public static void clear()
    {
        java.util.Stack $r0;

        $r0 = staticinvoke <org.apache.log4j.NDC: java.util.Stack getCurrentStack()>();

        if $r0 == null goto label1;

        virtualinvoke $r0.<java.util.Vector: void setSize(int)>(0);

     label1:
        return;
    }

    public static java.util.Stack cloneStack()
    {
        java.lang.Object $r1;
        java.util.Stack $r0, $r2;

        $r0 = staticinvoke <org.apache.log4j.NDC: java.util.Stack getCurrentStack()>();

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke $r0.<java.util.Vector: java.lang.Object clone()>();

        $r2 = (java.util.Stack) $r1;

        return $r2;
    }

    public static void inherit(java.util.Stack)
    {
        java.util.Stack r0;
        java.util.Hashtable $r1;
        java.lang.Thread $r2;

        r0 := @parameter0: java.util.Stack;

        if r0 == null goto label1;

        $r1 = <org.apache.log4j.NDC: java.util.Hashtable ht>;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r0);

     label1:
        return;
    }

    public static java.lang.String get()
    {
        org.apache.log4j.NDC$DiagnosticContext $r2;
        java.lang.Object $r1;
        java.lang.String $r3;
        java.util.Stack $r0;
        boolean $z0;

        $r0 = staticinvoke <org.apache.log4j.NDC: java.util.Stack getCurrentStack()>();

        if $r0 == null goto label1;

        $z0 = virtualinvoke $r0.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke $r0.<java.util.Stack: java.lang.Object peek()>();

        $r2 = (org.apache.log4j.NDC$DiagnosticContext) $r1;

        $r3 = $r2.<org.apache.log4j.NDC$DiagnosticContext: java.lang.String fullMessage>;

        return $r3;

     label1:
        return null;
    }

    public static int getDepth()
    {
        int $i0;
        java.util.Stack $r0;

        $r0 = staticinvoke <org.apache.log4j.NDC: java.util.Stack getCurrentStack()>();

        if $r0 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r0.<java.util.Vector: int size()>();

        return $i0;
    }

    private static void lazyRemove()
    {
        java.lang.Throwable $r18;
        java.util.Enumeration $r4;
        java.util.Vector $r2;
        java.lang.StringBuffer $r6, $r7, $r9, $r10, $r12, $r13;
        java.lang.Thread r17, r19;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.lang.String $r8, $r14;
        java.util.Hashtable $r0, $r1, $r3, $r11, $r15;
        boolean $z0, $z1;
        java.lang.Object $r5, $r16;

        $r0 = <org.apache.log4j.NDC: java.util.Hashtable ht>;

        if $r0 != null goto label01;

        return;

     label01:
        $r1 = <org.apache.log4j.NDC: java.util.Hashtable ht>;

        entermonitor $r1;

     label02:
        $i0 = <org.apache.log4j.NDC: int pushCounter>;

        $i1 = $i0 + 1;

        <org.apache.log4j.NDC: int pushCounter> = $i1;

        if $i1 > 5 goto label04;

        exitmonitor $r1;

     label03:
        return;

     label04:
        <org.apache.log4j.NDC: int pushCounter> = 0;

        i4 = 0;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        $r3 = <org.apache.log4j.NDC: java.util.Hashtable ht>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.util.Enumeration keys()>();

     label05:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label08;

        if i4 > 4 goto label08;

        $r16 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r17 = (java.lang.Thread) $r16;

        $z1 = virtualinvoke r17.<java.lang.Thread: boolean isAlive()>();

        if $z1 == 0 goto label06;

        i4 = i4 + 1;

        goto label07;

     label06:
        i4 = 0;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>(r17);

     label07:
        goto label05;

     label08:
        exitmonitor $r1;

     label09:
        goto label12;

     label10:
        $r18 := @caughtexception;

        exitmonitor $r1;

     label11:
        throw $r18;

     label12:
        $i2 = virtualinvoke $r2.<java.util.Vector: int size()>();

        i5 = 0;

     label13:
        if i5 >= $i2 goto label14;

        $r5 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(i5);

        r19 = (java.lang.Thread) $r5;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Lazy NDC removal for thread [");

        $r8 = virtualinvoke r19.<java.lang.Thread: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] (");

        $r11 = <org.apache.log4j.NDC: java.util.Hashtable ht>;

        $i3 = virtualinvoke $r11.<java.util.Hashtable: int size()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(").");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r14);

        $r15 = <org.apache.log4j.NDC: java.util.Hashtable ht>;

        virtualinvoke $r15.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r19);

        i5 = i5 + 1;

        goto label13;

     label14:
        return;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static java.lang.String pop()
    {
        org.apache.log4j.NDC$DiagnosticContext $r2;
        java.lang.Object $r1;
        java.lang.String $r3;
        java.util.Stack $r0;
        boolean $z0;

        $r0 = staticinvoke <org.apache.log4j.NDC: java.util.Stack getCurrentStack()>();

        if $r0 == null goto label1;

        $z0 = virtualinvoke $r0.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke $r0.<java.util.Stack: java.lang.Object pop()>();

        $r2 = (org.apache.log4j.NDC$DiagnosticContext) $r1;

        $r3 = $r2.<org.apache.log4j.NDC$DiagnosticContext: java.lang.String message>;

        return $r3;

     label1:
        return "";
    }

    public static java.lang.String peek()
    {
        org.apache.log4j.NDC$DiagnosticContext $r2;
        java.lang.Object $r1;
        java.lang.String $r3;
        java.util.Stack $r0;
        boolean $z0;

        $r0 = staticinvoke <org.apache.log4j.NDC: java.util.Stack getCurrentStack()>();

        if $r0 == null goto label1;

        $z0 = virtualinvoke $r0.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke $r0.<java.util.Stack: java.lang.Object peek()>();

        $r2 = (org.apache.log4j.NDC$DiagnosticContext) $r1;

        $r3 = $r2.<org.apache.log4j.NDC$DiagnosticContext: java.lang.String message>;

        return $r3;

     label1:
        return "";
    }

    public static void push(java.lang.String)
    {
        java.util.Stack $r0, $r6;
        org.apache.log4j.NDC$DiagnosticContext $r2, $r4, $r5, r9;
        java.lang.Thread $r7;
        java.lang.Object $r1;
        java.lang.String r3;
        java.util.Hashtable $r8;
        boolean $z0;

        r3 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.log4j.NDC: java.util.Stack getCurrentStack()>();

        if $r0 != null goto label1;

        $r5 = new org.apache.log4j.NDC$DiagnosticContext;

        specialinvoke $r5.<org.apache.log4j.NDC$DiagnosticContext: void <init>(java.lang.String,org.apache.log4j.NDC$DiagnosticContext)>(r3, null);

        $r6 = new java.util.Stack;

        specialinvoke $r6.<java.util.Stack: void <init>()>();

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r8 = <org.apache.log4j.NDC: java.util.Hashtable ht>;

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

        virtualinvoke $r6.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r5);

        goto label3;

     label1:
        $z0 = virtualinvoke $r0.<java.util.Vector: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r4 = new org.apache.log4j.NDC$DiagnosticContext;

        specialinvoke $r4.<org.apache.log4j.NDC$DiagnosticContext: void <init>(java.lang.String,org.apache.log4j.NDC$DiagnosticContext)>(r3, null);

        virtualinvoke $r0.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r4);

        goto label3;

     label2:
        $r1 = virtualinvoke $r0.<java.util.Stack: java.lang.Object peek()>();

        r9 = (org.apache.log4j.NDC$DiagnosticContext) $r1;

        $r2 = new org.apache.log4j.NDC$DiagnosticContext;

        specialinvoke $r2.<org.apache.log4j.NDC$DiagnosticContext: void <init>(java.lang.String,org.apache.log4j.NDC$DiagnosticContext)>(r3, r9);

        virtualinvoke $r0.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r2);

     label3:
        return;
    }

    public static void remove()
    {
        java.util.Hashtable $r0, $r1;
        java.lang.Thread $r2;

        $r0 = <org.apache.log4j.NDC: java.util.Hashtable ht>;

        if $r0 == null goto label1;

        $r1 = <org.apache.log4j.NDC: java.util.Hashtable ht>;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r2);

        staticinvoke <org.apache.log4j.NDC: void lazyRemove()>();

     label1:
        return;
    }

    public static void setMaxDepth(int)
    {
        int i0, $i1;
        java.util.Stack $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.apache.log4j.NDC: java.util.Stack getCurrentStack()>();

        if $r0 == null goto label1;

        $i1 = virtualinvoke $r0.<java.util.Vector: int size()>();

        if i0 >= $i1 goto label1;

        virtualinvoke $r0.<java.util.Vector: void setSize(int)>(i0);

     label1:
        return;
    }

    static void <clinit>()
    {
        java.util.Hashtable $r0;

        <org.apache.log4j.NDC: int REAP_THRESHOLD> = 5;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <org.apache.log4j.NDC: java.util.Hashtable ht> = $r0;

        <org.apache.log4j.NDC: int pushCounter> = 0;

        return;
    }
}
