public class org.dom4j.swing.XMLTableDefinition extends java.lang.Object implements java.io.Serializable, org.jaxen.VariableContext
{
    private org.dom4j.XPath rowXPath;
    private java.util.List columns;
    private org.dom4j.swing.XMLTableColumnDefinition[] columnArray;
    private java.util.Map columnNameIndex;
    private org.jaxen.VariableContext variableContext;
    private java.lang.Object rowValue;

    public void <init>()
    {
        org.dom4j.swing.XMLTableDefinition r0;
        java.util.ArrayList $r1;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.swing.XMLTableDefinition: java.util.List columns> = $r1;

        return;
    }

    public static org.dom4j.swing.XMLTableDefinition load(org.dom4j.Document)
    {
        org.dom4j.Document r0;
        org.dom4j.Element $r1;
        org.dom4j.swing.XMLTableDefinition $r2;

        r0 := @parameter0: org.dom4j.Document;

        $r1 = interfaceinvoke r0.<org.dom4j.Document: org.dom4j.Element getRootElement()>();

        $r2 = staticinvoke <org.dom4j.swing.XMLTableDefinition: org.dom4j.swing.XMLTableDefinition load(org.dom4j.Element)>($r1);

        return $r2;
    }

    public static org.dom4j.swing.XMLTableDefinition load(org.dom4j.Element)
    {
        java.util.Iterator $r3;
        int $i0;
        org.dom4j.Element r1, r5;
        java.lang.Object $r4;
        org.dom4j.swing.XMLTableDefinition $r0;
        java.lang.String $r2, $r6, $r7, $r8, $r9;
        boolean $z0;

        r1 := @parameter0: org.dom4j.Element;

        $r0 = new org.dom4j.swing.XMLTableDefinition;

        specialinvoke $r0.<org.dom4j.swing.XMLTableDefinition: void <init>()>();

        $r2 = interfaceinvoke r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("select");

        virtualinvoke $r0.<org.dom4j.swing.XMLTableDefinition: void setRowExpression(java.lang.String)>($r2);

        $r3 = interfaceinvoke r1.<org.dom4j.Element: java.util.Iterator elementIterator(java.lang.String)>("column");

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.dom4j.Element) $r4;

        $r6 = interfaceinvoke r5.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("select");

        $r7 = interfaceinvoke r5.<org.dom4j.Element: java.lang.String getText()>();

        $r8 = interfaceinvoke r5.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String,java.lang.String)>("type", "string");

        $r9 = interfaceinvoke r5.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("columnNameXPath");

        $i0 = staticinvoke <org.dom4j.swing.XMLTableColumnDefinition: int parseType(java.lang.String)>($r8);

        if $r9 == null goto label2;

        virtualinvoke $r0.<org.dom4j.swing.XMLTableDefinition: void addColumnWithXPathName(java.lang.String,java.lang.String,int)>($r9, $r6, $i0);

        goto label3;

     label2:
        virtualinvoke $r0.<org.dom4j.swing.XMLTableDefinition: void addColumn(java.lang.String,java.lang.String,int)>($r7, $r6, $i0);

     label3:
        goto label1;

     label4:
        return $r0;
    }

    public java.lang.Class getColumnClass(int)
    {
        org.dom4j.swing.XMLTableColumnDefinition $r1;
        int i0;
        java.lang.Class $r2;
        org.dom4j.swing.XMLTableDefinition r0;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.swing.XMLTableColumnDefinition getColumn(int)>(i0);

        $r2 = virtualinvoke $r1.<org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class getColumnClass()>();

        return $r2;
    }

    public int getColumnCount()
    {
        int $i0;
        java.util.List $r1;
        org.dom4j.swing.XMLTableDefinition r0;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        $r1 = r0.<org.dom4j.swing.XMLTableDefinition: java.util.List columns>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.lang.String getColumnName(int)
    {
        org.dom4j.swing.XMLTableColumnDefinition $r1;
        int i0;
        org.dom4j.swing.XMLTableDefinition r0;
        java.lang.String $r2;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.swing.XMLTableColumnDefinition getColumn(int)>(i0);

        $r2 = virtualinvoke $r1.<org.dom4j.swing.XMLTableColumnDefinition: java.lang.String getName()>();

        return $r2;
    }

    public org.dom4j.XPath getColumnXPath(int)
    {
        org.dom4j.swing.XMLTableColumnDefinition $r1;
        org.dom4j.XPath $r2;
        int i0;
        org.dom4j.swing.XMLTableDefinition r0;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.swing.XMLTableColumnDefinition getColumn(int)>(i0);

        $r2 = virtualinvoke $r1.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath getXPath()>();

        return $r2;
    }

    public org.dom4j.XPath getColumnNameXPath(int)
    {
        org.dom4j.swing.XMLTableColumnDefinition $r1;
        org.dom4j.XPath $r2;
        int i0;
        org.dom4j.swing.XMLTableDefinition r0;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.swing.XMLTableColumnDefinition getColumn(int)>(i0);

        $r2 = virtualinvoke $r1.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath getColumnNameXPath()>();

        return $r2;
    }

    public synchronized java.lang.Object getValueAt(java.lang.Object, int)
    {
        org.dom4j.swing.XMLTableColumnDefinition $r1;
        java.lang.Throwable $r4;
        int i0;
        java.lang.Object r2, $r3;
        org.dom4j.swing.XMLTableDefinition r0;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.swing.XMLTableColumnDefinition getColumn(int)>(i0);

        entermonitor r0;

     label1:
        r0.<org.dom4j.swing.XMLTableDefinition: java.lang.Object rowValue> = r2;

        $r3 = virtualinvoke $r1.<org.dom4j.swing.XMLTableColumnDefinition: java.lang.Object getValue(java.lang.Object)>(r2);

        r0.<org.dom4j.swing.XMLTableDefinition: java.lang.Object rowValue> = null;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r4;

     label5:
        return $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void addColumn(java.lang.String, java.lang.String)
    {
        org.dom4j.swing.XMLTableDefinition r0;
        java.lang.String r1, r2;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: void addColumn(java.lang.String,java.lang.String,int)>(r1, r2, 0);

        return;
    }

    public void addColumn(java.lang.String, java.lang.String, int)
    {
        org.dom4j.swing.XMLTableColumnDefinition $r3;
        org.dom4j.XPath $r2;
        int i0;
        org.dom4j.swing.XMLTableDefinition r0;
        java.lang.String r1, r4;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.XPath createColumnXPath(java.lang.String)>(r1);

        $r3 = new org.dom4j.swing.XMLTableColumnDefinition;

        specialinvoke $r3.<org.dom4j.swing.XMLTableColumnDefinition: void <init>(java.lang.String,org.dom4j.XPath,int)>(r4, $r2, i0);

        virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: void addColumn(org.dom4j.swing.XMLTableColumnDefinition)>($r3);

        return;
    }

    public void addColumnWithXPathName(java.lang.String, java.lang.String, int)
    {
        org.dom4j.swing.XMLTableColumnDefinition $r5;
        org.dom4j.XPath $r2, $r4;
        int i0;
        org.dom4j.swing.XMLTableDefinition r0;
        java.lang.String r1, r3;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.XPath createColumnXPath(java.lang.String)>(r1);

        $r4 = virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.XPath createColumnXPath(java.lang.String)>(r3);

        $r5 = new org.dom4j.swing.XMLTableColumnDefinition;

        specialinvoke $r5.<org.dom4j.swing.XMLTableColumnDefinition: void <init>(org.dom4j.XPath,org.dom4j.XPath,int)>($r2, $r4, i0);

        virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: void addColumn(org.dom4j.swing.XMLTableColumnDefinition)>($r5);

        return;
    }

    public void addStringColumn(java.lang.String, java.lang.String)
    {
        org.dom4j.swing.XMLTableDefinition r0;
        java.lang.String r1, r2;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: void addColumn(java.lang.String,java.lang.String,int)>(r1, r2, 1);

        return;
    }

    public void addNumberColumn(java.lang.String, java.lang.String)
    {
        org.dom4j.swing.XMLTableDefinition r0;
        java.lang.String r1, r2;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: void addColumn(java.lang.String,java.lang.String,int)>(r1, r2, 2);

        return;
    }

    public void addColumn(org.dom4j.swing.XMLTableColumnDefinition)
    {
        org.dom4j.swing.XMLTableColumnDefinition r1;
        java.util.List $r2;
        org.dom4j.swing.XMLTableDefinition r0;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        r1 := @parameter0: org.dom4j.swing.XMLTableColumnDefinition;

        virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: void clearCaches()>();

        $r2 = r0.<org.dom4j.swing.XMLTableDefinition: java.util.List columns>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeColumn(org.dom4j.swing.XMLTableColumnDefinition)
    {
        org.dom4j.swing.XMLTableColumnDefinition r1;
        java.util.List $r2;
        org.dom4j.swing.XMLTableDefinition r0;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        r1 := @parameter0: org.dom4j.swing.XMLTableColumnDefinition;

        virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: void clearCaches()>();

        $r2 = r0.<org.dom4j.swing.XMLTableDefinition: java.util.List columns>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void clear()
    {
        java.util.List $r1;
        org.dom4j.swing.XMLTableDefinition r0;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: void clearCaches()>();

        $r1 = r0.<org.dom4j.swing.XMLTableDefinition: java.util.List columns>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public org.dom4j.swing.XMLTableColumnDefinition getColumn(int)
    {
        org.dom4j.swing.XMLTableColumnDefinition $r3;
        java.util.List $r4, $r7;
        int i0, $i1;
        org.dom4j.swing.XMLTableDefinition r0;
        org.dom4j.swing.XMLTableColumnDefinition[] $r1, $r2, $r5, $r6;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        i0 := @parameter0: int;

        $r1 = r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.swing.XMLTableColumnDefinition[] columnArray>;

        if $r1 != null goto label1;

        $r4 = r0.<org.dom4j.swing.XMLTableDefinition: java.util.List columns>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = newarray (org.dom4j.swing.XMLTableColumnDefinition)[$i1];

        r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.swing.XMLTableColumnDefinition[] columnArray> = $r5;

        $r7 = r0.<org.dom4j.swing.XMLTableDefinition: java.util.List columns>;

        $r6 = r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.swing.XMLTableColumnDefinition[] columnArray>;

        interfaceinvoke $r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

     label1:
        $r2 = r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.swing.XMLTableColumnDefinition[] columnArray>;

        $r3 = $r2[i0];

        return $r3;
    }

    public org.dom4j.swing.XMLTableColumnDefinition getColumn(java.lang.String)
    {
        java.util.Iterator $r8;
        java.util.HashMap $r6;
        org.dom4j.swing.XMLTableColumnDefinition $r5, r10;
        java.util.List $r7;
        java.util.Map $r1, $r3, $r11;
        java.lang.Object $r4, $r9;
        org.dom4j.swing.XMLTableDefinition r0;
        java.lang.String r2, $r12;
        boolean $z0;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.dom4j.swing.XMLTableDefinition: java.util.Map columnNameIndex>;

        if $r1 != null goto label2;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.swing.XMLTableDefinition: java.util.Map columnNameIndex> = $r6;

        $r7 = r0.<org.dom4j.swing.XMLTableDefinition: java.util.List columns>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.dom4j.swing.XMLTableColumnDefinition) $r9;

        $r11 = r0.<org.dom4j.swing.XMLTableDefinition: java.util.Map columnNameIndex>;

        $r12 = virtualinvoke r10.<org.dom4j.swing.XMLTableColumnDefinition: java.lang.String getName()>();

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r10);

        goto label1;

     label2:
        $r3 = r0.<org.dom4j.swing.XMLTableDefinition: java.util.Map columnNameIndex>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (org.dom4j.swing.XMLTableColumnDefinition) $r4;

        return $r5;
    }

    public org.dom4j.XPath getRowXPath()
    {
        org.dom4j.swing.XMLTableDefinition r0;
        org.dom4j.XPath $r1;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        $r1 = r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.XPath rowXPath>;

        return $r1;
    }

    public void setRowXPath(org.dom4j.XPath)
    {
        org.dom4j.swing.XMLTableDefinition r0;
        org.dom4j.XPath r1;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        r1 := @parameter0: org.dom4j.XPath;

        r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.XPath rowXPath> = r1;

        return;
    }

    public void setRowExpression(java.lang.String)
    {
        org.dom4j.swing.XMLTableDefinition r0;
        java.lang.String r1;
        org.dom4j.XPath $r2;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.XPath createXPath(java.lang.String)>(r1);

        virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: void setRowXPath(org.dom4j.XPath)>($r2);

        return;
    }

    public java.lang.Object getVariableValue(java.lang.String, java.lang.String, java.lang.String)
    {
        org.dom4j.swing.XMLTableColumnDefinition $r2;
        java.lang.Object $r3, $r4;
        org.dom4j.swing.XMLTableDefinition r0;
        java.lang.String r1, r5, r6;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.swing.XMLTableColumnDefinition getColumn(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $r3 = r0.<org.dom4j.swing.XMLTableDefinition: java.lang.Object rowValue>;

        $r4 = virtualinvoke $r2.<org.dom4j.swing.XMLTableColumnDefinition: java.lang.Object getValue(java.lang.Object)>($r3);

        return $r4;

     label1:
        return null;
    }

    protected org.dom4j.XPath createXPath(java.lang.String)
    {
        java.lang.String r0;
        org.dom4j.swing.XMLTableDefinition r2;
        org.dom4j.XPath $r1;

        r2 := @this: org.dom4j.swing.XMLTableDefinition;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.XPath createXPath(java.lang.String)>(r0);

        return $r1;
    }

    protected org.dom4j.XPath createColumnXPath(java.lang.String)
    {
        org.dom4j.swing.XMLTableDefinition r0;
        java.lang.String r1;
        org.dom4j.XPath $r2;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.XPath createXPath(java.lang.String)>(r1);

        interfaceinvoke $r2.<org.dom4j.XPath: void setVariableContext(org.jaxen.VariableContext)>(r0);

        return $r2;
    }

    protected void clearCaches()
    {
        org.dom4j.swing.XMLTableDefinition r0;

        r0 := @this: org.dom4j.swing.XMLTableDefinition;

        r0.<org.dom4j.swing.XMLTableDefinition: org.dom4j.swing.XMLTableColumnDefinition[] columnArray> = null;

        r0.<org.dom4j.swing.XMLTableDefinition: java.util.Map columnNameIndex> = null;

        return;
    }

    protected void handleException(java.lang.Exception)
    {
        java.io.PrintStream $r1;
        java.lang.StringBuffer $r0, $r2, $r4;
        java.lang.String $r5;
        org.dom4j.swing.XMLTableDefinition r6;
        java.lang.Exception r3;

        r6 := @this: org.dom4j.swing.XMLTableDefinition;

        r3 := @parameter0: java.lang.Exception;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }
}
