class org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor extends java.lang.Object implements org.springframework.expression.PropertyAccessor
{
    private final java.lang.reflect.Member member;
    private final org.springframework.core.convert.TypeDescriptor typeDescriptor;
    private final boolean needsToBeMadeAccessible;

    void <init>(org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair)
    {
        org.springframework.core.convert.TypeDescriptor $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.reflect.Method r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.reflect.Member $r2, $r4, $r5, $r7;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair r1;
        java.lang.reflect.Field r9;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor r0;
        java.lang.Class $r6, $r8;

        r0 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor;

        r1 := @parameter0: org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: java.lang.reflect.Member member>;

        r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: java.lang.reflect.Member member> = $r2;

        $r3 = r1.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: org.springframework.core.convert.TypeDescriptor typeDescriptor>;

        r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: org.springframework.core.convert.TypeDescriptor typeDescriptor> = $r3;

        $r4 = r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: java.lang.reflect.Member member>;

        $z0 = $r4 instanceof java.lang.reflect.Field;

        if $z0 == 0 goto label4;

        $r7 = r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: java.lang.reflect.Member member>;

        r9 = (java.lang.reflect.Field) $r7;

        $i2 = virtualinvoke r9.<java.lang.reflect.Field: int getModifiers()>();

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z4 == 0 goto label1;

        $r8 = virtualinvoke r9.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $i3 = virtualinvoke $r8.<java.lang.Class: int getModifiers()>();

        $z6 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i3);

        if $z6 != 0 goto label2;

     label1:
        $z5 = virtualinvoke r9.<java.lang.reflect.Field: boolean isAccessible()>();

        if $z5 != 0 goto label2;

        $z7 = 1;

        goto label3;

     label2:
        $z7 = 0;

     label3:
        r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: boolean needsToBeMadeAccessible> = $z7;

        goto label8;

     label4:
        $r5 = r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: java.lang.reflect.Member member>;

        r10 = (java.lang.reflect.Method) $r5;

        $i0 = virtualinvoke r10.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z1 == 0 goto label5;

        $r6 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $i1 = virtualinvoke $r6.<java.lang.Class: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z3 != 0 goto label6;

     label5:
        $z2 = virtualinvoke r10.<java.lang.reflect.Method: boolean isAccessible()>();

        if $z2 != 0 goto label6;

        $z8 = 1;

        goto label7;

     label6:
        $z8 = 0;

     label7:
        r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: boolean needsToBeMadeAccessible> = $z8;

     label8:
        return;
    }

    public java.lang.Class[] getSpecificTargetClasses()
    {
        java.lang.UnsupportedOperationException $r0;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor r1;

        r1 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Should not be called on an OptimalPropertyAccessor");

        throw $r0;
    }

    public boolean canRead(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException
    {
        java.lang.String $r4, r5, $r8, $r10, $r11, $r13, $r15, $r16;
        java.lang.reflect.Method r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.reflect.Member $r2, $r3, $r6;
        java.lang.reflect.Field r20;
        org.springframework.expression.EvaluationContext r17;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor r1;
        java.lang.Object r0;
        java.lang.StringBuilder $r7, $r9, $r12, $r14;
        java.lang.Class $r18;

        r1 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor;

        r17 := @parameter0: org.springframework.expression.EvaluationContext;

        r0 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        $r18 = (java.lang.Class) r0;

        goto label3;

     label2:
        $r18 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label3:
        $z1 = virtualinvoke $r18.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label4;

        return 0;

     label4:
        $r2 = r1.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: java.lang.reflect.Member member>;

        $z2 = $r2 instanceof java.lang.reflect.Method;

        if $z2 == 0 goto label6;

        $r6 = r1.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: java.lang.reflect.Member member>;

        r19 = (java.lang.reflect.Method) $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("get");

        $r8 = staticinvoke <org.springframework.util.StringUtils: java.lang.String capitalize(java.lang.String)>(r5);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke r19.<java.lang.reflect.Method: java.lang.String getName()>();

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z4 == 0 goto label5;

        return 1;

     label5:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("is");

        $r13 = staticinvoke <org.springframework.util.StringUtils: java.lang.String capitalize(java.lang.String)>(r5);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke r19.<java.lang.reflect.Method: java.lang.String getName()>();

        $z5 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        return $z5;

     label6:
        $r3 = r1.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: java.lang.reflect.Member member>;

        r20 = (java.lang.reflect.Field) $r3;

        $r4 = virtualinvoke r20.<java.lang.reflect.Field: java.lang.String getName()>();

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        return $z3;
    }

    public org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException
    {
        java.lang.reflect.Method $r20, $r24;
        boolean $z0, $z1, $z2, $z3;
        java.lang.reflect.Member $r1, $r2, $r10, $r15, $r18, $r23;
        org.springframework.expression.AccessException $r3, $r26, $r31;
        java.lang.Exception $r25, $r30;
        org.springframework.expression.EvaluationContext r36;
        java.lang.StringBuilder $r4, $r6, $r7, $r27, $r28, $r32, $r33, $r34;
        java.lang.Object[] $r19;
        org.springframework.core.convert.TypeDescriptor $r14, $r22;
        java.lang.String r5, $r8, $r29, $r35;
        org.springframework.expression.TypedValue $r9, $r17;
        java.lang.reflect.Field $r12, $r16;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor r0;
        java.lang.Object r11, $r13, $r21;

        r0 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor;

        r36 := @parameter0: org.springframework.expression.EvaluationContext;

        r11 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.String;

        $r1 = r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: java.lang.reflect.Member member>;

        $z0 = $r1 instanceof java.lang.reflect.Method;

        if $z0 == 0 goto label05;

     label01:
        $z3 = r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: boolean needsToBeMadeAccessible>;

        if $z3 == 0 goto label02;

        $r23 = r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: java.lang.reflect.Member member>;

        $r24 = (java.lang.reflect.Method) $r23;

        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>($r24);

     label02:
        $r17 = new org.springframework.expression.TypedValue;

        $r18 = r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: java.lang.reflect.Member member>;

        $r20 = (java.lang.reflect.Method) $r18;

        $r19 = newarray (java.lang.Object)[0];

        $r21 = virtualinvoke $r20.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r11, $r19);

        $r22 = r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: org.springframework.core.convert.TypeDescriptor typeDescriptor>;

        specialinvoke $r17.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r21, $r22);

     label03:
        return $r17;

     label04:
        $r30 := @caughtexception;

        $r31 = new org.springframework.expression.AccessException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to access property \'");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' through getter");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>($r35, $r30);

        throw $r31;

     label05:
        $r2 = r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: java.lang.reflect.Member member>;

        $z1 = $r2 instanceof java.lang.reflect.Field;

        if $z1 == 0 goto label10;

     label06:
        $z2 = r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: boolean needsToBeMadeAccessible>;

        if $z2 == 0 goto label07;

        $r15 = r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: java.lang.reflect.Member member>;

        $r16 = (java.lang.reflect.Field) $r15;

        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Field)>($r16);

     label07:
        $r9 = new org.springframework.expression.TypedValue;

        $r10 = r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: java.lang.reflect.Member member>;

        $r12 = (java.lang.reflect.Field) $r10;

        $r13 = virtualinvoke $r12.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r11);

        $r14 = r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: org.springframework.core.convert.TypeDescriptor typeDescriptor>;

        specialinvoke $r9.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r13, $r14);

     label08:
        return $r9;

     label09:
        $r25 := @caughtexception;

        $r26 = new org.springframework.expression.AccessException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to access field: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>($r29, $r25);

        throw $r26;

     label10:
        $r3 = new org.springframework.expression.AccessException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Neither getter nor field found for property \'");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.springframework.expression.AccessException: void <init>(java.lang.String)>($r8);

        throw $r3;

        catch java.lang.Exception from label01 to label03 with label04;
        catch java.lang.Exception from label06 to label08 with label09;
    }

    public boolean canWrite(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException
    {
        java.lang.UnsupportedOperationException $r0;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor r1;
        java.lang.Object r3;
        java.lang.String r4;
        org.springframework.expression.EvaluationContext r2;

        r1 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor;

        r2 := @parameter0: org.springframework.expression.EvaluationContext;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Should not be called on an OptimalPropertyAccessor");

        throw $r0;
    }

    public void write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object) throws org.springframework.expression.AccessException
    {
        java.lang.UnsupportedOperationException $r0;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor r1;
        java.lang.Object r3, r5;
        java.lang.String r4;
        org.springframework.expression.EvaluationContext r2;

        r1 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor;

        r2 := @parameter0: org.springframework.expression.EvaluationContext;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Should not be called on an OptimalPropertyAccessor");

        throw $r0;
    }
}
