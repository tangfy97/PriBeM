abstract class org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$Target extends java.lang.Object implements org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor
{
    final org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument;
    final org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition;

    void <init>(org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor, org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$Target r0;
        org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition r2;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$Target;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument> = r1;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition> = r2;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.DocOp finish()
    {
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r3;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$Target r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$Target;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: java.lang.Object finish()>();

        $r3 = (org.waveprotocol.wave.model.document.operation.DocOp) $r2;

        return $r3;
    }

    public volatile java.lang.Object finish()
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r1;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$Target r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$Target;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.DocOp finish()>();

        return $r1;
    }
}
