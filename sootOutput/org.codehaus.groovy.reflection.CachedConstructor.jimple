public class org.codehaus.groovy.reflection.CachedConstructor extends org.codehaus.groovy.reflection.ParameterTypes
{
    org.codehaus.groovy.reflection.CachedClass clazz;
    public final java.lang.reflect.Constructor cachedConstructor;

    public void <init>(org.codehaus.groovy.reflection.CachedClass, java.lang.reflect.Constructor)
    {
        org.codehaus.groovy.reflection.CachedClass r2;
        org.codehaus.groovy.reflection.CachedConstructor r0;
        java.lang.SecurityException $r3;
        java.lang.reflect.Constructor r1;

        r0 := @this: org.codehaus.groovy.reflection.CachedConstructor;

        r2 := @parameter0: org.codehaus.groovy.reflection.CachedClass;

        r1 := @parameter1: java.lang.reflect.Constructor;

        specialinvoke r0.<org.codehaus.groovy.reflection.ParameterTypes: void <init>()>();

        r0.<org.codehaus.groovy.reflection.CachedConstructor: java.lang.reflect.Constructor cachedConstructor> = r1;

        r0.<org.codehaus.groovy.reflection.CachedConstructor: org.codehaus.groovy.reflection.CachedClass clazz> = r2;

     label1:
        virtualinvoke r1.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public void <init>(java.lang.reflect.Constructor)
    {
        org.codehaus.groovy.reflection.CachedClass $r3;
        org.codehaus.groovy.reflection.CachedConstructor r0;
        java.lang.Class $r2;
        java.lang.reflect.Constructor r1;

        r0 := @this: org.codehaus.groovy.reflection.CachedConstructor;

        r1 := @parameter0: java.lang.reflect.Constructor;

        $r2 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r3 = staticinvoke <org.codehaus.groovy.reflection.ReflectionCache: org.codehaus.groovy.reflection.CachedClass getCachedClass(java.lang.Class)>($r2);

        specialinvoke r0.<org.codehaus.groovy.reflection.CachedConstructor: void <init>(org.codehaus.groovy.reflection.CachedClass,java.lang.reflect.Constructor)>($r3, r1);

        return;
    }

    protected java.lang.Class[] getPT()
    {
        org.codehaus.groovy.reflection.CachedConstructor r0;
        java.lang.Class[] $r2;
        java.lang.reflect.Constructor $r1;

        r0 := @this: org.codehaus.groovy.reflection.CachedConstructor;

        $r1 = r0.<org.codehaus.groovy.reflection.CachedConstructor: java.lang.reflect.Constructor cachedConstructor>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        return $r2;
    }

    public static org.codehaus.groovy.reflection.CachedConstructor find(java.lang.reflect.Constructor)
    {
        org.codehaus.groovy.reflection.CachedConstructor[] $r3;
        java.lang.RuntimeException $r4;
        java.lang.reflect.Constructor r0, $r10;
        org.codehaus.groovy.reflection.CachedClass $r2;
        org.codehaus.groovy.reflection.CachedConstructor r9;
        java.lang.StringBuffer $r5, $r6, $r7;
        int $i0, i1;
        java.lang.Class $r1;
        java.lang.String $r8;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Constructor;

        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r2 = staticinvoke <org.codehaus.groovy.reflection.ReflectionCache: org.codehaus.groovy.reflection.CachedClass getCachedClass(java.lang.Class)>($r1);

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.reflection.CachedClass: org.codehaus.groovy.reflection.CachedConstructor[] getConstructors()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r3;

        if i1 >= $i0 goto label3;

        r9 = $r3[i1];

        $r10 = r9.<org.codehaus.groovy.reflection.CachedConstructor: java.lang.reflect.Constructor cachedConstructor>;

        $z0 = virtualinvoke $r10.<java.lang.reflect.Constructor: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return r9;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Couldn\'t find method: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r4;
    }
}
