public class org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory extends org.apache.lucene.analysis.util.TokenFilterFactory implements org.apache.lucene.analysis.util.ResourceLoaderAware
{
    public static final java.lang.String PROTECTED_TOKENS;
    public static final java.lang.String PATTERN;
    private final java.lang.String wordFiles;
    private final java.lang.String stringPattern;
    private final boolean ignoreCase;
    private java.util.regex.Pattern pattern;
    private org.apache.lucene.analysis.util.CharArraySet protectedWords;

    public void <init>(java.util.Map)
    {
        org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory r0;
        java.lang.IllegalArgumentException $r4;
        java.util.Map r1;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r2, $r3, $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.lucene.analysis.util.TokenFilterFactory: void <init>(java.util.Map)>(r1);

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: java.lang.String get(java.util.Map,java.lang.String)>(r1, "protected");

        r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: java.lang.String wordFiles> = $r2;

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: java.lang.String get(java.util.Map,java.lang.String)>(r1, "pattern");

        r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: java.lang.String stringPattern> = $r3;

        $z0 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "ignoreCase", 0);

        r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: boolean ignoreCase> = $z0;

        $z1 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown parameters: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        return;
    }

    public void inform(org.apache.lucene.analysis.util.ResourceLoader) throws java.io.IOException
    {
        org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory r0;
        org.apache.lucene.analysis.util.ResourceLoader r5;
        org.apache.lucene.analysis.util.CharArraySet $r7;
        java.lang.String $r1, $r2, $r3, $r4, $r6;
        java.util.regex.Pattern $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory;

        r5 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: java.lang.String wordFiles>;

        if $r1 == null goto label1;

        $r6 = r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: java.lang.String wordFiles>;

        $z1 = r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: boolean ignoreCase>;

        $r7 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: org.apache.lucene.analysis.util.CharArraySet getWordSet(org.apache.lucene.analysis.util.ResourceLoader,java.lang.String,boolean)>(r5, $r6, $z1);

        r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: org.apache.lucene.analysis.util.CharArraySet protectedWords> = $r7;

     label1:
        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: java.lang.String stringPattern>;

        if $r2 == null goto label4;

        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: boolean ignoreCase>;

        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: java.lang.String stringPattern>;

        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r4, 66);

        goto label3;

     label2:
        $r3 = r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: java.lang.String stringPattern>;

        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r3);

     label3:
        r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: java.util.regex.Pattern pattern> = $r8;

     label4:
        return;
    }

    public boolean isIgnoreCase()
    {
        org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory;

        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: boolean ignoreCase>;

        return $z0;
    }

    public org.apache.lucene.analysis.TokenStream create(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory r0;
        org.apache.lucene.analysis.miscellaneous.PatternKeywordMarkerFilter $r5;
        org.apache.lucene.analysis.TokenStream r7;
        org.apache.lucene.analysis.miscellaneous.SetKeywordMarkerFilter $r3;
        org.apache.lucene.analysis.util.CharArraySet $r2, $r4;
        java.util.regex.Pattern $r1, $r6;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory;

        r7 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: java.util.regex.Pattern pattern>;

        if $r1 == null goto label1;

        $r5 = new org.apache.lucene.analysis.miscellaneous.PatternKeywordMarkerFilter;

        $r6 = r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: java.util.regex.Pattern pattern>;

        specialinvoke $r5.<org.apache.lucene.analysis.miscellaneous.PatternKeywordMarkerFilter: void <init>(org.apache.lucene.analysis.TokenStream,java.util.regex.Pattern)>(r7, $r6);

        r7 = $r5;

     label1:
        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: org.apache.lucene.analysis.util.CharArraySet protectedWords>;

        if $r2 == null goto label2;

        $r3 = new org.apache.lucene.analysis.miscellaneous.SetKeywordMarkerFilter;

        $r4 = r0.<org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: org.apache.lucene.analysis.util.CharArraySet protectedWords>;

        specialinvoke $r3.<org.apache.lucene.analysis.miscellaneous.SetKeywordMarkerFilter: void <init>(org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.util.CharArraySet)>(r7, $r4);

        r7 = $r3;

     label2:
        return r7;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: java.lang.String PATTERN> = "pattern";

        <org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilterFactory: java.lang.String PROTECTED_TOKENS> = "protected";

        return;
    }
}
