public abstract class nu.xom.ParentNode extends nu.xom.Node
{
    nu.xom.Node[] children;
    int childCount;
    java.lang.String actualBaseURI;

    void <init>()
    {
        nu.xom.ParentNode r0;

        r0 := @this: nu.xom.ParentNode;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        r0.<nu.xom.ParentNode: int childCount> = 0;

        return;
    }

    public int getChildCount()
    {
        int $i0;
        nu.xom.ParentNode r0;

        r0 := @this: nu.xom.ParentNode;

        $i0 = r0.<nu.xom.ParentNode: int childCount>;

        return $i0;
    }

    public void insertChild(nu.xom.Node, int)
    {
        int i0;
        nu.xom.ParentNode r0;
        nu.xom.Node r1;

        r0 := @this: nu.xom.ParentNode;

        r1 := @parameter0: nu.xom.Node;

        i0 := @parameter1: int;

        virtualinvoke r0.<nu.xom.ParentNode: void _insertChild(nu.xom.Node,int)>(r1, i0);

        return;
    }

    final void _insertChild(nu.xom.Node, int)
    {
        int i0;
        nu.xom.ParentNode r0;
        nu.xom.Node r1;

        r0 := @this: nu.xom.ParentNode;

        r1 := @parameter0: nu.xom.Node;

        i0 := @parameter1: int;

        virtualinvoke r0.<nu.xom.ParentNode: void insertionAllowed(nu.xom.Node,int)>(r1, i0);

        virtualinvoke r0.<nu.xom.ParentNode: void fastInsertChild(nu.xom.Node,int)>(r1, i0);

        return;
    }

    void fastInsertChild(nu.xom.Node, int)
    {
        java.lang.IndexOutOfBoundsException $r5;
        java.lang.StringBuffer $r6, $r7, $r8, $r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        nu.xom.ParentNode r0;
        java.lang.String $r10;
        nu.xom.Node[] $r2, $r3, $r4;
        nu.xom.Node r1;

        r0 := @this: nu.xom.ParentNode;

        r1 := @parameter0: nu.xom.Node;

        i0 := @parameter1: int;

        $i1 = r0.<nu.xom.ParentNode: int childCount>;

        if i0 <= $i1 goto label1;

        $r5 = new java.lang.IndexOutOfBoundsException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Inserted node at position ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" after children");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $i2 = r0.<nu.xom.ParentNode: int childCount>;

        $i3 = $i2 + 1;

        specialinvoke r0.<nu.xom.ParentNode: void checkCapacity(int)>($i3);

        $i4 = r0.<nu.xom.ParentNode: int childCount>;

        if i0 >= $i4 goto label2;

        $r4 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        $r3 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        $i9 = i0 + 1;

        $i7 = r0.<nu.xom.ParentNode: int childCount>;

        $i8 = $i7 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i0, $r3, $i9, $i8);

     label2:
        $r2 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        $r2[i0] = r1;

        $i5 = r0.<nu.xom.ParentNode: int childCount>;

        $i6 = $i5 + 1;

        r0.<nu.xom.ParentNode: int childCount> = $i6;

        virtualinvoke r1.<nu.xom.Node: void setParent(nu.xom.ParentNode)>(r0);

        return;
    }

    private void checkCapacity(int)
    {
        int i0, $i1, $i2, $i3, $i4;
        nu.xom.ParentNode r0;
        nu.xom.Node[] $r1, $r2, $r3, r4, $r5, $r6, $r7;

        r0 := @this: nu.xom.ParentNode;

        i0 := @parameter0: int;

        $r1 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        if $r1 != null goto label1;

        $r7 = newarray (nu.xom.Node)[1];

        r0.<nu.xom.ParentNode: nu.xom.Node[] children> = $r7;

        goto label2;

     label1:
        $r2 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        $i1 = lengthof $r2;

        if i0 < $i1 goto label2;

        $r3 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        $i2 = lengthof $r3;

        $i3 = $i2 * 2;

        r4 = newarray (nu.xom.Node)[$i3];

        $r6 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        $r5 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        $i4 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r4, 0, $i4);

        r0.<nu.xom.ParentNode: nu.xom.Node[] children> = r4;

     label2:
        return;
    }

    abstract void insertionAllowed(nu.xom.Node, int);

    public void appendChild(nu.xom.Node)
    {
        int $i0;
        nu.xom.ParentNode r0;
        nu.xom.Node r1;

        r0 := @this: nu.xom.ParentNode;

        r1 := @parameter0: nu.xom.Node;

        $i0 = r0.<nu.xom.ParentNode: int childCount>;

        virtualinvoke r0.<nu.xom.ParentNode: void insertChild(nu.xom.Node,int)>(r1, $i0);

        return;
    }

    public nu.xom.Node getChild(int)
    {
        java.lang.IndexOutOfBoundsException $r4;
        int i0;
        nu.xom.ParentNode r0;
        nu.xom.Node $r3;
        nu.xom.Node[] $r1, $r2;

        r0 := @this: nu.xom.ParentNode;

        i0 := @parameter0: int;

        $r1 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        if $r1 != null goto label1;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("This node has no children");

        throw $r4;

     label1:
        $r2 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        $r3 = $r2[i0];

        return $r3;
    }

    public int indexOf(nu.xom.Node)
    {
        nu.xom.Node r2, $r4;
        int $i0, i1, $i3, $i5;
        nu.xom.ParentNode r0;
        nu.xom.Node[] $r1, $r3;

        r0 := @this: nu.xom.ParentNode;

        r2 := @parameter0: nu.xom.Node;

        $r1 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        if $r1 != null goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        i1 = 0;

     label2:
        $i0 = r0.<nu.xom.ParentNode: int childCount>;

        if i1 >= $i0 goto label4;

        $r3 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        $r4 = $r3[i1];

        if r2 != $r4 goto label3;

        return i1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $i5 = (int) -1;

        return $i5;
    }

    public nu.xom.Node removeChild(int)
    {
        java.lang.IndexOutOfBoundsException $r8;
        nu.xom.Element $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        nu.xom.ParentNode r0;
        nu.xom.Node[] $r1, $r2, $r4, $r5, $r6;
        boolean $z0;
        nu.xom.Node r3;

        r0 := @this: nu.xom.ParentNode;

        i0 := @parameter0: int;

        $r1 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        if $r1 != null goto label1;

        $r8 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("This node has no children");

        throw $r8;

     label1:
        $r2 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        r3 = $r2[i0];

        $z0 = virtualinvoke r3.<nu.xom.Node: boolean isElement()>();

        if $z0 == 0 goto label2;

        $r7 = (nu.xom.Element) r3;

        virtualinvoke r0.<nu.xom.ParentNode: void fillInBaseURI(nu.xom.Element)>($r7);

     label2:
        $i1 = r0.<nu.xom.ParentNode: int childCount>;

        $i2 = $i1 - i0;

        $i7 = $i2 - 1;

        if $i7 <= 0 goto label3;

        $r6 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        $i6 = i0 + 1;

        $r5 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i6, $r5, i0, $i7);

     label3:
        $i3 = r0.<nu.xom.ParentNode: int childCount>;

        $i4 = $i3 - 1;

        r0.<nu.xom.ParentNode: int childCount> = $i4;

        $r4 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        $i5 = r0.<nu.xom.ParentNode: int childCount>;

        $r4[$i5] = null;

        virtualinvoke r3.<nu.xom.Node: void setParent(nu.xom.ParentNode)>(null);

        return r3;
    }

    void fillInBaseURI(nu.xom.Element)
    {
        nu.xom.Element r0;
        nu.xom.ParentNode r1, r2;
        java.lang.String r3;
        boolean $z0;

        r1 := @this: nu.xom.ParentNode;

        r0 := @parameter0: nu.xom.Element;

        r2 = r0;

        r3 = "";

     label1:
        if r2 == null goto label2;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

        r3 = virtualinvoke r2.<nu.xom.ParentNode: java.lang.String getActualBaseURI()>();

        r2 = virtualinvoke r2.<nu.xom.ParentNode: nu.xom.ParentNode getParent()>();

        goto label1;

     label2:
        virtualinvoke r0.<nu.xom.Element: void setActualBaseURI(java.lang.String)>(r3);

        return;
    }

    public nu.xom.Node removeChild(nu.xom.Node)
    {
        nu.xom.NoSuchChildException $r6, $r7;
        nu.xom.Element $r3;
        nu.xom.Node r2;
        int $i0, $i2;
        nu.xom.ParentNode r0;
        nu.xom.Node[] $r1;
        boolean $z0;

        r0 := @this: nu.xom.ParentNode;

        r2 := @parameter0: nu.xom.Node;

        $r1 = r0.<nu.xom.ParentNode: nu.xom.Node[] children>;

        if $r1 != null goto label1;

        $r6 = new nu.xom.NoSuchChildException;

        specialinvoke $r6.<nu.xom.NoSuchChildException: void <init>(java.lang.String)>("Child does not belong to this node");

        throw $r6;

     label1:
        $i0 = virtualinvoke r0.<nu.xom.ParentNode: int indexOf(nu.xom.Node)>(r2);

        $i2 = (int) -1;

        if $i0 != $i2 goto label2;

        $r7 = new nu.xom.NoSuchChildException;

        specialinvoke $r7.<nu.xom.NoSuchChildException: void <init>(java.lang.String)>("Child does not belong to this node");

        throw $r7;

     label2:
        $z0 = virtualinvoke r2.<nu.xom.Node: boolean isElement()>();

        if $z0 == 0 goto label3;

        $r3 = (nu.xom.Element) r2;

        virtualinvoke r0.<nu.xom.ParentNode: void fillInBaseURI(nu.xom.Element)>($r3);

     label3:
        virtualinvoke r0.<nu.xom.ParentNode: nu.xom.Node removeChild(int)>($i0);

        virtualinvoke r2.<nu.xom.Node: void setParent(nu.xom.ParentNode)>(null);

        return r2;
    }

    public void replaceChild(nu.xom.Node, nu.xom.Node)
    {
        nu.xom.NoSuchChildException $r10, $r11;
        nu.xom.Node r0, r1;
        java.lang.NullPointerException $r8, $r9;
        int $i0, $i2;
        nu.xom.ParentNode r2;
        nu.xom.Node[] $r3;

        r2 := @this: nu.xom.ParentNode;

        r0 := @parameter0: nu.xom.Node;

        r1 := @parameter1: nu.xom.Node;

        if r0 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Tried to replace null child");

        throw $r8;

     label1:
        if r1 != null goto label2;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("Tried to replace child with null");

        throw $r9;

     label2:
        $r3 = r2.<nu.xom.ParentNode: nu.xom.Node[] children>;

        if $r3 != null goto label3;

        $r10 = new nu.xom.NoSuchChildException;

        specialinvoke $r10.<nu.xom.NoSuchChildException: void <init>(java.lang.String)>("Reference node is not a child of this node.");

        throw $r10;

     label3:
        $i0 = virtualinvoke r2.<nu.xom.ParentNode: int indexOf(nu.xom.Node)>(r0);

        $i2 = (int) -1;

        if $i0 != $i2 goto label4;

        $r11 = new nu.xom.NoSuchChildException;

        specialinvoke $r11.<nu.xom.NoSuchChildException: void <init>(java.lang.String)>("Reference node is not a child of this node.");

        throw $r11;

     label4:
        if r0 != r1 goto label5;

        return;

     label5:
        virtualinvoke r2.<nu.xom.ParentNode: void insertionAllowed(nu.xom.Node,int)>(r1, $i0);

        virtualinvoke r2.<nu.xom.ParentNode: nu.xom.Node removeChild(int)>($i0);

        virtualinvoke r2.<nu.xom.ParentNode: void insertChild(nu.xom.Node,int)>(r1, $i0);

        return;
    }

    public abstract void setBaseURI(java.lang.String);

    java.lang.String getActualBaseURI()
    {
        nu.xom.ParentNode r0;
        java.lang.String $r1, $r2;

        r0 := @this: nu.xom.ParentNode;

        $r1 = r0.<nu.xom.ParentNode: java.lang.String actualBaseURI>;

        if $r1 != null goto label1;

        return "";

     label1:
        $r2 = r0.<nu.xom.ParentNode: java.lang.String actualBaseURI>;

        return $r2;
    }

    void setActualBaseURI(java.lang.String)
    {
        java.lang.String $r0, r2;
        nu.xom.ParentNode r1;
        boolean $z0;

        r1 := @this: nu.xom.ParentNode;

        r2 := @parameter0: java.lang.String;

        if r2 != null goto label1;

        r2 = "";

     label1:
        $r0 = "";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label2;

        staticinvoke <nu.xom.Verifier: void checkAbsoluteURI(java.lang.String)>(r2);

     label2:
        r1.<nu.xom.ParentNode: java.lang.String actualBaseURI> = r2;

        return;
    }

    final java.lang.String findActualBaseURI()
    {
        nu.xom.ParentNode r0, $r2, r4;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: nu.xom.ParentNode;

        r4 = r0;

     label1:
        $r1 = virtualinvoke r4.<nu.xom.ParentNode: java.lang.String getActualBaseURI()>();

        $r2 = virtualinvoke r4.<nu.xom.ParentNode: nu.xom.ParentNode getParent()>();

        if $r2 != null goto label2;

        return $r1;

     label2:
        $r3 = "";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        r4 = $r2;

        goto label1;

     label3:
        return $r1;
    }
}
