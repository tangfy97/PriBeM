public final class com.sun.xml.bind.v2.model.nav.ReflectionNavigator extends java.lang.Object implements com.sun.xml.bind.v2.model.nav.Navigator
{
    private static final com.sun.xml.bind.v2.model.nav.TypeVisitor baseClassFinder;
    private static final com.sun.xml.bind.v2.model.nav.TypeVisitor binder;
    private static final com.sun.xml.bind.v2.model.nav.TypeVisitor eraser;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Class getSuperClass(java.lang.Class)
    {
        java.lang.Class r0, $r1, r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        if r0 != class "Ljava/lang/Object;" goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        r3 = $r1;

        if $r1 != null goto label2;

        r3 = class "Ljava/lang/Object;";

     label2:
        return r3;
    }

    public java.lang.reflect.Type getBaseClass(java.lang.reflect.Type, java.lang.Class)
    {
        java.lang.reflect.Type r0, $r4;
        com.sun.xml.bind.v2.model.nav.TypeVisitor $r2;
        java.lang.Class r1;
        java.lang.Object $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r5;

        r5 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.Class;

        $r2 = <com.sun.xml.bind.v2.model.nav.ReflectionNavigator: com.sun.xml.bind.v2.model.nav.TypeVisitor baseClassFinder>;

        $r3 = virtualinvoke $r2.<com.sun.xml.bind.v2.model.nav.TypeVisitor: java.lang.Object visit(java.lang.reflect.Type,java.lang.Object)>(r0, r1);

        $r4 = (java.lang.reflect.Type) $r3;

        return $r4;
    }

    public java.lang.String getClassName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        return $r1;
    }

    public java.lang.String getTypeName(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        java.lang.Class r2, $r6;
        java.lang.StringBuilder $r4, $r8, $r9;
        java.lang.String $r1, $r3, $r7, $r10;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r5;
        boolean $z0, $z1;

        r5 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        r2 = (java.lang.Class) r0;

        $z1 = virtualinvoke r2.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $r7 = virtualinvoke r5.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.String getTypeName(java.lang.reflect.Type)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label1:
        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        return $r3;

     label2:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.String getClassShortName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        return $r1;
    }

    public java.util.Collection getDeclaredFields(java.lang.Class)
    {
        java.lang.reflect.Field[] $r1;
        java.util.List $r2;
        java.lang.Class r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r3;

        r3 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        return $r2;
    }

    public java.lang.reflect.Field getDeclaredField(java.lang.Class, java.lang.String)
    {
        java.lang.NoSuchFieldException $r3;
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Field $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r4;

        r4 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
    }

    public java.util.Collection getDeclaredMethods(java.lang.Class)
    {
        java.util.List $r2;
        java.lang.Class r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r3;
        java.lang.reflect.Method[] $r1;

        r3 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        return $r2;
    }

    public java.lang.Class getDeclaringClassForField(java.lang.reflect.Field)
    {
        java.lang.Class $r1;
        java.lang.reflect.Field r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Field;

        $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        return $r1;
    }

    public java.lang.Class getDeclaringClassForMethod(java.lang.reflect.Method)
    {
        java.lang.Class $r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;
        java.lang.reflect.Method r0;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        return $r1;
    }

    public java.lang.reflect.Type getFieldType(java.lang.reflect.Field)
    {
        java.lang.reflect.Field r0;
        java.lang.reflect.Type $r3, $r4;
        java.lang.Class $r1, $r5, $r6, $r8;
        java.lang.Object $r7;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;
        boolean $z0, $z1;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Field;

        $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getComponentType()>();

        $z1 = virtualinvoke $r6.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label1;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r6, 0);

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        return $r8;

     label1:
        $r3 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $r4 = specialinvoke r2.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Type fix(java.lang.reflect.Type)>($r3);

        return $r4;
    }

    public java.lang.String getFieldName(java.lang.reflect.Field)
    {
        java.lang.String $r1;
        java.lang.reflect.Field r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Field;

        $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();

        return $r1;
    }

    public java.lang.String getMethodName(java.lang.reflect.Method)
    {
        java.lang.String $r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;
        java.lang.reflect.Method r0;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        return $r1;
    }

    public java.lang.reflect.Type getReturnType(java.lang.reflect.Method)
    {
        java.lang.reflect.Type $r2, $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Method r1;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $r3 = specialinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Type fix(java.lang.reflect.Type)>($r2);

        return $r3;
    }

    public java.lang.reflect.Type[] getMethodParameters(java.lang.reflect.Method)
    {
        java.lang.reflect.Type[] $r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;
        java.lang.reflect.Method r0;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        return $r1;
    }

    public boolean isStaticMethod(java.lang.reflect.Method)
    {
        int $i0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;
        java.lang.reflect.Method r0;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Method;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        return $z0;
    }

    public boolean isFinalMethod(java.lang.reflect.Method)
    {
        int $i0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;
        java.lang.reflect.Method r0;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Method;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0);

        return $z0;
    }

    public boolean isSubClassOf(java.lang.reflect.Type, java.lang.reflect.Type)
    {
        java.lang.reflect.Type r1, r3;
        java.lang.Class $r2, $r4;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r3 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.reflect.Type;

        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class erasure(java.lang.reflect.Type)>(r1);

        $r4 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class erasure(java.lang.reflect.Type)>(r3);

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        return $z0;
    }

    public java.lang.Class ref(java.lang.Class)
    {
        java.lang.Class r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        return r0;
    }

    public java.lang.Class use(java.lang.Class)
    {
        java.lang.Class r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        return r0;
    }

    public java.lang.Class asDecl(java.lang.reflect.Type)
    {
        java.lang.Class $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Type r1;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.reflect.Type;

        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class erasure(java.lang.reflect.Type)>(r1);

        return $r2;
    }

    public java.lang.Class asDecl(java.lang.Class)
    {
        java.lang.Class r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        return r0;
    }

    public java.lang.Class erasure(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        com.sun.xml.bind.v2.model.nav.TypeVisitor $r1;
        java.lang.Object $r2;
        java.lang.Class $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r4;

        r4 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Type;

        $r1 = <com.sun.xml.bind.v2.model.nav.ReflectionNavigator: com.sun.xml.bind.v2.model.nav.TypeVisitor eraser>;

        $r2 = virtualinvoke $r1.<com.sun.xml.bind.v2.model.nav.TypeVisitor: java.lang.Object visit(java.lang.reflect.Type,java.lang.Object)>(r0, null);

        $r3 = (java.lang.Class) $r2;

        return $r3;
    }

    public boolean isAbstract(java.lang.Class)
    {
        int $i0;
        java.lang.Class r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        return $z0;
    }

    public boolean isFinal(java.lang.Class)
    {
        int $i0;
        java.lang.Class r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0);

        return $z0;
    }

    public transient java.lang.reflect.Type createParameterizedType(java.lang.Class, java.lang.reflect.Type[])
    {
        com.sun.xml.bind.v2.model.nav.ParameterizedTypeImpl $r0;
        java.lang.reflect.Type[] r2;
        java.lang.Class r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r3;

        r3 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Type[];

        $r0 = new com.sun.xml.bind.v2.model.nav.ParameterizedTypeImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.nav.ParameterizedTypeImpl: void <init>(java.lang.Class,java.lang.reflect.Type[],java.lang.reflect.Type)>(r1, r2, null);

        return $r0;
    }

    public boolean isArray(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        java.lang.Class r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;
        boolean $z0, $z1, $z2;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        r1 = (java.lang.Class) r0;

        $z2 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        return $z2;

     label1:
        $z1 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean isArrayButNotByteArray(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType $r0;
        java.lang.reflect.Type $r1, r5;
        java.lang.Class $r2, r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r4;
        boolean $z0, $z1, $z2, $z3, $z4;

        r4 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r5 := @parameter0: java.lang.reflect.Type;

        $z0 = r5 instanceof java.lang.Class;

        if $z0 == 0 goto label3;

        r3 = (java.lang.Class) r5;

        $z2 = virtualinvoke r3.<java.lang.Class: boolean isArray()>();

        if $z2 == 0 goto label1;

        if r3 == class "[B" goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        $z1 = r5 instanceof java.lang.reflect.GenericArrayType;

        if $z1 == 0 goto label6;

        $r0 = (java.lang.reflect.GenericArrayType) r5;

        $r1 = interfaceinvoke $r0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r2 = <java.lang.Byte: java.lang.Class TYPE>;

        if $r1 == $r2 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;

     label6:
        return 0;
    }

    public java.lang.reflect.Type getComponentType(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType $r2;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.Type r0, $r3;
        java.lang.Class r4, $r5;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r6;
        boolean $z0, $z1;

        r6 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        r4 = (java.lang.Class) r0;

        $r5 = virtualinvoke r4.<java.lang.Class: java.lang.Class getComponentType()>();

        return $r5;

     label1:
        $z1 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z1 == 0 goto label2;

        $r2 = (java.lang.reflect.GenericArrayType) r0;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        return $r3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    public java.lang.reflect.Type getTypeArgument(java.lang.reflect.Type, int)
    {
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.ParameterizedType r2;
        java.lang.reflect.Type r0, $r5, $r6;
        java.lang.reflect.Type[] $r4;
        int i0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r3;
        boolean $z0;

        r3 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Type;

        i0 := @parameter1: int;

        $z0 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label1;

        r2 = (java.lang.reflect.ParameterizedType) r0;

        $r4 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r5 = $r4[i0];

        $r6 = specialinvoke r3.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Type fix(java.lang.reflect.Type)>($r5);

        return $r6;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    public boolean isParameterizedType(java.lang.reflect.Type)
    {
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;
        java.lang.reflect.Type r0;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.reflect.ParameterizedType;

        return $z0;
    }

    public boolean isPrimitive(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        java.lang.Class r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;
        boolean $z0, $z1;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        r1 = (java.lang.Class) r0;

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isPrimitive()>();

        return $z1;

     label1:
        return 0;
    }

    public java.lang.reflect.Type getPrimitive(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.AssertionError $r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;
        boolean $z0, $z1;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        $z0 = <com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        return r0;
    }

    public com.sun.xml.bind.v2.runtime.Location getClassLocation(java.lang.Class)
    {
        java.lang.Class r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator$4 $r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r2 := @parameter0: java.lang.Class;

        $r0 = new com.sun.xml.bind.v2.model.nav.ReflectionNavigator$4;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator$4: void <init>(com.sun.xml.bind.v2.model.nav.ReflectionNavigator,java.lang.Class)>(r1, r2);

        return $r0;
    }

    public com.sun.xml.bind.v2.runtime.Location getFieldLocation(java.lang.reflect.Field)
    {
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;
        java.lang.reflect.Field r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator$5 $r0;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r2 := @parameter0: java.lang.reflect.Field;

        $r0 = new com.sun.xml.bind.v2.model.nav.ReflectionNavigator$5;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator$5: void <init>(com.sun.xml.bind.v2.model.nav.ReflectionNavigator,java.lang.reflect.Field)>(r1, r2);

        return $r0;
    }

    public com.sun.xml.bind.v2.runtime.Location getMethodLocation(java.lang.reflect.Method)
    {
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;
        java.lang.reflect.Method r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator$6 $r0;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r2 := @parameter0: java.lang.reflect.Method;

        $r0 = new com.sun.xml.bind.v2.model.nav.ReflectionNavigator$6;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator$6: void <init>(com.sun.xml.bind.v2.model.nav.ReflectionNavigator,java.lang.reflect.Method)>(r1, r2);

        return $r0;
    }

    public boolean hasDefaultConstructor(java.lang.Class)
    {
        java.lang.NoSuchMethodException $r2;
        java.lang.Class[] $r1;
        java.lang.Class r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r3;

        r3 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = newarray (java.lang.Class)[0];

        virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public boolean isStaticField(java.lang.reflect.Field)
    {
        int $i0;
        java.lang.reflect.Field r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Field;

        $i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        return $z0;
    }

    public boolean isPublicMethod(java.lang.reflect.Method)
    {
        int $i0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;
        java.lang.reflect.Method r0;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Method;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        return $z0;
    }

    public boolean isPublicField(java.lang.reflect.Field)
    {
        int $i0;
        java.lang.reflect.Field r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Field;

        $i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        return $z0;
    }

    public boolean isEnum(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;
        boolean $z0;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Ljava/lang/Enum;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        return $z0;
    }

    public java.lang.reflect.Field[] getEnumConstants(java.lang.Class)
    {
        java.lang.Object[] $r1;
        java.lang.reflect.Field $r6;
        java.lang.NoSuchFieldError $r8;
        java.lang.reflect.Field[] r2;
        java.lang.Enum $r4;
        java.lang.NoSuchFieldException $r7;
        int $i0, $i1, i2;
        java.lang.Class r0;
        java.lang.Object $r3;
        java.lang.String $r5, $r9;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r10;

        r10 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        $i0 = lengthof $r1;

        r2 = newarray (java.lang.reflect.Field)[$i0];

        i2 = 0;

     label2:
        $i1 = lengthof $r1;

        if i2 >= $i1 goto label3;

        $r3 = $r1[i2];

        $r4 = (java.lang.Enum) $r3;

        $r5 = virtualinvoke $r4.<java.lang.Enum: java.lang.String name()>();

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>($r5);

        r2[i2] = $r6;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r2;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.NoSuchFieldError;

        $r9 = virtualinvoke $r7.<java.lang.NoSuchFieldException: java.lang.String getMessage()>();

        specialinvoke $r8.<java.lang.NoSuchFieldError: void <init>(java.lang.String)>($r9);

        throw $r8;

        catch java.lang.NoSuchFieldException from label1 to label3 with label4;
    }

    public java.lang.reflect.Type getVoidType()
    {
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        return class "Ljava/lang/Void;";
    }

    public java.lang.String getPackageName(java.lang.Class)
    {
        int $i0;
        java.lang.Class r0;
        java.lang.String $r1, $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r3;

        r3 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 >= 0 goto label1;

        return "";

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r2;
    }

    public java.lang.Class findClass(java.lang.String, java.lang.Class)
    {
        java.lang.Class r0, $r3;
        java.lang.ClassNotFoundException $r4;
        java.lang.ClassLoader $r1, r6;
        java.lang.String r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r5;

        r5 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

     label1:
        $r1 = staticinvoke <com.sun.xml.bind.v2.model.nav.SecureLoader: java.lang.ClassLoader getClassClassLoader(java.lang.Class)>(r0);

        r6 = $r1;

        if $r1 != null goto label2;

        r6 = staticinvoke <com.sun.xml.bind.v2.model.nav.SecureLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label2:
        $r3 = virtualinvoke r6.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2);

     label3:
        return $r3;

     label4:
        $r4 := @caughtexception;

        return null;

        catch java.lang.ClassNotFoundException from label1 to label3 with label4;
    }

    public boolean isBridgeMethod(java.lang.reflect.Method)
    {
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;
        java.lang.reflect.Method r0;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Method;

        $z0 = virtualinvoke r0.<java.lang.reflect.Method: boolean isBridge()>();

        return $z0;
    }

    public boolean isOverriding(java.lang.reflect.Method, java.lang.Class)
    {
        java.lang.NoSuchMethodException $r4;
        java.lang.Class[] $r2;
        java.lang.Class r6;
        java.lang.String $r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r5;
        java.lang.reflect.Method r0, $r3;

        r5 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Method;

        r6 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

     label1:
        if r6 == null goto label7;

     label2:
        $r3 = virtualinvoke r6.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r1, $r2);

        if $r3 == null goto label4;

     label3:
        return 1;

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

     label6:
        r6 = virtualinvoke r6.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label7:
        return 0;

        catch java.lang.NoSuchMethodException from label2 to label3 with label5;
    }

    public boolean isInterface(java.lang.Class)
    {
        java.lang.Class r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        return $z0;
    }

    public boolean isTransient(java.lang.reflect.Field)
    {
        int $i0;
        java.lang.reflect.Field r0;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r1;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Field;

        $i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i0);

        return $z0;
    }

    public boolean isInnerClass(java.lang.Class)
    {
        int $i0;
        java.lang.Class r0, $r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;
        boolean $z0, $z1;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r1 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isSameType(java.lang.reflect.Type, java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0, r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r2;
        boolean $z0;

        r2 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.reflect.Type;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    private java.lang.reflect.Type fix(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType r1;
        java.lang.reflect.Type r0, $r2, $r3;
        java.lang.Class r4, $r6;
        java.lang.Object $r5;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r7;
        boolean $z0, $z1;

        r7 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        r1 = (java.lang.reflect.GenericArrayType) r0;

        $r2 = interfaceinvoke r1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $z1 = $r2 instanceof java.lang.Class;

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        r4 = (java.lang.Class) $r3;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r4, 0);

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        return $r6;

     label2:
        return r0;
    }

    public volatile boolean isSameType(java.lang.Object, java.lang.Object)
    {
        java.lang.reflect.Type $r3, $r4;
        java.lang.Object r1, r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.reflect.Type) r1;

        $r3 = (java.lang.reflect.Type) r2;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isSameType(java.lang.reflect.Type,java.lang.reflect.Type)>($r4, $r3);

        return $z0;
    }

    public volatile boolean isInnerClass(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isInnerClass(java.lang.Class)>($r2);

        return $z0;
    }

    public volatile boolean isTransient(java.lang.Object)
    {
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Field $r2;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Field) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isTransient(java.lang.reflect.Field)>($r2);

        return $z0;
    }

    public volatile boolean isInterface(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isInterface(java.lang.Class)>($r2);

        return $z0;
    }

    public volatile boolean isOverriding(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2;
        java.lang.Class $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Method $r4;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.reflect.Method) r1;

        $r3 = (java.lang.Class) r2;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isOverriding(java.lang.reflect.Method,java.lang.Class)>($r4, $r3);

        return $z0;
    }

    public volatile boolean isBridgeMethod(java.lang.Object)
    {
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Method) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isBridgeMethod(java.lang.reflect.Method)>($r2);

        return $z0;
    }

    public volatile java.lang.Object findClass(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.Class $r3, $r4;
        java.lang.String r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Class) r2;

        $r4 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class findClass(java.lang.String,java.lang.Class)>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.String getPackageName(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.String getPackageName(java.lang.Class)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getVoidType()
    {
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Type $r1;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Type getVoidType()>();

        return $r1;
    }

    public volatile java.lang.Object[] getEnumConstants(java.lang.Object)
    {
        java.lang.reflect.Field[] $r3;
        java.lang.Object r1;
        java.lang.Class $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Field[] getEnumConstants(java.lang.Class)>($r2);

        return $r3;
    }

    public volatile boolean isFinal(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isFinal(java.lang.Class)>($r2);

        return $z0;
    }

    public volatile boolean isAbstract(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isAbstract(java.lang.Class)>($r2);

        return $z0;
    }

    public volatile java.lang.Object erasure(java.lang.Object)
    {
        java.lang.reflect.Type $r2;
        java.lang.Object r1;
        java.lang.Class $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Type) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class erasure(java.lang.reflect.Type)>($r2);

        return $r3;
    }

    public volatile boolean isEnum(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isEnum(java.lang.Class)>($r2);

        return $z0;
    }

    public volatile boolean isPublicField(java.lang.Object)
    {
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Field $r2;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Field) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isPublicField(java.lang.reflect.Field)>($r2);

        return $z0;
    }

    public volatile boolean isFinalMethod(java.lang.Object)
    {
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Method) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isFinalMethod(java.lang.reflect.Method)>($r2);

        return $z0;
    }

    public volatile boolean isPublicMethod(java.lang.Object)
    {
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Method) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isPublicMethod(java.lang.reflect.Method)>($r2);

        return $z0;
    }

    public volatile boolean isStaticField(java.lang.Object)
    {
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Field $r2;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Field) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isStaticField(java.lang.reflect.Field)>($r2);

        return $z0;
    }

    public volatile boolean hasDefaultConstructor(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean hasDefaultConstructor(java.lang.Class)>($r2);

        return $z0;
    }

    public volatile com.sun.xml.bind.v2.runtime.Location getMethodLocation(java.lang.Object)
    {
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        com.sun.xml.bind.v2.runtime.Location $r3;
        java.lang.reflect.Method $r2;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Method) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: com.sun.xml.bind.v2.runtime.Location getMethodLocation(java.lang.reflect.Method)>($r2);

        return $r3;
    }

    public volatile com.sun.xml.bind.v2.runtime.Location getFieldLocation(java.lang.Object)
    {
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Field $r2;
        com.sun.xml.bind.v2.runtime.Location $r3;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Field) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: com.sun.xml.bind.v2.runtime.Location getFieldLocation(java.lang.reflect.Field)>($r2);

        return $r3;
    }

    public volatile com.sun.xml.bind.v2.runtime.Location getClassLocation(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        com.sun.xml.bind.v2.runtime.Location $r3;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: com.sun.xml.bind.v2.runtime.Location getClassLocation(java.lang.Class)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getPrimitive(java.lang.Class)
    {
        java.lang.Class r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Type $r2;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Type getPrimitive(java.lang.Class)>(r1);

        return $r2;
    }

    public volatile boolean isPrimitive(java.lang.Object)
    {
        java.lang.reflect.Type $r2;
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Type) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isPrimitive(java.lang.reflect.Type)>($r2);

        return $z0;
    }

    public volatile boolean isParameterizedType(java.lang.Object)
    {
        java.lang.reflect.Type $r2;
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Type) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isParameterizedType(java.lang.reflect.Type)>($r2);

        return $z0;
    }

    public volatile java.lang.Object getTypeArgument(java.lang.Object, int)
    {
        java.lang.reflect.Type $r2, $r3;
        int i0;
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = (java.lang.reflect.Type) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Type getTypeArgument(java.lang.reflect.Type,int)>($r2, i0);

        return $r3;
    }

    public volatile java.lang.Object getComponentType(java.lang.Object)
    {
        java.lang.reflect.Type $r2, $r3;
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Type) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Type getComponentType(java.lang.reflect.Type)>($r2);

        return $r3;
    }

    public volatile boolean isArrayButNotByteArray(java.lang.Object)
    {
        java.lang.reflect.Type $r2;
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Type) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isArrayButNotByteArray(java.lang.reflect.Type)>($r2);

        return $z0;
    }

    public volatile boolean isArray(java.lang.Object)
    {
        java.lang.reflect.Type $r2;
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Type) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isArray(java.lang.reflect.Type)>($r2);

        return $z0;
    }

    public volatile java.lang.Object asDecl(java.lang.Class)
    {
        java.lang.Class r1, $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class asDecl(java.lang.Class)>(r1);

        return $r2;
    }

    public volatile java.lang.Object asDecl(java.lang.Object)
    {
        java.lang.reflect.Type $r2;
        java.lang.Object r1;
        java.lang.Class $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Type) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class asDecl(java.lang.reflect.Type)>($r2);

        return $r3;
    }

    public volatile java.lang.Object use(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class use(java.lang.Class)>($r2);

        return $r3;
    }

    public volatile java.lang.Object ref(java.lang.Class)
    {
        java.lang.Class r1, $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class ref(java.lang.Class)>(r1);

        return $r2;
    }

    public volatile boolean isSubClassOf(java.lang.Object, java.lang.Object)
    {
        java.lang.reflect.Type $r3, $r4;
        java.lang.Object r1, r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.reflect.Type) r1;

        $r3 = (java.lang.reflect.Type) r2;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isSubClassOf(java.lang.reflect.Type,java.lang.reflect.Type)>($r4, $r3);

        return $z0;
    }

    public volatile boolean isStaticMethod(java.lang.Object)
    {
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Method) r1;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean isStaticMethod(java.lang.reflect.Method)>($r2);

        return $z0;
    }

    public volatile java.lang.Object[] getMethodParameters(java.lang.Object)
    {
        java.lang.reflect.Type[] $r3;
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Method $r2;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Method) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Type[] getMethodParameters(java.lang.reflect.Method)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getReturnType(java.lang.Object)
    {
        java.lang.reflect.Type $r3;
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Method $r2;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Method) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Type getReturnType(java.lang.reflect.Method)>($r2);

        return $r3;
    }

    public volatile java.lang.String getMethodName(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.String $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Method $r2;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Method) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.String getMethodName(java.lang.reflect.Method)>($r2);

        return $r3;
    }

    public volatile java.lang.String getFieldName(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.String $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Field $r2;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Field) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.String getFieldName(java.lang.reflect.Field)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getFieldType(java.lang.Object)
    {
        java.lang.reflect.Type $r3;
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Field $r2;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Field) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Type getFieldType(java.lang.reflect.Field)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getDeclaringClassForMethod(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Method $r2;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Method) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class getDeclaringClassForMethod(java.lang.reflect.Method)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getDeclaringClassForField(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Field $r2;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Field) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class getDeclaringClassForField(java.lang.reflect.Field)>($r2);

        return $r3;
    }

    public volatile java.util.Collection getDeclaredMethods(java.lang.Object)
    {
        java.util.Collection $r3;
        java.lang.Object r1;
        java.lang.Class $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.util.Collection getDeclaredMethods(java.lang.Class)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getDeclaredField(java.lang.Object, java.lang.String)
    {
        java.lang.Object r1;
        java.lang.Class $r3;
        java.lang.String r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;
        java.lang.reflect.Field $r4;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = (java.lang.Class) r1;

        $r4 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String)>($r3, r2);

        return $r4;
    }

    public volatile java.util.Collection getDeclaredFields(java.lang.Object)
    {
        java.util.Collection $r3;
        java.lang.Object r1;
        java.lang.Class $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.util.Collection getDeclaredFields(java.lang.Class)>($r2);

        return $r3;
    }

    public volatile java.lang.String getClassShortName(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.String getClassShortName(java.lang.Class)>($r2);

        return $r3;
    }

    public volatile java.lang.String getTypeName(java.lang.Object)
    {
        java.lang.reflect.Type $r2;
        java.lang.Object r1;
        java.lang.String $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.reflect.Type) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.String getTypeName(java.lang.reflect.Type)>($r2);

        return $r3;
    }

    public volatile java.lang.String getClassName(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.String getClassName(java.lang.Class)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getBaseClass(java.lang.Object, java.lang.Object)
    {
        java.lang.reflect.Type $r4, $r5;
        java.lang.Object r1, r2;
        java.lang.Class $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.reflect.Type) r1;

        $r3 = (java.lang.Class) r2;

        $r5 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Type getBaseClass(java.lang.reflect.Type,java.lang.Class)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object getSuperClass(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class getSuperClass(java.lang.Class)>($r2);

        return $r3;
    }

    static com.sun.xml.bind.v2.model.nav.TypeVisitor access$000()
    {
        com.sun.xml.bind.v2.model.nav.TypeVisitor $r0;

        $r0 = <com.sun.xml.bind.v2.model.nav.ReflectionNavigator: com.sun.xml.bind.v2.model.nav.TypeVisitor binder>;

        return $r0;
    }

    static void <clinit>()
    {
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator$2 $r2;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator$1 $r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator$3 $r3;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/model/nav/ReflectionNavigator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.model.nav.ReflectionNavigator: boolean $assertionsDisabled> = $z1;

        $r1 = new com.sun.xml.bind.v2.model.nav.ReflectionNavigator$1;

        specialinvoke $r1.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator$1: void <init>()>();

        <com.sun.xml.bind.v2.model.nav.ReflectionNavigator: com.sun.xml.bind.v2.model.nav.TypeVisitor baseClassFinder> = $r1;

        $r2 = new com.sun.xml.bind.v2.model.nav.ReflectionNavigator$2;

        specialinvoke $r2.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator$2: void <init>()>();

        <com.sun.xml.bind.v2.model.nav.ReflectionNavigator: com.sun.xml.bind.v2.model.nav.TypeVisitor binder> = $r2;

        $r3 = new com.sun.xml.bind.v2.model.nav.ReflectionNavigator$3;

        specialinvoke $r3.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator$3: void <init>()>();

        <com.sun.xml.bind.v2.model.nav.ReflectionNavigator: com.sun.xml.bind.v2.model.nav.TypeVisitor eraser> = $r3;

        return;
    }
}
