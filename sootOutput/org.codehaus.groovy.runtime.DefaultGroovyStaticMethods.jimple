public class org.codehaus.groovy.runtime.DefaultGroovyStaticMethods extends java.lang.Object
{

    public void <init>()
    {
        org.codehaus.groovy.runtime.DefaultGroovyStaticMethods r0;

        r0 := @this: org.codehaus.groovy.runtime.DefaultGroovyStaticMethods;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Thread start(java.lang.Thread, groovy.lang.Closure)
    {
        groovy.lang.Closure r0;
        java.lang.Thread $r1, r2;

        r2 := @parameter0: java.lang.Thread;

        r0 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyStaticMethods: java.lang.Thread createThread(java.lang.String,boolean,groovy.lang.Closure)>(null, 0, r0);

        return $r1;
    }

    public static java.lang.Thread start(java.lang.Thread, java.lang.String, groovy.lang.Closure)
    {
        java.lang.Thread $r2, r3;
        groovy.lang.Closure r1;
        java.lang.String r0;

        r3 := @parameter0: java.lang.Thread;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyStaticMethods: java.lang.Thread createThread(java.lang.String,boolean,groovy.lang.Closure)>(r0, 0, r1);

        return $r2;
    }

    public static java.lang.Thread startDaemon(java.lang.Thread, groovy.lang.Closure)
    {
        groovy.lang.Closure r0;
        java.lang.Thread $r1, r2;

        r2 := @parameter0: java.lang.Thread;

        r0 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyStaticMethods: java.lang.Thread createThread(java.lang.String,boolean,groovy.lang.Closure)>(null, 1, r0);

        return $r1;
    }

    public static java.lang.Thread startDaemon(java.lang.Thread, java.lang.String, groovy.lang.Closure)
    {
        java.lang.Thread $r2, r3;
        groovy.lang.Closure r1;
        java.lang.String r0;

        r3 := @parameter0: java.lang.Thread;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyStaticMethods: java.lang.Thread createThread(java.lang.String,boolean,groovy.lang.Closure)>(r0, 1, r1);

        return $r2;
    }

    private static java.lang.Thread createThread(java.lang.String, boolean, groovy.lang.Closure)
    {
        java.lang.Thread r2, $r3;
        groovy.lang.Closure r1;
        java.lang.String r0;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: groovy.lang.Closure;

        if r0 == null goto label1;

        $r3 = new java.lang.Thread;

        specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r1, r0);

        goto label2;

     label1:
        $r3 = new java.lang.Thread;

        specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>(r1);

     label2:
        r2 = $r3;

        if z0 == 0 goto label3;

        virtualinvoke $r3.<java.lang.Thread: void setDaemon(boolean)>(1);

     label3:
        virtualinvoke r2.<java.lang.Thread: void start()>();

        return r2;
    }

    public static java.util.regex.Matcher getLastMatcher(java.util.regex.Matcher)
    {
        java.util.regex.Matcher $r0, r1;

        r1 := @parameter0: java.util.regex.Matcher;

        $r0 = staticinvoke <org.codehaus.groovy.runtime.RegexSupport: java.util.regex.Matcher getLastMatcher()>();

        return $r0;
    }

    private static void sleepImpl(long, groovy.lang.Closure)
    {
        groovy.lang.Closure r1;
        long $l0, l1, $l2, $l3, l4;
        byte $b5;
        java.lang.InterruptedException $r0;
        int $i6;
        java.lang.Object $r2;
        boolean $z0;

        l1 := @parameter0: long;

        r1 := @parameter1: groovy.lang.Closure;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l4 = l1;

     label1:
        $b5 = l4 cmp 0L;

        $i6 = (int) $b5;

        if $i6 <= 0 goto label6;

     label2:
        staticinvoke <java.lang.Thread: void sleep(long)>(l4);

        l4 = 0L;

     label3:
        goto label1;

     label4:
        $r0 := @caughtexception;

        if r1 == null goto label5;

        $r2 = virtualinvoke r1.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r0);

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        return;

     label5:
        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = l1 + $l0;

        l4 = $l3 - $l2;

        goto label1;

     label6:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public static void sleep(java.lang.Object, long)
    {
        long l0;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyStaticMethods: void sleepImpl(long,groovy.lang.Closure)>(l0, null);

        return;
    }

    public static void sleep(java.lang.Object, long, groovy.lang.Closure)
    {
        groovy.lang.Closure r0;
        long l0;
        java.lang.Object r1;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r0 := @parameter2: groovy.lang.Closure;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyStaticMethods: void sleepImpl(long,groovy.lang.Closure)>(l0, r0);

        return;
    }

    public static java.util.Date parse(java.util.Date, java.lang.String, java.lang.String) throws java.text.ParseException
    {
        java.util.Date $r3, r4;
        java.text.SimpleDateFormat $r0;
        java.lang.String r1, r2;

        r4 := @parameter0: java.util.Date;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>(r1);

        $r3 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r2);

        return $r3;
    }
}
