public class com.jhlabs.math.FBM extends java.lang.Object implements com.jhlabs.math.Function2D
{
    protected float[] exponents;
    protected float H;
    protected float lacunarity;
    protected float octaves;
    protected com.jhlabs.math.Function2D basis;

    public void <init>(float, float, float)
    {
        com.jhlabs.math.FBM r0;
        com.jhlabs.math.Noise $r1;
        float f0, f1, f2;

        r0 := @this: com.jhlabs.math.FBM;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $r1 = new com.jhlabs.math.Noise;

        specialinvoke $r1.<com.jhlabs.math.Noise: void <init>()>();

        specialinvoke r0.<com.jhlabs.math.FBM: void <init>(float,float,float,com.jhlabs.math.Function2D)>(f0, f1, f2, $r1);

        return;
    }

    public void <init>(float, float, float, com.jhlabs.math.Function2D)
    {
        com.jhlabs.math.FBM r0;
        float[] $r2, $r3;
        int $i0, $i1, $i2, i3;
        double $d0, $d1, $d2;
        com.jhlabs.math.Function2D r1;
        float f0, f1, f2, $f3, $f4, f5;

        r0 := @this: com.jhlabs.math.FBM;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        r1 := @parameter3: com.jhlabs.math.Function2D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jhlabs.math.FBM: float H> = f0;

        r0.<com.jhlabs.math.FBM: float lacunarity> = f1;

        r0.<com.jhlabs.math.FBM: float octaves> = f2;

        r0.<com.jhlabs.math.FBM: com.jhlabs.math.Function2D basis> = r1;

        $i0 = (int) f2;

        $i1 = $i0 + 1;

        $r2 = newarray (float)[$i1];

        r0.<com.jhlabs.math.FBM: float[] exponents> = $r2;

        f5 = 1.0F;

        i3 = 0;

     label1:
        $i2 = (int) f2;

        if i3 > $i2 goto label2;

        $r3 = r0.<com.jhlabs.math.FBM: float[] exponents>;

        $d1 = (double) f5;

        $f3 = neg f0;

        $d0 = (double) $f3;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        $f4 = (float) $d2;

        $r3[i3] = $f4;

        f5 = f5 * f1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void setBasis(com.jhlabs.math.Function2D)
    {
        com.jhlabs.math.Function2D r1;
        com.jhlabs.math.FBM r0;

        r0 := @this: com.jhlabs.math.FBM;

        r1 := @parameter0: com.jhlabs.math.Function2D;

        r0.<com.jhlabs.math.FBM: com.jhlabs.math.Function2D basis> = r1;

        return;
    }

    public com.jhlabs.math.Function2D getBasisType()
    {
        com.jhlabs.math.Function2D $r1;
        com.jhlabs.math.FBM r0;

        r0 := @this: com.jhlabs.math.FBM;

        $r1 = r0.<com.jhlabs.math.FBM: com.jhlabs.math.Function2D basis>;

        return $r1;
    }

    public float evaluate(float, float)
    {
        com.jhlabs.math.FBM r0;
        float[] $r2, $r4;
        byte $b2;
        int $i0, $i1, i3;
        com.jhlabs.math.Function2D $r1, $r3;
        float $f0, $f1, $f2, $f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, f14, f15, f16, f17, f18;

        r0 := @this: com.jhlabs.math.FBM;

        f14 := @parameter0: float;

        f15 := @parameter1: float;

        f16 = 0.0F;

        f17 = f14 + 371.0F;

        f18 = f15 + 529.0F;

        i3 = 0;

     label1:
        $f0 = r0.<com.jhlabs.math.FBM: float octaves>;

        $i0 = (int) $f0;

        if i3 >= $i0 goto label2;

        $r3 = r0.<com.jhlabs.math.FBM: com.jhlabs.math.Function2D basis>;

        $f9 = interfaceinvoke $r3.<com.jhlabs.math.Function2D: float evaluate(float,float)>(f17, f18);

        $r4 = r0.<com.jhlabs.math.FBM: float[] exponents>;

        $f10 = $r4[i3];

        $f11 = $f9 * $f10;

        f16 = f16 + $f11;

        $f12 = r0.<com.jhlabs.math.FBM: float lacunarity>;

        f17 = f17 * $f12;

        $f13 = r0.<com.jhlabs.math.FBM: float lacunarity>;

        f18 = f18 * $f13;

        i3 = i3 + 1;

        goto label1;

     label2:
        $f3 = r0.<com.jhlabs.math.FBM: float octaves>;

        $f1 = r0.<com.jhlabs.math.FBM: float octaves>;

        $i1 = (int) $f1;

        $f2 = (float) $i1;

        f4 = $f3 - $f2;

        $b2 = f4 cmpl 0.0F;

        if $b2 == 0 goto label3;

        $r1 = r0.<com.jhlabs.math.FBM: com.jhlabs.math.Function2D basis>;

        $f5 = interfaceinvoke $r1.<com.jhlabs.math.Function2D: float evaluate(float,float)>(f17, f18);

        $f7 = f4 * $f5;

        $r2 = r0.<com.jhlabs.math.FBM: float[] exponents>;

        $f6 = $r2[i3];

        $f8 = $f7 * $f6;

        f16 = f16 + $f8;

     label3:
        return f16;
    }
}
