public class org.springframework.beans.factory.support.DefaultListableBeanFactory extends org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory implements org.springframework.beans.factory.config.ConfigurableListableBeanFactory, org.springframework.beans.factory.support.BeanDefinitionRegistry, java.io.Serializable
{
    private static java.lang.Class javaxInjectProviderClass;
    private static final java.util.Map serializableFactories;
    private java.lang.String serializationId;
    private boolean allowBeanDefinitionOverriding;
    private boolean allowEagerClassLoading;
    private org.springframework.beans.factory.support.AutowireCandidateResolver autowireCandidateResolver;
    private final java.util.Map resolvableDependencies;
    private final java.util.Map beanDefinitionMap;
    private final java.util.List beanDefinitionNames;
    private boolean configurationFrozen;
    private java.lang.String[] frozenBeanDefinitionNames;

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.Class $r0, $r2;
        java.lang.ClassNotFoundException $r4;
        java.lang.ClassLoader $r1;

        <org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Class javaxInjectProviderClass> = null;

        $r0 = class "Lorg/springframework/beans/factory/support/DefaultListableBeanFactory;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label1:
        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("javax.inject.Provider");

        <org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Class javaxInjectProviderClass> = $r2;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map serializableFactories> = $r3;

        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void <init>()
    {
        org.springframework.beans.factory.support.SimpleAutowireCandidateResolver $r1;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.util.HashMap $r2;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;
        java.util.ArrayList $r4;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        specialinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowBeanDefinitionOverriding> = 1;

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowEagerClassLoading> = 1;

        $r1 = new org.springframework.beans.factory.support.SimpleAutowireCandidateResolver;

        specialinvoke $r1.<org.springframework.beans.factory.support.SimpleAutowireCandidateResolver: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.support.AutowireCandidateResolver autowireCandidateResolver> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map resolvableDependencies> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map beanDefinitionMap> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.List beanDefinitionNames> = $r4;

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean configurationFrozen> = 0;

        return;
    }

    public void <init>(org.springframework.beans.factory.BeanFactory)
    {
        org.springframework.beans.factory.support.SimpleAutowireCandidateResolver $r2;
        org.springframework.beans.factory.BeanFactory r1;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.util.HashMap $r3;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;
        java.util.ArrayList $r5;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r1 := @parameter0: org.springframework.beans.factory.BeanFactory;

        specialinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void <init>(org.springframework.beans.factory.BeanFactory)>(r1);

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowBeanDefinitionOverriding> = 1;

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowEagerClassLoading> = 1;

        $r2 = new org.springframework.beans.factory.support.SimpleAutowireCandidateResolver;

        specialinvoke $r2.<org.springframework.beans.factory.support.SimpleAutowireCandidateResolver: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.support.AutowireCandidateResolver autowireCandidateResolver> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map resolvableDependencies> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map beanDefinitionMap> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.List beanDefinitionNames> = $r5;

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean configurationFrozen> = 0;

        return;
    }

    public void setSerializationId(java.lang.String)
    {
        java.util.Map $r4, $r6;
        java.lang.String r0, $r2, $r3;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r1;
        java.lang.ref.WeakReference $r5;

        r1 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r6 = <org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map serializableFactories>;

        $r5 = new java.lang.ref.WeakReference;

        specialinvoke $r5.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r5);

        goto label2;

     label1:
        $r2 = r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String serializationId>;

        if $r2 == null goto label2;

        $r4 = <org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map serializableFactories>;

        $r3 = r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String serializationId>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

     label2:
        r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String serializationId> = r0;

        return;
    }

    public void setAllowBeanDefinitionOverriding(boolean)
    {
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowBeanDefinitionOverriding> = z0;

        return;
    }

    public void setAllowEagerClassLoading(boolean)
    {
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowEagerClassLoading> = z0;

        return;
    }

    public void setAutowireCandidateResolver(org.springframework.beans.factory.support.AutowireCandidateResolver)
    {
        java.security.AccessControlContext $r5;
        org.springframework.beans.factory.support.AutowireCandidateResolver r0;
        org.springframework.beans.factory.BeanFactoryAware $r3;
        org.springframework.beans.factory.support.DefaultListableBeanFactory$1 $r4;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r1;
        java.lang.SecurityManager $r2;
        boolean $z0;

        r1 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r0 := @parameter0: org.springframework.beans.factory.support.AutowireCandidateResolver;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "AutowireCandidateResolver must not be null");

        $z0 = r0 instanceof org.springframework.beans.factory.BeanFactoryAware;

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r2 == null goto label1;

        $r4 = new org.springframework.beans.factory.support.DefaultListableBeanFactory$1;

        specialinvoke $r4.<org.springframework.beans.factory.support.DefaultListableBeanFactory$1: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory,org.springframework.beans.factory.support.AutowireCandidateResolver,org.springframework.beans.factory.BeanFactory)>(r1, r0, r1);

        $r5 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.security.AccessControlContext getAccessControlContext()>();

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>($r4, $r5);

        goto label2;

     label1:
        $r3 = (org.springframework.beans.factory.BeanFactoryAware) r0;

        interfaceinvoke $r3.<org.springframework.beans.factory.BeanFactoryAware: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>(r1);

     label2:
        r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.support.AutowireCandidateResolver autowireCandidateResolver> = r0;

        return;
    }

    public org.springframework.beans.factory.support.AutowireCandidateResolver getAutowireCandidateResolver()
    {
        org.springframework.beans.factory.support.AutowireCandidateResolver $r1;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.support.AutowireCandidateResolver autowireCandidateResolver>;

        return $r1;
    }

    public void copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)
    {
        org.springframework.beans.factory.support.AutowireCandidateResolver $r3;
        java.util.Map $r4, $r5;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0, r2;
        org.springframework.beans.factory.config.ConfigurableBeanFactory r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r1 := @parameter0: org.springframework.beans.factory.config.ConfigurableBeanFactory;

        specialinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)>(r1);

        $z0 = r1 instanceof org.springframework.beans.factory.support.DefaultListableBeanFactory;

        if $z0 == 0 goto label1;

        r2 = (org.springframework.beans.factory.support.DefaultListableBeanFactory) r1;

        $z1 = r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowBeanDefinitionOverriding>;

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowBeanDefinitionOverriding> = $z1;

        $z2 = r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowEagerClassLoading>;

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowEagerClassLoading> = $z2;

        $r3 = r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.support.AutowireCandidateResolver autowireCandidateResolver>;

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.support.AutowireCandidateResolver autowireCandidateResolver> = $r3;

        $r5 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map resolvableDependencies>;

        $r4 = r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map resolvableDependencies>;

        interfaceinvoke $r5.<java.util.Map: void putAll(java.util.Map)>($r4);

     label1:
        return;
    }

    public java.lang.Object getBean(java.lang.Class) throws org.springframework.beans.BeansException
    {
        java.lang.Object[] $r19;
        java.lang.String[] $r2, $r18, r20;
        java.util.ArrayList $r15;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, $i7;
        org.springframework.beans.factory.config.BeanDefinition $r17;
        java.lang.String $r7, $r9, $r13, r16;
        boolean $z0;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r3;
        org.springframework.beans.factory.BeanFactory $r10, $r11;
        java.lang.Class r0;
        java.lang.StringBuilder $r4, $r5, $r6, $r8;
        java.lang.Object $r12, $r14;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r1;

        r1 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Required type must not be null");

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class)>(r0);

        r20 = $r2;

        $i0 = lengthof $r2;

        if $i0 <= 1 goto label4;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        i3 = lengthof $r2;

        i6 = 0;

        goto label3;

     label1:
        r16 = $r2[i6];

        $r17 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>(r16);

        $z0 = interfaceinvoke $r17.<org.springframework.beans.factory.config.BeanDefinition: boolean isAutowireCandidate()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>(r16);

     label2:
        i6 = i6 + 1;

     label3:
        if i6 < i3 goto label1;

        $i4 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        if $i4 <= 0 goto label4;

        $i5 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        $r18 = newarray (java.lang.String)[$i5];

        $r19 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r18);

        r20 = (java.lang.String[]) $r19;

     label4:
        $i7 = lengthof r20;

        if $i7 != 1 goto label5;

        $r13 = r20[0];

        $r14 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>($r13, r0);

        return $r14;

     label5:
        $i1 = lengthof r20;

        if $i1 != 0 goto label6;

        $r10 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        if $r10 == null goto label6;

        $r11 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $r12 = interfaceinvoke $r11.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.Class)>(r0);

        return $r12;

     label6:
        $r3 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("expected single bean but found ");

        $i2 = lengthof r20;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r7 = staticinvoke <org.springframework.util.StringUtils: java.lang.String arrayToCommaDelimitedString(java.lang.Object[])>(r20);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.Class,java.lang.String)>(r0, $r9);

        throw $r3;
    }

    public boolean containsBeanDefinition(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.String r0;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r1;
        boolean $z0;

        r1 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Bean name must not be null");

        $r2 = r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map beanDefinitionMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    public int getBeanDefinitionCount()
    {
        int $i0;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map beanDefinitionMap>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.lang.String[] getBeanDefinitionNames()
    {
        java.lang.Throwable $r6;
        java.util.List $r3;
        java.util.Map $r1;
        java.lang.String[] $r2, $r4, $r5;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map beanDefinitionMap>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] frozenBeanDefinitionNames>;

        if $r2 == null goto label3;

        $r5 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] frozenBeanDefinitionNames>;

        exitmonitor $r1;

     label2:
        return $r5;

     label3:
        $r3 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.List beanDefinitionNames>;

        $r4 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r3);

        exitmonitor $r1;

     label4:
        return $r4;

     label5:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.lang.String[] getBeanNamesForType(java.lang.Class)
    {
        java.lang.Class r1;
        java.lang.String[] $r2;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>(r1, 1, 1);

        return $r2;
    }

    public java.lang.String[] getBeanNamesForType(java.lang.Class, boolean, boolean)
    {
        boolean $z0, $z1, z2, $z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, z21, $z22, $z23, $z24, $z25;
        org.springframework.beans.factory.CannotLoadBeanClassException $r19;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r14, $r16, $r17, $r21, $r23, $r24;
        org.springframework.beans.factory.support.RootBeanDefinition $r3;
        java.lang.String[] $r2, $r8, $r11;
        java.util.ArrayList $r0;
        int i0, i1, i2, i3;
        java.lang.String $r7, $r18, $r25, r26, $r27, r28;
        org.springframework.beans.factory.BeanDefinitionStoreException $r12;
        java.lang.Class r4;
        org.apache.commons.logging.Log $r13, $r15, $r20, $r22;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r1;

        r1 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r4 := @parameter0: java.lang.Class;

        z4 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanDefinitionNames()>();

        i0 = lengthof $r2;

        i1 = 0;

        goto label21;

     label01:
        r26 = $r2[i1];

        $z0 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isAlias(java.lang.String)>(r26);

        if $z0 != 0 goto label20;

     label02:
        $r3 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)>(r26);

        $z1 = virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isAbstract()>();

        if $z1 != 0 goto label20;

        if z2 != 0 goto label04;

        $z10 = virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: boolean hasBeanClass()>();

        if $z10 != 0 goto label03;

        $z11 = virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isLazyInit()>();

        if $z11 == 0 goto label03;

        $z12 = r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowEagerClassLoading>;

        if $z12 == 0 goto label20;

     label03:
        $r27 = virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getFactoryBeanName()>();

        $z19 = specialinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean requiresEagerInitForType(java.lang.String)>($r27);

        if $z19 != 0 goto label20;

     label04:
        $z3 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>(r26, $r3);

        if z2 != 0 goto label05;

        if $z3 == 0 goto label05;

        $z9 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean containsSingleton(java.lang.String)>(r26);

        if $z9 == 0 goto label07;

     label05:
        if z4 != 0 goto label06;

        $z8 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isSingleton(java.lang.String)>(r26);

        if $z8 == 0 goto label07;

     label06:
        $z5 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isTypeMatch(java.lang.String,java.lang.Class)>(r26, r4);

        if $z5 == 0 goto label07;

        $z25 = 1;

        $z24 = 1;

        goto label08;

     label07:
        $z25 = 0;

        $z24 = 0;

     label08:
        z21 = $z24;

        if $z25 != 0 goto label12;

        if $z3 == 0 goto label12;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("&");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r26 = $r7;

        if z4 != 0 goto label09;

        $z7 = virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSingleton()>();

        if $z7 == 0 goto label10;

     label09:
        $z6 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isTypeMatch(java.lang.String,java.lang.Class)>($r7, r4);

        if $z6 == 0 goto label10;

        $z22 = 1;

        goto label11;

     label10:
        $z22 = 0;

     label11:
        z21 = $z22;

     label12:
        if z21 == 0 goto label20;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r26);

     label13:
        goto label20;

     label14:
        $r19 := @caughtexception;

        if z2 == 0 goto label15;

        throw $r19;

     label15:
        $r20 = r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.apache.commons.logging.Log logger>;

        $z18 = interfaceinvoke $r20.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z18 == 0 goto label16;

        $r22 = r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.apache.commons.logging.Log logger>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Ignoring bean class loading failure for bean \'");

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r25, $r19);

     label16:
        virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void onSuppressedException(java.lang.Exception)>($r19);

        goto label20;

     label17:
        $r12 := @caughtexception;

        if z2 == 0 goto label18;

        throw $r12;

     label18:
        $r13 = r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.apache.commons.logging.Log logger>;

        $z17 = interfaceinvoke $r13.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z17 == 0 goto label19;

        $r15 = r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.apache.commons.logging.Log logger>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Ignoring unresolvable metadata in bean definition \'");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r18, $r12);

     label19:
        virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void onSuppressedException(java.lang.Exception)>($r12);

     label20:
        i1 = i1 + 1;

     label21:
        if i1 < i0 goto label01;

        $r8 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getSingletonNames()>();

        i2 = lengthof $r8;

        i3 = 0;

        goto label27;

     label22:
        r28 = $r8[i3];

        $z13 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean containsBeanDefinition(java.lang.String)>(r28);

        if $z13 != 0 goto label26;

        $z14 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isFactoryBean(java.lang.String)>(r28);

        if $z14 == 0 goto label25;

        if z4 != 0 goto label23;

        $z16 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isSingleton(java.lang.String)>(r28);

        if $z16 == 0 goto label24;

     label23:
        $z15 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isTypeMatch(java.lang.String,java.lang.Class)>(r28, r4);

        if $z15 == 0 goto label24;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r28);

        goto label26;

     label24:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("&");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        r28 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label25:
        $z23 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isTypeMatch(java.lang.String,java.lang.Class)>(r28, r4);

        if $z23 == 0 goto label26;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r28);

     label26:
        i3 = i3 + 1;

     label27:
        if i3 < i2 goto label22;

        $r11 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r0);

        return $r11;

        catch org.springframework.beans.factory.CannotLoadBeanClassException from label02 to label13 with label14;
        catch org.springframework.beans.factory.BeanDefinitionStoreException from label02 to label13 with label17;
    }

    private boolean requiresEagerInitForType(java.lang.String)
    {
        java.lang.String r0;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r1;
        boolean $z0, $z1;

        r1 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isFactoryBean(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean containsSingleton(java.lang.String)>(r0);

        if $z1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Map getBeansOfType(java.lang.Class) throws org.springframework.beans.BeansException
    {
        java.lang.Class r1;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;
        java.util.Map $r2;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map getBeansOfType(java.lang.Class,boolean,boolean)>(r1, 1, 1);

        return $r2;
    }

    public java.util.Map getBeansOfType(java.lang.Class, boolean, boolean) throws org.springframework.beans.BeansException
    {
        java.lang.Throwable $r7;
        java.lang.String[] $r2;
        java.util.LinkedHashMap $r3;
        org.springframework.beans.factory.BeanCreationException $r6, r8;
        int $i0, i1, i2;
        java.lang.String r4, $r9, $r15, $r17;
        boolean z0, z1, $z2, $z3, $z4;
        java.lang.Class r1;
        java.lang.Object $r5;
        org.apache.commons.logging.Log $r10, $r12;
        java.lang.StringBuilder $r11, $r13, $r14, $r16;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r1 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>(r1, z0, z1);

        $r3 = new java.util.LinkedHashMap;

        $i0 = lengthof $r2;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>(int)>($i0);

        i1 = lengthof $r2;

        i2 = 0;

        goto label8;

     label1:
        r4 = $r2[i2];

     label2:
        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>(r4, r1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r5);

     label3:
        goto label7;

     label4:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<org.springframework.beans.factory.BeanCreationException: java.lang.Throwable getMostSpecificCause()>();

        $z2 = $r7 instanceof org.springframework.beans.factory.BeanCurrentlyInCreationException;

        if $z2 == 0 goto label6;

        r8 = (org.springframework.beans.factory.BeanCreationException) $r7;

        $r9 = virtualinvoke r8.<org.springframework.beans.factory.BeanCreationException: java.lang.String getBeanName()>();

        $z3 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isCurrentlyInCreation(java.lang.String)>($r9);

        if $z3 == 0 goto label6;

        $r10 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.apache.commons.logging.Log logger>;

        $z4 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z4 == 0 goto label5;

        $r12 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.apache.commons.logging.Log logger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Ignoring match to currently created bean \'");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r15 = virtualinvoke $r6.<org.springframework.beans.factory.BeanCreationException: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r17);

     label5:
        virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void onSuppressedException(java.lang.Exception)>($r6);

        goto label7;

     label6:
        throw $r6;

     label7:
        i2 = i2 + 1;

     label8:
        if i2 < i1 goto label1;

        return $r3;

        catch org.springframework.beans.factory.BeanCreationException from label2 to label3 with label4;
    }

    public java.util.Map getBeansWithAnnotation(java.lang.Class)
    {
        java.lang.String[] $r2, $r5;
        java.util.LinkedHashMap $r8;
        int $i0;
        java.lang.String r11;
        java.util.LinkedHashSet $r0;
        boolean $z0;
        java.util.Iterator $r9;
        java.util.Collection $r4, $r7;
        java.util.List $r3, $r6;
        java.lang.'annotation'.Annotation $r13;
        java.lang.Object $r10, $r14;
        java.lang.Class r12;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r1;

        r1 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r12 := @parameter0: java.lang.Class;

        $r0 = new java.util.LinkedHashSet;

        $i0 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: int getBeanDefinitionCount()>();

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>(int)>($i0);

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanDefinitionNames()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r4 = (java.util.Collection) $r3;

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        $r5 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getSingletonNames()>();

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r7 = (java.util.Collection) $r6;

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r7);

        $r8 = new java.util.LinkedHashMap;

        specialinvoke $r8.<java.util.LinkedHashMap: void <init>()>();

        $r9 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r10;

        $r13 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.'annotation'.Annotation findAnnotationOnBean(java.lang.String,java.lang.Class)>(r11, r12);

        if $r13 == null goto label2;

        $r14 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.String)>(r11);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r14);

     label2:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r8;
    }

    public java.lang.'annotation'.Annotation findAnnotationOnBean(java.lang.String, java.lang.Class)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r4;
        java.lang.'annotation'.Annotation r7;
        org.springframework.beans.factory.config.BeanDefinition $r3;
        java.lang.Class $r2, $r5, r6;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.Class;

        r7 = null;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Class getType(java.lang.String)>(r1);

        if $r2 == null goto label1;

        r7 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.Class,java.lang.Class)>($r2, r6);

     label1:
        if r7 != null goto label2;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean containsBeanDefinition(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String)>(r1);

        $z1 = $r3 instanceof org.springframework.beans.factory.support.AbstractBeanDefinition;

        if $z1 == 0 goto label2;

        r4 = (org.springframework.beans.factory.support.AbstractBeanDefinition) $r3;

        $z2 = virtualinvoke r4.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean hasBeanClass()>();

        if $z2 == 0 goto label2;

        $r5 = virtualinvoke r4.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Class getBeanClass()>();

        r7 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.Class,java.lang.Class)>($r5, r6);

     label2:
        return r7;
    }

    public void registerResolvableDependency(java.lang.Class, java.lang.Object)
    {
        java.util.Map $r10;
        java.lang.Class r0;
        java.lang.Object r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r2;
        java.lang.String $r6, $r9;
        boolean $z0, $z1, $z2;

        r2 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Type must not be null");

        if r1 == null goto label3;

        $z0 = r1 instanceof org.springframework.beans.factory.ObjectFactory;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $z2 = 0;

        goto label2;

     label1:
        $z2 = 1;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Value [");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not implement specified type [");

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z2, $r9);

        $r10 = r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map resolvableDependencies>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

     label3:
        return;
    }

    public boolean isAutowireCandidate(java.lang.String, org.springframework.beans.factory.config.DependencyDescriptor) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r5, $r7;
        org.springframework.beans.factory.config.DependencyDescriptor r0;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r4;
        java.lang.String r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.springframework.beans.factory.BeanFactory $r2, $r3;
        java.lang.Class $r6, $r8, $r9, $r10;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r1;

        r1 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r11 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.beans.factory.config.DependencyDescriptor;

        if r0 == null goto label1;

        $r8 = virtualinvoke r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class getDependencyType()>();

        if $r8 == null goto label1;

        $r9 = class "Lorg/springframework/beans/factory/FactoryBean;";

        $r10 = virtualinvoke r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class getDependencyType()>();

        $z6 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r10);

        if $z6 == 0 goto label1;

        $z7 = 1;

        goto label2;

     label1:
        $z7 = 0;

     label2:
        if $z7 == 0 goto label3;

        r11 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.lang.String transformedBeanName(java.lang.String)>(r11);

     label3:
        $z0 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean containsBeanDefinition(java.lang.String)>(r11);

        if $z0 == 0 goto label4;

        $r7 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)>(r11);

        $z5 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isAutowireCandidate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.DependencyDescriptor)>(r11, $r7, r0);

        return $z5;

     label4:
        $z1 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean containsSingleton(java.lang.String)>(r11);

        if $z1 == 0 goto label5;

        $r5 = new org.springframework.beans.factory.support.RootBeanDefinition;

        $r6 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Class getType(java.lang.String)>(r11);

        specialinvoke $r5.<org.springframework.beans.factory.support.RootBeanDefinition: void <init>(java.lang.Class)>($r6);

        $z4 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isAutowireCandidate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.DependencyDescriptor)>(r11, $r5, r0);

        return $z4;

     label5:
        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $z2 = $r2 instanceof org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        if $z2 == 0 goto label6;

        $r3 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $r4 = (org.springframework.beans.factory.config.ConfigurableListableBeanFactory) $r3;

        $z3 = interfaceinvoke $r4.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean isAutowireCandidate(java.lang.String,org.springframework.beans.factory.config.DependencyDescriptor)>(r11, r0);

        return $z3;

     label6:
        return 1;
    }

    protected boolean isAutowireCandidate(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, org.springframework.beans.factory.config.DependencyDescriptor)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r1;
        java.lang.Throwable $r8;
        java.lang.Class[] $r3;
        java.lang.String[] $r11;
        org.springframework.beans.factory.config.DependencyDescriptor r4;
        org.springframework.beans.factory.support.AutowireCandidateResolver $r9;
        org.springframework.beans.factory.config.BeanDefinitionHolder $r10;
        org.springframework.beans.factory.support.ConstructorResolver $r7;
        java.lang.Object $r5, $r6;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;
        java.lang.String r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        r4 := @parameter2: org.springframework.beans.factory.config.DependencyDescriptor;

        $r3 = newarray (java.lang.Class)[0];

        virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Class resolveBeanClass(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,java.lang.Class[])>(r1, r2, $r3);

        $z0 = r1.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isFactoryMethodUnique>;

        if $z0 == 0 goto label8;

        $r5 = r1.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Object constructorArgumentLock>;

        entermonitor $r5;

     label1:
        $r6 = r1.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Object resolvedConstructorOrFactoryMethod>;

        if $r6 != null goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        exitmonitor $r5;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r5;

     label6:
        throw $r8;

     label7:
        if $z1 == 0 goto label8;

        $r7 = new org.springframework.beans.factory.support.ConstructorResolver;

        specialinvoke $r7.<org.springframework.beans.factory.support.ConstructorResolver: void <init>(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory)>(r0);

        virtualinvoke $r7.<org.springframework.beans.factory.support.ConstructorResolver: void resolveFactoryMethodIfPossible(org.springframework.beans.factory.support.RootBeanDefinition)>(r1);

     label8:
        $r9 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.support.AutowireCandidateResolver getAutowireCandidateResolver()>();

        $r10 = new org.springframework.beans.factory.config.BeanDefinitionHolder;

        $r11 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getAliases(java.lang.String)>(r2);

        specialinvoke $r10.<org.springframework.beans.factory.config.BeanDefinitionHolder: void <init>(org.springframework.beans.factory.config.BeanDefinition,java.lang.String,java.lang.String[])>(r1, r2, $r11);

        $z2 = interfaceinvoke $r9.<org.springframework.beans.factory.support.AutowireCandidateResolver: boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>($r10, r4);

        return $z2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        java.util.Map $r2;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r6;
        org.springframework.beans.factory.config.BeanDefinition r4;
        java.lang.Object $r3;
        org.apache.commons.logging.Log $r5, $r8;
        java.lang.StringBuilder $r7, $r9, $r10, $r11;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;
        java.lang.String r1, $r12;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map beanDefinitionMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.springframework.beans.factory.config.BeanDefinition) $r3;

        if r4 != null goto label2;

        $r5 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.apache.commons.logging.Log logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("No bean named \'");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found in ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r12);

     label1:
        $r6 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        specialinvoke $r6.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.String)>(r1);

        throw $r6;

     label2:
        return r4;
    }

    public void freezeConfiguration()
    {
        java.lang.Throwable $r4;
        java.util.List $r2;
        java.util.Map $r1;
        java.lang.String[] $r3;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean configurationFrozen> = 1;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map beanDefinitionMap>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.List beanDefinitionNames>;

        $r3 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r2);

        r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] frozenBeanDefinitionNames> = $r3;

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isConfigurationFrozen()
    {
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        $z0 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean configurationFrozen>;

        return $z0;
    }

    protected boolean isBeanEligibleForMetadataCaching(java.lang.String)
    {
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean configurationFrozen>;

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean isBeanEligibleForMetadataCaching(java.lang.String)>(r1);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public void preInstantiateSingletons() throws org.springframework.beans.BeansException
    {
        java.security.AccessControlContext $r17;
        java.util.Map $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9, $z10;
        java.util.List $r4;
        java.lang.StringBuilder $r9, $r10, $r20, $r22;
        org.springframework.beans.factory.support.RootBeanDefinition $r8;
        java.lang.Throwable $r24;
        java.util.ArrayList $r3;
        org.springframework.beans.factory.FactoryBean r13;
        java.lang.Boolean $r19;
        java.lang.String r7, $r11, $r23;
        org.springframework.beans.factory.support.DefaultListableBeanFactory$2 $r16;
        java.util.Iterator $r5;
        java.lang.SecurityManager $r14;
        org.springframework.beans.factory.SmartFactoryBean $r15;
        org.apache.commons.logging.Log $r1, $r21;
        java.lang.Object $r6, $r12, $r18;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label01;

        $r21 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.apache.commons.logging.Log logger>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Pre-instantiating singletons in ");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r23);

     label01:
        $r2 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map beanDefinitionMap>;

        entermonitor $r2;

     label02:
        $r3 = new java.util.ArrayList;

        $r4 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.List beanDefinitionNames>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label09;

     label03:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $r8 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)>(r7);

        $z1 = virtualinvoke $r8.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isAbstract()>();

        if $z1 != 0 goto label09;

        $z2 = virtualinvoke $r8.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSingleton()>();

        if $z2 == 0 goto label09;

        $z3 = virtualinvoke $r8.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isLazyInit()>();

        if $z3 != 0 goto label09;

        $z4 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isFactoryBean(java.lang.String)>(r7);

        if $z4 == 0 goto label08;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("&");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.String)>($r11);

        r13 = (org.springframework.beans.factory.FactoryBean) $r12;

        $r14 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r14 == null goto label04;

        $z7 = r13 instanceof org.springframework.beans.factory.SmartFactoryBean;

        if $z7 == 0 goto label04;

        $r16 = new org.springframework.beans.factory.support.DefaultListableBeanFactory$2;

        specialinvoke $r16.<org.springframework.beans.factory.support.DefaultListableBeanFactory$2: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory,org.springframework.beans.factory.FactoryBean)>(r0, r13);

        $r17 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.security.AccessControlContext getAccessControlContext()>();

        $r18 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>($r16, $r17);

        $r19 = (java.lang.Boolean) $r18;

        z8 = virtualinvoke $r19.<java.lang.Boolean: boolean booleanValue()>();

        goto label07;

     label04:
        $z5 = r13 instanceof org.springframework.beans.factory.SmartFactoryBean;

        if $z5 == 0 goto label05;

        $r15 = (org.springframework.beans.factory.SmartFactoryBean) r13;

        $z6 = interfaceinvoke $r15.<org.springframework.beans.factory.SmartFactoryBean: boolean isEagerInit()>();

        if $z6 == 0 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        z8 = $z9;

     label07:
        if z8 == 0 goto label09;

        virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.String)>(r7);

        goto label09;

     label08:
        virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.String)>(r7);

     label09:
        $z10 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z10 != 0 goto label03;

        exitmonitor $r2;

     label10:
        goto label13;

     label11:
        $r24 := @caughtexception;

        exitmonitor $r2;

     label12:
        throw $r24;

     label13:
        return;

        catch java.lang.Throwable from label02 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void registerBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.support.BeanDefinitionValidationException $r29;
        org.springframework.beans.factory.support.AbstractBeanDefinition $r27;
        java.util.Map $r3, $r4, $r32;
        boolean $z0, $z1, $z2;
        java.util.List $r6;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        java.lang.Throwable $r28;
        org.springframework.beans.factory.config.BeanDefinition r1;
        java.lang.String r0, $r16, $r18, $r26, $r31;
        org.springframework.beans.factory.BeanDefinitionStoreException $r17, $r30;
        java.lang.Object $r5;
        org.apache.commons.logging.Log $r7, $r9;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r2;

        r2 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.springframework.beans.factory.config.BeanDefinition;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "Bean name must not be empty");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "BeanDefinition must not be null");

        $z0 = r1 instanceof org.springframework.beans.factory.support.AbstractBeanDefinition;

        if $z0 == 0 goto label04;

     label01:
        $r27 = (org.springframework.beans.factory.support.AbstractBeanDefinition) r1;

        virtualinvoke $r27.<org.springframework.beans.factory.support.AbstractBeanDefinition: void validate()>();

     label02:
        goto label04;

     label03:
        $r29 := @caughtexception;

        $r30 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r31 = interfaceinvoke r1.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getResourceDescription()>();

        specialinvoke $r30.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r31, r0, "Validation of bean definition failed", $r29);

        throw $r30;

     label04:
        $r3 = r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map beanDefinitionMap>;

        entermonitor $r3;

     label05:
        $r4 = r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map beanDefinitionMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        if $r5 == null goto label07;

        $z1 = r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowBeanDefinitionOverriding>;

        if $z1 != 0 goto label06;

        $r17 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r18 = interfaceinvoke r1.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getResourceDescription()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot register bean definition [");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for bean \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': There is already [");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] bound.");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r18, r0, $r26);

        throw $r17;

     label06:
        $r7 = r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z2 == 0 goto label08;

        $r9 = r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.apache.commons.logging.Log logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Overriding bean definition for bean \'");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': replacing [");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] with [");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r16);

        goto label08;

     label07:
        $r6 = r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.List beanDefinitionNames>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r0);

        r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] frozenBeanDefinitionNames> = null;

     label08:
        $r32 = r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map beanDefinitionMap>;

        interfaceinvoke $r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        virtualinvoke r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void resetBeanDefinition(java.lang.String)>(r0);

        exitmonitor $r3;

     label09:
        goto label12;

     label10:
        $r28 := @caughtexception;

        exitmonitor $r3;

     label11:
        throw $r28;

     label12:
        return;

        catch org.springframework.beans.factory.support.BeanDefinitionValidationException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void removeBeanDefinition(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        java.lang.Throwable $r15;
        java.util.Map $r2, $r3;
        org.springframework.beans.factory.config.BeanDefinition r5;
        java.lang.String r0, $r14;
        boolean $z0;
        java.util.List $r6;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r8;
        java.lang.Object $r4;
        org.apache.commons.logging.Log $r7, $r10;
        java.lang.StringBuilder $r9, $r11, $r12, $r13;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r1;

        r1 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "\'beanName\' must not be empty");

        $r2 = r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map beanDefinitionMap>;

        entermonitor $r2;

     label1:
        $r3 = r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map beanDefinitionMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        r5 = (org.springframework.beans.factory.config.BeanDefinition) $r4;

        if r5 != null goto label3;

        $r7 = r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label2;

        $r10 = r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.apache.commons.logging.Log logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("No bean named \'");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found in ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r14);

     label2:
        $r8 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        specialinvoke $r8.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.String)>(r0);

        throw $r8;

     label3:
        $r6 = r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.List beanDefinitionNames>;

        interfaceinvoke $r6.<java.util.List: boolean remove(java.lang.Object)>(r0);

        r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] frozenBeanDefinitionNames> = null;

        virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void resetBeanDefinition(java.lang.String)>(r0);

        exitmonitor $r2;

     label4:
        goto label7;

     label5:
        $r15 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r15;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected void resetBeanDefinition(java.lang.String)
    {
        java.lang.Throwable $r10;
        java.util.Iterator $r4;
        java.util.List $r3;
        java.util.Map $r6;
        org.springframework.beans.factory.config.BeanDefinition r8;
        java.lang.Object $r2, $r5, $r7;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;
        java.lang.String r1, $r9, r11;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void clearMergedBeanDefinition(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getSingletonMutex()>();

        entermonitor $r2;

     label1:
        virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void destroySingleton(java.lang.String)>(r1);

        exitmonitor $r2;

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r10;

     label5:
        $r3 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.List beanDefinitionNames>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label7;

     label6:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r5;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r11);

        if $z0 != 0 goto label7;

        $r6 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map beanDefinitionMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r11);

        r8 = (org.springframework.beans.factory.config.BeanDefinition) $r7;

        $r9 = interfaceinvoke r8.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getParentName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label7;

        virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void resetBeanDefinition(java.lang.String)>(r11);

     label7:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label6;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected boolean allowAliasOverriding()
    {
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        $z0 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowBeanDefinitionOverriding>;

        return $z0;
    }

    public java.lang.Object resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String, java.util.Set, org.springframework.beans.TypeConverter) throws org.springframework.beans.BeansException
    {
        org.springframework.core.ParameterNameDiscoverer $r2;
        org.springframework.beans.factory.config.DependencyDescriptor r0;
        org.springframework.beans.TypeConverter r9;
        org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectFactory $r13;
        java.lang.String r7;
        boolean $z0, $z1;
        org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyProviderFactory $r11;
        java.util.Set r8;
        java.lang.Class $r3, $r4, $r5, $r6;
        java.lang.Object $r10, $r12;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r1;

        r1 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r0 := @parameter0: org.springframework.beans.factory.config.DependencyDescriptor;

        r7 := @parameter1: java.lang.String;

        r8 := @parameter2: java.util.Set;

        r9 := @parameter3: org.springframework.beans.TypeConverter;

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.core.ParameterNameDiscoverer getParameterNameDiscoverer()>();

        virtualinvoke r0.<org.springframework.beans.factory.config.DependencyDescriptor: void initParameterNameDiscovery(org.springframework.core.ParameterNameDiscoverer)>($r2);

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class getDependencyType()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/springframework/beans/factory/ObjectFactory;");

        if $z0 == 0 goto label1;

        $r13 = new org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectFactory;

        specialinvoke $r13.<org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectFactory: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory,org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>(r1, r0, r7);

        return $r13;

     label1:
        $r4 = virtualinvoke r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class getDependencyType()>();

        $r5 = <org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Class javaxInjectProviderClass>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label2;

        $r11 = new org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyProviderFactory;

        specialinvoke $r11.<org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyProviderFactory: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory,org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyProviderFactory)>(r1, null);

        $r12 = virtualinvoke $r11.<org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyProviderFactory: java.lang.Object createDependencyProvider(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>(r0, r7);

        return $r12;

     label2:
        $r6 = virtualinvoke r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class getDependencyType()>();

        $r10 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.Class,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)>(r0, $r6, r7, r8, r9);

        return $r10;
    }

    protected java.lang.Object doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.Class, java.lang.String, java.util.Set, org.springframework.beans.TypeConverter) throws org.springframework.beans.BeansException
    {
        java.util.Map $r8, $r36, $r50, $r67;
        org.springframework.beans.TypeConverter r51, $r81, $r82, $r83;
        java.util.Set $r9, r12, $r22, $r37, $r54, $r70;
        java.lang.StringBuilder $r19, $r20, $r21, $r23, $r27, $r28, $r29, $r31, $r32, $r39, $r41, $r44, $r46, $r47, $r56, $r58, $r61, $r63, $r64, $r72, $r74;
        org.springframework.beans.factory.config.BeanDefinition $r80;
        java.lang.String r7, $r15, $r16, $r24, $r30, $r33, $r40, $r42, $r45, $r48, $r57, $r59, $r62, $r65, $r73, $r75, $r77, $r78;
        java.util.Map$Entry r84;
        org.springframework.beans.factory.support.AutowireCandidateResolver $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.util.Collection $r38, $r52, $r55, $r68, $r71;
        org.springframework.beans.factory.config.DependencyDescriptor r2;
        int $i0, $i1;
        java.util.Iterator $r10;
        org.springframework.beans.FatalBeanException $r26, $r43, $r60;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r18;
        java.lang.Object $r3, $r11, $r13, $r14, $r17, $r53, $r69, $r76, r79;
        java.lang.Class r4, $r5, $r6, $r25, $r34, $r35, $r49, $r66;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r2 := @parameter0: org.springframework.beans.factory.config.DependencyDescriptor;

        r4 := @parameter1: java.lang.Class;

        r7 := @parameter2: java.lang.String;

        r12 := @parameter3: java.util.Set;

        r51 := @parameter4: org.springframework.beans.TypeConverter;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.support.AutowireCandidateResolver getAutowireCandidateResolver()>();

        $r3 = interfaceinvoke $r1.<org.springframework.beans.factory.support.AutowireCandidateResolver: java.lang.Object getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor)>(r2);

        r79 = $r3;

        if $r3 == null goto label06;

        $z17 = $r3 instanceof java.lang.String;

        if $z17 == 0 goto label03;

        $r77 = (java.lang.String) $r3;

        $r78 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String resolveEmbeddedValue(java.lang.String)>($r77);

        if r7 == null goto label01;

        $z18 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean containsBean(java.lang.String)>(r7);

        if $z18 == 0 goto label01;

        $r80 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String)>(r7);

        goto label02;

     label01:
        $r80 = null;

     label02:
        r79 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object evaluateBeanDefinitionString(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>($r78, $r80);

     label03:
        if r51 == null goto label04;

        $r81 = r51;

        goto label05;

     label04:
        $r81 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.TypeConverter getTypeConverter()>();

     label05:
        $r76 = interfaceinvoke $r81.<org.springframework.beans.TypeConverter: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class)>(r79, r4);

        return $r76;

     label06:
        $z0 = virtualinvoke r4.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label12;

        $r66 = virtualinvoke r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $r67 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map findAutowireCandidates(java.lang.String,java.lang.Class,org.springframework.beans.factory.config.DependencyDescriptor)>(r7, $r66, r2);

        $z15 = interfaceinvoke $r67.<java.util.Map: boolean isEmpty()>();

        if $z15 == 0 goto label08;

        $z16 = virtualinvoke r2.<org.springframework.beans.factory.config.DependencyDescriptor: boolean isRequired()>();

        if $z16 == 0 goto label07;

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>(java.lang.String)>("array of ");

        $r73 = virtualinvoke $r66.<java.lang.Class: java.lang.String getName()>();

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void raiseNoSuchBeanDefinitionException(java.lang.Class,java.lang.String,org.springframework.beans.factory.config.DependencyDescriptor)>($r66, $r75, r2);

     label07:
        return null;

     label08:
        if r12 == null goto label09;

        $r70 = interfaceinvoke $r67.<java.util.Map: java.util.Set keySet()>();

        $r71 = (java.util.Collection) $r70;

        interfaceinvoke r12.<java.util.Set: boolean addAll(java.util.Collection)>($r71);

     label09:
        if r51 == null goto label10;

        $r82 = r51;

        goto label11;

     label10:
        $r82 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.TypeConverter getTypeConverter()>();

     label11:
        $r68 = interfaceinvoke $r67.<java.util.Map: java.util.Collection values()>();

        $r69 = interfaceinvoke $r82.<org.springframework.beans.TypeConverter: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class)>($r68, r4);

        return $r69;

     label12:
        $r5 = class "Ljava/util/Collection;";

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z1 == 0 goto label20;

        $z11 = virtualinvoke r4.<java.lang.Class: boolean isInterface()>();

        if $z11 == 0 goto label20;

        $r49 = virtualinvoke r2.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class getCollectionType()>();

        if $r49 != null goto label14;

        $z14 = virtualinvoke r2.<org.springframework.beans.factory.config.DependencyDescriptor: boolean isRequired()>();

        if $z14 == 0 goto label13;

        $r60 = new org.springframework.beans.FatalBeanException;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>(java.lang.String)>("No element type declared for collection [");

        $r62 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r60.<org.springframework.beans.FatalBeanException: void <init>(java.lang.String)>($r65);

        throw $r60;

     label13:
        return null;

     label14:
        $r50 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map findAutowireCandidates(java.lang.String,java.lang.Class,org.springframework.beans.factory.config.DependencyDescriptor)>(r7, $r49, r2);

        $z12 = interfaceinvoke $r50.<java.util.Map: boolean isEmpty()>();

        if $z12 == 0 goto label16;

        $z13 = virtualinvoke r2.<org.springframework.beans.factory.config.DependencyDescriptor: boolean isRequired()>();

        if $z13 == 0 goto label15;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("collection of ");

        $r57 = virtualinvoke $r49.<java.lang.Class: java.lang.String getName()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void raiseNoSuchBeanDefinitionException(java.lang.Class,java.lang.String,org.springframework.beans.factory.config.DependencyDescriptor)>($r49, $r59, r2);

     label15:
        return null;

     label16:
        if r12 == null goto label17;

        $r54 = interfaceinvoke $r50.<java.util.Map: java.util.Set keySet()>();

        $r55 = (java.util.Collection) $r54;

        interfaceinvoke r12.<java.util.Set: boolean addAll(java.util.Collection)>($r55);

     label17:
        if r51 == null goto label18;

        $r83 = r51;

        goto label19;

     label18:
        $r83 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.TypeConverter getTypeConverter()>();

     label19:
        $r52 = interfaceinvoke $r50.<java.util.Map: java.util.Collection values()>();

        $r53 = interfaceinvoke $r83.<org.springframework.beans.TypeConverter: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class)>($r52, r4);

        return $r53;

     label20:
        $r6 = class "Ljava/util/Map;";

        $z2 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z2 == 0 goto label29;

        $z5 = virtualinvoke r4.<java.lang.Class: boolean isInterface()>();

        if $z5 == 0 goto label29;

        $r25 = virtualinvoke r2.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class getMapKeyType()>();

        if $r25 == null goto label21;

        $r34 = class "Ljava/lang/String;";

        $z7 = virtualinvoke $r34.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r25);

        if $z7 != 0 goto label23;

     label21:
        $z6 = virtualinvoke r2.<org.springframework.beans.factory.config.DependencyDescriptor: boolean isRequired()>();

        if $z6 == 0 goto label22;

        $r26 = new org.springframework.beans.FatalBeanException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("Key type [");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] of map [");

        $r30 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] must be assignable to [java.lang.String]");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<org.springframework.beans.FatalBeanException: void <init>(java.lang.String)>($r33);

        throw $r26;

     label22:
        return null;

     label23:
        $r35 = virtualinvoke r2.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class getMapValueType()>();

        if $r35 != null goto label25;

        $z10 = virtualinvoke r2.<org.springframework.beans.factory.config.DependencyDescriptor: boolean isRequired()>();

        if $z10 == 0 goto label24;

        $r43 = new org.springframework.beans.FatalBeanException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>(java.lang.String)>("No value type declared for map [");

        $r45 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<org.springframework.beans.FatalBeanException: void <init>(java.lang.String)>($r48);

        throw $r43;

     label24:
        return null;

     label25:
        $r36 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map findAutowireCandidates(java.lang.String,java.lang.Class,org.springframework.beans.factory.config.DependencyDescriptor)>(r7, $r35, r2);

        $z8 = interfaceinvoke $r36.<java.util.Map: boolean isEmpty()>();

        if $z8 == 0 goto label27;

        $z9 = virtualinvoke r2.<org.springframework.beans.factory.config.DependencyDescriptor: boolean isRequired()>();

        if $z9 == 0 goto label26;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>("map with value type ");

        $r40 = virtualinvoke $r35.<java.lang.Class: java.lang.String getName()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void raiseNoSuchBeanDefinitionException(java.lang.Class,java.lang.String,org.springframework.beans.factory.config.DependencyDescriptor)>($r35, $r42, r2);

     label26:
        return null;

     label27:
        if r12 == null goto label28;

        $r37 = interfaceinvoke $r36.<java.util.Map: java.util.Set keySet()>();

        $r38 = (java.util.Collection) $r37;

        interfaceinvoke r12.<java.util.Set: boolean addAll(java.util.Collection)>($r38);

     label28:
        return $r36;

     label29:
        $r8 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map findAutowireCandidates(java.lang.String,java.lang.Class,org.springframework.beans.factory.config.DependencyDescriptor)>(r7, r4, r2);

        $z3 = interfaceinvoke $r8.<java.util.Map: boolean isEmpty()>();

        if $z3 == 0 goto label31;

        $z4 = virtualinvoke r2.<org.springframework.beans.factory.config.DependencyDescriptor: boolean isRequired()>();

        if $z4 == 0 goto label30;

        specialinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void raiseNoSuchBeanDefinitionException(java.lang.Class,java.lang.String,org.springframework.beans.factory.config.DependencyDescriptor)>(r4, "", r2);

     label30:
        return null;

     label31:
        $i0 = interfaceinvoke $r8.<java.util.Map: int size()>();

        if $i0 <= 1 goto label34;

        $r16 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String determinePrimaryCandidate(java.util.Map,org.springframework.beans.factory.config.DependencyDescriptor)>($r8, r2);

        if $r16 != null goto label32;

        $r18 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("expected single matching bean but found ");

        $i1 = interfaceinvoke $r8.<java.util.Map: int size()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r22 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.Class,java.lang.String)>(r4, $r24);

        throw $r18;

     label32:
        if r12 == null goto label33;

        interfaceinvoke r12.<java.util.Set: boolean add(java.lang.Object)>($r16);

     label33:
        $r17 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        return $r17;

     label34:
        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r84 = (java.util.Map$Entry) $r11;

        if r12 == null goto label35;

        $r14 = interfaceinvoke r84.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = (java.lang.String) $r14;

        interfaceinvoke r12.<java.util.Set: boolean add(java.lang.Object)>($r15);

     label35:
        $r13 = interfaceinvoke r84.<java.util.Map$Entry: java.lang.Object getValue()>();

        return $r13;
    }

    protected java.util.Map findAutowireCandidates(java.lang.String, java.lang.Class, org.springframework.beans.factory.config.DependencyDescriptor)
    {
        java.lang.String[] $r3;
        org.springframework.beans.factory.config.DependencyDescriptor r2;
        java.util.LinkedHashMap $r4;
        java.util.Map $r5, $r9;
        int $i0, $i1, i2;
        java.lang.String $r12, r13, r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r7;
        java.util.Set $r6;
        java.lang.Class r1, r15;
        java.lang.Object $r8, $r10, $r11, $r14;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r13 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: org.springframework.beans.factory.config.DependencyDescriptor;

        $z0 = virtualinvoke r2.<org.springframework.beans.factory.config.DependencyDescriptor: boolean isEager()>();

        $r3 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,boolean,boolean)>(r0, r1, 1, $z0);

        $r4 = new java.util.LinkedHashMap;

        $i0 = lengthof $r3;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r5 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map resolvableDependencies>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.Class) $r8;

        $z1 = virtualinvoke r15.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z1 == 0 goto label2;

        $r9 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map resolvableDependencies>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r15);

        $r11 = staticinvoke <org.springframework.beans.factory.support.AutowireUtils: java.lang.Object resolveAutowiringValue(java.lang.Object,java.lang.Class)>($r10, r1);

        $z2 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r11);

        if $z2 == 0 goto label2;

        $r12 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.String identityToString(java.lang.Object)>($r11);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r11);

        goto label3;

     label2:
        $z5 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label1;

     label3:
        $i1 = lengthof $r3;

        i2 = 0;

        goto label6;

     label4:
        r16 = $r3[i2];

        $z3 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z3 != 0 goto label5;

        $z4 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isAutowireCandidate(java.lang.String,org.springframework.beans.factory.config.DependencyDescriptor)>(r16, r2);

        if $z4 == 0 goto label5;

        $r14 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.String)>(r16);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, $r14);

     label5:
        i2 = i2 + 1;

     label6:
        if i2 < $i1 goto label4;

        return $r4;
    }

    protected java.lang.String determinePrimaryCandidate(java.util.Map, org.springframework.beans.factory.config.DependencyDescriptor)
    {
        org.springframework.beans.factory.config.DependencyDescriptor r11;
        java.util.Map r0, $r9;
        java.lang.String r6, $r12, $r18, r19, r20, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Collection $r10;
        java.util.Set $r1, $r16;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r13;
        java.lang.Object $r3, $r5, $r7;
        java.lang.Class $r14;
        java.lang.StringBuilder $r15, $r17;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r8;

        r8 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r0 := @parameter0: java.util.Map;

        r11 := @parameter1: org.springframework.beans.factory.config.DependencyDescriptor;

        r19 = null;

        r20 = null;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label6;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.String) $r5;

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = virtualinvoke r8.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isPrimary(java.lang.String,java.lang.Object)>(r6, $r7);

        if $z0 == 0 goto label4;

        if r19 == null goto label3;

        $z3 = virtualinvoke r8.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean containsBeanDefinition(java.lang.String)>(r6);

        $z4 = virtualinvoke r8.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean containsBeanDefinition(java.lang.String)>(r19);

        if $z3 != $z4 goto label2;

        $r13 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        $r14 = virtualinvoke r11.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class getDependencyType()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("more than one \'primary\' bean found among candidates: ");

        $r16 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.Class,java.lang.String)>($r14, $r18);

        throw $r13;

     label2:
        if $z3 == 0 goto label4;

        if $z4 != 0 goto label4;

        r19 = r6;

        goto label4;

     label3:
        r19 = r6;

     label4:
        if r19 != null goto label6;

        $r9 = r8.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map resolvableDependencies>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Collection values()>();

        $z1 = interfaceinvoke $r10.<java.util.Collection: boolean contains(java.lang.Object)>($r7);

        if $z1 != 0 goto label5;

        $r12 = virtualinvoke r11.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.String getDependencyName()>();

        $z2 = virtualinvoke r8.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean matchesBeanName(java.lang.String,java.lang.String)>(r6, $r12);

        if $z2 == 0 goto label6;

     label5:
        r20 = r6;

     label6:
        $z5 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label1;

        if r19 == null goto label7;

        $r21 = r19;

        goto label8;

     label7:
        $r21 = r20;

     label8:
        return $r21;
    }

    protected boolean isPrimary(java.lang.String, java.lang.Object)
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r5;
        org.springframework.beans.factory.BeanFactory $r2;
        java.lang.Object r3;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0, $r4;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean containsBeanDefinition(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)>(r1);

        $z3 = virtualinvoke $r5.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isPrimary()>();

        return $z3;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $z1 = $r2 instanceof org.springframework.beans.factory.support.DefaultListableBeanFactory;

        if $z1 == 0 goto label2;

        $r4 = (org.springframework.beans.factory.support.DefaultListableBeanFactory) $r2;

        $z2 = virtualinvoke $r4.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isPrimary(java.lang.String,java.lang.Object)>(r1, r3);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    protected boolean matchesBeanName(java.lang.String, java.lang.String)
    {
        java.lang.String[] $r3;
        java.lang.String r0, r1;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r2;
        boolean $z0, $z1;

        r2 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r2.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getAliases(java.lang.String)>(r1);

        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean containsElement(java.lang.Object[],java.lang.Object)>($r3, r0);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private void raiseNoSuchBeanDefinitionException(java.lang.Class, java.lang.String, org.springframework.beans.factory.config.DependencyDescriptor) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        java.lang.'annotation'.Annotation[] $r5;
        org.springframework.beans.factory.config.DependencyDescriptor r4;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r0;
        java.lang.Class r1;
        java.lang.StringBuilder $r3, $r7;
        java.lang.String r2, $r6, $r8;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r9;

        r9 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: org.springframework.beans.factory.config.DependencyDescriptor;

        $r0 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: ");

        $r5 = virtualinvoke r4.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $r6 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object[])>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.Class,java.lang.String,java.lang.String)>(r1, r2, $r8);

        throw $r0;
    }

    public java.lang.String toString()
    {
        java.lang.String[] $r3;
        org.springframework.beans.factory.BeanFactory $r5;
        java.lang.StringBuilder $r0, $r6;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r1;
        java.lang.String $r2, $r4, $r7, $r8;

        r1 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        $r0 = new java.lang.StringBuilder;

        $r2 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.String identityToString(java.lang.Object)>(r1);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": defining beans [");

        $r3 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanDefinitionNames()>();

        $r4 = staticinvoke <org.springframework.util.StringUtils: java.lang.String arrayToCommaDelimitedString(java.lang.Object[])>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]; ");

        $r5 = virtualinvoke r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        if $r5 != null goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("root of factory hierarchy");

        goto label2;

     label1:
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parent: ");

        $r7 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.String identityToString(java.lang.Object)>($r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label2:
        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r2;
        java.io.NotSerializableException $r0;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r1;

        r1 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        r2 := @parameter0: java.io.ObjectInputStream;

        $r0 = new java.io.NotSerializableException;

        specialinvoke $r0.<java.io.NotSerializableException: void <init>(java.lang.String)>("DefaultListableBeanFactory itself is not deserializable - just a SerializedBeanFactoryReference is");

        throw $r0;
    }

    protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
    {
        org.springframework.beans.factory.support.DefaultListableBeanFactory$SerializedBeanFactoryReference $r3;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r0;
        java.lang.String $r1, $r4;
        java.io.NotSerializableException $r2;

        r0 := @this: org.springframework.beans.factory.support.DefaultListableBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String serializationId>;

        if $r1 == null goto label1;

        $r3 = new org.springframework.beans.factory.support.DefaultListableBeanFactory$SerializedBeanFactoryReference;

        $r4 = r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String serializationId>;

        specialinvoke $r3.<org.springframework.beans.factory.support.DefaultListableBeanFactory$SerializedBeanFactoryReference: void <init>(java.lang.String)>($r4);

        return $r3;

     label1:
        $r2 = new java.io.NotSerializableException;

        specialinvoke $r2.<java.io.NotSerializableException: void <init>(java.lang.String)>("DefaultListableBeanFactory has no serialization id");

        throw $r2;
    }

    static java.util.Map access$0()
    {
        java.util.Map $r0;

        $r0 = <org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map serializableFactories>;

        return $r0;
    }
}
