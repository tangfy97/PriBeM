public abstract class org.codehaus.jackson.node.ValueNode extends org.codehaus.jackson.node.BaseJsonNode
{

    protected void <init>()
    {
        org.codehaus.jackson.node.ValueNode r0;

        r0 := @this: org.codehaus.jackson.node.ValueNode;

        specialinvoke r0.<org.codehaus.jackson.node.BaseJsonNode: void <init>()>();

        return;
    }

    public boolean isValueNode()
    {
        org.codehaus.jackson.node.ValueNode r0;

        r0 := @this: org.codehaus.jackson.node.ValueNode;

        return 1;
    }

    public abstract org.codehaus.jackson.JsonToken asToken();

    public void serializeWithType(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.TypeSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.node.ValueNode r1;
        org.codehaus.jackson.map.SerializerProvider r3;

        r1 := @this: org.codehaus.jackson.node.ValueNode;

        r2 := @parameter0: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        r0 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        virtualinvoke r1.<org.codehaus.jackson.node.ValueNode: void serialize(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r2, r3);

        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        return;
    }

    public org.codehaus.jackson.JsonNode path(java.lang.String)
    {
        java.lang.String r2;
        org.codehaus.jackson.node.MissingNode $r0;
        org.codehaus.jackson.node.ValueNode r1;

        r1 := @this: org.codehaus.jackson.node.ValueNode;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.codehaus.jackson.node.MissingNode: org.codehaus.jackson.node.MissingNode getInstance()>();

        return $r0;
    }

    public org.codehaus.jackson.JsonNode path(int)
    {
        int i0;
        org.codehaus.jackson.node.MissingNode $r0;
        org.codehaus.jackson.node.ValueNode r1;

        r1 := @this: org.codehaus.jackson.node.ValueNode;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.codehaus.jackson.node.MissingNode: org.codehaus.jackson.node.MissingNode getInstance()>();

        return $r0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.codehaus.jackson.node.ValueNode r0;

        r0 := @this: org.codehaus.jackson.node.ValueNode;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ValueNode: java.lang.String asText()>();

        return $r1;
    }
}
