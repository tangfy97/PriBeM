public abstract class org.apache.lucene.util.ByteBlockPool$Allocator extends java.lang.Object
{
    protected final int blockSize;

    public void <init>(int)
    {
        int i0;
        org.apache.lucene.util.ByteBlockPool$Allocator r0;

        r0 := @this: org.apache.lucene.util.ByteBlockPool$Allocator;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.ByteBlockPool$Allocator: int blockSize> = i0;

        return;
    }

    public abstract void recycleByteBlocks(byte[][], int, int);

    public void recycleByteBlocks(java.util.List)
    {
        java.util.List r0;
        byte[][] $r1, r3;
        java.lang.Object[] $r2;
        org.apache.lucene.util.ByteBlockPool$Allocator r4;
        int $i0, $i1;

        r4 := @this: org.apache.lucene.util.ByteBlockPool$Allocator;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r1 = newarray (byte[])[$i0];

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        r3 = (byte[][]) $r2;

        $i1 = lengthof r3;

        virtualinvoke r4.<org.apache.lucene.util.ByteBlockPool$Allocator: void recycleByteBlocks(byte[][],int,int)>(r3, 0, $i1);

        return;
    }

    public byte[] getByteBlock()
    {
        int $i0;
        byte[] $r1;
        org.apache.lucene.util.ByteBlockPool$Allocator r0;

        r0 := @this: org.apache.lucene.util.ByteBlockPool$Allocator;

        $i0 = r0.<org.apache.lucene.util.ByteBlockPool$Allocator: int blockSize>;

        $r1 = newarray (byte)[$i0];

        return $r1;
    }
}
