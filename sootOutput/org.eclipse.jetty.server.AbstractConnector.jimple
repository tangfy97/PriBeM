public abstract class org.eclipse.jetty.server.AbstractConnector extends org.eclipse.jetty.util.component.AggregateLifeCycle implements org.eclipse.jetty.http.HttpBuffers, org.eclipse.jetty.server.Connector, org.eclipse.jetty.util.component.Dumpable
{
    private static final org.eclipse.jetty.util.log.Logger LOG;
    private java.lang.String _name;
    private org.eclipse.jetty.server.Server _server;
    private org.eclipse.jetty.util.thread.ThreadPool _threadPool;
    private java.lang.String _host;
    private int _port;
    private java.lang.String _integralScheme;
    private int _integralPort;
    private java.lang.String _confidentialScheme;
    private int _confidentialPort;
    private int _acceptQueueSize;
    private int _acceptors;
    private int _acceptorPriorityOffset;
    private boolean _useDNS;
    private boolean _forwarded;
    private java.lang.String _hostHeader;
    private java.lang.String _forwardedHostHeader;
    private java.lang.String _forwardedServerHeader;
    private java.lang.String _forwardedForHeader;
    private java.lang.String _forwardedProtoHeader;
    private java.lang.String _forwardedCipherSuiteHeader;
    private java.lang.String _forwardedSslSessionIdHeader;
    private boolean _reuseAddress;
    protected int _maxIdleTime;
    protected int _lowResourceMaxIdleTime;
    protected int _soLingerTime;
    private transient java.lang.Thread[] _acceptorThreads;
    private final java.util.concurrent.atomic.AtomicLong _statsStartedAt;
    private final org.eclipse.jetty.util.statistic.CounterStatistic _connectionStats;
    private final org.eclipse.jetty.util.statistic.SampleStatistic _requestStats;
    private final org.eclipse.jetty.util.statistic.SampleStatistic _connectionDurationStats;
    protected final org.eclipse.jetty.http.HttpBuffersImpl _buffers;

    public void <init>()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.http.HttpBuffersImpl $r6, $r11;
        java.util.concurrent.atomic.AtomicLong $r7;
        org.eclipse.jetty.util.statistic.CounterStatistic $r8;
        org.eclipse.jetty.util.statistic.SampleStatistic $r9, $r10;
        int $i1, $i3;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        specialinvoke r0.<org.eclipse.jetty.util.component.AggregateLifeCycle: void <init>()>();

        r0.<org.eclipse.jetty.server.AbstractConnector: int _port> = 0;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _integralScheme> = "https";

        r0.<org.eclipse.jetty.server.AbstractConnector: int _integralPort> = 0;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _confidentialScheme> = "https";

        r0.<org.eclipse.jetty.server.AbstractConnector: int _confidentialPort> = 0;

        r0.<org.eclipse.jetty.server.AbstractConnector: int _acceptQueueSize> = 0;

        r0.<org.eclipse.jetty.server.AbstractConnector: int _acceptors> = 1;

        r0.<org.eclipse.jetty.server.AbstractConnector: int _acceptorPriorityOffset> = 0;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedHostHeader> = "X-Forwarded-Host";

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedServerHeader> = "X-Forwarded-Server";

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedForHeader> = "X-Forwarded-For";

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedProtoHeader> = "X-Forwarded-Proto";

        r0.<org.eclipse.jetty.server.AbstractConnector: boolean _reuseAddress> = 1;

        r0.<org.eclipse.jetty.server.AbstractConnector: int _maxIdleTime> = 200000;

        $i1 = (int) -1;

        r0.<org.eclipse.jetty.server.AbstractConnector: int _lowResourceMaxIdleTime> = $i1;

        $i3 = (int) -1;

        r0.<org.eclipse.jetty.server.AbstractConnector: int _soLingerTime> = $i3;

        $r7 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(-1L);

        r0.<org.eclipse.jetty.server.AbstractConnector: java.util.concurrent.atomic.AtomicLong _statsStartedAt> = $r7;

        $r8 = new org.eclipse.jetty.util.statistic.CounterStatistic;

        specialinvoke $r8.<org.eclipse.jetty.util.statistic.CounterStatistic: void <init>()>();

        r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.CounterStatistic _connectionStats> = $r8;

        $r9 = new org.eclipse.jetty.util.statistic.SampleStatistic;

        specialinvoke $r9.<org.eclipse.jetty.util.statistic.SampleStatistic: void <init>()>();

        r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _requestStats> = $r9;

        $r10 = new org.eclipse.jetty.util.statistic.SampleStatistic;

        specialinvoke $r10.<org.eclipse.jetty.util.statistic.SampleStatistic: void <init>()>();

        r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _connectionDurationStats> = $r10;

        $r11 = new org.eclipse.jetty.http.HttpBuffersImpl;

        specialinvoke $r11.<org.eclipse.jetty.http.HttpBuffersImpl: void <init>()>();

        r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers> = $r11;

        $r6 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: boolean addBean(java.lang.Object)>($r6);

        return;
    }

    public org.eclipse.jetty.server.Server getServer()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.server.Server $r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.server.Server _server>;

        return $r1;
    }

    public void setServer(org.eclipse.jetty.server.Server)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.server.Server r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: org.eclipse.jetty.server.Server;

        r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.server.Server _server> = r1;

        return;
    }

    public org.eclipse.jetty.util.thread.ThreadPool getThreadPool()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.util.thread.ThreadPool $r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.thread.ThreadPool _threadPool>;

        return $r1;
    }

    public void setThreadPool(org.eclipse.jetty.util.thread.ThreadPool)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.util.thread.ThreadPool $r1, r2, $r3;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r2 := @parameter0: org.eclipse.jetty.util.thread.ThreadPool;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.thread.ThreadPool _threadPool>;

        virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: boolean removeBean(java.lang.Object)>($r1);

        r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.thread.ThreadPool _threadPool> = r2;

        $r3 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.thread.ThreadPool _threadPool>;

        virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: boolean addBean(java.lang.Object)>($r3);

        return;
    }

    public void setHost(java.lang.String)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _host> = r1;

        return;
    }

    public java.lang.String getHost()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _host>;

        return $r1;
    }

    public void setPort(int)
    {
        int i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.AbstractConnector: int _port> = i0;

        return;
    }

    public int getPort()
    {
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $i0 = r0.<org.eclipse.jetty.server.AbstractConnector: int _port>;

        return $i0;
    }

    public int getMaxIdleTime()
    {
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $i0 = r0.<org.eclipse.jetty.server.AbstractConnector: int _maxIdleTime>;

        return $i0;
    }

    public void setMaxIdleTime(int)
    {
        int i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.AbstractConnector: int _maxIdleTime> = i0;

        return;
    }

    public int getLowResourcesMaxIdleTime()
    {
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $i0 = r0.<org.eclipse.jetty.server.AbstractConnector: int _lowResourceMaxIdleTime>;

        return $i0;
    }

    public void setLowResourcesMaxIdleTime(int)
    {
        int i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.AbstractConnector: int _lowResourceMaxIdleTime> = i0;

        return;
    }

    public final int getLowResourceMaxIdleTime()
    {
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $i0 = virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: int getLowResourcesMaxIdleTime()>();

        return $i0;
    }

    public final void setLowResourceMaxIdleTime(int)
    {
        int i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: void setLowResourcesMaxIdleTime(int)>(i0);

        return;
    }

    public int getSoLingerTime()
    {
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $i0 = r0.<org.eclipse.jetty.server.AbstractConnector: int _soLingerTime>;

        return $i0;
    }

    public int getAcceptQueueSize()
    {
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $i0 = r0.<org.eclipse.jetty.server.AbstractConnector: int _acceptQueueSize>;

        return $i0;
    }

    public void setAcceptQueueSize(int)
    {
        int i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.AbstractConnector: int _acceptQueueSize> = i0;

        return;
    }

    public int getAcceptors()
    {
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $i0 = r0.<org.eclipse.jetty.server.AbstractConnector: int _acceptors>;

        return $i0;
    }

    public void setAcceptors(int)
    {
        org.eclipse.jetty.server.AbstractConnector r1;
        java.lang.Object[] $r7;
        java.lang.Runtime $r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r2, $r4, $r5;
        org.eclipse.jetty.util.log.Logger $r3;
        java.lang.String $r6;

        r1 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i1 = virtualinvoke $r0.<java.lang.Runtime: int availableProcessors()>();

        $i2 = 2 * $i1;

        if i0 <= $i2 goto label1;

        $r3 = <org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.log.Logger LOG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Acceptors should be <=2*availableProcessors: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        interfaceinvoke $r3.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Object[])>($r6, $r7);

     label1:
        r1.<org.eclipse.jetty.server.AbstractConnector: int _acceptors> = i0;

        return;
    }

    public void setSoLingerTime(int)
    {
        int i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.AbstractConnector: int _soLingerTime> = i0;

        return;
    }

    protected void doStart() throws java.lang.Exception
    {
        java.lang.Throwable $r16;
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.IllegalStateException $r11, $r15;
        java.lang.Object[] $r5, $r7;
        org.eclipse.jetty.server.AbstractConnector$Acceptor $r9;
        int $i0, i1, $i2;
        org.eclipse.jetty.server.Server $r1, $r12;
        boolean $z0, $z1;
        java.lang.Thread[] $r3, $r17;
        org.eclipse.jetty.util.thread.ThreadPool $r2, $r4, $r10, $r13, $r14;
        org.eclipse.jetty.util.log.Logger $r6, $r8;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.server.Server _server>;

        if $r1 != null goto label01;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No server");

        throw $r15;

     label01:
        virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: void open()>();

        $r2 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.thread.ThreadPool _threadPool>;

        if $r2 != null goto label02;

        $r12 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.server.Server _server>;

        $r13 = virtualinvoke $r12.<org.eclipse.jetty.server.Server: org.eclipse.jetty.util.thread.ThreadPool getThreadPool()>();

        r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.thread.ThreadPool _threadPool> = $r13;

        $r14 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.thread.ThreadPool _threadPool>;

        virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: boolean addBean(java.lang.Object,boolean)>($r14, 0);

     label02:
        specialinvoke r0.<org.eclipse.jetty.util.component.AggregateLifeCycle: void doStart()>();

        entermonitor r0;

     label03:
        $i0 = virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: int getAcceptors()>();

        $r3 = newarray (java.lang.Thread)[$i0];

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.Thread[] _acceptorThreads> = $r3;

        i1 = 0;

     label04:
        $r17 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.Thread[] _acceptorThreads>;

        $i2 = lengthof $r17;

        if i1 >= $i2 goto label06;

        $r10 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.thread.ThreadPool _threadPool>;

        $r9 = new org.eclipse.jetty.server.AbstractConnector$Acceptor;

        specialinvoke $r9.<org.eclipse.jetty.server.AbstractConnector$Acceptor: void <init>(org.eclipse.jetty.server.AbstractConnector,int)>(r0, i1);

        $z1 = interfaceinvoke $r10.<org.eclipse.jetty.util.thread.ThreadPool: boolean dispatch(java.lang.Runnable)>($r9);

        if $z1 != 0 goto label05;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("!accepting");

        throw $r11;

     label05:
        i1 = i1 + 1;

        goto label04;

     label06:
        $r4 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.thread.ThreadPool _threadPool>;

        $z0 = interfaceinvoke $r4.<org.eclipse.jetty.util.thread.ThreadPool: boolean isLowOnThreads()>();

        if $z0 == 0 goto label07;

        $r8 = <org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.log.Logger LOG>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r0;

        interfaceinvoke $r8.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Object[])>("insufficient threads configured for {}", $r7);

     label07:
        exitmonitor r0;

     label08:
        goto label11;

     label09:
        $r16 := @caughtexception;

        exitmonitor r0;

     label10:
        throw $r16;

     label11:
        $r6 = <org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.log.Logger LOG>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r0;

        interfaceinvoke $r6.<org.eclipse.jetty.util.log.Logger: void info(java.lang.String,java.lang.Object[])>("Started {}", $r5);

        return;

        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    protected void doStop() throws java.lang.Exception
    {
        java.lang.Throwable $r2;
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.Thread[] $r5;
        java.io.IOException $r3;
        java.lang.Thread r1;
        int i0, i1;
        org.eclipse.jetty.util.log.Logger $r4;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

     label01:
        virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: void close()>();

     label02:
        goto label04;

     label03:
        $r3 := @caughtexception;

        $r4 = <org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r4.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.Throwable)>($r3);

     label04:
        specialinvoke r0.<org.eclipse.jetty.util.component.AggregateLifeCycle: void doStop()>();

        entermonitor r0;

     label05:
        $r5 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.Thread[] _acceptorThreads>;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.Thread[] _acceptorThreads> = null;

        exitmonitor r0;

     label06:
        goto label09;

     label07:
        $r2 := @caughtexception;

        exitmonitor r0;

     label08:
        throw $r2;

     label09:
        if $r5 == null goto label12;

        i0 = lengthof $r5;

        i1 = 0;

     label10:
        if i1 >= i0 goto label12;

        r1 = $r5[i1];

        if r1 == null goto label11;

        virtualinvoke r1.<java.lang.Thread: void interrupt()>();

     label11:
        i1 = i1 + 1;

        goto label10;

     label12:
        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public void join() throws java.lang.InterruptedException
    {
        java.lang.Throwable $r3;
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.Thread r2;
        java.lang.Thread[] r1;
        int i0, i1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        entermonitor r0;

     label1:
        r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.Thread[] _acceptorThreads>;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r3;

     label5:
        if r1 == null goto label8;

        i0 = lengthof r1;

        i1 = 0;

     label6:
        if i1 >= i0 goto label8;

        r2 = r1[i1];

        if r2 == null goto label7;

        virtualinvoke r2.<java.lang.Thread: void join()>();

     label7:
        i1 = i1 + 1;

        goto label6;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void configure(java.net.Socket) throws java.io.IOException
    {
        org.eclipse.jetty.server.AbstractConnector r1;
        java.net.Socket r0;
        int $i0, $i1, $i2;
        org.eclipse.jetty.util.log.Logger $r3;
        java.lang.Exception $r2;

        r1 := @this: org.eclipse.jetty.server.AbstractConnector;

        r0 := @parameter0: java.net.Socket;

     label1:
        virtualinvoke r0.<java.net.Socket: void setTcpNoDelay(boolean)>(1);

        $i0 = r1.<org.eclipse.jetty.server.AbstractConnector: int _soLingerTime>;

        if $i0 < 0 goto label2;

        $i1 = r1.<org.eclipse.jetty.server.AbstractConnector: int _soLingerTime>;

        $i2 = $i1 / 1000;

        virtualinvoke r0.<java.net.Socket: void setSoLinger(boolean,int)>(1, $i2);

        goto label3;

     label2:
        virtualinvoke r0.<java.net.Socket: void setSoLinger(boolean,int)>(0, 0);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        $r3 = <org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r3.<org.eclipse.jetty.util.log.Logger: void ignore(java.lang.Throwable)>($r2);

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public void customize(org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.server.Request) throws java.io.IOException
    {
        org.eclipse.jetty.server.Request r2;
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.io.EndPoint r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: org.eclipse.jetty.io.EndPoint;

        r2 := @parameter1: org.eclipse.jetty.server.Request;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: boolean isForwarded()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: void checkForwardedHeaders(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)>(r1, r2);

     label1:
        return;
    }

    protected void checkForwardedHeaders(org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.server.Request) throws java.io.IOException
    {
        org.eclipse.jetty.server.Request r0;
        org.eclipse.jetty.server.AbstractConnector r3;
        org.eclipse.jetty.io.EndPoint r14;
        org.eclipse.jetty.server.AbstractHttpConnection $r1;
        java.net.InetAddress r25;
        int $i1, $i3;
        java.lang.String $r4, $r6, $r8, $r9, $r10, $r11, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r26;
        org.eclipse.jetty.http.HttpFields $r2;
        org.eclipse.jetty.io.Buffer $r5, $r7;
        boolean $z0;
        java.net.UnknownHostException $r12;
        org.eclipse.jetty.util.log.Logger $r13;

        r3 := @this: org.eclipse.jetty.server.AbstractConnector;

        r14 := @parameter0: org.eclipse.jetty.io.EndPoint;

        r0 := @parameter1: org.eclipse.jetty.server.Request;

        $r1 = virtualinvoke r0.<org.eclipse.jetty.server.Request: org.eclipse.jetty.server.AbstractHttpConnection getConnection()>();

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.server.AbstractHttpConnection: org.eclipse.jetty.http.HttpFields getRequestFields()>();

        $r4 = virtualinvoke r3.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getForwardedCipherSuiteHeader()>();

        if $r4 == null goto label01;

        $r10 = virtualinvoke r3.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getForwardedCipherSuiteHeader()>();

        $r11 = virtualinvoke $r2.<org.eclipse.jetty.http.HttpFields: java.lang.String getStringField(java.lang.String)>($r10);

        if $r11 == null goto label01;

        virtualinvoke r0.<org.eclipse.jetty.server.Request: void setAttribute(java.lang.String,java.lang.Object)>("javax.servlet.request.cipher_suite", $r11);

     label01:
        $r15 = virtualinvoke r3.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getForwardedSslSessionIdHeader()>();

        if $r15 == null goto label02;

        $r8 = virtualinvoke r3.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getForwardedSslSessionIdHeader()>();

        $r9 = virtualinvoke $r2.<org.eclipse.jetty.http.HttpFields: java.lang.String getStringField(java.lang.String)>($r8);

        if $r9 == null goto label02;

        virtualinvoke r0.<org.eclipse.jetty.server.Request: void setAttribute(java.lang.String,java.lang.Object)>("javax.servlet.request.ssl_session_id", $r9);

        virtualinvoke r0.<org.eclipse.jetty.server.Request: void setScheme(java.lang.String)>("https");

     label02:
        $r16 = virtualinvoke r3.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getForwardedHostHeader()>();

        $r17 = virtualinvoke r3.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getLeftMostFieldValue(org.eclipse.jetty.http.HttpFields,java.lang.String)>($r2, $r16);

        $r18 = virtualinvoke r3.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getForwardedServerHeader()>();

        $r19 = virtualinvoke r3.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getLeftMostFieldValue(org.eclipse.jetty.http.HttpFields,java.lang.String)>($r2, $r18);

        $r20 = virtualinvoke r3.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getForwardedForHeader()>();

        $r21 = virtualinvoke r3.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getLeftMostFieldValue(org.eclipse.jetty.http.HttpFields,java.lang.String)>($r2, $r20);

        $r22 = virtualinvoke r3.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getForwardedProtoHeader()>();

        $r23 = virtualinvoke r3.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getLeftMostFieldValue(org.eclipse.jetty.http.HttpFields,java.lang.String)>($r2, $r22);

        $r24 = r3.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _hostHeader>;

        if $r24 == null goto label03;

        $r7 = <org.eclipse.jetty.http.HttpHeaders: org.eclipse.jetty.io.Buffer HOST_BUFFER>;

        $r6 = r3.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _hostHeader>;

        virtualinvoke $r2.<org.eclipse.jetty.http.HttpFields: void put(org.eclipse.jetty.io.Buffer,java.lang.String)>($r7, $r6);

        virtualinvoke r0.<org.eclipse.jetty.server.Request: void setServerName(java.lang.String)>(null);

        $i1 = (int) -1;

        virtualinvoke r0.<org.eclipse.jetty.server.Request: void setServerPort(int)>($i1);

        virtualinvoke r0.<org.eclipse.jetty.server.Request: java.lang.String getServerName()>();

        goto label05;

     label03:
        if $r17 == null goto label04;

        $r5 = <org.eclipse.jetty.http.HttpHeaders: org.eclipse.jetty.io.Buffer HOST_BUFFER>;

        virtualinvoke $r2.<org.eclipse.jetty.http.HttpFields: void put(org.eclipse.jetty.io.Buffer,java.lang.String)>($r5, $r17);

        virtualinvoke r0.<org.eclipse.jetty.server.Request: void setServerName(java.lang.String)>(null);

        $i3 = (int) -1;

        virtualinvoke r0.<org.eclipse.jetty.server.Request: void setServerPort(int)>($i3);

        virtualinvoke r0.<org.eclipse.jetty.server.Request: java.lang.String getServerName()>();

        goto label05;

     label04:
        if $r19 == null goto label05;

        virtualinvoke r0.<org.eclipse.jetty.server.Request: void setServerName(java.lang.String)>($r19);

     label05:
        if $r21 == null goto label12;

        virtualinvoke r0.<org.eclipse.jetty.server.Request: void setRemoteAddr(java.lang.String)>($r21);

        r25 = null;

        $z0 = r3.<org.eclipse.jetty.server.AbstractConnector: boolean _useDNS>;

        if $z0 == 0 goto label09;

     label06:
        r25 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r21);

     label07:
        goto label09;

     label08:
        $r12 := @caughtexception;

        $r13 = <org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r13.<org.eclipse.jetty.util.log.Logger: void ignore(java.lang.Throwable)>($r12);

     label09:
        if r25 != null goto label10;

        $r26 = $r21;

        goto label11;

     label10:
        $r26 = virtualinvoke r25.<java.net.InetAddress: java.lang.String getHostName()>();

     label11:
        virtualinvoke r0.<org.eclipse.jetty.server.Request: void setRemoteHost(java.lang.String)>($r26);

     label12:
        if $r23 == null goto label13;

        virtualinvoke r0.<org.eclipse.jetty.server.Request: void setScheme(java.lang.String)>($r23);

     label13:
        return;

        catch java.net.UnknownHostException from label06 to label07 with label08;
    }

    protected java.lang.String getLeftMostFieldValue(org.eclipse.jetty.http.HttpFields, java.lang.String)
    {
        org.eclipse.jetty.server.AbstractConnector r4;
        int $i0, $i2;
        java.lang.String r0, $r2, $r3;
        org.eclipse.jetty.http.HttpFields r1;

        r4 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: org.eclipse.jetty.http.HttpFields;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<org.eclipse.jetty.http.HttpFields: java.lang.String getStringField(java.lang.String)>(r0);

        if $r2 != null goto label2;

        return null;

     label2:
        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(44);

        $i2 = (int) -1;

        if $i0 != $i2 goto label3;

        return $r2;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r3;
    }

    public void persist(org.eclipse.jetty.io.EndPoint) throws java.io.IOException
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.io.EndPoint r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: org.eclipse.jetty.io.EndPoint;

        return;
    }

    public int getConfidentialPort()
    {
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $i0 = r0.<org.eclipse.jetty.server.AbstractConnector: int _confidentialPort>;

        return $i0;
    }

    public java.lang.String getConfidentialScheme()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _confidentialScheme>;

        return $r1;
    }

    public boolean isIntegral(org.eclipse.jetty.server.Request)
    {
        org.eclipse.jetty.server.Request r1;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: org.eclipse.jetty.server.Request;

        return 0;
    }

    public int getIntegralPort()
    {
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $i0 = r0.<org.eclipse.jetty.server.AbstractConnector: int _integralPort>;

        return $i0;
    }

    public java.lang.String getIntegralScheme()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _integralScheme>;

        return $r1;
    }

    public boolean isConfidential(org.eclipse.jetty.server.Request)
    {
        org.eclipse.jetty.server.Request r1;
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: org.eclipse.jetty.server.Request;

        $z0 = r0.<org.eclipse.jetty.server.AbstractConnector: boolean _forwarded>;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<org.eclipse.jetty.server.Request: java.lang.String getScheme()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("https");

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void setConfidentialPort(int)
    {
        int i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.AbstractConnector: int _confidentialPort> = i0;

        return;
    }

    public void setConfidentialScheme(java.lang.String)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _confidentialScheme> = r1;

        return;
    }

    public void setIntegralPort(int)
    {
        int i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.AbstractConnector: int _integralPort> = i0;

        return;
    }

    public void setIntegralScheme(java.lang.String)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _integralScheme> = r1;

        return;
    }

    protected abstract void accept(int) throws java.io.IOException, java.lang.InterruptedException;

    public void stopAccept(int) throws java.lang.Exception
    {
        int i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        return;
    }

    public boolean getResolveNames()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $z0 = r0.<org.eclipse.jetty.server.AbstractConnector: boolean _useDNS>;

        return $z0;
    }

    public void setResolveNames(boolean)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        z0 := @parameter0: boolean;

        r0.<org.eclipse.jetty.server.AbstractConnector: boolean _useDNS> = z0;

        return;
    }

    public boolean isForwarded()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $z0 = r0.<org.eclipse.jetty.server.AbstractConnector: boolean _forwarded>;

        return $z0;
    }

    public void setForwarded(boolean)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.Object[] $r1;
        org.eclipse.jetty.util.log.Logger $r2;
        boolean z0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = <org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.log.Logger LOG>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r0;

        interfaceinvoke $r2.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("{} is forwarded", $r1);

     label1:
        r0.<org.eclipse.jetty.server.AbstractConnector: boolean _forwarded> = z0;

        return;
    }

    public java.lang.String getHostHeader()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _hostHeader>;

        return $r1;
    }

    public void setHostHeader(java.lang.String)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _hostHeader> = r1;

        return;
    }

    public java.lang.String getForwardedHostHeader()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedHostHeader>;

        return $r1;
    }

    public void setForwardedHostHeader(java.lang.String)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedHostHeader> = r1;

        return;
    }

    public java.lang.String getForwardedServerHeader()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedServerHeader>;

        return $r1;
    }

    public void setForwardedServerHeader(java.lang.String)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedServerHeader> = r1;

        return;
    }

    public java.lang.String getForwardedForHeader()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedForHeader>;

        return $r1;
    }

    public void setForwardedForHeader(java.lang.String)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedForHeader> = r1;

        return;
    }

    public java.lang.String getForwardedProtoHeader()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedProtoHeader>;

        return $r1;
    }

    public void setForwardedProtoHeader(java.lang.String)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedProtoHeader> = r1;

        return;
    }

    public java.lang.String getForwardedCipherSuiteHeader()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedCipherSuiteHeader>;

        return $r1;
    }

    public void setForwardedCipherSuiteHeader(java.lang.String)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedCipherSuiteHeader> = r1;

        return;
    }

    public java.lang.String getForwardedSslSessionIdHeader()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedSslSessionIdHeader>;

        return $r1;
    }

    public void setForwardedSslSessionIdHeader(java.lang.String)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _forwardedSslSessionIdHeader> = r1;

        return;
    }

    public int getRequestBufferSize()
    {
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        $i0 = virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: int getRequestBufferSize()>();

        return $i0;
    }

    public void setRequestBufferSize(int)
    {
        int i0;
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: void setRequestBufferSize(int)>(i0);

        return;
    }

    public int getRequestHeaderSize()
    {
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        $i0 = virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: int getRequestHeaderSize()>();

        return $i0;
    }

    public void setRequestHeaderSize(int)
    {
        int i0;
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: void setRequestHeaderSize(int)>(i0);

        return;
    }

    public int getResponseBufferSize()
    {
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        $i0 = virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: int getResponseBufferSize()>();

        return $i0;
    }

    public void setResponseBufferSize(int)
    {
        int i0;
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: void setResponseBufferSize(int)>(i0);

        return;
    }

    public int getResponseHeaderSize()
    {
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        $i0 = virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: int getResponseHeaderSize()>();

        return $i0;
    }

    public void setResponseHeaderSize(int)
    {
        int i0;
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: void setResponseHeaderSize(int)>(i0);

        return;
    }

    public org.eclipse.jetty.io.Buffers$Type getRequestBufferType()
    {
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.io.Buffers$Type $r2;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: org.eclipse.jetty.io.Buffers$Type getRequestBufferType()>();

        return $r2;
    }

    public org.eclipse.jetty.io.Buffers$Type getRequestHeaderType()
    {
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.io.Buffers$Type $r2;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: org.eclipse.jetty.io.Buffers$Type getRequestHeaderType()>();

        return $r2;
    }

    public org.eclipse.jetty.io.Buffers$Type getResponseBufferType()
    {
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.io.Buffers$Type $r2;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: org.eclipse.jetty.io.Buffers$Type getResponseBufferType()>();

        return $r2;
    }

    public org.eclipse.jetty.io.Buffers$Type getResponseHeaderType()
    {
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.io.Buffers$Type $r2;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: org.eclipse.jetty.io.Buffers$Type getResponseHeaderType()>();

        return $r2;
    }

    public void setRequestBuffers(org.eclipse.jetty.io.Buffers)
    {
        org.eclipse.jetty.http.HttpBuffersImpl $r2;
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.io.Buffers r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: org.eclipse.jetty.io.Buffers;

        $r2 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        virtualinvoke $r2.<org.eclipse.jetty.http.HttpBuffersImpl: void setRequestBuffers(org.eclipse.jetty.io.Buffers)>(r1);

        return;
    }

    public void setResponseBuffers(org.eclipse.jetty.io.Buffers)
    {
        org.eclipse.jetty.http.HttpBuffersImpl $r2;
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.io.Buffers r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: org.eclipse.jetty.io.Buffers;

        $r2 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        virtualinvoke $r2.<org.eclipse.jetty.http.HttpBuffersImpl: void setResponseBuffers(org.eclipse.jetty.io.Buffers)>(r1);

        return;
    }

    public org.eclipse.jetty.io.Buffers getRequestBuffers()
    {
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.io.Buffers $r2;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: org.eclipse.jetty.io.Buffers getRequestBuffers()>();

        return $r2;
    }

    public org.eclipse.jetty.io.Buffers getResponseBuffers()
    {
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.io.Buffers $r2;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: org.eclipse.jetty.io.Buffers getResponseBuffers()>();

        return $r2;
    }

    public void setMaxBuffers(int)
    {
        int i0;
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: void setMaxBuffers(int)>(i0);

        return;
    }

    public int getMaxBuffers()
    {
        org.eclipse.jetty.http.HttpBuffersImpl $r1;
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.http.HttpBuffersImpl _buffers>;

        $i0 = virtualinvoke $r1.<org.eclipse.jetty.http.HttpBuffersImpl: int getMaxBuffers()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.eclipse.jetty.server.AbstractConnector r1;
        java.lang.Object[] $r0;
        java.lang.Integer $r5;
        int $i0, $i1;
        java.lang.Class $r2;
        java.lang.String $r3, $r4, $r6, $r7;

        r1 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r0 = newarray (java.lang.Object)[3];

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r0[0] = $r3;

        $r4 = virtualinvoke r1.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getHost()>();

        if $r4 != null goto label1;

        $r7 = "0.0.0.0";

        goto label2;

     label1:
        $r7 = virtualinvoke r1.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getHost()>();

     label2:
        $r0[1] = $r7;

        $i0 = virtualinvoke r1.<org.eclipse.jetty.server.AbstractConnector: int getLocalPort()>();

        if $i0 > 0 goto label3;

        $i1 = virtualinvoke r1.<org.eclipse.jetty.server.AbstractConnector: int getPort()>();

        goto label4;

     label3:
        $i1 = virtualinvoke r1.<org.eclipse.jetty.server.AbstractConnector: int getLocalPort()>();

     label4:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r0[2] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s@%s:%d", $r0);

        return $r6;
    }

    public java.lang.String getName()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        int $i0, $i1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;
        java.lang.String $r1, $r3, $r7, $r8, $r9;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _name>;

        if $r1 != null goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getHost()>();

        if $r3 != null goto label1;

        $r8 = "0.0.0.0";

        goto label2;

     label1:
        $r8 = virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String getHost()>();

     label2:
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i0 = virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: int getLocalPort()>();

        if $i0 > 0 goto label3;

        $i1 = virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: int getPort()>();

        goto label4;

     label3:
        $i1 = virtualinvoke r0.<org.eclipse.jetty.server.AbstractConnector: int getLocalPort()>();

     label4:
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _name> = $r7;

     label5:
        $r9 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _name>;

        return $r9;
    }

    public void setName(java.lang.String)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.String _name> = r1;

        return;
    }

    public int getRequests()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.util.statistic.SampleStatistic $r1;
        int $i1;
        long $l0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _requestStats>;

        $l0 = virtualinvoke $r1.<org.eclipse.jetty.util.statistic.SampleStatistic: long getTotal()>();

        $i1 = (int) $l0;

        return $i1;
    }

    public long getConnectionsDurationTotal()
    {
        org.eclipse.jetty.util.statistic.SampleStatistic $r1;
        org.eclipse.jetty.server.AbstractConnector r0;
        long $l0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _connectionDurationStats>;

        $l0 = virtualinvoke $r1.<org.eclipse.jetty.util.statistic.SampleStatistic: long getTotal()>();

        return $l0;
    }

    public int getConnections()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.util.statistic.CounterStatistic $r1;
        int $i1;
        long $l0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.CounterStatistic _connectionStats>;

        $l0 = virtualinvoke $r1.<org.eclipse.jetty.util.statistic.CounterStatistic: long getTotal()>();

        $i1 = (int) $l0;

        return $i1;
    }

    public int getConnectionsOpen()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.util.statistic.CounterStatistic $r1;
        int $i1;
        long $l0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.CounterStatistic _connectionStats>;

        $l0 = virtualinvoke $r1.<org.eclipse.jetty.util.statistic.CounterStatistic: long getCurrent()>();

        $i1 = (int) $l0;

        return $i1;
    }

    public int getConnectionsOpenMax()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.util.statistic.CounterStatistic $r1;
        int $i1;
        long $l0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.CounterStatistic _connectionStats>;

        $l0 = virtualinvoke $r1.<org.eclipse.jetty.util.statistic.CounterStatistic: long getMax()>();

        $i1 = (int) $l0;

        return $i1;
    }

    public double getConnectionsDurationMean()
    {
        org.eclipse.jetty.util.statistic.SampleStatistic $r1;
        org.eclipse.jetty.server.AbstractConnector r0;
        double $d0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _connectionDurationStats>;

        $d0 = virtualinvoke $r1.<org.eclipse.jetty.util.statistic.SampleStatistic: double getMean()>();

        return $d0;
    }

    public long getConnectionsDurationMax()
    {
        org.eclipse.jetty.util.statistic.SampleStatistic $r1;
        org.eclipse.jetty.server.AbstractConnector r0;
        long $l0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _connectionDurationStats>;

        $l0 = virtualinvoke $r1.<org.eclipse.jetty.util.statistic.SampleStatistic: long getMax()>();

        return $l0;
    }

    public double getConnectionsDurationStdDev()
    {
        org.eclipse.jetty.util.statistic.SampleStatistic $r1;
        org.eclipse.jetty.server.AbstractConnector r0;
        double $d0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _connectionDurationStats>;

        $d0 = virtualinvoke $r1.<org.eclipse.jetty.util.statistic.SampleStatistic: double getStdDev()>();

        return $d0;
    }

    public double getConnectionsRequestsMean()
    {
        org.eclipse.jetty.util.statistic.SampleStatistic $r1;
        org.eclipse.jetty.server.AbstractConnector r0;
        double $d0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _requestStats>;

        $d0 = virtualinvoke $r1.<org.eclipse.jetty.util.statistic.SampleStatistic: double getMean()>();

        return $d0;
    }

    public int getConnectionsRequestsMax()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.util.statistic.SampleStatistic $r1;
        int $i1;
        long $l0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _requestStats>;

        $l0 = virtualinvoke $r1.<org.eclipse.jetty.util.statistic.SampleStatistic: long getMax()>();

        $i1 = (int) $l0;

        return $i1;
    }

    public double getConnectionsRequestsStdDev()
    {
        org.eclipse.jetty.util.statistic.SampleStatistic $r1;
        org.eclipse.jetty.server.AbstractConnector r0;
        double $d0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _requestStats>;

        $d0 = virtualinvoke $r1.<org.eclipse.jetty.util.statistic.SampleStatistic: double getStdDev()>();

        return $d0;
    }

    public void statsReset()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        org.eclipse.jetty.util.statistic.CounterStatistic $r3;
        org.eclipse.jetty.util.statistic.SampleStatistic $r2, $r4;
        long $l0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.util.concurrent.atomic.AtomicLong _statsStartedAt>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r0.<org.eclipse.jetty.server.AbstractConnector: void updateNotEqual(java.util.concurrent.atomic.AtomicLong,long,long)>($r1, -1L, $l0);

        $r2 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _requestStats>;

        virtualinvoke $r2.<org.eclipse.jetty.util.statistic.SampleStatistic: void reset()>();

        $r3 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.CounterStatistic _connectionStats>;

        virtualinvoke $r3.<org.eclipse.jetty.util.statistic.CounterStatistic: void reset()>();

        $r4 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _connectionDurationStats>;

        virtualinvoke $r4.<org.eclipse.jetty.util.statistic.SampleStatistic: void reset()>();

        return;
    }

    public void setStatsOn(boolean)
    {
        org.eclipse.jetty.server.AbstractConnector r1;
        java.lang.Object[] $r10;
        long $l0, $l2;
        byte $b1;
        java.lang.String $r9;
        boolean z0, $z1;
        java.util.concurrent.atomic.AtomicLong $r2, $r11;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r8;
        org.eclipse.jetty.util.log.Logger $r0, $r4;

        r1 := @this: org.eclipse.jetty.server.AbstractConnector;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r11 = r1.<org.eclipse.jetty.server.AbstractConnector: java.util.concurrent.atomic.AtomicLong _statsStartedAt>;

        $l0 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label1;

        return;

     label1:
        $r0 = <org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.log.Logger LOG>;

        $z1 = interfaceinvoke $r0.<org.eclipse.jetty.util.log.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $r4 = <org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.log.Logger LOG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Statistics on = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = newarray (java.lang.Object)[0];

        interfaceinvoke $r4.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>($r9, $r10);

     label2:
        virtualinvoke r1.<org.eclipse.jetty.server.AbstractConnector: void statsReset()>();

        $r2 = r1.<org.eclipse.jetty.server.AbstractConnector: java.util.concurrent.atomic.AtomicLong _statsStartedAt>;

        if z0 == 0 goto label3;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        goto label4;

     label3:
        $l2 = -1L;

     label4:
        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l2);

        return;
    }

    public boolean getStatsOn()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        byte $b1;
        long $l0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.util.concurrent.atomic.AtomicLong _statsStartedAt>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long getStatsOnMs()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        byte $b1;
        long $l0, $l2, $l3;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.util.concurrent.atomic.AtomicLong _statsStartedAt>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label1;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = $l2 - $l0;

        goto label2;

     label1:
        $l3 = 0L;

     label2:
        return $l3;
    }

    protected void connectionOpened(org.eclipse.jetty.io.Connection)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        byte $b1;
        org.eclipse.jetty.util.statistic.CounterStatistic $r2;
        org.eclipse.jetty.io.Connection r3;
        long $l0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r3 := @parameter0: org.eclipse.jetty.io.Connection;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.util.concurrent.atomic.AtomicLong _statsStartedAt>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.CounterStatistic _connectionStats>;

        virtualinvoke $r2.<org.eclipse.jetty.util.statistic.CounterStatistic: void increment()>();

        return;
    }

    protected void connectionUpgraded(org.eclipse.jetty.io.Connection, org.eclipse.jetty.io.Connection)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.server.AbstractHttpConnection $r3;
        long $l1;
        org.eclipse.jetty.io.Connection r1, r4;
        org.eclipse.jetty.util.statistic.SampleStatistic $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        r1 := @parameter0: org.eclipse.jetty.io.Connection;

        r4 := @parameter1: org.eclipse.jetty.io.Connection;

        $r2 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _requestStats>;

        $z0 = r1 instanceof org.eclipse.jetty.server.AbstractHttpConnection;

        if $z0 == 0 goto label1;

        $r3 = (org.eclipse.jetty.server.AbstractHttpConnection) r1;

        $i0 = virtualinvoke $r3.<org.eclipse.jetty.server.AbstractHttpConnection: int getRequests()>();

        $l1 = (long) $i0;

        goto label2;

     label1:
        $l1 = 0L;

     label2:
        virtualinvoke $r2.<org.eclipse.jetty.util.statistic.SampleStatistic: void set(long)>($l1);

        return;
    }

    protected void connectionClosed(org.eclipse.jetty.io.Connection)
    {
        org.eclipse.jetty.server.AbstractConnector r1;
        org.eclipse.jetty.server.AbstractHttpConnection $r6;
        long $l0, $l2, $l3, l4, $l5;
        java.util.concurrent.atomic.AtomicLong $r2;
        byte $b1;
        org.eclipse.jetty.util.statistic.CounterStatistic $r4;
        org.eclipse.jetty.io.Connection r0;
        org.eclipse.jetty.util.statistic.SampleStatistic $r3, $r5;
        int $i6;
        boolean $z0;

        r1 := @this: org.eclipse.jetty.server.AbstractConnector;

        r0 := @parameter0: org.eclipse.jetty.io.Connection;

        interfaceinvoke r0.<org.eclipse.jetty.io.Connection: void onClose()>();

        $r2 = r1.<org.eclipse.jetty.server.AbstractConnector: java.util.concurrent.atomic.AtomicLong _statsStartedAt>;

        $l0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        return;

     label1:
        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = interfaceinvoke r0.<org.eclipse.jetty.io.Connection: long getTimeStamp()>();

        l4 = $l2 - $l3;

        $z0 = r0 instanceof org.eclipse.jetty.server.AbstractHttpConnection;

        if $z0 == 0 goto label2;

        $r6 = (org.eclipse.jetty.server.AbstractHttpConnection) r0;

        $i6 = virtualinvoke $r6.<org.eclipse.jetty.server.AbstractHttpConnection: int getRequests()>();

        goto label3;

     label2:
        $i6 = 0;

     label3:
        $r3 = r1.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _requestStats>;

        $l5 = (long) $i6;

        virtualinvoke $r3.<org.eclipse.jetty.util.statistic.SampleStatistic: void set(long)>($l5);

        $r4 = r1.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.CounterStatistic _connectionStats>;

        virtualinvoke $r4.<org.eclipse.jetty.util.statistic.CounterStatistic: void decrement()>();

        $r5 = r1.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.statistic.SampleStatistic _connectionDurationStats>;

        virtualinvoke $r5.<org.eclipse.jetty.util.statistic.SampleStatistic: void set(long)>(l4);

        return;
    }

    public int getAcceptorPriorityOffset()
    {
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $i0 = r0.<org.eclipse.jetty.server.AbstractConnector: int _acceptorPriorityOffset>;

        return $i0;
    }

    public void setAcceptorPriorityOffset(int)
    {
        int i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.AbstractConnector: int _acceptorPriorityOffset> = i0;

        return;
    }

    public boolean getReuseAddress()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $z0 = r0.<org.eclipse.jetty.server.AbstractConnector: boolean _reuseAddress>;

        return $z0;
    }

    public void setReuseAddress(boolean)
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        z0 := @parameter0: boolean;

        r0.<org.eclipse.jetty.server.AbstractConnector: boolean _reuseAddress> = z0;

        return;
    }

    public boolean isLowResources()
    {
        org.eclipse.jetty.server.AbstractConnector r0;
        org.eclipse.jetty.server.Server $r2;
        org.eclipse.jetty.util.thread.ThreadPool $r1, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.thread.ThreadPool _threadPool>;

        if $r1 == null goto label1;

        $r4 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.thread.ThreadPool _threadPool>;

        $z1 = interfaceinvoke $r4.<org.eclipse.jetty.util.thread.ThreadPool: boolean isLowOnThreads()>();

        return $z1;

     label1:
        $r2 = r0.<org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.server.Server _server>;

        $r3 = virtualinvoke $r2.<org.eclipse.jetty.server.Server: org.eclipse.jetty.util.thread.ThreadPool getThreadPool()>();

        $z0 = interfaceinvoke $r3.<org.eclipse.jetty.util.thread.ThreadPool: boolean isLowOnThreads()>();

        return $z0;
    }

    private void updateNotEqual(java.util.concurrent.atomic.AtomicLong, long, long)
    {
        java.util.concurrent.atomic.AtomicLong r0;
        org.eclipse.jetty.server.AbstractConnector r1;
        byte $b1;
        long l0, l2, l3;
        boolean $z0;

        r1 := @this: org.eclipse.jetty.server.AbstractConnector;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicLong;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

        l3 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

     label1:
        $b1 = l0 cmp l3;

        if $b1 == 0 goto label3;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(l3, l2);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        l3 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        goto label1;

     label3:
        return;
    }

    static java.lang.Thread[] access$000(org.eclipse.jetty.server.AbstractConnector)
    {
        java.lang.Thread[] $r1;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @parameter0: org.eclipse.jetty.server.AbstractConnector;

        $r1 = r0.<org.eclipse.jetty.server.AbstractConnector: java.lang.Thread[] _acceptorThreads>;

        return $r1;
    }

    static int access$100(org.eclipse.jetty.server.AbstractConnector)
    {
        int $i0;
        org.eclipse.jetty.server.AbstractConnector r0;

        r0 := @parameter0: org.eclipse.jetty.server.AbstractConnector;

        $i0 = r0.<org.eclipse.jetty.server.AbstractConnector: int _acceptorPriorityOffset>;

        return $i0;
    }

    static org.eclipse.jetty.util.log.Logger access$200()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = <org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.log.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/server/AbstractConnector;");

        <org.eclipse.jetty.server.AbstractConnector: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        return;
    }
}
