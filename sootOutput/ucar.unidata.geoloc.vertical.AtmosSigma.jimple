public class ucar.unidata.geoloc.vertical.AtmosSigma extends ucar.unidata.geoloc.vertical.VerticalTransformImpl
{
    public static final java.lang.String PTOP;
    public static final java.lang.String PS;
    public static final java.lang.String SIGMA;
    private ucar.nc2.Variable psVar;
    private double[] sigma;
    private double ptop;

    public void <init>(ucar.nc2.NetcdfFile, ucar.nc2.Dimension, java.util.List)
    {
        java.util.List r2;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r24, $r28, $r29, $r30, $r31, $r33;
        ucar.nc2.NetcdfFile r4;
        double[] $r13, $r14;
        ucar.nc2.Variable $r5, $r7, $r9, $r15;
        java.lang.String $r3, $r6, $r8, $r16, $r23, $r25, $r32, $r34;
        double $d0;
        java.io.IOException $r17, $r26;
        java.lang.IllegalArgumentException $r18, $r27;
        ucar.ma2.Array $r10;
        ucar.nc2.Dimension r1;
        java.lang.Class $r11;
        java.lang.Object $r12;
        ucar.unidata.geoloc.vertical.AtmosSigma r0;

        r0 := @this: ucar.unidata.geoloc.vertical.AtmosSigma;

        r4 := @parameter0: ucar.nc2.NetcdfFile;

        r1 := @parameter1: ucar.nc2.Dimension;

        r2 := @parameter2: java.util.List;

        specialinvoke r0.<ucar.unidata.geoloc.vertical.VerticalTransformImpl: void <init>(ucar.nc2.Dimension)>(r1);

        $r3 = virtualinvoke r0.<ucar.unidata.geoloc.vertical.AtmosSigma: java.lang.String getParameterStringValue(java.util.List,java.lang.String)>(r2, "SurfacePressure_variableName");

        $r5 = virtualinvoke r4.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>($r3);

        r0.<ucar.unidata.geoloc.vertical.AtmosSigma: ucar.nc2.Variable psVar> = $r5;

        $r6 = virtualinvoke r0.<ucar.unidata.geoloc.vertical.AtmosSigma: java.lang.String getParameterStringValue(java.util.List,java.lang.String)>(r2, "PressureTop_variableName");

        $r7 = virtualinvoke r4.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>($r6);

     label1:
        $d0 = virtualinvoke $r7.<ucar.nc2.Variable: double readScalarDouble()>();

        r0.<ucar.unidata.geoloc.vertical.AtmosSigma: double ptop> = $d0;

     label2:
        goto label4;

     label3:
        $r26 := @caughtexception;

        $r27 = new java.lang.IllegalArgumentException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AtmosSigma failed to read ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" err= ");

        $r32 = virtualinvoke $r26.<java.io.IOException: java.lang.String getMessage()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r34);

        throw $r27;

     label4:
        $r8 = virtualinvoke r0.<ucar.unidata.geoloc.vertical.AtmosSigma: java.lang.String getParameterStringValue(java.util.List,java.lang.String)>(r2, "Sigma_variableName");

        $r9 = virtualinvoke r4.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>($r8);

     label5:
        $r10 = virtualinvoke $r9.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r11 = <java.lang.Double: java.lang.Class TYPE>;

        $r12 = virtualinvoke $r10.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r11);

        $r13 = (double[]) $r12;

        $r14 = (double[]) $r13;

        r0.<ucar.unidata.geoloc.vertical.AtmosSigma: double[] sigma> = $r14;

     label6:
        goto label8;

     label7:
        $r17 := @caughtexception;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AtmosSigma failed to read ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" err= ");

        $r23 = virtualinvoke $r17.<java.io.IOException: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r18;

     label8:
        $r15 = r0.<ucar.unidata.geoloc.vertical.AtmosSigma: ucar.nc2.Variable psVar>;

        $r16 = virtualinvoke r4.<ucar.nc2.NetcdfFile: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>($r15, "units", "none");

        r0.<ucar.unidata.geoloc.vertical.AtmosSigma: java.lang.String units> = $r16;

        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public ucar.ma2.ArrayDouble$D3 getCoordinateArray(int) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        double[] $r4, $r8;
        int[] $r5;
        int i0, i1, i2, i3, i4, i5, i6;
        ucar.nc2.Variable $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        ucar.ma2.Array $r2;
        ucar.ma2.Index $r3, $r7;
        ucar.ma2.ArrayDouble$D3 $r6;
        ucar.unidata.geoloc.vertical.AtmosSigma r0;

        r0 := @this: ucar.unidata.geoloc.vertical.AtmosSigma;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.unidata.geoloc.vertical.AtmosSigma: ucar.nc2.Variable psVar>;

        $r2 = virtualinvoke r0.<ucar.unidata.geoloc.vertical.AtmosSigma: ucar.ma2.Array readArray(ucar.nc2.Variable,int)>($r1, i0);

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $r4 = r0.<ucar.unidata.geoloc.vertical.AtmosSigma: double[] sigma>;

        i1 = lengthof $r4;

        $r5 = virtualinvoke $r2.<ucar.ma2.Array: int[] getShape()>();

        i2 = $r5[0];

        i3 = $r5[1];

        $r6 = new ucar.ma2.ArrayDouble$D3;

        specialinvoke $r6.<ucar.ma2.ArrayDouble$D3: void <init>(int,int,int)>(i1, i2, i3);

        i4 = 0;

     label1:
        if i4 >= i2 goto label6;

        i5 = 0;

     label2:
        if i5 >= i3 goto label5;

        $r7 = virtualinvoke $r3.<ucar.ma2.Index: ucar.ma2.Index set(int,int)>(i4, i5);

        $d0 = virtualinvoke $r2.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r7);

        i6 = 0;

     label3:
        if i6 >= i1 goto label4;

        $d5 = r0.<ucar.unidata.geoloc.vertical.AtmosSigma: double ptop>;

        $r8 = r0.<ucar.unidata.geoloc.vertical.AtmosSigma: double[] sigma>;

        $d3 = $r8[i6];

        $d1 = r0.<ucar.unidata.geoloc.vertical.AtmosSigma: double ptop>;

        $d2 = $d0 - $d1;

        $d4 = $d3 * $d2;

        $d6 = $d5 + $d4;

        virtualinvoke $r6.<ucar.ma2.ArrayDouble$D3: void set(int,int,int,double)>(i6, i4, i5, $d6);

        i6 = i6 + 1;

        goto label3;

     label4:
        i5 = i5 + 1;

        goto label2;

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        return $r6;
    }

    public static void <clinit>()
    {
        <ucar.unidata.geoloc.vertical.AtmosSigma: java.lang.String SIGMA> = "Sigma_variableName";

        <ucar.unidata.geoloc.vertical.AtmosSigma: java.lang.String PS> = "SurfacePressure_variableName";

        <ucar.unidata.geoloc.vertical.AtmosSigma: java.lang.String PTOP> = "PressureTop_variableName";

        return;
    }
}
