public class org.waveprotocol.box.server.robots.active.ActiveApiServlet extends org.waveprotocol.box.server.robots.dataapi.BaseApiServlet
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final net.oauth.OAuthServiceProvider oauthServiceProvider;
    private final org.waveprotocol.box.server.persistence.AccountStore accountStore;

    public void <init>(com.google.wave.api.RobotSerializer, com.google.wave.api.data.converter.EventDataConverterManager, org.waveprotocol.box.server.waveserver.WaveletProvider, org.waveprotocol.box.server.robots.OperationServiceRegistry, org.waveprotocol.box.server.robots.util.ConversationUtil, net.oauth.OAuthServiceProvider, net.oauth.OAuthValidator, org.waveprotocol.box.server.persistence.AccountStore)
    {
        com.google.wave.api.data.converter.EventDataConverterManager r2;
        org.waveprotocol.box.server.robots.util.ConversationUtil r5;
        net.oauth.OAuthServiceProvider r7;
        org.waveprotocol.box.server.waveserver.WaveletProvider r3;
        net.oauth.OAuthValidator r6;
        org.waveprotocol.box.server.robots.active.ActiveApiServlet r0;
        com.google.wave.api.RobotSerializer r1;
        org.waveprotocol.box.server.persistence.AccountStore r8;
        org.waveprotocol.box.server.robots.OperationServiceRegistry r4;

        r0 := @this: org.waveprotocol.box.server.robots.active.ActiveApiServlet;

        r1 := @parameter0: com.google.wave.api.RobotSerializer;

        r2 := @parameter1: com.google.wave.api.data.converter.EventDataConverterManager;

        r3 := @parameter2: org.waveprotocol.box.server.waveserver.WaveletProvider;

        r4 := @parameter3: org.waveprotocol.box.server.robots.OperationServiceRegistry;

        r5 := @parameter4: org.waveprotocol.box.server.robots.util.ConversationUtil;

        r7 := @parameter5: net.oauth.OAuthServiceProvider;

        r6 := @parameter6: net.oauth.OAuthValidator;

        r8 := @parameter7: org.waveprotocol.box.server.persistence.AccountStore;

        specialinvoke r0.<org.waveprotocol.box.server.robots.dataapi.BaseApiServlet: void <init>(com.google.wave.api.RobotSerializer,com.google.wave.api.data.converter.EventDataConverterManager,org.waveprotocol.box.server.waveserver.WaveletProvider,org.waveprotocol.box.server.robots.OperationServiceRegistry,org.waveprotocol.box.server.robots.util.ConversationUtil,net.oauth.OAuthValidator)>(r1, r2, r3, r4, r5, r6);

        r0.<org.waveprotocol.box.server.robots.active.ActiveApiServlet: net.oauth.OAuthServiceProvider oauthServiceProvider> = r7;

        r0.<org.waveprotocol.box.server.robots.active.ActiveApiServlet: org.waveprotocol.box.server.persistence.AccountStore accountStore> = r8;

        return;
    }

    protected void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        net.oauth.server.HttpRequestMessage $r0;
        org.waveprotocol.box.server.account.RobotAccountData $r19;
        org.waveprotocol.wave.model.wave.ParticipantId $r6;
        org.waveprotocol.box.server.robots.active.ActiveApiServlet r7;
        org.waveprotocol.wave.util.logging.Log $r11, $r25, $r35;
        boolean $z0;
        net.oauth.OAuthServiceProvider $r21;
        net.oauth.OAuthConsumer $r17;
        java.lang.StringBuilder $r10, $r12, $r13, $r14, $r24, $r26, $r27, $r29, $r30, $r32;
        org.waveprotocol.wave.model.wave.InvalidParticipantAddress $r34;
        org.waveprotocol.box.server.account.AccountData $r9;
        org.waveprotocol.box.server.persistence.PersistenceException $r23;
        javax.servlet.http.HttpServletRequest r1;
        java.lang.StringBuffer $r2;
        java.lang.String $r3, $r4, $r5, $r15, $r18, $r20, $r28, $r31, $r33;
        javax.servlet.http.HttpServletResponse r16;
        net.oauth.OAuthAccessor $r22;
        org.waveprotocol.box.server.persistence.AccountStore $r8;

        r7 := @this: org.waveprotocol.box.server.robots.active.ActiveApiServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r16 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r0 = new net.oauth.server.HttpRequestMessage;

        $r2 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.StringBuffer getRequestURL()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<net.oauth.server.HttpRequestMessage: void <init>(javax.servlet.http.HttpServletRequest,java.lang.String)>(r1, $r3);

        $r4 = virtualinvoke $r0.<net.oauth.OAuthMessage: java.lang.String getConsumerKey()>();

        $r5 = staticinvoke <net.oauth.OAuth: java.lang.String decodePercent(java.lang.String)>($r4);

     label1:
        $r6 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId of(java.lang.String)>($r5);

     label2:
        goto label4;

     label3:
        $r34 := @caughtexception;

        $r35 = <org.waveprotocol.box.server.robots.active.ActiveApiServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r35.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String,java.lang.Throwable)>("Participant id invalid", $r34);

        interfaceinvoke r16.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(401);

        return;

     label4:
        $r8 = r7.<org.waveprotocol.box.server.robots.active.ActiveApiServlet: org.waveprotocol.box.server.persistence.AccountStore accountStore>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.box.server.persistence.AccountStore: org.waveprotocol.box.server.account.AccountData getAccount(org.waveprotocol.wave.model.wave.ParticipantId)>($r6);

     label5:
        goto label7;

     label6:
        $r23 := @caughtexception;

        $r25 = <org.waveprotocol.box.server.robots.active.ActiveApiServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to retrieve account data for ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r25.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>($r28, $r23);

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An unexpected error occured while trying to retrieve account data for ");

        $r31 = virtualinvoke $r6.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r16.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>(500, $r33);

        return;

     label7:
        if $r9 == null goto label8;

        $z0 = interfaceinvoke $r9.<org.waveprotocol.box.server.account.AccountData: boolean isRobot()>();

        if $z0 != 0 goto label9;

     label8:
        $r11 = <org.waveprotocol.box.server.robots.active.ActiveApiServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The account for robot named ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r15);

        interfaceinvoke r16.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(401);

        return;

     label9:
        $r17 = new net.oauth.OAuthConsumer;

        $r18 = virtualinvoke $r6.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r19 = interfaceinvoke $r9.<org.waveprotocol.box.server.account.AccountData: org.waveprotocol.box.server.account.RobotAccountData asRobot()>();

        $r20 = interfaceinvoke $r19.<org.waveprotocol.box.server.account.RobotAccountData: java.lang.String getConsumerSecret()>();

        $r21 = r7.<org.waveprotocol.box.server.robots.active.ActiveApiServlet: net.oauth.OAuthServiceProvider oauthServiceProvider>;

        specialinvoke $r17.<net.oauth.OAuthConsumer: void <init>(java.lang.String,java.lang.String,java.lang.String,net.oauth.OAuthServiceProvider)>(null, $r18, $r20, $r21);

        $r22 = new net.oauth.OAuthAccessor;

        specialinvoke $r22.<net.oauth.OAuthAccessor: void <init>(net.oauth.OAuthConsumer)>($r17);

        virtualinvoke r7.<org.waveprotocol.box.server.robots.active.ActiveApiServlet: void processOpsRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,net.oauth.OAuthMessage,net.oauth.OAuthAccessor,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r16, $r0, $r22, $r6);

        return;

        catch org.waveprotocol.wave.model.wave.InvalidParticipantAddress from label1 to label2 with label3;
        catch org.waveprotocol.box.server.persistence.PersistenceException from label4 to label5 with label6;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/robots/active/ActiveApiServlet;");

        <org.waveprotocol.box.server.robots.active.ActiveApiServlet: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
