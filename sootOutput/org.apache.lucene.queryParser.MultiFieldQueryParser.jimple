public class org.apache.lucene.queryParser.MultiFieldQueryParser extends org.apache.lucene.queryParser.QueryParser
{
    protected java.lang.String[] fields;
    protected java.util.Map boosts;

    public void <init>(org.apache.lucene.util.Version, java.lang.String[], org.apache.lucene.analysis.Analyzer, java.util.Map)
    {
        org.apache.lucene.analysis.Analyzer r3;
        java.util.Map r4;
        org.apache.lucene.queryParser.MultiFieldQueryParser r0;
        java.lang.String[] r2;
        org.apache.lucene.util.Version r1;

        r0 := @this: org.apache.lucene.queryParser.MultiFieldQueryParser;

        r1 := @parameter0: org.apache.lucene.util.Version;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: org.apache.lucene.analysis.Analyzer;

        r4 := @parameter3: java.util.Map;

        specialinvoke r0.<org.apache.lucene.queryParser.MultiFieldQueryParser: void <init>(org.apache.lucene.util.Version,java.lang.String[],org.apache.lucene.analysis.Analyzer)>(r1, r2, r3);

        r0.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.util.Map boosts> = r4;

        return;
    }

    public void <init>(org.apache.lucene.util.Version, java.lang.String[], org.apache.lucene.analysis.Analyzer)
    {
        org.apache.lucene.analysis.Analyzer r2;
        org.apache.lucene.queryParser.MultiFieldQueryParser r0;
        java.lang.String[] r3;
        org.apache.lucene.util.Version r1;

        r0 := @this: org.apache.lucene.queryParser.MultiFieldQueryParser;

        r1 := @parameter0: org.apache.lucene.util.Version;

        r3 := @parameter1: java.lang.String[];

        r2 := @parameter2: org.apache.lucene.analysis.Analyzer;

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: void <init>(org.apache.lucene.util.Version,java.lang.String,org.apache.lucene.analysis.Analyzer)>(r1, null, r2);

        r0.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields> = r3;

        return;
    }

    protected org.apache.lucene.search.Query getFieldQuery(java.lang.String, java.lang.String, int) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r3, $r6, $r9;
        java.lang.Float r15;
        org.apache.lucene.queryParser.MultiFieldQueryParser r1;
        java.lang.String[] $r5, $r7, $r11;
        java.util.ArrayList $r4;
        java.util.Map $r10, $r13;
        int i0, $i1, $i2, i3;
        java.lang.String r0, r2, $r8, $r12;
        org.apache.lucene.search.BooleanClause$Occur $r17;
        org.apache.lucene.search.BooleanClause $r16;
        float $f0;
        java.lang.Object $r14;

        r1 := @this: org.apache.lucene.queryParser.MultiFieldQueryParser;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r0 != null goto label6;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i3 = 0;

     label1:
        $r5 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields>;

        $i1 = lengthof $r5;

        if i3 >= $i1 goto label4;

        $r7 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields>;

        $r8 = $r7[i3];

        $r9 = specialinvoke r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,boolean)>($r8, r2, 1);

        if $r9 == null goto label3;

        $r10 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.util.Map boosts>;

        if $r10 == null goto label2;

        $r13 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.util.Map boosts>;

        $r11 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields>;

        $r12 = $r11[i3];

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        r15 = (java.lang.Float) $r14;

        if r15 == null goto label2;

        $f0 = virtualinvoke r15.<java.lang.Float: float floatValue()>();

        virtualinvoke $r9.<org.apache.lucene.search.Query: void setBoost(float)>($f0);

     label2:
        specialinvoke r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: void applySlop(org.apache.lucene.search.Query,int)>($r9, i0);

        $r16 = new org.apache.lucene.search.BooleanClause;

        $r17 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        specialinvoke $r16.<org.apache.lucene.search.BooleanClause: void <init>(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r9, $r17);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r16);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i2 != 0 goto label5;

        return null;

     label5:
        $r6 = virtualinvoke r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.List,boolean)>($r4, 1);

        return $r6;

     label6:
        $r3 = specialinvoke r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,boolean)>(r0, r2, 1);

        specialinvoke r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: void applySlop(org.apache.lucene.search.Query,int)>($r3, i0);

        return $r3;
    }

    private void applySlop(org.apache.lucene.search.Query, int)
    {
        org.apache.lucene.search.Query r0;
        org.apache.lucene.search.MultiPhraseQuery $r1;
        int i0;
        org.apache.lucene.queryParser.MultiFieldQueryParser r3;
        org.apache.lucene.search.PhraseQuery $r2;
        boolean $z0, $z1;

        r3 := @this: org.apache.lucene.queryParser.MultiFieldQueryParser;

        r0 := @parameter0: org.apache.lucene.search.Query;

        i0 := @parameter1: int;

        $z0 = r0 instanceof org.apache.lucene.search.PhraseQuery;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.lucene.search.PhraseQuery) r0;

        virtualinvoke $r2.<org.apache.lucene.search.PhraseQuery: void setSlop(int)>(i0);

        goto label2;

     label1:
        $z1 = r0 instanceof org.apache.lucene.search.MultiPhraseQuery;

        if $z1 == 0 goto label2;

        $r1 = (org.apache.lucene.search.MultiPhraseQuery) r0;

        virtualinvoke $r1.<org.apache.lucene.search.MultiPhraseQuery: void setSlop(int)>(i0);

     label2:
        return;
    }

    protected org.apache.lucene.search.Query getFieldQuery(java.lang.String, java.lang.String, boolean) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r3, $r6, $r9;
        java.lang.Float r15;
        org.apache.lucene.queryParser.MultiFieldQueryParser r1;
        java.lang.String[] $r5, $r7, $r11;
        java.util.ArrayList $r4;
        java.util.Map $r10, $r13;
        int $i0, $i1, i2;
        java.lang.String r0, r2, $r8, $r12;
        org.apache.lucene.search.BooleanClause$Occur $r17;
        boolean z0;
        org.apache.lucene.search.BooleanClause $r16;
        float $f0;
        java.lang.Object $r14;

        r1 := @this: org.apache.lucene.queryParser.MultiFieldQueryParser;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if r0 != null goto label6;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label1:
        $r5 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields>;

        $i0 = lengthof $r5;

        if i2 >= $i0 goto label4;

        $r7 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields>;

        $r8 = $r7[i2];

        $r9 = specialinvoke r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,boolean)>($r8, r2, z0);

        if $r9 == null goto label3;

        $r10 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.util.Map boosts>;

        if $r10 == null goto label2;

        $r13 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.util.Map boosts>;

        $r11 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields>;

        $r12 = $r11[i2];

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        r15 = (java.lang.Float) $r14;

        if r15 == null goto label2;

        $f0 = virtualinvoke r15.<java.lang.Float: float floatValue()>();

        virtualinvoke $r9.<org.apache.lucene.search.Query: void setBoost(float)>($f0);

     label2:
        $r16 = new org.apache.lucene.search.BooleanClause;

        $r17 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        specialinvoke $r16.<org.apache.lucene.search.BooleanClause: void <init>(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r9, $r17);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r16);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i1 != 0 goto label5;

        return null;

     label5:
        $r6 = virtualinvoke r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.List,boolean)>($r4, 1);

        return $r6;

     label6:
        $r3 = specialinvoke r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,boolean)>(r0, r2, z0);

        return $r3;
    }

    protected org.apache.lucene.search.Query getFuzzyQuery(java.lang.String, java.lang.String, float) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r3, $r6, $r10;
        org.apache.lucene.queryParser.MultiFieldQueryParser r1;
        java.lang.String[] $r5, $r8;
        java.util.ArrayList $r4;
        org.apache.lucene.search.BooleanClause $r7;
        int $i0, i1;
        float f0;
        java.lang.String r0, r2, $r9;
        org.apache.lucene.search.BooleanClause$Occur $r11;

        r1 := @this: org.apache.lucene.queryParser.MultiFieldQueryParser;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        if r0 != null goto label3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $r5 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields>;

        $i0 = lengthof $r5;

        if i1 >= $i0 goto label2;

        $r7 = new org.apache.lucene.search.BooleanClause;

        $r8 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields>;

        $r9 = $r8[i1];

        $r10 = virtualinvoke r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getFuzzyQuery(java.lang.String,java.lang.String,float)>($r9, r2, f0);

        $r11 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        specialinvoke $r7.<org.apache.lucene.search.BooleanClause: void <init>(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r10, $r11);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r6 = virtualinvoke r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.List,boolean)>($r4, 1);

        return $r6;

     label3:
        $r3 = specialinvoke r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFuzzyQuery(java.lang.String,java.lang.String,float)>(r0, r2, f0);

        return $r3;
    }

    protected org.apache.lucene.search.Query getPrefixQuery(java.lang.String, java.lang.String) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r3, $r6, $r10;
        org.apache.lucene.queryParser.MultiFieldQueryParser r1;
        java.lang.String[] $r5, $r8;
        java.util.ArrayList $r4;
        org.apache.lucene.search.BooleanClause $r7;
        int $i0, i1;
        java.lang.String r0, r2, $r9;
        org.apache.lucene.search.BooleanClause$Occur $r11;

        r1 := @this: org.apache.lucene.queryParser.MultiFieldQueryParser;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r0 != null goto label3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $r5 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields>;

        $i0 = lengthof $r5;

        if i1 >= $i0 goto label2;

        $r7 = new org.apache.lucene.search.BooleanClause;

        $r8 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields>;

        $r9 = $r8[i1];

        $r10 = virtualinvoke r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getPrefixQuery(java.lang.String,java.lang.String)>($r9, r2);

        $r11 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        specialinvoke $r7.<org.apache.lucene.search.BooleanClause: void <init>(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r10, $r11);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r6 = virtualinvoke r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.List,boolean)>($r4, 1);

        return $r6;

     label3:
        $r3 = specialinvoke r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getPrefixQuery(java.lang.String,java.lang.String)>(r0, r2);

        return $r3;
    }

    protected org.apache.lucene.search.Query getWildcardQuery(java.lang.String, java.lang.String) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r3, $r6, $r10;
        org.apache.lucene.queryParser.MultiFieldQueryParser r1;
        java.lang.String[] $r5, $r8;
        java.util.ArrayList $r4;
        org.apache.lucene.search.BooleanClause $r7;
        int $i0, i1;
        java.lang.String r0, r2, $r9;
        org.apache.lucene.search.BooleanClause$Occur $r11;

        r1 := @this: org.apache.lucene.queryParser.MultiFieldQueryParser;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r0 != null goto label3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $r5 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields>;

        $i0 = lengthof $r5;

        if i1 >= $i0 goto label2;

        $r7 = new org.apache.lucene.search.BooleanClause;

        $r8 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields>;

        $r9 = $r8[i1];

        $r10 = virtualinvoke r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getWildcardQuery(java.lang.String,java.lang.String)>($r9, r2);

        $r11 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        specialinvoke $r7.<org.apache.lucene.search.BooleanClause: void <init>(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r10, $r11);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r6 = virtualinvoke r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.List,boolean)>($r4, 1);

        return $r6;

     label3:
        $r3 = specialinvoke r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getWildcardQuery(java.lang.String,java.lang.String)>(r0, r2);

        return $r3;
    }

    protected org.apache.lucene.search.Query getRangeQuery(java.lang.String, java.lang.String, java.lang.String, boolean) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r4, $r7, $r11;
        org.apache.lucene.queryParser.MultiFieldQueryParser r1;
        java.lang.String[] $r6, $r9;
        java.util.ArrayList $r5;
        int $i0, i1;
        java.lang.String r0, r2, r3, $r10;
        org.apache.lucene.search.BooleanClause$Occur $r12;
        boolean z0;
        org.apache.lucene.search.BooleanClause $r8;

        r1 := @this: org.apache.lucene.queryParser.MultiFieldQueryParser;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        if r0 != null goto label3;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $r6 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields>;

        $i0 = lengthof $r6;

        if i1 >= $i0 goto label2;

        $r8 = new org.apache.lucene.search.BooleanClause;

        $r9 = r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: java.lang.String[] fields>;

        $r10 = $r9[i1];

        $r11 = virtualinvoke r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean)>($r10, r2, r3, z0);

        $r12 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        specialinvoke $r8.<org.apache.lucene.search.BooleanClause: void <init>(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r11, $r12);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r7 = virtualinvoke r1.<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.List,boolean)>($r5, 1);

        return $r7;

     label3:
        $r4 = specialinvoke r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean)>(r0, r2, r3, z0);

        return $r4;
    }

    public static org.apache.lucene.search.Query parse(org.apache.lucene.util.Version, java.lang.String[], java.lang.String[], org.apache.lucene.analysis.Analyzer) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r8;
        java.lang.String[] r0, r1;
        org.apache.lucene.queryParser.QueryParser $r3;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r6, $r7;
        org.apache.lucene.search.BooleanClause$Occur $r9;
        org.apache.lucene.search.BooleanClause[] $r11;
        boolean $z0;
        org.apache.lucene.analysis.Analyzer r5;
        java.lang.IllegalArgumentException $r12;
        org.apache.lucene.util.Version r4;
        org.apache.lucene.search.BooleanQuery $r2, $r10;

        r4 := @parameter0: org.apache.lucene.util.Version;

        r0 := @parameter1: java.lang.String[];

        r1 := @parameter2: java.lang.String[];

        r5 := @parameter3: org.apache.lucene.analysis.Analyzer;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("queries.length != fields.length");

        throw $r12;

     label1:
        $r2 = new org.apache.lucene.search.BooleanQuery;

        specialinvoke $r2.<org.apache.lucene.search.BooleanQuery: void <init>()>();

        i4 = 0;

     label2:
        $i2 = lengthof r1;

        if i4 >= $i2 goto label5;

        $r3 = new org.apache.lucene.queryParser.QueryParser;

        $r6 = r1[i4];

        specialinvoke $r3.<org.apache.lucene.queryParser.QueryParser: void <init>(org.apache.lucene.util.Version,java.lang.String,org.apache.lucene.analysis.Analyzer)>(r4, $r6, r5);

        $r7 = r0[i4];

        $r8 = virtualinvoke $r3.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query parse(java.lang.String)>($r7);

        if $r8 == null goto label4;

        $z0 = $r8 instanceof org.apache.lucene.search.BooleanQuery;

        if $z0 == 0 goto label3;

        $r10 = (org.apache.lucene.search.BooleanQuery) $r8;

        $r11 = virtualinvoke $r10.<org.apache.lucene.search.BooleanQuery: org.apache.lucene.search.BooleanClause[] getClauses()>();

        $i3 = lengthof $r11;

        if $i3 <= 0 goto label4;

     label3:
        $r9 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        virtualinvoke $r2.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r8, $r9);

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        return $r2;
    }

    public static org.apache.lucene.search.Query parse(org.apache.lucene.util.Version, java.lang.String, java.lang.String[], org.apache.lucene.search.BooleanClause$Occur[], org.apache.lucene.analysis.Analyzer) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r8;
        java.lang.String[] r0;
        org.apache.lucene.queryParser.QueryParser $r3;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r6, r7;
        org.apache.lucene.search.BooleanClause$Occur $r9;
        org.apache.lucene.search.BooleanClause[] $r11;
        boolean $z0;
        org.apache.lucene.analysis.Analyzer r5;
        java.lang.IllegalArgumentException $r12;
        org.apache.lucene.util.Version r4;
        org.apache.lucene.search.BooleanClause$Occur[] r1;
        org.apache.lucene.search.BooleanQuery $r2, $r10;

        r4 := @parameter0: org.apache.lucene.util.Version;

        r7 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String[];

        r1 := @parameter3: org.apache.lucene.search.BooleanClause$Occur[];

        r5 := @parameter4: org.apache.lucene.analysis.Analyzer;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fields.length != flags.length");

        throw $r12;

     label1:
        $r2 = new org.apache.lucene.search.BooleanQuery;

        specialinvoke $r2.<org.apache.lucene.search.BooleanQuery: void <init>()>();

        i4 = 0;

     label2:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label5;

        $r3 = new org.apache.lucene.queryParser.QueryParser;

        $r6 = r0[i4];

        specialinvoke $r3.<org.apache.lucene.queryParser.QueryParser: void <init>(org.apache.lucene.util.Version,java.lang.String,org.apache.lucene.analysis.Analyzer)>(r4, $r6, r5);

        $r8 = virtualinvoke $r3.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query parse(java.lang.String)>(r7);

        if $r8 == null goto label4;

        $z0 = $r8 instanceof org.apache.lucene.search.BooleanQuery;

        if $z0 == 0 goto label3;

        $r10 = (org.apache.lucene.search.BooleanQuery) $r8;

        $r11 = virtualinvoke $r10.<org.apache.lucene.search.BooleanQuery: org.apache.lucene.search.BooleanClause[] getClauses()>();

        $i3 = lengthof $r11;

        if $i3 <= 0 goto label4;

     label3:
        $r9 = r1[i4];

        virtualinvoke $r2.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r8, $r9);

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        return $r2;
    }

    public static org.apache.lucene.search.Query parse(org.apache.lucene.util.Version, java.lang.String[], java.lang.String[], org.apache.lucene.search.BooleanClause$Occur[], org.apache.lucene.analysis.Analyzer) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r10;
        java.lang.String[] r0, r1;
        org.apache.lucene.queryParser.QueryParser $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r8, $r9;
        org.apache.lucene.search.BooleanClause$Occur $r11;
        org.apache.lucene.search.BooleanClause[] $r13;
        boolean $z0;
        org.apache.lucene.analysis.Analyzer r7;
        java.lang.IllegalArgumentException $r2;
        org.apache.lucene.util.Version r6;
        org.apache.lucene.search.BooleanClause$Occur[] r3;
        org.apache.lucene.search.BooleanQuery $r4, $r12;

        r6 := @parameter0: org.apache.lucene.util.Version;

        r0 := @parameter1: java.lang.String[];

        r1 := @parameter2: java.lang.String[];

        r3 := @parameter3: org.apache.lucene.search.BooleanClause$Occur[];

        r7 := @parameter4: org.apache.lucene.analysis.Analyzer;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 != $i0 goto label1;

        $i3 = lengthof r0;

        $i2 = lengthof r3;

        if $i3 == $i2 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("queries, fields, and flags array have have different length");

        throw $r2;

     label2:
        $r4 = new org.apache.lucene.search.BooleanQuery;

        specialinvoke $r4.<org.apache.lucene.search.BooleanQuery: void <init>()>();

        i6 = 0;

     label3:
        $i4 = lengthof r1;

        if i6 >= $i4 goto label6;

        $r5 = new org.apache.lucene.queryParser.QueryParser;

        $r8 = r1[i6];

        specialinvoke $r5.<org.apache.lucene.queryParser.QueryParser: void <init>(org.apache.lucene.util.Version,java.lang.String,org.apache.lucene.analysis.Analyzer)>(r6, $r8, r7);

        $r9 = r0[i6];

        $r10 = virtualinvoke $r5.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query parse(java.lang.String)>($r9);

        if $r10 == null goto label5;

        $z0 = $r10 instanceof org.apache.lucene.search.BooleanQuery;

        if $z0 == 0 goto label4;

        $r12 = (org.apache.lucene.search.BooleanQuery) $r10;

        $r13 = virtualinvoke $r12.<org.apache.lucene.search.BooleanQuery: org.apache.lucene.search.BooleanClause[] getClauses()>();

        $i5 = lengthof $r13;

        if $i5 <= 0 goto label5;

     label4:
        $r11 = r3[i6];

        virtualinvoke $r4.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r10, $r11);

     label5:
        i6 = i6 + 1;

        goto label3;

     label6:
        return $r4;
    }
}
