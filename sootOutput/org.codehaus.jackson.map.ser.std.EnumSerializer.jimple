public class org.codehaus.jackson.map.ser.std.EnumSerializer extends org.codehaus.jackson.map.ser.std.ScalarSerializerBase
{
    protected final org.codehaus.jackson.map.util.EnumValues _values;

    public void <init>(org.codehaus.jackson.map.util.EnumValues)
    {
        org.codehaus.jackson.map.ser.std.EnumSerializer r0;
        org.codehaus.jackson.map.util.EnumValues r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.EnumSerializer;

        r1 := @parameter0: org.codehaus.jackson.map.util.EnumValues;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.ScalarSerializerBase: void <init>(java.lang.Class,boolean)>(class "Ljava/lang/Enum;", 0);

        r0.<org.codehaus.jackson.map.ser.std.EnumSerializer: org.codehaus.jackson.map.util.EnumValues _values> = r1;

        return;
    }

    public static org.codehaus.jackson.map.ser.std.EnumSerializer construct(java.lang.Class, org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r5;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.util.EnumValues $r6;
        org.codehaus.jackson.map.ser.std.EnumSerializer $r4;
        java.lang.Class r3;
        org.codehaus.jackson.map.SerializationConfig$Feature $r2;
        boolean $z0;

        r3 := @parameter0: java.lang.Class;

        r0 := @parameter1: org.codehaus.jackson.map.SerializationConfig;

        r5 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r2 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_ENUMS_USING_TO_STRING>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r2);

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <org.codehaus.jackson.map.util.EnumValues: org.codehaus.jackson.map.util.EnumValues constructFromToString(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector)>(r3, $r1);

        goto label2;

     label1:
        $r6 = staticinvoke <org.codehaus.jackson.map.util.EnumValues: org.codehaus.jackson.map.util.EnumValues constructFromName(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector)>(r3, $r1);

     label2:
        $r4 = new org.codehaus.jackson.map.ser.std.EnumSerializer;

        specialinvoke $r4.<org.codehaus.jackson.map.ser.std.EnumSerializer: void <init>(org.codehaus.jackson.map.util.EnumValues)>($r6);

        return $r4;
    }

    public final void serialize(java.lang.Enum, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.SerializerProvider r0;
        org.codehaus.jackson.io.SerializedString $r6;
        org.codehaus.jackson.map.util.EnumValues $r5;
        java.lang.Enum r4;
        org.codehaus.jackson.JsonGenerator r2;
        int $i0;
        org.codehaus.jackson.map.ser.std.EnumSerializer r3;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.ser.std.EnumSerializer;

        r4 := @parameter0: java.lang.Enum;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r0 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r1 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_ENUMS_USING_INDEX>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r1);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r4.<java.lang.Enum: int ordinal()>();

        virtualinvoke r2.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i0);

        return;

     label1:
        $r5 = r3.<org.codehaus.jackson.map.ser.std.EnumSerializer: org.codehaus.jackson.map.util.EnumValues _values>;

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.util.EnumValues: org.codehaus.jackson.io.SerializedString serializedValueFor(java.lang.Enum)>(r4);

        virtualinvoke r2.<org.codehaus.jackson.JsonGenerator: void writeString(org.codehaus.jackson.SerializableString)>($r6);

        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.SerializerProvider r0;
        org.codehaus.jackson.map.util.EnumValues $r7;
        org.codehaus.jackson.map.ser.std.EnumSerializer r2;
        org.codehaus.jackson.type.JavaType $r5;
        java.lang.String $r12;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.node.ObjectNode $r3, $r13;
        java.util.Iterator $r9;
        java.util.Collection $r8;
        org.codehaus.jackson.io.SerializedString r11;
        org.codehaus.jackson.node.ArrayNode $r6;
        java.lang.reflect.Type r4;
        java.lang.Object $r10;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;

        r2 := @this: org.codehaus.jackson.map.ser.std.EnumSerializer;

        r0 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r4 := @parameter1: java.lang.reflect.Type;

        $r1 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_ENUMS_USING_INDEX>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r1);

        if $z0 == 0 goto label1;

        $r13 = virtualinvoke r2.<org.codehaus.jackson.map.ser.std.EnumSerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("integer", 1);

        return $r13;

     label1:
        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.ser.std.EnumSerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("string", 1);

        if r4 == null goto label3;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>(r4);

        $z1 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: boolean isEnumType()>();

        if $z1 == 0 goto label3;

        $r6 = virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.ArrayNode putArray(java.lang.String)>("enum");

        $r7 = r2.<org.codehaus.jackson.map.ser.std.EnumSerializer: org.codehaus.jackson.map.util.EnumValues _values>;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.util.EnumValues: java.util.Collection values()>();

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.codehaus.jackson.io.SerializedString) $r10;

        $r12 = virtualinvoke r11.<org.codehaus.jackson.io.SerializedString: java.lang.String getValue()>();

        virtualinvoke $r6.<org.codehaus.jackson.node.ArrayNode: void add(java.lang.String)>($r12);

        goto label2;

     label3:
        return $r3;
    }

    public org.codehaus.jackson.map.util.EnumValues getEnumValues()
    {
        org.codehaus.jackson.map.ser.std.EnumSerializer r0;
        org.codehaus.jackson.map.util.EnumValues $r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.EnumSerializer;

        $r1 = r0.<org.codehaus.jackson.map.ser.std.EnumSerializer: org.codehaus.jackson.map.util.EnumValues _values>;

        return $r1;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        java.lang.Enum $r4;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.ser.std.EnumSerializer r0;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.EnumSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.lang.Enum) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.EnumSerializer: void serialize(java.lang.Enum,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r2, r3);

        return;
    }
}
