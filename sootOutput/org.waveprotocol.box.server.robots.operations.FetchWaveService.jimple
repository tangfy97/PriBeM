public class org.waveprotocol.box.server.robots.operations.FetchWaveService extends java.lang.Object implements org.waveprotocol.box.server.robots.operations.OperationService
{

    private void <init>()
    {
        org.waveprotocol.box.server.robots.operations.FetchWaveService r0;

        r0 := @this: org.waveprotocol.box.server.robots.operations.FetchWaveService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void execute(com.google.wave.api.OperationRequest, org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.wave.model.wave.ParticipantId) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.event.WaveletFetchedEvent $r13;
        com.google.wave.api.impl.EventMessageBundle $r8;
        com.google.wave.api.OperationRequest r1;
        long $l0;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r3;
        com.google.wave.api.impl.WaveletData $r16;
        org.waveprotocol.wave.model.conversation.ObservableConversation $r5;
        java.lang.Long $r15;
        com.google.wave.api.data.converter.EventDataConverter $r7;
        java.util.Map $r17, $r18;
        org.waveprotocol.wave.model.conversation.ObservableConversationView $r4;
        java.lang.String $r9, r12, $r14;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r10;
        org.waveprotocol.box.server.robots.OperationContext r0;
        java.lang.Object $r11;
        org.waveprotocol.box.server.robots.operations.FetchWaveService r6;

        r6 := @this: org.waveprotocol.box.server.robots.operations.FetchWaveService;

        r1 := @parameter0: com.google.wave.api.OperationRequest;

        r0 := @parameter1: org.waveprotocol.box.server.robots.OperationContext;

        r2 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r3 = interfaceinvoke r0.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet openWavelet(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r2);

        $r4 = interfaceinvoke r0.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.conversation.ObservableConversationView openConversation(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r2);

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.conversation.ObservableConversationView: org.waveprotocol.wave.model.conversation.ObservableConversation getRoot()>();

        $r7 = interfaceinvoke r0.<org.waveprotocol.box.server.robots.OperationContext: com.google.wave.api.data.converter.EventDataConverter getConverter()>();

        $r8 = specialinvoke r6.<org.waveprotocol.box.server.robots.operations.FetchWaveService: com.google.wave.api.impl.EventMessageBundle mapWaveletToMessageBundle(com.google.wave.api.data.converter.EventDataConverter,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.wave.Wavelet,org.waveprotocol.wave.model.conversation.Conversation)>($r7, r2, $r3, $r5);

        $r9 = staticinvoke <org.waveprotocol.box.server.robots.util.ConversationUtil: java.lang.String getRootBlipId(org.waveprotocol.wave.model.conversation.Conversation)>($r5);

        $r10 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty MESSAGE>;

        $r11 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getOptionalParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r1, $r10);

        r12 = (java.lang.String) $r11;

        $r13 = new com.google.wave.api.event.WaveletFetchedEvent;

        $r14 = virtualinvoke r2.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r16 = virtualinvoke $r8.<com.google.wave.api.impl.EventMessageBundle: com.google.wave.api.impl.WaveletData getWaveletData()>();

        $r17 = virtualinvoke $r8.<com.google.wave.api.impl.EventMessageBundle: java.util.Map getBlipData()>();

        $r18 = virtualinvoke $r8.<com.google.wave.api.impl.EventMessageBundle: java.util.Map getThreads()>();

        specialinvoke $r13.<com.google.wave.api.event.WaveletFetchedEvent: void <init>(com.google.wave.api.Wavelet,com.google.wave.api.impl.EventMessageBundle,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,com.google.wave.api.impl.WaveletData,java.util.Map,java.util.Map,java.util.List,java.util.List)>(null, null, $r14, $r15, r12, $r9, $r16, $r17, $r18, null, null);

        interfaceinvoke r0.<org.waveprotocol.box.server.robots.OperationContext: void processEvent(com.google.wave.api.OperationRequest,com.google.wave.api.event.Event)>(r1, $r13);

        return;
    }

    private com.google.wave.api.impl.EventMessageBundle mapWaveletToMessageBundle(com.google.wave.api.data.converter.EventDataConverter, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.wave.Wavelet, org.waveprotocol.wave.model.conversation.Conversation)
    {
        com.google.wave.api.impl.EventMessageBundle $r0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        com.google.wave.api.impl.WaveletData $r6;
        org.waveprotocol.wave.model.wave.Wavelet r4;
        org.waveprotocol.wave.model.conversation.Conversation r5;
        com.google.wave.api.data.converter.EventDataConverter r3;
        java.lang.String $r2;
        org.waveprotocol.box.server.robots.operations.FetchWaveService r7;

        r7 := @this: org.waveprotocol.box.server.robots.operations.FetchWaveService;

        r3 := @parameter0: com.google.wave.api.data.converter.EventDataConverter;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r4 := @parameter2: org.waveprotocol.wave.model.wave.Wavelet;

        r5 := @parameter3: org.waveprotocol.wave.model.conversation.Conversation;

        $r0 = new com.google.wave.api.impl.EventMessageBundle;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        specialinvoke $r0.<com.google.wave.api.impl.EventMessageBundle: void <init>(java.lang.String,java.lang.String)>($r2, "");

        $r6 = interfaceinvoke r3.<com.google.wave.api.data.converter.EventDataConverter: com.google.wave.api.impl.WaveletData toWaveletData(org.waveprotocol.wave.model.wave.Wavelet,org.waveprotocol.wave.model.conversation.Conversation,com.google.wave.api.impl.EventMessageBundle)>(r4, r5, $r0);

        virtualinvoke $r0.<com.google.wave.api.impl.EventMessageBundle: void setWaveletData(com.google.wave.api.impl.WaveletData)>($r6);

        staticinvoke <com.google.wave.api.data.converter.ContextResolver: void addAllBlipsToEventMessages(com.google.wave.api.impl.EventMessageBundle,org.waveprotocol.wave.model.conversation.Conversation,org.waveprotocol.wave.model.wave.Wavelet,com.google.wave.api.data.converter.EventDataConverter)>($r0, r5, r4, r3);

        return $r0;
    }

    public static org.waveprotocol.box.server.robots.operations.FetchWaveService create()
    {
        org.waveprotocol.box.server.robots.operations.FetchWaveService $r0;

        $r0 = new org.waveprotocol.box.server.robots.operations.FetchWaveService;

        specialinvoke $r0.<org.waveprotocol.box.server.robots.operations.FetchWaveService: void <init>()>();

        return $r0;
    }
}
