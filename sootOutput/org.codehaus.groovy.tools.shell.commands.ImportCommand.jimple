public class org.codehaus.groovy.tools.shell.commands.ImportCommand extends org.codehaus.groovy.tools.shell.CommandSupport
{
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119697138;
    static java.lang.Class class$java$util$List;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$org$codehaus$groovy$tools$shell$commands$ImportCommandCompletor;
    static java.lang.Class class$org$codehaus$groovy$tools$shell$CommandSupport;

    public void <init>(org.codehaus.groovy.tools.shell.Shell)
    {
        java.lang.Object[] $r15;
        int $i0, $i1, $i2;
        java.lang.String $r8, $r10;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r4;
        java.lang.IllegalArgumentException $r11;
        java.lang.Class $r0, $r1, $r3, $r13, $r14, $r16;
        java.lang.Object $r5, $r7, $r9, $r12;
        org.codehaus.groovy.tools.shell.Shell r2, $r6;

        r4 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        r2 := @parameter0: org.codehaus.groovy.tools.shell.Shell;

        $r0 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r13 = staticinvoke <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.commands.ImportCommand");

        <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$0> = $r13;

        goto label02;

     label01:
        $r13 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$0>;

     label02:
        $r1 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label03;

        $r14 = staticinvoke <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$groovy$lang$MetaClass> = $r14;

        goto label04;

     label03:
        $r14 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r15 = newarray (java.lang.Object)[3];

        $r15[0] = r2;

        $r15[1] = "import";

        $r15[2] = "\\i";

        $r3 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$org$codehaus$groovy$tools$shell$CommandSupport>;

        if $r3 != null goto label05;

        $r16 = staticinvoke <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.CommandSupport");

        <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$org$codehaus$groovy$tools$shell$CommandSupport> = $r16;

        goto label06;

     label05:
        $r16 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$org$codehaus$groovy$tools$shell$CommandSupport>;

     label06:
        $i0 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: int selectConstructorAndTransformArguments(java.lang.Object[],int,java.lang.Class)>($r15, 1, $r16);

        $i1 = $i0 & 1;

        if $i1 == 0 goto label07;

        $r12 = $r15[0];

        $r15 = (java.lang.Object[]) $r12;

     label07:
        $i2 = $i0 >> 8;

        lookupswitch($i2)
        {
            case 0: goto label08;
            default: goto label09;
        };

     label08:
        $r5 = $r15[0];

        $r6 = (org.codehaus.groovy.tools.shell.Shell) $r5;

        $r7 = $r15[1];

        $r8 = (java.lang.String) $r7;

        $r9 = $r15[2];

        $r10 = (java.lang.String) $r9;

        specialinvoke r4.<org.codehaus.groovy.tools.shell.CommandSupport: void <init>(org.codehaus.groovy.tools.shell.Shell,java.lang.String,java.lang.String)>($r6, $r8, $r10);

        goto label10;

     label09:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("illegal constructor number");

        throw $r11;

     label10:
        return;
    }

    protected java.util.List createCompletors()
    {
        java.lang.Object[] $r3, $r5;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r6;
        java.util.List $r11, $r14;
        java.lang.Class $r0, r1, $r2, $r4, $r12, $r15, $r16, $r17, $r18;
        java.lang.Object $r7, $r8, $r9, $r10, $r13;

        r6 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r0 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r15 = staticinvoke <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.commands.ImportCommand");

        <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$0> = $r15;

        goto label2;

     label1:
        $r15 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$0>;

     label2:
        r1 = $r15;

        $r2 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r16 = staticinvoke <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$groovy$lang$MetaClass> = $r16;

        goto label4;

     label3:
        $r16 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$org$codehaus$groovy$tools$shell$commands$ImportCommandCompletor>;

        if $r4 != null goto label5;

        $r17 = staticinvoke <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.commands.ImportCommandCompletor");

        <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$org$codehaus$groovy$tools$shell$commands$ImportCommandCompletor> = $r17;

        goto label6;

     label5:
        $r17 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$org$codehaus$groovy$tools$shell$commands$ImportCommandCompletor>;

     label6:
        $r5 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r1, r6, "shell");

        $r8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r7, "interp");

        $r9 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r8, "classLoader");

        $r5[0] = $r9;

        $r10 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r17, $r5);

        $r3[0] = $r10;

        $r3[1] = null;

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.List createList(java.lang.Object[])>($r3);

        $r12 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$java$util$List>;

        if $r12 != null goto label7;

        $r18 = staticinvoke <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$(java.lang.String)>("java.util.List");

        <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$java$util$List> = $r18;

        goto label8;

     label7:
        $r18 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$java$util$List>;

     label8:
        $r13 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r11, $r18);

        $r14 = (java.util.List) $r13;

        return $r14;
    }

    public java.lang.Object execute(java.util.List)
    {
        java.lang.Integer $r22, $r30, $r36, $r57;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r13;
        org.codehaus.groovy.control.CompilationFailedException $r53;
        java.lang.Throwable $r48;
        java.lang.Object[] $r6, $r7, $r8, $r12, $r15, $r16, $r20, $r21, $r26, $r28, $r29, $r34, $r35, $r40, $r46, $r47, $r51, $r55, $r56, $r62, $r63;
        java.lang.StringBuffer $r4;
        boolean $z0, $z1, $z2;
        org.codehaus.groovy.runtime.GStringImpl $r27, $r54;
        java.util.List r3, $r11;
        java.lang.String[] $r32, $r60;
        java.lang.Class $r0, r1, $r2, $r42, $r64, $r65, $r67;
        java.lang.Object $r5, $r9, $r10, $r14, $r17, $r18, $r19, $r23, $r24, $r25, $r31, $r33, $r37, $r38, $r39, $r41, $r43, $r44, $r45, $r49, $r50, $r52, $r58, $r59, $r61, r66;

        r13 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        r3 := @parameter0: java.util.List;

        $r0 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r64 = staticinvoke <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.commands.ImportCommand");

        <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$0> = $r64;

        goto label02;

     label01:
        $r64 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$0>;

     label02:
        r1 = $r64;

        $r2 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r65 = staticinvoke <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$groovy$lang$MetaClass> = $r65;

        goto label04;

     label03:
        $r65 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $z0 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareNotEqual(java.lang.Object,java.lang.Object)>(r3, null);

        if $z0 == 0 goto label05;

        goto label06;

     label05:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(java.lang.String)>("(args != null). Values: ");

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("args = ");

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void assertFailed(java.lang.Object,java.lang.Object)>($r4, null);

     label06:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r3, "isEmpty");

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r5);

        if $z1 == 0 goto label07;

        $r47 = newarray (java.lang.Object)[1];

        $r47[0] = "Command \'import\' requires one or more arguments";

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodOnCurrentN(java.lang.Class,groovy.lang.GroovyObject,java.lang.String,java.lang.Object[])>(r1, r13, "fail", $r47);

        goto label07;

     label07:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = newarray (java.lang.Object)[1];

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = " ";

        $r9 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "join", $r8);

        $r7[0] = $r9;

        $r10 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, "import ", "plus", $r7);

        $r6[0] = $r10;

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.List createList(java.lang.Object[])>($r6);

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = "def dummp = false";

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r11, "leftShift", $r12);

        r66 = null;

     label08:
        $r14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r1, r13, "classLoader");

        $r15 = newarray (java.lang.Object)[1];

        $r16 = newarray (java.lang.Object)[1];

        $r17 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r1, r13, "NEWLINE");

        $r16[0] = $r17;

        $r18 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r11, "join", $r16);

        $r15[0] = $r18;

        r66 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r14, "parseClass", $r15);

        $r19 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r1, r13, "imports");

        $r20 = newarray (java.lang.Object)[1];

        $r21 = newarray (java.lang.Object)[1];

        $r22 = new java.lang.Integer;

        specialinvoke $r22.<java.lang.Integer: void <init>(int)>(0);

        $r21[0] = $r22;

        $r23 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r11, "getAt", $r21);

        $r20[0] = $r23;

        $r24 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r19, "remove", $r20);

        $z2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r24);

        if $z2 == 0 goto label09;

        $r45 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r1, r13, "log");

        $r46 = newarray (java.lang.Object)[1];

        $r46[0] = "Removed duplicate import from list";

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r45, "debug", $r46);

        goto label09;

     label09:
        $r25 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r1, r13, "log");

        $r26 = newarray (java.lang.Object)[1];

        $r27 = new org.codehaus.groovy.runtime.GStringImpl;

        $r28 = newarray (java.lang.Object)[1];

        $r29 = newarray (java.lang.Object)[1];

        $r30 = new java.lang.Integer;

        specialinvoke $r30.<java.lang.Integer: void <init>(int)>(0);

        $r29[0] = $r30;

        $r31 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r11, "getAt", $r29);

        $r28[0] = $r31;

        $r32 = newarray (java.lang.String)[2];

        $r32[0] = "Adding import: ";

        $r32[1] = "";

        specialinvoke $r27.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r28, $r32);

        $r26[0] = $r27;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r25, "debug", $r26);

        $r33 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r1, r13, "imports");

        $r34 = newarray (java.lang.Object)[1];

        $r35 = newarray (java.lang.Object)[1];

        $r36 = new java.lang.Integer;

        specialinvoke $r36.<java.lang.Integer: void <init>(int)>(0);

        $r35[0] = $r36;

        $r37 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r11, "getAt", $r35);

        $r34[0] = $r37;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r33, "leftShift", $r34);

        goto label11;

     label10:
        $r53 := @caughtexception;

        $r54 = new org.codehaus.groovy.runtime.GStringImpl;

        $r55 = newarray (java.lang.Object)[2];

        $r56 = newarray (java.lang.Object)[1];

        $r57 = new java.lang.Integer;

        specialinvoke $r57.<java.lang.Integer: void <init>(int)>(0);

        $r56[0] = $r57;

        $r58 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r11, "getAt", $r56);

        $r55[0] = $r58;

        $r59 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r53, "message");

        $r55[1] = $r59;

        $r60 = newarray (java.lang.String)[3];

        $r60[0] = "Invalid import definition: \'";

        $r60[1] = "\'; reason: ";

        $r60[2] = "";

        specialinvoke $r54.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r55, $r60);

        $r61 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r1, r13, "log");

        $r62 = newarray (java.lang.Object)[2];

        $r62[0] = $r54;

        $r62[1] = $r53;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r61, "debug", $r62);

        $r63 = newarray (java.lang.Object)[1];

        $r63[0] = $r54;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodOnCurrentN(java.lang.Class,groovy.lang.GroovyObject,java.lang.String,java.lang.Object[])>(r1, r13, "fail", $r63);

        goto label11;

     label11:
        $r38 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r1, r13, "classLoader");

        $r39 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r38, "classCache");

        $r40 = newarray (java.lang.Object)[1];

        $r41 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getPropertySafe(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r66, "name");

        $r40[0] = $r41;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r39, "remove", $r40);

        goto label13;

     label12:
        $r48 := @caughtexception;

        $r49 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r1, r13, "classLoader");

        $r50 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r49, "classCache");

        $r51 = newarray (java.lang.Object)[1];

        $r52 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getPropertySafe(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r66, "name");

        $r51[0] = $r52;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r50, "remove", $r51);

        throw $r48;

     label13:
        $r42 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$java$lang$Object>;

        if $r42 != null goto label14;

        $r67 = staticinvoke <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$java$lang$Object> = $r67;

        goto label15;

     label14:
        $r67 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$java$lang$Object>;

     label15:
        $r43 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(null, $r67);

        $r44 = (java.lang.Object) $r43;

        return $r44;

        catch org.codehaus.groovy.control.CompilationFailedException from label08 to label10 with label10;
        catch java.lang.Throwable from label08 to label11 with label12;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.commands.ImportCommand");

        <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$0>;

     label2:
        $r1 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119697138L);

        $r3 = (java.lang.Long) $r2;

        <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <org.codehaus.groovy.tools.shell.commands.ImportCommand: java.lang.Long __timeStamp__239_neverHappen1239119697138> = $r5;

        return;
    }

    java.lang.String super$1$toString()
    {
        java.lang.String $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    void super$2$setProperty(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: void setProperty(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    org.codehaus.groovy.tools.shell.BufferManager super$2$getBuffers()
    {
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;
        org.codehaus.groovy.tools.shell.BufferManager $r1;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: org.codehaus.groovy.tools.shell.BufferManager getBuffers()>();

        return $r1;
    }

    java.lang.String super$2$getHelp()
    {
        java.lang.String $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: java.lang.String getHelp()>();

        return $r1;
    }

    jline.History super$2$getHistory()
    {
        jline.History $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: jline.History getHistory()>();

        return $r1;
    }

    java.util.List super$2$createCompletors()
    {
        java.util.List $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: java.util.List createCompletors()>();

        return $r1;
    }

    void super$1$wait()
    {
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    groovy.lang.MetaClass super$2$getMetaClass()
    {
        groovy.lang.MetaClass $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: groovy.lang.MetaClass getMetaClass()>();

        return $r1;
    }

    void super$2$setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        r1 := @parameter0: groovy.lang.MetaClass;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: void setMetaClass(groovy.lang.MetaClass)>(r1);

        return;
    }

    java.util.Map super$2$getVariables()
    {
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;
        java.util.Map $r1;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: java.util.Map getVariables()>();

        return $r1;
    }

    java.util.List super$2$getBuffer()
    {
        java.util.List $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: java.util.List getBuffer()>();

        return $r1;
    }

    java.lang.Class super$1$getClass()
    {
        java.lang.Class $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    java.lang.String super$2$getDescription()
    {
        java.lang.String $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: java.lang.String getDescription()>();

        return $r1;
    }

    java.lang.String super$2$getShortcut()
    {
        java.lang.String $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: java.lang.String getShortcut()>();

        return $r1;
    }

    java.lang.Object super$2$invokeMethod(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2, $r3;
        java.lang.String r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>(r1, r2);

        return $r3;
    }

    int super$1$hashCode()
    {
        int $i0;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    java.lang.Object super$2$getProperty(java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.String r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r2;
    }

    java.lang.String super$2$getName()
    {
        java.lang.String $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: java.lang.String getName()>();

        return $r1;
    }

    void super$2$fail(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: void fail(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

    void super$2$fail(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: void fail(java.lang.String)>(r1);

        return;
    }

    void super$2$assertNoArguments(java.util.List)
    {
        java.util.List r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: void assertNoArguments(java.util.List)>(r1);

        return;
    }

    void super$1$notify()
    {
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$2$alias(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: void alias(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    void super$1$notifyAll()
    {
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    void super$2$setHidden(boolean)
    {
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: void setHidden(boolean)>(z0);

        return;
    }

    jline.Completor super$2$getCompletor()
    {
        jline.Completor $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: jline.Completor getCompletor()>();

        return $r1;
    }

    java.lang.Object super$1$clone()
    {
        java.lang.Object $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    java.lang.String super$2$getUsage()
    {
        java.lang.String $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: java.lang.String getUsage()>();

        return $r1;
    }

    groovy.lang.GroovyClassLoader super$2$getClassLoader()
    {
        groovy.lang.GroovyClassLoader $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: groovy.lang.GroovyClassLoader getClassLoader()>();

        return $r1;
    }

    boolean super$2$isHidden()
    {
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $z0 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: boolean isHidden()>();

        return $z0;
    }

    void super$1$wait(long, int)
    {
        int i1;
        long l0;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    boolean super$2$getHidden()
    {
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $z0 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: boolean getHidden()>();

        return $z0;
    }

    groovy.lang.Binding super$2$getBinding()
    {
        groovy.lang.Binding $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: groovy.lang.Binding getBinding()>();

        return $r1;
    }

    java.util.List super$2$getImports()
    {
        java.util.List $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: java.util.List getImports()>();

        return $r1;
    }

    java.util.List super$2$getAliases()
    {
        java.util.List $r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        $r1 = specialinvoke r0.<org.codehaus.groovy.tools.shell.CommandSupport: java.util.List getAliases()>();

        return $r1;
    }

    void super$1$finalize()
    {
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    void super$1$wait(long)
    {
        long l0;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    boolean super$1$equals(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.groovy.tools.shell.commands.ImportCommand r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.shell.commands.ImportCommand;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
