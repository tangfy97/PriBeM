public class org.springframework.http.server.ServletServerHttpRequest extends java.lang.Object implements org.springframework.http.server.ServerHttpRequest
{
    private static final java.lang.String FORM_CONTENT_TYPE;
    private static final java.lang.String POST_METHOD;
    private static final java.lang.String PUT_METHOD;
    private static final java.lang.String FORM_CHARSET;
    private final javax.servlet.http.HttpServletRequest servletRequest;
    private org.springframework.http.HttpHeaders headers;

    public void <init>(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r1;
        org.springframework.http.server.ServletServerHttpRequest r0;

        r0 := @this: org.springframework.http.server.ServletServerHttpRequest;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "\'servletRequest\' must not be null");

        r0.<org.springframework.http.server.ServletServerHttpRequest: javax.servlet.http.HttpServletRequest servletRequest> = r1;

        return;
    }

    public javax.servlet.http.HttpServletRequest getServletRequest()
    {
        javax.servlet.http.HttpServletRequest $r1;
        org.springframework.http.server.ServletServerHttpRequest r0;

        r0 := @this: org.springframework.http.server.ServletServerHttpRequest;

        $r1 = r0.<org.springframework.http.server.ServletServerHttpRequest: javax.servlet.http.HttpServletRequest servletRequest>;

        return $r1;
    }

    public org.springframework.http.HttpMethod getMethod()
    {
        javax.servlet.http.HttpServletRequest $r1;
        org.springframework.http.server.ServletServerHttpRequest r0;
        org.springframework.http.HttpMethod $r3;
        java.lang.String $r2;

        r0 := @this: org.springframework.http.server.ServletServerHttpRequest;

        $r1 = r0.<org.springframework.http.server.ServletServerHttpRequest: javax.servlet.http.HttpServletRequest servletRequest>;

        $r2 = interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>();

        $r3 = staticinvoke <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod valueOf(java.lang.String)>($r2);

        return $r3;
    }

    public java.net.URI getURI()
    {
        java.lang.IllegalStateException $r12;
        java.net.URISyntaxException $r11;
        javax.servlet.http.HttpServletRequest $r2, $r4, $r6, $r7, $r9;
        int $i0;
        java.net.URI $r0;
        java.lang.String $r3, $r5, $r8, $r10, $r14, $r16;
        org.springframework.http.server.ServletServerHttpRequest r1;
        java.lang.StringBuilder $r13, $r15;

        r1 := @this: org.springframework.http.server.ServletServerHttpRequest;

     label1:
        $r0 = new java.net.URI;

        $r2 = r1.<org.springframework.http.server.ServletServerHttpRequest: javax.servlet.http.HttpServletRequest servletRequest>;

        $r3 = interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getScheme()>();

        $r4 = r1.<org.springframework.http.server.ServletServerHttpRequest: javax.servlet.http.HttpServletRequest servletRequest>;

        $r5 = interfaceinvoke $r4.<javax.servlet.http.HttpServletRequest: java.lang.String getServerName()>();

        $r6 = r1.<org.springframework.http.server.ServletServerHttpRequest: javax.servlet.http.HttpServletRequest servletRequest>;

        $i0 = interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: int getServerPort()>();

        $r7 = r1.<org.springframework.http.server.ServletServerHttpRequest: javax.servlet.http.HttpServletRequest servletRequest>;

        $r8 = interfaceinvoke $r7.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>();

        $r9 = r1.<org.springframework.http.server.ServletServerHttpRequest: javax.servlet.http.HttpServletRequest servletRequest>;

        $r10 = interfaceinvoke $r9.<javax.servlet.http.HttpServletRequest: java.lang.String getQueryString()>();

        specialinvoke $r0.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>($r3, null, $r5, $i0, $r8, $r10, null);

     label2:
        return $r0;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not get HttpServletRequest URI: ");

        $r14 = virtualinvoke $r11.<java.net.URISyntaxException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r11);

        throw $r12;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    public org.springframework.http.HttpHeaders getHeaders()
    {
        java.util.Enumeration $r5, $r9;
        org.springframework.http.HttpHeaders $r1, $r2, $r3, $r12;
        javax.servlet.http.HttpServletRequest $r4, $r8;
        org.springframework.http.server.ServletServerHttpRequest r0;
        java.lang.Object $r6, $r10;
        java.lang.String r7, r11;
        boolean $z0, $z1;

        r0 := @this: org.springframework.http.server.ServletServerHttpRequest;

        $r1 = r0.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders headers>;

        if $r1 != null goto label5;

        $r3 = new org.springframework.http.HttpHeaders;

        specialinvoke $r3.<org.springframework.http.HttpHeaders: void <init>()>();

        r0.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders headers> = $r3;

        $r4 = r0.<org.springframework.http.server.ServletServerHttpRequest: javax.servlet.http.HttpServletRequest servletRequest>;

        $r5 = interfaceinvoke $r4.<javax.servlet.http.HttpServletRequest: java.util.Enumeration getHeaderNames()>();

        goto label4;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        r7 = (java.lang.String) $r6;

        $r8 = r0.<org.springframework.http.server.ServletServerHttpRequest: javax.servlet.http.HttpServletRequest servletRequest>;

        $r9 = interfaceinvoke $r8.<javax.servlet.http.HttpServletRequest: java.util.Enumeration getHeaders(java.lang.String)>(r7);

        goto label3;

     label2:
        $r10 = interfaceinvoke $r9.<java.util.Enumeration: java.lang.Object nextElement()>();

        r11 = (java.lang.String) $r10;

        $r12 = r0.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders headers>;

        virtualinvoke $r12.<org.springframework.http.HttpHeaders: void add(java.lang.String,java.lang.String)>(r7, r11);

     label3:
        $z1 = interfaceinvoke $r9.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 != 0 goto label2;

     label4:
        $z0 = interfaceinvoke $r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

     label5:
        $r2 = r0.<org.springframework.http.server.ServletServerHttpRequest: org.springframework.http.HttpHeaders headers>;

        return $r2;
    }

    public java.io.InputStream getBody() throws java.io.IOException
    {
        javax.servlet.http.HttpServletRequest $r1, $r2, $r4;
        org.springframework.http.server.ServletServerHttpRequest r0;
        javax.servlet.ServletInputStream $r3;
        boolean $z0;
        java.io.InputStream $r5;

        r0 := @this: org.springframework.http.server.ServletServerHttpRequest;

        $r1 = r0.<org.springframework.http.server.ServletServerHttpRequest: javax.servlet.http.HttpServletRequest servletRequest>;

        $z0 = specialinvoke r0.<org.springframework.http.server.ServletServerHttpRequest: boolean isFormSubmittal(javax.servlet.http.HttpServletRequest)>($r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.springframework.http.server.ServletServerHttpRequest: javax.servlet.http.HttpServletRequest servletRequest>;

        $r5 = specialinvoke r0.<org.springframework.http.server.ServletServerHttpRequest: java.io.InputStream getFormBody(javax.servlet.http.HttpServletRequest)>($r4);

        return $r5;

     label1:
        $r2 = r0.<org.springframework.http.server.ServletServerHttpRequest: javax.servlet.http.HttpServletRequest servletRequest>;

        $r3 = interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: javax.servlet.ServletInputStream getInputStream()>();

        return $r3;
    }

    private boolean isFormSubmittal(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        org.springframework.http.server.ServletServerHttpRequest r7;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2;

        r7 := @this: org.springframework.http.server.ServletServerHttpRequest;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = "application/x-www-form-urlencoded";

        $r2 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r3 = "POST";

        $r4 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z1 != 0 goto label1;

        $r5 = "PUT";

        $r6 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z2 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private java.io.InputStream getFormBody(javax.servlet.http.HttpServletRequest) throws java.io.IOException
    {
        byte[] $r17;
        java.io.ByteArrayOutputStream $r0;
        java.lang.String[] $r9;
        javax.servlet.http.HttpServletRequest r2;
        java.io.ByteArrayInputStream $r16;
        java.util.Map $r3;
        java.io.OutputStreamWriter $r1;
        java.lang.String r7, r13, $r14, $r15;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r5, $r11;
        java.util.Set $r4;
        java.util.List $r10;
        org.springframework.http.server.ServletServerHttpRequest r18;
        java.lang.Object $r6, $r8, $r12;

        r18 := @this: org.springframework.http.server.ServletServerHttpRequest;

        r2 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.OutputStreamWriter;

        specialinvoke $r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r0, "UTF-8");

        $r3 = interfaceinvoke r2.<javax.servlet.http.HttpServletRequest: java.util.Map getParameterMap()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        $r9 = (java.lang.String[]) $r8;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r12;

        $r14 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>(r7, "UTF-8");

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r14);

        if r13 == null goto label3;

        virtualinvoke $r1.<java.io.Writer: void write(int)>(61);

        $r15 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>(r13, "UTF-8");

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r15);

        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<java.io.Writer: void write(int)>(38);

     label3:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        virtualinvoke $r1.<java.io.Writer: java.io.Writer append(char)>(38);

     label4:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label1;

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        $r16 = new java.io.ByteArrayInputStream;

        $r17 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r16.<java.io.ByteArrayInputStream: void <init>(byte[])>($r17);

        return $r16;
    }

    public static void <clinit>()
    {
        <org.springframework.http.server.ServletServerHttpRequest: java.lang.String FORM_CHARSET> = "UTF-8";

        <org.springframework.http.server.ServletServerHttpRequest: java.lang.String PUT_METHOD> = "PUT";

        <org.springframework.http.server.ServletServerHttpRequest: java.lang.String POST_METHOD> = "POST";

        <org.springframework.http.server.ServletServerHttpRequest: java.lang.String FORM_CONTENT_TYPE> = "application/x-www-form-urlencoded";

        return;
    }
}
