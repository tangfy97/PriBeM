class org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery extends org.apache.lucene.search.Query
{
    java.lang.String field;
    java.lang.String phrasedQueryStringContents;
    int slopFactor;
    private org.apache.lucene.search.Query contents;

    public void <init>(java.lang.String, java.lang.String, int)
    {
        int i0;
        java.lang.String r1, r2;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery r0;

        r0 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.search.Query: void <init>()>();

        r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String field> = r1;

        r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String phrasedQueryStringContents> = r2;

        r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: int slopFactor> = i0;

        return;
    }

    protected void parsePhraseElements(org.apache.lucene.queryparser.classic.QueryParser) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r3;
        org.apache.lucene.queryparser.classic.QueryParser r1;
        java.lang.String $r2;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery r0;

        r0 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery;

        r1 := @parameter0: org.apache.lucene.queryparser.classic.QueryParser;

        $r2 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String phrasedQueryStringContents>;

        $r3 = virtualinvoke r1.<org.apache.lucene.queryparser.classic.QueryParser: org.apache.lucene.search.Query parse(java.lang.String)>($r2);

        r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: org.apache.lucene.search.Query contents> = $r3;

        return;
    }

    public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException
    {
        org.apache.lucene.search.Query $r1, $r2, $r3, $r19, $r21, $r48, $r57;
        org.apache.lucene.index.Term $r37, $r41;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery r0;
        org.apache.lucene.search.BooleanClause$Occur $r14, $r15, $r23, $r24;
        java.lang.StringBuilder $r26, $r27, $r30, $r31, $r33, $r34, $r46, $r47, $r51, $r52, $r54, $r55;
        java.lang.Object[] $r9;
        org.apache.lucene.search.spans.SpanNotQuery $r12;
        org.apache.lucene.search.spans.SpanQuery[] r6, $r8, r59;
        java.util.ArrayList $r7, $r38;
        java.lang.String $r29, $r32, $r35, $r42, $r50, $r53, $r56;
        org.apache.lucene.search.spans.SpanNearQuery $r10, $r11, $r17;
        org.apache.lucene.search.BooleanClause $r13, $r18, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.lucene.index.IndexReader r20;
        org.apache.lucene.search.spans.SpanTermQuery $r36, $r40;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12;
        org.apache.lucene.search.spans.SpanQuery $r16, $r44, r60;
        org.apache.lucene.search.BooleanClause[] $r5;
        java.lang.IllegalArgumentException $r25, $r45;
        org.apache.lucene.search.TermQuery r58;
        org.apache.lucene.search.BooleanQuery r4, $r39;
        java.lang.Class $r28, $r49;
        java.lang.Object $r43;

        r0 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery;

        r20 := @parameter0: org.apache.lucene.index.IndexReader;

        $r1 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: org.apache.lucene.search.Query contents>;

        $z0 = $r1 instanceof org.apache.lucene.search.TermQuery;

        if $z0 == 0 goto label01;

        $r57 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: org.apache.lucene.search.Query contents>;

        return $r57;

     label01:
        i10 = 0;

        $r2 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: org.apache.lucene.search.Query contents>;

        $z1 = $r2 instanceof org.apache.lucene.search.BooleanQuery;

        if $z1 != 0 goto label02;

        $r45 = new java.lang.IllegalArgumentException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown query type \"");

        $r48 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: org.apache.lucene.search.Query contents>;

        $r49 = virtualinvoke $r48.<java.lang.Object: java.lang.Class getClass()>();

        $r50 = virtualinvoke $r49.<java.lang.Class: java.lang.String getName()>();

        $r51 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" found in phrase query string \"");

        $r53 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String phrasedQueryStringContents>;

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r56);

        throw $r45;

     label02:
        $r3 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: org.apache.lucene.search.Query contents>;

        r4 = (org.apache.lucene.search.BooleanQuery) $r3;

        $r5 = virtualinvoke r4.<org.apache.lucene.search.BooleanQuery: org.apache.lucene.search.BooleanClause[] getClauses()>();

        $i0 = lengthof $r5;

        r6 = newarray (org.apache.lucene.search.spans.SpanQuery)[$i0];

        i11 = 0;

     label03:
        $i1 = lengthof $r5;

        if i11 >= $i1 goto label10;

        $r18 = $r5[i11];

        $r19 = virtualinvoke $r18.<org.apache.lucene.search.BooleanClause: org.apache.lucene.search.Query getQuery()>();

        $r21 = virtualinvoke $r19.<org.apache.lucene.search.Query: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)>(r20);

        $r22 = $r5[i11];

        $r23 = virtualinvoke $r22.<org.apache.lucene.search.BooleanClause: org.apache.lucene.search.BooleanClause$Occur getOccur()>();

        $r24 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur MUST_NOT>;

        $z3 = virtualinvoke $r23.<org.apache.lucene.search.BooleanClause$Occur: boolean equals(java.lang.Object)>($r24);

        if $z3 == 0 goto label04;

        i10 = i10 + 1;

     label04:
        $z4 = $r21 instanceof org.apache.lucene.search.BooleanQuery;

        if $z4 == 0 goto label07;

        $r38 = new java.util.ArrayList;

        specialinvoke $r38.<java.util.ArrayList: void <init>()>();

        $r39 = (org.apache.lucene.search.BooleanQuery) $r21;

        specialinvoke r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: void addComplexPhraseClause(java.util.List,org.apache.lucene.search.BooleanQuery)>($r38, $r39);

        $i9 = virtualinvoke $r38.<java.util.ArrayList: int size()>();

        if $i9 <= 0 goto label05;

        $r43 = virtualinvoke $r38.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r44 = (org.apache.lucene.search.spans.SpanQuery) $r43;

        r6[i11] = $r44;

        goto label06;

     label05:
        $r40 = new org.apache.lucene.search.spans.SpanTermQuery;

        $r41 = new org.apache.lucene.index.Term;

        $r42 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String field>;

        specialinvoke $r41.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>($r42, "Dummy clause because no terms found - must match nothing");

        specialinvoke $r40.<org.apache.lucene.search.spans.SpanTermQuery: void <init>(org.apache.lucene.index.Term)>($r41);

        r6[i11] = $r40;

     label06:
        goto label09;

     label07:
        $z5 = $r21 instanceof org.apache.lucene.search.TermQuery;

        if $z5 == 0 goto label08;

        r58 = (org.apache.lucene.search.TermQuery) $r21;

        $r36 = new org.apache.lucene.search.spans.SpanTermQuery;

        $r37 = virtualinvoke r58.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term getTerm()>();

        specialinvoke $r36.<org.apache.lucene.search.spans.SpanTermQuery: void <init>(org.apache.lucene.index.Term)>($r37);

        r6[i11] = $r36;

        goto label09;

     label08:
        $r25 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown query type \"");

        $r28 = virtualinvoke $r21.<java.lang.Object: java.lang.Class getClass()>();

        $r29 = virtualinvoke $r28.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" found in phrase query string \"");

        $r32 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String phrasedQueryStringContents>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r35);

        throw $r25;

     label09:
        i11 = i11 + 1;

        goto label03;

     label10:
        if i10 != 0 goto label11;

        $r17 = new org.apache.lucene.search.spans.SpanNearQuery;

        $i8 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: int slopFactor>;

        specialinvoke $r17.<org.apache.lucene.search.spans.SpanNearQuery: void <init>(org.apache.lucene.search.spans.SpanQuery[],int,boolean)>(r6, $i8, 1);

        return $r17;

     label11:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        i12 = 0;

     label12:
        $i2 = lengthof r6;

        if i12 >= $i2 goto label14;

        $r13 = $r5[i12];

        $r14 = virtualinvoke $r13.<org.apache.lucene.search.BooleanClause: org.apache.lucene.search.BooleanClause$Occur getOccur()>();

        $r15 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur MUST_NOT>;

        $z2 = virtualinvoke $r14.<org.apache.lucene.search.BooleanClause$Occur: boolean equals(java.lang.Object)>($r15);

        if $z2 != 0 goto label13;

        $r16 = r6[i12];

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

     label13:
        i12 = i12 + 1;

        goto label12;

     label14:
        $i3 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        $r8 = newarray (org.apache.lucene.search.spans.SpanQuery)[$i3];

        $r9 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        r59 = (org.apache.lucene.search.spans.SpanQuery[]) $r9;

        $i4 = lengthof r59;

        if $i4 != 1 goto label15;

        r60 = r59[0];

        goto label16;

     label15:
        $r10 = new org.apache.lucene.search.spans.SpanNearQuery;

        $i5 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: int slopFactor>;

        $i6 = $i5 + i10;

        specialinvoke $r10.<org.apache.lucene.search.spans.SpanNearQuery: void <init>(org.apache.lucene.search.spans.SpanQuery[],int,boolean)>(r59, $i6, 1);

        r60 = $r10;

     label16:
        $r11 = new org.apache.lucene.search.spans.SpanNearQuery;

        $i7 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: int slopFactor>;

        specialinvoke $r11.<org.apache.lucene.search.spans.SpanNearQuery: void <init>(org.apache.lucene.search.spans.SpanQuery[],int,boolean)>(r6, $i7, 1);

        $r12 = new org.apache.lucene.search.spans.SpanNotQuery;

        specialinvoke $r12.<org.apache.lucene.search.spans.SpanNotQuery: void <init>(org.apache.lucene.search.spans.SpanQuery,org.apache.lucene.search.spans.SpanQuery)>(r60, $r11);

        return $r12;
    }

    private void addComplexPhraseClause(java.util.List, org.apache.lucene.search.BooleanQuery)
    {
        org.apache.lucene.search.Query $r15;
        org.apache.lucene.index.Term $r28;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery r26;
        org.apache.lucene.search.BooleanClause$Occur $r17, $r18;
        boolean $z0, $z1;
        java.util.List r13;
        float $f0;
        java.lang.StringBuilder $r20, $r21, $r24;
        org.apache.lucene.search.spans.SpanTermQuery $r27;
        java.lang.Object[] $r6, $r10;
        org.apache.lucene.search.spans.SpanNotQuery $r12;
        org.apache.lucene.search.spans.SpanQuery[] $r5, $r7, $r9, $r11;
        java.util.ArrayList $r0, $r1, r29;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r23, $r25;
        org.apache.lucene.search.BooleanClause[] $r3;
        java.lang.IllegalArgumentException $r19;
        org.apache.lucene.search.BooleanClause $r14, $r16;
        org.apache.lucene.search.TermQuery r30;
        org.apache.lucene.search.BooleanQuery r2, r31;
        org.apache.lucene.search.spans.SpanOrQuery $r4, $r8;
        java.lang.Class $r22;

        r26 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery;

        r13 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.lucene.search.BooleanQuery;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r2.<org.apache.lucene.search.BooleanQuery: org.apache.lucene.search.BooleanClause[] getClauses()>();

        i5 = 0;

     label1:
        $i0 = lengthof $r3;

        if i5 >= $i0 goto label6;

        $r14 = $r3[i5];

        $r15 = virtualinvoke $r14.<org.apache.lucene.search.BooleanClause: org.apache.lucene.search.Query getQuery()>();

        r29 = $r0;

        $r16 = $r3[i5];

        $r17 = virtualinvoke $r16.<org.apache.lucene.search.BooleanClause: org.apache.lucene.search.BooleanClause$Occur getOccur()>();

        $r18 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur MUST_NOT>;

        if $r17 != $r18 goto label2;

        r29 = $r1;

     label2:
        $z0 = $r15 instanceof org.apache.lucene.search.TermQuery;

        if $z0 == 0 goto label3;

        r30 = (org.apache.lucene.search.TermQuery) $r15;

        $r27 = new org.apache.lucene.search.spans.SpanTermQuery;

        $r28 = virtualinvoke r30.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term getTerm()>();

        specialinvoke $r27.<org.apache.lucene.search.spans.SpanTermQuery: void <init>(org.apache.lucene.index.Term)>($r28);

        $f0 = virtualinvoke r30.<org.apache.lucene.search.TermQuery: float getBoost()>();

        virtualinvoke $r27.<org.apache.lucene.search.spans.SpanTermQuery: void setBoost(float)>($f0);

        virtualinvoke r29.<java.util.ArrayList: boolean add(java.lang.Object)>($r27);

        goto label5;

     label3:
        $z1 = $r15 instanceof org.apache.lucene.search.BooleanQuery;

        if $z1 == 0 goto label4;

        r31 = (org.apache.lucene.search.BooleanQuery) $r15;

        specialinvoke r26.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: void addComplexPhraseClause(java.util.List,org.apache.lucene.search.BooleanQuery)>(r29, r31);

        goto label5;

     label4:
        $r19 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown query type:");

        $r22 = virtualinvoke $r15.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke $r22.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r19;

     label5:
        i5 = i5 + 1;

        goto label1;

     label6:
        $i1 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        if $i1 != 0 goto label7;

        return;

     label7:
        $r4 = new org.apache.lucene.search.spans.SpanOrQuery;

        $i2 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        $r5 = newarray (org.apache.lucene.search.spans.SpanQuery)[$i2];

        $r6 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (org.apache.lucene.search.spans.SpanQuery[]) $r6;

        specialinvoke $r4.<org.apache.lucene.search.spans.SpanOrQuery: void <init>(org.apache.lucene.search.spans.SpanQuery[])>($r7);

        $i3 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i3 != 0 goto label8;

        interfaceinvoke r13.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label9;

     label8:
        $r8 = new org.apache.lucene.search.spans.SpanOrQuery;

        $i4 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $r9 = newarray (org.apache.lucene.search.spans.SpanQuery)[$i4];

        $r10 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (org.apache.lucene.search.spans.SpanQuery[]) $r10;

        specialinvoke $r8.<org.apache.lucene.search.spans.SpanOrQuery: void <init>(org.apache.lucene.search.spans.SpanQuery[])>($r11);

        $r12 = new org.apache.lucene.search.spans.SpanNotQuery;

        specialinvoke $r12.<org.apache.lucene.search.spans.SpanNotQuery: void <init>(org.apache.lucene.search.spans.SpanQuery,org.apache.lucene.search.spans.SpanQuery)>($r4, $r8);

        interfaceinvoke r13.<java.util.List: boolean add(java.lang.Object)>($r12);

     label9:
        return;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.String $r3, $r6, r7;

        r2 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery;

        r7 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r3 = r2.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String phrasedQueryStringContents>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public int hashCode()
    {
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery;

        $i0 = specialinvoke r0.<org.apache.lucene.search.Query: int hashCode()>();

        $i1 = 31 * $i0;

        $r1 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String field>;

        if $r1 != null goto label1;

        $i8 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String field>;

        $i8 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

     label2:
        $i7 = $i1 + $i8;

        $i2 = 31 * $i7;

        $r3 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String phrasedQueryStringContents>;

        if $r3 != null goto label3;

        $i9 = 0;

        goto label4;

     label3:
        $r4 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String phrasedQueryStringContents>;

        $i9 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

     label4:
        $i5 = $i2 + $i9;

        $i4 = 31 * $i5;

        $i3 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: int slopFactor>;

        $i6 = $i4 + $i3;

        return $i6;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery r0, r4;
        int $i0, $i1;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;

        r0 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        $z0 = specialinvoke r0.<org.apache.lucene.search.Query: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        r4 = (org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery) r1;

        $r5 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String field>;

        if $r5 != null goto label5;

        $r12 = r4.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String field>;

        if $r12 == null goto label6;

        return 0;

     label5:
        $r7 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String field>;

        $r6 = r4.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String field>;

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label6;

        return 0;

     label6:
        $r8 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String phrasedQueryStringContents>;

        if $r8 != null goto label7;

        $r11 = r4.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String phrasedQueryStringContents>;

        if $r11 == null goto label8;

        return 0;

     label7:
        $r10 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String phrasedQueryStringContents>;

        $r9 = r4.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String phrasedQueryStringContents>;

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 != 0 goto label8;

        return 0;

     label8:
        $i1 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: int slopFactor>;

        $i0 = r4.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: int slopFactor>;

        if $i1 == $i0 goto label9;

        return 0;

     label9:
        return 1;
    }
}
