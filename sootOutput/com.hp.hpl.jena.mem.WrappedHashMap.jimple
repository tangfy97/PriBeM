public class com.hp.hpl.jena.mem.WrappedHashMap extends java.lang.Object implements com.hp.hpl.jena.mem.BunchMap
{
    protected final java.util.Map map;

    public void <init>()
    {
        com.hp.hpl.jena.mem.WrappedHashMap r0;
        java.util.Map $r1;

        r0 := @this: com.hp.hpl.jena.mem.WrappedHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Map createHashedMap()>();

        r0.<com.hp.hpl.jena.mem.WrappedHashMap: java.util.Map map> = $r1;

        return;
    }

    public void clear()
    {
        com.hp.hpl.jena.mem.WrappedHashMap r0;
        java.util.Map $r1;

        r0 := @this: com.hp.hpl.jena.mem.WrappedHashMap;

        $r1 = r0.<com.hp.hpl.jena.mem.WrappedHashMap: java.util.Map map>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public long size()
    {
        com.hp.hpl.jena.mem.WrappedHashMap r0;
        java.util.Map $r1;
        int $i0;
        long $l1;

        r0 := @this: com.hp.hpl.jena.mem.WrappedHashMap;

        $r1 = r0.<com.hp.hpl.jena.mem.WrappedHashMap: java.util.Map map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $l1 = (long) $i0;

        return $l1;
    }

    public com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)
    {
        com.hp.hpl.jena.mem.WrappedHashMap r0;
        java.util.Map $r2;
        com.hp.hpl.jena.mem.TripleBunch $r4;
        java.lang.Object r1, $r3;

        r0 := @this: com.hp.hpl.jena.mem.WrappedHashMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.hp.hpl.jena.mem.WrappedHashMap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.hp.hpl.jena.mem.TripleBunch) $r3;

        return $r4;
    }

    public void put(java.lang.Object, com.hp.hpl.jena.mem.TripleBunch)
    {
        com.hp.hpl.jena.mem.WrappedHashMap r0;
        com.hp.hpl.jena.mem.TripleBunch r2;
        java.util.Map $r3;
        java.lang.Object r1;

        r0 := @this: com.hp.hpl.jena.mem.WrappedHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.hp.hpl.jena.mem.TripleBunch;

        $r3 = r0.<com.hp.hpl.jena.mem.WrappedHashMap: java.util.Map map>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void remove(java.lang.Object)
    {
        com.hp.hpl.jena.mem.WrappedHashMap r0;
        java.lang.Object r1;
        java.util.Map $r2;

        r0 := @this: com.hp.hpl.jena.mem.WrappedHashMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.hp.hpl.jena.mem.WrappedHashMap: java.util.Map map>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator keyIterator()
    {
        com.hp.hpl.jena.mem.WrappedHashMap r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: com.hp.hpl.jena.mem.WrappedHashMap;

        $r1 = r0.<com.hp.hpl.jena.mem.WrappedHashMap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r3);

        return $r4;
    }
}
