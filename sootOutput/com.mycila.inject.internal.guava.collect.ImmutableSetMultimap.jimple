public class com.mycila.inject.internal.guava.collect.ImmutableSetMultimap extends com.mycila.inject.internal.guava.collect.ImmutableMultimap implements com.mycila.inject.internal.guava.collect.SetMultimap
{
    private final transient com.mycila.inject.internal.guava.collect.ImmutableSortedSet emptySet;
    private transient com.mycila.inject.internal.guava.collect.ImmutableSet entries;
    private static final long serialVersionUID;

    public static com.mycila.inject.internal.guava.collect.ImmutableSetMultimap of()
    {
        com.mycila.inject.internal.guava.collect.EmptyImmutableSetMultimap $r0;

        $r0 = <com.mycila.inject.internal.guava.collect.EmptyImmutableSetMultimap: com.mycila.inject.internal.guava.collect.EmptyImmutableSetMultimap INSTANCE>;

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap $r3;
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder $r0;
        java.lang.Object r1, r2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder builder()>();

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r3 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap build()>();

        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap $r5;
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder $r0;
        java.lang.Object r1, r2, r3, r4;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder builder()>();

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r1, r2);

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r3, r4);

        $r5 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap build()>();

        return $r5;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap $r7;
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder $r0;
        java.lang.Object r1, r2, r3, r4, r5, r6;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder builder()>();

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r1, r2);

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r3, r4);

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r5, r6);

        $r7 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap build()>();

        return $r7;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap $r9;
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder $r0;
        java.lang.Object r1, r2, r3, r4, r5, r6, r7, r8;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder builder()>();

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r1, r2);

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r3, r4);

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r5, r6);

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r7, r8);

        $r9 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap build()>();

        return $r9;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap $r11;
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder $r0;
        java.lang.Object r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        r9 := @parameter8: java.lang.Object;

        r10 := @parameter9: java.lang.Object;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder builder()>();

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r1, r2);

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r3, r4);

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r5, r6);

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r7, r8);

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object)>(r9, r10);

        $r11 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap build()>();

        return $r11;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder builder()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder $r0;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap$Builder: void <init>()>();

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSetMultimap copyOf(com.mycila.inject.internal.guava.collect.Multimap)
    {
        com.mycila.inject.internal.guava.collect.Multimap r0;
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap $r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.Multimap;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap copyOf(com.mycila.inject.internal.guava.collect.Multimap,java.util.Comparator)>(r0, null);

        return $r1;
    }

    private static com.mycila.inject.internal.guava.collect.ImmutableSetMultimap copyOf(com.mycila.inject.internal.guava.collect.Multimap, java.util.Comparator)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r6;
        com.mycila.inject.internal.guava.collect.ImmutableMap$Builder $r1;
        java.util.Map $r2;
        int $i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Map$Entry r9;
        java.util.Iterator $r4;
        java.util.Collection r12;
        java.util.Set $r3;
        com.mycila.inject.internal.guava.collect.Multimap r0;
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap $r5, $r13, r14;
        java.lang.Object $r8, $r10, $r11;
        java.util.Comparator r7;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r15;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.Multimap;

        r7 := @parameter1: java.util.Comparator;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = interfaceinvoke r0.<com.mycila.inject.internal.guava.collect.Multimap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        if r7 != null goto label1;

        $r13 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap of()>();

        return $r13;

     label1:
        $z1 = r0 instanceof com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        if $z1 == 0 goto label2;

        r14 = (com.mycila.inject.internal.guava.collect.ImmutableSetMultimap) r0;

        $z3 = virtualinvoke r14.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: boolean isPartialView()>();

        if $z3 != 0 goto label2;

        return r14;

     label2:
        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableMap$Builder builder()>();

        i1 = 0;

        $r2 = interfaceinvoke r0.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Map asMap()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z4 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        r12 = (java.util.Collection) $r11;

        if r7 != null goto label4;

        $r15 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet copyOf(java.util.Collection)>(r12);

        goto label5;

     label4:
        $r15 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection)>(r7, r12);

     label5:
        $z2 = virtualinvoke $r15.<com.mycila.inject.internal.guava.collect.ImmutableSet: boolean isEmpty()>();

        if $z2 != 0 goto label6;

        virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMap$Builder: com.mycila.inject.internal.guava.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r10, $r15);

        $i0 = virtualinvoke $r15.<com.mycila.inject.internal.guava.collect.ImmutableSet: int size()>();

        i1 = i1 + $i0;

     label6:
        goto label3;

     label7:
        $r5 = new com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        $r6 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMap$Builder: com.mycila.inject.internal.guava.collect.ImmutableMap build()>();

        specialinvoke $r5.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: void <init>(com.mycila.inject.internal.guava.collect.ImmutableMap,int,java.util.Comparator)>($r6, i1, r7);

        return $r5;
    }

    void <init>(com.mycila.inject.internal.guava.collect.ImmutableMap, int, java.util.Comparator)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        com.mycila.inject.internal.guava.collect.ImmutableMap r1;
        int i0;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r3;
        java.util.Comparator r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ImmutableMap;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Comparator;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: void <init>(com.mycila.inject.internal.guava.collect.ImmutableMap,int)>(r1, i0);

        if r2 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet emptySet(java.util.Comparator)>(r2);

     label2:
        r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSortedSet emptySet> = $r3;

        return;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSet get(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r2;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r5, $r7;
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        java.lang.Object r1, $r3;
        com.mycila.inject.internal.guava.collect.ImmutableSet r4, $r6;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableMap map>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.mycila.inject.internal.guava.collect.ImmutableSet) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        $r5 = r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSortedSet emptySet>;

        if $r5 == null goto label2;

        $r7 = r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSortedSet emptySet>;

        return $r7;

     label2:
        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet of()>();

        return $r6;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSet removeAll(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r1;
        java.lang.Object r2;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSet replaceValues(java.lang.Object, java.lang.Iterable)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r1;
        java.lang.Object r2;
        java.lang.Iterable r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Iterable;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSet entries()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        com.mycila.inject.internal.guava.collect.ImmutableCollection $r2;
        com.mycila.inject.internal.guava.collect.ImmutableSet r1, $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet entries>;

        if r1 != null goto label1;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableCollection entries()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet copyOf(java.util.Collection)>($r2);

        r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet entries> = $r3;

        goto label2;

     label1:
        $r3 = r1;

     label2:
        return $r3;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        staticinvoke <com.mycila.inject.internal.guava.collect.Serialization: void writeMultimap(com.mycila.inject.internal.guava.collect.Multimap,java.io.ObjectOutputStream)>(r1, r0);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r2;
        com.mycila.inject.internal.guava.collect.ImmutableMap$Builder $r1;
        java.io.ObjectInputStream r0;
        java.io.InvalidObjectException $r9, $r15, $r20, $r26, $r29;
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r3;
        java.lang.StringBuilder $r10, $r11, $r12, $r16, $r17, $r18, $r21, $r22, $r23;
        java.lang.Throwable $r28;
        java.lang.Object[] r7;
        com.mycila.inject.internal.guava.collect.Serialization$FieldSetter $r4, $r5;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.String $r13, $r19, $r24, $r27;
        java.lang.IllegalArgumentException $r25;
        java.lang.Object $r6, $r14;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r8;

        r3 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i0 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        if $i0 >= 0 goto label01;

        $r20 = new java.io.InvalidObjectException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid key count ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label01:
        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableMap$Builder builder()>();

        i4 = 0;

        i5 = 0;

     label02:
        if i5 >= $i0 goto label07;

        $r6 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $i1 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        if $i1 > 0 goto label03;

        $r15 = new java.io.InvalidObjectException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value count ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label03:
        r7 = newarray (java.lang.Object)[$i1];

        i6 = 0;

     label04:
        if i6 >= $i1 goto label05;

        $r14 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r7[i6] = $r14;

        i6 = i6 + 1;

        goto label04;

     label05:
        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet copyOf(java.lang.Object[])>(r7);

        $i2 = virtualinvoke $r8.<com.mycila.inject.internal.guava.collect.ImmutableSet: int size()>();

        $i3 = lengthof r7;

        if $i2 == $i3 goto label06;

        $r9 = new java.io.InvalidObjectException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate key-value pairs exist for key ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label06:
        virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMap$Builder: com.mycila.inject.internal.guava.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r6, $r8);

        i4 = i4 + $i1;

        i5 = i5 + 1;

        goto label02;

     label07:
        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMap$Builder: com.mycila.inject.internal.guava.collect.ImmutableMap build()>();

     label08:
        goto label10;

     label09:
        $r25 := @caughtexception;

        $r26 = new java.io.InvalidObjectException;

        $r27 = virtualinvoke $r25.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        specialinvoke $r26.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r27);

        $r28 = virtualinvoke $r26.<java.io.InvalidObjectException: java.lang.Throwable initCause(java.lang.Throwable)>($r25);

        $r29 = (java.io.InvalidObjectException) $r28;

        throw $r29;

     label10:
        $r4 = <com.mycila.inject.internal.guava.collect.ImmutableMultimap$FieldSettersHolder: com.mycila.inject.internal.guava.collect.Serialization$FieldSetter MAP_FIELD_SETTER>;

        virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.Serialization$FieldSetter: void set(java.lang.Object,java.lang.Object)>(r3, $r2);

        $r5 = <com.mycila.inject.internal.guava.collect.ImmutableMultimap$FieldSettersHolder: com.mycila.inject.internal.guava.collect.Serialization$FieldSetter SIZE_FIELD_SETTER>;

        virtualinvoke $r5.<com.mycila.inject.internal.guava.collect.Serialization$FieldSetter: void set(java.lang.Object,int)>(r3, i4);

        return;

        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableCollection entries()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet entries()>();

        return $r1;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableCollection get(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet get(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableCollection replaceValues(java.lang.Object, java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r3;
        java.lang.Iterable r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Iterable;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet replaceValues(java.lang.Object,java.lang.Iterable)>(r1, r2);

        return $r3;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableCollection removeAll(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet removeAll(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.Collection entries()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet entries()>();

        return $r1;
    }

    public volatile java.util.Collection get(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet get(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.Collection removeAll(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet removeAll(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r3;
        java.lang.Iterable r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Iterable;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet replaceValues(java.lang.Object,java.lang.Iterable)>(r1, r2);

        return $r3;
    }

    public volatile java.util.Set entries()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet entries()>();

        return $r1;
    }

    public volatile java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r3;
        java.lang.Iterable r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Iterable;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet replaceValues(java.lang.Object,java.lang.Iterable)>(r1, r2);

        return $r3;
    }

    public volatile java.util.Set removeAll(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet removeAll(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.Set get(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap r0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet get(java.lang.Object)>(r1);

        return $r2;
    }

    static com.mycila.inject.internal.guava.collect.ImmutableSetMultimap access$000(com.mycila.inject.internal.guava.collect.Multimap, java.util.Comparator)
    {
        com.mycila.inject.internal.guava.collect.Multimap r0;
        com.mycila.inject.internal.guava.collect.ImmutableSetMultimap $r2;
        java.util.Comparator r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.Multimap;

        r1 := @parameter1: java.util.Comparator;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: com.mycila.inject.internal.guava.collect.ImmutableSetMultimap copyOf(com.mycila.inject.internal.guava.collect.Multimap,java.util.Comparator)>(r0, r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.ImmutableSetMultimap: long serialVersionUID> = 0L;

        return;
    }
}
