public class groovy.swing.factory.BevelBorderFactory extends groovy.swing.factory.SwingBorderFactory
{
    private final int type;
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119697161;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$java$lang$RuntimeException;
    static java.lang.Class class$javax$swing$BorderFactory;
    static java.lang.Class class$java$awt$Color;
    static java.lang.Class class$java$lang$Integer;

    public void <init>(int)
    {
        groovy.swing.factory.BevelBorderFactory r0;
        int i0, $i1;
        java.lang.Class $r1, $r2, $r4, $r5;
        java.lang.Object $r3;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        i0 := @parameter0: int;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void <init>()>();

        $r1 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$0>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.BevelBorderFactory");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$0> = $r4;

        goto label2;

     label1:
        $r4 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$0>;

     label2:
        $r2 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r5 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r5;

        goto label4;

     label3:
        $r5 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>(i0);

        $i1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r3);

        r0.<groovy.swing.factory.BevelBorderFactory: int type> = $i1;

        return;
    }

    public java.lang.Object newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map)
    {
        java.awt.Color $r51, $r52, $r53, $r54, $r70, $r71;
        java.util.Map r3;
        java.lang.Throwable $r27;
        java.lang.Object[] $r4, $r8, $r10, $r13, $r21, $r23, $r28, $r32, $r36, $r40, $r45, $r55, $r59, $r64;
        groovy.swing.factory.BevelBorderFactory r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        groovy.util.FactoryBuilderSupport r6;
        org.codehaus.groovy.runtime.GStringImpl $r22;
        java.lang.String[] $r25;
        int $i0, $i1, $i2;
        java.lang.Boolean $r77, $r78, $r85, $r86, $r87, $r88;
        java.lang.Class $r0, r1, $r2, $r12, $r17, $r20, $r30, $r34, $r38, $r42, $r44, $r48, $r57, $r61, $r63, $r67, $r73, $r74, $r75, $r76, $r79, $r80, $r81, $r82, $r83, $r84, $r89, $r90, $r91, $r92, $r93;
        java.lang.Object $r5, $r7, $r9, $r11, $r15, $r16, $r18, $r19, r24, $r26, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r46, $r47, $r49, $r50, $r56, $r58, $r60, $r62, $r65, $r66, $r68, $r69, r72;

        r14 := @this: groovy.swing.factory.BevelBorderFactory;

        r6 := @parameter0: groovy.util.FactoryBuilderSupport;

        r24 := @parameter1: java.lang.Object;

        r72 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.util.Map;

        $r0 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r73 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.BevelBorderFactory");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$0> = $r73;

        goto label02;

     label01:
        $r73 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$0>;

     label02:
        r1 = $r73;

        $r2 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r74 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r74;

        goto label04;

     label03:
        $r74 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "parent";

        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r4);

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r6, "context");

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r5, r1, $r7, "applyBorderToParent");

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "highlight";

        $r9 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "containsKey", $r8);

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r9);

        if $z0 == 0 goto label20;

        $r55 = newarray (java.lang.Object)[1];

        $r55[0] = "highlight";

        $r56 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r55);

        $r57 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color>;

        if $r57 != null goto label05;

        $r75 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("java.awt.Color");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color> = $r75;

        goto label06;

     label05:
        $r75 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color>;

     label06:
        $r58 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r56, $r75);

        $r71 = (java.awt.Color) $r58;

        $r59 = newarray (java.lang.Object)[1];

        $r59[0] = "shadow";

        $r60 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r59);

        $r61 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color>;

        if $r61 != null goto label07;

        $r76 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("java.awt.Color");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color> = $r76;

        goto label08;

     label07:
        $r76 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color>;

     label08:
        $r62 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r60, $r76);

        $r70 = (java.awt.Color) $r62;

        $z8 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r71);

        if $z8 == 0 goto label09;

        $z10 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r70);

        if $z10 == 0 goto label09;

        $r77 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label10;

     label09:
        $r77 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label10:
        $z11 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r77);

        if $z11 == 0 goto label13;

        $z9 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r3);

        if $z9 != 0 goto label11;

        $z12 = 1;

        goto label12;

     label11:
        $z12 = 0;

     label12:
        if $z12 == 0 goto label13;

        $r78 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label14;

     label13:
        $r78 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label14:
        $z13 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r78);

        if $z13 == 0 goto label19;

        $r63 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$javax$swing$BorderFactory>;

        if $r63 != null goto label15;

        $r79 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.BorderFactory");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$javax$swing$BorderFactory> = $r79;

        goto label16;

     label15:
        $r79 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$javax$swing$BorderFactory>;

     label16:
        $r64 = newarray (java.lang.Object)[3];

        $i2 = r14.<groovy.swing.factory.BevelBorderFactory: int type>;

        $r65 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i2);

        $r64[0] = $r65;

        $r64[1] = $r71;

        $r64[2] = $r70;

        $r66 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r79, "createBevelBorder", $r64);

        $r67 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$Object>;

        if $r67 != null goto label17;

        $r80 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$Object> = $r80;

        goto label18;

     label17:
        $r80 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$Object>;

     label18:
        $r68 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r66, $r80);

        $r69 = (java.lang.Object) $r68;

        return $r69;

     label19:
        goto label20;

     label20:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = "highlightOuter";

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "containsKey", $r10);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r11);

        if $z1 == 0 goto label44;

        $r28 = newarray (java.lang.Object)[1];

        $r28[0] = "highlightOuter";

        $r29 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r28);

        $r30 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color>;

        if $r30 != null goto label21;

        $r81 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("java.awt.Color");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color> = $r81;

        goto label22;

     label21:
        $r81 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color>;

     label22:
        $r31 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r29, $r81);

        $r54 = (java.awt.Color) $r31;

        $r32 = newarray (java.lang.Object)[1];

        $r32[0] = "highlightInner";

        $r33 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r32);

        $r34 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color>;

        if $r34 != null goto label23;

        $r82 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("java.awt.Color");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color> = $r82;

        goto label24;

     label23:
        $r82 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color>;

     label24:
        $r35 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r33, $r82);

        $r53 = (java.awt.Color) $r35;

        $r36 = newarray (java.lang.Object)[1];

        $r36[0] = "shadowOuter";

        $r37 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r36);

        $r38 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color>;

        if $r38 != null goto label25;

        $r83 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("java.awt.Color");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color> = $r83;

        goto label26;

     label25:
        $r83 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color>;

     label26:
        $r39 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r37, $r83);

        $r52 = (java.awt.Color) $r39;

        $r40 = newarray (java.lang.Object)[1];

        $r40[0] = "shadowInner";

        $r41 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r40);

        $r42 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color>;

        if $r42 != null goto label27;

        $r84 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("java.awt.Color");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color> = $r84;

        goto label28;

     label27:
        $r84 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$awt$Color>;

     label28:
        $r43 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r41, $r84);

        $r51 = (java.awt.Color) $r43;

        $z3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r54);

        if $z3 == 0 goto label29;

        $z7 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r53);

        if $z7 == 0 goto label29;

        $r85 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label30;

     label29:
        $r85 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label30:
        $z14 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r85);

        if $z14 == 0 goto label31;

        $z6 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r52);

        if $z6 == 0 goto label31;

        $r86 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label32;

     label31:
        $r86 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label32:
        $z15 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r86);

        if $z15 == 0 goto label33;

        $z5 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r51);

        if $z5 == 0 goto label33;

        $r87 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label34;

     label33:
        $r87 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label34:
        $z16 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r87);

        if $z16 == 0 goto label37;

        $z4 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r3);

        if $z4 != 0 goto label35;

        $z17 = 1;

        goto label36;

     label35:
        $z17 = 0;

     label36:
        if $z17 == 0 goto label37;

        $r88 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label38;

     label37:
        $r88 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label38:
        $z18 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r88);

        if $z18 == 0 goto label43;

        $r44 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$javax$swing$BorderFactory>;

        if $r44 != null goto label39;

        $r89 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.BorderFactory");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$javax$swing$BorderFactory> = $r89;

        goto label40;

     label39:
        $r89 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$javax$swing$BorderFactory>;

     label40:
        $r45 = newarray (java.lang.Object)[5];

        $i1 = r14.<groovy.swing.factory.BevelBorderFactory: int type>;

        $r46 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i1);

        $r45[0] = $r46;

        $r45[1] = $r54;

        $r45[2] = $r53;

        $r45[3] = $r52;

        $r45[4] = $r51;

        $r47 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r89, "createBevelBorder", $r45);

        $r48 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$Object>;

        if $r48 != null goto label41;

        $r90 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$Object> = $r90;

        goto label42;

     label41:
        $r90 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$Object>;

     label42:
        $r49 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r47, $r90);

        $r50 = (java.lang.Object) $r49;

        return $r50;

     label43:
        goto label44;

     label44:
        $z2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r3);

        if $z2 == 0 goto label47;

        $r20 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r20 != null goto label45;

        $r91 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$RuntimeException> = $r91;

        goto label46;

     label45:
        $r91 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

     label46:
        $r21 = newarray (java.lang.Object)[1];

        $r22 = new org.codehaus.groovy.runtime.GStringImpl;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = r24;

        $r25 = newarray (java.lang.String)[2];

        $r25[0] = "";

        $r25[1] = " only accepts no attributes, or highlight: and shadow: attributes, or highlightOuter: and highlightInner: and shadowOuter: and shadowInner: attributes";

        specialinvoke $r22.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r23, $r25);

        $r21[0] = $r22;

        $r26 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r91, $r21);

        $r27 = (java.lang.Throwable) $r26;

        throw $r27;

     label47:
        $r12 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$javax$swing$BorderFactory>;

        if $r12 != null goto label48;

        $r92 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.BorderFactory");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$javax$swing$BorderFactory> = $r92;

        goto label49;

     label48:
        $r92 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$javax$swing$BorderFactory>;

     label49:
        $r13 = newarray (java.lang.Object)[1];

        $i0 = r14.<groovy.swing.factory.BevelBorderFactory: int type>;

        $r15 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i0);

        $r13[0] = $r15;

        $r16 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r92, "createBevelBorder", $r13);

        $r17 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$Object>;

        if $r17 != null goto label50;

        $r93 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$Object> = $r93;

        goto label51;

     label50:
        $r93 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$Object>;

     label51:
        $r18 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r16, $r93);

        $r19 = (java.lang.Object) $r18;

        return $r19;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.BevelBorderFactory");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119697161L);

        $r3 = (java.lang.Long) $r2;

        <groovy.swing.factory.BevelBorderFactory: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <groovy.swing.factory.BevelBorderFactory: java.lang.Long __timeStamp__239_neverHappen1239119697161> = $r5;

        return;
    }

    public final int getType()
    {
        java.lang.Integer $r6;
        groovy.swing.factory.BevelBorderFactory r2;
        int $i0, $i1;
        java.lang.Class $r0, $r1, $r4, $r7, $r8, $r9;
        java.lang.Object $r3, $r5;

        r2 := @this: groovy.swing.factory.BevelBorderFactory;

        $r0 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.BevelBorderFactory");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $i0 = r2.<groovy.swing.factory.BevelBorderFactory: int type>;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i0);

        $r4 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$Integer>;

        if $r4 != null goto label5;

        $r9 = staticinvoke <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$Integer> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.swing.factory.BevelBorderFactory: java.lang.Class class$java$lang$Integer>;

     label6:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r3, $r9);

        $r6 = (java.lang.Integer) $r5;

        $i1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r6);

        return $i1;
    }

    java.lang.Object super$3$getProperty(java.lang.String)
    {
        groovy.swing.factory.BevelBorderFactory r0;
        java.lang.Object $r2;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r2;
    }

    java.lang.String super$1$toString()
    {
        groovy.swing.factory.BevelBorderFactory r0;
        java.lang.String $r1;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    boolean super$3$isLeaf()
    {
        groovy.swing.factory.BevelBorderFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        $z0 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: boolean isLeaf()>();

        return $z0;
    }

    void super$2$setChild(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.BevelBorderFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void setChild(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$3$setProperty(java.lang.String, java.lang.Object)
    {
        groovy.swing.factory.BevelBorderFactory r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setProperty(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    void super$1$notify()
    {
        groovy.swing.factory.BevelBorderFactory r0;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        groovy.swing.factory.BevelBorderFactory r0;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    void super$3$setParent(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.BevelBorderFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setParent(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    java.lang.Object super$1$clone()
    {
        groovy.swing.factory.BevelBorderFactory r0;
        java.lang.Object $r1;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    void super$1$wait()
    {
        groovy.swing.factory.BevelBorderFactory r0;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    groovy.lang.MetaClass super$3$getMetaClass()
    {
        groovy.lang.MetaClass $r1;
        groovy.swing.factory.BevelBorderFactory r0;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        $r1 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: groovy.lang.MetaClass getMetaClass()>();

        return $r1;
    }

    void super$1$wait(long, int)
    {
        int i1;
        groovy.swing.factory.BevelBorderFactory r0;
        long l0;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$3$setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r1;
        groovy.swing.factory.BevelBorderFactory r0;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        r1 := @parameter0: groovy.lang.MetaClass;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setMetaClass(groovy.lang.MetaClass)>(r1);

        return;
    }

    java.lang.Class super$1$getClass()
    {
        groovy.swing.factory.BevelBorderFactory r0;
        java.lang.Class $r1;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    void super$2$onNodeCompleted(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.BevelBorderFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void onNodeCompleted(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$1$finalize()
    {
        groovy.swing.factory.BevelBorderFactory r0;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    void super$1$wait(long)
    {
        groovy.swing.factory.BevelBorderFactory r0;
        long l0;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    boolean super$3$onHandleNodeAttributes(groovy.util.FactoryBuilderSupport, java.lang.Object, java.util.Map)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.BevelBorderFactory r0;
        java.util.Map r3;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Map;

        $z0 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: boolean onHandleNodeAttributes(groovy.util.FactoryBuilderSupport,java.lang.Object,java.util.Map)>(r1, r2, r3);

        return $z0;
    }

    boolean super$1$equals(java.lang.Object)
    {
        groovy.swing.factory.BevelBorderFactory r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    java.lang.Object super$3$invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.swing.factory.BevelBorderFactory r0;
        java.lang.Object r2, $r3;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>(r1, r2);

        return $r3;
    }

    int super$1$hashCode()
    {
        int $i0;
        groovy.swing.factory.BevelBorderFactory r0;

        r0 := @this: groovy.swing.factory.BevelBorderFactory;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
