final class org.jdom.ContentList extends java.util.AbstractList implements java.io.Serializable
{
    private static final java.lang.String CVS_ID;
    private static final int INITIAL_ARRAY_SIZE;
    private static final int CREATE;
    private static final int HASPREV;
    private static final int HASNEXT;
    private static final int PREV;
    private static final int NEXT;
    private static final int ADD;
    private static final int REMOVE;
    private org.jdom.Content[] elementData;
    private int size;
    private org.jdom.Parent parent;

    void <init>(org.jdom.Parent)
    {
        org.jdom.ContentList r0;
        org.jdom.Parent r1;

        r0 := @this: org.jdom.ContentList;

        r1 := @parameter0: org.jdom.Parent;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        r0.<org.jdom.ContentList: org.jdom.Parent parent> = r1;

        return;
    }

    static int access$0(org.jdom.ContentList)
    {
        int $i0;
        org.jdom.ContentList $r0;

        $r0 := @parameter0: org.jdom.ContentList;

        $i0 = specialinvoke $r0.<org.jdom.ContentList: int getModCount()>();

        return $i0;
    }

    static org.jdom.Content[] access$1(org.jdom.ContentList)
    {
        org.jdom.ContentList $r0;
        org.jdom.Content[] $r1;

        $r0 := @parameter0: org.jdom.ContentList;

        $r1 = $r0.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        return $r1;
    }

    static int access$2(org.jdom.ContentList)
    {
        int $i0;
        org.jdom.ContentList $r0;

        $r0 := @parameter0: org.jdom.ContentList;

        $i0 = $r0.<org.jdom.ContentList: int size>;

        return $i0;
    }

    public void add(int, java.lang.Object)
    {
        org.jdom.Content $r9;
        java.lang.StringBuffer $r2, $r5, $r6;
        int i0;
        org.jdom.ContentList r8;
        java.lang.Object r0;
        org.jdom.IllegalAddException $r1, $r10;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;
        boolean $z0;

        r8 := @this: org.jdom.ContentList;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r10 = new org.jdom.IllegalAddException;

        specialinvoke $r10.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("Cannot add null object");

        throw $r10;

     label1:
        $z0 = r0 instanceof org.jdom.Content;

        if $z0 == 0 goto label2;

        $r9 = (org.jdom.Content) r0;

        virtualinvoke r8.<org.jdom.ContentList: void add(int,org.jdom.Content)>(i0, $r9);

        goto label3;

     label2:
        $r1 = new org.jdom.IllegalAddException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>("Class ");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is of unrecognized type and cannot be added");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.jdom.IllegalAddException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label3:
        return;
    }

    void add(int, org.jdom.Content)
    {
        java.lang.IndexOutOfBoundsException $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.jdom.Content[] $r13, $r14, $r15, $r16;
        org.jdom.Parent $r2, $r3, $r4, $r5, $r12, $r17, $r22;
        org.jdom.Content r0;
        java.lang.StringBuffer $r7, $r8, $r9, $r10, $r24, $r27, $r28;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r11, $r26, $r29;
        org.jdom.ContentList r1;
        org.jdom.IllegalAddException $r20, $r21, $r23, $r30, $r32;
        org.jdom.Element $r18, $r19, $r25, $r31;

        r1 := @this: org.jdom.ContentList;

        i0 := @parameter0: int;

        r0 := @parameter1: org.jdom.Content;

        if r0 != null goto label01;

        $r32 = new org.jdom.IllegalAddException;

        specialinvoke $r32.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("Cannot add null object");

        throw $r32;

     label01:
        $r2 = r1.<org.jdom.ContentList: org.jdom.Parent parent>;

        $z0 = $r2 instanceof org.jdom.Document;

        if $z0 == 0 goto label02;

        specialinvoke r1.<org.jdom.ContentList: void documentCanContain(int,org.jdom.Content)>(i0, r0);

        goto label03;

     label02:
        staticinvoke <org.jdom.ContentList: void elementCanContain(int,org.jdom.Content)>(i0, r0);

     label03:
        $r3 = virtualinvoke r0.<org.jdom.Content: org.jdom.Parent getParent()>();

        if $r3 == null goto label05;

        $r22 = virtualinvoke r0.<org.jdom.Content: org.jdom.Parent getParent()>();

        $z4 = $r22 instanceof org.jdom.Document;

        if $z4 == 0 goto label04;

        $r30 = new org.jdom.IllegalAddException;

        $r31 = (org.jdom.Element) r0;

        specialinvoke $r30.<org.jdom.IllegalAddException: void <init>(org.jdom.Element,java.lang.String)>($r31, "The Content already has an existing parent document");

        throw $r30;

     label04:
        $r23 = new org.jdom.IllegalAddException;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>(java.lang.String)>("The Content already has an existing parent \"");

        $r25 = (org.jdom.Element) $r22;

        $r26 = virtualinvoke $r25.<org.jdom.Element: java.lang.String getQualifiedName()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r23.<org.jdom.IllegalAddException: void <init>(java.lang.String)>($r29);

        throw $r23;

     label05:
        $r4 = r1.<org.jdom.ContentList: org.jdom.Parent parent>;

        if r0 != $r4 goto label06;

        $r21 = new org.jdom.IllegalAddException;

        specialinvoke $r21.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("The Element cannot be added to itself");

        throw $r21;

     label06:
        $r5 = r1.<org.jdom.ContentList: org.jdom.Parent parent>;

        $z1 = $r5 instanceof org.jdom.Element;

        if $z1 == 0 goto label07;

        $z2 = r0 instanceof org.jdom.Element;

        if $z2 == 0 goto label07;

        $r19 = (org.jdom.Element) r0;

        $r17 = r1.<org.jdom.ContentList: org.jdom.Parent parent>;

        $r18 = (org.jdom.Element) $r17;

        $z3 = virtualinvoke $r19.<org.jdom.Element: boolean isAncestor(org.jdom.Element)>($r18);

        if $z3 == 0 goto label07;

        $r20 = new org.jdom.IllegalAddException;

        specialinvoke $r20.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("The Element cannot be added as a descendent of itself");

        throw $r20;

     label07:
        if i0 < 0 goto label08;

        $i2 = r1.<org.jdom.ContentList: int size>;

        if i0 <= $i2 goto label09;

     label08:
        $r6 = new java.lang.IndexOutOfBoundsException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(java.lang.String)>("Index: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Size: ");

        $i1 = virtualinvoke r1.<org.jdom.ContentList: int size()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label09:
        $r12 = r1.<org.jdom.ContentList: org.jdom.Parent parent>;

        virtualinvoke r0.<org.jdom.Content: org.jdom.Content setParent(org.jdom.Parent)>($r12);

        $i3 = r1.<org.jdom.ContentList: int size>;

        $i4 = $i3 + 1;

        virtualinvoke r1.<org.jdom.ContentList: void ensureCapacity(int)>($i4);

        $i5 = r1.<org.jdom.ContentList: int size>;

        if i0 != $i5 goto label10;

        $r16 = r1.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        $i13 = r1.<org.jdom.ContentList: int size>;

        $i14 = $i13 + 1;

        r1.<org.jdom.ContentList: int size> = $i14;

        $r16[$i13] = r0;

        goto label11;

     label10:
        $r14 = r1.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        $r13 = r1.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        $i8 = i0 + 1;

        $i6 = r1.<org.jdom.ContentList: int size>;

        $i7 = $i6 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, i0, $r13, $i8, $i7);

        $r15 = r1.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        $r15[i0] = r0;

        $i9 = r1.<org.jdom.ContentList: int size>;

        $i10 = $i9 + 1;

        r1.<org.jdom.ContentList: int size> = $i10;

     label11:
        $i11 = r1.<java.util.AbstractList: int modCount>;

        $i12 = $i11 + 1;

        r1.<java.util.AbstractList: int modCount> = $i12;

        return;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.lang.IndexOutOfBoundsException $r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.lang.String $r6;
        boolean $z0;
        java.util.Iterator $r8;
        java.util.Collection r7;
        java.lang.RuntimeException $r10;
        org.jdom.ContentList r4;
        java.lang.Object $r9;

        r4 := @this: org.jdom.ContentList;

        i0 := @parameter0: int;

        r7 := @parameter1: java.util.Collection;

        if i0 < 0 goto label01;

        $i2 = r4.<org.jdom.ContentList: int size>;

        if i0 <= $i2 goto label02;

     label01:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("Index: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Size: ");

        $i1 = virtualinvoke r4.<org.jdom.ContentList: int size()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label02:
        if r7 == null goto label03;

        $i3 = interfaceinvoke r7.<java.util.Collection: int size()>();

        if $i3 != 0 goto label04;

     label03:
        return 0;

     label04:
        $i4 = virtualinvoke r4.<org.jdom.ContentList: int size()>();

        $i5 = interfaceinvoke r7.<java.util.Collection: int size()>();

        $i6 = $i4 + $i5;

        virtualinvoke r4.<org.jdom.ContentList: void ensureCapacity(int)>($i6);

        i8 = 0;

     label05:
        $r8 = interfaceinvoke r7.<java.util.Collection: java.util.Iterator iterator()>();

        goto label07;

     label06:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $i7 = i0 + i8;

        virtualinvoke r4.<org.jdom.ContentList: void add(int,java.lang.Object)>($i7, $r9);

        i8 = i8 + 1;

     label07:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label06;

     label08:
        goto label12;

     label09:
        $r10 := @caughtexception;

        i9 = 0;

        goto label11;

     label10:
        virtualinvoke r4.<org.jdom.ContentList: java.lang.Object remove(int)>(i0);

        i9 = i9 + 1;

     label11:
        if i9 < i8 goto label10;

        throw $r10;

     label12:
        return 1;

        catch java.lang.RuntimeException from label05 to label08 with label09;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Collection r1;
        int $i0;
        org.jdom.ContentList r0;
        boolean $z0;

        r0 := @this: org.jdom.ContentList;

        r1 := @parameter0: java.util.Collection;

        $i0 = virtualinvoke r0.<org.jdom.ContentList: int size()>();

        $z0 = virtualinvoke r0.<org.jdom.ContentList: boolean addAll(int,java.util.Collection)>($i0, r1);

        return $z0;
    }

    public void clear()
    {
        org.jdom.Content[] $r1, $r2;
        org.jdom.Content r3;
        int $i0, $i1, $i2, i3;
        org.jdom.ContentList r0;

        r0 := @this: org.jdom.ContentList;

        $r1 = r0.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        if $r1 == null goto label3;

        i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        r3 = $r2[i3];

        staticinvoke <org.jdom.ContentList: void removeParent(org.jdom.Content)>(r3);

        i3 = i3 + 1;

     label2:
        $i2 = r0.<org.jdom.ContentList: int size>;

        if i3 < $i2 goto label1;

        r0.<org.jdom.ContentList: org.jdom.Content[] elementData> = null;

        r0.<org.jdom.ContentList: int size> = 0;

     label3:
        $i0 = r0.<java.util.AbstractList: int modCount>;

        $i1 = $i0 + 1;

        r0.<java.util.AbstractList: int modCount> = $i1;

        return;
    }

    void clearAndSet(java.util.Collection)
    {
        org.jdom.Content[] r1;
        java.util.Collection r2;
        java.lang.RuntimeException $r4;
        org.jdom.Content $r3;
        int i0, $i1, $i2, $i3, $i4, i5;
        org.jdom.ContentList r0;

        r0 := @this: org.jdom.ContentList;

        r2 := @parameter0: java.util.Collection;

        r1 = r0.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        i0 = r0.<org.jdom.ContentList: int size>;

        r0.<org.jdom.ContentList: org.jdom.Content[] elementData> = null;

        r0.<org.jdom.ContentList: int size> = 0;

        if r2 == null goto label4;

        $i3 = interfaceinvoke r2.<java.util.Collection: int size()>();

        if $i3 == 0 goto label4;

        $i4 = interfaceinvoke r2.<java.util.Collection: int size()>();

        virtualinvoke r0.<org.jdom.ContentList: void ensureCapacity(int)>($i4);

     label1:
        virtualinvoke r0.<org.jdom.ContentList: boolean addAll(int,java.util.Collection)>(0, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r0.<org.jdom.ContentList: org.jdom.Content[] elementData> = r1;

        r0.<org.jdom.ContentList: int size> = i0;

        throw $r4;

     label4:
        if r1 == null goto label7;

        i5 = 0;

        goto label6;

     label5:
        $r3 = r1[i5];

        staticinvoke <org.jdom.ContentList: void removeParent(org.jdom.Content)>($r3);

        i5 = i5 + 1;

     label6:
        if i5 < i0 goto label5;

     label7:
        $i1 = r0.<java.util.AbstractList: int modCount>;

        $i2 = $i1 + 1;

        r0.<java.util.AbstractList: int modCount> = $i2;

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private void documentCanContain(int, org.jdom.Content) throws org.jdom.IllegalAddException
    {
        org.jdom.Content r0;
        int $i0, $i1, i2, $i3, $i4, $i6;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.jdom.ContentList r4;
        org.jdom.IllegalAddException $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r4 := @this: org.jdom.ContentList;

        i2 := @parameter0: int;

        r0 := @parameter1: org.jdom.Content;

        $z0 = r0 instanceof org.jdom.Element;

        if $z0 == 0 goto label2;

        $i3 = virtualinvoke r4.<org.jdom.ContentList: int indexOfFirstElement()>();

        if $i3 < 0 goto label1;

        $r9 = new org.jdom.IllegalAddException;

        specialinvoke $r9.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("Cannot add a second root element, only one is allowed");

        throw $r9;

     label1:
        $i4 = virtualinvoke r4.<org.jdom.ContentList: int indexOfDocType()>();

        if $i4 <= i2 goto label2;

        $r10 = new org.jdom.IllegalAddException;

        specialinvoke $r10.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("A root element cannot be added before the DocType");

        throw $r10;

     label2:
        $z1 = r0 instanceof org.jdom.DocType;

        if $z1 == 0 goto label4;

        $i0 = virtualinvoke r4.<org.jdom.ContentList: int indexOfDocType()>();

        if $i0 < 0 goto label3;

        $r11 = new org.jdom.IllegalAddException;

        specialinvoke $r11.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("Cannot add a second doctype, only one is allowed");

        throw $r11;

     label3:
        $i1 = virtualinvoke r4.<org.jdom.ContentList: int indexOfFirstElement()>();

        $i6 = (int) -1;

        if $i1 == $i6 goto label4;

        if $i1 >= i2 goto label4;

        $r12 = new org.jdom.IllegalAddException;

        specialinvoke $r12.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("A DocType cannot be added after the root element");

        throw $r12;

     label4:
        $z4 = r0 instanceof org.jdom.CDATA;

        if $z4 == 0 goto label5;

        $r13 = new org.jdom.IllegalAddException;

        specialinvoke $r13.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("A CDATA is not allowed at the document root");

        throw $r13;

     label5:
        $z2 = r0 instanceof org.jdom.Text;

        if $z2 == 0 goto label6;

        $r14 = new org.jdom.IllegalAddException;

        specialinvoke $r14.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("A Text is not allowed at the document root");

        throw $r14;

     label6:
        $z3 = r0 instanceof org.jdom.EntityRef;

        if $z3 == 0 goto label7;

        $r15 = new org.jdom.IllegalAddException;

        specialinvoke $r15.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("An EntityRef is not allowed at the document root");

        throw $r15;

     label7:
        return;
    }

    private static void elementCanContain(int, org.jdom.Content) throws org.jdom.IllegalAddException
    {
        int i0;
        org.jdom.IllegalAddException $r1;
        org.jdom.Content r0;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: org.jdom.Content;

        $z0 = r0 instanceof org.jdom.DocType;

        if $z0 == 0 goto label1;

        $r1 = new org.jdom.IllegalAddException;

        specialinvoke $r1.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("A DocType is not allowed except at the document level");

        throw $r1;

     label1:
        return;
    }

    void ensureCapacity(int)
    {
        org.jdom.Content[] $r1, $r2, r3, $r4, $r5, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        org.jdom.ContentList r0;

        r0 := @this: org.jdom.ContentList;

        i1 := @parameter0: int;

        $r1 = r0.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        if $r1 != null goto label1;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 5);

        $r6 = newarray (org.jdom.Content)[$i5];

        r0.<org.jdom.ContentList: org.jdom.Content[] elementData> = $r6;

        goto label3;

     label1:
        $r2 = r0.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        i0 = lengthof $r2;

        if i1 <= i0 goto label3;

        r3 = r0.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        $i2 = i0 * 3;

        $i3 = $i2 / 2;

        i6 = $i3 + 1;

        if i6 >= i1 goto label2;

        i6 = i1;

     label2:
        $r4 = newarray (org.jdom.Content)[i6];

        r0.<org.jdom.ContentList: org.jdom.Content[] elementData> = $r4;

        $r5 = r0.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        $i4 = r0.<org.jdom.ContentList: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r5, 0, $i4);

     label3:
        return;
    }

    public java.lang.Object get(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.jdom.Content[] $r7;
        org.jdom.Content $r8;
        java.lang.StringBuffer $r1, $r2, $r3, $r5;
        int i0, $i1, $i2;
        org.jdom.ContentList r4;
        java.lang.String $r6;

        r4 := @this: org.jdom.ContentList;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = r4.<org.jdom.ContentList: int size>;

        if i0 < $i2 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("Index: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Size: ");

        $i1 = virtualinvoke r4.<org.jdom.ContentList: int size()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label2:
        $r7 = r4.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        $r8 = $r7[i0];

        return $r8;
    }

    private int getModCount()
    {
        int $i0;
        org.jdom.ContentList r0;

        r0 := @this: org.jdom.ContentList;

        $i0 = r0.<java.util.AbstractList: int modCount>;

        return $i0;
    }

    java.util.List getView(org.jdom.filter.Filter)
    {
        org.jdom.filter.Filter r2;
        org.jdom.ContentList r1;
        org.jdom.ContentList$FilterList $r0;

        r1 := @this: org.jdom.ContentList;

        r2 := @parameter0: org.jdom.filter.Filter;

        $r0 = new org.jdom.ContentList$FilterList;

        specialinvoke $r0.<org.jdom.ContentList$FilterList: void <init>(org.jdom.ContentList,org.jdom.filter.Filter)>(r1, r2);

        return $r0;
    }

    int indexOfDocType()
    {
        org.jdom.Content[] $r1, $r2;
        org.jdom.Content $r3;
        int $i0, i1, $i3;
        org.jdom.ContentList r0;
        boolean $z0;

        r0 := @this: org.jdom.ContentList;

        $r1 = r0.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        if $r1 == null goto label4;

        i1 = 0;

        goto label3;

     label1:
        $r2 = r0.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        $r3 = $r2[i1];

        $z0 = $r3 instanceof org.jdom.DocType;

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

     label3:
        $i0 = r0.<org.jdom.ContentList: int size>;

        if i1 < $i0 goto label1;

     label4:
        $i3 = (int) -1;

        return $i3;
    }

    int indexOfFirstElement()
    {
        org.jdom.Content[] $r1, $r2;
        org.jdom.Content $r3;
        int $i0, i1, $i3;
        org.jdom.ContentList r0;
        boolean $z0;

        r0 := @this: org.jdom.ContentList;

        $r1 = r0.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        if $r1 == null goto label4;

        i1 = 0;

        goto label3;

     label1:
        $r2 = r0.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        $r3 = $r2[i1];

        $z0 = $r3 instanceof org.jdom.Element;

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

     label3:
        $i0 = r0.<org.jdom.ContentList: int size>;

        if i1 < $i0 goto label1;

     label4:
        $i3 = (int) -1;

        return $i3;
    }

    public java.lang.Object remove(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.jdom.Content r8;
        java.lang.StringBuffer $r1, $r2, $r3, $r5;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r6;
        org.jdom.Content[] $r7, $r9, $r10, $r11;
        org.jdom.ContentList r4;

        r4 := @this: org.jdom.ContentList;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = r4.<org.jdom.ContentList: int size>;

        if i0 < $i2 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("Index: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Size: ");

        $i1 = virtualinvoke r4.<org.jdom.ContentList: int size()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label2:
        $r7 = r4.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        r8 = $r7[i0];

        staticinvoke <org.jdom.ContentList: void removeParent(org.jdom.Content)>(r8);

        $i3 = r4.<org.jdom.ContentList: int size>;

        $i4 = $i3 - i0;

        i5 = $i4 - 1;

        if i5 <= 0 goto label3;

        $r11 = r4.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        $i10 = i0 + 1;

        $r10 = r4.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, $i10, $r10, i0, i5);

     label3:
        $r9 = r4.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        $i6 = r4.<org.jdom.ContentList: int size>;

        $i7 = $i6 - 1;

        r4.<org.jdom.ContentList: int size> = $i7;

        $r9[$i7] = null;

        $i8 = r4.<java.util.AbstractList: int modCount>;

        $i9 = $i8 + 1;

        r4.<java.util.AbstractList: int modCount> = $i9;

        return r8;
    }

    private static void removeParent(org.jdom.Content)
    {
        org.jdom.Content r0;

        r0 := @parameter0: org.jdom.Content;

        virtualinvoke r0.<org.jdom.Content: org.jdom.Content setParent(org.jdom.Parent)>(null);

        return;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.lang.IndexOutOfBoundsException $r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r5;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.RuntimeException $r12;
        org.jdom.Parent $r8, $r10;
        org.jdom.ContentList r4;
        java.lang.Object r7, $r13;
        org.jdom.IllegalAddException $r9, $r11;

        r4 := @this: org.jdom.ContentList;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.Object;

        if i0 < 0 goto label1;

        $i2 = r4.<org.jdom.ContentList: int size>;

        if i0 < $i2 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("Index: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Size: ");

        $i1 = virtualinvoke r4.<org.jdom.ContentList: int size()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label2:
        $z0 = r7 instanceof org.jdom.Element;

        if $z0 == 0 goto label3;

        $r10 = r4.<org.jdom.ContentList: org.jdom.Parent parent>;

        $z2 = $r10 instanceof org.jdom.Document;

        if $z2 == 0 goto label3;

        $i4 = virtualinvoke r4.<org.jdom.ContentList: int indexOfFirstElement()>();

        if $i4 < 0 goto label3;

        if $i4 == i0 goto label3;

        $r11 = new org.jdom.IllegalAddException;

        specialinvoke $r11.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("Cannot add a second root element, only one is allowed");

        throw $r11;

     label3:
        $z3 = r7 instanceof org.jdom.DocType;

        if $z3 == 0 goto label4;

        $r8 = r4.<org.jdom.ContentList: org.jdom.Parent parent>;

        $z1 = $r8 instanceof org.jdom.Document;

        if $z1 == 0 goto label4;

        $i3 = virtualinvoke r4.<org.jdom.ContentList: int indexOfDocType()>();

        if $i3 < 0 goto label4;

        if $i3 == i0 goto label4;

        $r9 = new org.jdom.IllegalAddException;

        specialinvoke $r9.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("Cannot add a second doctype, only one is allowed");

        throw $r9;

     label4:
        $r13 = virtualinvoke r4.<org.jdom.ContentList: java.lang.Object remove(int)>(i0);

     label5:
        virtualinvoke r4.<org.jdom.ContentList: void add(int,java.lang.Object)>(i0, r7);

     label6:
        goto label8;

     label7:
        $r12 := @caughtexception;

        virtualinvoke r4.<org.jdom.ContentList: void add(int,java.lang.Object)>(i0, $r13);

        throw $r12;

     label8:
        return $r13;

        catch java.lang.RuntimeException from label5 to label6 with label7;
    }

    public int size()
    {
        int $i0;
        org.jdom.ContentList r0;

        r0 := @this: org.jdom.ContentList;

        $i0 = r0.<org.jdom.ContentList: int size>;

        return $i0;
    }

    public java.lang.String toString()
    {
        org.jdom.ContentList r0;
        java.lang.String $r1;

        r0 := @this: org.jdom.ContentList;

        $r1 = specialinvoke r0.<java.util.AbstractCollection: java.lang.String toString()>();

        return $r1;
    }

    final void uncheckedAddContent(org.jdom.Content)
    {
        org.jdom.Content[] $r3;
        org.jdom.Content r0;
        org.jdom.Parent $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.jdom.ContentList r1;

        r1 := @this: org.jdom.ContentList;

        r0 := @parameter0: org.jdom.Content;

        $r2 = r1.<org.jdom.ContentList: org.jdom.Parent parent>;

        r0.<org.jdom.Content: org.jdom.Parent parent> = $r2;

        $i0 = r1.<org.jdom.ContentList: int size>;

        $i1 = $i0 + 1;

        virtualinvoke r1.<org.jdom.ContentList: void ensureCapacity(int)>($i1);

        $r3 = r1.<org.jdom.ContentList: org.jdom.Content[] elementData>;

        $i2 = r1.<org.jdom.ContentList: int size>;

        $i3 = $i2 + 1;

        r1.<org.jdom.ContentList: int size> = $i3;

        $r3[$i2] = r0;

        $i4 = r1.<java.util.AbstractList: int modCount>;

        $i5 = $i4 + 1;

        r1.<java.util.AbstractList: int modCount> = $i5;

        return;
    }

    public static void <clinit>()
    {
        <org.jdom.ContentList: int REMOVE> = 6;

        <org.jdom.ContentList: int ADD> = 5;

        <org.jdom.ContentList: int NEXT> = 4;

        <org.jdom.ContentList: int PREV> = 3;

        <org.jdom.ContentList: int HASNEXT> = 2;

        <org.jdom.ContentList: int HASPREV> = 1;

        <org.jdom.ContentList: int CREATE> = 0;

        <org.jdom.ContentList: int INITIAL_ARRAY_SIZE> = 5;

        <org.jdom.ContentList: java.lang.String CVS_ID> = "@(#) $RCSfile: ContentList.java,v $ $Revision: 1.39 $ $Date: 2004/02/28 03:30:27 $ $Name: jdom_1_0 $";

        return;
    }
}
