public class org.apache.lucene.queries.function.valuesource.DoubleConstValueSource extends org.apache.lucene.queries.function.valuesource.ConstNumberSource
{
    final double constant;
    private final float fv;
    private final long lv;

    public void <init>(double)
    {
        org.apache.lucene.queries.function.valuesource.DoubleConstValueSource r0;
        float $f0;
        long $l0;
        double d0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.DoubleConstValueSource;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.lucene.queries.function.valuesource.ConstNumberSource: void <init>()>();

        r0.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: double constant> = d0;

        $f0 = (float) d0;

        r0.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: float fv> = $f0;

        $l0 = (long) d0;

        r0.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: long lv> = $l0;

        return;
    }

    public java.lang.String description()
    {
        org.apache.lucene.queries.function.valuesource.DoubleConstValueSource r2;
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String $r5;
        double $d0;

        r2 := @this: org.apache.lucene.queries.function.valuesource.DoubleConstValueSource;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("const(");

        $d0 = r2.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: double constant>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        org.apache.lucene.queries.function.valuesource.DoubleConstValueSource r1;
        org.apache.lucene.queries.function.valuesource.DoubleConstValueSource$1 $r0;
        java.util.Map r2;
        org.apache.lucene.index.AtomicReaderContext r3;

        r1 := @this: org.apache.lucene.queries.function.valuesource.DoubleConstValueSource;

        r2 := @parameter0: java.util.Map;

        r3 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        $r0 = new org.apache.lucene.queries.function.valuesource.DoubleConstValueSource$1;

        specialinvoke $r0.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource$1: void <init>(org.apache.lucene.queries.function.valuesource.DoubleConstValueSource,org.apache.lucene.queries.function.ValueSource)>(r1, r1);

        return $r0;
    }

    public int hashCode()
    {
        org.apache.lucene.queries.function.valuesource.DoubleConstValueSource r0;
        int $i3;
        long $l0, $l1, $l2;
        double $d0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.DoubleConstValueSource;

        $d0 = r0.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: double constant>;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $l1 = $l0 >>> 32;

        $l2 = $l0 ^ $l1;

        $i3 = (int) $l2;

        return $i3;
    }

    public boolean equals(java.lang.Object)
    {
        byte $b0;
        org.apache.lucene.queries.function.valuesource.DoubleConstValueSource r1, r2;
        java.lang.Object r0;
        boolean $z0, $z1;
        double $d0, $d1;

        r2 := @this: org.apache.lucene.queries.function.valuesource.DoubleConstValueSource;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.lucene.queries.function.valuesource.DoubleConstValueSource;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.apache.lucene.queries.function.valuesource.DoubleConstValueSource) r0;

        $d1 = r2.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: double constant>;

        $d0 = r1.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: double constant>;

        $b0 = $d1 cmpl $d0;

        if $b0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public int getInt()
    {
        int $i1;
        long $l0;
        org.apache.lucene.queries.function.valuesource.DoubleConstValueSource r0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.DoubleConstValueSource;

        $l0 = r0.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: long lv>;

        $i1 = (int) $l0;

        return $i1;
    }

    public long getLong()
    {
        long $l0;
        org.apache.lucene.queries.function.valuesource.DoubleConstValueSource r0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.DoubleConstValueSource;

        $l0 = r0.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: long lv>;

        return $l0;
    }

    public float getFloat()
    {
        float $f0;
        org.apache.lucene.queries.function.valuesource.DoubleConstValueSource r0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.DoubleConstValueSource;

        $f0 = r0.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: float fv>;

        return $f0;
    }

    public double getDouble()
    {
        org.apache.lucene.queries.function.valuesource.DoubleConstValueSource r0;
        double $d0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.DoubleConstValueSource;

        $d0 = r0.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: double constant>;

        return $d0;
    }

    public java.lang.Number getNumber()
    {
        org.apache.lucene.queries.function.valuesource.DoubleConstValueSource r0;
        java.lang.Double $r1;
        double $d0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.DoubleConstValueSource;

        $d0 = r0.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: double constant>;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public boolean getBool()
    {
        byte $b0;
        org.apache.lucene.queries.function.valuesource.DoubleConstValueSource r0;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.DoubleConstValueSource;

        $d0 = r0.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: double constant>;

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static float access$000(org.apache.lucene.queries.function.valuesource.DoubleConstValueSource)
    {
        float $f0;
        org.apache.lucene.queries.function.valuesource.DoubleConstValueSource r0;

        r0 := @parameter0: org.apache.lucene.queries.function.valuesource.DoubleConstValueSource;

        $f0 = r0.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: float fv>;

        return $f0;
    }

    static long access$100(org.apache.lucene.queries.function.valuesource.DoubleConstValueSource)
    {
        long $l0;
        org.apache.lucene.queries.function.valuesource.DoubleConstValueSource r0;

        r0 := @parameter0: org.apache.lucene.queries.function.valuesource.DoubleConstValueSource;

        $l0 = r0.<org.apache.lucene.queries.function.valuesource.DoubleConstValueSource: long lv>;

        return $l0;
    }
}
