public abstract class org.apache.cxf.databinding.AbstractDataBinding extends java.lang.Object implements org.apache.cxf.databinding.DataBinding
{
    private static final java.util.Map BUILTIN_SCHEMA_LOCS;
    protected boolean mtomEnabled;
    protected int mtomThreshold;
    private org.apache.cxf.Bus bus;
    private java.util.Collection schemas;
    private java.util.Map namespaceMap;
    private java.util.Map contextualNamespaceMap;
    private boolean hackAroundEmptyNamespaceIssue;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.cxf.databinding.AbstractDataBinding r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.cxf.databinding.AbstractDataBinding: java.util.Map BUILTIN_SCHEMA_LOCS>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://www.w3.org/2005/08/addressing", "http://www.w3.org/2006/03/addressing/ws-addr.xsd");

        $r2 = <org.apache.cxf.databinding.AbstractDataBinding: java.util.Map BUILTIN_SCHEMA_LOCS>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://ws-i.org/profiles/basic/1.1/xsd", "http://ws-i.org/profiles/basic/1.1/swaref.xsd");

        return;
    }

    protected org.apache.cxf.Bus getBus()
    {
        org.apache.cxf.Bus $r1, $r2, $r3;
        org.apache.cxf.databinding.AbstractDataBinding r0;

        r0 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        $r1 = r0.<org.apache.cxf.databinding.AbstractDataBinding: org.apache.cxf.Bus bus>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.apache.cxf.BusFactory: org.apache.cxf.Bus getDefaultBus()>();

        return $r3;

     label1:
        $r2 = r0.<org.apache.cxf.databinding.AbstractDataBinding: org.apache.cxf.Bus bus>;

        return $r2;
    }

    public void setBus(org.apache.cxf.Bus)
    {
        org.apache.cxf.Bus r1, $r2, $r3;
        org.apache.cxf.databinding.AbstractDataBinding r0;
        java.lang.AssertionError $r4;
        boolean $z0;

        r0 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        r1 := @parameter0: org.apache.cxf.Bus;

        $z0 = <org.apache.cxf.databinding.AbstractDataBinding: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.cxf.databinding.AbstractDataBinding: org.apache.cxf.Bus bus>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.cxf.databinding.AbstractDataBinding: org.apache.cxf.Bus bus>;

        if $r3 == r1 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        r0.<org.apache.cxf.databinding.AbstractDataBinding: org.apache.cxf.Bus bus> = r1;

        return;
    }

    public java.util.Collection getSchemas()
    {
        org.apache.cxf.databinding.AbstractDataBinding r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        $r1 = r0.<org.apache.cxf.databinding.AbstractDataBinding: java.util.Collection schemas>;

        return $r1;
    }

    public void setSchemas(java.util.Collection)
    {
        org.apache.cxf.databinding.AbstractDataBinding r0;
        java.util.Collection r1;

        r0 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        r1 := @parameter0: java.util.Collection;

        r0.<org.apache.cxf.databinding.AbstractDataBinding: java.util.Collection schemas> = r1;

        return;
    }

    public org.apache.ws.commons.schema.XmlSchema addSchemaDocument(org.apache.cxf.service.model.ServiceInfo, org.apache.cxf.common.xmlschema.SchemaCollection, org.w3c.dom.Document, java.lang.String)
    {
        org.w3c.dom.Document r3;
        org.apache.cxf.databinding.AbstractDataBinding r0;
        org.apache.cxf.service.model.ServiceInfo r1;
        org.apache.cxf.common.xmlschema.SchemaCollection r2;
        org.apache.ws.commons.schema.XmlSchema $r5;
        java.lang.String r4;

        r0 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        r1 := @parameter0: org.apache.cxf.service.model.ServiceInfo;

        r2 := @parameter1: org.apache.cxf.common.xmlschema.SchemaCollection;

        r3 := @parameter2: org.w3c.dom.Document;

        r4 := @parameter3: java.lang.String;

        $r5 = virtualinvoke r0.<org.apache.cxf.databinding.AbstractDataBinding: org.apache.ws.commons.schema.XmlSchema addSchemaDocument(org.apache.cxf.service.model.ServiceInfo,org.apache.cxf.common.xmlschema.SchemaCollection,org.w3c.dom.Document,java.lang.String,java.util.Collection)>(r1, r2, r3, r4, null);

        return $r5;
    }

    public org.apache.ws.commons.schema.XmlSchema addSchemaDocument(org.apache.cxf.service.model.ServiceInfo, org.apache.cxf.common.xmlschema.SchemaCollection, org.w3c.dom.Document, java.lang.String, java.util.Collection)
    {
        org.w3c.dom.Document r14, $r31, r51;
        org.apache.cxf.service.model.InterfaceInfo $r22, $r32;
        java.lang.StringBuilder $r39, $r40, $r41, $r46, $r47, $r48;
        javax.xml.namespace.QName $r23, $r33, $r37, $r44;
        java.lang.Throwable $r50;
        org.apache.cxf.service.model.ServiceInfo r8;
        java.lang.String $r0, $r2, $r3, $r5, $r7, r13, $r19, $r20, $r24, $r25, $r26, $r28, $r34, $r42, $r49, r52, $r58;
        org.apache.cxf.service.model.SchemaInfo $r9, $r12;
        java.lang.RuntimeException $r38, $r45;
        org.apache.cxf.common.xmlschema.SchemaCollection r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, $z10, z11, $z12, z13, z14;
        java.util.Collection r21;
        org.w3c.dom.Node r53, r55;
        org.apache.ws.commons.schema.XmlSchema $r16, $r27;
        org.apache.cxf.databinding.AbstractDataBinding r10;
        org.w3c.dom.Element $r1, $r4, $r6, $r11, $r17, $r18, $r29, $r30, $r35, $r36, $r43, r54, r56, r57;

        r10 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        r8 := @parameter0: org.apache.cxf.service.model.ServiceInfo;

        r15 := @parameter1: org.apache.cxf.common.xmlschema.SchemaCollection;

        r51 := @parameter2: org.w3c.dom.Document;

        r13 := @parameter3: java.lang.String;

        r21 := @parameter4: java.util.Collection;

        $r0 = "http://www.w3.org/2001/XMLSchema";

        $r1 = interfaceinvoke r51.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label01;

        $r43 = interfaceinvoke r51.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r44 = staticinvoke <org.apache.cxf.helpers.DOMUtils: javax.xml.namespace.QName getElementQName(org.w3c.dom.Element)>($r43);

        $r45 = new java.lang.RuntimeException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid schema document passed to AbstractDataBinding.addSchemaDocument, not in W3C schema namespace: ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.RuntimeException: void <init>(java.lang.String)>($r49);

        throw $r45;

     label01:
        $r3 = "schema";

        $r4 = interfaceinvoke r51.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label02;

        $r36 = interfaceinvoke r51.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r37 = staticinvoke <org.apache.cxf.helpers.DOMUtils: javax.xml.namespace.QName getElementQName(org.w3c.dom.Element)>($r36);

        $r38 = new java.lang.RuntimeException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid schema document passed to AbstractDataBinding.addSchemaDocument, document element isn\'t \'schema\': ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.RuntimeException: void <init>(java.lang.String)>($r42);

        throw $r38;

     label02:
        $r6 = interfaceinvoke r51.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("targetNamespace");

        r52 = $r7;

        z9 = 0;

        z14 = 0;

        z13 = 0;

        $z2 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r7);

        if $z2 == 0 goto label04;

        $r29 = interfaceinvoke r51.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r30 = staticinvoke <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Element getFirstElement(org.w3c.dom.Node)>($r29);

        if $r30 != null goto label03;

        r10.<org.apache.cxf.databinding.AbstractDataBinding: boolean hackAroundEmptyNamespaceIssue> = 1;

        return null;

     label03:
        $r31 = specialinvoke r10.<org.apache.cxf.databinding.AbstractDataBinding: org.w3c.dom.Document copy(org.w3c.dom.Document)>(r51);

        r51 = $r31;

        z9 = 1;

        z14 = 1;

        z13 = 1;

        $r32 = virtualinvoke r8.<org.apache.cxf.service.model.ServiceInfo: org.apache.cxf.service.model.InterfaceInfo getInterface()>();

        $r33 = virtualinvoke $r32.<org.apache.cxf.service.model.InterfaceInfo: javax.xml.namespace.QName getName()>();

        $r34 = virtualinvoke $r33.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        r52 = $r34;

        $r35 = interfaceinvoke $r31.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        interfaceinvoke $r35.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("targetNamespace", $r34);

     label04:
        $r9 = virtualinvoke r8.<org.apache.cxf.service.model.ServiceInfo: org.apache.cxf.service.model.SchemaInfo getSchema(java.lang.String)>(r52);

        if $r9 == null goto label07;

        if r13 != null goto label05;

        $r28 = virtualinvoke $r9.<org.apache.cxf.service.model.SchemaInfo: java.lang.String getSystemId()>();

        if $r28 == null goto label06;

     label05:
        if r13 == null goto label07;

        $r26 = virtualinvoke $r9.<org.apache.cxf.service.model.SchemaInfo: java.lang.String getSystemId()>();

        $z8 = virtualinvoke r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r26);

        if $z8 == 0 goto label07;

     label06:
        $r27 = virtualinvoke $r9.<org.apache.cxf.service.model.SchemaInfo: org.apache.ws.commons.schema.XmlSchema getSchema()>();

        return $r27;

     label07:
        $z10 = r10.<org.apache.cxf.databinding.AbstractDataBinding: boolean hackAroundEmptyNamespaceIssue>;

        if $z10 == 0 goto label08;

        r51 = specialinvoke r10.<org.apache.cxf.databinding.AbstractDataBinding: org.w3c.dom.Document doEmptyNamespaceHack(org.w3c.dom.Document,boolean)>(r51, z13);

     label08:
        $r11 = interfaceinvoke r51.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r53 = interfaceinvoke $r11.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        z11 = 0;

     label09:
        if r53 == null goto label11;

        $z6 = r53 instanceof org.w3c.dom.Element;

        if $z6 == 0 goto label10;

        r54 = (org.w3c.dom.Element) r53;

        $r25 = interfaceinvoke r54.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        $z7 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>("import");

        if $z7 == 0 goto label10;

        z11 = 1;

        goto label11;

     label10:
        r53 = interfaceinvoke r53.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label09;

     label11:
        if z11 == 0 goto label17;

        if z14 != 0 goto label12;

        r51 = specialinvoke r10.<org.apache.cxf.databinding.AbstractDataBinding: org.w3c.dom.Document copy(org.w3c.dom.Document)>(r51);

     label12:
        $r18 = interfaceinvoke r51.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r55 = interfaceinvoke $r18.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

     label13:
        if r55 == null goto label17;

        $z3 = r55 instanceof org.w3c.dom.Element;

        if $z3 == 0 goto label16;

        r56 = (org.w3c.dom.Element) r55;

        $r19 = interfaceinvoke r56.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        $z4 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("import");

        if $z4 == 0 goto label16;

        r57 = (org.w3c.dom.Element) r55;

        $r20 = interfaceinvoke r57.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("schemaLocation");

        if r21 == null goto label14;

        $z5 = interfaceinvoke r21.<java.util.Collection: boolean contains(java.lang.Object)>($r20);

        if $z5 == 0 goto label15;

     label14:
        interfaceinvoke r57.<org.w3c.dom.Element: void removeAttribute(java.lang.String)>("schemaLocation");

     label15:
        virtualinvoke r10.<org.apache.cxf.databinding.AbstractDataBinding: void updateSchemaLocation(org.w3c.dom.Element)>(r57);

        $r58 = interfaceinvoke r57.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("namespace");

        $z12 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r58);

        if $z12 == 0 goto label16;

        $r22 = virtualinvoke r8.<org.apache.cxf.service.model.ServiceInfo: org.apache.cxf.service.model.InterfaceInfo getInterface()>();

        $r23 = virtualinvoke $r22.<org.apache.cxf.service.model.InterfaceInfo: javax.xml.namespace.QName getName()>();

        $r24 = virtualinvoke $r23.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        interfaceinvoke r57.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("namespace", $r24);

     label16:
        r55 = interfaceinvoke r55.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label13;

     label17:
        $r12 = new org.apache.cxf.service.model.SchemaInfo;

        specialinvoke $r12.<org.apache.cxf.service.model.SchemaInfo: void <init>(java.lang.String)>(r52);

        virtualinvoke $r12.<org.apache.cxf.service.model.SchemaInfo: void setSystemId(java.lang.String)>(r13);

        r14 = r51;

        entermonitor r51;

     label18:
        $r16 = virtualinvoke r15.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchema read(org.w3c.dom.Document,java.lang.String)>(r51, r13);

        virtualinvoke $r12.<org.apache.cxf.service.model.SchemaInfo: void setSchema(org.apache.ws.commons.schema.XmlSchema)>($r16);

        $r17 = interfaceinvoke r51.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        virtualinvoke $r12.<org.apache.cxf.service.model.SchemaInfo: void setElement(org.w3c.dom.Element)>($r17);

        exitmonitor r51;

     label19:
        goto label22;

     label20:
        $r50 := @caughtexception;

        exitmonitor r14;

     label21:
        throw $r50;

     label22:
        virtualinvoke r8.<org.apache.cxf.service.model.ServiceInfo: void addSchema(org.apache.cxf.service.model.SchemaInfo)>($r12);

        return $r16;

        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    private org.w3c.dom.Document doEmptyNamespaceHack(org.w3c.dom.Document, boolean)
    {
        org.w3c.dom.Document r11;
        java.lang.String $r2, $r3, $r4, $r8, $r9, $r10;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        org.apache.cxf.databinding.AbstractDataBinding r7;
        org.w3c.dom.Element $r0, $r1, $r5, $r6, r12, r13;

        r7 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        r11 := @parameter0: org.w3c.dom.Document;

        z0 := @parameter1: boolean;

        z5 = 0;

        $r0 = interfaceinvoke r11.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r12 = staticinvoke <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Element getFirstElement(org.w3c.dom.Node)>($r0);

     label1:
        if r12 == null goto label3;

        $r8 = "import";

        $r9 = interfaceinvoke r12.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label2;

        $r10 = interfaceinvoke r12.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("targetNamespace");

        $z4 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r10);

        if $z4 == 0 goto label2;

        z5 = 1;

        goto label3;

     label2:
        r12 = staticinvoke <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Element getNextElement(org.w3c.dom.Element)>(r12);

        goto label1;

     label3:
        if z5 == 0 goto label7;

        if z0 != 0 goto label4;

        r11 = specialinvoke r7.<org.apache.cxf.databinding.AbstractDataBinding: org.w3c.dom.Document copy(org.w3c.dom.Document)>(r11);

     label4:
        $r1 = interfaceinvoke r11.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r13 = staticinvoke <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Element getFirstElement(org.w3c.dom.Node)>($r1);

     label5:
        if r13 == null goto label7;

        $r2 = "import";

        $r3 = interfaceinvoke r13.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label6;

        $r4 = interfaceinvoke r13.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("targetNamespace");

        $z2 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r4);

        if $z2 == 0 goto label6;

        $r5 = interfaceinvoke r11.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        interfaceinvoke $r5.<org.w3c.dom.Element: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r13);

        $r6 = interfaceinvoke r11.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r13 = staticinvoke <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Element getFirstElement(org.w3c.dom.Node)>($r6);

        goto label5;

     label6:
        r13 = staticinvoke <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Element getNextElement(org.w3c.dom.Element)>(r13);

        goto label5;

     label7:
        return r11;
    }

    private org.w3c.dom.Document copy(org.w3c.dom.Document)
    {
        javax.xml.parsers.ParserConfigurationException $r2;
        org.w3c.dom.Document r0, $r1;
        javax.xml.stream.XMLStreamException $r3;
        org.apache.cxf.databinding.AbstractDataBinding r4;

        r4 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        r0 := @parameter0: org.w3c.dom.Document;

     label1:
        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document copy(org.w3c.dom.Document)>(r0);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        goto label5;

     label4:
        $r2 := @caughtexception;

     label5:
        return r0;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label4;
    }

    protected void updateSchemaLocation(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r0;
        java.util.Map $r2;
        org.apache.cxf.databinding.AbstractDataBinding r5;
        java.lang.Object $r3;
        java.lang.String $r1, r4;

        r5 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("namespace");

        $r2 = <org.apache.cxf.databinding.AbstractDataBinding: java.util.Map BUILTIN_SCHEMA_LOCS>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.lang.String) $r3;

        if r4 == null goto label1;

        interfaceinvoke r0.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("schemaLocation", r4);

     label1:
        return;
    }

    public java.util.Map getNamespaceMap()
    {
        org.apache.cxf.databinding.AbstractDataBinding r0;
        java.util.Map $r1;

        r0 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        $r1 = r0.<org.apache.cxf.databinding.AbstractDataBinding: java.util.Map namespaceMap>;

        return $r1;
    }

    public void setNamespaceMap(java.util.Map)
    {
        org.apache.cxf.databinding.AbstractDataBinding r1;
        java.util.Map r0;

        r1 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        r0 := @parameter0: java.util.Map;

        staticinvoke <org.apache.cxf.databinding.AbstractDataBinding: void checkNamespaceMap(java.util.Map)>(r0);

        r1.<org.apache.cxf.databinding.AbstractDataBinding: java.util.Map namespaceMap> = r0;

        return;
    }

    public java.util.Map getContextualNamespaceMap()
    {
        org.apache.cxf.databinding.AbstractDataBinding r0;
        java.util.Map $r1;

        r0 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        $r1 = r0.<org.apache.cxf.databinding.AbstractDataBinding: java.util.Map contextualNamespaceMap>;

        return $r1;
    }

    public void setContextualNamespaceMap(java.util.Map)
    {
        org.apache.cxf.databinding.AbstractDataBinding r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.databinding.AbstractDataBinding: java.util.Map contextualNamespaceMap> = r1;

        return;
    }

    public java.util.Map getDeclaredNamespaceMappings()
    {
        org.apache.cxf.databinding.AbstractDataBinding r0;
        java.util.Map $r1;

        r0 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        $r1 = r0.<org.apache.cxf.databinding.AbstractDataBinding: java.util.Map namespaceMap>;

        return $r1;
    }

    protected static void checkNamespaceMap(java.util.Map)
    {
        java.util.HashSet $r1;
        java.util.Map r0;
        java.lang.String $r12, $r14;
        boolean $z0, $z1;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.IllegalArgumentException $r8;
        java.lang.Object $r4, $r6, $r7, $r11;
        java.lang.StringBuilder $r9, $r10, $r13;

        r0 := @parameter0: java.util.Map;

        if r0 == null goto label3;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate prefix ");

        $r11 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.lang.String) $r11;

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label2:
        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r7);

        goto label1;

     label3:
        return;
    }

    public void setMtomEnabled(boolean)
    {
        org.apache.cxf.databinding.AbstractDataBinding r0;
        boolean z0;

        r0 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.databinding.AbstractDataBinding: boolean mtomEnabled> = z0;

        return;
    }

    public boolean isMtomEnabled()
    {
        org.apache.cxf.databinding.AbstractDataBinding r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        $z0 = r0.<org.apache.cxf.databinding.AbstractDataBinding: boolean mtomEnabled>;

        return $z0;
    }

    public int getMtomThreshold()
    {
        int $i0;
        org.apache.cxf.databinding.AbstractDataBinding r0;

        r0 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        $i0 = r0.<org.apache.cxf.databinding.AbstractDataBinding: int mtomThreshold>;

        return $i0;
    }

    public void setMtomThreshold(int)
    {
        int i0;
        org.apache.cxf.databinding.AbstractDataBinding r0;

        r0 := @this: org.apache.cxf.databinding.AbstractDataBinding;

        i0 := @parameter0: int;

        r0.<org.apache.cxf.databinding.AbstractDataBinding: int mtomThreshold> = i0;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.util.HashMap $r1;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/cxf/databinding/AbstractDataBinding;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.cxf.databinding.AbstractDataBinding: boolean $assertionsDisabled> = $z1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.apache.cxf.databinding.AbstractDataBinding: java.util.Map BUILTIN_SCHEMA_LOCS> = $r1;

        return;
    }
}
