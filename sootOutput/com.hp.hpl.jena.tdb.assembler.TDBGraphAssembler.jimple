public class com.hp.hpl.jena.tdb.assembler.TDBGraphAssembler extends com.hp.hpl.jena.assembler.assemblers.AssemblerBase implements com.hp.hpl.jena.assembler.Assembler
{
    static com.hp.hpl.jena.tdb.assembler.IndexAssembler indexAssembler;

    public void <init>()
    {
        com.hp.hpl.jena.tdb.assembler.TDBGraphAssembler r0;

        r0 := @this: com.hp.hpl.jena.tdb.assembler.TDBGraphAssembler;

        specialinvoke r0.<com.hp.hpl.jena.assembler.assemblers.AssemblerBase: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.rdf.model.Model open(com.hp.hpl.jena.assembler.Assembler, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.assembler.Mode)
    {
        com.hp.hpl.jena.assembler.Assembler r18;
        com.hp.hpl.jena.assembler.Mode r19;
        com.hp.hpl.jena.tdb.assembler.TDBGraphAssembler r11;
        com.hp.hpl.jena.tdb.base.file.Location $r10;
        com.hp.hpl.jena.rdf.model.Property $r1, $r3, $r5, $r6, $r7, $r12, $r13;
        java.lang.String $r2, r20;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r17;
        java.lang.RuntimeException $r16;
        com.hp.hpl.jena.rdf.model.Resource r0, $r4;
        com.hp.hpl.jena.rdf.model.Model $r8, $r9;
        com.hp.hpl.jena.assembler.exceptions.AssemblerException $r14, $r15;
        com.hp.hpl.jena.query.Dataset r21;

        r11 := @this: com.hp.hpl.jena.tdb.assembler.TDBGraphAssembler;

        r18 := @parameter0: com.hp.hpl.jena.assembler.Assembler;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r19 := @parameter2: com.hp.hpl.jena.assembler.Mode;

        staticinvoke <com.hp.hpl.jena.tdb.TDB: void init()>();

        $r1 = <com.hp.hpl.jena.tdb.assembler.VocabTDB: com.hp.hpl.jena.rdf.model.Property pLocation>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphUtils: java.lang.String getStringValue(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, $r1);

        $r3 = <com.hp.hpl.jena.tdb.assembler.VocabTDB: com.hp.hpl.jena.rdf.model.Property pDataset>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphUtils: com.hp.hpl.jena.rdf.model.Resource getResourceValue(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, $r3);

        if $r2 == null goto label01;

        if $r4 == null goto label01;

        $r15 = new com.hp.hpl.jena.assembler.exceptions.AssemblerException;

        specialinvoke $r15.<com.hp.hpl.jena.assembler.exceptions.AssemblerException: void <init>(com.hp.hpl.jena.rdf.model.Resource,java.lang.String)>(r0, "Both location and dataset given: exactly one required");

        throw $r15;

     label01:
        if $r2 != null goto label02;

        if $r4 != null goto label02;

        $r14 = new com.hp.hpl.jena.assembler.exceptions.AssemblerException;

        specialinvoke $r14.<com.hp.hpl.jena.assembler.exceptions.AssemblerException: void <init>(com.hp.hpl.jena.rdf.model.Resource,java.lang.String)>(r0, "Must give location or refer to a dataset description");

        throw $r14;

     label02:
        r20 = null;

        $r5 = <com.hp.hpl.jena.tdb.assembler.VocabTDB: com.hp.hpl.jena.rdf.model.Property pGraphName1>;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property)>($r5);

        if $z0 == 0 goto label03;

        $r13 = <com.hp.hpl.jena.tdb.assembler.VocabTDB: com.hp.hpl.jena.rdf.model.Property pGraphName1>;

        r20 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphUtils: java.lang.String getAsStringValue(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, $r13);

     label03:
        $r6 = <com.hp.hpl.jena.tdb.assembler.VocabTDB: com.hp.hpl.jena.rdf.model.Property pGraphName2>;

        $z1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property)>($r6);

        if $z1 == 0 goto label04;

        $r12 = <com.hp.hpl.jena.tdb.assembler.VocabTDB: com.hp.hpl.jena.rdf.model.Property pGraphName2>;

        r20 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphUtils: java.lang.String getAsStringValue(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, $r12);

     label04:
        $r7 = <com.hp.hpl.jena.tdb.assembler.VocabTDB: com.hp.hpl.jena.rdf.model.Property pIndex>;

        $z2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property)>($r7);

        if $z2 == 0 goto label05;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r11, "Custom indexes not implemented yet - ignored");

     label05:
        if $r2 == null goto label06;

        $r10 = new com.hp.hpl.jena.tdb.base.file.Location;

        specialinvoke $r10.<com.hp.hpl.jena.tdb.base.file.Location: void <init>(java.lang.String)>($r2);

        r21 = staticinvoke <com.hp.hpl.jena.tdb.TDBFactory: com.hp.hpl.jena.query.Dataset createDataset(com.hp.hpl.jena.tdb.base.file.Location)>($r10);

        goto label07;

     label06:
        r21 = staticinvoke <com.hp.hpl.jena.tdb.assembler.DatasetAssemblerTDB: com.hp.hpl.jena.query.Dataset make(com.hp.hpl.jena.rdf.model.Resource)>($r4);

     label07:
        if r20 == null goto label09;

        $r9 = interfaceinvoke r21.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.rdf.model.Model getNamedModel(java.lang.String)>(r20);

     label08:
        return $r9;

     label09:
        $r8 = interfaceinvoke r21.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.rdf.model.Model getDefaultModel()>();

     label10:
        return $r8;

     label11:
        $r16 := @caughtexception;

        $r17 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r16.<java.lang.RuntimeException: void printStackTrace(java.io.PrintStream)>($r17);

        throw $r16;

        catch java.lang.RuntimeException from label07 to label08 with label11;
        catch java.lang.RuntimeException from label09 to label10 with label11;
    }

    private void indexes(com.hp.hpl.jena.rdf.model.Resource)
    {
        java.lang.Object[] $r15;
        com.hp.hpl.jena.tdb.assembler.TDBGraphAssembler r18;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.rdf.model.Property $r1;
        java.lang.String $r10, $r12, $r14;
        boolean $z0, $z1;
        java.io.PrintStream $r3, $r16, $r17;
        com.hp.hpl.jena.tdb.TDBException $r4, $r7;
        com.hp.hpl.jena.rdf.model.RDFNode $r6;
        com.hp.hpl.jena.rdf.model.Statement $r5;
        com.hp.hpl.jena.rdf.model.Resource r0;
        java.lang.StringBuilder $r8, $r9, $r11;
        com.hp.hpl.jena.rdf.model.Literal $r13;

        r18 := @this: com.hp.hpl.jena.tdb.assembler.TDBGraphAssembler;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = <com.hp.hpl.jena.tdb.assembler.VocabTDB: com.hp.hpl.jena.rdf.model.Property pIndex>;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r1);

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z1 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isLiteral()>();

        if $z1 == 0 goto label2;

        $r13 = (com.hp.hpl.jena.rdf.model.Literal) $r6;

        $r14 = interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getString()>();

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = $r14;

        virtualinvoke $r16.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("Index: %s\n", $r15);

        $r17 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r17.<java.io.PrintStream: void flush()>();

        goto label1;

     label2:
        $r7 = new com.hp.hpl.jena.tdb.TDBException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong format for tdb:index: should be a string: found: ");

        $r10 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String displayStr(com.hp.hpl.jena.rdf.model.RDFNode)>($r6);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label3:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void flush()>();

        $r4 = new com.hp.hpl.jena.tdb.TDBException;

        specialinvoke $r4.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>("Custom indexes turned off");

        throw $r4;
    }

    public volatile java.lang.Object open(com.hp.hpl.jena.assembler.Assembler, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.assembler.Mode)
    {
        com.hp.hpl.jena.assembler.Assembler r1;
        com.hp.hpl.jena.assembler.Mode r3;
        com.hp.hpl.jena.rdf.model.Model $r4;
        com.hp.hpl.jena.tdb.assembler.TDBGraphAssembler r0;
        com.hp.hpl.jena.rdf.model.Resource r2;

        r0 := @this: com.hp.hpl.jena.tdb.assembler.TDBGraphAssembler;

        r1 := @parameter0: com.hp.hpl.jena.assembler.Assembler;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r3 := @parameter2: com.hp.hpl.jena.assembler.Mode;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.tdb.assembler.TDBGraphAssembler: com.hp.hpl.jena.rdf.model.Model open(com.hp.hpl.jena.assembler.Assembler,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.assembler.Mode)>(r1, r2, r3);

        return $r4;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.tdb.assembler.TDBGraphAssembler: com.hp.hpl.jena.tdb.assembler.IndexAssembler indexAssembler> = null;

        return;
    }
}
