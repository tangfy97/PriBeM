public class com.google.gxp.base.dynamic.StubGxpTemplate extends com.google.gxp.base.GxpTemplate
{
    protected static com.google.gxp.compiler.fs.FileSystem systemFS;
    private static final com.google.gxp.compiler.codegen.CodeGeneratorFactory codeGeneratorFactory;
    private static final java.util.Set OUTPUT_LANGUAGES;
    private static javax.tools.JavaCompiler javaCompiler;
    private static final java.lang.reflect.Method DEFINE_CLASS;
    private static final java.security.ProtectionDomain PROTECTION_DOMAIN;
    private static final java.util.regex.Pattern LINE_DIRECTIVE;

    public void <init>()
    {
        com.google.gxp.base.dynamic.StubGxpTemplate r0;

        r0 := @this: com.google.gxp.base.dynamic.StubGxpTemplate;

        specialinvoke r0.<com.google.gxp.base.GxpTemplate: void <init>()>();

        return;
    }

    public static void setSystemFileSystem(com.google.gxp.compiler.fs.FileSystem)
    {
        com.google.gxp.compiler.fs.FileSystem r0;

        r0 := @parameter0: com.google.gxp.compiler.fs.FileSystem;

        <com.google.gxp.base.dynamic.StubGxpTemplate: com.google.gxp.compiler.fs.FileSystem systemFS> = r0;

        return;
    }

    public static void setJavaCompiler(javax.tools.JavaCompiler)
    {
        javax.tools.JavaCompiler r0;

        r0 := @parameter0: javax.tools.JavaCompiler;

        <com.google.gxp.base.dynamic.StubGxpTemplate: javax.tools.JavaCompiler javaCompiler> = r0;

        return;
    }

    protected static com.google.gxp.compiler.fs.FileRef parseFilename(java.lang.String)
    {
        java.lang.String r0;
        com.google.gxp.compiler.fs.FileSystem $r1;
        com.google.gxp.compiler.fs.FileRef $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.google.gxp.base.dynamic.StubGxpTemplate: com.google.gxp.compiler.fs.FileSystem systemFS>;

        $r2 = interfaceinvoke $r1.<com.google.gxp.compiler.fs.FileSystem: com.google.gxp.compiler.fs.FileRef parseFilename(java.lang.String)>(r0);

        return $r2;
    }

    protected static transient java.util.List parseFilenameList(java.lang.String[])
    {
        int i0, i1;
        java.lang.String[] r1;
        java.lang.String r2;
        com.google.gxp.compiler.fs.FileRef $r3;
        java.util.ArrayList $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        $r3 = staticinvoke <com.google.gxp.base.dynamic.StubGxpTemplate: com.google.gxp.compiler.fs.FileRef parseFilename(java.lang.String)>(r2);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    protected static com.google.gxp.compiler.alerts.AlertPolicy createAlertPolicy(byte[])
    {
        byte[] r1;
        java.io.ObjectInputStream $r2;
        java.io.IOException $r5;
        java.lang.RuntimeException $r6, $r8;
        com.google.gxp.compiler.alerts.AlertPolicy $r4;
        java.io.ByteArrayInputStream $r0;
        java.lang.Object $r3;
        java.lang.ClassNotFoundException $r7;

        r1 := @parameter0: byte[];

     label1:
        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r2 = new java.io.ObjectInputStream;

        specialinvoke $r2.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r0);

        $r3 = virtualinvoke $r2.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = (com.google.gxp.compiler.alerts.AlertPolicy) $r3;

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }

    protected static com.google.gxp.compiler.fs.FileRef compileGxp(com.google.gxp.compiler.fs.InMemoryFileSystem, java.util.List, java.util.List, java.util.List, java.lang.String, long, com.google.gxp.compiler.alerts.AlertPolicy) throws com.google.gxp.base.dynamic.GxpCompilationException
    {
        com.google.gxp.base.dynamic.StubGxpTemplate$1 $r27;
        com.google.gxp.compiler.parser.FileSystemEntityResolver $r13;
        com.google.gxp.compiler.CompilationSet$Builder $r15, $r18;
        com.google.gxp.compiler.codegen.CodeGeneratorFactory $r17;
        com.google.gxp.compiler.CompilationSet $r20;
        com.google.gxp.compiler.alerts.AlertPolicy r28;
        com.google.gxp.compiler.alerts.AlertSetBuilder $r6;
        boolean $z0;
        com.google.gxp.compiler.schema.BuiltinSchemaFactory $r11;
        java.util.Set $r19, $r29;
        com.google.gxp.compiler.fs.InMemoryFileSystem r3;
        com.google.gxp.compiler.parser.Parser $r12;
        java.util.List r1, r2, r10;
        com.google.gxp.compiler.parser.XmlParser $r14;
        com.google.gxp.base.dynamic.GxpCompilationException$Gxp $r32;
        java.lang.StringBuilder $r21, $r23, $r24, $r25;
        long l0;
        com.google.gxp.compiler.fs.SourcePathFileSystem $r0;
        com.google.gxp.compiler.SimpleCompilationManager $r16;
        java.lang.String r22, $r26;
        com.google.gxp.compiler.fs.FileRef $r5, $r31;
        com.google.gxp.compiler.schema.SchemaFactory[] $r8;
        com.google.gxp.compiler.schema.FileBackedSchemaFactory $r9;
        com.google.gxp.compiler.alerts.AlertSet $r30;
        com.google.gxp.compiler.fs.FileSystem $r4;
        com.google.gxp.compiler.schema.DelegatingSchemaFactory $r7;

        r3 := @parameter0: com.google.gxp.compiler.fs.InMemoryFileSystem;

        r2 := @parameter1: java.util.List;

        r10 := @parameter2: java.util.List;

        r1 := @parameter3: java.util.List;

        r22 := @parameter4: java.lang.String;

        l0 := @parameter5: long;

        r28 := @parameter6: com.google.gxp.compiler.alerts.AlertPolicy;

        $r0 = new com.google.gxp.compiler.fs.SourcePathFileSystem;

        $r4 = <com.google.gxp.base.dynamic.StubGxpTemplate: com.google.gxp.compiler.fs.FileSystem systemFS>;

        $r5 = virtualinvoke r3.<com.google.gxp.compiler.fs.InMemoryFileSystem: com.google.gxp.compiler.fs.FileRef getRoot()>();

        specialinvoke $r0.<com.google.gxp.compiler.fs.SourcePathFileSystem: void <init>(com.google.gxp.compiler.fs.FileSystem,java.lang.Iterable,java.lang.Iterable,com.google.gxp.compiler.fs.FileRef)>($r4, r1, r2, $r5);

        $r6 = new com.google.gxp.compiler.alerts.AlertSetBuilder;

        specialinvoke $r6.<com.google.gxp.compiler.alerts.AlertSetBuilder: void <init>()>();

        $r7 = new com.google.gxp.compiler.schema.DelegatingSchemaFactory;

        $r8 = newarray (com.google.gxp.compiler.schema.SchemaFactory)[2];

        $r9 = new com.google.gxp.compiler.schema.FileBackedSchemaFactory;

        specialinvoke $r9.<com.google.gxp.compiler.schema.FileBackedSchemaFactory: void <init>(com.google.gxp.compiler.alerts.AlertSink,java.lang.Iterable)>($r6, r10);

        $r8[0] = $r9;

        $r11 = new com.google.gxp.compiler.schema.BuiltinSchemaFactory;

        specialinvoke $r11.<com.google.gxp.compiler.schema.BuiltinSchemaFactory: void <init>(com.google.gxp.compiler.alerts.AlertSink)>($r6);

        $r8[1] = $r11;

        specialinvoke $r7.<com.google.gxp.compiler.schema.DelegatingSchemaFactory: void <init>(com.google.gxp.compiler.schema.SchemaFactory[])>($r8);

        $r12 = new com.google.gxp.compiler.parser.Parser;

        $r14 = <com.google.gxp.compiler.parser.SaxXmlParser: com.google.gxp.compiler.parser.XmlParser INSTANCE>;

        $r13 = new com.google.gxp.compiler.parser.FileSystemEntityResolver;

        specialinvoke $r13.<com.google.gxp.compiler.parser.FileSystemEntityResolver: void <init>(com.google.gxp.compiler.fs.FileSystem)>($r0);

        specialinvoke $r12.<com.google.gxp.compiler.parser.Parser: void <init>(com.google.gxp.compiler.schema.SchemaFactory,com.google.gxp.compiler.parser.XmlParser,com.google.gxp.compiler.parser.SourceEntityResolver)>($r7, $r14, $r13);

        $r15 = new com.google.gxp.compiler.CompilationSet$Builder;

        $r17 = <com.google.gxp.base.dynamic.StubGxpTemplate: com.google.gxp.compiler.codegen.CodeGeneratorFactory codeGeneratorFactory>;

        $r16 = <com.google.gxp.compiler.SimpleCompilationManager: com.google.gxp.compiler.SimpleCompilationManager INSTANCE>;

        specialinvoke $r15.<com.google.gxp.compiler.CompilationSet$Builder: void <init>(com.google.gxp.compiler.parser.Parser,com.google.gxp.compiler.codegen.CodeGeneratorFactory,com.google.gxp.compiler.CompilationManager)>($r12, $r17, $r16);

        $r18 = virtualinvoke $r15.<com.google.gxp.compiler.CompilationSet$Builder: com.google.gxp.compiler.CompilationSet$Builder setCompilationVersion(long)>(l0);

        $r19 = virtualinvoke $r0.<com.google.gxp.compiler.fs.SourcePathFileSystem: java.util.Set getSourceFileRefs()>();

        $r20 = virtualinvoke $r18.<com.google.gxp.compiler.CompilationSet$Builder: com.google.gxp.compiler.CompilationSet build(java.lang.Iterable)>($r19);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".java");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27 = new com.google.gxp.base.dynamic.StubGxpTemplate$1;

        specialinvoke $r27.<com.google.gxp.base.dynamic.StubGxpTemplate$1: void <init>(java.lang.String)>($r26);

        $r29 = <com.google.gxp.base.dynamic.StubGxpTemplate: java.util.Set OUTPUT_LANGUAGES>;

        virtualinvoke $r20.<com.google.gxp.compiler.CompilationSet: void compile(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.alerts.AlertPolicy,java.lang.Iterable,com.google.gxp.com.google.common.base.Predicate)>($r6, r28, $r29, $r27);

        $r30 = virtualinvoke $r6.<com.google.gxp.compiler.alerts.AlertSetBuilder: com.google.gxp.compiler.alerts.AlertSet buildAndClear()>();

        $z0 = virtualinvoke $r30.<com.google.gxp.compiler.alerts.AlertSet: boolean hasErrors(com.google.gxp.compiler.alerts.AlertPolicy)>(r28);

        if $z0 == 0 goto label1;

        $r32 = new com.google.gxp.base.dynamic.GxpCompilationException$Gxp;

        specialinvoke $r32.<com.google.gxp.base.dynamic.GxpCompilationException$Gxp: void <init>(com.google.gxp.compiler.alerts.AlertPolicy,com.google.gxp.compiler.alerts.AlertSet)>(r28, $r30);

        throw $r32;

     label1:
        $r31 = virtualinvoke r3.<com.google.gxp.compiler.fs.InMemoryFileSystem: com.google.gxp.compiler.fs.FileRef parseFilename(java.lang.String)>($r26);

        return $r31;
    }

    protected static java.util.Map compileJava(com.google.gxp.compiler.fs.InMemoryFileSystem, java.lang.String, long)
    {
        byte[] $r33;
        com.google.gxp.compiler.fs.JavaFileRef $r29;
        java.util.Locale $r3;
        java.util.Map $r25;
        javax.tools.DiagnosticCollector $r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.tools.StandardLocation $r13, $r30;
        javax.tools.JavaCompiler $r4, $r16;
        java.util.Set $r21;
        com.google.gxp.compiler.fs.InMemoryFileSystem r6;
        com.google.gxp.com.google.common.collect.ImmutableList $r15;
        com.google.gxp.base.dynamic.GxpCompilationException$Java $r38;
        javax.tools.JavaFileObject $r14;
        java.util.List $r18, $r19, $r23, r42;
        com.google.gxp.base.dynamic.GxpCompilationException $r41;
        java.lang.StringBuilder $r7, $r9, $r10, $r34, $r35, $r36;
        java.lang.Throwable $r39;
        long l0;
        java.util.ArrayList $r20;
        java.nio.charset.Charset $r2;
        int $i1, $i2;
        java.lang.String r8, $r11, $r31, $r37;
        javax.tools.JavaFileObject$Kind $r12, $r27, $r28;
        com.google.gxp.compiler.fs.FileRef r43;
        com.google.gxp.compiler.fs.JavaFileManagerImpl $r1;
        java.util.Iterator $r22;
        com.google.gxp.base.dynamic.GxpCompilationException$Throw $r40;
        javax.tools.StandardJavaFileManager $r5;
        javax.tools.JavaCompiler$CompilationTask $r17;
        java.lang.Class $r24;
        java.lang.Object $r26;
        java.io.InputStream $r32;

        r6 := @parameter0: com.google.gxp.compiler.fs.InMemoryFileSystem;

        r8 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $r0 = new javax.tools.DiagnosticCollector;

        specialinvoke $r0.<javax.tools.DiagnosticCollector: void <init>()>();

        $r1 = new com.google.gxp.compiler.fs.JavaFileManagerImpl;

        $r4 = <com.google.gxp.base.dynamic.StubGxpTemplate: javax.tools.JavaCompiler javaCompiler>;

        $r3 = <java.util.Locale: java.util.Locale US>;

        $r2 = <com.google.gxp.com.google.common.base.Charsets: java.nio.charset.Charset US_ASCII>;

        $r5 = interfaceinvoke $r4.<javax.tools.JavaCompiler: javax.tools.StandardJavaFileManager getStandardFileManager(javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset)>($r0, $r3, $r2);

        specialinvoke $r1.<com.google.gxp.compiler.fs.JavaFileManagerImpl: void <init>(javax.tools.JavaFileManager,com.google.gxp.compiler.fs.FileSystem)>($r5, r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label01:
        $r13 = <javax.tools.StandardLocation: javax.tools.StandardLocation SOURCE_PATH>;

        $r12 = <javax.tools.JavaFileObject$Kind: javax.tools.JavaFileObject$Kind SOURCE>;

        $r14 = interfaceinvoke $r1.<javax.tools.JavaFileManager: javax.tools.JavaFileObject getJavaFileForInput(javax.tools.JavaFileManager$Location,java.lang.String,javax.tools.JavaFileObject$Kind)>($r13, $r11, $r12);

        $r15 = staticinvoke <com.google.gxp.com.google.common.collect.ImmutableList: com.google.gxp.com.google.common.collect.ImmutableList of(java.lang.Object)>($r14);

        $r16 = <com.google.gxp.base.dynamic.StubGxpTemplate: javax.tools.JavaCompiler javaCompiler>;

        $r17 = interfaceinvoke $r16.<javax.tools.JavaCompiler: javax.tools.JavaCompiler$CompilationTask getTask(java.io.Writer,javax.tools.JavaFileManager,javax.tools.DiagnosticListener,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)>(null, $r1, $r0, null, null, $r15);

        interfaceinvoke $r17.<javax.tools.JavaCompiler$CompilationTask: java.lang.Boolean call()>();

        $r18 = virtualinvoke $r0.<javax.tools.DiagnosticCollector: java.util.List getDiagnostics()>();

        $r19 = staticinvoke <com.google.gxp.base.dynamic.StubGxpTemplate: java.util.List filterErrors(java.util.List)>($r18);

        $z0 = interfaceinvoke $r19.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label02;

        $r38 = new com.google.gxp.base.dynamic.GxpCompilationException$Java;

        specialinvoke $r38.<com.google.gxp.base.dynamic.GxpCompilationException$Java: void <init>(java.util.List)>($r19);

        throw $r38;

     label02:
        $r20 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r42 = $r20;

        $r21 = virtualinvoke r6.<com.google.gxp.compiler.fs.InMemoryFileSystem: java.util.Set getManifest()>();

        $r22 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r26 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r43 = (com.google.gxp.compiler.fs.FileRef) $r26;

        $r27 = virtualinvoke r43.<com.google.gxp.compiler.fs.FileRef: javax.tools.JavaFileObject$Kind getKind()>();

        $r28 = <javax.tools.JavaFileObject$Kind: javax.tools.JavaFileObject$Kind CLASS>;

        $z2 = virtualinvoke $r27.<javax.tools.JavaFileObject$Kind: boolean equals(java.lang.Object)>($r28);

        if $z2 == 0 goto label05;

        $r30 = <javax.tools.StandardLocation: javax.tools.StandardLocation CLASS_OUTPUT>;

        $r29 = new com.google.gxp.compiler.fs.JavaFileRef;

        specialinvoke $r29.<com.google.gxp.compiler.fs.JavaFileRef: void <init>(com.google.gxp.compiler.fs.FileRef)>(r43);

        $r31 = interfaceinvoke $r1.<javax.tools.JavaFileManager: java.lang.String inferBinaryName(javax.tools.JavaFileManager$Location,javax.tools.JavaFileObject)>($r30, $r29);

        $z3 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 != 0 goto label04;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        $z4 = virtualinvoke $r31.<java.lang.String: boolean startsWith(java.lang.String)>($r37);

        if $z4 == 0 goto label05;

     label04:
        $r32 = virtualinvoke r43.<com.google.gxp.compiler.fs.FileRef: java.io.InputStream openInputStream()>();

        $r33 = staticinvoke <com.google.gxp.com.google.common.io.Bytes: byte[] toByteArray(java.io.InputStream)>($r32);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r33);

     label05:
        goto label03;

     label06:
        $i1 = interfaceinvoke r42.<java.util.List: int size()>();

        $r23 = staticinvoke <com.google.gxp.base.dynamic.StubGxpTemplate: java.util.List defineClasses(java.util.List)>(r42);

        r42 = $r23;

        $i2 = interfaceinvoke $r23.<java.util.List: int size()>();

        if $i2 == 0 goto label07;

        if $i2 != $i1 goto label06;

     label07:
        $r24 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r11);

        $r25 = staticinvoke <com.google.gxp.base.dynamic.StubGxpTemplate: java.util.Map getMethodMap(java.lang.Class)>($r24);

     label08:
        return $r25;

     label09:
        $r41 := @caughtexception;

        throw $r41;

     label10:
        $r39 := @caughtexception;

        $r40 = new com.google.gxp.base.dynamic.GxpCompilationException$Throw;

        specialinvoke $r40.<com.google.gxp.base.dynamic.GxpCompilationException$Throw: void <init>(java.lang.Throwable)>($r39);

        throw $r40;

        catch com.google.gxp.base.dynamic.GxpCompilationException from label01 to label08 with label09;
        catch java.lang.Throwable from label01 to label08 with label10;
    }

    protected static java.util.Map getMethodMap(java.lang.Class)
    {
        int i0, i1;
        java.util.HashMap $r0;
        java.lang.Class r1;
        java.lang.String $r4;
        java.lang.reflect.Method r3;
        java.lang.reflect.Method[] $r2;

        r1 := @parameter0: java.lang.Class;

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = $r2[i1];

        $r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static java.util.List defineClasses(java.util.List) throws java.lang.Throwable
    {
        byte[] r4;
        java.util.List r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.NoClassDefFoundError $r5;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (byte[]) $r3;

     label2:
        staticinvoke <com.google.gxp.base.dynamic.StubGxpTemplate: java.lang.Class defineClass(byte[])>(r4);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r4);

     label5:
        goto label1;

     label6:
        return $r0;

        catch java.lang.NoClassDefFoundError from label2 to label3 with label4;
    }

    protected static java.lang.Object exec(java.util.Map, java.lang.String, java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Throwable $r9;
        java.lang.Object[] r3;
        com.google.gxp.base.dynamic.GxpCompilationException$Throw $r7;
        java.lang.Exception $r6;
        java.lang.reflect.InvocationTargetException $r8;
        java.util.Map r0;
        java.lang.Object $r2, $r5;
        java.lang.String r1;
        java.lang.reflect.Method $r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

     label1:
        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.reflect.Method) $r2;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, r3);

     label2:
        return $r5;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        throw $r9;

     label4:
        $r6 := @caughtexception;

        $r7 = new com.google.gxp.base.dynamic.GxpCompilationException$Throw;

        specialinvoke $r7.<com.google.gxp.base.dynamic.GxpCompilationException$Throw: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    protected static java.lang.Object execNoExceptions(java.util.Map, java.lang.String, java.lang.Object[])
    {
        java.lang.Throwable $r4;
        java.lang.Object[] r2;
        com.google.gxp.base.dynamic.GxpCompilationException$Throw $r5;
        java.lang.Error $r7;
        java.lang.RuntimeException $r6;
        java.util.Map r0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

     label1:
        $r3 = staticinvoke <com.google.gxp.base.dynamic.StubGxpTemplate: java.lang.Object exec(java.util.Map,java.lang.String,java.lang.Object[])>(r0, r1, r2);

     label2:
        return $r3;

     label3:
        $r7 := @caughtexception;

        throw $r7;

     label4:
        $r6 := @caughtexception;

        throw $r6;

     label5:
        $r4 := @caughtexception;

        $r5 = new com.google.gxp.base.dynamic.GxpCompilationException$Throw;

        specialinvoke $r5.<com.google.gxp.base.dynamic.GxpCompilationException$Throw: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.lang.Error from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
    }

    private static java.util.List filterErrors(java.util.List)
    {
        java.util.Iterator $r2;
        java.util.ArrayList $r0;
        javax.tools.Diagnostic$Kind $r6, $r7;
        java.util.List r1, $r3;
        javax.tools.Diagnostic r5;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.List;

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (javax.tools.Diagnostic) $r4;

        $r6 = interfaceinvoke r5.<javax.tools.Diagnostic: javax.tools.Diagnostic$Kind getKind()>();

        $r7 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind ERROR>;

        $z1 = virtualinvoke $r6.<javax.tools.Diagnostic$Kind: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r5);

     label2:
        goto label1;

     label3:
        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r3;
    }

    private static java.lang.Class defineClass(byte[]) throws java.lang.Throwable
    {
        java.lang.Throwable $r10;
        byte[] r1;
        java.lang.Object[] $r0;
        java.lang.Integer $r2, $r3;
        java.lang.reflect.InvocationTargetException $r9;
        java.security.ProtectionDomain $r4;
        int $i0;
        java.lang.Object $r7;
        java.lang.Class $r8;
        java.lang.ClassLoader $r6;
        java.lang.reflect.Method $r5;

        r1 := @parameter0: byte[];

        $r0 = newarray (java.lang.Object)[5];

        $r0[0] = null;

        $r0[1] = r1;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(0);

        $r0[2] = $r2;

        $r3 = new java.lang.Integer;

        $i0 = lengthof r1;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i0);

        $r0[3] = $r3;

        $r4 = <com.google.gxp.base.dynamic.StubGxpTemplate: java.security.ProtectionDomain PROTECTION_DOMAIN>;

        $r0[4] = $r4;

     label1:
        $r5 = <com.google.gxp.base.dynamic.StubGxpTemplate: java.lang.reflect.Method DEFINE_CLASS>;

        $r6 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r7 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r0);

        $r8 = (java.lang.Class) $r7;

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        throw $r10;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }

    protected static void rewriteStackTraceElements(java.lang.Throwable, com.google.gxp.compiler.fs.FileRef)
    {
        java.lang.Integer $r29;
        java.util.regex.Matcher $r21;
        boolean $z0, $z1;
        java.io.Reader $r15;
        java.lang.Exception $r31;
        java.util.List $r16;
        java.lang.StackTraceElement[] $r5;
        java.lang.StringBuilder $r11, $r12, $r33;
        java.util.regex.Pattern $r20;
        java.lang.Throwable r4;
        java.lang.String[] $r8, $r24;
        java.lang.AssertionError $r35;
        java.nio.charset.Charset $r14;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i8;
        java.lang.StackTraceElement $r6, $r17, $r22, $r26, $r34;
        java.lang.String $r1, $r2, $r3, $r7, $r10, $r13, r19, $r23, $r27, $r28, $r30;
        com.google.gxp.compiler.fs.FileRef r0;
        java.lang.Object $r18;

        r4 := @parameter0: java.lang.Throwable;

        r0 := @parameter1: com.google.gxp.compiler.fs.FileRef;

     label1:
        if r0 == null goto label7;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.fs.FileRef: java.lang.String getName()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r5 = virtualinvoke r4.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i5 = 0;

     label2:
        $i0 = lengthof $r5;

        if i5 >= $i0 goto label7;

        $r6 = $r5[i5];

        $r7 = virtualinvoke $r6.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label6;

        $r8 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("[\\.\\$]");

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $i1 = lengthof $r8;

        $i2 = $i1 - 3;

        $r10 = $r8[$i2];

        $r11 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".gxp");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = <com.google.gxp.com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>;

        $r15 = virtualinvoke r0.<com.google.gxp.compiler.fs.FileRef: java.io.Reader openReader(java.nio.charset.Charset)>($r14);

        $r16 = staticinvoke <com.google.gxp.com.google.common.io.Characters: java.util.List readLines(java.lang.Readable)>($r15);

        $r17 = $r5[i5];

        $i3 = virtualinvoke $r17.<java.lang.StackTraceElement: int getLineNumber()>();

        $i4 = $i3 - 1;

        $r18 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>($i4);

        r19 = (java.lang.String) $r18;

        $r20 = <com.google.gxp.base.dynamic.StubGxpTemplate: java.util.regex.Pattern LINE_DIRECTIVE>;

        $r21 = virtualinvoke $r20.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r19);

        $z1 = virtualinvoke $r21.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label3;

        $r28 = virtualinvoke $r21.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r28);

        $i6 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();

        goto label4;

     label3:
        $i8 = (int) -1;

        $i6 = $i8;

     label4:
        $r22 = $r5[i5];

        $r23 = virtualinvoke $r22.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r24 = virtualinvoke $r23.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\$");

        $r30 = $r24[0];

        $r34 = new java.lang.StackTraceElement;

        $r26 = $r5[i5];

        $r27 = virtualinvoke $r26.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        specialinvoke $r34.<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>($r30, $r27, $r13, $i6);

        $r5[i5] = $r34;

        virtualinvoke r4.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r5);

     label5:
        return;

     label6:
        i5 = i5 + 1;

        goto label2;

     label7:
        goto label9;

     label8:
        $r31 := @caughtexception;

        $r35 = new java.lang.AssertionError;

        specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>($r31);

        throw $r35;

     label9:
        return;

        catch java.lang.Exception from label1 to label5 with label8;
        catch java.lang.Exception from label6 to label7 with label8;
    }

    static void <clinit>()
    {
        com.google.gxp.base.dynamic.StubGxpTemplate$2 $r5;
        com.google.gxp.compiler.fs.SystemFileSystem $r0;
        javax.tools.JavaCompiler $r4;
        java.util.Set $r3;
        com.google.gxp.compiler.codegen.DefaultCodeGeneratorFactory $r1;
        com.google.gxp.compiler.base.OutputLanguage $r2;
        java.security.ProtectionDomain $r9;
        java.lang.Object $r6;
        java.lang.Class $r8;
        java.util.regex.Pattern $r10;
        java.lang.reflect.Method $r7;

        $r0 = <com.google.gxp.compiler.fs.SystemFileSystem: com.google.gxp.compiler.fs.SystemFileSystem INSTANCE>;

        <com.google.gxp.base.dynamic.StubGxpTemplate: com.google.gxp.compiler.fs.FileSystem systemFS> = $r0;

        $r1 = new com.google.gxp.compiler.codegen.DefaultCodeGeneratorFactory;

        specialinvoke $r1.<com.google.gxp.compiler.codegen.DefaultCodeGeneratorFactory: void <init>()>();

        <com.google.gxp.base.dynamic.StubGxpTemplate: com.google.gxp.compiler.codegen.CodeGeneratorFactory codeGeneratorFactory> = $r1;

        $r2 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage DYNAMIC_IMPL_JAVA>;

        $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r2);

        <com.google.gxp.base.dynamic.StubGxpTemplate: java.util.Set OUTPUT_LANGUAGES> = $r3;

        $r4 = staticinvoke <javax.tools.ToolProvider: javax.tools.JavaCompiler getSystemJavaCompiler()>();

        <com.google.gxp.base.dynamic.StubGxpTemplate: javax.tools.JavaCompiler javaCompiler> = $r4;

        $r5 = new com.google.gxp.base.dynamic.StubGxpTemplate$2;

        specialinvoke $r5.<com.google.gxp.base.dynamic.StubGxpTemplate$2: void <init>()>();

        $r6 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r5);

        $r7 = (java.lang.reflect.Method) $r6;

        <com.google.gxp.base.dynamic.StubGxpTemplate: java.lang.reflect.Method DEFINE_CLASS> = $r7;

        $r8 = class "Lcom/google/gxp/base/dynamic/StubGxpTemplate;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        <com.google.gxp.base.dynamic.StubGxpTemplate: java.security.ProtectionDomain PROTECTION_DOMAIN> = $r9;

        $r10 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^.* // (.*): L(\\d*), C(\\d*)$");

        <com.google.gxp.base.dynamic.StubGxpTemplate: java.util.regex.Pattern LINE_DIRECTIVE> = $r10;

        return;
    }
}
