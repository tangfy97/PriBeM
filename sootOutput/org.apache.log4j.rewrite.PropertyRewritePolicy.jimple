public class org.apache.log4j.rewrite.PropertyRewritePolicy extends java.lang.Object implements org.apache.log4j.rewrite.RewritePolicy
{
    private java.util.Map properties;

    public void <init>()
    {
        org.apache.log4j.rewrite.PropertyRewritePolicy r0;
        java.util.Map $r1;

        r0 := @this: org.apache.log4j.rewrite.PropertyRewritePolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        r0.<org.apache.log4j.rewrite.PropertyRewritePolicy: java.util.Map properties> = $r1;

        return;
    }

    public void setProperties(java.lang.String)
    {
        java.lang.Throwable $r12;
        java.util.HashMap $r0;
        java.util.StringTokenizer $r1, $r4;
        org.apache.log4j.rewrite.PropertyRewritePolicy r3;
        java.lang.Object $r6, $r9;
        java.lang.String r2, $r5, $r7, $r8, $r10, $r11;
        boolean $z0;

        r3 := @this: org.apache.log4j.rewrite.PropertyRewritePolicy;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = new java.util.StringTokenizer;

        specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r2, ",");

     label1:
        $z0 = virtualinvoke $r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r4 = new java.util.StringTokenizer;

        $r5 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r5, "=");

        $r6 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.Object nextElement()>();

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        $r9 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.Object nextElement()>();

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r11);

        goto label1;

     label2:
        entermonitor r3;

     label3:
        r3.<org.apache.log4j.rewrite.PropertyRewritePolicy: java.util.Map properties> = $r0;

        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        exitmonitor r3;

     label6:
        throw $r12;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public org.apache.log4j.spi.LoggingEvent rewrite(org.apache.log4j.spi.LoggingEvent)
    {
        java.util.HashMap $r3;
        long $l0;
        java.util.Map $r1, $r4, $r5;
        org.apache.log4j.Level $r12;
        java.lang.String $r9, $r11, $r14, $r16;
        boolean $z0, $z1, $z2;
        org.apache.log4j.Category $r10, $r23;
        java.util.Map$Entry r19;
        java.util.Iterator $r7;
        org.apache.log4j.spi.LoggingEvent r2, $r8;
        java.util.Set $r6;
        org.apache.log4j.spi.ThrowableInformation $r15;
        org.apache.log4j.rewrite.PropertyRewritePolicy r0;
        java.lang.Object $r13, $r18, $r20, $r21, $r22;
        org.apache.log4j.spi.LocationInfo $r17;

        r0 := @this: org.apache.log4j.rewrite.PropertyRewritePolicy;

        r2 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $r1 = r0.<org.apache.log4j.rewrite.PropertyRewritePolicy: java.util.Map properties>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r3 = new java.util.HashMap;

        $r4 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.util.Map getProperties()>();

        specialinvoke $r3.<java.util.HashMap: void <init>(java.util.Map)>($r4);

        $r5 = r0.<org.apache.log4j.rewrite.PropertyRewritePolicy: java.util.Map properties>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r18 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.util.Map$Entry) $r18;

        $r20 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z2 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r20);

        if $z2 != 0 goto label2;

        $r21 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r22 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r22);

     label2:
        goto label1;

     label3:
        $r8 = new org.apache.log4j.spi.LoggingEvent;

        $r9 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.String getFQNOfLoggerClass()>();

        $r10 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Category getLogger()>();

        if $r10 == null goto label4;

        $r23 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Category getLogger()>();

        goto label5;

     label4:
        $r11 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.String getLoggerName()>();

        $r23 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>($r11);

     label5:
        $l0 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: long getTimeStamp()>();

        $r12 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Level getLevel()>();

        $r13 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.Object getMessage()>();

        $r14 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.String getThreadName()>();

        $r15 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.ThrowableInformation getThrowableInformation()>();

        $r16 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.String getNDC()>();

        $r17 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.LocationInfo getLocationInformation()>();

        specialinvoke $r8.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,long,org.apache.log4j.Level,java.lang.Object,java.lang.String,org.apache.log4j.spi.ThrowableInformation,java.lang.String,org.apache.log4j.spi.LocationInfo,java.util.Map)>($r9, $r23, $l0, $r12, $r13, $r14, $r15, $r16, $r17, $r3);

        return $r8;

     label6:
        return r2;
    }
}
