public class org.apache.batik.ext.awt.image.renderable.FilterAsAlphaRable extends org.apache.batik.ext.awt.image.renderable.AbstractRable
{

    public void <init>(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.ext.awt.image.renderable.FilterAsAlphaRable r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.FilterAsAlphaRable;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        return;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getSource()
    {
        java.util.Vector $r1;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.renderable.FilterAsAlphaRable r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.FilterAsAlphaRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        return $r3;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        org.apache.batik.ext.awt.image.renderable.FilterAsAlphaRable r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;
        java.awt.geom.Rectangle2D $r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.FilterAsAlphaRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.FilterAsAlphaRable: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r2 = interfaceinvoke $r1.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r2;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        java.awt.RenderingHints $r2, $r14, r15;
        org.apache.batik.ext.awt.image.rendered.FilterAsAlphaRed $r13;
        org.apache.batik.ext.awt.image.renderable.FilterAsAlphaRable r6;
        java.awt.Shape $r3, r16;
        java.awt.image.RenderedImage $r9;
        java.awt.geom.AffineTransform $r1;
        org.apache.batik.ext.awt.image.renderable.Filter $r7;
        java.awt.image.renderable.RenderContext r0, $r8;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r10;
        java.awt.RenderingHints$Key $r5;
        java.lang.Object $r4, $r11, $r12;

        r6 := @this: org.apache.batik.ext.awt.image.renderable.FilterAsAlphaRable;

        r0 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.geom.AffineTransform getTransform()>();

        $r2 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        r15 = $r2;

        if $r2 != null goto label1;

        $r14 = new java.awt.RenderingHints;

        specialinvoke $r14.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r15 = $r14;

     label1:
        $r3 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.Shape getAreaOfInterest()>();

        r16 = $r3;

        if $r3 != null goto label2;

        r16 = virtualinvoke r6.<org.apache.batik.ext.awt.image.renderable.FilterAsAlphaRable: java.awt.geom.Rectangle2D getBounds2D()>();

     label2:
        $r5 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_COLORSPACE>;

        $r4 = <org.apache.batik.ext.awt.ColorSpaceHintKey: java.lang.Object VALUE_COLORSPACE_ALPHA_CONVERT>;

        virtualinvoke r15.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r4);

        $r7 = virtualinvoke r6.<org.apache.batik.ext.awt.image.renderable.FilterAsAlphaRable: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r8 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r8.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r1, r16, r15);

        $r9 = interfaceinvoke $r7.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r8);

        if $r9 != null goto label3;

        return null;

     label3:
        $r10 = staticinvoke <org.apache.batik.ext.awt.image.rendered.RenderedImageCachableRed: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r9);

        $r11 = interfaceinvoke $r10.<java.awt.image.RenderedImage: java.lang.Object getProperty(java.lang.String)>("org.apache.batik.gvt.filter.Colorspace");

        $r12 = <org.apache.batik.ext.awt.ColorSpaceHintKey: java.lang.Object VALUE_COLORSPACE_ALPHA_CONVERT>;

        if $r11 != $r12 goto label4;

        return $r10;

     label4:
        $r13 = new org.apache.batik.ext.awt.image.rendered.FilterAsAlphaRed;

        specialinvoke $r13.<org.apache.batik.ext.awt.image.rendered.FilterAsAlphaRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)>($r10);

        return $r13;
    }
}
