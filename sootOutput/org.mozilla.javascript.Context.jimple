public class org.mozilla.javascript.Context extends java.lang.Object
{
    public static final int VERSION_UNKNOWN;
    public static final int VERSION_DEFAULT;
    public static final int VERSION_1_0;
    public static final int VERSION_1_1;
    public static final int VERSION_1_2;
    public static final int VERSION_1_3;
    public static final int VERSION_1_4;
    public static final int VERSION_1_5;
    public static final int VERSION_1_6;
    public static final int FEATURE_NON_ECMA_GET_YEAR;
    public static final int FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME;
    public static final int FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER;
    public static final int FEATURE_TO_STRING_AS_SOURCE;
    public static final int FEATURE_PARENT_PROTO_PROPRTIES;
    public static final int FEATURE_E4X;
    public static final int FEATURE_DYNAMIC_SCOPE;
    public static final int FEATURE_STRICT_VARS;
    public static final int FEATURE_STRICT_EVAL;
    public static final java.lang.String languageVersionProperty;
    public static final java.lang.String errorReporterProperty;
    public static final java.lang.Object[] emptyArgs;
    private static java.lang.Class codegenClass;
    private static java.lang.String implementationVersion;
    private org.mozilla.javascript.ContextFactory factory;
    private boolean sealed;
    private java.lang.Object sealKey;
    org.mozilla.javascript.Scriptable topCallScope;
    org.mozilla.javascript.NativeCall currentActivationCall;
    org.mozilla.javascript.xml.XMLLib cachedXMLLib;
    org.mozilla.javascript.ObjToIntMap iterating;
    java.lang.Object interpreterSecurityDomain;
    int version;
    private org.mozilla.javascript.SecurityController securityController;
    private org.mozilla.javascript.ClassShutter classShutter;
    private org.mozilla.javascript.ErrorReporter errorReporter;
    org.mozilla.javascript.RegExpProxy regExpProxy;
    private java.util.Locale locale;
    private boolean generatingDebug;
    private boolean generatingDebugChanged;
    private boolean generatingSource;
    boolean compileFunctionsWithDynamicScopeFlag;
    boolean useDynamicScope;
    private int optimizationLevel;
    private int maximumInterpreterStackDepth;
    private org.mozilla.javascript.WrapFactory wrapFactory;
    org.mozilla.javascript.debug.Debugger debugger;
    private java.lang.Object debuggerData;
    private int enterCount;
    private java.lang.Object propertyListeners;
    private java.util.Hashtable hashtable;
    private java.lang.ClassLoader applicationClassLoader;
    private boolean creationEventWasSent;
    java.util.Hashtable activationNames;
    java.lang.Object lastInterpreterFrame;
    org.mozilla.javascript.ObjArray previousInterpreterInvocations;
    int instructionCount;
    int instructionThreshold;
    int scratchIndex;
    long scratchUint32;
    org.mozilla.javascript.Scriptable scratchScriptable;

    public void <init>()
    {
        java.lang.Class $r1;
        org.mozilla.javascript.Context r0;
        byte $b0;

        r0 := @this: org.mozilla.javascript.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.javascript.Context: boolean generatingSource> = 1;

        virtualinvoke r0.<org.mozilla.javascript.Context: void setLanguageVersion(int)>(0);

        $r1 = <org.mozilla.javascript.Context: java.lang.Class codegenClass>;

        if $r1 == null goto label1;

        $b0 = 0;

        goto label2;

     label1:
        $b0 = -1;

     label2:
        r0.<org.mozilla.javascript.Context: int optimizationLevel> = $b0;

        r0.<org.mozilla.javascript.Context: int maximumInterpreterStackDepth> = 2147483647;

        return;
    }

    public static org.mozilla.javascript.Context getCurrentContext()
    {
        org.mozilla.javascript.VMBridge $r0, $r2;
        org.mozilla.javascript.Context $r3;
        java.lang.Object $r1;

        $r0 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        $r1 = virtualinvoke $r0.<org.mozilla.javascript.VMBridge: java.lang.Object getThreadContextHelper()>();

        $r2 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.VMBridge: org.mozilla.javascript.Context getContext(java.lang.Object)>($r1);

        return $r3;
    }

    public static org.mozilla.javascript.Context enter()
    {
        org.mozilla.javascript.Context $r0;

        $r0 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context enter(org.mozilla.javascript.Context)>(null);

        return $r0;
    }

    public static org.mozilla.javascript.Context enter(org.mozilla.javascript.Context)
    {
        org.mozilla.javascript.Context r0, $r2;
        org.mozilla.javascript.ContextFactory $r1;

        r0 := @parameter0: org.mozilla.javascript.Context;

        $r1 = staticinvoke <org.mozilla.javascript.ContextFactory: org.mozilla.javascript.ContextFactory getGlobal()>();

        $r2 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context enter(org.mozilla.javascript.Context,org.mozilla.javascript.ContextFactory)>(r0, $r1);

        return $r2;
    }

    static final org.mozilla.javascript.Context enter(org.mozilla.javascript.Context, org.mozilla.javascript.ContextFactory)
    {
        java.lang.IllegalStateException $r4;
        int $i0, $i1, $i2, $i3;
        org.mozilla.javascript.ContextFactory $r5, r7, $r10;
        boolean $z0, $z1, $z2;
        org.mozilla.javascript.VMBridge $r0, $r2, $r6;
        org.mozilla.javascript.Context $r3, r9;
        java.lang.IllegalArgumentException $r8;
        java.lang.Object $r1;

        r9 := @parameter0: org.mozilla.javascript.Context;

        r7 := @parameter1: org.mozilla.javascript.ContextFactory;

        $r0 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        $r1 = virtualinvoke $r0.<org.mozilla.javascript.VMBridge: java.lang.Object getThreadContextHelper()>();

        $r2 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.VMBridge: org.mozilla.javascript.Context getContext(java.lang.Object)>($r1);

        if $r3 == null goto label04;

        if r9 == null goto label01;

        if r9 == $r3 goto label01;

        $i2 = r9.<org.mozilla.javascript.Context: int enterCount>;

        if $i2 == 0 goto label01;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot enter Context active on another thread");

        throw $r8;

     label01:
        $r10 = $r3.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory>;

        if $r10 == null goto label02;

        return $r3;

     label02:
        $z2 = $r3.<org.mozilla.javascript.Context: boolean sealed>;

        if $z2 == 0 goto label03;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label03:
        r9 = $r3;

        goto label09;

     label04:
        if r9 != null goto label05;

        r9 = virtualinvoke r7.<org.mozilla.javascript.ContextFactory: org.mozilla.javascript.Context makeContext()>();

        goto label06;

     label05:
        $z0 = r9.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label06;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label06:
        $i3 = r9.<org.mozilla.javascript.Context: int enterCount>;

        if $i3 != 0 goto label07;

        $r5 = r9.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory>;

        if $r5 == null goto label08;

     label07:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label08:
        $z1 = r9.<org.mozilla.javascript.Context: boolean creationEventWasSent>;

        if $z1 != 0 goto label09;

        r9.<org.mozilla.javascript.Context: boolean creationEventWasSent> = 1;

        virtualinvoke r7.<org.mozilla.javascript.ContextFactory: void onContextCreated(org.mozilla.javascript.Context)>(r9);

     label09:
        if $r3 != null goto label10;

        $r6 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        virtualinvoke $r6.<org.mozilla.javascript.VMBridge: void setContext(java.lang.Object,org.mozilla.javascript.Context)>($r1, r9);

     label10:
        $i0 = r9.<org.mozilla.javascript.Context: int enterCount>;

        $i1 = $i0 + 1;

        r9.<org.mozilla.javascript.Context: int enterCount> = $i1;

        return r9;
    }

    public static void exit()
    {
        org.mozilla.javascript.ContextFactory $r0;

        $r0 = staticinvoke <org.mozilla.javascript.ContextFactory: org.mozilla.javascript.ContextFactory getGlobal()>();

        staticinvoke <org.mozilla.javascript.Context: void exit(org.mozilla.javascript.ContextFactory)>($r0);

        return;
    }

    static void exit(org.mozilla.javascript.ContextFactory)
    {
        java.lang.IllegalStateException $r7;
        org.mozilla.javascript.VMBridge $r0, $r2, $r5;
        org.mozilla.javascript.Context $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1;
        org.mozilla.javascript.ContextFactory $r4, r6;
        boolean $z0;

        r6 := @parameter0: org.mozilla.javascript.ContextFactory;

        $r0 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        $r1 = virtualinvoke $r0.<org.mozilla.javascript.VMBridge: java.lang.Object getThreadContextHelper()>();

        $r2 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.VMBridge: org.mozilla.javascript.Context getContext(java.lang.Object)>($r1);

        if $r3 != null goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Calling Context.exit without previous Context.enter");

        throw $r7;

     label1:
        $r4 = $r3.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory>;

        if $r4 == null goto label2;

        return;

     label2:
        $i0 = $r3.<org.mozilla.javascript.Context: int enterCount>;

        if $i0 >= 1 goto label3;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label3:
        $z0 = $r3.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label4;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label4:
        $i1 = $r3.<org.mozilla.javascript.Context: int enterCount>;

        $i2 = $i1 - 1;

        $r3.<org.mozilla.javascript.Context: int enterCount> = $i2;

        $i3 = $r3.<org.mozilla.javascript.Context: int enterCount>;

        if $i3 != 0 goto label5;

        $r5 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        virtualinvoke $r5.<org.mozilla.javascript.VMBridge: void setContext(java.lang.Object,org.mozilla.javascript.Context)>($r1, null);

        virtualinvoke r6.<org.mozilla.javascript.ContextFactory: void onContextReleased(org.mozilla.javascript.Context)>($r3);

     label5:
        return;
    }

    public static java.lang.Object call(org.mozilla.javascript.ContextAction)
    {
        java.lang.Object $r2;
        org.mozilla.javascript.ContextAction r1;
        org.mozilla.javascript.ContextFactory $r0;

        r1 := @parameter0: org.mozilla.javascript.ContextAction;

        $r0 = staticinvoke <org.mozilla.javascript.ContextFactory: org.mozilla.javascript.ContextFactory getGlobal()>();

        $r2 = staticinvoke <org.mozilla.javascript.Context: java.lang.Object call(org.mozilla.javascript.ContextFactory,org.mozilla.javascript.ContextAction)>($r0, r1);

        return $r2;
    }

    public static java.lang.Object call(org.mozilla.javascript.ContextFactory, org.mozilla.javascript.Callable, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        java.lang.Throwable $r11, $r12;
        java.lang.Object[] r8;
        org.mozilla.javascript.VMBridge $r0, $r2;
        org.mozilla.javascript.Context $r3, $r4;
        org.mozilla.javascript.Callable r5;
        org.mozilla.javascript.Scriptable r6, r7;
        java.lang.Object $r1, $r9, r14;
        org.mozilla.javascript.ContextFactory $r10, r13;

        r13 := @parameter0: org.mozilla.javascript.ContextFactory;

        r5 := @parameter1: org.mozilla.javascript.Callable;

        r6 := @parameter2: org.mozilla.javascript.Scriptable;

        r7 := @parameter3: org.mozilla.javascript.Scriptable;

        r8 := @parameter4: java.lang.Object[];

        if r13 != null goto label01;

        r13 = staticinvoke <org.mozilla.javascript.ContextFactory: org.mozilla.javascript.ContextFactory getGlobal()>();

     label01:
        $r0 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        $r1 = virtualinvoke $r0.<org.mozilla.javascript.VMBridge: java.lang.Object getThreadContextHelper()>();

        $r2 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.VMBridge: org.mozilla.javascript.Context getContext(java.lang.Object)>($r1);

        if $r3 == null goto label08;

        $r10 = $r3.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory>;

        if $r10 == null goto label02;

        r14 = interfaceinvoke r5.<org.mozilla.javascript.Callable: java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>($r3, r6, r7, r8);

        goto label07;

     label02:
        $r3.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory> = r13;

     label03:
        r14 = interfaceinvoke r5.<org.mozilla.javascript.Callable: java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>($r3, r6, r7, r8);

     label04:
        $r3.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory> = null;

        goto label07;

     label05:
        $r12 := @caughtexception;

     label06:
        $r3.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory> = null;

        throw $r12;

     label07:
        return r14;

     label08:
        $r4 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context prepareNewContext(org.mozilla.javascript.ContextFactory,java.lang.Object)>(r13, $r1);

     label09:
        $r9 = interfaceinvoke r5.<org.mozilla.javascript.Callable: java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>($r4, r6, r7, r8);

     label10:
        staticinvoke <org.mozilla.javascript.Context: void releaseContext(java.lang.Object,org.mozilla.javascript.Context)>($r1, $r4);

        return $r9;

     label11:
        $r11 := @caughtexception;

     label12:
        staticinvoke <org.mozilla.javascript.Context: void releaseContext(java.lang.Object,org.mozilla.javascript.Context)>($r1, $r4);

        throw $r11;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    static java.lang.Object call(org.mozilla.javascript.ContextFactory, org.mozilla.javascript.ContextAction)
    {
        java.lang.Throwable $r11, $r12;
        org.mozilla.javascript.VMBridge $r0, $r2;
        org.mozilla.javascript.Context $r3, $r5;
        java.lang.Object $r1, $r7, $r9, $r10;
        org.mozilla.javascript.ContextAction r6;
        org.mozilla.javascript.ContextFactory r4, $r8;

        r4 := @parameter0: org.mozilla.javascript.ContextFactory;

        r6 := @parameter1: org.mozilla.javascript.ContextAction;

        $r0 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        $r1 = virtualinvoke $r0.<org.mozilla.javascript.VMBridge: java.lang.Object getThreadContextHelper()>();

        $r2 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.VMBridge: org.mozilla.javascript.Context getContext(java.lang.Object)>($r1);

        if $r3 == null goto label06;

        $r8 = $r3.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory>;

        if $r8 == null goto label01;

        $r10 = interfaceinvoke r6.<org.mozilla.javascript.ContextAction: java.lang.Object run(org.mozilla.javascript.Context)>($r3);

        return $r10;

     label01:
        $r3.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory> = r4;

     label02:
        $r9 = interfaceinvoke r6.<org.mozilla.javascript.ContextAction: java.lang.Object run(org.mozilla.javascript.Context)>($r3);

     label03:
        $r3.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory> = null;

        return $r9;

     label04:
        $r12 := @caughtexception;

     label05:
        $r3.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory> = null;

        throw $r12;

     label06:
        $r5 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context prepareNewContext(org.mozilla.javascript.ContextFactory,java.lang.Object)>(r4, $r1);

     label07:
        $r7 = interfaceinvoke r6.<org.mozilla.javascript.ContextAction: java.lang.Object run(org.mozilla.javascript.Context)>($r5);

     label08:
        staticinvoke <org.mozilla.javascript.Context: void releaseContext(java.lang.Object,org.mozilla.javascript.Context)>($r1, $r5);

        return $r7;

     label09:
        $r11 := @caughtexception;

     label10:
        staticinvoke <org.mozilla.javascript.Context: void releaseContext(java.lang.Object,org.mozilla.javascript.Context)>($r1, $r5);

        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private static org.mozilla.javascript.Context prepareNewContext(org.mozilla.javascript.ContextFactory, java.lang.Object)
    {
        java.lang.IllegalStateException $r3;
        org.mozilla.javascript.Context $r1;
        org.mozilla.javascript.VMBridge $r5;
        int $i0;
        java.lang.Object r4;
        org.mozilla.javascript.ContextFactory r0, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: org.mozilla.javascript.ContextFactory;

        r4 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.ContextFactory: org.mozilla.javascript.Context makeContext()>();

        $r2 = $r1.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory>;

        if $r2 != null goto label1;

        $i0 = $r1.<org.mozilla.javascript.Context: int enterCount>;

        if $i0 == 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("factory.makeContext() returned Context instance already associated with some thread");

        throw $r3;

     label2:
        $r1.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory> = r0;

        virtualinvoke r0.<org.mozilla.javascript.ContextFactory: void onContextCreated(org.mozilla.javascript.Context)>($r1);

        $z0 = virtualinvoke r0.<org.mozilla.javascript.ContextFactory: boolean isSealed()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke $r1.<org.mozilla.javascript.Context: boolean isSealed()>();

        if $z1 != 0 goto label3;

        virtualinvoke $r1.<org.mozilla.javascript.Context: void seal(java.lang.Object)>(null);

     label3:
        $r5 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        virtualinvoke $r5.<org.mozilla.javascript.VMBridge: void setContext(java.lang.Object,org.mozilla.javascript.Context)>(r4, $r1);

        return $r1;
    }

    private static void releaseContext(java.lang.Object, org.mozilla.javascript.Context)
    {
        java.lang.Throwable $r4;
        org.mozilla.javascript.VMBridge $r1;
        org.mozilla.javascript.Context r2;
        java.lang.Object r0;
        org.mozilla.javascript.ContextFactory $r3;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.mozilla.javascript.Context;

        $r1 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        virtualinvoke $r1.<org.mozilla.javascript.VMBridge: void setContext(java.lang.Object,org.mozilla.javascript.Context)>(r0, null);

     label1:
        $r3 = r2.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory>;

        virtualinvoke $r3.<org.mozilla.javascript.ContextFactory: void onContextReleased(org.mozilla.javascript.Context)>(r2);

     label2:
        r2.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory> = null;

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        r2.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory> = null;

        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void addContextListener(org.mozilla.javascript.ContextListener)
    {
        org.mozilla.javascript.ContextListener r1;
        java.lang.Object[] $r8;
        java.lang.Class[] $r7;
        java.lang.RuntimeException $r12;
        java.lang.Exception $r11;
        java.lang.Class $r2, $r5, $r6;
        java.lang.String r0, $r3;
        org.mozilla.javascript.ContextFactory $r4, $r9;
        java.lang.reflect.Method $r10;
        boolean $z0;

        r1 := @parameter0: org.mozilla.javascript.ContextListener;

        r0 = "org.mozilla.javascript.tools.debugger.Main";

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label5;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = staticinvoke <org.mozilla.javascript.Kit: java.lang.Class classOrNull(java.lang.String)>("org.mozilla.javascript.ContextFactory");

        $r7 = newarray (java.lang.Class)[1];

        $r7[0] = $r6;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <org.mozilla.javascript.ContextFactory: org.mozilla.javascript.ContextFactory getGlobal()>();

        $r8[0] = $r9;

     label1:
        $r10 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("attachTo", $r7);

        virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r8);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>()>();

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException initCause(java.lang.RuntimeException,java.lang.Throwable)>($r12, $r11);

        throw $r12;

     label4:
        return;

     label5:
        $r4 = staticinvoke <org.mozilla.javascript.ContextFactory: org.mozilla.javascript.ContextFactory getGlobal()>();

        virtualinvoke $r4.<org.mozilla.javascript.ContextFactory: void addListener(org.mozilla.javascript.ContextFactory$Listener)>(r1);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void removeContextListener(org.mozilla.javascript.ContextListener)
    {
        org.mozilla.javascript.ContextListener r1;
        org.mozilla.javascript.ContextFactory $r0;

        r1 := @parameter0: org.mozilla.javascript.ContextListener;

        $r0 = staticinvoke <org.mozilla.javascript.ContextFactory: org.mozilla.javascript.ContextFactory getGlobal()>();

        virtualinvoke $r0.<org.mozilla.javascript.ContextFactory: void addListener(org.mozilla.javascript.ContextFactory$Listener)>(r1);

        return;
    }

    public final org.mozilla.javascript.ContextFactory getFactory()
    {
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.ContextFactory r1;

        r0 := @this: org.mozilla.javascript.Context;

        r1 = r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory factory>;

        if r1 != null goto label1;

        r1 = staticinvoke <org.mozilla.javascript.ContextFactory: org.mozilla.javascript.ContextFactory getGlobal()>();

     label1:
        return r1;
    }

    public final boolean isSealed()
    {
        org.mozilla.javascript.Context r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        return $z0;
    }

    public final void seal(java.lang.Object)
    {
        java.lang.Object r1;
        org.mozilla.javascript.Context r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: java.lang.Object;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        r0.<org.mozilla.javascript.Context: boolean sealed> = 1;

        r0.<org.mozilla.javascript.Context: java.lang.Object sealKey> = r1;

        return;
    }

    public final void unseal(java.lang.Object)
    {
        java.lang.IllegalStateException $r3;
        org.mozilla.javascript.Context r1;
        java.lang.Object r0, $r2;
        java.lang.IllegalArgumentException $r4, $r5;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.Context;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $r2 = r1.<org.mozilla.javascript.Context: java.lang.Object sealKey>;

        if $r2 == r0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        $z0 = r1.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 != 0 goto label3;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label3:
        r1.<org.mozilla.javascript.Context: boolean sealed> = 0;

        r1.<org.mozilla.javascript.Context: java.lang.Object sealKey> = null;

        return;
    }

    static void onSealedMutation()
    {
        java.lang.IllegalStateException $r0;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public final int getLanguageVersion()
    {
        int $i0;
        org.mozilla.javascript.Context r0;

        r0 := @this: org.mozilla.javascript.Context;

        $i0 = r0.<org.mozilla.javascript.Context: int version>;

        return $i0;
    }

    public void setLanguageVersion(int)
    {
        org.mozilla.javascript.Context r0;
        java.lang.Integer $r1, $r2;
        int i0, $i1, $i2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        i0 := @parameter0: int;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        staticinvoke <org.mozilla.javascript.Context: void checkLanguageVersion(int)>(i0);

        $r3 = r0.<org.mozilla.javascript.Context: java.lang.Object propertyListeners>;

        if $r3 == null goto label2;

        $i1 = r0.<org.mozilla.javascript.Context: int version>;

        if i0 == $i1 goto label2;

        $r1 = new java.lang.Integer;

        $i2 = r0.<org.mozilla.javascript.Context: int version>;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i2);

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0);

        specialinvoke r0.<org.mozilla.javascript.Context: void firePropertyChangeImpl(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>($r3, "language version", $r1, $r2);

     label2:
        r0.<org.mozilla.javascript.Context: int version> = i0;

        return;
    }

    public static boolean isValidLanguageVersion(int)
    {
        int i0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 100: goto label1;
            case 110: goto label1;
            case 120: goto label1;
            case 130: goto label1;
            case 140: goto label1;
            case 150: goto label1;
            case 160: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    public static void checkLanguageVersion(int)
    {
        java.lang.StringBuffer $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.mozilla.javascript.Context: boolean isValidLanguageVersion(int)>(i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad language version: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    public final java.lang.String getImplementationVersion()
    {
        org.mozilla.javascript.Context r3;
        java.lang.String $r0, $r1, $r2;

        r3 := @this: org.mozilla.javascript.Context;

        $r0 = <org.mozilla.javascript.Context: java.lang.String implementationVersion>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String getMessage0(java.lang.String)>("implementation.version");

        <org.mozilla.javascript.Context: java.lang.String implementationVersion> = $r2;

     label1:
        $r1 = <org.mozilla.javascript.Context: java.lang.String implementationVersion>;

        return $r1;
    }

    public final org.mozilla.javascript.ErrorReporter getErrorReporter()
    {
        org.mozilla.javascript.ErrorReporter $r1, $r2;
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.DefaultErrorReporter $r3;

        r0 := @this: org.mozilla.javascript.Context;

        $r1 = r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ErrorReporter errorReporter>;

        if $r1 != null goto label1;

        $r3 = <org.mozilla.javascript.DefaultErrorReporter: org.mozilla.javascript.DefaultErrorReporter instance>;

        return $r3;

     label1:
        $r2 = r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ErrorReporter errorReporter>;

        return $r2;
    }

    public final org.mozilla.javascript.ErrorReporter setErrorReporter(org.mozilla.javascript.ErrorReporter)
    {
        org.mozilla.javascript.ErrorReporter r1, $r2;
        org.mozilla.javascript.Context r0;
        java.lang.Object r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: org.mozilla.javascript.ErrorReporter;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        $r2 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ErrorReporter getErrorReporter()>();

        if r1 != $r2 goto label3;

        return $r2;

     label3:
        r3 = r0.<org.mozilla.javascript.Context: java.lang.Object propertyListeners>;

        if r3 == null goto label4;

        specialinvoke r0.<org.mozilla.javascript.Context: void firePropertyChangeImpl(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>(r3, "error reporter", $r2, r1);

     label4:
        r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ErrorReporter errorReporter> = r1;

        return $r2;
    }

    public final java.util.Locale getLocale()
    {
        org.mozilla.javascript.Context r0;
        java.util.Locale $r1, $r2, $r3;

        r0 := @this: org.mozilla.javascript.Context;

        $r1 = r0.<org.mozilla.javascript.Context: java.util.Locale locale>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0.<org.mozilla.javascript.Context: java.util.Locale locale> = $r3;

     label1:
        $r2 = r0.<org.mozilla.javascript.Context: java.util.Locale locale>;

        return $r2;
    }

    public final java.util.Locale setLocale(java.util.Locale)
    {
        org.mozilla.javascript.Context r0;
        java.util.Locale r1, $r2;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: java.util.Locale;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        $r2 = r0.<org.mozilla.javascript.Context: java.util.Locale locale>;

        r0.<org.mozilla.javascript.Context: java.util.Locale locale> = r1;

        return $r2;
    }

    public final void addPropertyChangeListener(java.beans.PropertyChangeListener)
    {
        org.mozilla.javascript.Context r0;
        java.beans.PropertyChangeListener r1;
        java.lang.Object $r2, $r3;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: java.beans.PropertyChangeListener;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        $r2 = r0.<org.mozilla.javascript.Context: java.lang.Object propertyListeners>;

        $r3 = staticinvoke <org.mozilla.javascript.Kit: java.lang.Object addListener(java.lang.Object,java.lang.Object)>($r2, r1);

        r0.<org.mozilla.javascript.Context: java.lang.Object propertyListeners> = $r3;

        return;
    }

    public final void removePropertyChangeListener(java.beans.PropertyChangeListener)
    {
        org.mozilla.javascript.Context r0;
        java.beans.PropertyChangeListener r1;
        java.lang.Object $r2, $r3;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: java.beans.PropertyChangeListener;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        $r2 = r0.<org.mozilla.javascript.Context: java.lang.Object propertyListeners>;

        $r3 = staticinvoke <org.mozilla.javascript.Kit: java.lang.Object removeListener(java.lang.Object,java.lang.Object)>($r2, r1);

        r0.<org.mozilla.javascript.Context: java.lang.Object propertyListeners> = $r3;

        return;
    }

    final void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.mozilla.javascript.Context r0;
        java.lang.Object r1, r3, r4;
        java.lang.String r2;

        r0 := @this: org.mozilla.javascript.Context;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        r1 = r0.<org.mozilla.javascript.Context: java.lang.Object propertyListeners>;

        if r1 == null goto label1;

        specialinvoke r0.<org.mozilla.javascript.Context: void firePropertyChangeImpl(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4);

     label1:
        return;
    }

    private void firePropertyChangeImpl(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.mozilla.javascript.Context r4;
        java.beans.PropertyChangeListener r2;
        int i0;
        java.lang.Object r0, $r1, r6, r7;
        java.lang.String r5;
        java.beans.PropertyChangeEvent $r3;
        boolean $z0;

        r4 := @this: org.mozilla.javascript.Context;

        r0 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.Object;

        r7 := @parameter3: java.lang.Object;

        i0 = 0;

     label1:
        $r1 = staticinvoke <org.mozilla.javascript.Kit: java.lang.Object getListener(java.lang.Object,int)>(r0, i0);

        if $r1 != null goto label2;

        goto label4;

     label2:
        $z0 = $r1 instanceof java.beans.PropertyChangeListener;

        if $z0 == 0 goto label3;

        r2 = (java.beans.PropertyChangeListener) $r1;

        $r3 = new java.beans.PropertyChangeEvent;

        specialinvoke $r3.<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>(r4, r5, r6, r7);

        interfaceinvoke r2.<java.beans.PropertyChangeListener: void propertyChange(java.beans.PropertyChangeEvent)>($r3);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }

    public static void reportWarning(java.lang.String, java.lang.String, int, java.lang.String, int)
    {
        org.mozilla.javascript.ErrorReporter $r1;
        org.mozilla.javascript.Context $r0;
        int i0, i1;
        java.lang.String r2, r3, r4;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r4 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        $r0 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getContext()>();

        $r1 = virtualinvoke $r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ErrorReporter getErrorReporter()>();

        interfaceinvoke $r1.<org.mozilla.javascript.ErrorReporter: void warning(java.lang.String,java.lang.String,int,java.lang.String,int)>(r2, r3, i0, r4, i1);

        return;
    }

    public static void reportWarning(java.lang.String)
    {
        int[] $r0;
        int $i0;
        java.lang.String $r1, r2;

        r2 := @parameter0: java.lang.String;

        $r0 = newarray (int)[1];

        $r0[0] = 0;

        $r1 = staticinvoke <org.mozilla.javascript.Context: java.lang.String getSourcePositionFromStack(int[])>($r0);

        $i0 = $r0[0];

        staticinvoke <org.mozilla.javascript.Context: void reportWarning(java.lang.String,java.lang.String,int,java.lang.String,int)>(r2, $r1, $i0, null, 0);

        return;
    }

    public static void reportWarning(java.lang.String, java.lang.Throwable)
    {
        java.io.PrintWriter $r3;
        java.lang.Throwable r5;
        java.io.StringWriter $r2;
        int[] $r0;
        int $i0;
        java.lang.String $r1, r4, $r6;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Throwable;

        $r0 = newarray (int)[1];

        $r0[0] = 0;

        $r1 = staticinvoke <org.mozilla.javascript.Context: java.lang.String getSourcePositionFromStack(int[])>($r0);

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

        $r3 = new java.io.PrintWriter;

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.Writer)>($r2);

        virtualinvoke $r3.<java.io.PrintWriter: void println(java.lang.String)>(r4);

        virtualinvoke r5.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r3);

        virtualinvoke $r3.<java.io.PrintWriter: void flush()>();

        $r6 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $i0 = $r0[0];

        staticinvoke <org.mozilla.javascript.Context: void reportWarning(java.lang.String,java.lang.String,int,java.lang.String,int)>($r6, $r1, $i0, null, 0);

        return;
    }

    public static void reportError(java.lang.String, java.lang.String, int, java.lang.String, int)
    {
        org.mozilla.javascript.Context $r0;
        org.mozilla.javascript.EvaluatorException $r1;
        org.mozilla.javascript.ErrorReporter $r5;
        int i0, i1;
        java.lang.String r2, r3, r4;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r4 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        $r0 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getCurrentContext()>();

        if $r0 == null goto label1;

        $r5 = virtualinvoke $r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ErrorReporter getErrorReporter()>();

        interfaceinvoke $r5.<org.mozilla.javascript.ErrorReporter: void error(java.lang.String,java.lang.String,int,java.lang.String,int)>(r2, r3, i0, r4, i1);

        goto label2;

     label1:
        $r1 = new org.mozilla.javascript.EvaluatorException;

        specialinvoke $r1.<org.mozilla.javascript.EvaluatorException: void <init>(java.lang.String,java.lang.String,int,java.lang.String,int)>(r2, r3, i0, r4, i1);

        throw $r1;

     label2:
        return;
    }

    public static void reportError(java.lang.String)
    {
        int[] $r0;
        int $i0;
        java.lang.String $r1, r2;

        r2 := @parameter0: java.lang.String;

        $r0 = newarray (int)[1];

        $r0[0] = 0;

        $r1 = staticinvoke <org.mozilla.javascript.Context: java.lang.String getSourcePositionFromStack(int[])>($r0);

        $i0 = $r0[0];

        staticinvoke <org.mozilla.javascript.Context: void reportError(java.lang.String,java.lang.String,int,java.lang.String,int)>(r2, $r1, $i0, null, 0);

        return;
    }

    public static org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String, java.lang.String, int, java.lang.String, int)
    {
        org.mozilla.javascript.Context $r0;
        org.mozilla.javascript.EvaluatorException $r1, $r6;
        org.mozilla.javascript.ErrorReporter $r5;
        int i0, i1;
        java.lang.String r2, r3, r4;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r4 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        $r0 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getCurrentContext()>();

        if $r0 == null goto label1;

        $r5 = virtualinvoke $r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ErrorReporter getErrorReporter()>();

        $r6 = interfaceinvoke $r5.<org.mozilla.javascript.ErrorReporter: org.mozilla.javascript.EvaluatorException runtimeError(java.lang.String,java.lang.String,int,java.lang.String,int)>(r2, r3, i0, r4, i1);

        return $r6;

     label1:
        $r1 = new org.mozilla.javascript.EvaluatorException;

        specialinvoke $r1.<org.mozilla.javascript.EvaluatorException: void <init>(java.lang.String,java.lang.String,int,java.lang.String,int)>(r2, r3, i0, r4, i1);

        throw $r1;
    }

    static org.mozilla.javascript.EvaluatorException reportRuntimeError0(java.lang.String)
    {
        java.lang.String r0, $r1;
        org.mozilla.javascript.EvaluatorException $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String getMessage0(java.lang.String)>(r0);

        $r2 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)>($r1);

        return $r2;
    }

    static org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String, java.lang.Object)
    {
        org.mozilla.javascript.EvaluatorException $r3;
        java.lang.Object r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String getMessage1(java.lang.String,java.lang.Object)>(r0, r1);

        $r3 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)>($r2);

        return $r3;
    }

    static org.mozilla.javascript.EvaluatorException reportRuntimeError2(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.mozilla.javascript.EvaluatorException $r4;
        java.lang.Object r1, r2;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r3 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String getMessage2(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        $r4 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)>($r3);

        return $r4;
    }

    static org.mozilla.javascript.EvaluatorException reportRuntimeError3(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.mozilla.javascript.EvaluatorException $r5;
        java.lang.Object r1, r2, r3;
        java.lang.String r0, $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r4 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String getMessage3(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>(r0, r1, r2, r3);

        $r5 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)>($r4);

        return $r5;
    }

    static org.mozilla.javascript.EvaluatorException reportRuntimeError4(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.mozilla.javascript.EvaluatorException $r6;
        java.lang.Object r1, r2, r3, r4;
        java.lang.String r0, $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        $r5 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String getMessage4(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r0, r1, r2, r3, r4);

        $r6 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)>($r5);

        return $r6;
    }

    public static org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)
    {
        int[] $r0;
        org.mozilla.javascript.EvaluatorException $r3;
        int $i0;
        java.lang.String $r1, r2;

        r2 := @parameter0: java.lang.String;

        $r0 = newarray (int)[1];

        $r0[0] = 0;

        $r1 = staticinvoke <org.mozilla.javascript.Context: java.lang.String getSourcePositionFromStack(int[])>($r0);

        $i0 = $r0[0];

        $r3 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String,java.lang.String,int,java.lang.String,int)>(r2, $r1, $i0, null, 0);

        return $r3;
    }

    public final org.mozilla.javascript.ScriptableObject initStandardObjects()
    {
        org.mozilla.javascript.ScriptableObject $r1;
        org.mozilla.javascript.Context r0;

        r0 := @this: org.mozilla.javascript.Context;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ScriptableObject initStandardObjects(org.mozilla.javascript.ScriptableObject,boolean)>(null, 0);

        return $r1;
    }

    public final org.mozilla.javascript.Scriptable initStandardObjects(org.mozilla.javascript.ScriptableObject)
    {
        org.mozilla.javascript.ScriptableObject r1, $r2;
        org.mozilla.javascript.Context r0;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: org.mozilla.javascript.ScriptableObject;

        $r2 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ScriptableObject initStandardObjects(org.mozilla.javascript.ScriptableObject,boolean)>(r1, 0);

        return $r2;
    }

    public org.mozilla.javascript.ScriptableObject initStandardObjects(org.mozilla.javascript.ScriptableObject, boolean)
    {
        org.mozilla.javascript.ScriptableObject r1, $r2;
        org.mozilla.javascript.Context r0;
        boolean z0;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: org.mozilla.javascript.ScriptableObject;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.ScriptableObject initStandardObjects(org.mozilla.javascript.Context,org.mozilla.javascript.ScriptableObject,boolean)>(r0, r1, z0);

        return $r2;
    }

    public static java.lang.Object getUndefinedValue()
    {
        java.lang.Object $r0;

        $r0 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        return $r0;
    }

    public final java.lang.Object evaluateString(org.mozilla.javascript.Scriptable, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.Script $r4;
        org.mozilla.javascript.Scriptable r5;
        int i0;
        java.lang.Object r3, $r6;
        java.lang.String r1, r2;

        r0 := @this: org.mozilla.javascript.Context;

        r5 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.Object;

        $r4 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.Script compileString(java.lang.String,java.lang.String,int,java.lang.Object)>(r1, r2, i0, r3);

        if $r4 == null goto label1;

        $r6 = interfaceinvoke $r4.<org.mozilla.javascript.Script: java.lang.Object exec(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable)>(r0, r5);

        return $r6;

     label1:
        return null;
    }

    public final java.lang.Object evaluateReader(org.mozilla.javascript.Scriptable, java.io.Reader, java.lang.String, int, java.lang.Object) throws java.io.IOException
    {
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.Script $r5;
        java.io.Reader r2;
        org.mozilla.javascript.Scriptable r1;
        int i0;
        java.lang.Object r4, $r6;
        java.lang.String r3;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        r2 := @parameter1: java.io.Reader;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.Object;

        $r5 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.Script compileReader(org.mozilla.javascript.Scriptable,java.io.Reader,java.lang.String,int,java.lang.Object)>(r1, r2, r3, i0, r4);

        if $r5 == null goto label1;

        $r6 = interfaceinvoke $r5.<org.mozilla.javascript.Script: java.lang.Object exec(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable)>(r0, r1);

        return $r6;

     label1:
        return null;
    }

    public final boolean stringIsCompilableUnit(java.lang.String)
    {
        org.mozilla.javascript.Context r1;
        org.mozilla.javascript.EvaluatorException $r5;
        org.mozilla.javascript.DefaultErrorReporter $r3;
        org.mozilla.javascript.CompilerEnvirons $r0;
        java.lang.String r4;
        org.mozilla.javascript.Parser $r2;
        boolean $z0, z1;

        r1 := @this: org.mozilla.javascript.Context;

        r4 := @parameter0: java.lang.String;

        z1 = 0;

        $r0 = new org.mozilla.javascript.CompilerEnvirons;

        specialinvoke $r0.<org.mozilla.javascript.CompilerEnvirons: void <init>()>();

        virtualinvoke $r0.<org.mozilla.javascript.CompilerEnvirons: void initFromContext(org.mozilla.javascript.Context)>(r1);

        virtualinvoke $r0.<org.mozilla.javascript.CompilerEnvirons: void setGeneratingSource(boolean)>(0);

        $r2 = new org.mozilla.javascript.Parser;

        $r3 = <org.mozilla.javascript.DefaultErrorReporter: org.mozilla.javascript.DefaultErrorReporter instance>;

        specialinvoke $r2.<org.mozilla.javascript.Parser: void <init>(org.mozilla.javascript.CompilerEnvirons,org.mozilla.javascript.ErrorReporter)>($r0, $r3);

     label1:
        virtualinvoke $r2.<org.mozilla.javascript.Parser: org.mozilla.javascript.ScriptOrFnNode parse(java.lang.String,java.lang.String,int)>(r4, null, 1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        z1 = 1;

     label4:
        if z1 == 0 goto label5;

        $z0 = virtualinvoke $r2.<org.mozilla.javascript.Parser: boolean eof()>();

        if $z0 == 0 goto label5;

        return 0;

     label5:
        return 1;

        catch org.mozilla.javascript.EvaluatorException from label1 to label2 with label3;
    }

    public final org.mozilla.javascript.Script compileReader(org.mozilla.javascript.Scriptable, java.io.Reader, java.lang.String, int, java.lang.Object) throws java.io.IOException
    {
        org.mozilla.javascript.Scriptable r5;
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.Script $r4;
        int i0;
        java.lang.Object r3;
        java.io.Reader r1;
        java.lang.String r2;

        r0 := @this: org.mozilla.javascript.Context;

        r5 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: java.io.Reader;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.Object;

        $r4 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.Script compileReader(java.io.Reader,java.lang.String,int,java.lang.Object)>(r1, r2, i0, r3);

        return $r4;
    }

    public final org.mozilla.javascript.Script compileReader(java.io.Reader, java.lang.String, int, java.lang.Object) throws java.io.IOException
    {
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.Script $r5;
        int i0;
        java.lang.Object r3, $r4;
        java.io.Reader r1;
        java.lang.String r2;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.Object;

        if i0 >= 0 goto label1;

        i0 = 0;

     label1:
        $r4 = specialinvoke r0.<org.mozilla.javascript.Context: java.lang.Object compileImpl(org.mozilla.javascript.Scriptable,java.io.Reader,java.lang.String,java.lang.String,int,java.lang.Object,boolean,org.mozilla.javascript.Interpreter,org.mozilla.javascript.ErrorReporter)>(null, r1, null, r2, i0, r3, 0, null, null);

        $r5 = (org.mozilla.javascript.Script) $r4;

        return $r5;
    }

    public final org.mozilla.javascript.Script compileString(java.lang.String, java.lang.String, int, java.lang.Object)
    {
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.Script $r4;
        int i0;
        java.lang.Object r3;
        java.lang.String r1, r2;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.Object;

        if i0 >= 0 goto label1;

        i0 = 0;

     label1:
        $r4 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.Script compileString(java.lang.String,org.mozilla.javascript.Interpreter,org.mozilla.javascript.ErrorReporter,java.lang.String,int,java.lang.Object)>(r1, null, null, r2, i0, r3);

        return $r4;
    }

    final org.mozilla.javascript.Script compileString(java.lang.String, org.mozilla.javascript.Interpreter, org.mozilla.javascript.ErrorReporter, java.lang.String, int, java.lang.Object)
    {
        org.mozilla.javascript.Interpreter r4;
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.Script $r7;
        java.io.IOException $r8;
        java.lang.RuntimeException $r9;
        org.mozilla.javascript.ErrorReporter r5;
        int i0;
        java.lang.Object r3, $r6;
        java.lang.String r1, r2;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.mozilla.javascript.Interpreter;

        r5 := @parameter2: org.mozilla.javascript.ErrorReporter;

        r2 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        r3 := @parameter5: java.lang.Object;

     label1:
        $r6 = specialinvoke r0.<org.mozilla.javascript.Context: java.lang.Object compileImpl(org.mozilla.javascript.Scriptable,java.io.Reader,java.lang.String,java.lang.String,int,java.lang.Object,boolean,org.mozilla.javascript.Interpreter,org.mozilla.javascript.ErrorReporter)>(null, null, r1, r2, i0, r3, 0, r4, r5);

        $r7 = (org.mozilla.javascript.Script) $r6;

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>()>();

        throw $r9;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public final org.mozilla.javascript.Function compileFunction(org.mozilla.javascript.Scriptable, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        org.mozilla.javascript.Scriptable r1;
        org.mozilla.javascript.Context r0;
        int i0;
        java.lang.Object r4;
        org.mozilla.javascript.Function $r5;
        java.lang.String r2, r3;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.Object;

        $r5 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.Function compileFunction(org.mozilla.javascript.Scriptable,java.lang.String,org.mozilla.javascript.Interpreter,org.mozilla.javascript.ErrorReporter,java.lang.String,int,java.lang.Object)>(r1, r2, null, null, r3, i0, r4);

        return $r5;
    }

    final org.mozilla.javascript.Function compileFunction(org.mozilla.javascript.Scriptable, java.lang.String, org.mozilla.javascript.Interpreter, org.mozilla.javascript.ErrorReporter, java.lang.String, int, java.lang.Object)
    {
        org.mozilla.javascript.Interpreter r5;
        org.mozilla.javascript.Context r0;
        java.io.IOException $r9;
        java.lang.RuntimeException $r10;
        org.mozilla.javascript.ErrorReporter r6;
        org.mozilla.javascript.Scriptable r1;
        int i0;
        java.lang.Object r4, $r7;
        org.mozilla.javascript.Function $r8;
        java.lang.String r2, r3;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: org.mozilla.javascript.Interpreter;

        r6 := @parameter3: org.mozilla.javascript.ErrorReporter;

        r3 := @parameter4: java.lang.String;

        i0 := @parameter5: int;

        r4 := @parameter6: java.lang.Object;

     label1:
        $r7 = specialinvoke r0.<org.mozilla.javascript.Context: java.lang.Object compileImpl(org.mozilla.javascript.Scriptable,java.io.Reader,java.lang.String,java.lang.String,int,java.lang.Object,boolean,org.mozilla.javascript.Interpreter,org.mozilla.javascript.ErrorReporter)>(r1, null, r2, r3, i0, r4, 1, r5, r6);

        $r8 = (org.mozilla.javascript.Function) $r7;

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>()>();

        throw $r10;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public final java.lang.String decompileScript(org.mozilla.javascript.Script, int)
    {
        org.mozilla.javascript.Context r3;
        org.mozilla.javascript.Script r0;
        int i0;
        java.lang.String $r2;
        org.mozilla.javascript.NativeFunction r1;

        r3 := @this: org.mozilla.javascript.Context;

        r0 := @parameter0: org.mozilla.javascript.Script;

        i0 := @parameter1: int;

        r1 = (org.mozilla.javascript.NativeFunction) r0;

        $r2 = virtualinvoke r1.<org.mozilla.javascript.NativeFunction: java.lang.String decompile(int,int)>(i0, 0);

        return $r2;
    }

    public final java.lang.String decompileFunction(org.mozilla.javascript.Function, int)
    {
        org.mozilla.javascript.Context r9;
        java.lang.StringBuffer $r1, $r2, $r4, $r5;
        org.mozilla.javascript.BaseFunction $r7;
        int i0;
        org.mozilla.javascript.Function r0;
        java.lang.String $r3, $r6, $r8;
        boolean $z0;

        r9 := @this: org.mozilla.javascript.Context;

        r0 := @parameter0: org.mozilla.javascript.Function;

        i0 := @parameter1: int;

        $z0 = r0 instanceof org.mozilla.javascript.BaseFunction;

        if $z0 == 0 goto label1;

        $r7 = (org.mozilla.javascript.BaseFunction) r0;

        $r8 = virtualinvoke $r7.<org.mozilla.javascript.BaseFunction: java.lang.String decompile(int,int)>(i0, 0);

        return $r8;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("function ");

        $r3 = interfaceinvoke r0.<org.mozilla.javascript.Function: java.lang.String getClassName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("() {\n\t[native code]\n}\n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public final java.lang.String decompileFunctionBody(org.mozilla.javascript.Function, int)
    {
        org.mozilla.javascript.Context r3;
        org.mozilla.javascript.BaseFunction r1;
        int i0;
        org.mozilla.javascript.Function r0;
        java.lang.String $r2;
        boolean $z0;

        r3 := @this: org.mozilla.javascript.Context;

        r0 := @parameter0: org.mozilla.javascript.Function;

        i0 := @parameter1: int;

        $z0 = r0 instanceof org.mozilla.javascript.BaseFunction;

        if $z0 == 0 goto label1;

        r1 = (org.mozilla.javascript.BaseFunction) r0;

        $r2 = virtualinvoke r1.<org.mozilla.javascript.BaseFunction: java.lang.String decompile(int,int)>(i0, 1);

        return $r2;

     label1:
        return "[native code]\n";
    }

    public final org.mozilla.javascript.Scriptable newObject(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r1, $r3;
        java.lang.Object[] $r2;
        org.mozilla.javascript.Context r0;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        $r2 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

        $r3 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.Scriptable newObject(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object[])>(r1, "Object", $r2);

        return $r3;
    }

    public final org.mozilla.javascript.Scriptable newObject(org.mozilla.javascript.Scriptable, java.lang.String)
    {
        org.mozilla.javascript.Scriptable r1, $r4;
        java.lang.Object[] $r3;
        org.mozilla.javascript.Context r0;
        java.lang.String r2;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        r2 := @parameter1: java.lang.String;

        $r3 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

        $r4 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.Scriptable newObject(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object[])>(r1, r2, $r3);

        return $r4;
    }

    public final org.mozilla.javascript.Scriptable newObject(org.mozilla.javascript.Scriptable, java.lang.String, java.lang.Object[])
    {
        org.mozilla.javascript.Scriptable $r0, $r4, r5;
        java.lang.Object[] r6;
        org.mozilla.javascript.Context r1;
        org.mozilla.javascript.Function $r3;
        java.lang.String r2;

        r1 := @this: org.mozilla.javascript.Context;

        r5 := @parameter0: org.mozilla.javascript.Scriptable;

        r2 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.Object[];

        $r0 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r5);

        $r3 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.Function getExistingCtor(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String)>(r1, $r0, r2);

        if r6 != null goto label1;

        r6 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

     label1:
        $r4 = interfaceinvoke $r3.<org.mozilla.javascript.Function: org.mozilla.javascript.Scriptable construct(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r1, $r0, r6);

        return $r4;
    }

    public final org.mozilla.javascript.Scriptable newArray(org.mozilla.javascript.Scriptable, int)
    {
        org.mozilla.javascript.NativeArray $r0;
        org.mozilla.javascript.Scriptable r1;
        org.mozilla.javascript.Context r2;
        int i0;
        long $l1;

        r2 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        i0 := @parameter1: int;

        $r0 = new org.mozilla.javascript.NativeArray;

        $l1 = (long) i0;

        specialinvoke $r0.<org.mozilla.javascript.NativeArray: void <init>(long)>($l1);

        staticinvoke <org.mozilla.javascript.ScriptRuntime: void setObjectProtoAndParent(org.mozilla.javascript.ScriptableObject,org.mozilla.javascript.Scriptable)>($r0, r1);

        return $r0;
    }

    public final org.mozilla.javascript.Scriptable newArray(org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        java.lang.Object[] r0;
        org.mozilla.javascript.NativeArray $r4;
        org.mozilla.javascript.Context r7;
        java.lang.IllegalArgumentException $r6;
        org.mozilla.javascript.Scriptable r5;
        java.lang.Class $r1, $r2, $r3;

        r7 := @this: org.mozilla.javascript.Context;

        r5 := @parameter0: org.mozilla.javascript.Scriptable;

        r0 := @parameter1: java.lang.Object[];

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $r3 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ObjectClass>;

        if $r2 == $r3 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        $r4 = new org.mozilla.javascript.NativeArray;

        specialinvoke $r4.<org.mozilla.javascript.NativeArray: void <init>(java.lang.Object[])>(r0);

        staticinvoke <org.mozilla.javascript.ScriptRuntime: void setObjectProtoAndParent(org.mozilla.javascript.ScriptableObject,org.mozilla.javascript.Scriptable)>($r4, r5);

        return $r4;
    }

    public final java.lang.Object[] getElements(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r0;
        java.lang.Object[] $r1;
        org.mozilla.javascript.Context r2;

        r2 := @this: org.mozilla.javascript.Context;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        $r1 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] getArrayElements(org.mozilla.javascript.Scriptable)>(r0);

        return $r1;
    }

    public static boolean toBoolean(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <org.mozilla.javascript.ScriptRuntime: boolean toBoolean(java.lang.Object)>(r0);

        return $z0;
    }

    public static double toNumber(java.lang.Object)
    {
        java.lang.Object r0;
        double $d0;

        r0 := @parameter0: java.lang.Object;

        $d0 = staticinvoke <org.mozilla.javascript.ScriptRuntime: double toNumber(java.lang.Object)>(r0);

        return $d0;
    }

    public static java.lang.String toString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>(r0);

        return $r1;
    }

    public static org.mozilla.javascript.Scriptable toObject(java.lang.Object, org.mozilla.javascript.Scriptable)
    {
        java.lang.Object r1;
        org.mozilla.javascript.Scriptable r0, $r2;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.mozilla.javascript.Scriptable;

        $r2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.Scriptable toObject(org.mozilla.javascript.Scriptable,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public static org.mozilla.javascript.Scriptable toObject(java.lang.Object, org.mozilla.javascript.Scriptable, java.lang.Class)
    {
        org.mozilla.javascript.Scriptable r0, $r2;
        java.lang.Object r1;
        java.lang.Class r3;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.mozilla.javascript.Scriptable;

        r3 := @parameter2: java.lang.Class;

        $r2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.Scriptable toObject(org.mozilla.javascript.Scriptable,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object javaToJS(java.lang.Object, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Context $r1;
        char $c0;
        org.mozilla.javascript.WrapFactory $r2;
        org.mozilla.javascript.Scriptable r3;
        java.lang.Character $r5;
        java.lang.Object r0, $r4;
        java.lang.String $r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        $z0 = r0 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.Number;

        if $z1 != 0 goto label1;

        $z2 = r0 instanceof java.lang.Boolean;

        if $z2 != 0 goto label1;

        $z3 = r0 instanceof org.mozilla.javascript.Scriptable;

        if $z3 == 0 goto label2;

     label1:
        return r0;

     label2:
        $z4 = r0 instanceof java.lang.Character;

        if $z4 == 0 goto label3;

        $r5 = (java.lang.Character) r0;

        $c0 = virtualinvoke $r5.<java.lang.Character: char charValue()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        return $r6;

     label3:
        $r1 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getContext()>();

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.Context: org.mozilla.javascript.WrapFactory getWrapFactory()>();

        $r4 = virtualinvoke $r2.<org.mozilla.javascript.WrapFactory: java.lang.Object wrap(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Class)>($r1, r3, r0, null);

        return $r4;
    }

    public static java.lang.Object jsToJava(java.lang.Object, java.lang.Class) throws org.mozilla.javascript.EvaluatorException
    {
        java.lang.Class r0;
        java.lang.Object r1, $r2;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.mozilla.javascript.NativeJavaObject: java.lang.Object coerceTypeImpl(java.lang.Class,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object toType(java.lang.Object, java.lang.Class) throws java.lang.IllegalArgumentException
    {
        org.mozilla.javascript.EvaluatorException $r3;
        java.lang.Object r0, $r2;
        java.lang.Class r1;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

     label1:
        $r2 = staticinvoke <org.mozilla.javascript.Context: java.lang.Object jsToJava(java.lang.Object,java.lang.Class)>(r0, r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r3.<org.mozilla.javascript.EvaluatorException: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException initCause(java.lang.RuntimeException,java.lang.Throwable)>($r4, $r3);

        throw $r4;

        catch org.mozilla.javascript.EvaluatorException from label1 to label2 with label3;
    }

    public static java.lang.RuntimeException throwAsScriptRuntimeEx(java.lang.Throwable)
    {
        java.lang.Throwable r4;
        java.lang.Error $r2;
        org.mozilla.javascript.RhinoException $r1;
        java.lang.reflect.InvocationTargetException $r3;
        org.mozilla.javascript.WrappedException $r0;
        boolean $z0, $z1, $z2;

        r4 := @parameter0: java.lang.Throwable;

     label1:
        $z0 = r4 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label2;

        $r3 = (java.lang.reflect.InvocationTargetException) r4;

        r4 = virtualinvoke $r3.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        goto label1;

     label2:
        $z1 = r4 instanceof java.lang.Error;

        if $z1 == 0 goto label3;

        $r2 = (java.lang.Error) r4;

        throw $r2;

     label3:
        $z2 = r4 instanceof org.mozilla.javascript.RhinoException;

        if $z2 == 0 goto label4;

        $r1 = (org.mozilla.javascript.RhinoException) r4;

        throw $r1;

     label4:
        $r0 = new org.mozilla.javascript.WrappedException;

        specialinvoke $r0.<org.mozilla.javascript.WrappedException: void <init>(java.lang.Throwable)>(r4);

        throw $r0;
    }

    public final boolean isGeneratingDebug()
    {
        org.mozilla.javascript.Context r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        $z0 = r0.<org.mozilla.javascript.Context: boolean generatingDebug>;

        return $z0;
    }

    public final void setGeneratingDebug(boolean)
    {
        org.mozilla.javascript.Context r0;
        int $i0;
        boolean $z0, z1;

        r0 := @this: org.mozilla.javascript.Context;

        z1 := @parameter0: boolean;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        r0.<org.mozilla.javascript.Context: boolean generatingDebugChanged> = 1;

        if z1 == 0 goto label2;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Context: int getOptimizationLevel()>();

        if $i0 <= 0 goto label2;

        virtualinvoke r0.<org.mozilla.javascript.Context: void setOptimizationLevel(int)>(0);

     label2:
        r0.<org.mozilla.javascript.Context: boolean generatingDebug> = z1;

        return;
    }

    public final boolean isGeneratingSource()
    {
        org.mozilla.javascript.Context r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        $z0 = r0.<org.mozilla.javascript.Context: boolean generatingSource>;

        return $z0;
    }

    public final void setGeneratingSource(boolean)
    {
        org.mozilla.javascript.Context r0;
        boolean $z0, z1;

        r0 := @this: org.mozilla.javascript.Context;

        z1 := @parameter0: boolean;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        r0.<org.mozilla.javascript.Context: boolean generatingSource> = z1;

        return;
    }

    public final int getOptimizationLevel()
    {
        int $i0;
        org.mozilla.javascript.Context r0;

        r0 := @this: org.mozilla.javascript.Context;

        $i0 = r0.<org.mozilla.javascript.Context: int optimizationLevel>;

        return $i0;
    }

    public final void setOptimizationLevel(int)
    {
        org.mozilla.javascript.Context r0;
        int i0, $i2, $i4, $i6;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        i0 := @parameter0: int;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        $i2 = (int) -2;

        if i0 != $i2 goto label2;

        $i4 = (int) -1;

        i0 = $i4;

     label2:
        staticinvoke <org.mozilla.javascript.Context: void checkOptimizationLevel(int)>(i0);

        $r1 = <org.mozilla.javascript.Context: java.lang.Class codegenClass>;

        if $r1 != null goto label3;

        $i6 = (int) -1;

        i0 = $i6;

     label3:
        r0.<org.mozilla.javascript.Context: int optimizationLevel> = i0;

        return;
    }

    public static boolean isValidOptimizationLevel(int)
    {
        int i0, $i2;
        boolean $z0;

        i0 := @parameter0: int;

        $i2 = (int) -1;

        if $i2 > i0 goto label1;

        if i0 > 9 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void checkOptimizationLevel(int)
    {
        java.lang.StringBuffer $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.mozilla.javascript.Context: boolean isValidOptimizationLevel(int)>(i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Optimization level outside [-1..9]: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    public final int getMaximumInterpreterStackDepth()
    {
        int $i0;
        org.mozilla.javascript.Context r0;

        r0 := @this: org.mozilla.javascript.Context;

        $i0 = r0.<org.mozilla.javascript.Context: int maximumInterpreterStackDepth>;

        return $i0;
    }

    public final void setMaximumInterpreterStackDepth(int)
    {
        java.lang.IllegalStateException $r3;
        org.mozilla.javascript.Context r0;
        int $i0, i1, $i3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        i1 := @parameter0: int;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        $i0 = r0.<org.mozilla.javascript.Context: int optimizationLevel>;

        $i3 = (int) -1;

        if $i0 == $i3 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set maximumInterpreterStackDepth when optimizationLevel != -1");

        throw $r3;

     label2:
        if i1 >= 1 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot set maximumInterpreterStackDepth to less than 1");

        throw $r4;

     label3:
        r0.<org.mozilla.javascript.Context: int maximumInterpreterStackDepth> = i1;

        return;
    }

    public final void setSecurityController(org.mozilla.javascript.SecurityController)
    {
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.SecurityController r1, $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.SecurityException $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: org.mozilla.javascript.SecurityController;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        if r1 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label2:
        $r2 = r0.<org.mozilla.javascript.Context: org.mozilla.javascript.SecurityController securityController>;

        if $r2 == null goto label3;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Can not overwrite existing SecurityController object");

        throw $r4;

     label3:
        $z1 = staticinvoke <org.mozilla.javascript.SecurityController: boolean hasGlobal()>();

        if $z1 == 0 goto label4;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Can not overwrite existing global SecurityController object");

        throw $r3;

     label4:
        r0.<org.mozilla.javascript.Context: org.mozilla.javascript.SecurityController securityController> = r1;

        return;
    }

    public final void setClassShutter(org.mozilla.javascript.ClassShutter)
    {
        org.mozilla.javascript.ClassShutter r1, $r2;
        org.mozilla.javascript.Context r0;
        java.lang.SecurityException $r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: org.mozilla.javascript.ClassShutter;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        $r2 = r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ClassShutter classShutter>;

        if $r2 == null goto label3;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Cannot overwrite existing ClassShutter object");

        throw $r3;

     label3:
        r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ClassShutter classShutter> = r1;

        return;
    }

    final org.mozilla.javascript.ClassShutter getClassShutter()
    {
        org.mozilla.javascript.ClassShutter $r1;
        org.mozilla.javascript.Context r0;

        r0 := @this: org.mozilla.javascript.Context;

        $r1 = r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ClassShutter classShutter>;

        return $r1;
    }

    public final java.lang.Object getThreadLocal(java.lang.Object)
    {
        org.mozilla.javascript.Context r0;
        java.lang.Object r2, $r4;
        java.util.Hashtable $r1, $r3;

        r0 := @this: org.mozilla.javascript.Context;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.mozilla.javascript.Context: java.util.Hashtable hashtable>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.mozilla.javascript.Context: java.util.Hashtable hashtable>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        return $r4;
    }

    public final void putThreadLocal(java.lang.Object, java.lang.Object)
    {
        org.mozilla.javascript.Context r0;
        java.lang.Object r2, r3;
        java.util.Hashtable $r1, $r4, $r5;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        $r1 = r0.<org.mozilla.javascript.Context: java.util.Hashtable hashtable>;

        if $r1 != null goto label2;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        r0.<org.mozilla.javascript.Context: java.util.Hashtable hashtable> = $r5;

     label2:
        $r4 = r0.<org.mozilla.javascript.Context: java.util.Hashtable hashtable>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }

    public final void removeThreadLocal(java.lang.Object)
    {
        org.mozilla.javascript.Context r0;
        java.lang.Object r2;
        java.util.Hashtable $r1, $r3;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        r2 := @parameter0: java.lang.Object;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        $r1 = r0.<org.mozilla.javascript.Context: java.util.Hashtable hashtable>;

        if $r1 != null goto label2;

        return;

     label2:
        $r3 = r0.<org.mozilla.javascript.Context: java.util.Hashtable hashtable>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r2);

        return;
    }

    public final boolean hasCompileFunctionsWithDynamicScope()
    {
        org.mozilla.javascript.Context r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        $z0 = r0.<org.mozilla.javascript.Context: boolean compileFunctionsWithDynamicScopeFlag>;

        return $z0;
    }

    public final void setCompileFunctionsWithDynamicScope(boolean)
    {
        org.mozilla.javascript.Context r0;
        boolean $z0, z1;

        r0 := @this: org.mozilla.javascript.Context;

        z1 := @parameter0: boolean;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        r0.<org.mozilla.javascript.Context: boolean compileFunctionsWithDynamicScopeFlag> = z1;

        return;
    }

    public static void setCachingEnabled(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        return;
    }

    public final void setWrapFactory(org.mozilla.javascript.WrapFactory)
    {
        org.mozilla.javascript.Context r0;
        java.lang.IllegalArgumentException $r2;
        org.mozilla.javascript.WrapFactory r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: org.mozilla.javascript.WrapFactory;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        if r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        r0.<org.mozilla.javascript.Context: org.mozilla.javascript.WrapFactory wrapFactory> = r1;

        return;
    }

    public final org.mozilla.javascript.WrapFactory getWrapFactory()
    {
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.WrapFactory $r1, $r2, $r3;

        r0 := @this: org.mozilla.javascript.Context;

        $r1 = r0.<org.mozilla.javascript.Context: org.mozilla.javascript.WrapFactory wrapFactory>;

        if $r1 != null goto label1;

        $r3 = new org.mozilla.javascript.WrapFactory;

        specialinvoke $r3.<org.mozilla.javascript.WrapFactory: void <init>()>();

        r0.<org.mozilla.javascript.Context: org.mozilla.javascript.WrapFactory wrapFactory> = $r3;

     label1:
        $r2 = r0.<org.mozilla.javascript.Context: org.mozilla.javascript.WrapFactory wrapFactory>;

        return $r2;
    }

    public final org.mozilla.javascript.debug.Debugger getDebugger()
    {
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.debug.Debugger $r1;

        r0 := @this: org.mozilla.javascript.Context;

        $r1 = r0.<org.mozilla.javascript.Context: org.mozilla.javascript.debug.Debugger debugger>;

        return $r1;
    }

    public final java.lang.Object getDebuggerContextData()
    {
        java.lang.Object $r1;
        org.mozilla.javascript.Context r0;

        r0 := @this: org.mozilla.javascript.Context;

        $r1 = r0.<org.mozilla.javascript.Context: java.lang.Object debuggerData>;

        return $r1;
    }

    public final void setDebugger(org.mozilla.javascript.debug.Debugger, java.lang.Object)
    {
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.debug.Debugger r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: org.mozilla.javascript.debug.Debugger;

        r2 := @parameter1: java.lang.Object;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        r0.<org.mozilla.javascript.Context: org.mozilla.javascript.debug.Debugger debugger> = r1;

        r0.<org.mozilla.javascript.Context: java.lang.Object debuggerData> = r2;

        return;
    }

    public static org.mozilla.javascript.debug.DebuggableScript getDebuggableView(org.mozilla.javascript.Script)
    {
        org.mozilla.javascript.Script r0;
        org.mozilla.javascript.debug.DebuggableScript $r2;
        boolean $z0;
        org.mozilla.javascript.NativeFunction $r1;

        r0 := @parameter0: org.mozilla.javascript.Script;

        $z0 = r0 instanceof org.mozilla.javascript.NativeFunction;

        if $z0 == 0 goto label1;

        $r1 = (org.mozilla.javascript.NativeFunction) r0;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.NativeFunction: org.mozilla.javascript.debug.DebuggableScript getDebuggableView()>();

        return $r2;

     label1:
        return null;
    }

    public boolean hasFeature(int)
    {
        org.mozilla.javascript.Context r0;
        int i0;
        org.mozilla.javascript.ContextFactory $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory getFactory()>();

        $z0 = virtualinvoke $r1.<org.mozilla.javascript.ContextFactory: boolean hasFeature(org.mozilla.javascript.Context,int)>(r0, i0);

        return $z0;
    }

    public final int getInstructionObserverThreshold()
    {
        int $i0;
        org.mozilla.javascript.Context r0;

        r0 := @this: org.mozilla.javascript.Context;

        $i0 = r0.<org.mozilla.javascript.Context: int instructionThreshold>;

        return $i0;
    }

    public final void setInstructionObserverThreshold(int)
    {
        org.mozilla.javascript.Context r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        i0 := @parameter0: int;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        if i0 >= 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        r0.<org.mozilla.javascript.Context: int instructionThreshold> = i0;

        return;
    }

    protected void observeInstructionCount(int)
    {
        int i0;
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.ContextFactory $r1;

        r0 := @this: org.mozilla.javascript.Context;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory getFactory()>();

        virtualinvoke $r1.<org.mozilla.javascript.ContextFactory: void observeInstructionCount(org.mozilla.javascript.Context,int)>(r0, i0);

        return;
    }

    public org.mozilla.javascript.GeneratedClassLoader createClassLoader(java.lang.ClassLoader)
    {
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.GeneratedClassLoader $r3;
        java.lang.ClassLoader r2;
        org.mozilla.javascript.ContextFactory $r1;

        r0 := @this: org.mozilla.javascript.Context;

        r2 := @parameter0: java.lang.ClassLoader;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory getFactory()>();

        $r3 = virtualinvoke $r1.<org.mozilla.javascript.ContextFactory: org.mozilla.javascript.GeneratedClassLoader createClassLoader(java.lang.ClassLoader)>(r2);

        return $r3;
    }

    public final java.lang.ClassLoader getApplicationClassLoader()
    {
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.VMBridge $r4;
        java.lang.Class $r6, $r7, $r8;
        java.lang.ClassLoader $r1, $r3, $r5, r9, $r10;
        org.mozilla.javascript.ContextFactory $r2;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        $r1 = r0.<org.mozilla.javascript.Context: java.lang.ClassLoader applicationClassLoader>;

        if $r1 != null goto label4;

        $r2 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory getFactory()>();

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.ContextFactory: java.lang.ClassLoader getApplicationClassLoader()>();

        r9 = $r3;

        if $r3 != null goto label3;

        $r4 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        $r5 = virtualinvoke $r4.<org.mozilla.javascript.VMBridge: java.lang.ClassLoader getCurrentThreadClassLoader()>();

        if $r5 == null goto label1;

        $z0 = staticinvoke <org.mozilla.javascript.Kit: boolean testIfCanLoadRhinoClasses(java.lang.ClassLoader)>($r5);

        if $z0 == 0 goto label1;

        return $r5;

     label1:
        $r6 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ContextFactoryClass>;

        if $r6 == $r7 goto label2;

        r9 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        goto label3;

     label2:
        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r9 = virtualinvoke $r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label3:
        r0.<org.mozilla.javascript.Context: java.lang.ClassLoader applicationClassLoader> = r9;

     label4:
        $r10 = r0.<org.mozilla.javascript.Context: java.lang.ClassLoader applicationClassLoader>;

        return $r10;
    }

    public final void setApplicationClassLoader(java.lang.ClassLoader)
    {
        org.mozilla.javascript.Context r0;
        java.lang.ClassLoader r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0, $z1;

        r0 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: java.lang.ClassLoader;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        if r1 != null goto label2;

        r0.<org.mozilla.javascript.Context: java.lang.ClassLoader applicationClassLoader> = null;

        return;

     label2:
        $z1 = staticinvoke <org.mozilla.javascript.Kit: boolean testIfCanLoadRhinoClasses(java.lang.ClassLoader)>(r1);

        if $z1 != 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Loader can not resolve Rhino classes");

        throw $r2;

     label3:
        r0.<org.mozilla.javascript.Context: java.lang.ClassLoader applicationClassLoader> = r1;

        return;
    }

    static org.mozilla.javascript.Context getContext()
    {
        java.lang.RuntimeException $r1;
        org.mozilla.javascript.Context $r0;

        $r0 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getCurrentContext()>();

        if $r0 != null goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("No Context associated with current Thread");

        throw $r1;

     label1:
        return $r0;
    }

    private java.lang.Object compileImpl(org.mozilla.javascript.Scriptable, java.io.Reader, java.lang.String, java.lang.String, int, java.lang.Object, boolean, org.mozilla.javascript.Interpreter, org.mozilla.javascript.ErrorReporter) throws java.io.IOException
    {
        org.mozilla.javascript.Interpreter r16;
        org.mozilla.javascript.Node $r10, $r11;
        org.mozilla.javascript.debug.DebuggableScript r25;
        org.mozilla.javascript.ScriptOrFnNode r19;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.mozilla.javascript.debug.Debugger $r4, $r8;
        java.io.Reader r14;
        org.mozilla.javascript.Scriptable r1;
        org.mozilla.javascript.Parser $r18;
        java.lang.StringBuffer $r21, $r22, $r23;
        int i0, $i1, $i2;
        java.lang.String r5, $r6, r15, $r24;
        org.mozilla.javascript.Context r3;
        org.mozilla.javascript.SecurityController $r12;
        java.lang.RuntimeException $r9;
        java.lang.IllegalArgumentException $r13, $r20;
        org.mozilla.javascript.ErrorReporter r17;
        org.mozilla.javascript.CompilerEnvirons $r2;
        java.lang.Object r0, $r7, r26;

        r3 := @this: org.mozilla.javascript.Context;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        r14 := @parameter1: java.io.Reader;

        r15 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        r0 := @parameter5: java.lang.Object;

        z0 := @parameter6: boolean;

        r16 := @parameter7: org.mozilla.javascript.Interpreter;

        r17 := @parameter8: org.mozilla.javascript.ErrorReporter;

        if r0 == null goto label01;

        $r12 = r3.<org.mozilla.javascript.Context: org.mozilla.javascript.SecurityController securityController>;

        if $r12 != null goto label01;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("securityDomain should be null if setSecurityController() was never called");

        throw $r13;

     label01:
        if r14 != null goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        if r15 != null goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        $z5 = $z3 ^ $z4;

        if $z5 != 0 goto label06;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label06:
        if r1 != null goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        $z1 = $z6 ^ z0;

        if $z1 != 0 goto label09;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label09:
        $r2 = new org.mozilla.javascript.CompilerEnvirons;

        specialinvoke $r2.<org.mozilla.javascript.CompilerEnvirons: void <init>()>();

        virtualinvoke $r2.<org.mozilla.javascript.CompilerEnvirons: void initFromContext(org.mozilla.javascript.Context)>(r3);

        if r17 != null goto label10;

        r17 = virtualinvoke $r2.<org.mozilla.javascript.CompilerEnvirons: org.mozilla.javascript.ErrorReporter getErrorReporter()>();

     label10:
        $r4 = r3.<org.mozilla.javascript.Context: org.mozilla.javascript.debug.Debugger debugger>;

        if $r4 == null goto label11;

        if r14 == null goto label11;

        r15 = staticinvoke <org.mozilla.javascript.Kit: java.lang.String readReader(java.io.Reader)>(r14);

        r14 = null;

     label11:
        $r18 = new org.mozilla.javascript.Parser;

        specialinvoke $r18.<org.mozilla.javascript.Parser: void <init>(org.mozilla.javascript.CompilerEnvirons,org.mozilla.javascript.ErrorReporter)>($r2, r17);

        if z0 == 0 goto label12;

        $r18.<org.mozilla.javascript.Parser: boolean calledByCompileFunction> = 1;

     label12:
        if r15 == null goto label13;

        r19 = virtualinvoke $r18.<org.mozilla.javascript.Parser: org.mozilla.javascript.ScriptOrFnNode parse(java.lang.String,java.lang.String,int)>(r15, r5, i0);

        goto label14;

     label13:
        r19 = virtualinvoke $r18.<org.mozilla.javascript.Parser: org.mozilla.javascript.ScriptOrFnNode parse(java.io.Reader,java.lang.String,int)>(r14, r5, i0);

     label14:
        if z0 == 0 goto label16;

        $i1 = virtualinvoke r19.<org.mozilla.javascript.ScriptOrFnNode: int getFunctionCount()>();

        if $i1 != 1 goto label15;

        $r10 = virtualinvoke r19.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.Node getFirstChild()>();

        if $r10 == null goto label15;

        $r11 = virtualinvoke r19.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.Node getFirstChild()>();

        $i2 = virtualinvoke $r11.<org.mozilla.javascript.Node: int getType()>();

        if $i2 == 105 goto label16;

     label15:
        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("compileFunction only accepts source with single JS function: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label16:
        if r16 != null goto label17;

        r16 = specialinvoke r3.<org.mozilla.javascript.Context: org.mozilla.javascript.Interpreter createCompiler()>();

     label17:
        $r6 = virtualinvoke $r18.<org.mozilla.javascript.Parser: java.lang.String getEncodedSource()>();

        $r7 = virtualinvoke r16.<org.mozilla.javascript.Interpreter: java.lang.Object compile(org.mozilla.javascript.CompilerEnvirons,org.mozilla.javascript.ScriptOrFnNode,java.lang.String,boolean)>($r2, r19, $r6, z0);

        $r8 = r3.<org.mozilla.javascript.Context: org.mozilla.javascript.debug.Debugger debugger>;

        if $r8 == null goto label20;

        if r15 != null goto label18;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label18:
        $z2 = $r7 instanceof org.mozilla.javascript.debug.DebuggableScript;

        if $z2 == 0 goto label19;

        r25 = (org.mozilla.javascript.debug.DebuggableScript) $r7;

        staticinvoke <org.mozilla.javascript.Context: void notifyDebugger_r(org.mozilla.javascript.Context,org.mozilla.javascript.debug.DebuggableScript,java.lang.String)>(r3, r25, r15);

        goto label20;

     label19:
        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("NOT SUPPORTED");

        throw $r9;

     label20:
        if z0 == 0 goto label21;

        r26 = virtualinvoke r16.<org.mozilla.javascript.Interpreter: org.mozilla.javascript.Function createFunctionObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Object)>(r3, r1, $r7, r0);

        goto label22;

     label21:
        r26 = virtualinvoke r16.<org.mozilla.javascript.Interpreter: org.mozilla.javascript.Script createScriptObject(java.lang.Object,java.lang.Object)>($r7, r0);

     label22:
        return r26;
    }

    private static void notifyDebugger_r(org.mozilla.javascript.Context, org.mozilla.javascript.debug.DebuggableScript, java.lang.String)
    {
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.debug.Debugger $r3;
        org.mozilla.javascript.debug.DebuggableScript r1, $r4;
        int $i0, i1;
        java.lang.String r2;

        r0 := @parameter0: org.mozilla.javascript.Context;

        r1 := @parameter1: org.mozilla.javascript.debug.DebuggableScript;

        r2 := @parameter2: java.lang.String;

        $r3 = r0.<org.mozilla.javascript.Context: org.mozilla.javascript.debug.Debugger debugger>;

        interfaceinvoke $r3.<org.mozilla.javascript.debug.Debugger: void handleCompilationDone(org.mozilla.javascript.Context,org.mozilla.javascript.debug.DebuggableScript,java.lang.String)>(r0, r1, r2);

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r1.<org.mozilla.javascript.debug.DebuggableScript: int getFunctionCount()>();

        if i1 == $i0 goto label2;

        $r4 = interfaceinvoke r1.<org.mozilla.javascript.debug.DebuggableScript: org.mozilla.javascript.debug.DebuggableScript getFunction(int)>(i1);

        staticinvoke <org.mozilla.javascript.Context: void notifyDebugger_r(org.mozilla.javascript.Context,org.mozilla.javascript.debug.DebuggableScript,java.lang.String)>(r0, $r4, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private org.mozilla.javascript.Interpreter createCompiler()
    {
        org.mozilla.javascript.Interpreter $r1, r5;
        org.mozilla.javascript.Context r0;
        int $i0;
        java.lang.Class $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: org.mozilla.javascript.Context;

        r5 = null;

        $i0 = r0.<org.mozilla.javascript.Context: int optimizationLevel>;

        if $i0 < 0 goto label1;

        $r2 = <org.mozilla.javascript.Context: java.lang.Class codegenClass>;

        if $r2 == null goto label1;

        $r3 = <org.mozilla.javascript.Context: java.lang.Class codegenClass>;

        $r4 = staticinvoke <org.mozilla.javascript.Kit: java.lang.Object newInstanceOrNull(java.lang.Class)>($r3);

        r5 = (org.mozilla.javascript.Interpreter) $r4;

     label1:
        if r5 != null goto label2;

        $r1 = new org.mozilla.javascript.Interpreter;

        specialinvoke $r1.<org.mozilla.javascript.Interpreter: void <init>()>();

        r5 = $r1;

     label2:
        return r5;
    }

    static java.lang.String getSourcePositionFromStack(int[])
    {
        int[] r8;
        boolean $z0;
        java.io.PrintWriter $r13;
        java.io.CharArrayWriter $r11;
        int $i0, $i2, $i3, $i4, $i5, i6, i7, i8, i9, $i11, $i13, $i15, $i16, $i17, $i18, $i19, $i21, $i23, $i25, $i27, $i29, $i31;
        java.lang.String $r5, $r6, $r7, $r9;
        org.mozilla.javascript.Context $r0;
        char $c1;
        java.lang.NumberFormatException $r10;
        java.lang.RuntimeException $r12;
        java.lang.Object $r1;

        r8 := @parameter0: int[];

        $r0 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getCurrentContext()>();

        if $r0 != null goto label01;

        return null;

     label01:
        $r1 = $r0.<org.mozilla.javascript.Context: java.lang.Object lastInterpreterFrame>;

        if $r1 == null goto label02;

        $r9 = staticinvoke <org.mozilla.javascript.Interpreter: java.lang.String getSourcePositionFromStack(org.mozilla.javascript.Context,int[])>($r0, r8);

        return $r9;

     label02:
        $r11 = new java.io.CharArrayWriter;

        specialinvoke $r11.<java.io.CharArrayWriter: void <init>()>();

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>()>();

        $r13 = new java.io.PrintWriter;

        specialinvoke $r13.<java.io.PrintWriter: void <init>(java.io.Writer)>($r11);

        virtualinvoke $r12.<java.lang.RuntimeException: void printStackTrace(java.io.PrintWriter)>($r13);

        $r5 = virtualinvoke $r11.<java.io.CharArrayWriter: java.lang.String toString()>();

        $i11 = (int) -1;

        i6 = $i11;

        $i13 = (int) -1;

        i7 = $i13;

        $i15 = (int) -1;

        i8 = $i15;

        i9 = 0;

     label03:
        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if i9 >= $i0 goto label12;

        $c1 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(i9);

        $i16 = (int) $c1;

        if $i16 != 58 goto label04;

        i8 = i9;

        goto label11;

     label04:
        $i17 = (int) $c1;

        if $i17 != 40 goto label05;

        i6 = i9;

        goto label11;

     label05:
        $i18 = (int) $c1;

        if $i18 != 41 goto label06;

        i7 = i9;

        goto label11;

     label06:
        $i19 = (int) $c1;

        if $i19 != 10 goto label11;

        $i21 = (int) -1;

        if i6 == $i21 goto label11;

        $i23 = (int) -1;

        if i7 == $i23 goto label11;

        $i25 = (int) -1;

        if i8 == $i25 goto label11;

        if i6 >= i8 goto label11;

        if i8 >= i7 goto label11;

        $i2 = i6 + 1;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>($i2, i8);

        $z0 = virtualinvoke $r6.<java.lang.String: boolean endsWith(java.lang.String)>(".java");

        if $z0 != 0 goto label10;

        $i3 = i8 + 1;

        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>($i3, i7);

     label07:
        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        r8[0] = $i4;

        $i5 = r8[0];

        if $i5 >= 0 goto label08;

        r8[0] = 0;

     label08:
        return $r6;

     label09:
        $r10 := @caughtexception;

     label10:
        $i27 = (int) -1;

        i8 = $i27;

        $i29 = (int) -1;

        i7 = $i29;

        $i31 = (int) -1;

        i6 = $i31;

     label11:
        i9 = i9 + 1;

        goto label03;

     label12:
        return null;

        catch java.lang.NumberFormatException from label07 to label08 with label09;
    }

    org.mozilla.javascript.RegExpProxy getRegExpProxy()
    {
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.RegExpProxy $r1, $r4, $r5;
        java.lang.Class $r2;
        java.lang.Object $r3;

        r0 := @this: org.mozilla.javascript.Context;

        $r1 = r0.<org.mozilla.javascript.Context: org.mozilla.javascript.RegExpProxy regExpProxy>;

        if $r1 != null goto label1;

        $r2 = staticinvoke <org.mozilla.javascript.Kit: java.lang.Class classOrNull(java.lang.String)>("org.mozilla.javascript.regexp.RegExpImpl");

        if $r2 == null goto label1;

        $r3 = staticinvoke <org.mozilla.javascript.Kit: java.lang.Object newInstanceOrNull(java.lang.Class)>($r2);

        $r4 = (org.mozilla.javascript.RegExpProxy) $r3;

        r0.<org.mozilla.javascript.Context: org.mozilla.javascript.RegExpProxy regExpProxy> = $r4;

     label1:
        $r5 = r0.<org.mozilla.javascript.Context: org.mozilla.javascript.RegExpProxy regExpProxy>;

        return $r5;
    }

    final boolean isVersionECMA1()
    {
        org.mozilla.javascript.Context r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        $i0 = r0.<org.mozilla.javascript.Context: int version>;

        if $i0 == 0 goto label1;

        $i1 = r0.<org.mozilla.javascript.Context: int version>;

        if $i1 < 130 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    org.mozilla.javascript.SecurityController getSecurityController()
    {
        org.mozilla.javascript.SecurityController $r0, $r2;
        org.mozilla.javascript.Context r1;

        r1 := @this: org.mozilla.javascript.Context;

        $r0 = staticinvoke <org.mozilla.javascript.SecurityController: org.mozilla.javascript.SecurityController global()>();

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r2 = r1.<org.mozilla.javascript.Context: org.mozilla.javascript.SecurityController securityController>;

        return $r2;
    }

    public final boolean isGeneratingDebugChanged()
    {
        org.mozilla.javascript.Context r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        $z0 = r0.<org.mozilla.javascript.Context: boolean generatingDebugChanged>;

        return $z0;
    }

    public void addActivationName(java.lang.String)
    {
        org.mozilla.javascript.Context r0;
        java.lang.String r2;
        java.util.Hashtable $r1, $r3, $r4;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        r2 := @parameter0: java.lang.String;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        $r1 = r0.<org.mozilla.javascript.Context: java.util.Hashtable activationNames>;

        if $r1 != null goto label2;

        $r4 = new java.util.Hashtable;

        specialinvoke $r4.<java.util.Hashtable: void <init>(int)>(5);

        r0.<org.mozilla.javascript.Context: java.util.Hashtable activationNames> = $r4;

     label2:
        $r3 = r0.<org.mozilla.javascript.Context: java.util.Hashtable activationNames>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r2);

        return;
    }

    public final boolean isActivationNeeded(java.lang.String)
    {
        org.mozilla.javascript.Context r0;
        java.lang.String r2;
        java.util.Hashtable $r1, $r3;
        boolean $z0, $z1;

        r0 := @this: org.mozilla.javascript.Context;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.mozilla.javascript.Context: java.util.Hashtable activationNames>;

        if $r1 == null goto label1;

        $r3 = r0.<org.mozilla.javascript.Context: java.util.Hashtable activationNames>;

        $z0 = virtualinvoke $r3.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void removeActivationName(java.lang.String)
    {
        org.mozilla.javascript.Context r0;
        java.lang.String r2;
        java.util.Hashtable $r1, $r3;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Context;

        r2 := @parameter0: java.lang.String;

        $z0 = r0.<org.mozilla.javascript.Context: boolean sealed>;

        if $z0 == 0 goto label1;

        staticinvoke <org.mozilla.javascript.Context: void onSealedMutation()>();

     label1:
        $r1 = r0.<org.mozilla.javascript.Context: java.util.Hashtable activationNames>;

        if $r1 == null goto label2;

        $r3 = r0.<org.mozilla.javascript.Context: java.util.Hashtable activationNames>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r2);

     label2:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r1;
        java.lang.Object[] $r0;

        <org.mozilla.javascript.Context: java.lang.String errorReporterProperty> = "error reporter";

        <org.mozilla.javascript.Context: java.lang.String languageVersionProperty> = "language version";

        <org.mozilla.javascript.Context: int FEATURE_STRICT_EVAL> = 9;

        <org.mozilla.javascript.Context: int FEATURE_STRICT_VARS> = 8;

        <org.mozilla.javascript.Context: int FEATURE_DYNAMIC_SCOPE> = 7;

        <org.mozilla.javascript.Context: int FEATURE_E4X> = 6;

        <org.mozilla.javascript.Context: int FEATURE_PARENT_PROTO_PROPRTIES> = 5;

        <org.mozilla.javascript.Context: int FEATURE_TO_STRING_AS_SOURCE> = 4;

        <org.mozilla.javascript.Context: int FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER> = 3;

        <org.mozilla.javascript.Context: int FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME> = 2;

        <org.mozilla.javascript.Context: int FEATURE_NON_ECMA_GET_YEAR> = 1;

        <org.mozilla.javascript.Context: int VERSION_1_6> = 160;

        <org.mozilla.javascript.Context: int VERSION_1_5> = 150;

        <org.mozilla.javascript.Context: int VERSION_1_4> = 140;

        <org.mozilla.javascript.Context: int VERSION_1_3> = 130;

        <org.mozilla.javascript.Context: int VERSION_1_2> = 120;

        <org.mozilla.javascript.Context: int VERSION_1_1> = 110;

        <org.mozilla.javascript.Context: int VERSION_1_0> = 100;

        <org.mozilla.javascript.Context: int VERSION_DEFAULT> = 0;

        <org.mozilla.javascript.Context: int VERSION_UNKNOWN> = -1;

        $r0 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

        <org.mozilla.javascript.Context: java.lang.Object[] emptyArgs> = $r0;

        $r1 = staticinvoke <org.mozilla.javascript.Kit: java.lang.Class classOrNull(java.lang.String)>("org.mozilla.javascript.optimizer.Codegen");

        <org.mozilla.javascript.Context: java.lang.Class codegenClass> = $r1;

        return;
    }
}
