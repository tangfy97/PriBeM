public class org.apache.velocity.runtime.directive.Macro extends org.apache.velocity.runtime.directive.Directive
{
    private static boolean debugMode;

    public void <init>()
    {
        org.apache.velocity.runtime.directive.Macro r0;

        r0 := @this: org.apache.velocity.runtime.directive.Macro;

        specialinvoke r0.<org.apache.velocity.runtime.directive.Directive: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        org.apache.velocity.runtime.directive.Macro r0;

        r0 := @this: org.apache.velocity.runtime.directive.Macro;

        return "macro";
    }

    public int getType()
    {
        org.apache.velocity.runtime.directive.Macro r0;

        r0 := @this: org.apache.velocity.runtime.directive.Macro;

        return 1;
    }

    public boolean isScopeProvided()
    {
        org.apache.velocity.runtime.directive.Macro r0;

        r0 := @this: org.apache.velocity.runtime.directive.Macro;

        return 0;
    }

    public boolean render(org.apache.velocity.context.InternalContextAdapter, java.io.Writer, org.apache.velocity.runtime.parser.node.Node) throws java.io.IOException
    {
        org.apache.velocity.context.InternalContextAdapter r1;
        java.io.Writer r2;
        org.apache.velocity.runtime.parser.node.Node r3;
        org.apache.velocity.runtime.directive.Macro r0;

        r0 := @this: org.apache.velocity.runtime.directive.Macro;

        r1 := @parameter0: org.apache.velocity.context.InternalContextAdapter;

        r2 := @parameter1: java.io.Writer;

        r3 := @parameter2: org.apache.velocity.runtime.parser.node.Node;

        return 1;
    }

    public void init(org.apache.velocity.runtime.RuntimeServices, org.apache.velocity.context.InternalContextAdapter, org.apache.velocity.runtime.parser.node.Node) throws org.apache.velocity.exception.TemplateInitException
    {
        org.apache.velocity.context.InternalContextAdapter r2;
        java.lang.String[] $r4;
        org.apache.velocity.runtime.directive.Macro r0;
        org.apache.velocity.runtime.RuntimeServices r1;
        int $i0, $i1;
        java.lang.String $r5, $r7;
        org.apache.velocity.runtime.parser.node.Node r3, $r6;

        r0 := @this: org.apache.velocity.runtime.directive.Macro;

        r1 := @parameter0: org.apache.velocity.runtime.RuntimeServices;

        r2 := @parameter1: org.apache.velocity.context.InternalContextAdapter;

        r3 := @parameter2: org.apache.velocity.runtime.parser.node.Node;

        specialinvoke r0.<org.apache.velocity.runtime.directive.Directive: void init(org.apache.velocity.runtime.RuntimeServices,org.apache.velocity.context.InternalContextAdapter,org.apache.velocity.runtime.parser.node.Node)>(r1, r2, r3);

        $r4 = staticinvoke <org.apache.velocity.runtime.directive.Macro: java.lang.String[] getArgArray(org.apache.velocity.runtime.parser.node.Node,org.apache.velocity.runtime.RuntimeServices)>(r3, r1);

        $i0 = interfaceinvoke r3.<org.apache.velocity.runtime.parser.node.Node: int jjtGetNumChildren()>();

        $r5 = $r4[0];

        $i1 = $i0 - 1;

        $r6 = interfaceinvoke r3.<org.apache.velocity.runtime.parser.node.Node: org.apache.velocity.runtime.parser.node.Node jjtGetChild(int)>($i1);

        $r7 = interfaceinvoke r3.<org.apache.velocity.runtime.parser.node.Node: java.lang.String getTemplateName()>();

        interfaceinvoke r1.<org.apache.velocity.runtime.RuntimeServices: boolean addVelocimacro(java.lang.String,org.apache.velocity.runtime.parser.node.Node,java.lang.String[],java.lang.String)>($r5, $r6, $r4, $r7);

        return;
    }

    public static void checkArgs(org.apache.velocity.runtime.RuntimeServices, org.apache.velocity.runtime.parser.Token, org.apache.velocity.runtime.parser.node.Node, java.lang.String) throws java.io.IOException, org.apache.velocity.runtime.parser.ParseException
    {
        java.lang.String[] $r5;
        org.apache.velocity.runtime.RuntimeServices r11;
        org.apache.velocity.runtime.directive.MacroParseException $r2, $r17;
        java.lang.StringBuffer $r3, $r4, $r7, $r13, $r14, $r15;
        int $i0, $i1;
        org.apache.velocity.runtime.parser.Token r10;
        java.lang.String $r6, $r8, r9, $r16;
        org.apache.velocity.runtime.parser.node.Node r0, $r1;
        org.apache.velocity.runtime.log.Log $r12;

        r11 := @parameter0: org.apache.velocity.runtime.RuntimeServices;

        r10 := @parameter1: org.apache.velocity.runtime.parser.Token;

        r0 := @parameter2: org.apache.velocity.runtime.parser.node.Node;

        r9 := @parameter3: java.lang.String;

        $i0 = interfaceinvoke r0.<org.apache.velocity.runtime.parser.node.Node: int jjtGetNumChildren()>();

        if $i0 >= 2 goto label1;

        $r12 = interfaceinvoke r11.<org.apache.velocity.runtime.RuntimeServices: org.apache.velocity.runtime.log.Log getLog()>();

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("#macro error : Velocimacro must have name as 1st argument to #macro(). #args = ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<org.apache.velocity.runtime.log.Log: void error(java.lang.Object)>($r16);

        $r17 = new org.apache.velocity.runtime.directive.MacroParseException;

        specialinvoke $r17.<org.apache.velocity.runtime.directive.MacroParseException: void <init>(java.lang.String,java.lang.String,org.apache.velocity.runtime.parser.Token)>("First argument to #macro() must be  macro name", r9, r10);

        throw $r17;

     label1:
        $r1 = interfaceinvoke r0.<org.apache.velocity.runtime.parser.node.Node: org.apache.velocity.runtime.parser.node.Node jjtGetChild(int)>(0);

        $i1 = interfaceinvoke $r1.<org.apache.velocity.runtime.parser.node.Node: int getType()>();

        if $i1 == 10 goto label2;

        $r2 = new org.apache.velocity.runtime.directive.MacroParseException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("First argument to #macro() must be a token without surrounding \' or \", which specifies the macro name.  Currently it is a ");

        $r5 = <org.apache.velocity.runtime.parser.ParserTreeConstants: java.lang.String[] jjtNodeName>;

        $r6 = $r5[$i1];

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.velocity.runtime.directive.MacroParseException: void <init>(java.lang.String,java.lang.String,org.apache.velocity.runtime.parser.Token)>($r8, r9, r10);

        throw $r2;

     label2:
        return;
    }

    private static java.lang.String[] getArgArray(org.apache.velocity.runtime.parser.node.Node, org.apache.velocity.runtime.RuntimeServices)
    {
        java.lang.String[] r1;
        org.apache.velocity.runtime.RuntimeServices r4;
        java.lang.StringBuffer $r3, $r15;
        int $i0, $i1, i2, i3, $i5;
        org.apache.velocity.runtime.parser.Token $r7;
        java.lang.String $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        org.apache.velocity.runtime.parser.node.Node r0, $r6;
        boolean $z0, $z1;
        org.apache.velocity.runtime.log.Log $r5;

        r0 := @parameter0: org.apache.velocity.runtime.parser.node.Node;

        r4 := @parameter1: org.apache.velocity.runtime.RuntimeServices;

        $i0 = interfaceinvoke r0.<org.apache.velocity.runtime.parser.node.Node: int jjtGetNumChildren()>();

        $i5 = (int) -1;

        i2 = $i0 + $i5;

        r1 = newarray (java.lang.String)[i2];

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        $r6 = interfaceinvoke r0.<org.apache.velocity.runtime.parser.node.Node: org.apache.velocity.runtime.parser.node.Node jjtGetChild(int)>(i3);

        $r7 = interfaceinvoke $r6.<org.apache.velocity.runtime.parser.node.Node: org.apache.velocity.runtime.parser.Token getFirstToken()>();

        $r8 = $r7.<org.apache.velocity.runtime.parser.Token: java.lang.String image>;

        r1[i3] = $r8;

        if i3 <= 0 goto label2;

        $r9 = r1[i3];

        $z1 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("$");

        if $z1 == 0 goto label2;

        $r11 = r1[i3];

        $r10 = r1[i3];

        $i1 = virtualinvoke $r10.<java.lang.String: int length()>();

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        r1[i3] = $r12;

     label2:
        $r13 = r1[i3];

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String intern()>();

        r1[i3] = $r14;

        i3 = i3 + 1;

        goto label1;

     label3:
        $z0 = <org.apache.velocity.runtime.directive.Macro: boolean debugMode>;

        if $z0 == 0 goto label4;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>(java.lang.String)>("Macro.getArgArray() : nbrArgs=");

        $r3 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        staticinvoke <org.apache.velocity.runtime.directive.Macro: java.lang.StringBuffer macroToString(java.lang.StringBuffer,java.lang.String[])>($r15, r1);

        $r5 = interfaceinvoke r4.<org.apache.velocity.runtime.RuntimeServices: org.apache.velocity.runtime.log.Log getLog()>();

        virtualinvoke $r5.<org.apache.velocity.runtime.log.Log: void debug(java.lang.Object)>($r15);

     label4:
        return r1;
    }

    public static final java.lang.StringBuffer macroToString(java.lang.StringBuffer, java.lang.String[])
    {
        java.lang.String[] r3;
        java.lang.StringBuffer r0, r1, $r2, $r5, $r6, $r8;
        int i0, $i1;
        java.lang.String $r4, $r7;

        r0 := @parameter0: java.lang.StringBuffer;

        r3 := @parameter1: java.lang.String[];

        if r0 != null goto label1;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        goto label2;

     label1:
        $r8 = r0;

     label2:
        r1 = $r8;

        $r2 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(35);

        $r4 = r3[0];

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("( ");

        i0 = 1;

     label3:
        $i1 = lengthof r3;

        if i0 >= $i1 goto label4;

        $r6 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r7 = r3[i0];

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        i0 = i0 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" )");

        return r1;
    }

    static void <clinit>()
    {
        <org.apache.velocity.runtime.directive.Macro: boolean debugMode> = 0;

        return;
    }
}
