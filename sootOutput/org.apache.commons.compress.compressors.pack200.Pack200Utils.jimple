public class org.apache.commons.compress.compressors.pack200.Pack200Utils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.commons.compress.compressors.pack200.Pack200Utils r0;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void normalize(java.io.File) throws java.io.IOException
    {
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.apache.commons.compress.compressors.pack200.Pack200Utils: void normalize(java.io.File,java.io.File,java.util.Map)>(r0, r0, null);

        return;
    }

    public static void normalize(java.io.File, java.util.Map) throws java.io.IOException
    {
        java.io.File r0;
        java.util.Map r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Map;

        staticinvoke <org.apache.commons.compress.compressors.pack200.Pack200Utils: void normalize(java.io.File,java.io.File,java.util.Map)>(r0, r0, r1);

        return;
    }

    public static void normalize(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        staticinvoke <org.apache.commons.compress.compressors.pack200.Pack200Utils: void normalize(java.io.File,java.io.File,java.util.Map)>(r0, r1, null);

        return;
    }

    public static void normalize(java.io.File, java.io.File, java.util.Map) throws java.io.IOException
    {
        java.lang.Throwable $r12, $r13;
        java.util.jar.JarFile $r4, r16;
        java.util.HashMap $r11;
        java.util.Map r14;
        java.util.jar.JarOutputStream $r7, $r10;
        java.io.OutputStream r15;
        java.io.FileOutputStream $r1, $r8;
        java.io.File $r0, r5, r9;
        java.util.jar.Pack200$Packer $r2;
        java.util.jar.Pack200$Unpacker $r6;
        java.util.SortedMap $r3;

        r5 := @parameter0: java.io.File;

        r9 := @parameter1: java.io.File;

        r14 := @parameter2: java.util.Map;

        if r14 != null goto label01;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r14 = $r11;

     label01:
        interfaceinvoke r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pack.segment.limit", "-1");

        $r0 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("commons-compress", "pack200normalize");

        virtualinvoke $r0.<java.io.File: void deleteOnExit()>();

     label02:
        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        r15 = $r1;

        r16 = null;

     label03:
        $r2 = staticinvoke <java.util.jar.Pack200: java.util.jar.Pack200$Packer newPacker()>();

        $r3 = interfaceinvoke $r2.<java.util.jar.Pack200$Packer: java.util.SortedMap properties()>();

        interfaceinvoke $r3.<java.util.SortedMap: void putAll(java.util.Map)>(r14);

        $r4 = new java.util.jar.JarFile;

        specialinvoke $r4.<java.util.jar.JarFile: void <init>(java.io.File)>(r5);

        r16 = $r4;

        interfaceinvoke $r2.<java.util.jar.Pack200$Packer: void pack(java.util.jar.JarFile,java.io.OutputStream)>($r4, $r1);

        r16 = null;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        r15 = null;

        $r6 = staticinvoke <java.util.jar.Pack200: java.util.jar.Pack200$Unpacker newUnpacker()>();

        $r7 = new java.util.jar.JarOutputStream;

        $r8 = new java.io.FileOutputStream;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>(r9);

        specialinvoke $r7.<java.util.jar.JarOutputStream: void <init>(java.io.OutputStream)>($r8);

        r15 = $r7;

        $r10 = (java.util.jar.JarOutputStream) $r7;

        interfaceinvoke $r6.<java.util.jar.Pack200$Unpacker: void unpack(java.io.File,java.util.jar.JarOutputStream)>($r0, $r10);

     label04:
        if null == null goto label05;

        virtualinvoke r16.<java.util.jar.JarFile: void close()>();

     label05:
        if $r7 == null goto label10;

        virtualinvoke $r7.<java.io.OutputStream: void close()>();

        goto label10;

     label06:
        $r13 := @caughtexception;

     label07:
        if r16 == null goto label08;

        virtualinvoke r16.<java.util.jar.JarFile: void close()>();

     label08:
        if r15 == null goto label09;

        virtualinvoke r15.<java.io.OutputStream: void close()>();

     label09:
        throw $r13;

     label10:
        virtualinvoke $r0.<java.io.File: boolean delete()>();

        goto label13;

     label11:
        $r12 := @caughtexception;

     label12:
        virtualinvoke $r0.<java.io.File: boolean delete()>();

        throw $r12;

     label13:
        return;

        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label02 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }
}
