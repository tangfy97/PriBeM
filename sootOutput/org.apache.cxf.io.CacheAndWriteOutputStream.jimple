public class org.apache.cxf.io.CacheAndWriteOutputStream extends org.apache.cxf.io.CachedOutputStream
{
    java.io.OutputStream flowThroughStream;

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.cxf.io.CacheAndWriteOutputStream r0;

        r0 := @this: org.apache.cxf.io.CacheAndWriteOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Stream may not be null");

        throw $r2;

     label1:
        r0.<org.apache.cxf.io.CacheAndWriteOutputStream: java.io.OutputStream flowThroughStream> = r1;

        return;
    }

    public void closeFlowthroughStream() throws java.io.IOException
    {
        java.io.OutputStream $r1, $r2;
        org.apache.cxf.io.CacheAndWriteOutputStream r0;

        r0 := @this: org.apache.cxf.io.CacheAndWriteOutputStream;

        $r1 = r0.<org.apache.cxf.io.CacheAndWriteOutputStream: java.io.OutputStream flowThroughStream>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        $r2 = r0.<org.apache.cxf.io.CacheAndWriteOutputStream: java.io.OutputStream flowThroughStream>;

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

        return;
    }

    protected void postClose() throws java.io.IOException
    {
        java.io.OutputStream $r1, $r2;
        org.apache.cxf.io.CacheAndWriteOutputStream r0;

        r0 := @this: org.apache.cxf.io.CacheAndWriteOutputStream;

        $r1 = r0.<org.apache.cxf.io.CacheAndWriteOutputStream: java.io.OutputStream flowThroughStream>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        $r2 = r0.<org.apache.cxf.io.CacheAndWriteOutputStream: java.io.OutputStream flowThroughStream>;

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

        return;
    }

    public java.io.OutputStream getFlowThroughStream()
    {
        java.io.OutputStream $r1;
        org.apache.cxf.io.CacheAndWriteOutputStream r0;

        r0 := @this: org.apache.cxf.io.CacheAndWriteOutputStream;

        $r1 = r0.<org.apache.cxf.io.CacheAndWriteOutputStream: java.io.OutputStream flowThroughStream>;

        return $r1;
    }

    protected void onWrite() throws java.io.IOException
    {
        org.apache.cxf.io.CacheAndWriteOutputStream r0;

        r0 := @this: org.apache.cxf.io.CacheAndWriteOutputStream;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        int i0;
        java.io.OutputStream $r1;
        org.apache.cxf.io.CacheAndWriteOutputStream r0;

        r0 := @this: org.apache.cxf.io.CacheAndWriteOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.cxf.io.CacheAndWriteOutputStream: java.io.OutputStream flowThroughStream>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void write(int)>(i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] r1;
        int i0, i1;
        org.apache.cxf.io.CacheAndWriteOutputStream r0;

        r0 := @this: org.apache.cxf.io.CacheAndWriteOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.cxf.io.CacheAndWriteOutputStream: java.io.OutputStream flowThroughStream>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void write(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] r1;
        org.apache.cxf.io.CacheAndWriteOutputStream r0;

        r0 := @this: org.apache.cxf.io.CacheAndWriteOutputStream;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.apache.cxf.io.CacheAndWriteOutputStream: java.io.OutputStream flowThroughStream>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1);

        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void write(byte[])>(r1);

        return;
    }
}
