public final class org.apache.xmlbeans.impl.schema.SchemaTypeImpl extends java.lang.Object implements org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.impl.values.TypeStoreUserFactory
{
    private javax.xml.namespace.QName _name;
    private org.apache.xmlbeans.SchemaAnnotation _annotation;
    private int _resolvePhase;
    private static final int UNRESOLVED;
    private static final int RESOLVING_SGS;
    private static final int RESOLVED_SGS;
    private static final int RESOLVING;
    private static final int RESOLVED;
    private static final int JAVAIZING;
    private static final int JAVAIZED;
    private org.apache.xmlbeans.SchemaType$Ref _outerSchemaTypeRef;
    private volatile org.apache.xmlbeans.SchemaComponent$Ref _containerFieldRef;
    private volatile org.apache.xmlbeans.SchemaField _containerField;
    private volatile int _containerFieldCode;
    private volatile int _containerFieldIndex;
    private volatile javax.xml.namespace.QName[] _groupReferenceContext;
    private org.apache.xmlbeans.SchemaType$Ref[] _anonymousTyperefs;
    private boolean _isDocumentType;
    private boolean _isAttributeType;
    private boolean _isCompiled;
    private java.lang.String _shortJavaName;
    private java.lang.String _fullJavaName;
    private java.lang.String _shortJavaImplName;
    private java.lang.String _fullJavaImplName;
    private org.apache.xmlbeans.InterfaceExtension[] _interfaces;
    private org.apache.xmlbeans.PrePostExtension _prepost;
    private volatile java.lang.Class _javaClass;
    private volatile java.lang.Class _javaEnumClass;
    private volatile java.lang.Class _javaImplClass;
    private volatile java.lang.reflect.Constructor _javaImplConstructor;
    private volatile java.lang.reflect.Constructor _javaImplConstructor2;
    private volatile boolean _implNotAvailable;
    private volatile java.lang.Class _userTypeClass;
    private volatile java.lang.Class _userTypeHandlerClass;
    private volatile java.lang.Object _userData;
    private final java.lang.Object[] _ctrArgs;
    private org.apache.xmlbeans.impl.schema.SchemaContainer _container;
    private java.lang.String _filename;
    private org.apache.xmlbeans.SchemaParticle _contentModel;
    private volatile org.apache.xmlbeans.SchemaLocalElement[] _localElts;
    private volatile java.util.Map _eltToIndexMap;
    private volatile java.util.Map _attrToIndexMap;
    private java.util.Map _propertyModelByElementName;
    private java.util.Map _propertyModelByAttributeName;
    private boolean _hasAllContent;
    private boolean _orderSensitive;
    private org.apache.xmlbeans.QNameSet _typedWildcardElements;
    private org.apache.xmlbeans.QNameSet _typedWildcardAttributes;
    private boolean _hasWildcardElements;
    private boolean _hasWildcardAttributes;
    private java.util.Set _validSubstitutions;
    private int _complexTypeVariety;
    private org.apache.xmlbeans.SchemaAttributeModel _attributeModel;
    private int _builtinTypeCode;
    private int _simpleTypeVariety;
    private boolean _isSimpleType;
    private org.apache.xmlbeans.SchemaType$Ref _baseTyperef;
    private int _baseDepth;
    private int _derivationType;
    private java.lang.String _userTypeName;
    private java.lang.String _userTypeHandler;
    private org.apache.xmlbeans.SchemaType$Ref _contentBasedOnTyperef;
    private org.apache.xmlbeans.impl.schema.XmlValueRef[] _facetArray;
    private boolean[] _fixedFacetArray;
    private int _ordered;
    private boolean _isFinite;
    private boolean _isBounded;
    private boolean _isNumeric;
    private boolean _abs;
    private boolean _finalExt;
    private boolean _finalRest;
    private boolean _finalList;
    private boolean _finalUnion;
    private boolean _blockExt;
    private boolean _blockRest;
    private int _whiteSpaceRule;
    private boolean _hasPatterns;
    private org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns;
    private org.apache.xmlbeans.impl.schema.XmlValueRef[] _enumerationValues;
    private org.apache.xmlbeans.SchemaType$Ref _baseEnumTyperef;
    private boolean _stringEnumEnsured;
    private volatile java.util.Map _lookupStringEnum;
    private volatile java.util.List _listOfStringEnum;
    private volatile java.util.Map _lookupStringEnumEntry;
    private org.apache.xmlbeans.SchemaStringEnumEntry[] _stringEnumEntries;
    private org.apache.xmlbeans.SchemaType$Ref _listItemTyperef;
    private boolean _isUnionOfLists;
    private org.apache.xmlbeans.SchemaType$Ref[] _unionMemberTyperefs;
    private int _anonymousUnionMemberOrdinal;
    private volatile org.apache.xmlbeans.SchemaType[] _unionConstituentTypes;
    private volatile org.apache.xmlbeans.SchemaType[] _unionSubTypes;
    private volatile org.apache.xmlbeans.SchemaType _unionCommonBaseType;
    private org.apache.xmlbeans.SchemaType$Ref _primitiveTypeRef;
    private int _decimalSize;
    private volatile boolean _unloaded;
    private javax.xml.namespace.QName _sg;
    private java.util.List _sgMembers;
    private static final org.apache.xmlbeans.SchemaProperty[] NO_PROPERTIES;
    private org.apache.xmlbeans.XmlObject _parseObject;
    private java.lang.String _parseTNS;
    private java.lang.String _elemFormDefault;
    private java.lang.String _attFormDefault;
    private boolean _chameleon;
    private boolean _redefinition;
    private org.apache.xmlbeans.SchemaType$Ref _selfref;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$schema$SchemaTypeImpl;
    static java.lang.Class class$org$apache$xmlbeans$SchemaType;

    public boolean isUnloaded()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _unloaded>;

        return $z0;
    }

    public void finishLoading()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _unloaded> = 0;

        return;
    }

    void <init>(org.apache.xmlbeans.impl.schema.SchemaContainer)
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.schema.SchemaContainer r5;
        org.apache.xmlbeans.SchemaType$Ref $r4;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.util.Set $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r5 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaContainer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r0;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Object[] _ctrArgs> = $r1;

        $r2 = <java.util.Collections: java.util.Set EMPTY_SET>;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Set _validSubstitutions> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.List _sgMembers> = $r3;

        $r4 = new org.apache.xmlbeans.SchemaType$Ref;

        specialinvoke $r4.<org.apache.xmlbeans.SchemaType$Ref: void <init>(org.apache.xmlbeans.SchemaType)>(r0);

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _selfref> = $r4;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.schema.SchemaContainer _container> = r5;

        return;
    }

    void <init>(org.apache.xmlbeans.impl.schema.SchemaContainer, boolean)
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.schema.SchemaContainer r5;
        org.apache.xmlbeans.SchemaType$Ref $r4;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.util.Set $r2;
        java.util.ArrayList $r3;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r5 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaContainer;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r0;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Object[] _ctrArgs> = $r1;

        $r2 = <java.util.Collections: java.util.Set EMPTY_SET>;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Set _validSubstitutions> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.List _sgMembers> = $r3;

        $r4 = new org.apache.xmlbeans.SchemaType$Ref;

        specialinvoke $r4.<org.apache.xmlbeans.SchemaType$Ref: void <init>(org.apache.xmlbeans.SchemaType)>(r0);

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _selfref> = $r4;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.schema.SchemaContainer _container> = r5;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _unloaded> = z0;

        if z0 == 0 goto label1;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void finishQuick()>();

     label1:
        return;
    }

    public boolean isSGResolved()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 < 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSGResolving()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 < 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isResolved()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 < 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isResolving()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 != 3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isUnjavaized()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 >= 6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isJavaized()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 != 6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void startResolvingSGs()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase> = 1;

        return;
    }

    public void finishResolvingSGs()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 == 1 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase> = 2;

        return;
    }

    public void startResolving()
    {
        java.lang.IllegalStateException $r1;
        int $i0, $i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isDocumentType>;

        if $z0 == 0 goto label1;

        $i1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i1 != 2 goto label2;

     label1:
        $z1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isDocumentType>;

        if $z1 != 0 goto label3;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 == 0 goto label3;

     label2:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label3:
        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase> = 3;

        return;
    }

    public void finishResolving()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 == 3 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase> = 4;

        return;
    }

    public void startJavaizing()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 == 4 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase> = 5;

        return;
    }

    public void finishJavaizing()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 == 5 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase> = 6;

        return;
    }

    private void finishQuick()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase> = 6;

        return;
    }

    private void assertUnresolved()
    {
        java.lang.IllegalStateException $r1;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 == 0 goto label1;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _unloaded>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private void assertSGResolving()
    {
        java.lang.IllegalStateException $r1;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 == 1 goto label1;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _unloaded>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private void assertSGResolved()
    {
        java.lang.IllegalStateException $r1;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 == 2 goto label1;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _unloaded>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private void assertResolving()
    {
        java.lang.IllegalStateException $r1;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 == 3 goto label1;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _unloaded>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private void assertResolved()
    {
        java.lang.IllegalStateException $r1;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 == 4 goto label1;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _unloaded>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private void assertJavaizing()
    {
        java.lang.IllegalStateException $r1;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _resolvePhase>;

        if $i0 == 5 goto label1;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _unloaded>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public javax.xml.namespace.QName getName()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        javax.xml.namespace.QName $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName _name>;

        return $r1;
    }

    public void setName(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: javax.xml.namespace.QName;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertUnresolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName _name> = r1;

        return;
    }

    public java.lang.String getSourceName()
    {
        org.apache.xmlbeans.SchemaGlobalElement $r6;
        org.apache.xmlbeans.SchemaField $r3;
        org.apache.xmlbeans.SchemaGlobalAttribute $r4;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String $r1, $r5, $r7, $r9, $r10;
        org.apache.xmlbeans.SchemaType $r2, $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _filename>;

        if $r1 == null goto label1;

        $r10 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _filename>;

        return $r10;

     label1:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        if $r2 == null goto label2;

        $r8 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        $r9 = interfaceinvoke $r8.<org.apache.xmlbeans.SchemaType: java.lang.String getSourceName()>();

        return $r9;

     label2:
        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField getContainerField()>();

        if $r3 == null goto label4;

        $z0 = $r3 instanceof org.apache.xmlbeans.SchemaGlobalElement;

        if $z0 == 0 goto label3;

        $r6 = (org.apache.xmlbeans.SchemaGlobalElement) $r3;

        $r7 = interfaceinvoke $r6.<org.apache.xmlbeans.SchemaGlobalElement: java.lang.String getSourceName()>();

        return $r7;

     label3:
        $z1 = $r3 instanceof org.apache.xmlbeans.SchemaGlobalAttribute;

        if $z1 == 0 goto label4;

        $r4 = (org.apache.xmlbeans.SchemaGlobalAttribute) $r3;

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaGlobalAttribute: java.lang.String getSourceName()>();

        return $r5;

     label4:
        return null;
    }

    public void setFilename(java.lang.String)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertUnresolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _filename> = r1;

        return;
    }

    public int getComponentType()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        return 0;
    }

    public boolean isAnonymousType()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        javax.xml.namespace.QName $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName _name>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isDocumentType()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isDocumentType>;

        return $z0;
    }

    public boolean isAttributeType()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isAttributeType>;

        return $z0;
    }

    public javax.xml.namespace.QName getDocumentElementName()
    {
        org.apache.xmlbeans.SchemaParticle $r1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        javax.xml.namespace.QName $r2;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isDocumentType>;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        return $r2;

     label1:
        return null;
    }

    public javax.xml.namespace.QName getAttributeTypeAttributeName()
    {
        org.apache.xmlbeans.SchemaLocalAttribute r3;
        org.apache.xmlbeans.SchemaLocalAttribute[] $r2;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaAttributeModel $r1;
        javax.xml.namespace.QName $r4;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isAttributeType>;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()>();

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.SchemaLocalAttribute[] getAttributes()>();

        if $r2 == null goto label1;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label1;

        r3 = $r2[0];

        $r4 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        return $r4;

     label1:
        return null;
    }

    public void setAnnotation(org.apache.xmlbeans.SchemaAnnotation)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaAnnotation r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaAnnotation;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertUnresolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaAnnotation _annotation> = r1;

        return;
    }

    public org.apache.xmlbeans.SchemaAnnotation getAnnotation()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaAnnotation $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaAnnotation _annotation>;

        return $r1;
    }

    public void setDocumentType(boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertUnresolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isDocumentType> = z0;

        return;
    }

    public void setAttributeType(boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertUnresolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isAttributeType> = z0;

        return;
    }

    public int getContentType()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _complexTypeVariety>;

        return $i0;
    }

    public void setComplexTypeVariety(int)
    {
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _complexTypeVariety> = i0;

        return;
    }

    public org.apache.xmlbeans.SchemaTypeElementSequencer getElementSequencer()
    {
        org.apache.xmlbeans.SchemaParticle $r3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl$SequencerImpl $r1, $r4;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.impl.schema.SchemaTypeVisitorImpl $r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _complexTypeVariety>;

        if $i0 != 0 goto label1;

        $r4 = new org.apache.xmlbeans.impl.schema.SchemaTypeImpl$SequencerImpl;

        specialinvoke $r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl$SequencerImpl: void <init>(org.apache.xmlbeans.impl.schema.SchemaTypeVisitorImpl,org.apache.xmlbeans.impl.schema.SchemaTypeImpl$1)>(null, null);

        return $r4;

     label1:
        $r1 = new org.apache.xmlbeans.impl.schema.SchemaTypeImpl$SequencerImpl;

        $r2 = new org.apache.xmlbeans.impl.schema.SchemaTypeVisitorImpl;

        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaParticle _contentModel>;

        specialinvoke $r2.<org.apache.xmlbeans.impl.schema.SchemaTypeVisitorImpl: void <init>(org.apache.xmlbeans.SchemaParticle)>($r3);

        specialinvoke $r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl$SequencerImpl: void <init>(org.apache.xmlbeans.impl.schema.SchemaTypeVisitorImpl,org.apache.xmlbeans.impl.schema.SchemaTypeImpl$1)>($r2, null);

        return $r1;
    }

    void setAbstractFinal(boolean, boolean, boolean, boolean, boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean z0, z1, z2, z3, z4;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        z3 := @parameter3: boolean;

        z4 := @parameter4: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _abs> = z0;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _finalExt> = z1;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _finalRest> = z2;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _finalList> = z3;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _finalUnion> = z4;

        return;
    }

    void setSimpleFinal(boolean, boolean, boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean z0, z1, z2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _finalRest> = z0;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _finalList> = z1;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _finalUnion> = z2;

        return;
    }

    void setBlock(boolean, boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean z0, z1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _blockExt> = z0;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _blockRest> = z1;

        return;
    }

    public boolean blockRestriction()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _blockRest>;

        return $z0;
    }

    public boolean blockExtension()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _blockExt>;

        return $z0;
    }

    public boolean isAbstract()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _abs>;

        return $z0;
    }

    public boolean finalExtension()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _finalExt>;

        return $z0;
    }

    public boolean finalRestriction()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _finalRest>;

        return $z0;
    }

    public boolean finalList()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _finalList>;

        return $z0;
    }

    public boolean finalUnion()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _finalUnion>;

        return $z0;
    }

    public synchronized org.apache.xmlbeans.SchemaField getContainerField()
    {
        org.apache.xmlbeans.SchemaField $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, $r2;
        org.apache.xmlbeans.SchemaLocalElement $r3;
        org.apache.xmlbeans.SchemaComponent $r9;
        org.apache.xmlbeans.SchemaType $r1;
        org.apache.xmlbeans.SchemaLocalAttribute $r6;
        org.apache.xmlbeans.SchemaComponent$Ref $r7, $r8;
        org.apache.xmlbeans.SchemaLocalAttribute[] $r5;
        org.apache.xmlbeans.SchemaAttributeModel $r4;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _containerFieldCode>;

        $i6 = (int) -1;

        if $i0 == $i6 goto label6;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        $i1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _containerFieldCode>;

        if $i1 != 0 goto label3;

        $r7 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaComponent$Ref _containerFieldRef>;

        if $r7 != null goto label1;

        $r10 = null;

        goto label2;

     label1:
        $r8 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaComponent$Ref _containerFieldRef>;

        $r9 = virtualinvoke $r8.<org.apache.xmlbeans.SchemaComponent$Ref: org.apache.xmlbeans.SchemaComponent getComponent()>();

        $r10 = (org.apache.xmlbeans.SchemaField) $r9;

     label2:
        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField _containerField> = $r10;

        goto label5;

     label3:
        $i2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _containerFieldCode>;

        if $i2 != 1 goto label4;

        $r4 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()>();

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.SchemaLocalAttribute[] getAttributes()>();

        $i4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _containerFieldIndex>;

        $r6 = $r5[$i4];

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField _containerField> = $r6;

        goto label5;

     label4:
        $r2 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r1;

        $i3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _containerFieldIndex>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaLocalElement getLocalElementByIndex(int)>($i3);

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField _containerField> = $r3;

     label5:
        $i8 = (int) -1;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _containerFieldCode> = $i8;

     label6:
        $r11 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField _containerField>;

        return $r11;
    }

    public void setContainerField(org.apache.xmlbeans.SchemaField)
    {
        int $i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaField r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaField;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertUnresolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField _containerField> = r1;

        $i1 = (int) -1;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _containerFieldCode> = $i1;

        return;
    }

    public void setContainerFieldRef(org.apache.xmlbeans.SchemaComponent$Ref)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaComponent$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaComponent$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertUnresolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaComponent$Ref _containerFieldRef> = r1;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _containerFieldCode> = 0;

        return;
    }

    public void setContainerFieldIndex(short, int)
    {
        short s0;
        int i1, $i2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        s0 := @parameter0: short;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertUnresolved()>();

        $i2 = (int) s0;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _containerFieldCode> = $i2;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _containerFieldIndex> = i1;

        return;
    }

    void setGroupReferenceContext(javax.xml.namespace.QName[])
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        javax.xml.namespace.QName[] r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: javax.xml.namespace.QName[];

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertUnresolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName[] _groupReferenceContext> = r1;

        return;
    }

    javax.xml.namespace.QName[] getGroupReferenceContext()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        javax.xml.namespace.QName[] $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName[] _groupReferenceContext>;

        return $r1;
    }

    public org.apache.xmlbeans.SchemaType getOuterType()
    {
        org.apache.xmlbeans.SchemaType$Ref $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r3;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _outerSchemaTypeRef>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _outerSchemaTypeRef>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

     label2:
        return $r3;
    }

    public void setOuterSchemaTypeRef(org.apache.xmlbeans.SchemaType$Ref)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertUnresolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _outerSchemaTypeRef> = r1;

        return;
    }

    public boolean isCompiled()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isCompiled>;

        return $z0;
    }

    public void setCompiled(boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertJavaizing()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isCompiled> = z0;

        return;
    }

    public boolean isSkippedAnonymousType()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        if $r1 != null goto label1;

        $z0 = 0;

        goto label4;

     label1:
        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        if $r2 == r0 goto label2;

        $r3 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getContentBasedOnType()>();

        if $r3 != r0 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public java.lang.String getShortJavaName()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _shortJavaName>;

        return $r1;
    }

    public void setShortJavaName(java.lang.String)
    {
        java.lang.StringBuffer $r4, $r6, $r7, $r9;
        org.apache.xmlbeans.SchemaType$Ref $r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String r1, $r3, $r5, $r8, $r10;
        org.apache.xmlbeans.SchemaType r11;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _shortJavaName> = r1;

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _outerSchemaTypeRef>;

        r11 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

     label1:
        $r3 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaType: java.lang.String getFullJavaName()>();

        if $r3 != null goto label2;

        r11 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getOuterType()>();

        goto label1;

     label2:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaType: java.lang.String getFullJavaName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r8 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _shortJavaName>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _fullJavaName> = $r10;

        return;
    }

    public java.lang.String getFullJavaName()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _fullJavaName>;

        return $r1;
    }

    public void setFullJavaName(java.lang.String)
    {
        int $i0, $i1, $i2, i3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _fullJavaName> = r1;

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _fullJavaName>;

        $i0 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int)>(36);

        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _fullJavaName>;

        $i1 = virtualinvoke $r3.<java.lang.String: int lastIndexOf(int)>(46);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        i3 = $i2 + 1;

        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _fullJavaName>;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(i3);

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _shortJavaName> = $r5;

        return;
    }

    public void setShortJavaImplName(java.lang.String)
    {
        java.lang.StringBuffer $r4, $r6, $r7, $r9;
        org.apache.xmlbeans.SchemaType$Ref $r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String r1, $r3, $r5, $r8, $r10;
        org.apache.xmlbeans.SchemaType r11;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _shortJavaImplName> = r1;

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _outerSchemaTypeRef>;

        r11 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

     label1:
        $r3 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaType: java.lang.String getFullJavaImplName()>();

        if $r3 != null goto label2;

        r11 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getOuterType()>();

        goto label1;

     label2:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaType: java.lang.String getFullJavaImplName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r8 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _shortJavaImplName>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _fullJavaImplName> = $r10;

        return;
    }

    public void setFullJavaImplName(java.lang.String)
    {
        int $i0, $i1, $i2, i3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _fullJavaImplName> = r1;

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _fullJavaImplName>;

        $i0 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int)>(36);

        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _fullJavaImplName>;

        $i1 = virtualinvoke $r3.<java.lang.String: int lastIndexOf(int)>(46);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        i3 = $i2 + 1;

        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _fullJavaImplName>;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(i3);

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _shortJavaImplName> = $r5;

        return;
    }

    public java.lang.String getFullJavaImplName()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _fullJavaImplName>;

        return $r1;
    }

    public java.lang.String getShortJavaImplName()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _shortJavaImplName>;

        return $r1;
    }

    public java.lang.String getUserTypeName()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _userTypeName>;

        return $r1;
    }

    public void setUserTypeName(java.lang.String)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _userTypeName> = r1;

        return;
    }

    public java.lang.String getUserTypeHandlerName()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _userTypeHandler>;

        return $r1;
    }

    public void setUserTypeHandlerName(java.lang.String)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _userTypeHandler> = r1;

        return;
    }

    public void setInterfaceExtensions(org.apache.xmlbeans.InterfaceExtension[])
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.InterfaceExtension[] r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.InterfaceExtension[];

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.InterfaceExtension[] _interfaces> = r1;

        return;
    }

    public org.apache.xmlbeans.InterfaceExtension[] getInterfaceExtensions()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.InterfaceExtension[] $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.InterfaceExtension[] _interfaces>;

        return $r1;
    }

    public void setPrePostExtension(org.apache.xmlbeans.PrePostExtension)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.PrePostExtension r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.PrePostExtension;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.PrePostExtension _prepost> = r1;

        return;
    }

    public org.apache.xmlbeans.PrePostExtension getPrePostExtension()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.PrePostExtension $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.PrePostExtension _prepost>;

        return $r1;
    }

    public java.lang.Object getUserData()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Object _userData>;

        return $r1;
    }

    public void setUserData(java.lang.Object)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Object r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: java.lang.Object;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Object _userData> = r1;

        return;
    }

    org.apache.xmlbeans.impl.schema.SchemaContainer getContainer()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.impl.schema.SchemaContainer $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.schema.SchemaContainer _container>;

        return $r1;
    }

    void setContainer(org.apache.xmlbeans.impl.schema.SchemaContainer)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.impl.schema.SchemaContainer r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.schema.SchemaContainer _container> = r1;

        return;
    }

    public org.apache.xmlbeans.SchemaTypeSystem getTypeSystem()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.impl.schema.SchemaContainer $r1;
        org.apache.xmlbeans.SchemaTypeSystem $r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.schema.SchemaContainer _container>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.SchemaContainer: org.apache.xmlbeans.SchemaTypeSystem getTypeSystem()>();

        return $r2;
    }

    public org.apache.xmlbeans.SchemaParticle getContentModel()
    {
        org.apache.xmlbeans.SchemaParticle $r1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaParticle _contentModel>;

        return $r1;
    }

    private static void buildEltList(java.util.List, org.apache.xmlbeans.SchemaParticle)
    {
        org.apache.xmlbeans.SchemaParticle r0, $r2;
        java.util.List r1;
        int $i0, $i1, i2;

        r1 := @parameter0: java.util.List;

        r0 := @parameter1: org.apache.xmlbeans.SchemaParticle;

        if r0 != null goto label1;

        return;

     label1:
        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label2;
            default: goto label6;
        };

     label2:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;

     label3:
        i2 = 0;

     label4:
        $i1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int countOfParticleChild()>();

        if i2 >= $i1 goto label5;

        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle getParticleChild(int)>(i2);

        staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void buildEltList(java.util.List,org.apache.xmlbeans.SchemaParticle)>(r1, $r2);

        i2 = i2 + 1;

        goto label4;

     label5:
        return;

     label6:
        return;
    }

    private void buildLocalElts()
    {
        java.lang.Object[] $r4;
        org.apache.xmlbeans.SchemaLocalElement[] $r3, $r5, $r6;
        java.util.ArrayList $r0;
        org.apache.xmlbeans.SchemaParticle $r2;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaParticle _contentModel>;

        staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void buildEltList(java.util.List,org.apache.xmlbeans.SchemaParticle)>($r0, $r2);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r3 = newarray (org.apache.xmlbeans.SchemaLocalElement)[$i0];

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.xmlbeans.SchemaLocalElement[]) $r4;

        $r6 = (org.apache.xmlbeans.SchemaLocalElement[]) $r5;

        r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaLocalElement[] _localElts> = $r6;

        return;
    }

    public org.apache.xmlbeans.SchemaLocalElement getLocalElementByIndex(int)
    {
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaLocalElement $r1;
        org.apache.xmlbeans.SchemaLocalElement[] r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        i0 := @parameter0: int;

        r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaLocalElement[] _localElts>;

        if r2 != null goto label1;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void buildLocalElts()>();

        r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaLocalElement[] _localElts>;

     label1:
        $r1 = r2[i0];

        return $r1;
    }

    public int getIndexForLocalElement(org.apache.xmlbeans.SchemaLocalElement)
    {
        org.apache.xmlbeans.SchemaLocalElement[] $r4, $r6, $r10;
        java.util.HashMap $r5;
        java.lang.Integer $r3, $r7;
        java.util.Map r9;
        int $i0, i1, $i2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaLocalElement r1, $r8;
        java.lang.Object $r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaLocalElement;

        r9 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _eltToIndexMap>;

        if r9 != null goto label4;

        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaLocalElement[] _localElts>;

        if $r4 != null goto label1;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void buildLocalElts()>();

     label1:
        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r9 = $r5;

        i1 = 0;

     label2:
        $r10 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaLocalElement[] _localElts>;

        $i2 = lengthof $r10;

        if i1 >= $i2 goto label3;

        $r6 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaLocalElement[] _localElts>;

        $r8 = $r6[i1];

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(i1);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        i1 = i1 + 1;

        goto label2;

     label3:
        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _eltToIndexMap> = $r5;

     label4:
        $r2 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public int getIndexForLocalAttribute(org.apache.xmlbeans.SchemaLocalAttribute)
    {
        org.apache.xmlbeans.SchemaLocalAttribute r1, $r8;
        java.util.HashMap $r4;
        java.lang.Integer $r3, $r7;
        org.apache.xmlbeans.SchemaLocalAttribute[] $r6;
        java.util.Map r9;
        int $i0, $i1, i2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaAttributeModel $r5;
        java.lang.Object $r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaLocalAttribute;

        r9 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _attrToIndexMap>;

        if r9 != null goto label3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r9 = $r4;

        $r5 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaAttributeModel _attributeModel>;

        $r6 = interfaceinvoke $r5.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.SchemaLocalAttribute[] getAttributes()>();

        i2 = 0;

     label1:
        $i1 = lengthof $r6;

        if i2 >= $i1 goto label2;

        $r8 = $r6[i2];

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(i2);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        i2 = i2 + 1;

        goto label1;

     label2:
        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _attrToIndexMap> = $r4;

     label3:
        $r2 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaAttributeModel $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaAttributeModel _attributeModel>;

        return $r1;
    }

    public org.apache.xmlbeans.SchemaProperty[] getProperties()
    {
        org.apache.xmlbeans.SchemaProperty[] $r8, $r10, $r11, $r12, $r13;
        java.lang.Object[] $r9;
        java.util.Collection $r5, $r7;
        java.util.ArrayList $r3;
        java.util.Map $r1, $r2, $r4, $r6;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName>;

        if $r1 != null goto label1;

        $r13 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaProperty[] getAttributeProperties()>();

        return $r13;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByAttributeName>;

        if $r2 != null goto label2;

        $r12 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaProperty[] getElementProperties()>();

        return $r12;

     label2:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        $r6 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByAttributeName>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r8 = newarray (org.apache.xmlbeans.SchemaProperty)[$i0];

        $r9 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (org.apache.xmlbeans.SchemaProperty[]) $r9;

        $r11 = (org.apache.xmlbeans.SchemaProperty[]) $r10;

        return $r11;
    }

    public org.apache.xmlbeans.SchemaProperty[] getDerivedProperties()
    {
        org.apache.xmlbeans.SchemaProperty[] $r6, $r8, $r9, $r24;
        org.apache.xmlbeans.SchemaProperty r11, $r25;
        java.util.Map $r3, $r4, $r20, $r22;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.math.BigInteger $r13, $r14, $r15, $r16;
        org.apache.xmlbeans.SchemaType $r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Collection $r21, $r23;
        javax.xml.namespace.QName $r12, $r19;
        java.lang.Object[] $r7;
        java.util.ArrayList $r2;
        int $i0, $i1, $i2;
        java.lang.String $r17, $r18;
        java.util.Iterator $r5;
        java.lang.Object $r10;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseType()>();

        if $r1 != null goto label1;

        $r24 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaProperty[] getProperties()>();

        return $r24;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName>;

        if $r3 == null goto label2;

        $r22 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName>;

        $r23 = interfaceinvoke $r22.<java.util.Map: java.util.Collection values()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r23);

     label2:
        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByAttributeName>;

        if $r4 == null goto label3;

        $r20 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByAttributeName>;

        $r21 = interfaceinvoke $r20.<java.util.Map: java.util.Collection values()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r21);

     label3:
        $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label8;

        $r10 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.xmlbeans.SchemaProperty) $r10;

        $z0 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaProperty: boolean isAttribute()>();

        if $z0 == 0 goto label5;

        $r19 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        $r25 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty getAttributeProperty(javax.xml.namespace.QName)>($r19);

        goto label6;

     label5:
        $r12 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        $r25 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty getElementProperty(javax.xml.namespace.QName)>($r12);

     label6:
        if $r25 == null goto label7;

        $r13 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaProperty: java.math.BigInteger getMinOccurs()>();

        $r14 = interfaceinvoke $r25.<org.apache.xmlbeans.SchemaProperty: java.math.BigInteger getMinOccurs()>();

        $z1 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean eq(java.math.BigInteger,java.math.BigInteger)>($r13, $r14);

        if $z1 == 0 goto label7;

        $r15 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaProperty: java.math.BigInteger getMaxOccurs()>();

        $r16 = interfaceinvoke $r25.<org.apache.xmlbeans.SchemaProperty: java.math.BigInteger getMaxOccurs()>();

        $z2 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean eq(java.math.BigInteger,java.math.BigInteger)>($r15, $r16);

        if $z2 == 0 goto label7;

        $i1 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaProperty: int hasNillable()>();

        $i2 = interfaceinvoke $r25.<org.apache.xmlbeans.SchemaProperty: int hasNillable()>();

        if $i1 != $i2 goto label7;

        $r17 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaProperty: java.lang.String getDefaultText()>();

        $r18 = interfaceinvoke $r25.<org.apache.xmlbeans.SchemaProperty: java.lang.String getDefaultText()>();

        $z3 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean eq(java.lang.String,java.lang.String)>($r17, $r18);

        if $z3 == 0 goto label7;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

     label7:
        goto label4;

     label8:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r6 = newarray (org.apache.xmlbeans.SchemaProperty)[$i0];

        $r7 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (org.apache.xmlbeans.SchemaProperty[]) $r7;

        $r9 = (org.apache.xmlbeans.SchemaProperty[]) $r8;

        return $r9;
    }

    private static boolean eq(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1;
        boolean $z0;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        if r0 != null goto label1;

        if r1 != null goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $z0 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    private static boolean eq(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        if r1 != null goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public org.apache.xmlbeans.SchemaProperty[] getElementProperties()
    {
        org.apache.xmlbeans.SchemaProperty[] $r5, $r7, $r8, $r9;
        java.lang.Object[] $r6;
        java.util.Collection $r3;
        java.util.Map $r1, $r2, $r4;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName>;

        if $r1 != null goto label1;

        $r9 = <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaProperty[] NO_PROPERTIES>;

        return $r9;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName>;

        $i0 = interfaceinvoke $r4.<java.util.Map: int size()>();

        $r5 = newarray (org.apache.xmlbeans.SchemaProperty)[$i0];

        $r6 = interfaceinvoke $r3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (org.apache.xmlbeans.SchemaProperty[]) $r6;

        $r8 = (org.apache.xmlbeans.SchemaProperty[]) $r7;

        return $r8;
    }

    public org.apache.xmlbeans.SchemaProperty[] getAttributeProperties()
    {
        org.apache.xmlbeans.SchemaProperty[] $r5, $r7, $r8, $r9;
        java.lang.Object[] $r6;
        java.util.Collection $r3;
        java.util.Map $r1, $r2, $r4;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByAttributeName>;

        if $r1 != null goto label1;

        $r9 = <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaProperty[] NO_PROPERTIES>;

        return $r9;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByAttributeName>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByAttributeName>;

        $i0 = interfaceinvoke $r4.<java.util.Map: int size()>();

        $r5 = newarray (org.apache.xmlbeans.SchemaProperty)[$i0];

        $r6 = interfaceinvoke $r3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (org.apache.xmlbeans.SchemaProperty[]) $r6;

        $r8 = (org.apache.xmlbeans.SchemaProperty[]) $r7;

        return $r8;
    }

    public org.apache.xmlbeans.SchemaProperty getElementProperty(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.SchemaProperty $r5;
        java.util.Map $r1, $r3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Object $r4;
        javax.xml.namespace.QName r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r2 := @parameter0: javax.xml.namespace.QName;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName>;

        if $r1 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (org.apache.xmlbeans.SchemaProperty) $r4;

     label2:
        return $r5;
    }

    public org.apache.xmlbeans.SchemaProperty getAttributeProperty(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.SchemaProperty $r5;
        java.util.Map $r1, $r3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Object $r4;
        javax.xml.namespace.QName r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r2 := @parameter0: javax.xml.namespace.QName;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByAttributeName>;

        if $r1 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByAttributeName>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (org.apache.xmlbeans.SchemaProperty) $r4;

     label2:
        return $r5;
    }

    public boolean hasAllContent()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _hasAllContent>;

        return $z0;
    }

    public boolean isOrderSensitive()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _orderSensitive>;

        return $z0;
    }

    public void setOrderSensitive(boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertJavaizing()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _orderSensitive> = z0;

        return;
    }

    public void setContentModel(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.SchemaAttributeModel, java.util.Map, java.util.Map, boolean)
    {
        org.apache.xmlbeans.SchemaParticle r1;
        javax.xml.namespace.QName[] $r12;
        org.apache.xmlbeans.SchemaProperty r11;
        java.util.Map r3, r4, $r5, $r7, $r14;
        int $i0, i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.util.LinkedHashSet $r6;
        boolean z0, $z1, $z2;
        java.util.Iterator $r9;
        java.util.Collection $r8;
        java.util.Set $r16;
        org.apache.xmlbeans.SchemaAttributeModel r2;
        java.lang.Object $r10;
        javax.xml.namespace.QName $r13, $r15;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r2 := @parameter1: org.apache.xmlbeans.SchemaAttributeModel;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: java.util.Map;

        z0 := @parameter4: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaParticle _contentModel> = r1;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaAttributeModel _attributeModel> = r2;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName> = r3;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByAttributeName> = r4;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _hasAllContent> = z0;

        $r5 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName>;

        if $r5 == null goto label5;

        $r6 = new java.util.LinkedHashSet;

        specialinvoke $r6.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Set _validSubstitutions> = $r6;

        $r7 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.xmlbeans.SchemaProperty) $r10;

        $r12 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName[] acceptedNames()>();

        i1 = 0;

     label2:
        $i0 = lengthof $r12;

        if i1 >= $i0 goto label4;

        $r14 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName>;

        $r13 = $r12[i1];

        $z2 = interfaceinvoke $r14.<java.util.Map: boolean containsKey(java.lang.Object)>($r13);

        if $z2 != 0 goto label3;

        $r16 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Set _validSubstitutions>;

        $r15 = $r12[i1];

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>($r15);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        goto label1;

     label5:
        return;
    }

    private boolean containsElements()
    {
        int $i0, $i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getContentType()>();

        if $i0 == 3 goto label1;

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getContentType()>();

        if $i1 != 4 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean hasAttributeWildcards()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _hasWildcardAttributes>;

        return $z0;
    }

    public boolean hasElementWildcards()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _hasWildcardElements>;

        return $z0;
    }

    public boolean isValidSubstitution(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.util.Set $r2;
        javax.xml.namespace.QName r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Set _validSubstitutions>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public org.apache.xmlbeans.SchemaType getElementType(javax.xml.namespace.QName, javax.xml.namespace.QName, org.apache.xmlbeans.SchemaTypeLoader)
    {
        org.apache.xmlbeans.QNameSet $r6;
        org.apache.xmlbeans.SchemaProperty r4;
        java.util.Map $r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, $r10, $r12, $r13, $r14;
        org.apache.xmlbeans.SchemaType $r9, r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.xmlbeans.SchemaTypeLoader r5;
        org.apache.xmlbeans.SchemaGlobalElement $r7;
        java.util.Set $r11;
        java.lang.Object $r3;
        javax.xml.namespace.QName r1, r8;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: javax.xml.namespace.QName;

        r8 := @parameter1: javax.xml.namespace.QName;

        r5 := @parameter2: org.apache.xmlbeans.SchemaTypeLoader;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSimpleType()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean containsElements()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isNoType()>();

        if $z2 == 0 goto label2;

     label1:
        $r14 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

        return $r14;

     label2:
        r15 = null;

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.xmlbeans.SchemaProperty) $r3;

        if r4 == null goto label3;

        r15 = interfaceinvoke r4.<org.apache.xmlbeans.SchemaProperty: org.apache.xmlbeans.SchemaType getType()>();

        goto label8;

     label3:
        if r5 != null goto label4;

        $r13 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

        return $r13;

     label4:
        $r6 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.QNameSet _typedWildcardElements>;

        $z3 = virtualinvoke $r6.<org.apache.xmlbeans.QNameSet: boolean contains(javax.xml.namespace.QName)>(r1);

        if $z3 != 0 goto label5;

        $r11 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Set _validSubstitutions>;

        $z5 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z5 == 0 goto label7;

     label5:
        $r7 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaTypeLoader: org.apache.xmlbeans.SchemaGlobalElement findElement(javax.xml.namespace.QName)>(r1);

        if $r7 != null goto label6;

        $r10 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

        return $r10;

     label6:
        r15 = interfaceinvoke $r7.<org.apache.xmlbeans.SchemaGlobalElement: org.apache.xmlbeans.SchemaType getType()>();

        goto label8;

     label7:
        if null != null goto label8;

        $r12 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

        return $r12;

     label8:
        if r8 == null goto label9;

        if r5 == null goto label9;

        $r9 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaTypeLoader: org.apache.xmlbeans.SchemaType findType(javax.xml.namespace.QName)>(r8);

        if $r9 == null goto label9;

        $z4 = interfaceinvoke r15.<org.apache.xmlbeans.SchemaType: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>($r9);

        if $z4 == 0 goto label9;

        return $r9;

     label9:
        return r15;
    }

    public org.apache.xmlbeans.SchemaType getAttributeType(javax.xml.namespace.QName, org.apache.xmlbeans.SchemaTypeLoader)
    {
        org.apache.xmlbeans.QNameSet $r6;
        org.apache.xmlbeans.SchemaProperty r5;
        java.util.Map $r3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, $r1, $r7, $r11, $r13;
        org.apache.xmlbeans.SchemaType $r10, $r12;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xmlbeans.SchemaTypeLoader r8;
        org.apache.xmlbeans.SchemaGlobalAttribute $r9;
        java.lang.Object $r4;
        javax.xml.namespace.QName r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r2 := @parameter0: javax.xml.namespace.QName;

        r8 := @parameter1: org.apache.xmlbeans.SchemaTypeLoader;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSimpleType()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isNoType()>();

        if $z1 == 0 goto label2;

     label1:
        $r1 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

        return $r1;

     label2:
        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isURType()>();

        if $z2 == 0 goto label3;

        $r13 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        return $r13;

     label3:
        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByAttributeName>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (org.apache.xmlbeans.SchemaProperty) $r4;

        if r5 == null goto label4;

        $r12 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaProperty: org.apache.xmlbeans.SchemaType getType()>();

        return $r12;

     label4:
        $r6 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.QNameSet _typedWildcardAttributes>;

        $z3 = virtualinvoke $r6.<org.apache.xmlbeans.QNameSet: boolean contains(javax.xml.namespace.QName)>(r2);

        if $z3 == 0 goto label5;

        if r8 != null goto label6;

     label5:
        $r7 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

        return $r7;

     label6:
        $r9 = interfaceinvoke r8.<org.apache.xmlbeans.SchemaTypeLoader: org.apache.xmlbeans.SchemaGlobalAttribute findAttribute(javax.xml.namespace.QName)>(r2);

        if $r9 != null goto label7;

        $r11 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

        return $r11;

     label7:
        $r10 = interfaceinvoke $r9.<org.apache.xmlbeans.SchemaGlobalAttribute: org.apache.xmlbeans.SchemaType getType()>();

        return $r10;
    }

    public org.apache.xmlbeans.XmlObject createElementType(javax.xml.namespace.QName, javax.xml.namespace.QName, org.apache.xmlbeans.SchemaTypeLoader)
    {
        org.apache.xmlbeans.QNameSet $r6;
        org.apache.xmlbeans.SchemaProperty r14;
        java.util.Map $r4;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, $r1;
        org.apache.xmlbeans.XmlObject $r2;
        org.apache.xmlbeans.SchemaType $r10, $r11, r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.xmlbeans.SchemaTypeLoader r7;
        org.apache.xmlbeans.SchemaGlobalElement $r8;
        java.util.Set $r12;
        java.lang.Object $r5;
        javax.xml.namespace.QName r3, r9;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r3 := @parameter0: javax.xml.namespace.QName;

        r9 := @parameter1: javax.xml.namespace.QName;

        r7 := @parameter2: org.apache.xmlbeans.SchemaTypeLoader;

        r13 = null;

        r14 = null;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSimpleType()>();

        if $z0 != 0 goto label01;

        $z1 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean containsElements()>();

        if $z1 == 0 goto label01;

        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isNoType()>();

        if $z2 == 0 goto label02;

     label01:
        r13 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

        goto label10;

     label02:
        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByElementName>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r14 = (org.apache.xmlbeans.SchemaProperty) $r5;

        if r14 == null goto label03;

        r13 = interfaceinvoke r14.<org.apache.xmlbeans.SchemaProperty: org.apache.xmlbeans.SchemaType getType()>();

        goto label09;

     label03:
        $r6 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.QNameSet _typedWildcardElements>;

        $z3 = virtualinvoke $r6.<org.apache.xmlbeans.QNameSet: boolean contains(javax.xml.namespace.QName)>(r3);

        if $z3 != 0 goto label04;

        $r12 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Set _validSubstitutions>;

        $z5 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z5 == 0 goto label08;

     label04:
        $r8 = interfaceinvoke r7.<org.apache.xmlbeans.SchemaTypeLoader: org.apache.xmlbeans.SchemaGlobalElement findElement(javax.xml.namespace.QName)>(r3);

        if $r8 == null goto label06;

        r13 = interfaceinvoke $r8.<org.apache.xmlbeans.SchemaGlobalElement: org.apache.xmlbeans.SchemaType getType()>();

        $r11 = interfaceinvoke r7.<org.apache.xmlbeans.SchemaTypeLoader: org.apache.xmlbeans.SchemaType findDocumentType(javax.xml.namespace.QName)>(r3);

        if $r11 == null goto label05;

        r14 = interfaceinvoke $r11.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty getElementProperty(javax.xml.namespace.QName)>(r3);

     label05:
        goto label07;

     label06:
        r13 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

     label07:
        goto label09;

     label08:
        if null != null goto label09;

        r13 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

     label09:
        if r9 == null goto label10;

        $r10 = interfaceinvoke r7.<org.apache.xmlbeans.SchemaTypeLoader: org.apache.xmlbeans.SchemaType findType(javax.xml.namespace.QName)>(r9);

        if $r10 == null goto label10;

        $z4 = interfaceinvoke r13.<org.apache.xmlbeans.SchemaType: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>($r10);

        if $z4 == 0 goto label10;

        r13 = $r10;

     label10:
        if r13 == null goto label11;

        $r1 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r13;

        $r2 = specialinvoke $r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject createUnattachedNode(org.apache.xmlbeans.SchemaProperty)>(r14);

        return $r2;

     label11:
        return null;
    }

    public org.apache.xmlbeans.XmlObject createAttributeType(javax.xml.namespace.QName, org.apache.xmlbeans.SchemaTypeLoader)
    {
        org.apache.xmlbeans.QNameSet $r5;
        org.apache.xmlbeans.SchemaProperty r10;
        java.util.Map $r3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, r11;
        org.apache.xmlbeans.XmlObject $r1;
        org.apache.xmlbeans.SchemaType $r8, $r9;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xmlbeans.SchemaTypeLoader r6;
        org.apache.xmlbeans.SchemaGlobalAttribute $r7;
        java.lang.Object $r4;
        javax.xml.namespace.QName r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r2 := @parameter0: javax.xml.namespace.QName;

        r6 := @parameter1: org.apache.xmlbeans.SchemaTypeLoader;

        r10 = null;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSimpleType()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isNoType()>();

        if $z1 == 0 goto label2;

     label1:
        r11 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

        goto label7;

     label2:
        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isURType()>();

        if $z2 == 0 goto label3;

        r11 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        goto label7;

     label3:
        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _propertyModelByAttributeName>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r10 = (org.apache.xmlbeans.SchemaProperty) $r4;

        if r10 == null goto label4;

        $r9 = interfaceinvoke r10.<org.apache.xmlbeans.SchemaProperty: org.apache.xmlbeans.SchemaType getType()>();

        r11 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r9;

        goto label7;

     label4:
        $r5 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.QNameSet _typedWildcardAttributes>;

        $z3 = virtualinvoke $r5.<org.apache.xmlbeans.QNameSet: boolean contains(javax.xml.namespace.QName)>(r2);

        if $z3 != 0 goto label5;

        r11 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

        goto label7;

     label5:
        $r7 = interfaceinvoke r6.<org.apache.xmlbeans.SchemaTypeLoader: org.apache.xmlbeans.SchemaGlobalAttribute findAttribute(javax.xml.namespace.QName)>(r2);

        if $r7 == null goto label6;

        $r8 = interfaceinvoke $r7.<org.apache.xmlbeans.SchemaGlobalAttribute: org.apache.xmlbeans.SchemaType getType()>();

        r11 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r8;

        goto label7;

     label6:
        r11 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

     label7:
        if r11 == null goto label8;

        $r1 = specialinvoke r11.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject createUnattachedNode(org.apache.xmlbeans.SchemaProperty)>(r10);

        return $r1;

     label8:
        return null;
    }

    public void setWildcardSummary(org.apache.xmlbeans.QNameSet, boolean, org.apache.xmlbeans.QNameSet, boolean)
    {
        org.apache.xmlbeans.QNameSet r1, r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean z0, z1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.QNameSet;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.xmlbeans.QNameSet;

        z1 := @parameter3: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.QNameSet _typedWildcardElements> = r1;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _hasWildcardElements> = z0;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.QNameSet _typedWildcardAttributes> = r2;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _hasWildcardAttributes> = z1;

        return;
    }

    public org.apache.xmlbeans.SchemaType[] getAnonymousTypes()
    {
        org.apache.xmlbeans.SchemaType[] r2;
        org.apache.xmlbeans.SchemaType$Ref $r4;
        org.apache.xmlbeans.SchemaType$Ref[] $r1, $r3;
        int $i0, $i1, i2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r5;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref[] _anonymousTyperefs>;

        $i0 = lengthof $r1;

        r2 = newarray (org.apache.xmlbeans.SchemaType)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r2;

        if i2 >= $i1 goto label2;

        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref[] _anonymousTyperefs>;

        $r4 = $r3[i2];

        $r5 = virtualinvoke $r4.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

        r2[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

    public void setAnonymousTypeRefs(org.apache.xmlbeans.SchemaType$Ref[])
    {
        org.apache.xmlbeans.SchemaType$Ref[] r1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType$Ref[];

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref[] _anonymousTyperefs> = r1;

        return;
    }

    private static org.apache.xmlbeans.SchemaType[] staCopy(org.apache.xmlbeans.SchemaType[])
    {
        org.apache.xmlbeans.SchemaType[] r0, r1;
        int $i0, $i1;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (org.apache.xmlbeans.SchemaType)[$i0];

        $i1 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i1);

        return r1;
    }

    private static boolean[] boaCopy(boolean[])
    {
        boolean[] r0, r1;
        int $i0, $i1;

        r0 := @parameter0: boolean[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (boolean)[$i0];

        $i1 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i1);

        return r1;
    }

    public void setSimpleTypeVariety(int)
    {
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _simpleTypeVariety> = i0;

        return;
    }

    public int getSimpleVariety()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _simpleTypeVariety>;

        return $i0;
    }

    public boolean isURType()
    {
        int $i0, $i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _builtinTypeCode>;

        if $i0 == 1 goto label1;

        $i1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _builtinTypeCode>;

        if $i1 != 2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isNoType()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

        if r0 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSimpleType()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isSimpleType>;

        return $z0;
    }

    public void setSimpleType(boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertUnresolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isSimpleType> = z0;

        return;
    }

    public boolean isUnionOfLists()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isUnionOfLists>;

        return $z0;
    }

    public void setUnionOfLists(boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isUnionOfLists> = z0;

        return;
    }

    public org.apache.xmlbeans.SchemaType getPrimitiveType()
    {
        org.apache.xmlbeans.SchemaType$Ref $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r3;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _primitiveTypeRef>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _primitiveTypeRef>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

     label2:
        return $r3;
    }

    public void setPrimitiveTypeRef(org.apache.xmlbeans.SchemaType$Ref)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _primitiveTypeRef> = r1;

        return;
    }

    public int getDecimalSize()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _decimalSize>;

        return $i0;
    }

    public void setDecimalSize(int)
    {
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _decimalSize> = i0;

        return;
    }

    public org.apache.xmlbeans.SchemaType getBaseType()
    {
        org.apache.xmlbeans.SchemaType$Ref $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r3;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _baseTyperef>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _baseTyperef>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

     label2:
        return $r3;
    }

    public void setBaseTypeRef(org.apache.xmlbeans.SchemaType$Ref)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _baseTyperef> = r1;

        return;
    }

    public int getBaseDepth()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _baseDepth>;

        return $i0;
    }

    public void setBaseDepth(int)
    {
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _baseDepth> = i0;

        return;
    }

    public org.apache.xmlbeans.SchemaType getContentBasedOnType()
    {
        org.apache.xmlbeans.SchemaType$Ref $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r3;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _contentBasedOnTyperef>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _contentBasedOnTyperef>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

     label2:
        return $r3;
    }

    public void setContentBasedOnTypeRef(org.apache.xmlbeans.SchemaType$Ref)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _contentBasedOnTyperef> = r1;

        return;
    }

    public int getDerivationType()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _derivationType>;

        return $i0;
    }

    public void setDerivationType(int)
    {
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _derivationType> = i0;

        return;
    }

    public org.apache.xmlbeans.SchemaType getListItemType()
    {
        org.apache.xmlbeans.SchemaType$Ref $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r3;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _listItemTyperef>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _listItemTyperef>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

     label2:
        return $r3;
    }

    public void setListItemTypeRef(org.apache.xmlbeans.SchemaType$Ref)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _listItemTyperef> = r1;

        return;
    }

    public org.apache.xmlbeans.SchemaType[] getUnionMemberTypes()
    {
        org.apache.xmlbeans.SchemaType[] $r6;
        org.apache.xmlbeans.SchemaType$Ref $r4;
        org.apache.xmlbeans.SchemaType$Ref[] $r1, $r2, $r3;
        int $i0, i1, $i2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r5;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref[] _unionMemberTyperefs>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref[] _unionMemberTyperefs>;

        $i0 = lengthof $r2;

     label2:
        $r6 = newarray (org.apache.xmlbeans.SchemaType)[$i0];

        i1 = 0;

     label3:
        $i2 = lengthof $r6;

        if i1 >= $i2 goto label4;

        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref[] _unionMemberTyperefs>;

        $r4 = $r3[i1];

        $r5 = virtualinvoke $r4.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

        $r6[i1] = $r5;

        i1 = i1 + 1;

        goto label3;

     label4:
        return $r6;
    }

    public void setUnionMemberTypeRefs(org.apache.xmlbeans.SchemaType$Ref[])
    {
        org.apache.xmlbeans.SchemaType$Ref[] r1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType$Ref[];

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref[] _unionMemberTyperefs> = r1;

        return;
    }

    public int getAnonymousUnionMemberOrdinal()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _anonymousUnionMemberOrdinal>;

        return $i0;
    }

    public void setAnonymousUnionMemberOrdinal(int)
    {
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertUnresolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _anonymousUnionMemberOrdinal> = i0;

        return;
    }

    public synchronized org.apache.xmlbeans.SchemaType[] getUnionConstituentTypes()
    {
        org.apache.xmlbeans.SchemaType[] $r2, $r3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType _unionCommonBaseType>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void computeFlatUnionModel()>();

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType[] _unionConstituentTypes>;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType[] staCopy(org.apache.xmlbeans.SchemaType[])>($r2);

        return $r3;
    }

    private void setUnionConstituentTypes(org.apache.xmlbeans.SchemaType[])
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType[] r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType[];

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType[] _unionConstituentTypes> = r1;

        return;
    }

    public synchronized org.apache.xmlbeans.SchemaType[] getUnionSubTypes()
    {
        org.apache.xmlbeans.SchemaType[] $r2, $r3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType _unionCommonBaseType>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void computeFlatUnionModel()>();

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType[] _unionSubTypes>;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType[] staCopy(org.apache.xmlbeans.SchemaType[])>($r2);

        return $r3;
    }

    private void setUnionSubTypes(org.apache.xmlbeans.SchemaType[])
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType[] r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType[];

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType[] _unionSubTypes> = r1;

        return;
    }

    public synchronized org.apache.xmlbeans.SchemaType getUnionCommonBaseType()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r1, $r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType _unionCommonBaseType>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void computeFlatUnionModel()>();

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType _unionCommonBaseType>;

        return $r2;
    }

    private void setUnionCommonBaseType(org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType _unionCommonBaseType> = r1;

        return;
    }

    private void computeFlatUnionModel()
    {
        org.apache.xmlbeans.SchemaType[] $r4, $r6, $r7, $r8, $r10, $r11, $r16, $r18;
        java.lang.IllegalStateException $r22;
        java.lang.Object[] $r5, $r9;
        java.lang.AssertionError $r21;
        org.apache.xmlbeans.SchemaType$Ref $r13;
        int $i0, $i1, $i2, i3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, r15;
        org.apache.xmlbeans.SchemaType $r14, $r20, r23;
        java.util.LinkedHashSet $r1, $r2;
        boolean $z0;
        java.util.List $r17, $r19;
        org.apache.xmlbeans.SchemaType$Ref[] $r3, $r12;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getSimpleVariety()>();

        if $i0 == 2 goto label1;

        $r22 = new java.lang.IllegalStateException;

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Operation is only supported on union types");

        throw $r22;

     label1:
        $r1 = new java.util.LinkedHashSet;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>()>();

        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

        r23 = null;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r0);

        i3 = 0;

     label2:
        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref[] _unionMemberTyperefs>;

        $i1 = lengthof $r3;

        if i3 >= $i1 goto label8;

        $r12 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref[] _unionMemberTyperefs>;

        $r13 = $r12[i3];

        $r14 = virtualinvoke $r13.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

        r15 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r14;

        $i2 = virtualinvoke r15.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getSimpleVariety()>();

        tableswitch($i2)
        {
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label3;
            default: goto label6;
        };

     label3:
        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r15);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r15);

        r23 = virtualinvoke r15.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getCommonBaseType(org.apache.xmlbeans.SchemaType)>(r23);

        goto label7;

     label4:
        $r16 = virtualinvoke r15.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType[] getUnionConstituentTypes()>();

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r16);

        interfaceinvoke $r1.<java.util.Set: boolean addAll(java.util.Collection)>($r17);

        $r18 = virtualinvoke r15.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType[] getUnionSubTypes()>();

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r18);

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r19);

        $r20 = virtualinvoke r15.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getUnionCommonBaseType()>();

        if $r20 == null goto label7;

        r23 = interfaceinvoke $r20.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getCommonBaseType(org.apache.xmlbeans.SchemaType)>(r23);

        goto label7;

     label5:
        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r15);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r15);

        r23 = virtualinvoke r15.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getCommonBaseType(org.apache.xmlbeans.SchemaType)>(r23);

        goto label7;

     label6:
        $z0 = <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label7;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label7:
        i3 = i3 + 1;

        goto label2;

     label8:
        $r4 = <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaType[] EMPTY_ST_ARRAY>;

        $r5 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.apache.xmlbeans.SchemaType[]) $r5;

        $r7 = (org.apache.xmlbeans.SchemaType[]) $r6;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setUnionConstituentTypes(org.apache.xmlbeans.SchemaType[])>($r7);

        $r8 = <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaType[] EMPTY_ST_ARRAY>;

        $r9 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (org.apache.xmlbeans.SchemaType[]) $r9;

        $r11 = (org.apache.xmlbeans.SchemaType[]) $r10;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setUnionSubTypes(org.apache.xmlbeans.SchemaType[])>($r11);

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setUnionCommonBaseType(org.apache.xmlbeans.SchemaType)>(r23);

        return;
    }

    public javax.xml.namespace.QName getSubstitutionGroup()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        javax.xml.namespace.QName $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName _sg>;

        return $r1;
    }

    public void setSubstitutionGroup(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: javax.xml.namespace.QName;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertSGResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName _sg> = r1;

        return;
    }

    public void addSubstitutionGroupMember(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.util.List $r2;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: javax.xml.namespace.QName;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertSGResolved()>();

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.List _sgMembers>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public javax.xml.namespace.QName[] getSubstitutionGroupMembers()
    {
        java.lang.Object[] $r4;
        java.util.List $r1, $r3;
        javax.xml.namespace.QName[] r2, $r5, $r6;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.List _sgMembers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (javax.xml.namespace.QName)[$i0];

        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.List _sgMembers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        $r5 = (javax.xml.namespace.QName[]) $r4;

        $r6 = (javax.xml.namespace.QName[]) $r5;

        return $r6;
    }

    public int getWhiteSpaceRule()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _whiteSpaceRule>;

        return $i0;
    }

    public void setWhiteSpaceRule(int)
    {
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _whiteSpaceRule> = i0;

        return;
    }

    public org.apache.xmlbeans.XmlAnySimpleType getFacet(int)
    {
        org.apache.xmlbeans.XmlAnySimpleType $r4;
        org.apache.xmlbeans.impl.schema.XmlValueRef[] $r1, $r2;
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.impl.schema.XmlValueRef r3;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.schema.XmlValueRef[] _facetArray>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.schema.XmlValueRef[] _facetArray>;

        r3 = $r2[i0];

        if r3 != null goto label2;

        return null;

     label2:
        $r4 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.XmlValueRef: org.apache.xmlbeans.XmlAnySimpleType get()>();

        return $r4;
    }

    public boolean isFacetFixed(int)
    {
        int i0;
        boolean[] $r1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean[] _fixedFacetArray>;

        $z0 = $r1[i0];

        return $z0;
    }

    public org.apache.xmlbeans.XmlAnySimpleType[] getBasicFacets()
    {
        org.apache.xmlbeans.XmlAnySimpleType $r2;
        org.apache.xmlbeans.XmlAnySimpleType[] r0;
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r0 = newarray (org.apache.xmlbeans.XmlAnySimpleType)[12];

        i0 = 0;

     label1:
        if i0 > 11 goto label2;

        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(i0);

        r0[i0] = $r2;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r0;
    }

    public boolean[] getFixedFacets()
    {
        boolean[] $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean[] _fixedFacetArray>;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean[] boaCopy(boolean[])>($r1);

        return $r2;
    }

    public void setBasicFacets(org.apache.xmlbeans.impl.schema.XmlValueRef[], boolean[])
    {
        boolean[] r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.impl.schema.XmlValueRef[] r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.XmlValueRef[];

        r2 := @parameter1: boolean[];

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.schema.XmlValueRef[] _facetArray> = r1;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean[] _fixedFacetArray> = r2;

        return;
    }

    public int ordered()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _ordered>;

        return $i0;
    }

    public void setOrdered(int)
    {
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _ordered> = i0;

        return;
    }

    public boolean isBounded()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isBounded>;

        return $z0;
    }

    public void setBounded(boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isBounded> = z0;

        return;
    }

    public boolean isFinite()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isFinite>;

        return $z0;
    }

    public void setFinite(boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isFinite> = z0;

        return;
    }

    public boolean isNumeric()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isNumeric>;

        return $z0;
    }

    public void setNumeric(boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _isNumeric> = z0;

        return;
    }

    public boolean hasPatternFacet()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _hasPatterns>;

        return $z0;
    }

    public void setPatternFacet(boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _hasPatterns> = z0;

        return;
    }

    public boolean matchPatternFacet(java.lang.String)
    {
        org.apache.xmlbeans.impl.regex.RegularExpression $r7;
        int $i0, $i1, $i2, i3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String r2;
        org.apache.xmlbeans.SchemaType $r8;
        boolean $z0, $z1, $z2;
        org.apache.xmlbeans.impl.regex.RegularExpression[] $r1, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r2 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _hasPatterns>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns>;

        if $r1 == null goto label5;

        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns>;

        $i0 = lengthof $r3;

        if $i0 <= 0 goto label5;

        i3 = 0;

     label2:
        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns>;

        $i1 = lengthof $r4;

        if i3 >= $i1 goto label4;

        $r6 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns>;

        $r7 = $r6[i3];

        $z1 = virtualinvoke $r7.<org.apache.xmlbeans.impl.regex.RegularExpression: boolean matches(java.lang.String)>(r2);

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $r5 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns>;

        $i2 = lengthof $r5;

        if i3 < $i2 goto label5;

        return 0;

     label5:
        $r8 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseType()>();

        $z2 = interfaceinvoke $r8.<org.apache.xmlbeans.SchemaType: boolean matchPatternFacet(java.lang.String)>(r2);

        return $z2;
    }

    public java.lang.String[] getPatterns()
    {
        org.apache.xmlbeans.impl.regex.RegularExpression $r6;
        java.lang.String[] r3, $r8;
        org.apache.xmlbeans.impl.regex.RegularExpression[] $r1, $r2, $r4, $r5;
        int $i0, $i1, i2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String $r7;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns>;

        if $r1 != null goto label1;

        $r8 = newarray (java.lang.String)[0];

        return $r8;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns>;

        $i0 = lengthof $r2;

        r3 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label2:
        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns>;

        $i1 = lengthof $r4;

        if i2 >= $i1 goto label3;

        $r5 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns>;

        $r6 = $r5[i2];

        $r7 = virtualinvoke $r6.<org.apache.xmlbeans.impl.regex.RegularExpression: java.lang.String getPattern()>();

        r3[i2] = $r7;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r3;
    }

    public org.apache.xmlbeans.impl.regex.RegularExpression[] getPatternExpressions()
    {
        org.apache.xmlbeans.impl.regex.RegularExpression[] $r1, $r2, r3, $r4, $r5, $r6;
        int $i0, $i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns>;

        if $r1 != null goto label1;

        $r6 = newarray (org.apache.xmlbeans.impl.regex.RegularExpression)[0];

        return $r6;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns>;

        $i0 = lengthof $r2;

        r3 = newarray (org.apache.xmlbeans.impl.regex.RegularExpression)[$i0];

        $r5 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns>;

        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns>;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r3, 0, $i1);

        return r3;
    }

    public void setPatterns(org.apache.xmlbeans.impl.regex.RegularExpression[])
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.impl.regex.RegularExpression[] r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.impl.regex.RegularExpression[];

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.regex.RegularExpression[] _patterns> = r1;

        return;
    }

    public org.apache.xmlbeans.XmlAnySimpleType[] getEnumerationValues()
    {
        org.apache.xmlbeans.XmlAnySimpleType $r6;
        org.apache.xmlbeans.impl.schema.XmlValueRef[] $r1, $r2, $r4;
        org.apache.xmlbeans.XmlAnySimpleType[] r3;
        int $i0, $i1, $i2, i3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.impl.schema.XmlValueRef r5;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.schema.XmlValueRef[] _enumerationValues>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.schema.XmlValueRef[] _enumerationValues>;

        $i0 = lengthof $r2;

        r3 = newarray (org.apache.xmlbeans.XmlAnySimpleType)[$i0];

        i3 = 0;

     label2:
        $i1 = lengthof r3;

        if i3 >= $i1 goto label5;

        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.schema.XmlValueRef[] _enumerationValues>;

        r5 = $r4[i3];

        $i2 = i3;

        if r5 != null goto label3;

        $r6 = null;

        goto label4;

     label3:
        $r6 = virtualinvoke r5.<org.apache.xmlbeans.impl.schema.XmlValueRef: org.apache.xmlbeans.XmlAnySimpleType get()>();

     label4:
        r3[$i2] = $r6;

        i3 = i3 + 1;

        goto label2;

     label5:
        return r3;
    }

    public void setEnumerationValues(org.apache.xmlbeans.impl.schema.XmlValueRef[])
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.impl.schema.XmlValueRef[] r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.XmlValueRef[];

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.schema.XmlValueRef[] _enumerationValues> = r1;

        return;
    }

    public org.apache.xmlbeans.StringEnumAbstractBase enumForString(java.lang.String)
    {
        java.util.Map $r1, $r3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Object $r4;
        java.lang.String r2;
        org.apache.xmlbeans.StringEnumAbstractBase $r5;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void ensureStringEnumInfo()>();

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _lookupStringEnum>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _lookupStringEnum>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (org.apache.xmlbeans.StringEnumAbstractBase) $r4;

        return $r5;
    }

    public org.apache.xmlbeans.StringEnumAbstractBase enumForInt(int)
    {
        java.util.List $r1, $r2, $r3;
        int i0, $i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Object $r4;
        org.apache.xmlbeans.StringEnumAbstractBase $r5;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void ensureStringEnumInfo()>();

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.List _listOfStringEnum>;

        if $r1 == null goto label1;

        if i0 < 0 goto label1;

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.List _listOfStringEnum>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.List _listOfStringEnum>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (org.apache.xmlbeans.StringEnumAbstractBase) $r4;

        return $r5;
    }

    public org.apache.xmlbeans.SchemaStringEnumEntry enumEntryForString(java.lang.String)
    {
        org.apache.xmlbeans.SchemaStringEnumEntry $r5;
        java.util.Map $r1, $r3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Object $r4;
        java.lang.String r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void ensureStringEnumInfo()>();

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _lookupStringEnumEntry>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _lookupStringEnumEntry>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (org.apache.xmlbeans.SchemaStringEnumEntry) $r4;

        return $r5;
    }

    public org.apache.xmlbeans.SchemaType getBaseEnumType()
    {
        org.apache.xmlbeans.SchemaType$Ref $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r3;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _baseEnumTyperef>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _baseEnumTyperef>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

     label2:
        return $r3;
    }

    public void setBaseEnumTypeRef(org.apache.xmlbeans.SchemaType$Ref)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType$Ref;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _baseEnumTyperef> = r1;

        return;
    }

    public org.apache.xmlbeans.SchemaStringEnumEntry[] getStringEnumEntries()
    {
        org.apache.xmlbeans.SchemaStringEnumEntry[] $r1, $r2, r3, $r4;
        int $i0, $i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaStringEnumEntry[] _stringEnumEntries>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaStringEnumEntry[] _stringEnumEntries>;

        $i0 = lengthof $r2;

        r3 = newarray (org.apache.xmlbeans.SchemaStringEnumEntry)[$i0];

        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaStringEnumEntry[] _stringEnumEntries>;

        $i1 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r3, 0, $i1);

        return r3;
    }

    public void setStringEnumEntries(org.apache.xmlbeans.SchemaStringEnumEntry[])
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaStringEnumEntry[] r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaStringEnumEntry[];

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertJavaizing()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaStringEnumEntry[] _stringEnumEntries> = r1;

        return;
    }

    private void ensureStringEnumInfo()
    {
        org.apache.xmlbeans.SchemaStringEnumEntry $r8, $r9, $r14, $r16, $r18, $r20;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r6;
        boolean $z0, $z1;
        java.lang.Exception $r23;
        java.lang.Throwable $r21, $r22;
        java.util.HashMap $r2, $r4;
        java.util.ArrayList $r3;
        java.lang.StringBuffer $r24, $r26, $r27;
        org.apache.xmlbeans.SchemaType$Ref $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13;
        org.apache.xmlbeans.impl.values.StringEnumValue $r11;
        java.lang.String $r10, $r17, $r19, $r28;
        java.io.PrintStream $r25;
        org.apache.xmlbeans.SchemaStringEnumEntry[] r1;
        org.apache.xmlbeans.StringEnumAbstractBase$Table r30;
        java.lang.reflect.Field $r12;
        java.lang.Class $r7, r29;
        java.lang.Object $r13;
        org.apache.xmlbeans.StringEnumAbstractBase $r15;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _stringEnumEnsured>;

        if $z0 == 0 goto label01;

        return;

     label01:
        r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaStringEnumEntry[] _stringEnumEntries>;

        if r1 != null goto label02;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _stringEnumEnsured> = 1;

        return;

     label02:
        $r2 = new java.util.HashMap;

        $i0 = lengthof r1;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>($i0);

        $r3 = new java.util.ArrayList;

        $i1 = lengthof r1;

        $i2 = $i1 + 1;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i2);

        $r4 = new java.util.HashMap;

        $i3 = lengthof r1;

        specialinvoke $r4.<java.util.HashMap: void <init>(int)>($i3);

        i11 = 0;

     label03:
        $i4 = lengthof r1;

        if i11 >= $i4 goto label04;

        $r18 = r1[i11];

        $r19 = interfaceinvoke $r18.<org.apache.xmlbeans.SchemaStringEnumEntry: java.lang.String getString()>();

        $r20 = r1[i11];

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r20);

        i11 = i11 + 1;

        goto label03;

     label04:
        $r5 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _baseEnumTyperef>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

        $r7 = interfaceinvoke $r6.<org.apache.xmlbeans.SchemaType: java.lang.Class getEnumJavaClass()>();

        r29 = $r7;

        if $r7 == null goto label11;

     label05:
        $r12 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("table");

        $r13 = virtualinvoke $r12.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        r30 = (org.apache.xmlbeans.StringEnumAbstractBase$Table) $r13;

        i12 = 0;

     label06:
        $i8 = lengthof r1;

        if i12 >= $i8 goto label09;

        $r14 = r1[i12];

        $i9 = interfaceinvoke $r14.<org.apache.xmlbeans.SchemaStringEnumEntry: int getIntValue()>();

        $r15 = virtualinvoke r30.<org.apache.xmlbeans.StringEnumAbstractBase$Table: org.apache.xmlbeans.StringEnumAbstractBase forInt(int)>($i9);

        $r16 = r1[i12];

        $r17 = interfaceinvoke $r16.<org.apache.xmlbeans.SchemaStringEnumEntry: java.lang.String getString()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r15);

     label07:
        $i10 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i10 > $i9 goto label08;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(null);

        goto label07;

     label08:
        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i9, $r15);

        i12 = i12 + 1;

        goto label06;

     label09:
        goto label11;

     label10:
        $r23 := @caughtexception;

        $r25 = <java.lang.System: java.io.PrintStream err>;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Something wrong: could not locate enum table for ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r28);

        r29 = null;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        interfaceinvoke $r3.<java.util.List: void clear()>();

     label11:
        if r29 != null goto label15;

        i13 = 0;

     label12:
        $i5 = lengthof r1;

        if i13 >= $i5 goto label15;

        $r8 = r1[i13];

        $i6 = interfaceinvoke $r8.<org.apache.xmlbeans.SchemaStringEnumEntry: int getIntValue()>();

        $r9 = r1[i13];

        $r10 = interfaceinvoke $r9.<org.apache.xmlbeans.SchemaStringEnumEntry: java.lang.String getString()>();

        $r11 = new org.apache.xmlbeans.impl.values.StringEnumValue;

        specialinvoke $r11.<org.apache.xmlbeans.impl.values.StringEnumValue: void <init>(java.lang.String,int)>($r10, $i6);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

     label13:
        $i7 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i7 > $i6 goto label14;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(null);

        goto label13;

     label14:
        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i6, $r11);

        i13 = i13 + 1;

        goto label12;

     label15:
        entermonitor r0;

     label16:
        $z1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _stringEnumEnsured>;

        if $z1 != 0 goto label17;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _lookupStringEnum> = $r2;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.List _listOfStringEnum> = $r3;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.util.Map _lookupStringEnumEntry> = $r4;

     label17:
        exitmonitor r0;

     label18:
        goto label21;

     label19:
        $r22 := @caughtexception;

        exitmonitor r0;

     label20:
        throw $r22;

     label21:
        entermonitor r0;

     label22:
        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _stringEnumEnsured> = 1;

        exitmonitor r0;

     label23:
        goto label26;

     label24:
        $r21 := @caughtexception;

        exitmonitor r0;

     label25:
        throw $r21;

     label26:
        return;

        catch java.lang.Exception from label05 to label09 with label10;
        catch java.lang.Throwable from label16 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
    }

    public boolean hasStringEnumValues()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaStringEnumEntry[] $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaStringEnumEntry[] _stringEnumEntries>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void copyEnumerationValues(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.impl.schema.XmlValueRef[] $r2;
        org.apache.xmlbeans.SchemaType$Ref $r3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        $r2 = r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.schema.XmlValueRef[] _enumerationValues>;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.impl.schema.XmlValueRef[] _enumerationValues> = $r2;

        $r3 = r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _baseEnumTyperef>;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _baseEnumTyperef> = $r3;

        return;
    }

    public int getBuiltinTypeCode()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _builtinTypeCode>;

        return $i0;
    }

    public void setBuiltinTypeCode(int)
    {
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolving()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int _builtinTypeCode> = i0;

        return;
    }

    synchronized void assignJavaElementSetterModel()
    {
        org.apache.xmlbeans.SchemaProperty[] $r1;
        java.util.HashMap $r3;
        org.apache.xmlbeans.SchemaParticle $r2;
        org.apache.xmlbeans.QNameSet $r4, $r8, $r10;
        org.apache.xmlbeans.SchemaProperty $r5;
        int $i0, i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.impl.schema.SchemaPropertyImpl r6;
        org.apache.xmlbeans.QNameSetBuilder $r9;
        javax.xml.namespace.QName $r7;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaProperty[] getElementProperties()>();

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.QNameSet computeAllContainedElements(org.apache.xmlbeans.SchemaParticle,java.util.Map)>($r2, $r3);

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r5 = $r1[i1];

        r6 = (org.apache.xmlbeans.impl.schema.SchemaPropertyImpl) $r5;

        $r7 = virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: javax.xml.namespace.QName getName()>();

        $r8 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.QNameSet computeNondelimitingElements(javax.xml.namespace.QName,org.apache.xmlbeans.SchemaParticle,java.util.Map)>($r7, $r2, $r3);

        $r9 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r9.<org.apache.xmlbeans.QNameSetBuilder: void <init>(org.apache.xmlbeans.QNameSetSpecification)>($r4);

        virtualinvoke $r9.<org.apache.xmlbeans.QNameSetBuilder: void removeAll(org.apache.xmlbeans.QNameSetSpecification)>($r8);

        $r10 = virtualinvoke $r9.<org.apache.xmlbeans.QNameSetBuilder: org.apache.xmlbeans.QNameSet toQNameSet()>();

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setJavaSetterDelimiter(org.apache.xmlbeans.QNameSet)>($r10);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static org.apache.xmlbeans.QNameSet computeNondelimitingElements(javax.xml.namespace.QName, org.apache.xmlbeans.SchemaParticle, java.util.Map)
    {
        org.apache.xmlbeans.SchemaParticle r0, $r10, $r12, $r16, $r18;
        org.apache.xmlbeans.QNameSet $r2, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r20;
        java.util.Map r1;
        int $i0, $i1, $i2, i3, i4, $i6;
        java.math.BigInteger $r4, $r5, $r6;
        boolean $z0, $z1, $z2, z3;
        org.apache.xmlbeans.QNameSetBuilder $r21, $r22;
        javax.xml.namespace.QName r3;

        r3 := @parameter0: javax.xml.namespace.QName;

        r0 := @parameter1: org.apache.xmlbeans.SchemaParticle;

        r1 := @parameter2: java.util.Map;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.QNameSet computeAllContainedElements(org.apache.xmlbeans.SchemaParticle,java.util.Map)>(r0, r1);

        $z0 = virtualinvoke $r2.<org.apache.xmlbeans.QNameSet: boolean contains(javax.xml.namespace.QName)>(r3);

        if $z0 != 0 goto label01;

        $r20 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet EMPTY>;

        return $r20;

     label01:
        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r4 == null goto label02;

        $r5 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $r6 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $i0 = virtualinvoke $r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i0 <= 0 goto label03;

     label02:
        return $r2;

     label03:
        $i1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label06;
            case 3: goto label10;
            case 4: goto label04;
            case 5: goto label05;
            default: goto label04;
        };

     label04:
        return $r2;

     label05:
        $r7 = staticinvoke <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet singleton(javax.xml.namespace.QName)>(r3);

        return $r7;

     label06:
        $r21 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r21.<org.apache.xmlbeans.QNameSetBuilder: void <init>()>();

        i3 = 0;

     label07:
        $i2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int countOfParticleChild()>();

        if i3 >= $i2 goto label09;

        $r16 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle getParticleChild(int)>(i3);

        $r17 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.QNameSet computeAllContainedElements(org.apache.xmlbeans.SchemaParticle,java.util.Map)>($r16, r1);

        $z2 = virtualinvoke $r17.<org.apache.xmlbeans.QNameSet: boolean contains(javax.xml.namespace.QName)>(r3);

        if $z2 == 0 goto label08;

        $r18 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle getParticleChild(int)>(i3);

        $r19 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.QNameSet computeNondelimitingElements(javax.xml.namespace.QName,org.apache.xmlbeans.SchemaParticle,java.util.Map)>(r3, $r18, r1);

        virtualinvoke $r21.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r19);

     label08:
        i3 = i3 + 1;

        goto label07;

     label09:
        $r15 = virtualinvoke $r21.<org.apache.xmlbeans.QNameSetBuilder: org.apache.xmlbeans.QNameSet toQNameSet()>();

        return $r15;

     label10:
        $r22 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r22.<org.apache.xmlbeans.QNameSetBuilder: void <init>()>();

        z3 = 0;

        i4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int countOfParticleChild()>();

     label11:
        if i4 <= 0 goto label14;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        $r10 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle getParticleChild(int)>(i4);

        $r11 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.QNameSet computeAllContainedElements(org.apache.xmlbeans.SchemaParticle,java.util.Map)>($r10, r1);

        if z3 == 0 goto label12;

        virtualinvoke $r22.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r11);

        goto label13;

     label12:
        $z1 = virtualinvoke $r11.<org.apache.xmlbeans.QNameSet: boolean contains(javax.xml.namespace.QName)>(r3);

        if $z1 == 0 goto label13;

        $r12 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle getParticleChild(int)>(i4);

        $r13 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.QNameSet computeNondelimitingElements(javax.xml.namespace.QName,org.apache.xmlbeans.SchemaParticle,java.util.Map)>(r3, $r12, r1);

        virtualinvoke $r22.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r13);

        z3 = 1;

     label13:
        goto label11;

     label14:
        $r9 = virtualinvoke $r22.<org.apache.xmlbeans.QNameSetBuilder: org.apache.xmlbeans.QNameSet toQNameSet()>();

        return $r9;
    }

    private static org.apache.xmlbeans.QNameSet computeAllContainedElements(org.apache.xmlbeans.SchemaParticle, java.util.Map)
    {
        org.apache.xmlbeans.SchemaParticle r1, $r5;
        org.apache.xmlbeans.QNameSet $r6, r7, r8;
        java.util.Map r0;
        int $i0, $i1, i2;
        java.lang.Object $r2;
        org.apache.xmlbeans.QNameSetBuilder $r4;
        org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl $r3;

        r1 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r0 := @parameter1: java.util.Map;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (org.apache.xmlbeans.QNameSet) $r2;

        if r7 == null goto label1;

        return r7;

     label1:
        $i0 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label6;
            case 5: goto label5;
            default: goto label2;
        };

     label2:
        $r4 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r4.<org.apache.xmlbeans.QNameSetBuilder: void <init>()>();

        i2 = 0;

     label3:
        $i1 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int countOfParticleChild()>();

        if i2 >= $i1 goto label4;

        $r5 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle getParticleChild(int)>(i2);

        $r6 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.QNameSet computeAllContainedElements(org.apache.xmlbeans.SchemaParticle,java.util.Map)>($r5, r0);

        virtualinvoke $r4.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r6);

        i2 = i2 + 1;

        goto label3;

     label4:
        r8 = virtualinvoke $r4.<org.apache.xmlbeans.QNameSetBuilder: org.apache.xmlbeans.QNameSet toQNameSet()>();

        goto label7;

     label5:
        r8 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        goto label7;

     label6:
        $r3 = (org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl) r1;

        r8 = virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: org.apache.xmlbeans.QNameSet acceptedStartNames()>();

     label7:
        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8);

        return r8;
    }

    public java.lang.Class getJavaClass()
    {
        org.apache.xmlbeans.SchemaTypeSystem $r4;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Class $r1, $r6, $r8;
        java.lang.ClassNotFoundException $r7;
        java.lang.String $r2, $r3;
        java.lang.ClassLoader $r5;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _javaClass>;

        if $r1 != null goto label4;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getFullJavaName()>();

        if $r2 == null goto label4;

     label1:
        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getFullJavaName()>();

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaTypeSystem getTypeSystem()>();

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaTypeSystem: java.lang.ClassLoader getClassLoader()>();

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r3, 0, $r5);

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _javaClass> = $r6;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _javaClass> = null;

     label4:
        $r8 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _javaClass>;

        return $r8;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public java.lang.Class getJavaImplClass()
    {
        org.apache.xmlbeans.SchemaTypeSystem $r4;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Class $r1, $r6, $r8;
        java.lang.ClassNotFoundException $r7;
        java.lang.String $r2, $r3;
        java.lang.ClassLoader $r5;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _implNotAvailable>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _javaImplClass>;

        if $r1 != null goto label6;

     label2:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getFullJavaImplName()>();

        if $r2 == null goto label3;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getFullJavaImplName()>();

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaTypeSystem getTypeSystem()>();

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaTypeSystem: java.lang.ClassLoader getClassLoader()>();

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r3, 0, $r5);

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _javaImplClass> = $r6;

        goto label4;

     label3:
        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _implNotAvailable> = 1;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _implNotAvailable> = 1;

     label6:
        $r8 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _javaImplClass>;

        return $r8;

        catch java.lang.ClassNotFoundException from label2 to label4 with label5;
    }

    public java.lang.Class getUserTypeClass()
    {
        org.apache.xmlbeans.SchemaTypeSystem $r4;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Class $r1, $r6, $r8;
        java.lang.ClassNotFoundException $r7;
        java.lang.String $r2, $r3;
        java.lang.ClassLoader $r5;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _userTypeClass>;

        if $r1 != null goto label4;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getUserTypeName()>();

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _userTypeName>;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaTypeSystem getTypeSystem()>();

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaTypeSystem: java.lang.ClassLoader getClassLoader()>();

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r3, 0, $r5);

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _userTypeClass> = $r6;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _userTypeClass> = null;

     label4:
        $r8 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _userTypeClass>;

        return $r8;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public java.lang.Class getUserTypeHandlerClass()
    {
        org.apache.xmlbeans.SchemaTypeSystem $r4;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Class $r1, $r6, $r8;
        java.lang.ClassNotFoundException $r7;
        java.lang.String $r2, $r3;
        java.lang.ClassLoader $r5;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _userTypeHandlerClass>;

        if $r1 != null goto label4;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getUserTypeHandlerName()>();

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _userTypeHandler>;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaTypeSystem getTypeSystem()>();

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaTypeSystem: java.lang.ClassLoader getClassLoader()>();

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r3, 0, $r5);

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _userTypeHandlerClass> = $r6;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _userTypeHandlerClass> = null;

     label4:
        $r8 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _userTypeHandlerClass>;

        return $r8;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public java.lang.reflect.Constructor getJavaImplConstructor()
    {
        java.lang.NoSuchMethodException $r6;
        java.lang.Class[] $r3;
        java.lang.reflect.Constructor $r1, $r5, $r8;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Class $r2, $r4, $r7;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.reflect.Constructor _javaImplConstructor>;

        if $r1 != null goto label6;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _implNotAvailable>;

        if $z0 != 0 goto label6;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class getJavaImplClass()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = newarray (java.lang.Class)[1];

        $r4 = <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class class$org$apache$xmlbeans$SchemaType>;

        if $r4 != null goto label2;

        $r7 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.SchemaType");

        <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class class$org$apache$xmlbeans$SchemaType> = $r7;

        goto label3;

     label2:
        $r7 = <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class class$org$apache$xmlbeans$SchemaType>;

     label3:
        $r3[0] = $r7;

        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.reflect.Constructor _javaImplConstructor> = $r5;

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.NoSuchMethodException: void printStackTrace()>();

     label6:
        $r8 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.reflect.Constructor _javaImplConstructor>;

        return $r8;

        catch java.lang.NoSuchMethodException from label1 to label4 with label5;
    }

    public java.lang.reflect.Constructor getJavaImplConstructor2()
    {
        java.lang.NoSuchMethodException $r7;
        java.lang.Class[] $r3;
        java.lang.reflect.Constructor $r1, $r6, $r9;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Class $r2, $r4, $r5, $r8;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.reflect.Constructor _javaImplConstructor2>;

        if $r1 != null goto label6;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _implNotAvailable>;

        if $z0 != 0 goto label6;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class getJavaImplClass()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = newarray (java.lang.Class)[2];

        $r4 = <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class class$org$apache$xmlbeans$SchemaType>;

        if $r4 != null goto label2;

        $r8 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.SchemaType");

        <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class class$org$apache$xmlbeans$SchemaType> = $r8;

        goto label3;

     label2:
        $r8 = <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class class$org$apache$xmlbeans$SchemaType>;

     label3:
        $r3[0] = $r8;

        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r3[1] = $r5;

        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r3);

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.reflect.Constructor _javaImplConstructor2> = $r6;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.NoSuchMethodException: void printStackTrace()>();

     label6:
        $r9 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.reflect.Constructor _javaImplConstructor2>;

        return $r9;

        catch java.lang.NoSuchMethodException from label1 to label4 with label5;
    }

    public java.lang.Class getEnumJavaClass()
    {
        org.apache.xmlbeans.SchemaTypeSystem $r9;
        java.lang.StringBuffer $r3, $r6, $r7;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Class $r1, $r11, $r13;
        java.lang.ClassNotFoundException $r12;
        java.lang.String $r5, $r8;
        java.lang.ClassLoader $r10;
        org.apache.xmlbeans.SchemaType $r2, $r4;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _javaEnumClass>;

        if $r1 != null goto label4;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseEnumType()>();

        if $r2 == null goto label4;

     label1:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseEnumType()>();

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaType: java.lang.String getFullJavaName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$Enum");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaTypeSystem getTypeSystem()>();

        $r10 = interfaceinvoke $r9.<org.apache.xmlbeans.SchemaTypeSystem: java.lang.ClassLoader getClassLoader()>();

        $r11 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r8, 0, $r10);

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _javaEnumClass> = $r11;

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _javaEnumClass> = null;

     label4:
        $r13 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _javaEnumClass>;

        return $r13;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void setJavaClass(java.lang.Class)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Class r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void assertResolved()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class _javaClass> = r1;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setFullJavaName(java.lang.String)>($r2);

        return;
    }

    public boolean isPrimitiveType()
    {
        int $i0, $i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBuiltinTypeCode()>();

        if $i0 < 2 goto label1;

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBuiltinTypeCode()>();

        if $i1 > 21 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isBuiltinType()
    {
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBuiltinTypeCode()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.xmlbeans.XmlObject createUnwrappedNode()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.XmlObject $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject createUnattachedNode(org.apache.xmlbeans.SchemaProperty)>(null);

        return $r1;
    }

    public org.apache.xmlbeans.impl.values.TypeStoreUser createTypeStoreUser()
    {
        org.apache.xmlbeans.impl.values.TypeStoreUser $r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.XmlObject $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject createUnattachedNode(org.apache.xmlbeans.SchemaProperty)>(null);

        $r2 = (org.apache.xmlbeans.impl.values.TypeStoreUser) $r1;

        return $r2;
    }

    public org.apache.xmlbeans.XmlAnySimpleType newValidatingValue(java.lang.Object)
    {
        org.apache.xmlbeans.XmlAnySimpleType $r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Object r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType newValue(java.lang.Object,boolean)>(r1, 1);

        return $r2;
    }

    public org.apache.xmlbeans.XmlAnySimpleType newValue(java.lang.Object)
    {
        org.apache.xmlbeans.XmlAnySimpleType $r2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Object r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType newValue(java.lang.Object,boolean)>(r1, 0);

        return $r2;
    }

    public org.apache.xmlbeans.XmlAnySimpleType newValue(java.lang.Object, boolean)
    {
        org.apache.xmlbeans.XmlAnySimpleType $r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase $r5;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r6;
        int $i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Object r2;
        org.apache.xmlbeans.XmlObject $r1, $r4;
        boolean $z0, z1, $z2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r2 := @parameter0: java.lang.Object;

        z1 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSimpleType()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getContentType()>();

        if $i0 == 2 goto label1;

        $r6 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r6.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r6;

     label1:
        $r1 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject createUnattachedNode(org.apache.xmlbeans.SchemaProperty)>(null);

        $r5 = (org.apache.xmlbeans.impl.values.XmlObjectBase) $r1;

        if z1 == 0 goto label2;

        virtualinvoke $r5.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setValidateOnSet()>();

     label2:
        $z2 = r2 instanceof org.apache.xmlbeans.XmlObject;

        if $z2 == 0 goto label3;

        $r4 = (org.apache.xmlbeans.XmlObject) r2;

        virtualinvoke $r5.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_newValue(org.apache.xmlbeans.XmlObject)>($r4);

        goto label4;

     label3:
        virtualinvoke $r5.<org.apache.xmlbeans.impl.values.XmlObjectBase: void objectSet(java.lang.Object)>(r2);

     label4:
        virtualinvoke $r5.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_dated()>();

        virtualinvoke $r5.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setImmutable()>();

        $r3 = (org.apache.xmlbeans.XmlAnySimpleType) $r5;

        return $r3;
    }

    private org.apache.xmlbeans.XmlObject createUnattachedNode(org.apache.xmlbeans.SchemaProperty)
    {
        java.io.PrintStream $r9;
        java.lang.Object[] $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase $r2;
        java.lang.reflect.Constructor $r4;
        java.lang.Exception $r8;
        org.apache.xmlbeans.SchemaProperty r1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, $r3;
        java.lang.Object $r6;
        org.apache.xmlbeans.XmlObject $r7, r10;
        org.apache.xmlbeans.SchemaType r11;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaProperty;

        r10 = null;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isBuiltinType()>();

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isNoType()>();

        if $z1 != 0 goto label5;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.reflect.Constructor getJavaImplConstructor()>();

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Object[] _ctrArgs>;

        $r6 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        $r7 = (org.apache.xmlbeans.XmlObject) $r6;

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Exception trying to instantiate impl class.");

        virtualinvoke $r8.<java.lang.Exception: void printStackTrace()>();

     label4:
        goto label6;

     label5:
        r10 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject createBuiltinInstance()>();

     label6:
        r11 = r0;

     label7:
        if r10 != null goto label8;

        $r3 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r11;

        r10 = specialinvoke $r3.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject createUnattachedSubclass(org.apache.xmlbeans.SchemaType)>(r0);

        r11 = interfaceinvoke r11.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        goto label7;

     label8:
        $r2 = (org.apache.xmlbeans.impl.values.XmlObjectBase) r10;

        virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: void init_flags(org.apache.xmlbeans.SchemaProperty)>(r1);

        return r10;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private org.apache.xmlbeans.XmlObject createUnattachedSubclass(org.apache.xmlbeans.SchemaType)
    {
        java.lang.Throwable $r10;
        java.lang.Object[] $r4;
        java.lang.reflect.Constructor $r3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.Boolean $r15;
        java.lang.SecurityException $r9, $r11, $r14;
        org.apache.xmlbeans.XmlObject $r2, $r6;
        org.apache.xmlbeans.SchemaType r1;
        boolean $z0, $z1, $z2, $z3;
        java.io.PrintStream $r8, $r13;
        java.lang.Exception $r7, $r12;
        java.lang.Object $r5;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isBuiltinType()>();

        if $z0 != 0 goto label21;

        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isNoType()>();

        if $z1 != 0 goto label21;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.reflect.Constructor getJavaImplConstructor2()>();

        if $r3 == null goto label20;

        $z2 = virtualinvoke $r3.<java.lang.reflect.Constructor: boolean isAccessible()>();

     label01:
        virtualinvoke $r3.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

     label02:
        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r1;

        $z3 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z3 == 0 goto label03;

        $r15 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label04;

     label03:
        $r15 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label04:
        $r4[1] = $r15;

        $r5 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r4);

        $r6 = (org.apache.xmlbeans.XmlObject) $r5;

     label05:
        virtualinvoke $r3.<java.lang.reflect.Constructor: void setAccessible(boolean)>($z2);

     label06:
        goto label08;

     label07:
        $r14 := @caughtexception;

     label08:
        return $r6;

     label09:
        $r12 := @caughtexception;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("Exception trying to instantiate impl class.");

        virtualinvoke $r12.<java.lang.Exception: void printStackTrace()>();

     label10:
        virtualinvoke $r3.<java.lang.reflect.Constructor: void setAccessible(boolean)>($z2);

     label11:
        goto label18;

     label12:
        $r11 := @caughtexception;

        goto label18;

     label13:
        $r10 := @caughtexception;

     label14:
        virtualinvoke $r3.<java.lang.reflect.Constructor: void setAccessible(boolean)>($z2);

     label15:
        goto label17;

     label16:
        $r9 := @caughtexception;

     label17:
        throw $r10;

     label18:
        goto label20;

     label19:
        $r7 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Exception trying to instantiate impl class.");

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

     label20:
        return null;

     label21:
        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject createBuiltinSubclass(org.apache.xmlbeans.SchemaType)>(r1);

        return $r2;

        catch java.lang.SecurityException from label05 to label06 with label07;
        catch java.lang.Exception from label02 to label05 with label09;
        catch java.lang.SecurityException from label10 to label11 with label12;
        catch java.lang.Throwable from label02 to label05 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.SecurityException from label14 to label15 with label16;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Exception from label01 to label08 with label19;
        catch java.lang.Exception from label09 to label18 with label19;
    }

    private org.apache.xmlbeans.XmlObject createBuiltinInstance()
    {
        java.lang.IllegalStateException $r49;
        org.apache.xmlbeans.impl.values.XmlUnsignedIntImpl $r15;
        org.apache.xmlbeans.impl.values.XmlGYearImpl $r29;
        org.apache.xmlbeans.impl.values.XmlGMonthImpl $r26;
        org.apache.xmlbeans.impl.values.XmlLanguageImpl $r8;
        org.apache.xmlbeans.impl.values.XmlUnsignedLongImpl $r16;
        org.apache.xmlbeans.impl.values.XmlEntityImpl $r4;
        org.apache.xmlbeans.impl.values.XmlIdRefImpl $r6;
        org.apache.xmlbeans.impl.values.XmlDoubleImpl $r37;
        org.apache.xmlbeans.impl.values.XmlAnySimpleTypeImpl $r45;
        org.apache.xmlbeans.impl.values.XmlAnyUriImpl $r41;
        org.apache.xmlbeans.impl.values.XmlBase64BinaryImpl $r43;
        org.apache.xmlbeans.impl.values.XmlUnsignedShortImpl $r14;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, $r48;
        org.apache.xmlbeans.impl.values.XmlDurationImpl $r34;
        org.apache.xmlbeans.impl.values.XmlIdImpl $r7;
        org.apache.xmlbeans.impl.values.XmlNormalizedStringImpl $r12;
        org.apache.xmlbeans.impl.values.XmlNCNameImpl $r9;
        org.apache.xmlbeans.impl.values.XmlTokenImpl $r11;
        org.apache.xmlbeans.impl.values.XmlNameImpl $r10;
        org.apache.xmlbeans.impl.values.XmlFloatImpl $r38;
        org.apache.xmlbeans.impl.values.XmlNonPositiveIntegerImpl $r20;
        org.apache.xmlbeans.impl.values.XmlNmTokenImpl $r2;
        org.apache.xmlbeans.impl.values.XmlNegativeIntegerImpl $r19;
        org.apache.xmlbeans.impl.values.XmlByteImpl $r21;
        org.apache.xmlbeans.impl.values.XmlIntegerImpl $r25;
        org.apache.xmlbeans.impl.values.XmlAnyTypeImpl $r46, $r47;
        org.apache.xmlbeans.impl.values.XmlStringImpl $r35;
        org.apache.xmlbeans.impl.values.XmlHexBinaryImpl $r42;
        org.apache.xmlbeans.impl.values.XmlIdRefsImpl $r5;
        org.apache.xmlbeans.impl.values.XmlUnsignedByteImpl $r13;
        org.apache.xmlbeans.impl.values.XmlGMonthDayImpl $r28;
        org.apache.xmlbeans.impl.values.XmlLongImpl $r24;
        org.apache.xmlbeans.impl.values.XmlQNameImpl $r40;
        org.apache.xmlbeans.impl.values.XmlBooleanImpl $r44;
        java.lang.StringBuffer $r50, $r51, $r52;
        int $i0, $i1;
        org.apache.xmlbeans.impl.values.XmlEntitiesImpl $r3;
        org.apache.xmlbeans.impl.values.XmlGDayImpl $r27;
        org.apache.xmlbeans.impl.values.XmlShortImpl $r22;
        org.apache.xmlbeans.impl.values.XmlDateTimeImpl $r33;
        java.lang.String $r53;
        org.apache.xmlbeans.impl.values.XmlIntImpl $r23;
        org.apache.xmlbeans.impl.values.XmlDateImpl $r31;
        org.apache.xmlbeans.impl.values.XmlPositiveIntegerImpl $r17;
        org.apache.xmlbeans.impl.values.XmlNotationImpl $r39;
        org.apache.xmlbeans.impl.values.XmlNonNegativeIntegerImpl $r18;
        org.apache.xmlbeans.impl.values.XmlNmTokensImpl $r1;
        org.apache.xmlbeans.impl.values.XmlGYearMonthImpl $r30;
        org.apache.xmlbeans.impl.values.XmlDecimalImpl $r36;
        org.apache.xmlbeans.impl.values.XmlTimeImpl $r32;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBuiltinTypeCode()>();

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label10;
            case 10: goto label11;
            case 11: goto label12;
            case 12: goto label13;
            case 13: goto label14;
            case 14: goto label15;
            case 15: goto label16;
            case 16: goto label17;
            case 17: goto label18;
            case 18: goto label19;
            case 19: goto label20;
            case 20: goto label21;
            case 21: goto label22;
            case 22: goto label23;
            case 23: goto label24;
            case 24: goto label25;
            case 25: goto label26;
            case 26: goto label27;
            case 27: goto label28;
            case 28: goto label29;
            case 29: goto label30;
            case 30: goto label31;
            case 31: goto label32;
            case 32: goto label33;
            case 33: goto label34;
            case 34: goto label35;
            case 35: goto label36;
            case 36: goto label37;
            case 37: goto label38;
            case 38: goto label39;
            case 39: goto label40;
            case 40: goto label41;
            case 41: goto label42;
            case 42: goto label43;
            case 43: goto label44;
            case 44: goto label45;
            case 45: goto label46;
            case 46: goto label47;
            default: goto label48;
        };

     label01:
        $r47 = new org.apache.xmlbeans.impl.values.XmlAnyTypeImpl;

        $r48 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

        specialinvoke $r47.<org.apache.xmlbeans.impl.values.XmlAnyTypeImpl: void <init>(org.apache.xmlbeans.SchemaType)>($r48);

        return $r47;

     label02:
        $r46 = new org.apache.xmlbeans.impl.values.XmlAnyTypeImpl;

        specialinvoke $r46.<org.apache.xmlbeans.impl.values.XmlAnyTypeImpl: void <init>()>();

        return $r46;

     label03:
        $r45 = new org.apache.xmlbeans.impl.values.XmlAnySimpleTypeImpl;

        specialinvoke $r45.<org.apache.xmlbeans.impl.values.XmlAnySimpleTypeImpl: void <init>()>();

        return $r45;

     label04:
        $r44 = new org.apache.xmlbeans.impl.values.XmlBooleanImpl;

        specialinvoke $r44.<org.apache.xmlbeans.impl.values.XmlBooleanImpl: void <init>()>();

        return $r44;

     label05:
        $r43 = new org.apache.xmlbeans.impl.values.XmlBase64BinaryImpl;

        specialinvoke $r43.<org.apache.xmlbeans.impl.values.XmlBase64BinaryImpl: void <init>()>();

        return $r43;

     label06:
        $r42 = new org.apache.xmlbeans.impl.values.XmlHexBinaryImpl;

        specialinvoke $r42.<org.apache.xmlbeans.impl.values.XmlHexBinaryImpl: void <init>()>();

        return $r42;

     label07:
        $r41 = new org.apache.xmlbeans.impl.values.XmlAnyUriImpl;

        specialinvoke $r41.<org.apache.xmlbeans.impl.values.XmlAnyUriImpl: void <init>()>();

        return $r41;

     label08:
        $r40 = new org.apache.xmlbeans.impl.values.XmlQNameImpl;

        specialinvoke $r40.<org.apache.xmlbeans.impl.values.XmlQNameImpl: void <init>()>();

        return $r40;

     label09:
        $r39 = new org.apache.xmlbeans.impl.values.XmlNotationImpl;

        specialinvoke $r39.<org.apache.xmlbeans.impl.values.XmlNotationImpl: void <init>()>();

        return $r39;

     label10:
        $r38 = new org.apache.xmlbeans.impl.values.XmlFloatImpl;

        specialinvoke $r38.<org.apache.xmlbeans.impl.values.XmlFloatImpl: void <init>()>();

        return $r38;

     label11:
        $r37 = new org.apache.xmlbeans.impl.values.XmlDoubleImpl;

        specialinvoke $r37.<org.apache.xmlbeans.impl.values.XmlDoubleImpl: void <init>()>();

        return $r37;

     label12:
        $r36 = new org.apache.xmlbeans.impl.values.XmlDecimalImpl;

        specialinvoke $r36.<org.apache.xmlbeans.impl.values.XmlDecimalImpl: void <init>()>();

        return $r36;

     label13:
        $r35 = new org.apache.xmlbeans.impl.values.XmlStringImpl;

        specialinvoke $r35.<org.apache.xmlbeans.impl.values.XmlStringImpl: void <init>()>();

        return $r35;

     label14:
        $r34 = new org.apache.xmlbeans.impl.values.XmlDurationImpl;

        specialinvoke $r34.<org.apache.xmlbeans.impl.values.XmlDurationImpl: void <init>()>();

        return $r34;

     label15:
        $r33 = new org.apache.xmlbeans.impl.values.XmlDateTimeImpl;

        specialinvoke $r33.<org.apache.xmlbeans.impl.values.XmlDateTimeImpl: void <init>()>();

        return $r33;

     label16:
        $r32 = new org.apache.xmlbeans.impl.values.XmlTimeImpl;

        specialinvoke $r32.<org.apache.xmlbeans.impl.values.XmlTimeImpl: void <init>()>();

        return $r32;

     label17:
        $r31 = new org.apache.xmlbeans.impl.values.XmlDateImpl;

        specialinvoke $r31.<org.apache.xmlbeans.impl.values.XmlDateImpl: void <init>()>();

        return $r31;

     label18:
        $r30 = new org.apache.xmlbeans.impl.values.XmlGYearMonthImpl;

        specialinvoke $r30.<org.apache.xmlbeans.impl.values.XmlGYearMonthImpl: void <init>()>();

        return $r30;

     label19:
        $r29 = new org.apache.xmlbeans.impl.values.XmlGYearImpl;

        specialinvoke $r29.<org.apache.xmlbeans.impl.values.XmlGYearImpl: void <init>()>();

        return $r29;

     label20:
        $r28 = new org.apache.xmlbeans.impl.values.XmlGMonthDayImpl;

        specialinvoke $r28.<org.apache.xmlbeans.impl.values.XmlGMonthDayImpl: void <init>()>();

        return $r28;

     label21:
        $r27 = new org.apache.xmlbeans.impl.values.XmlGDayImpl;

        specialinvoke $r27.<org.apache.xmlbeans.impl.values.XmlGDayImpl: void <init>()>();

        return $r27;

     label22:
        $r26 = new org.apache.xmlbeans.impl.values.XmlGMonthImpl;

        specialinvoke $r26.<org.apache.xmlbeans.impl.values.XmlGMonthImpl: void <init>()>();

        return $r26;

     label23:
        $r25 = new org.apache.xmlbeans.impl.values.XmlIntegerImpl;

        specialinvoke $r25.<org.apache.xmlbeans.impl.values.XmlIntegerImpl: void <init>()>();

        return $r25;

     label24:
        $r24 = new org.apache.xmlbeans.impl.values.XmlLongImpl;

        specialinvoke $r24.<org.apache.xmlbeans.impl.values.XmlLongImpl: void <init>()>();

        return $r24;

     label25:
        $r23 = new org.apache.xmlbeans.impl.values.XmlIntImpl;

        specialinvoke $r23.<org.apache.xmlbeans.impl.values.XmlIntImpl: void <init>()>();

        return $r23;

     label26:
        $r22 = new org.apache.xmlbeans.impl.values.XmlShortImpl;

        specialinvoke $r22.<org.apache.xmlbeans.impl.values.XmlShortImpl: void <init>()>();

        return $r22;

     label27:
        $r21 = new org.apache.xmlbeans.impl.values.XmlByteImpl;

        specialinvoke $r21.<org.apache.xmlbeans.impl.values.XmlByteImpl: void <init>()>();

        return $r21;

     label28:
        $r20 = new org.apache.xmlbeans.impl.values.XmlNonPositiveIntegerImpl;

        specialinvoke $r20.<org.apache.xmlbeans.impl.values.XmlNonPositiveIntegerImpl: void <init>()>();

        return $r20;

     label29:
        $r19 = new org.apache.xmlbeans.impl.values.XmlNegativeIntegerImpl;

        specialinvoke $r19.<org.apache.xmlbeans.impl.values.XmlNegativeIntegerImpl: void <init>()>();

        return $r19;

     label30:
        $r18 = new org.apache.xmlbeans.impl.values.XmlNonNegativeIntegerImpl;

        specialinvoke $r18.<org.apache.xmlbeans.impl.values.XmlNonNegativeIntegerImpl: void <init>()>();

        return $r18;

     label31:
        $r17 = new org.apache.xmlbeans.impl.values.XmlPositiveIntegerImpl;

        specialinvoke $r17.<org.apache.xmlbeans.impl.values.XmlPositiveIntegerImpl: void <init>()>();

        return $r17;

     label32:
        $r16 = new org.apache.xmlbeans.impl.values.XmlUnsignedLongImpl;

        specialinvoke $r16.<org.apache.xmlbeans.impl.values.XmlUnsignedLongImpl: void <init>()>();

        return $r16;

     label33:
        $r15 = new org.apache.xmlbeans.impl.values.XmlUnsignedIntImpl;

        specialinvoke $r15.<org.apache.xmlbeans.impl.values.XmlUnsignedIntImpl: void <init>()>();

        return $r15;

     label34:
        $r14 = new org.apache.xmlbeans.impl.values.XmlUnsignedShortImpl;

        specialinvoke $r14.<org.apache.xmlbeans.impl.values.XmlUnsignedShortImpl: void <init>()>();

        return $r14;

     label35:
        $r13 = new org.apache.xmlbeans.impl.values.XmlUnsignedByteImpl;

        specialinvoke $r13.<org.apache.xmlbeans.impl.values.XmlUnsignedByteImpl: void <init>()>();

        return $r13;

     label36:
        $r12 = new org.apache.xmlbeans.impl.values.XmlNormalizedStringImpl;

        specialinvoke $r12.<org.apache.xmlbeans.impl.values.XmlNormalizedStringImpl: void <init>()>();

        return $r12;

     label37:
        $r11 = new org.apache.xmlbeans.impl.values.XmlTokenImpl;

        specialinvoke $r11.<org.apache.xmlbeans.impl.values.XmlTokenImpl: void <init>()>();

        return $r11;

     label38:
        $r10 = new org.apache.xmlbeans.impl.values.XmlNameImpl;

        specialinvoke $r10.<org.apache.xmlbeans.impl.values.XmlNameImpl: void <init>()>();

        return $r10;

     label39:
        $r9 = new org.apache.xmlbeans.impl.values.XmlNCNameImpl;

        specialinvoke $r9.<org.apache.xmlbeans.impl.values.XmlNCNameImpl: void <init>()>();

        return $r9;

     label40:
        $r8 = new org.apache.xmlbeans.impl.values.XmlLanguageImpl;

        specialinvoke $r8.<org.apache.xmlbeans.impl.values.XmlLanguageImpl: void <init>()>();

        return $r8;

     label41:
        $r7 = new org.apache.xmlbeans.impl.values.XmlIdImpl;

        specialinvoke $r7.<org.apache.xmlbeans.impl.values.XmlIdImpl: void <init>()>();

        return $r7;

     label42:
        $r6 = new org.apache.xmlbeans.impl.values.XmlIdRefImpl;

        specialinvoke $r6.<org.apache.xmlbeans.impl.values.XmlIdRefImpl: void <init>()>();

        return $r6;

     label43:
        $r5 = new org.apache.xmlbeans.impl.values.XmlIdRefsImpl;

        specialinvoke $r5.<org.apache.xmlbeans.impl.values.XmlIdRefsImpl: void <init>()>();

        return $r5;

     label44:
        $r4 = new org.apache.xmlbeans.impl.values.XmlEntityImpl;

        specialinvoke $r4.<org.apache.xmlbeans.impl.values.XmlEntityImpl: void <init>()>();

        return $r4;

     label45:
        $r3 = new org.apache.xmlbeans.impl.values.XmlEntitiesImpl;

        specialinvoke $r3.<org.apache.xmlbeans.impl.values.XmlEntitiesImpl: void <init>()>();

        return $r3;

     label46:
        $r2 = new org.apache.xmlbeans.impl.values.XmlNmTokenImpl;

        specialinvoke $r2.<org.apache.xmlbeans.impl.values.XmlNmTokenImpl: void <init>()>();

        return $r2;

     label47:
        $r1 = new org.apache.xmlbeans.impl.values.XmlNmTokensImpl;

        specialinvoke $r1.<org.apache.xmlbeans.impl.values.XmlNmTokensImpl: void <init>()>();

        return $r1;

     label48:
        $r49 = new java.lang.IllegalStateException;

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized builtin type: ");

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBuiltinTypeCode()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r49.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r53);

        throw $r49;
    }

    private org.apache.xmlbeans.XmlObject createBuiltinSubclass(org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.impl.values.XmlAnyUriRestriction $r43;
        org.apache.xmlbeans.impl.values.XmlGMonthImpl $r27;
        org.apache.xmlbeans.impl.values.XmlStringRestriction $r36;
        org.apache.xmlbeans.impl.values.XmlIntegerRestriction $r26;
        org.apache.xmlbeans.impl.values.XmlUnsignedShortImpl $r15;
        org.apache.xmlbeans.SchemaType r0;
        org.apache.xmlbeans.impl.values.XmlListImpl $r47;
        org.apache.xmlbeans.impl.values.XmlNormalizedStringImpl $r13;
        org.apache.xmlbeans.impl.values.XmlDoubleRestriction $r39;
        org.apache.xmlbeans.impl.values.XmlTokenImpl $r12;
        org.apache.xmlbeans.impl.values.XmlNameImpl $r11;
        org.apache.xmlbeans.impl.values.XmlUnionImpl $r48;
        org.apache.xmlbeans.impl.values.XmlByteImpl $r22;
        org.apache.xmlbeans.impl.values.XmlIdRefsImpl $r6;
        org.apache.xmlbeans.impl.values.XmlGMonthDayImpl $r29;
        java.lang.StringBuffer $r55, $r56, $r57;
        org.apache.xmlbeans.impl.values.XmlEntitiesImpl $r4;
        org.apache.xmlbeans.impl.values.XmlGDayImpl $r28;
        org.apache.xmlbeans.impl.values.XmlShortImpl $r23;
        org.apache.xmlbeans.impl.values.XmlDateTimeImpl $r34;
        java.lang.String $r58;
        org.apache.xmlbeans.impl.values.XmlComplexContentImpl $r50;
        org.apache.xmlbeans.impl.values.XmlFloatRestriction $r40;
        org.apache.xmlbeans.impl.values.XmlDateImpl $r32;
        org.apache.xmlbeans.impl.values.XmlPositiveIntegerImpl $r18;
        org.apache.xmlbeans.impl.values.XmlNonNegativeIntegerImpl $r19;
        org.apache.xmlbeans.impl.values.XmlNmTokensImpl $r2;
        org.apache.xmlbeans.impl.values.XmlGYearMonthImpl $r31;
        org.apache.xmlbeans.impl.values.XmlTimeImpl $r33;
        org.apache.xmlbeans.impl.values.XmlQNameRestriction $r42;
        org.apache.xmlbeans.impl.values.XmlNotationRestriction $r41;
        java.lang.IllegalStateException $r51, $r54;
        org.apache.xmlbeans.impl.values.XmlUnsignedIntImpl $r16;
        org.apache.xmlbeans.impl.values.XmlGYearImpl $r30;
        org.apache.xmlbeans.impl.values.XmlLanguageImpl $r9;
        org.apache.xmlbeans.impl.values.XmlUnsignedLongImpl $r17;
        org.apache.xmlbeans.impl.values.XmlEntityImpl $r5;
        org.apache.xmlbeans.impl.values.XmlStringEnumeration $r37;
        org.apache.xmlbeans.impl.values.XmlIdRefImpl $r7;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r1, $r53;
        org.apache.xmlbeans.impl.values.XmlDurationImpl $r35;
        org.apache.xmlbeans.impl.values.XmlIdImpl $r8;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50;
        org.apache.xmlbeans.impl.values.XmlHexBinaryRestriction $r44;
        org.apache.xmlbeans.impl.values.XmlNCNameImpl $r10;
        org.apache.xmlbeans.impl.values.XmlNonPositiveIntegerImpl $r21;
        org.apache.xmlbeans.impl.values.XmlNmTokenImpl $r3;
        org.apache.xmlbeans.impl.values.XmlNegativeIntegerImpl $r20;
        org.apache.xmlbeans.impl.values.XmlAnyTypeImpl $r52;
        org.apache.xmlbeans.impl.values.XmlAnySimpleTypeRestriction $r49;
        org.apache.xmlbeans.impl.values.XmlBase64BinaryRestriction $r45;
        org.apache.xmlbeans.impl.values.XmlUnsignedByteImpl $r14;
        int $i0, $i1, $i2;
        org.apache.xmlbeans.impl.values.XmlDecimalRestriction $r38;
        org.apache.xmlbeans.impl.values.XmlIntRestriction $r24;
        org.apache.xmlbeans.impl.values.XmlLongRestriction $r25;
        org.apache.xmlbeans.impl.values.XmlBooleanRestriction $r46;

        r1 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType;

        $z0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z0 != 0 goto label01;

        $z50 = 1;

        $z49 = 1;

        $z48 = 1;

        $z47 = 1;

        $z46 = 1;

        $z45 = 1;

        $z44 = 1;

        $z43 = 1;

        $z42 = 1;

        $z41 = 1;

        $z40 = 1;

        $z39 = 1;

        $z38 = 1;

        $z37 = 1;

        $z36 = 1;

        $z35 = 1;

        $z34 = 1;

        $z33 = 1;

        $z32 = 1;

        $z31 = 1;

        $z30 = 1;

        $z29 = 1;

        $z28 = 1;

        $z27 = 1;

        $z26 = 1;

        $z25 = 1;

        $z24 = 1;

        $z23 = 1;

        $z22 = 1;

        $z21 = 1;

        $z20 = 1;

        $z19 = 1;

        $z18 = 1;

        $z17 = 1;

        $z16 = 1;

        $z15 = 1;

        $z14 = 1;

        $z13 = 1;

        $z12 = 1;

        $z11 = 1;

        $z10 = 1;

        $z9 = 1;

        $z8 = 1;

        $z7 = 1;

        $z6 = 1;

        $z5 = 1;

        $z4 = 1;

        $z3 = 1;

        goto label02;

     label01:
        $z50 = 0;

        $z49 = 0;

        $z48 = 0;

        $z47 = 0;

        $z46 = 0;

        $z45 = 0;

        $z44 = 0;

        $z43 = 0;

        $z42 = 0;

        $z41 = 0;

        $z40 = 0;

        $z39 = 0;

        $z38 = 0;

        $z37 = 0;

        $z36 = 0;

        $z35 = 0;

        $z34 = 0;

        $z33 = 0;

        $z32 = 0;

        $z31 = 0;

        $z30 = 0;

        $z29 = 0;

        $z28 = 0;

        $z27 = 0;

        $z26 = 0;

        $z25 = 0;

        $z24 = 0;

        $z23 = 0;

        $z22 = 0;

        $z21 = 0;

        $z20 = 0;

        $z19 = 0;

        $z18 = 0;

        $z17 = 0;

        $z16 = 0;

        $z15 = 0;

        $z14 = 0;

        $z13 = 0;

        $z12 = 0;

        $z11 = 0;

        $z10 = 0;

        $z9 = 0;

        $z8 = 0;

        $z7 = 0;

        $z6 = 0;

        $z5 = 0;

        $z4 = 0;

        $z3 = 0;

     label02:
        $i0 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBuiltinTypeCode()>();

        tableswitch($i0)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label04;
            case 3: goto label10;
            case 4: goto label11;
            case 5: goto label12;
            case 6: goto label13;
            case 7: goto label14;
            case 8: goto label15;
            case 9: goto label16;
            case 10: goto label17;
            case 11: goto label18;
            case 12: goto label19;
            case 13: goto label21;
            case 14: goto label22;
            case 15: goto label23;
            case 16: goto label24;
            case 17: goto label25;
            case 18: goto label26;
            case 19: goto label27;
            case 20: goto label28;
            case 21: goto label29;
            case 22: goto label30;
            case 23: goto label31;
            case 24: goto label32;
            case 25: goto label33;
            case 26: goto label34;
            case 27: goto label35;
            case 28: goto label36;
            case 29: goto label37;
            case 30: goto label38;
            case 31: goto label39;
            case 32: goto label40;
            case 33: goto label41;
            case 34: goto label42;
            case 35: goto label43;
            case 36: goto label44;
            case 37: goto label45;
            case 38: goto label46;
            case 39: goto label47;
            case 40: goto label48;
            case 41: goto label49;
            case 42: goto label50;
            case 43: goto label51;
            case 44: goto label52;
            case 45: goto label53;
            case 46: goto label54;
            default: goto label55;
        };

     label03:
        $r52 = new org.apache.xmlbeans.impl.values.XmlAnyTypeImpl;

        $r53 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NO_TYPE>;

        specialinvoke $r52.<org.apache.xmlbeans.impl.values.XmlAnyTypeImpl: void <init>(org.apache.xmlbeans.SchemaType)>($r53);

        return $r52;

     label04:
        $i1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        tableswitch($i1)
        {
            case 0: goto label05;
            case 1: goto label06;
            case 2: goto label08;
            case 3: goto label07;
            default: goto label09;
        };

     label05:
        $r50 = new org.apache.xmlbeans.impl.values.XmlComplexContentImpl;

        specialinvoke $r50.<org.apache.xmlbeans.impl.values.XmlComplexContentImpl: void <init>(org.apache.xmlbeans.SchemaType)>(r0);

        return $r50;

     label06:
        $r49 = new org.apache.xmlbeans.impl.values.XmlAnySimpleTypeRestriction;

        specialinvoke $r49.<org.apache.xmlbeans.impl.values.XmlAnySimpleTypeRestriction: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z38);

        return $r49;

     label07:
        $r47 = new org.apache.xmlbeans.impl.values.XmlListImpl;

        specialinvoke $r47.<org.apache.xmlbeans.impl.values.XmlListImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z33);

        return $r47;

     label08:
        $r48 = new org.apache.xmlbeans.impl.values.XmlUnionImpl;

        specialinvoke $r48.<org.apache.xmlbeans.impl.values.XmlUnionImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z40);

        return $r48;

     label09:
        $r51 = new java.lang.IllegalStateException;

        specialinvoke $r51.<java.lang.IllegalStateException: void <init>()>();

        throw $r51;

     label10:
        $r46 = new org.apache.xmlbeans.impl.values.XmlBooleanRestriction;

        specialinvoke $r46.<org.apache.xmlbeans.impl.values.XmlBooleanRestriction: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z31);

        return $r46;

     label11:
        $r45 = new org.apache.xmlbeans.impl.values.XmlBase64BinaryRestriction;

        specialinvoke $r45.<org.apache.xmlbeans.impl.values.XmlBase64BinaryRestriction: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z47);

        return $r45;

     label12:
        $r44 = new org.apache.xmlbeans.impl.values.XmlHexBinaryRestriction;

        specialinvoke $r44.<org.apache.xmlbeans.impl.values.XmlHexBinaryRestriction: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z45);

        return $r44;

     label13:
        $r43 = new org.apache.xmlbeans.impl.values.XmlAnyUriRestriction;

        specialinvoke $r43.<org.apache.xmlbeans.impl.values.XmlAnyUriRestriction: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z14);

        return $r43;

     label14:
        $r42 = new org.apache.xmlbeans.impl.values.XmlQNameRestriction;

        specialinvoke $r42.<org.apache.xmlbeans.impl.values.XmlQNameRestriction: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z13);

        return $r42;

     label15:
        $r41 = new org.apache.xmlbeans.impl.values.XmlNotationRestriction;

        specialinvoke $r41.<org.apache.xmlbeans.impl.values.XmlNotationRestriction: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z41);

        return $r41;

     label16:
        $r40 = new org.apache.xmlbeans.impl.values.XmlFloatRestriction;

        specialinvoke $r40.<org.apache.xmlbeans.impl.values.XmlFloatRestriction: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z26);

        return $r40;

     label17:
        $r39 = new org.apache.xmlbeans.impl.values.XmlDoubleRestriction;

        specialinvoke $r39.<org.apache.xmlbeans.impl.values.XmlDoubleRestriction: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z19);

        return $r39;

     label18:
        $r38 = new org.apache.xmlbeans.impl.values.XmlDecimalRestriction;

        specialinvoke $r38.<org.apache.xmlbeans.impl.values.XmlDecimalRestriction: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z44);

        return $r38;

     label19:
        $z1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: boolean hasStringEnumValues()>();

        if $z1 == 0 goto label20;

        $r37 = new org.apache.xmlbeans.impl.values.XmlStringEnumeration;

        specialinvoke $r37.<org.apache.xmlbeans.impl.values.XmlStringEnumeration: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z7);

        return $r37;

     label20:
        $r36 = new org.apache.xmlbeans.impl.values.XmlStringRestriction;

        specialinvoke $r36.<org.apache.xmlbeans.impl.values.XmlStringRestriction: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z43);

        return $r36;

     label21:
        $r35 = new org.apache.xmlbeans.impl.values.XmlDurationImpl;

        specialinvoke $r35.<org.apache.xmlbeans.impl.values.XmlDurationImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z3);

        return $r35;

     label22:
        $r34 = new org.apache.xmlbeans.impl.values.XmlDateTimeImpl;

        specialinvoke $r34.<org.apache.xmlbeans.impl.values.XmlDateTimeImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z20);

        return $r34;

     label23:
        $r33 = new org.apache.xmlbeans.impl.values.XmlTimeImpl;

        specialinvoke $r33.<org.apache.xmlbeans.impl.values.XmlTimeImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z5);

        return $r33;

     label24:
        $r32 = new org.apache.xmlbeans.impl.values.XmlDateImpl;

        specialinvoke $r32.<org.apache.xmlbeans.impl.values.XmlDateImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z27);

        return $r32;

     label25:
        $r31 = new org.apache.xmlbeans.impl.values.XmlGYearMonthImpl;

        specialinvoke $r31.<org.apache.xmlbeans.impl.values.XmlGYearMonthImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z4);

        return $r31;

     label26:
        $r30 = new org.apache.xmlbeans.impl.values.XmlGYearImpl;

        specialinvoke $r30.<org.apache.xmlbeans.impl.values.XmlGYearImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z29);

        return $r30;

     label27:
        $r29 = new org.apache.xmlbeans.impl.values.XmlGMonthDayImpl;

        specialinvoke $r29.<org.apache.xmlbeans.impl.values.XmlGMonthDayImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z48);

        return $r29;

     label28:
        $r28 = new org.apache.xmlbeans.impl.values.XmlGDayImpl;

        specialinvoke $r28.<org.apache.xmlbeans.impl.values.XmlGDayImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z12);

        return $r28;

     label29:
        $r27 = new org.apache.xmlbeans.impl.values.XmlGMonthImpl;

        specialinvoke $r27.<org.apache.xmlbeans.impl.values.XmlGMonthImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z42);

        return $r27;

     label30:
        $r26 = new org.apache.xmlbeans.impl.values.XmlIntegerRestriction;

        specialinvoke $r26.<org.apache.xmlbeans.impl.values.XmlIntegerRestriction: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z35);

        return $r26;

     label31:
        $r25 = new org.apache.xmlbeans.impl.values.XmlLongRestriction;

        specialinvoke $r25.<org.apache.xmlbeans.impl.values.XmlLongRestriction: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z36);

        return $r25;

     label32:
        $r24 = new org.apache.xmlbeans.impl.values.XmlIntRestriction;

        specialinvoke $r24.<org.apache.xmlbeans.impl.values.XmlIntRestriction: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z9);

        return $r24;

     label33:
        $r23 = new org.apache.xmlbeans.impl.values.XmlShortImpl;

        specialinvoke $r23.<org.apache.xmlbeans.impl.values.XmlShortImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z39);

        return $r23;

     label34:
        $r22 = new org.apache.xmlbeans.impl.values.XmlByteImpl;

        specialinvoke $r22.<org.apache.xmlbeans.impl.values.XmlByteImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z24);

        return $r22;

     label35:
        $r21 = new org.apache.xmlbeans.impl.values.XmlNonPositiveIntegerImpl;

        specialinvoke $r21.<org.apache.xmlbeans.impl.values.XmlNonPositiveIntegerImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z34);

        return $r21;

     label36:
        $r20 = new org.apache.xmlbeans.impl.values.XmlNegativeIntegerImpl;

        specialinvoke $r20.<org.apache.xmlbeans.impl.values.XmlNegativeIntegerImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z21);

        return $r20;

     label37:
        $r19 = new org.apache.xmlbeans.impl.values.XmlNonNegativeIntegerImpl;

        specialinvoke $r19.<org.apache.xmlbeans.impl.values.XmlNonNegativeIntegerImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z25);

        return $r19;

     label38:
        $r18 = new org.apache.xmlbeans.impl.values.XmlPositiveIntegerImpl;

        specialinvoke $r18.<org.apache.xmlbeans.impl.values.XmlPositiveIntegerImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z49);

        return $r18;

     label39:
        $r17 = new org.apache.xmlbeans.impl.values.XmlUnsignedLongImpl;

        specialinvoke $r17.<org.apache.xmlbeans.impl.values.XmlUnsignedLongImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z30);

        return $r17;

     label40:
        $r16 = new org.apache.xmlbeans.impl.values.XmlUnsignedIntImpl;

        specialinvoke $r16.<org.apache.xmlbeans.impl.values.XmlUnsignedIntImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z18);

        return $r16;

     label41:
        $r15 = new org.apache.xmlbeans.impl.values.XmlUnsignedShortImpl;

        specialinvoke $r15.<org.apache.xmlbeans.impl.values.XmlUnsignedShortImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z22);

        return $r15;

     label42:
        $r14 = new org.apache.xmlbeans.impl.values.XmlUnsignedByteImpl;

        specialinvoke $r14.<org.apache.xmlbeans.impl.values.XmlUnsignedByteImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z16);

        return $r14;

     label43:
        $r13 = new org.apache.xmlbeans.impl.values.XmlNormalizedStringImpl;

        specialinvoke $r13.<org.apache.xmlbeans.impl.values.XmlNormalizedStringImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z28);

        return $r13;

     label44:
        $r12 = new org.apache.xmlbeans.impl.values.XmlTokenImpl;

        specialinvoke $r12.<org.apache.xmlbeans.impl.values.XmlTokenImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z50);

        return $r12;

     label45:
        $r11 = new org.apache.xmlbeans.impl.values.XmlNameImpl;

        specialinvoke $r11.<org.apache.xmlbeans.impl.values.XmlNameImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z37);

        return $r11;

     label46:
        $r10 = new org.apache.xmlbeans.impl.values.XmlNCNameImpl;

        specialinvoke $r10.<org.apache.xmlbeans.impl.values.XmlNCNameImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z23);

        return $r10;

     label47:
        $r9 = new org.apache.xmlbeans.impl.values.XmlLanguageImpl;

        specialinvoke $r9.<org.apache.xmlbeans.impl.values.XmlLanguageImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z6);

        return $r9;

     label48:
        $r8 = new org.apache.xmlbeans.impl.values.XmlIdImpl;

        specialinvoke $r8.<org.apache.xmlbeans.impl.values.XmlIdImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z10);

        return $r8;

     label49:
        $r7 = new org.apache.xmlbeans.impl.values.XmlIdRefImpl;

        specialinvoke $r7.<org.apache.xmlbeans.impl.values.XmlIdRefImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z8);

        return $r7;

     label50:
        $r6 = new org.apache.xmlbeans.impl.values.XmlIdRefsImpl;

        specialinvoke $r6.<org.apache.xmlbeans.impl.values.XmlIdRefsImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z46);

        return $r6;

     label51:
        $r5 = new org.apache.xmlbeans.impl.values.XmlEntityImpl;

        specialinvoke $r5.<org.apache.xmlbeans.impl.values.XmlEntityImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z11);

        return $r5;

     label52:
        $r4 = new org.apache.xmlbeans.impl.values.XmlEntitiesImpl;

        specialinvoke $r4.<org.apache.xmlbeans.impl.values.XmlEntitiesImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z32);

        return $r4;

     label53:
        $r3 = new org.apache.xmlbeans.impl.values.XmlNmTokenImpl;

        specialinvoke $r3.<org.apache.xmlbeans.impl.values.XmlNmTokenImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z15);

        return $r3;

     label54:
        $r2 = new org.apache.xmlbeans.impl.values.XmlNmTokensImpl;

        specialinvoke $r2.<org.apache.xmlbeans.impl.values.XmlNmTokensImpl: void <init>(org.apache.xmlbeans.SchemaType,boolean)>(r0, $z17);

        return $r2;

     label55:
        $r54 = new java.lang.IllegalStateException;

        $r55 = new java.lang.StringBuffer;

        specialinvoke $r55.<java.lang.StringBuffer: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized builtin type: ");

        $i2 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBuiltinTypeCode()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r54.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r58);

        throw $r54;
    }

    public org.apache.xmlbeans.SchemaType getCommonBaseType(org.apache.xmlbeans.SchemaType)
    {
        java.lang.AssertionError $r6;
        int $i0, $i1, $i2, $i3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, $r1, $r3, r9, r10;
        org.apache.xmlbeans.SchemaType r2, $r4, $r5, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r2 := @parameter0: org.apache.xmlbeans.SchemaType;

        $r1 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_TYPE>;

        if r0 == $r1 goto label01;

        if r2 == null goto label01;

        $z0 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: boolean isNoType()>();

        if $z0 == 0 goto label02;

     label01:
        return r0;

     label02:
        $r3 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_TYPE>;

        if r2 == $r3 goto label03;

        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isNoType()>();

        if $z1 == 0 goto label04;

     label03:
        return r2;

     label04:
        r9 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r2;

     label05:
        $i0 = virtualinvoke r9.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        if $i0 <= $i1 goto label06;

        $r8 = virtualinvoke r9.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseType()>();

        r9 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r8;

        goto label05;

     label06:
        r10 = r0;

     label07:
        $i2 = virtualinvoke r10.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i3 = virtualinvoke r9.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        if $i2 <= $i3 goto label08;

        $r7 = virtualinvoke r10.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseType()>();

        r10 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r7;

        goto label07;

     label08:
        $z3 = virtualinvoke r9.<java.lang.Object: boolean equals(java.lang.Object)>(r10);

        if $z3 == 0 goto label09;

        goto label11;

     label09:
        $r4 = virtualinvoke r9.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseType()>();

        r9 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r4;

        $r5 = virtualinvoke r10.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseType()>();

        r10 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r5;

        $z2 = <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean $assertionsDisabled>;

        if $z2 != 0 goto label08;

        if r9 == null goto label10;

        if r10 != null goto label08;

     label10:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label11:
        return r9;
    }

    public boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.SchemaType[] $r2;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i8;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, $r1;
        org.apache.xmlbeans.SchemaType $r3, r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r4 := @parameter0: org.apache.xmlbeans.SchemaType;

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<org.apache.xmlbeans.SchemaType: boolean isNoType()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isNoType()>();

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getSimpleVariety()>();

        if $i0 != 2 goto label6;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType[] getUnionMemberTypes()>();

        i5 = 0;

     label4:
        $i3 = lengthof $r2;

        if i5 >= $i3 goto label6;

        $r3 = $r2[i5];

        $z3 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>(r4);

        if $z3 == 0 goto label5;

        return 1;

     label5:
        i5 = i5 + 1;

        goto label4;

     label6:
        $r1 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r4;

        $i1 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i4 = $i1 - $i2;

        i6 = $i4;

        if $i4 >= 0 goto label7;

        return 0;

     label7:
        if i6 <= 0 goto label8;

        r4 = interfaceinvoke r4.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        $i8 = (int) -1;

        i6 = i6 + $i8;

        goto label7;

     label8:
        $z2 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        return $z2;
    }

    public java.lang.String toString()
    {
        org.apache.xmlbeans.SchemaType $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r53, $r57;
        javax.xml.namespace.QName $r1, $r14, $r21, $r28, $r34, $r40, $r48;
        org.apache.xmlbeans.SchemaField $r2, $r13, $r16, $r20, $r25, $r47;
        java.lang.StringBuffer $r10, $r11, $r12, $r17, $r18, $r19, $r23, $r26, $r27, $r30, $r32, $r33, $r36, $r38, $r39, $r42, $r44, $r46, $r50, $r54, $r55, $r56, $r59;
        java.lang.String $r15, $r22, $r24, $r29, $r31, $r35, $r37, $r41, $r43, $r45, $r49, $r51, r52, $r58, $r60;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        if $r1 == null goto label01;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("T=");

        $r40 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r41 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r40);

        $r42 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r43;

     label01:
        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isDocumentType()>();

        if $z0 == 0 goto label02;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("D=");

        $r34 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getDocumentElementName()>();

        $r35 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r34);

        $r36 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r37;

     label02:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isAttributeType()>();

        if $z1 == 0 goto label03;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("R=");

        $r28 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getAttributeTypeAttributeName()>();

        $r29 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r28);

        $r30 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r31;

     label03:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField getContainerField()>();

        if $r2 == null goto label08;

        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField getContainerField()>();

        $r14 = interfaceinvoke $r13.<org.apache.xmlbeans.SchemaField: javax.xml.namespace.QName getName()>();

        $r15 = virtualinvoke $r14.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $i3 = virtualinvoke $r15.<java.lang.String: int length()>();

        if $i3 <= 0 goto label05;

        $r25 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField getContainerField()>();

        $z4 = interfaceinvoke $r25.<org.apache.xmlbeans.SchemaField: boolean isAttribute()>();

        if $z4 == 0 goto label04;

        $r45 = "Q=";

        goto label07;

     label04:
        $r45 = "E=";

        goto label07;

     label05:
        $r16 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField getContainerField()>();

        $z3 = interfaceinvoke $r16.<org.apache.xmlbeans.SchemaField: boolean isAttribute()>();

        if $z3 == 0 goto label06;

        $r45 = "A=";

        goto label07;

     label06:
        $r45 = "U=";

     label07:
        $r46 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r45);

        $r47 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField getContainerField()>();

        $r48 = interfaceinvoke $r47.<org.apache.xmlbeans.SchemaField: javax.xml.namespace.QName getName()>();

        $r49 = virtualinvoke $r48.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r50 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.String toString()>();

        r52 = $r51;

        $r53 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        if $r53 != null goto label15;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@");

        $r20 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField getContainerField()>();

        $r21 = interfaceinvoke $r20.<org.apache.xmlbeans.SchemaField: javax.xml.namespace.QName getName()>();

        $r22 = virtualinvoke $r21.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r23 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r24;

     label08:
        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isNoType()>();

        if $z2 == 0 goto label09;

        return "N=";

     label09:
        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        if $r3 != null goto label10;

        return "noouter";

     label10:
        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        if $r5 != r0 goto label11;

        r52 = "B=";

        goto label15;

     label11:
        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        $r7 = interfaceinvoke $r6.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getContentBasedOnType()>();

        if $r7 != r0 goto label12;

        r52 = "S=";

        goto label15;

     label12:
        $r8 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        $i0 = interfaceinvoke $r8.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i0 != 3 goto label13;

        r52 = "I=";

        goto label15;

     label13:
        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        $i1 = interfaceinvoke $r9.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i1 != 2 goto label14;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("M=");

        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getAnonymousUnionMemberOrdinal()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        r52 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label15;

     label14:
        r52 = "strange=";

     label15:
        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r52);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("|");

        $r57 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        $r58 = virtualinvoke $r57.<java.lang.Object: java.lang.String toString()>();

        $r59 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r60;
    }

    public void setParseContext(org.apache.xmlbeans.XmlObject, java.lang.String, boolean, java.lang.String, java.lang.String, boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.XmlObject r1;
        java.lang.String r2, r3, r4;
        boolean z0, z1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r1 := @parameter0: org.apache.xmlbeans.XmlObject;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        z1 := @parameter5: boolean;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject _parseObject> = r1;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _parseTNS> = r2;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _chameleon> = z0;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _elemFormDefault> = r3;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _attFormDefault> = r4;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _redefinition> = z1;

        return;
    }

    public org.apache.xmlbeans.XmlObject getParseObject()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.XmlObject $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject _parseObject>;

        return $r1;
    }

    public java.lang.String getTargetNamespace()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _parseTNS>;

        return $r1;
    }

    public boolean isChameleon()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _chameleon>;

        return $z0;
    }

    public java.lang.String getElemFormDefault()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _elemFormDefault>;

        return $r1;
    }

    public java.lang.String getAttFormDefault()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _attFormDefault>;

        return $r1;
    }

    public java.lang.String getChameleonNamespace()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _chameleon>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String _parseTNS>;

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public boolean isRedefinition()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean _redefinition>;

        return $z0;
    }

    public org.apache.xmlbeans.SchemaType$Ref getRef()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType$Ref $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref _selfref>;

        return $r1;
    }

    public org.apache.xmlbeans.SchemaComponent$Ref getComponentRef()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType$Ref $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        return $r1;
    }

    public org.apache.xmlbeans.QNameSet qnameSetForWildcardElements()
    {
        org.apache.xmlbeans.SchemaProperty[] $r4;
        org.apache.xmlbeans.SchemaParticle $r1;
        org.apache.xmlbeans.QNameSet $r5;
        org.apache.xmlbeans.SchemaProperty r6;
        int $i0, i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.QNameSetBuilder $r2, $r3;
        javax.xml.namespace.QName $r7;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        $r2 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r2.<org.apache.xmlbeans.QNameSetBuilder: void <init>()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void computeWildcardSet(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.QNameSetBuilder)>($r1, $r2);

        $r3 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: void <init>(org.apache.xmlbeans.QNameSetSpecification)>($r2);

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaProperty[] getElementProperties()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r4;

        if i1 >= $i0 goto label2;

        r6 = $r4[i1];

        $r7 = interfaceinvoke r6.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: void remove(javax.xml.namespace.QName)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: org.apache.xmlbeans.QNameSet toQNameSet()>();

        return $r5;
    }

    private static void computeWildcardSet(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.QNameSetBuilder)
    {
        org.apache.xmlbeans.SchemaParticle r0, $r1;
        org.apache.xmlbeans.QNameSet $r3;
        int $i0, $i1, i2;
        org.apache.xmlbeans.QNameSetBuilder r2;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r2 := @parameter1: org.apache.xmlbeans.QNameSetBuilder;

        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i0 != 5 goto label1;

        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        virtualinvoke r2.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r3);

        return;

     label1:
        i2 = 0;

     label2:
        $i1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int countOfParticleChild()>();

        if i2 >= $i1 goto label3;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle getParticleChild(int)>(i2);

        staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void computeWildcardSet(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.QNameSetBuilder)>($r1, r2);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    public org.apache.xmlbeans.QNameSet qnameSetForWildcardAttributes()
    {
        org.apache.xmlbeans.SchemaProperty[] $r4;
        org.apache.xmlbeans.QNameSet $r2, $r5, $r8;
        org.apache.xmlbeans.SchemaProperty r6;
        int $i0, i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaAttributeModel $r1;
        org.apache.xmlbeans.QNameSetBuilder $r3;
        javax.xml.namespace.QName $r7;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        if $r2 != null goto label1;

        $r8 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet EMPTY>;

        return $r8;

     label1:
        $r3 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: void <init>(org.apache.xmlbeans.QNameSetSpecification)>($r2);

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaProperty[] getAttributeProperties()>();

        i1 = 0;

     label2:
        $i0 = lengthof $r4;

        if i1 >= $i0 goto label3;

        r6 = $r4[i1];

        $r7 = interfaceinvoke r6.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: void remove(javax.xml.namespace.QName)>($r7);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r5 = virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: org.apache.xmlbeans.QNameSet toQNameSet()>();

        return $r5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.xmlbeans.SchemaProperty[] $r1;
        java.lang.Class $r0, $r2;
        boolean $z0, $z1;

        <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int JAVAIZED> = 6;

        <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int JAVAIZING> = 5;

        <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int RESOLVED> = 4;

        <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int RESOLVING> = 3;

        <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int RESOLVED_SGS> = 2;

        <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int RESOLVING_SGS> = 1;

        <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int UNRESOLVED> = 0;

        $r0 = <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class class$org$apache$xmlbeans$impl$schema$SchemaTypeImpl>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.schema.SchemaTypeImpl");

        <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class class$org$apache$xmlbeans$impl$schema$SchemaTypeImpl> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.Class class$org$apache$xmlbeans$impl$schema$SchemaTypeImpl>;

     label2:
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (org.apache.xmlbeans.SchemaProperty)[0];

        <org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaProperty[] NO_PROPERTIES> = $r1;

        return;
    }
}
