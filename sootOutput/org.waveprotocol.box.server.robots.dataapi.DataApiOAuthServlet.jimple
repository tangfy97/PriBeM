public class org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet extends javax.servlet.http.HttpServlet
{
    public static final java.lang.String DATA_API_OAUTH_PATH;
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private static final java.lang.String ANONYMOUS_TOKEN;
    private static final java.lang.String ANONYMOUS_TOKEN_SECRET;
    private static final java.lang.String HTML_CONTENT_TYPE;
    private static final int TOKEN_LENGTH;
    private static final int XSRF_TOKEN_TIMEOUT_HOURS;
    private final java.lang.String requestTokenPath;
    private final java.lang.String authorizeTokenPath;
    private final java.lang.String accessTokenPath;
    private final net.oauth.OAuthServiceProvider serviceProvider;
    private final net.oauth.OAuthValidator validator;
    private final org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer tokenContainer;
    private final org.waveprotocol.box.server.authentication.SessionManager sessionManager;
    private final org.waveprotocol.wave.model.id.TokenGenerator tokenGenerator;
    private final java.util.concurrent.ConcurrentMap xsrfTokens;

    public void <init>(java.lang.String, java.lang.String, java.lang.String, net.oauth.OAuthServiceProvider, net.oauth.OAuthValidator, org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer, org.waveprotocol.box.server.authentication.SessionManager, org.waveprotocol.wave.model.id.TokenGenerator)
    {
        net.oauth.OAuthServiceProvider r4;
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer r6;
        org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet r0;
        net.oauth.OAuthValidator r5;
        org.waveprotocol.wave.model.id.TokenGenerator r8;
        java.util.concurrent.ConcurrentMap $r12;
        org.waveprotocol.box.server.authentication.SessionManager r7;
        java.util.concurrent.TimeUnit $r10;
        java.lang.String r1, r2, r3;
        com.google.common.collect.MapMaker $r9, $r11;

        r0 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: net.oauth.OAuthServiceProvider;

        r5 := @parameter4: net.oauth.OAuthValidator;

        r6 := @parameter5: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer;

        r7 := @parameter6: org.waveprotocol.box.server.authentication.SessionManager;

        r8 := @parameter7: org.waveprotocol.wave.model.id.TokenGenerator;

        specialinvoke r0.<javax.servlet.http.HttpServlet: void <init>()>();

        r0.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.lang.String requestTokenPath> = r1;

        r0.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.lang.String authorizeTokenPath> = r2;

        r0.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.lang.String accessTokenPath> = r3;

        r0.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: net.oauth.OAuthServiceProvider serviceProvider> = r4;

        r0.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: net.oauth.OAuthValidator validator> = r5;

        r0.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer tokenContainer> = r6;

        r0.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.box.server.authentication.SessionManager sessionManager> = r7;

        r0.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.model.id.TokenGenerator tokenGenerator> = r8;

        $r9 = new com.google.common.collect.MapMaker;

        specialinvoke $r9.<com.google.common.collect.MapMaker: void <init>()>();

        $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;

        $r11 = virtualinvoke $r9.<com.google.common.collect.MapMaker: com.google.common.collect.MapMaker expireAfterWrite(long,java.util.concurrent.TimeUnit)>(12L, $r10);

        $r12 = virtualinvoke $r11.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeMap()>();

        r0.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.util.concurrent.ConcurrentMap xsrfTokens> = $r12;

        return;
    }

    protected void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        javax.servlet.http.HttpServletResponse r2;
        javax.servlet.http.HttpServletRequest r1;
        org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet r0;

        r0 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        specialinvoke r0.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: void routeRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2);

        return;
    }

    protected void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        javax.servlet.http.HttpServletResponse r2;
        javax.servlet.http.HttpServletRequest r1;
        org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet r0;

        r0 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        specialinvoke r0.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: void routeRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2);

        return;
    }

    private void routeRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet r2;
        javax.servlet.http.HttpServletResponse r6;
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String $r1, $r3, $r4, $r5;
        boolean $z0, $z1, $z2;

        r2 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r6 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>();

        $r3 = r2.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.lang.String requestTokenPath>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        specialinvoke r2.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: void doRequestToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r0, r6);

        goto label4;

     label1:
        $r4 = r2.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.lang.String authorizeTokenPath>;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        specialinvoke r2.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: void doAuthorizeToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r0, r6);

        goto label4;

     label2:
        $r5 = r2.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.lang.String accessTokenPath>;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label3;

        specialinvoke r2.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: void doExchangeToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r0, r6);

        goto label4;

     label3:
        interfaceinvoke r6.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(404);

     label4:
        return;
    }

    private void doRequestToken(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        net.oauth.server.HttpRequestMessage $r0;
        org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet r5;
        java.net.URISyntaxException $r17;
        java.lang.String[] $r13;
        javax.servlet.http.HttpServletRequest r1;
        javax.servlet.ServletOutputStream $r12;
        java.lang.StringBuffer $r2;
        org.waveprotocol.wave.util.logging.Log $r18, $r20;
        java.lang.String $r3, $r14, $r15;
        net.oauth.OAuthException $r19;
        net.oauth.OAuthServiceProvider $r6;
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer $r9;
        javax.servlet.http.HttpServletResponse r11;
        net.oauth.OAuthValidator $r8;
        net.oauth.OAuthAccessor $r7, $r10;
        java.util.List $r16;
        net.oauth.OAuthConsumer $r4;

        r5 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r11 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r0 = new net.oauth.server.HttpRequestMessage;

        $r2 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.StringBuffer getRequestURL()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<net.oauth.server.HttpRequestMessage: void <init>(javax.servlet.http.HttpServletRequest,java.lang.String)>(r1, $r3);

        $r4 = new net.oauth.OAuthConsumer;

        $r6 = r5.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: net.oauth.OAuthServiceProvider serviceProvider>;

        specialinvoke $r4.<net.oauth.OAuthConsumer: void <init>(java.lang.String,java.lang.String,java.lang.String,net.oauth.OAuthServiceProvider)>("", "anonymous", "anonymous", $r6);

        $r7 = new net.oauth.OAuthAccessor;

        specialinvoke $r7.<net.oauth.OAuthAccessor: void <init>(net.oauth.OAuthConsumer)>($r4);

     label1:
        $r8 = r5.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: net.oauth.OAuthValidator validator>;

        interfaceinvoke $r8.<net.oauth.OAuthValidator: void validateMessage(net.oauth.OAuthMessage,net.oauth.OAuthAccessor)>($r0, $r7);

     label2:
        goto label5;

     label3:
        $r19 := @caughtexception;

        $r20 = <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r20.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String,java.lang.Throwable)>("The message does not conform to OAuth", $r19);

        interfaceinvoke r11.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(401);

        return;

     label4:
        $r17 := @caughtexception;

        $r18 = <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r18.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String,java.lang.Throwable)>("The message URL is invalid", $r17);

        interfaceinvoke r11.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(401);

        return;

     label5:
        $r9 = r5.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer tokenContainer>;

        $r10 = virtualinvoke $r9.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: net.oauth.OAuthAccessor generateRequestToken(net.oauth.OAuthConsumer)>($r4);

        interfaceinvoke r11.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>("application/x-www-form-urlencoded");

        $r12 = interfaceinvoke r11.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>();

        $r13 = newarray (java.lang.String)[6];

        $r13[0] = "oauth_token";

        $r14 = $r10.<net.oauth.OAuthAccessor: java.lang.String requestToken>;

        $r13[1] = $r14;

        $r13[2] = "oauth_token_secret";

        $r15 = $r10.<net.oauth.OAuthAccessor: java.lang.String tokenSecret>;

        $r13[3] = $r15;

        $r13[4] = "oauth_callback_confirmed";

        $r13[5] = "true";

        $r16 = staticinvoke <net.oauth.OAuth: java.util.List newList(java.lang.String[])>($r13);

        staticinvoke <net.oauth.OAuth: void formEncode(java.lang.Iterable,java.io.OutputStream)>($r16, $r12);

        virtualinvoke $r12.<javax.servlet.ServletOutputStream: void close()>();

        interfaceinvoke r11.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(200);

        return;

        catch net.oauth.OAuthException from label1 to label2 with label3;
        catch java.net.URISyntaxException from label1 to label2 with label4;
    }

    private void doAuthorizeToken(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        net.oauth.server.HttpRequestMessage $r0;
        java.lang.IllegalStateException $r13;
        org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet r5;
        org.waveprotocol.wave.model.wave.ParticipantId $r8;
        org.waveprotocol.box.server.authentication.SessionManager $r6, $r16;
        org.waveprotocol.wave.util.logging.Log $r26, $r29;
        boolean $z0, $z1;
        javax.servlet.http.HttpSession $r7;
        java.lang.StringBuilder $r15, $r17, $r19, $r20, $r22;
        java.lang.String[] $r4;
        net.oauth.OAuthProblemException $r25, $r28;
        javax.servlet.http.HttpServletRequest r1;
        java.lang.StringBuffer $r2;
        int $i0;
        java.lang.String $r3, $r10, $r11, $r12, $r18, $r21, $r23, $r24, $r27, $r30;
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer $r9;
        javax.servlet.http.HttpServletResponse r14;

        r5 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r14 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r0 = new net.oauth.server.HttpRequestMessage;

        $r2 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.StringBuffer getRequestURL()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<net.oauth.server.HttpRequestMessage: void <init>(javax.servlet.http.HttpServletRequest,java.lang.String)>(r1, $r3);

     label01:
        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "oauth_callback";

        $r4[1] = "oauth_token";

        virtualinvoke $r0.<net.oauth.OAuthMessage: void requireParameters(java.lang.String[])>($r4);

     label02:
        goto label04;

     label03:
        $r28 := @caughtexception;

        $r29 = <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r29.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String,java.lang.Throwable)>("Parameter absent", $r28);

        $r30 = virtualinvoke $r28.<net.oauth.OAuthProblemException: java.lang.String getMessage()>();

        interfaceinvoke r14.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>(400, $r30);

        return;

     label04:
        $r6 = r5.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.box.server.authentication.SessionManager sessionManager>;

        $r7 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)>(0);

        $r8 = interfaceinvoke $r6.<org.waveprotocol.box.server.authentication.SessionManager: org.waveprotocol.wave.model.wave.ParticipantId getLoggedInUser(javax.servlet.http.HttpSession)>($r7);

        if $r8 != null goto label05;

        $r16 = r5.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.box.server.authentication.SessionManager sessionManager>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/robot/dataapi/oauth");

        $r18 = r5.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.lang.String authorizeTokenPath>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r21 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getQueryString()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = interfaceinvoke $r16.<org.waveprotocol.box.server.authentication.SessionManager: java.lang.String getLoginUrl(java.lang.String)>($r23);

        interfaceinvoke r14.<javax.servlet.http.HttpServletResponse: void sendRedirect(java.lang.String)>($r24);

        return;

     label05:
        $r9 = r5.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer tokenContainer>;

        $r10 = virtualinvoke $r0.<net.oauth.OAuthMessage: java.lang.String getToken()>();

        virtualinvoke $r9.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: net.oauth.OAuthAccessor getRequestTokenAccessor(java.lang.String)>($r10);

     label06:
        goto label08;

     label07:
        $r25 := @caughtexception;

        $r26 = <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r26.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String,java.lang.Throwable)>("Trying to load a non existing token for authorization", $r25);

        $i0 = virtualinvoke $r25.<net.oauth.OAuthProblemException: int getHttpStatusCode()>();

        $r27 = virtualinvoke $r25.<net.oauth.OAuthProblemException: java.lang.String getMessage()>();

        interfaceinvoke r14.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>($i0, $r27);

        return;

     label08:
        $r11 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("GET");

        if $z0 == 0 goto label09;

        specialinvoke r5.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: void doAuthorizeTokenGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r14, $r8);

        goto label11;

     label09:
        $r12 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("POST");

        if $z1 == 0 goto label10;

        specialinvoke r5.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: void doAuthorizeTokenPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.waveprotocol.wave.model.wave.ParticipantId,net.oauth.OAuthMessage)>(r1, r14, $r8, $r0);

        goto label11;

     label10:
        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This method shouldn\'t be called outside GET or POST requests");

        throw $r13;

     label11:
        return;

        catch net.oauth.OAuthProblemException from label01 to label02 with label03;
        catch net.oauth.OAuthProblemException from label05 to label06 with label07;
    }

    private void doAuthorizeTokenGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.waveprotocol.wave.model.wave.ParticipantId) throws java.io.IOException
    {
        java.io.PrintWriter $r2;
        org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet r6;
        javax.servlet.http.HttpServletResponse r1;
        org.waveprotocol.wave.model.wave.ParticipantId r0;
        javax.servlet.http.HttpServletRequest r4;
        com.google.gxp.base.GxpContext $r3;
        java.util.Locale $r5;
        java.lang.String $r7;

        r6 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet;

        r4 := @parameter0: javax.servlet.http.HttpServletRequest;

        r1 := @parameter1: javax.servlet.http.HttpServletResponse;

        r0 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "User must be supplied");

        $r2 = interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>();

        $r3 = new com.google.gxp.base.GxpContext;

        $r5 = interfaceinvoke r4.<javax.servlet.http.HttpServletRequest: java.util.Locale getLocale()>();

        specialinvoke $r3.<com.google.gxp.base.GxpContext: void <init>(java.util.Locale)>($r5);

        $r7 = virtualinvoke r6.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.lang.String getOrGenerateXsrfToken(org.waveprotocol.wave.model.wave.ParticipantId)>(r0);

        staticinvoke <org.waveprotocol.box.server.gxp.OAuthAuthorizeTokenPage: void write(java.lang.Appendable,com.google.gxp.base.GxpContext,int,java.lang.String)>($r2, $r3, 60, $r7);

        interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>("text/html");

        interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(200);

        return;
    }

    private void doAuthorizeTokenPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.waveprotocol.wave.model.wave.ParticipantId, net.oauth.OAuthMessage) throws java.io.IOException
    {
        org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet r13;
        org.waveprotocol.wave.model.wave.ParticipantId r0;
        org.waveprotocol.wave.util.logging.Log $r4, $r27, $r38, $r41;
        boolean $z0, $z1;
        java.io.PrintWriter $r36;
        java.lang.StringBuilder $r3, $r5, $r7, $r8, $r9, $r26, $r28, $r30, $r31, $r32;
        java.lang.String[] $r23;
        net.oauth.OAuthProblemException $r37, $r40;
        java.util.concurrent.ConcurrentMap $r14;
        javax.servlet.http.HttpServletRequest r1;
        int $i0, $i1;
        java.lang.String $r2, $r6, $r10, $r12, $r16, $r17, $r20, $r22, $r24, $r25, $r29, $r33, $r35, $r39, $r42;
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer $r19, $r34;
        javax.servlet.http.HttpServletResponse r11;
        net.oauth.OAuthAccessor $r21;
        net.oauth.OAuthMessage r18;
        java.lang.Object $r15;

        r13 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r11 := @parameter1: javax.servlet.http.HttpServletResponse;

        r0 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r18 := @parameter3: net.oauth.OAuthMessage;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "User must be supplied");

        $r2 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("token");

        $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r2);

        if $z0 != 0 goto label01;

        $r12 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("token");

        $r14 = r13.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.util.concurrent.ConcurrentMap xsrfTokens>;

        $r15 = interfaceinvoke $r14.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z1 != 0 goto label02;

     label01:
        $r4 = <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Request without a valid  xsrf token received from ");

        $r6 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getRemoteAddr()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r10);

        interfaceinvoke r11.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>(401, "Invalid XSRF token");

        return;

     label02:
        $r16 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("cancel");

        if $r16 == null goto label07;

     label03:
        $r34 = r13.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer tokenContainer>;

        $r35 = virtualinvoke r18.<net.oauth.OAuthMessage: java.lang.String getToken()>();

        virtualinvoke $r34.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: void rejectRequestToken(java.lang.String)>($r35);

     label04:
        goto label06;

     label05:
        $r40 := @caughtexception;

        $r41 = <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r41.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String,java.lang.Throwable)>("Rejecting a request token failed", $r40);

        $i1 = virtualinvoke $r40.<net.oauth.OAuthProblemException: int getHttpStatusCode()>();

        $r42 = virtualinvoke $r40.<net.oauth.OAuthProblemException: java.lang.String getMessage()>();

        interfaceinvoke r11.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>($i1, $r42);

        return;

     label06:
        interfaceinvoke r11.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>("text/plain");

        $r36 = interfaceinvoke r11.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>();

        virtualinvoke $r36.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("No access granted, you can now close this page.");

        interfaceinvoke r11.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(200);

        return;

     label07:
        $r17 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("agree");

        if $r17 != null goto label08;

        $r27 = <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad request when authorzing a token from ");

        $r29 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getRemoteAddr()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r33);

        interfaceinvoke r11.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(400);

        return;

     label08:
        $r19 = r13.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer tokenContainer>;

        $r20 = virtualinvoke r18.<net.oauth.OAuthMessage: java.lang.String getToken()>();

        $r21 = virtualinvoke $r19.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: net.oauth.OAuthAccessor authorizeRequestToken(java.lang.String,org.waveprotocol.wave.model.wave.ParticipantId)>($r20, r0);

     label09:
        goto label11;

     label10:
        $r37 := @caughtexception;

        $r38 = <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r38.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String,java.lang.Throwable)>("Authorizing a request token failed", $r37);

        $i0 = virtualinvoke $r37.<net.oauth.OAuthProblemException: int getHttpStatusCode()>();

        $r39 = virtualinvoke $r37.<net.oauth.OAuthProblemException: java.lang.String getMessage()>();

        interfaceinvoke r11.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>($i0, $r39);

        return;

     label11:
        $r22 = virtualinvoke r18.<net.oauth.OAuthMessage: java.lang.String getParameter(java.lang.String)>("oauth_callback");

        $r23 = newarray (java.lang.String)[2];

        $r23[0] = "oauth_token";

        $r24 = $r21.<net.oauth.OAuthAccessor: java.lang.String requestToken>;

        $r23[1] = $r24;

        $r25 = staticinvoke <net.oauth.OAuth: java.lang.String addParameters(java.lang.String,java.lang.String[])>($r22, $r23);

        interfaceinvoke r11.<javax.servlet.http.HttpServletResponse: void sendRedirect(java.lang.String)>($r25);

        return;

        catch net.oauth.OAuthProblemException from label03 to label04 with label05;
        catch net.oauth.OAuthProblemException from label08 to label09 with label10;
    }

    private void doExchangeToken(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        net.oauth.server.HttpRequestMessage $r0;
        org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet r5;
        java.net.URISyntaxException $r21;
        java.lang.String[] $r14;
        net.oauth.OAuthProblemException $r18, $r25;
        javax.servlet.http.HttpServletRequest r1;
        javax.servlet.ServletOutputStream $r13;
        java.lang.StringBuffer $r2;
        int $i0, $i1;
        org.waveprotocol.wave.util.logging.Log $r19, $r22, $r24, $r26;
        java.lang.String $r3, $r4, $r9, $r15, $r16, $r20, $r27;
        net.oauth.OAuthException $r23;
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer $r6, $r10;
        javax.servlet.http.HttpServletResponse r12;
        net.oauth.OAuthValidator $r8;
        net.oauth.OAuthAccessor $r7, $r11;
        java.util.List $r17;

        r5 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r12 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r0 = new net.oauth.server.HttpRequestMessage;

        $r2 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.StringBuffer getRequestURL()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<net.oauth.server.HttpRequestMessage: void <init>(javax.servlet.http.HttpServletRequest,java.lang.String)>(r1, $r3);

        $r4 = virtualinvoke $r0.<net.oauth.OAuthMessage: java.lang.String getToken()>();

     label01:
        $r6 = r5.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer tokenContainer>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: net.oauth.OAuthAccessor getRequestTokenAccessor(java.lang.String)>($r4);

     label02:
        goto label04;

     label03:
        $r25 := @caughtexception;

        $r26 = <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r26.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String,java.lang.Throwable)>("Request token unknown", $r25);

        $i1 = virtualinvoke $r25.<net.oauth.OAuthProblemException: int getHttpStatusCode()>();

        $r27 = virtualinvoke $r25.<net.oauth.OAuthProblemException: java.lang.String getMessage()>();

        interfaceinvoke r12.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>($i1, $r27);

        return;

     label04:
        $r8 = r5.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: net.oauth.OAuthValidator validator>;

        interfaceinvoke $r8.<net.oauth.OAuthValidator: void validateMessage(net.oauth.OAuthMessage,net.oauth.OAuthAccessor)>($r0, $r7);

     label05:
        goto label08;

     label06:
        $r23 := @caughtexception;

        $r24 = <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r24.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String,java.lang.Throwable)>("The message does not conform to OAuth", $r23);

        interfaceinvoke r12.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(401);

        return;

     label07:
        $r21 := @caughtexception;

        $r22 = <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r22.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String,java.lang.Throwable)>("The message URL is invalid", $r21);

        interfaceinvoke r12.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(401);

        return;

     label08:
        $r10 = r5.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer tokenContainer>;

        $r9 = $r7.<net.oauth.OAuthAccessor: java.lang.String requestToken>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: net.oauth.OAuthAccessor generateAccessToken(java.lang.String)>($r9);

     label09:
        goto label11;

     label10:
        $r18 := @caughtexception;

        $r19 = <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r19.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String,java.lang.Throwable)>("Request token unknown", $r18);

        $i0 = virtualinvoke $r18.<net.oauth.OAuthProblemException: int getHttpStatusCode()>();

        $r20 = virtualinvoke $r18.<net.oauth.OAuthProblemException: java.lang.String getMessage()>();

        interfaceinvoke r12.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>($i0, $r20);

        return;

     label11:
        interfaceinvoke r12.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>("application/x-www-form-urlencoded");

        $r13 = interfaceinvoke r12.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>();

        $r14 = newarray (java.lang.String)[6];

        $r14[0] = "oauth_token";

        $r15 = $r11.<net.oauth.OAuthAccessor: java.lang.String accessToken>;

        $r14[1] = $r15;

        $r14[2] = "oauth_token_secret";

        $r16 = $r11.<net.oauth.OAuthAccessor: java.lang.String tokenSecret>;

        $r14[3] = $r16;

        $r14[4] = "oauth_callback_confirmed";

        $r14[5] = "true";

        $r17 = staticinvoke <net.oauth.OAuth: java.util.List newList(java.lang.String[])>($r14);

        staticinvoke <net.oauth.OAuth: void formEncode(java.lang.Iterable,java.io.OutputStream)>($r17, $r13);

        virtualinvoke $r13.<javax.servlet.ServletOutputStream: void close()>();

        interfaceinvoke r12.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(200);

        return;

        catch net.oauth.OAuthProblemException from label01 to label02 with label03;
        catch net.oauth.OAuthException from label04 to label05 with label06;
        catch java.net.URISyntaxException from label04 to label05 with label07;
        catch net.oauth.OAuthProblemException from label08 to label09 with label10;
    }

    java.lang.String getOrGenerateXsrfToken(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet r0;
        org.waveprotocol.wave.model.id.TokenGenerator $r1;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        java.util.concurrent.ConcurrentMap $r4;
        java.lang.Object $r5;
        java.lang.String $r2, r6, r7;

        r0 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.model.id.TokenGenerator tokenGenerator>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.id.TokenGenerator: java.lang.String generateToken(int)>(8);

        r7 = $r2;

        $r4 = r0.<org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.util.concurrent.ConcurrentMap xsrfTokens>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r3, $r2);

        r6 = (java.lang.String) $r5;

        if r6 == null goto label1;

        r7 = r6;

     label1:
        return r7;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: int XSRF_TOKEN_TIMEOUT_HOURS> = 12;

        <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: int TOKEN_LENGTH> = 8;

        <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.lang.String HTML_CONTENT_TYPE> = "text/html";

        <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.lang.String ANONYMOUS_TOKEN_SECRET> = "anonymous";

        <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.lang.String ANONYMOUS_TOKEN> = "anonymous";

        <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: java.lang.String DATA_API_OAUTH_PATH> = "/robot/dataapi/oauth";

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/robots/dataapi/DataApiOAuthServlet;");

        <org.waveprotocol.box.server.robots.dataapi.DataApiOAuthServlet: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
