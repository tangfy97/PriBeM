public class org.apache.poi.util.StringUtil extends java.lang.Object
{
    private static final java.lang.String ENCODING_ISO_8859_1;

    private void <init>()
    {
        org.apache.poi.util.StringUtil r0;

        r0 := @this: org.apache.poi.util.StringUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getFromUnicodeLE(byte[], int, int) throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException
    {
        byte[] r5;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;
        java.lang.String $r8, $r13, $r14;
        java.lang.ArrayIndexOutOfBoundsException $r0;
        java.lang.RuntimeException $r16;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6, $r7, $r10, $r11, $r12;
        java.io.UnsupportedEncodingException $r15;

        r5 := @parameter0: byte[];

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        if i0 < 0 goto label1;

        $i2 = lengthof r5;

        if i0 < $i2 goto label2;

     label1:
        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal offset ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (String data is of length ");

        $i1 = lengthof r5;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r0;

     label2:
        if i3 < 0 goto label3;

        $i4 = lengthof r5;

        $i5 = $i4 - i0;

        $i6 = $i5 / 2;

        if $i6 >= i3 goto label4;

     label3:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal length ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label4:
        $r14 = new java.lang.String;

        $i7 = i3 * 2;

        specialinvoke $r14.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r5, i0, $i7, "UTF-16LE");

     label5:
        return $r14;

     label6:
        $r15 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

        catch java.io.UnsupportedEncodingException from label4 to label5 with label6;
    }

    public static java.lang.String getFromUnicodeLE(byte[])
    {
        byte[] r0;
        int $i0, $i1, $i2;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        return "";

     label1:
        $i1 = lengthof r0;

        $i2 = $i1 / 2;

        $r1 = staticinvoke <org.apache.poi.util.StringUtil: java.lang.String getFromUnicodeLE(byte[],int,int)>(r0, 0, $i2);

        return $r1;
    }

    public static java.lang.String getFromCompressedUnicode(byte[], int, int)
    {
        byte[] r0;
        java.lang.RuntimeException $r3;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String $r1;
        java.io.UnsupportedEncodingException $r2;

        r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

     label1:
        $i2 = lengthof r0;

        $i3 = $i2 - i1;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i3);

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r0, i1, $i4, "ISO-8859-1");

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String readCompressedUnicode(org.apache.poi.util.LittleEndianInput, int)
    {
        char $c3;
        int i0, $i1, $i2, i4;
        org.apache.poi.util.LittleEndianInput r2;
        char[] r0;
        java.lang.String $r1;

        r2 := @parameter0: org.apache.poi.util.LittleEndianInput;

        i0 := @parameter1: int;

        r0 = newarray (char)[i0];

        i4 = 0;

     label1:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label2;

        $i2 = interfaceinvoke r2.<org.apache.poi.util.LittleEndianInput: int readUByte()>();

        $c3 = (char) $i2;

        r0[i4] = $c3;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>(r0);

        return $r1;
    }

    public static java.lang.String readUnicodeString(org.apache.poi.util.LittleEndianInput)
    {
        byte $b1, $b2;
        org.apache.poi.util.LittleEndianInput r0;
        int $i0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: org.apache.poi.util.LittleEndianInput;

        $i0 = interfaceinvoke r0.<org.apache.poi.util.LittleEndianInput: int readUShort()>();

        $b1 = interfaceinvoke r0.<org.apache.poi.util.LittleEndianInput: byte readByte()>();

        $b2 = $b1 & 1;

        if $b2 != 0 goto label1;

        $r2 = staticinvoke <org.apache.poi.util.StringUtil: java.lang.String readCompressedUnicode(org.apache.poi.util.LittleEndianInput,int)>(r0, $i0);

        return $r2;

     label1:
        $r1 = staticinvoke <org.apache.poi.util.StringUtil: java.lang.String readUnicodeLE(org.apache.poi.util.LittleEndianInput,int)>(r0, $i0);

        return $r1;
    }

    public static java.lang.String readUnicodeString(org.apache.poi.util.LittleEndianInput, int)
    {
        byte $b0, $b1;
        org.apache.poi.util.LittleEndianInput r0;
        int i2;
        java.lang.String $r1, $r2;

        r0 := @parameter0: org.apache.poi.util.LittleEndianInput;

        i2 := @parameter1: int;

        $b0 = interfaceinvoke r0.<org.apache.poi.util.LittleEndianInput: byte readByte()>();

        $b1 = $b0 & 1;

        if $b1 != 0 goto label1;

        $r2 = staticinvoke <org.apache.poi.util.StringUtil: java.lang.String readCompressedUnicode(org.apache.poi.util.LittleEndianInput,int)>(r0, i2);

        return $r2;

     label1:
        $r1 = staticinvoke <org.apache.poi.util.StringUtil: java.lang.String readUnicodeLE(org.apache.poi.util.LittleEndianInput,int)>(r0, i2);

        return $r1;
    }

    public static void writeUnicodeString(org.apache.poi.util.LittleEndianOutput, java.lang.String)
    {
        byte $b1;
        org.apache.poi.util.LittleEndianOutput r1;
        int $i0;
        java.lang.String r0;
        boolean $z0;

        r1 := @parameter0: org.apache.poi.util.LittleEndianOutput;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        interfaceinvoke r1.<org.apache.poi.util.LittleEndianOutput: void writeShort(int)>($i0);

        $z0 = staticinvoke <org.apache.poi.util.StringUtil: boolean hasMultibyte(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        interfaceinvoke r1.<org.apache.poi.util.LittleEndianOutput: void writeByte(int)>($b1);

        if $z0 == 0 goto label3;

        staticinvoke <org.apache.poi.util.StringUtil: void putUnicodeLE(java.lang.String,org.apache.poi.util.LittleEndianOutput)>(r0, r1);

        goto label4;

     label3:
        staticinvoke <org.apache.poi.util.StringUtil: void putCompressedUnicode(java.lang.String,org.apache.poi.util.LittleEndianOutput)>(r0, r1);

     label4:
        return;
    }

    public static void writeUnicodeStringFlagAndData(org.apache.poi.util.LittleEndianOutput, java.lang.String)
    {
        byte $b0;
        org.apache.poi.util.LittleEndianOutput r1;
        java.lang.String r0;
        boolean $z0;

        r1 := @parameter0: org.apache.poi.util.LittleEndianOutput;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.poi.util.StringUtil: boolean hasMultibyte(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        interfaceinvoke r1.<org.apache.poi.util.LittleEndianOutput: void writeByte(int)>($b0);

        if $z0 == 0 goto label3;

        staticinvoke <org.apache.poi.util.StringUtil: void putUnicodeLE(java.lang.String,org.apache.poi.util.LittleEndianOutput)>(r0, r1);

        goto label4;

     label3:
        staticinvoke <org.apache.poi.util.StringUtil: void putCompressedUnicode(java.lang.String,org.apache.poi.util.LittleEndianOutput)>(r0, r1);

     label4:
        return;
    }

    public static int getEncodedSize(java.lang.String)
    {
        byte $b3;
        int $i0, $i1, $i2;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $z0 = staticinvoke <org.apache.poi.util.StringUtil: boolean hasMultibyte(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $b3 = 2;

        goto label2;

     label1:
        $b3 = 1;

     label2:
        $i1 = $i0 * $b3;

        $i2 = 3 + $i1;

        return $i2;
    }

    public static void putCompressedUnicode(java.lang.String, byte[], int)
    {
        byte[] $r1, r2;
        int i0, $i1;
        java.lang.String r0;
        java.lang.RuntimeException $r4;
        java.io.UnsupportedEncodingException $r3;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, i0, $i1);

        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static void putCompressedUnicode(java.lang.String, org.apache.poi.util.LittleEndianOutput)
    {
        byte[] $r1;
        org.apache.poi.util.LittleEndianOutput r2;
        java.lang.String r0;
        java.lang.RuntimeException $r4;
        java.io.UnsupportedEncodingException $r3;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.poi.util.LittleEndianOutput;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        interfaceinvoke r2.<org.apache.poi.util.LittleEndianOutput: void write(byte[])>($r1);

        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static void putUnicodeLE(java.lang.String, byte[], int)
    {
        byte[] $r1, r2;
        int i0, $i1;
        java.lang.String r0;
        java.lang.RuntimeException $r4;
        java.io.UnsupportedEncodingException $r3;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-16LE");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, i0, $i1);

        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static void putUnicodeLE(java.lang.String, org.apache.poi.util.LittleEndianOutput)
    {
        byte[] $r1;
        org.apache.poi.util.LittleEndianOutput r2;
        java.lang.String r0;
        java.lang.RuntimeException $r4;
        java.io.UnsupportedEncodingException $r3;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.poi.util.LittleEndianOutput;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-16LE");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        interfaceinvoke r2.<org.apache.poi.util.LittleEndianOutput: void write(byte[])>($r1);

        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String readUnicodeLE(org.apache.poi.util.LittleEndianInput, int)
    {
        char $c3;
        int i0, $i1, $i2, i4;
        org.apache.poi.util.LittleEndianInput r2;
        char[] r0;
        java.lang.String $r1;

        r2 := @parameter0: org.apache.poi.util.LittleEndianInput;

        i0 := @parameter1: int;

        r0 = newarray (char)[i0];

        i4 = 0;

     label1:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label2;

        $i2 = interfaceinvoke r2.<org.apache.poi.util.LittleEndianInput: int readUShort()>();

        $c3 = (char) $i2;

        r0[i4] = $c3;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>(r0);

        return $r1;
    }

    public static java.lang.String format(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r3;
        java.lang.StringBuffer $r10;
        int $i0, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, $i17, $i18, $i19;
        java.lang.String r1, $r2, $r6, $r9;
        java.lang.Number $r8;
        boolean $z0;
        char $c1, $c2, $c6, $c16;
        java.lang.Object $r4, $r5, $r7;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object[];

        i14 = 0;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        i15 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i15 >= $i0 goto label7;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i15);

        $i17 = (int) $c1;

        if $i17 != 37 goto label4;

        $i7 = lengthof r3;

        if i14 < $i7 goto label2;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("?missing data?");

        goto label6;

     label2:
        $r4 = r3[i14];

        $z0 = $r4 instanceof java.lang.Number;

        if $z0 == 0 goto label3;

        $i9 = i15 + 1;

        $i10 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i9 >= $i10 goto label3;

        $i11 = i14;

        i14 = i14 + 1;

        $r7 = r3[$i11];

        $r8 = (java.lang.Number) $r7;

        $i12 = i15 + 1;

        $r9 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i12);

        $i13 = staticinvoke <org.apache.poi.util.StringUtil: int matchOptionalFormatting(java.lang.Number,java.lang.String,java.lang.StringBuffer)>($r8, $r9, $r10);

        i15 = i15 + $i13;

        goto label6;

     label3:
        $i8 = i14;

        i14 = i14 + 1;

        $r5 = r3[$i8];

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        goto label6;

     label4:
        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i15);

        $i18 = (int) $c2;

        if $i18 != 92 goto label5;

        $i3 = i15 + 1;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i3 >= $i4 goto label5;

        $i5 = i15 + 1;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i5);

        $i19 = (int) $c6;

        if $i19 != 37 goto label5;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(37);

        i15 = i15 + 1;

        goto label6;

     label5:
        $c16 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i15);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c16);

     label6:
        i15 = i15 + 1;

        goto label1;

     label7:
        $r2 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private static int matchOptionalFormatting(java.lang.Number, java.lang.String, java.lang.StringBuffer)
    {
        java.text.FieldPosition $r22, $r23, $r25, $r26;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r5, $r6, $r10, $r11, $r14, $r15, $r20, $r21, $r24;
        java.text.NumberFormat $r0;
        java.lang.StringBuffer r3;
        int $i0, $i1, $i3, $i6, $i9, $i10, $i14, $i15, $i16;
        java.lang.String r1, $r7, $r12, $r16;
        java.lang.Number r2;
        char $c2, $c4, $c5, $c7, $c8, $c11, $c12, $c13;

        r2 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.StringBuffer;

        $r0 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance()>();

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if 0 >= $i0 goto label2;

        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c7);

        if $z1 == 0 goto label2;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $r10 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12);

        virtualinvoke $r0.<java.text.NumberFormat: void setMinimumIntegerDigits(int)>($i9);

        $i10 = virtualinvoke r1.<java.lang.String: int length()>();

        if 2 >= $i10 goto label1;

        $c11 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        $i15 = (int) $c11;

        if $i15 != 46 goto label1;

        $c12 = virtualinvoke r1.<java.lang.String: char charAt(int)>(2);

        $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c12);

        if $z2 == 0 goto label1;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $c13 = virtualinvoke r1.<java.lang.String: char charAt(int)>(2);

        $r14 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $i14 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16);

        virtualinvoke $r0.<java.text.NumberFormat: void setMaximumFractionDigits(int)>($i14);

        $r22 = new java.text.FieldPosition;

        specialinvoke $r22.<java.text.FieldPosition: void <init>(int)>(0);

        virtualinvoke $r0.<java.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>(r2, r3, $r22);

        return 3;

     label1:
        $r23 = new java.text.FieldPosition;

        specialinvoke $r23.<java.text.FieldPosition: void <init>(int)>(0);

        virtualinvoke $r0.<java.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>(r2, r3, $r23);

        return 1;

     label2:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if 0 >= $i1 goto label3;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $i16 = (int) $c2;

        if $i16 != 46 goto label3;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if 1 >= $i3 goto label3;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c4);

        if $z0 == 0 goto label3;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        $r5 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        virtualinvoke $r0.<java.text.NumberFormat: void setMaximumFractionDigits(int)>($i6);

        $r25 = new java.text.FieldPosition;

        specialinvoke $r25.<java.text.FieldPosition: void <init>(int)>(0);

        virtualinvoke $r0.<java.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>(r2, r3, $r25);

        return 2;

     label3:
        $r26 = new java.text.FieldPosition;

        specialinvoke $r26.<java.text.FieldPosition: void <init>(int)>(0);

        virtualinvoke $r0.<java.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>(r2, r3, $r26);

        return 1;
    }

    public static java.lang.String getPreferredEncoding()
    {
        return "ISO-8859-1";
    }

    public static boolean hasMultibyte(java.lang.String)
    {
        int $i0, i2, $i3;
        char $c1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        i2 = 0;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 <= 255 goto label3;

        return 1;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static boolean isUnicodeString(java.lang.String)
    {
        byte[] $r2;
        java.lang.String r0, $r1;
        java.io.UnsupportedEncodingException $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = new java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, "ISO-8859-1");

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r3 := @caughtexception;

        return 1;

        catch java.io.UnsupportedEncodingException from label1 to label3 with label4;
    }

    public static void <clinit>()
    {
        <org.apache.poi.util.StringUtil: java.lang.String ENCODING_ISO_8859_1> = "ISO-8859-1";

        return;
    }
}
