public abstract class com.mycila.inject.internal.guava.collect.Ordering extends java.lang.Object implements java.util.Comparator
{
    static final int LEFT_IS_GREATER;
    static final int RIGHT_IS_GREATER;

    public static com.mycila.inject.internal.guava.collect.Ordering natural()
    {
        com.mycila.inject.internal.guava.collect.NaturalOrdering $r0;

        $r0 = <com.mycila.inject.internal.guava.collect.NaturalOrdering: com.mycila.inject.internal.guava.collect.NaturalOrdering INSTANCE>;

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.Ordering 'from'(java.util.Comparator)
    {
        com.mycila.inject.internal.guava.collect.ComparatorOrdering $r2;
        java.util.Comparator r0;
        com.mycila.inject.internal.guava.collect.Ordering $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Comparator;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Ordering;

        if $z0 == 0 goto label1;

        $r1 = (com.mycila.inject.internal.guava.collect.Ordering) r0;

        goto label2;

     label1:
        $r2 = new com.mycila.inject.internal.guava.collect.ComparatorOrdering;

        $r1 = $r2;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.ComparatorOrdering: void <init>(java.util.Comparator)>(r0);

     label2:
        return $r1;
    }

    public static com.mycila.inject.internal.guava.collect.Ordering 'from'(com.mycila.inject.internal.guava.collect.Ordering)
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.Ordering r0, $r2;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.Ordering;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = (com.mycila.inject.internal.guava.collect.Ordering) $r1;

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.Ordering explicit(java.util.List)
    {
        java.util.List r1;
        com.mycila.inject.internal.guava.collect.ExplicitOrdering $r0;

        r1 := @parameter0: java.util.List;

        $r0 = new com.mycila.inject.internal.guava.collect.ExplicitOrdering;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ExplicitOrdering: void <init>(java.util.List)>(r1);

        return $r0;
    }

    public static transient com.mycila.inject.internal.guava.collect.Ordering explicit(java.lang.Object, java.lang.Object[])
    {
        java.util.List $r2;
        java.lang.Object[] r1;
        java.lang.Object r0;
        com.mycila.inject.internal.guava.collect.Ordering $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.List asList(java.lang.Object,java.lang.Object[])>(r0, r1);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering explicit(java.util.List)>($r2);

        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.Ordering arbitrary()
    {
        com.mycila.inject.internal.guava.collect.Ordering $r0;

        $r0 = <com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrderingHolder: com.mycila.inject.internal.guava.collect.Ordering ARBITRARY_ORDERING>;

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.Ordering usingToString()
    {
        com.mycila.inject.internal.guava.collect.UsingToStringOrdering $r0;

        $r0 = <com.mycila.inject.internal.guava.collect.UsingToStringOrdering: com.mycila.inject.internal.guava.collect.UsingToStringOrdering INSTANCE>;

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.Ordering compound(java.lang.Iterable)
    {
        java.lang.Iterable r1;
        com.mycila.inject.internal.guava.collect.CompoundOrdering $r0;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = new com.mycila.inject.internal.guava.collect.CompoundOrdering;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.CompoundOrdering: void <init>(java.lang.Iterable)>(r1);

        return $r0;
    }

    protected void <init>()
    {
        com.mycila.inject.internal.guava.collect.Ordering r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.mycila.inject.internal.guava.collect.Ordering compound(java.util.Comparator)
    {
        com.mycila.inject.internal.guava.collect.CompoundOrdering $r0;
        java.lang.Object $r3;
        java.util.Comparator r2, $r4;
        com.mycila.inject.internal.guava.collect.Ordering r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r2 := @parameter0: java.util.Comparator;

        $r0 = new com.mycila.inject.internal.guava.collect.CompoundOrdering;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (java.util.Comparator) $r3;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.CompoundOrdering: void <init>(java.util.Comparator,java.util.Comparator)>(r1, $r4);

        return $r0;
    }

    public com.mycila.inject.internal.guava.collect.Ordering reverse()
    {
        com.mycila.inject.internal.guava.collect.ReverseOrdering $r0;
        com.mycila.inject.internal.guava.collect.Ordering r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        $r0 = new com.mycila.inject.internal.guava.collect.ReverseOrdering;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ReverseOrdering: void <init>(com.mycila.inject.internal.guava.collect.Ordering)>(r1);

        return $r0;
    }

    public com.mycila.inject.internal.guava.collect.Ordering onResultOf(com.mycila.inject.internal.guava.base.Function)
    {
        com.mycila.inject.internal.guava.base.Function r1;
        com.mycila.inject.internal.guava.collect.ByFunctionOrdering $r0;
        com.mycila.inject.internal.guava.collect.Ordering r2;

        r2 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r1 := @parameter0: com.mycila.inject.internal.guava.base.Function;

        $r0 = new com.mycila.inject.internal.guava.collect.ByFunctionOrdering;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ByFunctionOrdering: void <init>(com.mycila.inject.internal.guava.base.Function,com.mycila.inject.internal.guava.collect.Ordering)>(r1, r2);

        return $r0;
    }

    public com.mycila.inject.internal.guava.collect.Ordering lexicographical()
    {
        com.mycila.inject.internal.guava.collect.LexicographicalOrdering $r0;
        com.mycila.inject.internal.guava.collect.Ordering r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        $r0 = new com.mycila.inject.internal.guava.collect.LexicographicalOrdering;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.LexicographicalOrdering: void <init>(com.mycila.inject.internal.guava.collect.Ordering)>(r1);

        return $r0;
    }

    public com.mycila.inject.internal.guava.collect.Ordering nullsFirst()
    {
        com.mycila.inject.internal.guava.collect.NullsFirstOrdering $r0;
        com.mycila.inject.internal.guava.collect.Ordering r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        $r0 = new com.mycila.inject.internal.guava.collect.NullsFirstOrdering;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.NullsFirstOrdering: void <init>(com.mycila.inject.internal.guava.collect.Ordering)>(r1);

        return $r0;
    }

    public com.mycila.inject.internal.guava.collect.Ordering nullsLast()
    {
        com.mycila.inject.internal.guava.collect.Ordering r1;
        com.mycila.inject.internal.guava.collect.NullsLastOrdering $r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        $r0 = new com.mycila.inject.internal.guava.collect.NullsLastOrdering;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.NullsLastOrdering: void <init>(com.mycila.inject.internal.guava.collect.Ordering)>(r1);

        return $r0;
    }

    public abstract int compare(java.lang.Object, java.lang.Object);

    public java.util.List leastOf(java.lang.Iterable, int)
    {
        java.lang.Object[] $r0, $r3, $r5, r6, $r9, r10;
        java.lang.Integer $r1;
        java.lang.Iterable r2;
        int i0, $i1, $i2, $i3;
        com.mycila.inject.internal.guava.collect.Ordering r4;
        boolean $z0;
        java.util.List $r7, $r8;

        r4 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r2 := @parameter0: java.lang.Iterable;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "%d is negative", $r0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: java.lang.Object[] toArray(java.lang.Iterable)>(r2);

        $r9 = (java.lang.Object[]) $r3;

        $i1 = lengthof $r9;

        if $i1 > i0 goto label3;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r9, r4);

        r10 = $r9;

        goto label4;

     label3:
        $i2 = lengthof $r9;

        $i3 = $i2 - 1;

        specialinvoke r4.<com.mycila.inject.internal.guava.collect.Ordering: void quicksortLeastK(java.lang.Object[],int,int,int)>($r9, 0, $i3, i0);

        $r5 = newarray (java.lang.Object)[i0];

        r6 = (java.lang.Object[]) $r5;

        r10 = r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r6, 0, i0);

     label4:
        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r10);

        $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r7);

        return $r8;
    }

    public java.util.List greatestOf(java.lang.Iterable, int)
    {
        java.util.List $r3;
        int i0;
        com.mycila.inject.internal.guava.collect.Ordering r0, $r1;
        java.lang.Iterable r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r2 := @parameter0: java.lang.Iterable;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering reverse()>();

        $r3 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.Ordering: java.util.List leastOf(java.lang.Iterable,int)>(r2, i0);

        return $r3;
    }

    private void quicksortLeastK(java.lang.Object[], int, int, int)
    {
        java.lang.Object[] r1;
        int i0, i1, $i2, i3, $i4, i5, $i6, $i7;
        com.mycila.inject.internal.guava.collect.Ordering r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r1 := @parameter0: java.lang.Object[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i5 := @parameter3: int;

        if i0 <= i1 goto label1;

        $i2 = i1 + i0;

        i3 = $i2 >>> 1;

        $i4 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering: int partition(java.lang.Object[],int,int,int)>(r1, i1, i0, i3);

        $i6 = $i4 - 1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering: void quicksortLeastK(java.lang.Object[],int,int,int)>(r1, i1, $i6, i5);

        if $i4 >= i5 goto label1;

        $i7 = $i4 + 1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering: void quicksortLeastK(java.lang.Object[],int,int,int)>(r1, $i7, i0, i5);

     label1:
        return;
    }

    private int partition(java.lang.Object[], int, int, int)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, $i3, i4, i5;
        java.lang.Object r1, $r2, $r4;
        com.mycila.inject.internal.guava.collect.Ordering r3;

        r3 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r0 := @parameter0: java.lang.Object[];

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        r1 = r0[i0];

        $r2 = r0[i1];

        r0[i0] = $r2;

        r0[i1] = r1;

        i4 = i2;

        i5 = i2;

     label1:
        if i5 >= i1 goto label3;

        $r4 = r0[i5];

        $i3 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.Ordering: int compare(java.lang.Object,java.lang.Object)>($r4, r1);

        if $i3 >= 0 goto label2;

        staticinvoke <com.mycila.inject.internal.guava.collect.ObjectArrays: void swap(java.lang.Object[],int,int)>(r0, i4, i5);

        i4 = i4 + 1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        staticinvoke <com.mycila.inject.internal.guava.collect.ObjectArrays: void swap(java.lang.Object[],int,int)>(r0, i1, i4);

        return i4;
    }

    public int binarySearch(java.util.List, java.lang.Object)
    {
        java.util.List r0;
        int $i0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Ordering r2;

        r2 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Object;

        $i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>(r0, r1, r2);

        return $i0;
    }

    public java.util.List sortedCopy(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        com.mycila.inject.internal.guava.collect.Ordering r2;
        java.util.ArrayList $r1;

        r2 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, r2);

        return $r1;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableList immutableSortedCopy(java.lang.Iterable)
    {
        java.util.List $r2;
        com.mycila.inject.internal.guava.collect.ImmutableList $r3;
        com.mycila.inject.internal.guava.collect.Ordering r0;
        java.lang.Iterable r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r1 := @parameter0: java.lang.Iterable;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering: java.util.List sortedCopy(java.lang.Iterable)>(r1);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList copyOf(java.util.Collection)>($r2);

        return $r3;
    }

    public boolean isOrdered(java.lang.Iterable)
    {
        java.util.Iterator $r1;
        java.lang.Iterable r0;
        int $i0;
        java.lang.Object $r2, r4;
        com.mycila.inject.internal.guava.collect.Ordering r3;
        boolean $z0, $z1;

        r3 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.Ordering: int compare(java.lang.Object,java.lang.Object)>(r4, $r2);

        if $i0 <= 0 goto label2;

        return 0;

     label2:
        r4 = $r2;

        goto label1;

     label3:
        return 1;
    }

    public boolean isStrictlyOrdered(java.lang.Iterable)
    {
        java.util.Iterator $r1;
        java.lang.Iterable r0;
        int $i0;
        java.lang.Object $r2, r4;
        com.mycila.inject.internal.guava.collect.Ordering r3;
        boolean $z0, $z1;

        r3 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.Ordering: int compare(java.lang.Object,java.lang.Object)>(r4, $r2);

        if $i0 < 0 goto label2;

        return 0;

     label2:
        r4 = $r2;

        goto label1;

     label3:
        return 1;
    }

    public java.lang.Object max(java.lang.Iterable)
    {
        java.util.Iterator $r1;
        java.lang.Object $r3, r4;
        java.lang.Iterable r0;
        com.mycila.inject.internal.guava.collect.Ordering r2;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object max(java.lang.Object,java.lang.Object)>(r4, $r3);

        goto label1;

     label2:
        return r4;
    }

    public transient java.lang.Object max(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] r5;
        int i0, i1;
        java.lang.Object r1, r2, $r3, r4, r6, r7;
        com.mycila.inject.internal.guava.collect.Ordering r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        r5 := @parameter3: java.lang.Object[];

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object max(java.lang.Object,java.lang.Object)>(r1, r2);

        r7 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object max(java.lang.Object,java.lang.Object)>($r3, r4);

        i0 = lengthof r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r6 = r5[i1];

        r7 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object max(java.lang.Object,java.lang.Object)>(r7, r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r7;
    }

    public java.lang.Object max(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object r1, r2, $r3;
        com.mycila.inject.internal.guava.collect.Ordering r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        if $i0 < 0 goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = r2;

     label2:
        return $r3;
    }

    public java.lang.Object min(java.lang.Iterable)
    {
        java.util.Iterator $r1;
        java.lang.Object $r3, r4;
        java.lang.Iterable r0;
        com.mycila.inject.internal.guava.collect.Ordering r2;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object min(java.lang.Object,java.lang.Object)>(r4, $r3);

        goto label1;

     label2:
        return r4;
    }

    public transient java.lang.Object min(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] r5;
        int i0, i1;
        java.lang.Object r1, r2, $r3, r4, r6, r7;
        com.mycila.inject.internal.guava.collect.Ordering r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        r5 := @parameter3: java.lang.Object[];

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object min(java.lang.Object,java.lang.Object)>(r1, r2);

        r7 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object min(java.lang.Object,java.lang.Object)>($r3, r4);

        i0 = lengthof r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r6 = r5[i1];

        r7 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object min(java.lang.Object,java.lang.Object)>(r7, r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r7;
    }

    public java.lang.Object min(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object r1, r2, $r3;
        com.mycila.inject.internal.guava.collect.Ordering r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Ordering;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        if $i0 > 0 goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = r2;

     label2:
        return $r3;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.Ordering: int RIGHT_IS_GREATER> = -1;

        <com.mycila.inject.internal.guava.collect.Ordering: int LEFT_IS_GREATER> = 1;

        return;
    }
}
