public class org.springframework.aop.framework.ReflectiveMethodInvocation extends java.lang.Object implements org.springframework.aop.ProxyMethodInvocation, java.lang.Cloneable
{
    protected final java.lang.Object proxy;
    protected final java.lang.Object target;
    protected final java.lang.reflect.Method method;
    protected java.lang.Object[] arguments;
    private final java.lang.Class targetClass;
    private java.util.Map userAttributes;
    protected final java.util.List interceptorsAndDynamicMethodMatchers;
    private int currentInterceptorIndex;

    protected void <init>(java.lang.Object, java.lang.Object, java.lang.reflect.Method, java.lang.Object[], java.lang.Class, java.util.List)
    {
        java.lang.Object[] r6;
        org.springframework.aop.framework.ReflectiveMethodInvocation r0;
        java.util.List r7;
        int $i1;
        java.lang.Object r1, r2;
        java.lang.Class r3;
        java.lang.reflect.Method r4, $r5;

        r0 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.reflect.Method;

        r6 := @parameter3: java.lang.Object[];

        r3 := @parameter4: java.lang.Class;

        r7 := @parameter5: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) -1;

        r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: int currentInterceptorIndex> = $i1;

        r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object proxy> = r1;

        r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object target> = r2;

        r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Class targetClass> = r3;

        $r5 = staticinvoke <org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>(r4);

        r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.reflect.Method method> = $r5;

        r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object[] arguments> = r6;

        r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.List interceptorsAndDynamicMethodMatchers> = r7;

        return;
    }

    public final java.lang.Object getProxy()
    {
        java.lang.Object $r1;
        org.springframework.aop.framework.ReflectiveMethodInvocation r0;

        r0 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        $r1 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object proxy>;

        return $r1;
    }

    public final java.lang.Object getThis()
    {
        java.lang.Object $r1;
        org.springframework.aop.framework.ReflectiveMethodInvocation r0;

        r0 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        $r1 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object target>;

        return $r1;
    }

    public final java.lang.reflect.AccessibleObject getStaticPart()
    {
        java.lang.reflect.Method $r1;
        org.springframework.aop.framework.ReflectiveMethodInvocation r0;

        r0 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        $r1 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.reflect.Method method>;

        return $r1;
    }

    public final java.lang.reflect.Method getMethod()
    {
        java.lang.reflect.Method $r1;
        org.springframework.aop.framework.ReflectiveMethodInvocation r0;

        r0 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        $r1 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.reflect.Method method>;

        return $r1;
    }

    public final java.lang.Object[] getArguments()
    {
        java.lang.Object[] $r1, $r2;
        org.springframework.aop.framework.ReflectiveMethodInvocation r0;

        r0 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        $r1 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object[] arguments>;

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object[] arguments>;

        goto label2;

     label1:
        $r2 = newarray (java.lang.Object)[0];

     label2:
        return $r2;
    }

    public void setArguments(java.lang.Object[])
    {
        java.lang.Object[] r1;
        org.springframework.aop.framework.ReflectiveMethodInvocation r0;

        r0 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        r1 := @parameter0: java.lang.Object[];

        r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object[] arguments> = r1;

        return;
    }

    public java.lang.Object proceed() throws java.lang.Throwable
    {
        java.lang.Object[] $r7;
        org.springframework.aop.framework.ReflectiveMethodInvocation r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.reflect.Method $r9;
        org.springframework.aop.MethodMatcher $r10;
        boolean $z0, $z1;
        org.springframework.aop.framework.InterceptorAndDynamicMethodMatcher r6;
        org.aopalliance.intercept.MethodInterceptor $r4, $r12;
        java.util.List $r1, $r2;
        java.lang.Object $r3, $r5, $r11, $r13, $r14;
        java.lang.Class $r8;

        r0 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        $i0 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: int currentInterceptorIndex>;

        $r1 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.List interceptorsAndDynamicMethodMatchers>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        if $i0 != $i2 goto label1;

        $r14 = virtualinvoke r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object invokeJoinpoint()>();

        return $r14;

     label1:
        $r2 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.List interceptorsAndDynamicMethodMatchers>;

        $i3 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: int currentInterceptorIndex>;

        $i4 = $i3 + 1;

        r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: int currentInterceptorIndex> = $i4;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i4);

        $z0 = $r3 instanceof org.springframework.aop.framework.InterceptorAndDynamicMethodMatcher;

        if $z0 == 0 goto label3;

        r6 = (org.springframework.aop.framework.InterceptorAndDynamicMethodMatcher) $r3;

        $r10 = r6.<org.springframework.aop.framework.InterceptorAndDynamicMethodMatcher: org.springframework.aop.MethodMatcher methodMatcher>;

        $r9 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.reflect.Method method>;

        $r8 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Class targetClass>;

        $r7 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object[] arguments>;

        $z1 = interfaceinvoke $r10.<org.springframework.aop.MethodMatcher: boolean matches(java.lang.reflect.Method,java.lang.Class,java.lang.Object[])>($r9, $r8, $r7);

        if $z1 == 0 goto label2;

        $r12 = r6.<org.springframework.aop.framework.InterceptorAndDynamicMethodMatcher: org.aopalliance.intercept.MethodInterceptor interceptor>;

        $r13 = interfaceinvoke $r12.<org.aopalliance.intercept.MethodInterceptor: java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation)>(r0);

        return $r13;

     label2:
        $r11 = virtualinvoke r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object proceed()>();

        return $r11;

     label3:
        $r4 = (org.aopalliance.intercept.MethodInterceptor) $r3;

        $r5 = interfaceinvoke $r4.<org.aopalliance.intercept.MethodInterceptor: java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation)>(r0);

        return $r5;
    }

    protected java.lang.Object invokeJoinpoint() throws java.lang.Throwable
    {
        java.lang.Object[] $r1;
        org.springframework.aop.framework.ReflectiveMethodInvocation r0;
        java.lang.Object $r3, $r4;
        java.lang.reflect.Method $r2;

        r0 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        $r3 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object target>;

        $r2 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.reflect.Method method>;

        $r1 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object[] arguments>;

        $r4 = staticinvoke <org.springframework.aop.support.AopUtils: java.lang.Object invokeJoinpointUsingReflection(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>($r3, $r2, $r1);

        return $r4;
    }

    public org.aopalliance.intercept.MethodInvocation invocableClone()
    {
        java.lang.Object[] $r1, $r3, $r4, $r5, r6;
        org.springframework.aop.framework.ReflectiveMethodInvocation r0;
        org.aopalliance.intercept.MethodInvocation $r2;
        int $i0, $i1;

        r0 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        r6 = (java.lang.Object[]) null;

        $r1 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object[] arguments>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object[] arguments>;

        $i0 = lengthof $r3;

        r6 = newarray (java.lang.Object)[$i0];

        $r5 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object[] arguments>;

        $r4 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object[] arguments>;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r6, 0, $i1);

     label1:
        $r2 = virtualinvoke r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: org.aopalliance.intercept.MethodInvocation invocableClone(java.lang.Object[])>(r6);

        return $r2;
    }

    public org.aopalliance.intercept.MethodInvocation invocableClone(java.lang.Object[])
    {
        java.lang.IllegalStateException $r7;
        java.lang.Object[] r3;
        org.springframework.aop.framework.ReflectiveMethodInvocation r0, $r5;
        java.util.HashMap $r4;
        java.lang.CloneNotSupportedException $r6;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r8, $r10, $r11, $r12;
        java.lang.Class $r9;
        java.lang.String $r13;

        r0 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        r3 := @parameter0: java.lang.Object[];

        $r1 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.Map userAttributes>;

        if $r1 != null goto label1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.Map userAttributes> = $r4;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (org.springframework.aop.framework.ReflectiveMethodInvocation) $r2;

        $r5.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object[] arguments> = r3;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Should be able to clone object of type [");

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r7;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public void setUserAttribute(java.lang.String, java.lang.Object)
    {
        org.springframework.aop.framework.ReflectiveMethodInvocation r1;
        java.util.HashMap $r7;
        java.util.Map $r2, $r4, $r5, $r6;
        java.lang.Object r0;
        java.lang.String r3;

        r1 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        if r0 == null goto label2;

        $r5 = r1.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.Map userAttributes>;

        if $r5 != null goto label1;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r1.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.Map userAttributes> = $r7;

     label1:
        $r6 = r1.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.Map userAttributes>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r0);

        goto label3;

     label2:
        $r2 = r1.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.Map userAttributes>;

        if $r2 == null goto label3;

        $r4 = r1.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.Map userAttributes>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

     label3:
        return;
    }

    public java.lang.Object getUserAttribute(java.lang.String)
    {
        org.springframework.aop.framework.ReflectiveMethodInvocation r0;
        java.util.Map $r1, $r3;
        java.lang.Object $r4;
        java.lang.String r2;

        r0 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.Map userAttributes>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.Map userAttributes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public java.util.Map getUserAttributes()
    {
        org.springframework.aop.framework.ReflectiveMethodInvocation r0;
        java.util.Map $r1, $r2;
        java.util.HashMap $r3;

        r0 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        $r1 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.Map userAttributes>;

        if $r1 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.Map userAttributes> = $r3;

     label1:
        $r2 = r0.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.util.Map userAttributes>;

        return $r2;
    }

    public java.lang.String toString()
    {
        org.springframework.aop.framework.ReflectiveMethodInvocation r1;
        java.lang.StringBuilder $r0, $r3, $r5, $r9;
        java.lang.Object $r4, $r6;
        java.lang.Class $r7;
        java.lang.String $r8, $r10;
        java.lang.reflect.Method $r2;

        r1 := @this: org.springframework.aop.framework.ReflectiveMethodInvocation;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("ReflectiveMethodInvocation: ");

        $r2 = r1.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.reflect.Method method>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r4 = r1.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object target>;

        if $r4 != null goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("target is null");

        goto label2;

     label1:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("target is of class [");

        $r6 = r1.<org.springframework.aop.framework.ReflectiveMethodInvocation: java.lang.Object target>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

     label2:
        $r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }
}
