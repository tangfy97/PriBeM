public class org.apache.http.impl.client.DefaultRedirectStrategy extends java.lang.Object implements org.apache.http.client.RedirectStrategy
{
    private final org.apache.commons.logging.Log log;
    public static final java.lang.String REDIRECT_LOCATIONS;
    private static final java.lang.String[] REDIRECT_METHODS;

    public void <init>()
    {
        org.apache.http.impl.client.DefaultRedirectStrategy r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.apache.http.impl.client.DefaultRedirectStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.impl.client.DefaultRedirectStrategy: org.apache.commons.logging.Log log> = $r2;

        return;
    }

    public boolean isRedirected(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.ProtocolException
    {
        java.lang.IllegalArgumentException $r7, $r8;
        org.apache.http.HttpRequest r0;
        org.apache.http.StatusLine $r2;
        org.apache.http.Header $r5;
        org.apache.http.RequestLine $r3;
        org.apache.http.protocol.HttpContext r9;
        int $i0;
        org.apache.http.impl.client.DefaultRedirectStrategy r6;
        org.apache.http.HttpResponse r1;
        java.lang.String $r4;
        boolean $z0, $z1, $z2;

        r6 := @this: org.apache.http.impl.client.DefaultRedirectStrategy;

        r0 := @parameter0: org.apache.http.HttpRequest;

        r1 := @parameter1: org.apache.http.HttpResponse;

        r9 := @parameter2: org.apache.http.protocol.HttpContext;

        if r0 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r8;

     label1:
        if r1 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r7;

     label2:
        $r2 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r2.<org.apache.http.StatusLine: int getStatusCode()>();

        $r3 = interfaceinvoke r0.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r4 = interfaceinvoke $r3.<org.apache.http.RequestLine: java.lang.String getMethod()>();

        $r5 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.Header getFirstHeader(java.lang.String)>("location");

        tableswitch($i0)
        {
            case 301: goto label6;
            case 302: goto label3;
            case 303: goto label7;
            case 304: goto label8;
            case 305: goto label8;
            case 306: goto label8;
            case 307: goto label6;
            default: goto label8;
        };

     label3:
        $z0 = virtualinvoke r6.<org.apache.http.impl.client.DefaultRedirectStrategy: boolean isRedirectable(java.lang.String)>($r4);

        if $z0 == 0 goto label4;

        if $r5 == null goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;

     label6:
        $z1 = virtualinvoke r6.<org.apache.http.impl.client.DefaultRedirectStrategy: boolean isRedirectable(java.lang.String)>($r4);

        return $z1;

     label7:
        return 1;

     label8:
        return 0;
    }

    public java.net.URI getLocationURI(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.ProtocolException
    {
        org.apache.http.ProtocolException $r24, $r36, $r47;
        java.lang.IllegalStateException $r23;
        java.net.URISyntaxException $r46;
        org.apache.http.Header $r3;
        org.apache.http.StatusLine $r39;
        org.apache.http.RequestLine $r20;
        org.apache.http.impl.client.DefaultRedirectStrategy r5;
        java.net.URI $r7, $r9, $r19, $r22, r49;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.http.impl.client.RedirectLocations $r17, r51;
        org.apache.http.HttpRequest r0;
        org.apache.http.client.CircularRedirectException $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r25, $r26, $r27, $r28, $r30, $r32, $r33, $r34, $r37, $r38, $r40, $r41;
        java.lang.String $r4, $r16, $r21, $r29, $r35, $r42, $r48;
        java.lang.IllegalArgumentException $r43, $r44, $r45;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.params.HttpParams $r8;
        org.apache.http.HttpResponse r1;
        org.apache.commons.logging.Log $r6, $r31;
        java.lang.Object $r10, $r18;
        org.apache.http.HttpHost r50;

        r5 := @this: org.apache.http.impl.client.DefaultRedirectStrategy;

        r0 := @parameter0: org.apache.http.HttpRequest;

        r1 := @parameter1: org.apache.http.HttpResponse;

        r2 := @parameter2: org.apache.http.protocol.HttpContext;

        if r0 != null goto label01;

        $r45 = new java.lang.IllegalArgumentException;

        specialinvoke $r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r45;

     label01:
        if r1 != null goto label02;

        $r44 = new java.lang.IllegalArgumentException;

        specialinvoke $r44.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r44;

     label02:
        if r2 != null goto label03;

        $r43 = new java.lang.IllegalArgumentException;

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r43;

     label03:
        $r3 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.Header getFirstHeader(java.lang.String)>("location");

        if $r3 != null goto label04;

        $r36 = new org.apache.http.ProtocolException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received redirect response ");

        $r39 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but no location header");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r42);

        throw $r36;

     label04:
        $r4 = interfaceinvoke $r3.<org.apache.http.Header: java.lang.String getValue()>();

        $r6 = r5.<org.apache.http.impl.client.DefaultRedirectStrategy: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label05;

        $r31 = r5.<org.apache.http.impl.client.DefaultRedirectStrategy: org.apache.commons.logging.Log log>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Redirect requested to location \'");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r31.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r35);

     label05:
        $r7 = virtualinvoke r5.<org.apache.http.impl.client.DefaultRedirectStrategy: java.net.URI createLocationURI(java.lang.String)>($r4);

        $r8 = interfaceinvoke r0.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

     label06:
        $r9 = staticinvoke <org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI)>($r7);

        r49 = $r9;

        $z1 = virtualinvoke $r9.<java.net.URI: boolean isAbsolute()>();

        if $z1 != 0 goto label09;

        $z4 = interfaceinvoke $r8.<org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>("http.protocol.reject-relative-redirect");

        if $z4 == 0 goto label07;

        $r24 = new org.apache.http.ProtocolException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Relative redirect location \'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not allowed");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label07:
        $r18 = interfaceinvoke r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.target_host");

        r50 = (org.apache.http.HttpHost) $r18;

        if r50 != null goto label08;

        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Target host not available in the HTTP context");

        throw $r23;

     label08:
        $r19 = new java.net.URI;

        $r20 = interfaceinvoke r0.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r21 = interfaceinvoke $r20.<org.apache.http.RequestLine: java.lang.String getUri()>();

        specialinvoke $r19.<java.net.URI: void <init>(java.lang.String)>($r21);

        $r22 = staticinvoke <org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean)>($r19, r50, 1);

        r49 = staticinvoke <org.apache.http.client.utils.URIUtils: java.net.URI resolve(java.net.URI,java.net.URI)>($r22, $r9);

     label09:
        goto label11;

     label10:
        $r46 := @caughtexception;

        $r47 = new org.apache.http.ProtocolException;

        $r48 = virtualinvoke $r46.<java.net.URISyntaxException: java.lang.String getMessage()>();

        specialinvoke $r47.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r48, $r46);

        throw $r47;

     label11:
        $r10 = interfaceinvoke r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.protocol.redirect-locations");

        r51 = (org.apache.http.impl.client.RedirectLocations) $r10;

        if r51 != null goto label12;

        $r17 = new org.apache.http.impl.client.RedirectLocations;

        specialinvoke $r17.<org.apache.http.impl.client.RedirectLocations: void <init>()>();

        r51 = $r17;

        interfaceinvoke r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.protocol.redirect-locations", $r17);

     label12:
        $z2 = interfaceinvoke $r8.<org.apache.http.params.HttpParams: boolean isParameterFalse(java.lang.String)>("http.protocol.allow-circular-redirects");

        if $z2 == 0 goto label13;

        $z3 = virtualinvoke r51.<org.apache.http.impl.client.RedirectLocations: boolean contains(java.net.URI)>(r49);

        if $z3 == 0 goto label13;

        $r11 = new org.apache.http.client.CircularRedirectException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Circular redirect to \'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r49);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.http.client.CircularRedirectException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label13:
        virtualinvoke r51.<org.apache.http.impl.client.RedirectLocations: void add(java.net.URI)>(r49);

        return r49;

        catch java.net.URISyntaxException from label06 to label09 with label10;
    }

    protected java.net.URI createLocationURI(java.lang.String) throws org.apache.http.ProtocolException
    {
        org.apache.http.ProtocolException $r4;
        java.net.URISyntaxException $r3;
        org.apache.http.impl.client.DefaultRedirectStrategy r9;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.net.URI $r0, $r2;
        java.lang.String r1, $r8;

        r9 := @this: org.apache.http.impl.client.DefaultRedirectStrategy;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.net.URI;

        specialinvoke $r0.<java.net.URI: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<java.net.URI: java.net.URI normalize()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.http.ProtocolException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid redirect URI: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r3);

        throw $r4;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    protected boolean isRedirectable(java.lang.String)
    {
        int i0, i1;
        org.apache.http.impl.client.DefaultRedirectStrategy r3;
        java.lang.String[] r0;
        java.lang.String r1, r2;
        boolean $z0;

        r3 := @this: org.apache.http.impl.client.DefaultRedirectStrategy;

        r2 := @parameter0: java.lang.String;

        r0 = <org.apache.http.impl.client.DefaultRedirectStrategy: java.lang.String[] REDIRECT_METHODS>;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = r0[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public org.apache.http.client.methods.HttpUriRequest getRedirect(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.ProtocolException
    {
        org.apache.http.client.methods.HttpPost $r16;
        org.apache.http.client.methods.HttpPatch $r9;
        org.apache.http.client.methods.HttpHead $r19;
        org.apache.http.client.methods.HttpUriRequest $r10, $r15, $r17;
        org.apache.http.StatusLine $r7;
        org.apache.http.client.methods.HttpDelete $r13;
        org.apache.http.RequestLine $r5;
        org.apache.http.impl.client.DefaultRedirectStrategy r0;
        int $i0;
        java.net.URI $r4;
        java.lang.String $r6;
        org.apache.http.client.methods.HttpTrace $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.http.client.methods.HttpOptions $r11;
        org.apache.http.HttpRequest r1;
        org.apache.http.client.methods.HttpPut $r14;
        org.apache.http.client.methods.HttpGet $r8, $r18;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.HttpResponse r2;

        r0 := @this: org.apache.http.impl.client.DefaultRedirectStrategy;

        r1 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.HttpResponse;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.DefaultRedirectStrategy: java.net.URI getLocationURI(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r1, r2, r3);

        $r5 = interfaceinvoke r1.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r6 = interfaceinvoke $r5.<org.apache.http.RequestLine: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("HEAD");

        if $z0 == 0 goto label1;

        $r19 = new org.apache.http.client.methods.HttpHead;

        specialinvoke $r19.<org.apache.http.client.methods.HttpHead: void <init>(java.net.URI)>($r4);

        return $r19;

     label1:
        $z1 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("GET");

        if $z1 == 0 goto label2;

        $r18 = new org.apache.http.client.methods.HttpGet;

        specialinvoke $r18.<org.apache.http.client.methods.HttpGet: void <init>(java.net.URI)>($r4);

        return $r18;

     label2:
        $r7 = interfaceinvoke r2.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r7.<org.apache.http.StatusLine: int getStatusCode()>();

        if $i0 != 307 goto label8;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("POST");

        if $z2 == 0 goto label3;

        $r16 = new org.apache.http.client.methods.HttpPost;

        specialinvoke $r16.<org.apache.http.client.methods.HttpPost: void <init>(java.net.URI)>($r4);

        $r17 = specialinvoke r0.<org.apache.http.impl.client.DefaultRedirectStrategy: org.apache.http.client.methods.HttpUriRequest copyEntity(org.apache.http.client.methods.HttpEntityEnclosingRequestBase,org.apache.http.HttpRequest)>($r16, r1);

        return $r17;

     label3:
        $z3 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PUT");

        if $z3 == 0 goto label4;

        $r14 = new org.apache.http.client.methods.HttpPut;

        specialinvoke $r14.<org.apache.http.client.methods.HttpPut: void <init>(java.net.URI)>($r4);

        $r15 = specialinvoke r0.<org.apache.http.impl.client.DefaultRedirectStrategy: org.apache.http.client.methods.HttpUriRequest copyEntity(org.apache.http.client.methods.HttpEntityEnclosingRequestBase,org.apache.http.HttpRequest)>($r14, r1);

        return $r15;

     label4:
        $z4 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("DELETE");

        if $z4 == 0 goto label5;

        $r13 = new org.apache.http.client.methods.HttpDelete;

        specialinvoke $r13.<org.apache.http.client.methods.HttpDelete: void <init>(java.net.URI)>($r4);

        return $r13;

     label5:
        $z5 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TRACE");

        if $z5 == 0 goto label6;

        $r12 = new org.apache.http.client.methods.HttpTrace;

        specialinvoke $r12.<org.apache.http.client.methods.HttpTrace: void <init>(java.net.URI)>($r4);

        return $r12;

     label6:
        $z6 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("OPTIONS");

        if $z6 == 0 goto label7;

        $r11 = new org.apache.http.client.methods.HttpOptions;

        specialinvoke $r11.<org.apache.http.client.methods.HttpOptions: void <init>(java.net.URI)>($r4);

        return $r11;

     label7:
        $z7 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PATCH");

        if $z7 == 0 goto label8;

        $r9 = new org.apache.http.client.methods.HttpPatch;

        specialinvoke $r9.<org.apache.http.client.methods.HttpPatch: void <init>(java.net.URI)>($r4);

        $r10 = specialinvoke r0.<org.apache.http.impl.client.DefaultRedirectStrategy: org.apache.http.client.methods.HttpUriRequest copyEntity(org.apache.http.client.methods.HttpEntityEnclosingRequestBase,org.apache.http.HttpRequest)>($r9, r1);

        return $r10;

     label8:
        $r8 = new org.apache.http.client.methods.HttpGet;

        specialinvoke $r8.<org.apache.http.client.methods.HttpGet: void <init>(java.net.URI)>($r4);

        return $r8;
    }

    private org.apache.http.client.methods.HttpUriRequest copyEntity(org.apache.http.client.methods.HttpEntityEnclosingRequestBase, org.apache.http.HttpRequest)
    {
        org.apache.http.HttpEntityEnclosingRequest $r2;
        org.apache.http.client.methods.HttpEntityEnclosingRequestBase r1;
        org.apache.http.HttpEntity $r3;
        org.apache.http.impl.client.DefaultRedirectStrategy r4;
        org.apache.http.HttpRequest r0;
        boolean $z0;

        r4 := @this: org.apache.http.impl.client.DefaultRedirectStrategy;

        r1 := @parameter0: org.apache.http.client.methods.HttpEntityEnclosingRequestBase;

        r0 := @parameter1: org.apache.http.HttpRequest;

        $z0 = r0 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.http.HttpEntityEnclosingRequest) r0;

        $r3 = interfaceinvoke $r2.<org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>();

        virtualinvoke r1.<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)>($r3);

     label1:
        return r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <org.apache.http.impl.client.DefaultRedirectStrategy: java.lang.String REDIRECT_LOCATIONS> = "http.protocol.redirect-locations";

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "GET";

        $r0[1] = "HEAD";

        <org.apache.http.impl.client.DefaultRedirectStrategy: java.lang.String[] REDIRECT_METHODS> = $r0;

        return;
    }
}
