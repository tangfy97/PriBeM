public abstract class org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter extends org.springframework.http.converter.AbstractHttpMessageConverter
{
    private final javax.xml.transform.TransformerFactory transformerFactory;

    protected void <init>()
    {
        org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter r0;
        org.springframework.http.MediaType[] $r1;
        org.springframework.http.MediaType $r2, $r3, $r4;
        javax.xml.transform.TransformerFactory $r5;

        r0 := @this: org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter;

        $r1 = newarray (org.springframework.http.MediaType)[3];

        $r2 = <org.springframework.http.MediaType: org.springframework.http.MediaType APPLICATION_XML>;

        $r1[0] = $r2;

        $r3 = <org.springframework.http.MediaType: org.springframework.http.MediaType TEXT_XML>;

        $r1[1] = $r3;

        $r4 = new org.springframework.http.MediaType;

        specialinvoke $r4.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("application", "*+xml");

        $r1[2] = $r4;

        specialinvoke r0.<org.springframework.http.converter.AbstractHttpMessageConverter: void <init>(org.springframework.http.MediaType[])>($r1);

        $r5 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

        r0.<org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter: javax.xml.transform.TransformerFactory transformerFactory> = $r5;

        return;
    }

    public final java.lang.Object readInternal(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException
    {
        org.springframework.http.HttpInputMessage r2;
        org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter r0;
        org.springframework.http.HttpHeaders $r3;
        javax.xml.transform.stream.StreamSource $r4;
        java.lang.Class r1;
        java.lang.Object $r6;
        java.io.InputStream $r5;

        r0 := @this: org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.http.HttpInputMessage;

        $r3 = interfaceinvoke r2.<org.springframework.http.HttpInputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $r4 = new javax.xml.transform.stream.StreamSource;

        $r5 = interfaceinvoke r2.<org.springframework.http.HttpInputMessage: java.io.InputStream getBody()>();

        specialinvoke $r4.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r5);

        $r6 = virtualinvoke r0.<org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter: java.lang.Object readFromSource(java.lang.Class,org.springframework.http.HttpHeaders,javax.xml.transform.Source)>(r1, $r3, $r4);

        return $r6;
    }

    protected final void writeInternal(java.lang.Object, org.springframework.http.HttpOutputMessage) throws java.io.IOException
    {
        java.io.OutputStream $r5;
        org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter r0;
        org.springframework.http.HttpHeaders $r3;
        javax.xml.transform.stream.StreamResult $r4;
        java.lang.Object r1;
        org.springframework.http.HttpOutputMessage r2;

        r0 := @this: org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.springframework.http.HttpOutputMessage;

        $r3 = interfaceinvoke r2.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $r4 = new javax.xml.transform.stream.StreamResult;

        $r5 = interfaceinvoke r2.<org.springframework.http.HttpOutputMessage: java.io.OutputStream getBody()>();

        specialinvoke $r4.<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>($r5);

        virtualinvoke r0.<org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter: void writeToResult(java.lang.Object,org.springframework.http.HttpHeaders,javax.xml.transform.Result)>(r1, $r3, $r4);

        return;
    }

    protected void transform(javax.xml.transform.Source, javax.xml.transform.Result) throws javax.xml.transform.TransformerException
    {
        javax.xml.transform.Transformer $r2;
        org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter r0;
        javax.xml.transform.Result r4;
        javax.xml.transform.TransformerFactory $r1;
        javax.xml.transform.Source r3;

        r0 := @this: org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter;

        r3 := @parameter0: javax.xml.transform.Source;

        r4 := @parameter1: javax.xml.transform.Result;

        $r1 = r0.<org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter: javax.xml.transform.TransformerFactory transformerFactory>;

        $r2 = virtualinvoke $r1.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        virtualinvoke $r2.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>(r3, r4);

        return;
    }

    protected abstract java.lang.Object readFromSource(java.lang.Class, org.springframework.http.HttpHeaders, javax.xml.transform.Source) throws java.io.IOException;

    protected abstract void writeToResult(java.lang.Object, org.springframework.http.HttpHeaders, javax.xml.transform.Result) throws java.io.IOException;
}
