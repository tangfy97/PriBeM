final class com.google.gson.TypeUtils extends java.lang.Object
{

    static java.lang.reflect.Type getActualTypeForFirstTypeVariable(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType $r8;
        java.lang.String $r7;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.ParameterizedType $r11;
        java.lang.reflect.Type r0, $r9, $r10, $r13;
        java.lang.reflect.Type[] $r12;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        return class "Ljava/lang/Object;";

     label1:
        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label2;

        $r11 = (java.lang.reflect.ParameterizedType) r0;

        $r12 = interfaceinvoke $r11.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r13 = $r12[0];

        return $r13;

     label2:
        $z2 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label3;

        $r8 = (java.lang.reflect.GenericArrayType) r0;

        $r9 = interfaceinvoke $r8.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r10 = staticinvoke <com.google.gson.TypeUtils: java.lang.reflect.Type getActualTypeForFirstTypeVariable(java.lang.reflect.Type)>($r9);

        return $r10;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a Class, ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ParameterizedType, or GenericArrayType. Can\'t extract class.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;
    }

    static boolean isArray(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        java.lang.Class $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.Class) r0;

        $z2 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        return $z2;

     label1:
        $z1 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    static java.lang.Class toRawClass(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType r18;
        java.lang.reflect.WildcardType r19;
        java.lang.String $r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.ParameterizedType r17;
        java.lang.reflect.Type r0, $r9, $r11, $r14;
        java.lang.reflect.Type[] $r8;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.Class $r10, $r12, $r13, $r15, $r16;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r16 = (java.lang.Class) r0;

        return $r16;

     label1:
        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label2;

        r17 = (java.lang.reflect.ParameterizedType) r0;

        $r14 = interfaceinvoke r17.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r15 = staticinvoke <com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>($r14);

        return $r15;

     label2:
        $z2 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label3;

        r18 = (java.lang.reflect.GenericArrayType) r0;

        $r11 = interfaceinvoke r18.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r12 = staticinvoke <com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>($r11);

        $r13 = staticinvoke <com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>($r12);

        return $r13;

     label3:
        $z3 = r0 instanceof java.lang.reflect.WildcardType;

        if $z3 == 0 goto label4;

        r19 = (java.lang.reflect.WildcardType) r0;

        $r8 = interfaceinvoke r19.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r9 = $r8[0];

        $r10 = staticinvoke <com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>($r9);

        return $r10;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a Class, ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ParameterizedType, or GenericArrayType. Can\'t extract class.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;
    }

    static java.lang.Class wrapWithArray(java.lang.Class)
    {
        java.lang.Class r0, $r2;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r0, 0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        return $r2;
    }

    private void <init>()
    {
        com.google.gson.TypeUtils r0;

        r0 := @this: com.google.gson.TypeUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
