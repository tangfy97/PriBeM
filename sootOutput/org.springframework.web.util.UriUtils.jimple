public abstract class org.springframework.web.util.UriUtils extends java.lang.Object
{
    private static final java.util.BitSet SCHEME;
    private static final java.util.BitSet USER_INFO;
    private static final java.util.BitSet HOST;
    private static final java.util.BitSet PORT;
    private static final java.util.BitSet PATH;
    private static final java.util.BitSet SEGMENT;
    private static final java.util.BitSet QUERY;
    private static final java.util.BitSet QUERY_PARAM;
    private static final java.util.BitSet FRAGMENT;
    private static final java.lang.String SCHEME_PATTERN;
    private static final java.lang.String HTTP_PATTERN;
    private static final java.lang.String USERINFO_PATTERN;
    private static final java.lang.String HOST_PATTERN;
    private static final java.lang.String PORT_PATTERN;
    private static final java.lang.String PATH_PATTERN;
    private static final java.lang.String QUERY_PATTERN;
    private static final java.lang.String LAST_PATTERN;
    private static final java.util.regex.Pattern URI_PATTERN;
    private static final java.util.regex.Pattern HTTP_URL_PATTERN;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1;
        int i0, i1, i2;
        java.util.BitSet $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44;

        <org.springframework.web.util.UriUtils: java.lang.String LAST_PATTERN> = "(.*)";

        <org.springframework.web.util.UriUtils: java.lang.String QUERY_PATTERN> = "([^#]*)";

        <org.springframework.web.util.UriUtils: java.lang.String PATH_PATTERN> = "([^?#]*)";

        <org.springframework.web.util.UriUtils: java.lang.String PORT_PATTERN> = "(\\d*)";

        <org.springframework.web.util.UriUtils: java.lang.String HOST_PATTERN> = "([^/?#:]*)";

        <org.springframework.web.util.UriUtils: java.lang.String USERINFO_PATTERN> = "([^@/]*)";

        <org.springframework.web.util.UriUtils: java.lang.String HTTP_PATTERN> = "(http|https):";

        <org.springframework.web.util.UriUtils: java.lang.String SCHEME_PATTERN> = "([^:/?#]+):";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(([^:/?#]+):)?(//(([^@/]*)@)?([^/?#:]*)(:(\\d*))?)?([^?#]*)(\\?([^#]*))?(#(.*))?");

        <org.springframework.web.util.UriUtils: java.util.regex.Pattern URI_PATTERN> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(http|https):(//(([^@/]*)@)?([^/?#:]*)(:(\\d*))?)?([^?#]*)(\\?(.*))?");

        <org.springframework.web.util.UriUtils: java.util.regex.Pattern HTTP_URL_PATTERN> = $r1;

        $r2 = new java.util.BitSet;

        specialinvoke $r2.<java.util.BitSet: void <init>(int)>(256);

        i0 = 97;

        goto label2;

     label1:
        virtualinvoke $r2.<java.util.BitSet: void set(int)>(i0);

        i0 = i0 + 1;

     label2:
        if i0 <= 122 goto label1;

        i1 = 65;

        goto label4;

     label3:
        virtualinvoke $r2.<java.util.BitSet: void set(int)>(i1);

        i1 = i1 + 1;

     label4:
        if i1 <= 90 goto label3;

        $r3 = new java.util.BitSet;

        specialinvoke $r3.<java.util.BitSet: void <init>(int)>(256);

        i2 = 48;

        goto label6;

     label5:
        virtualinvoke $r3.<java.util.BitSet: void set(int)>(i2);

        i2 = i2 + 1;

     label6:
        if i2 <= 57 goto label5;

        $r4 = new java.util.BitSet;

        specialinvoke $r4.<java.util.BitSet: void <init>(int)>(256);

        virtualinvoke $r4.<java.util.BitSet: void set(int)>(58);

        virtualinvoke $r4.<java.util.BitSet: void set(int)>(47);

        virtualinvoke $r4.<java.util.BitSet: void set(int)>(63);

        virtualinvoke $r4.<java.util.BitSet: void set(int)>(35);

        virtualinvoke $r4.<java.util.BitSet: void set(int)>(91);

        virtualinvoke $r4.<java.util.BitSet: void set(int)>(93);

        virtualinvoke $r4.<java.util.BitSet: void set(int)>(64);

        $r5 = new java.util.BitSet;

        specialinvoke $r5.<java.util.BitSet: void <init>(int)>(256);

        virtualinvoke $r5.<java.util.BitSet: void set(int)>(33);

        virtualinvoke $r5.<java.util.BitSet: void set(int)>(36);

        virtualinvoke $r5.<java.util.BitSet: void set(int)>(38);

        virtualinvoke $r5.<java.util.BitSet: void set(int)>(39);

        virtualinvoke $r5.<java.util.BitSet: void set(int)>(40);

        virtualinvoke $r5.<java.util.BitSet: void set(int)>(41);

        virtualinvoke $r5.<java.util.BitSet: void set(int)>(42);

        virtualinvoke $r5.<java.util.BitSet: void set(int)>(43);

        virtualinvoke $r5.<java.util.BitSet: void set(int)>(44);

        virtualinvoke $r5.<java.util.BitSet: void set(int)>(59);

        virtualinvoke $r5.<java.util.BitSet: void set(int)>(61);

        $r6 = new java.util.BitSet;

        specialinvoke $r6.<java.util.BitSet: void <init>(int)>(256);

        virtualinvoke $r6.<java.util.BitSet: void or(java.util.BitSet)>($r4);

        virtualinvoke $r6.<java.util.BitSet: void or(java.util.BitSet)>($r5);

        $r7 = new java.util.BitSet;

        specialinvoke $r7.<java.util.BitSet: void <init>(int)>(256);

        virtualinvoke $r7.<java.util.BitSet: void or(java.util.BitSet)>($r2);

        virtualinvoke $r7.<java.util.BitSet: void or(java.util.BitSet)>($r3);

        virtualinvoke $r7.<java.util.BitSet: void set(int)>(45);

        virtualinvoke $r7.<java.util.BitSet: void set(int)>(46);

        virtualinvoke $r7.<java.util.BitSet: void set(int)>(95);

        virtualinvoke $r7.<java.util.BitSet: void set(int)>(126);

        $r8 = new java.util.BitSet;

        specialinvoke $r8.<java.util.BitSet: void <init>(int)>(256);

        <org.springframework.web.util.UriUtils: java.util.BitSet SCHEME> = $r8;

        $r9 = <org.springframework.web.util.UriUtils: java.util.BitSet SCHEME>;

        virtualinvoke $r9.<java.util.BitSet: void or(java.util.BitSet)>($r2);

        $r10 = <org.springframework.web.util.UriUtils: java.util.BitSet SCHEME>;

        virtualinvoke $r10.<java.util.BitSet: void or(java.util.BitSet)>($r3);

        $r11 = <org.springframework.web.util.UriUtils: java.util.BitSet SCHEME>;

        virtualinvoke $r11.<java.util.BitSet: void set(int)>(43);

        $r12 = <org.springframework.web.util.UriUtils: java.util.BitSet SCHEME>;

        virtualinvoke $r12.<java.util.BitSet: void set(int)>(45);

        $r13 = <org.springframework.web.util.UriUtils: java.util.BitSet SCHEME>;

        virtualinvoke $r13.<java.util.BitSet: void set(int)>(46);

        $r14 = new java.util.BitSet;

        specialinvoke $r14.<java.util.BitSet: void <init>(int)>(256);

        <org.springframework.web.util.UriUtils: java.util.BitSet USER_INFO> = $r14;

        $r15 = <org.springframework.web.util.UriUtils: java.util.BitSet USER_INFO>;

        virtualinvoke $r15.<java.util.BitSet: void or(java.util.BitSet)>($r7);

        $r16 = <org.springframework.web.util.UriUtils: java.util.BitSet USER_INFO>;

        virtualinvoke $r16.<java.util.BitSet: void or(java.util.BitSet)>($r5);

        $r17 = <org.springframework.web.util.UriUtils: java.util.BitSet USER_INFO>;

        virtualinvoke $r17.<java.util.BitSet: void set(int)>(58);

        $r18 = new java.util.BitSet;

        specialinvoke $r18.<java.util.BitSet: void <init>(int)>(256);

        <org.springframework.web.util.UriUtils: java.util.BitSet HOST> = $r18;

        $r19 = <org.springframework.web.util.UriUtils: java.util.BitSet HOST>;

        virtualinvoke $r19.<java.util.BitSet: void or(java.util.BitSet)>($r7);

        $r20 = <org.springframework.web.util.UriUtils: java.util.BitSet HOST>;

        virtualinvoke $r20.<java.util.BitSet: void or(java.util.BitSet)>($r5);

        $r21 = new java.util.BitSet;

        specialinvoke $r21.<java.util.BitSet: void <init>(int)>(256);

        <org.springframework.web.util.UriUtils: java.util.BitSet PORT> = $r21;

        $r22 = <org.springframework.web.util.UriUtils: java.util.BitSet PORT>;

        virtualinvoke $r22.<java.util.BitSet: void or(java.util.BitSet)>($r3);

        $r23 = new java.util.BitSet;

        specialinvoke $r23.<java.util.BitSet: void <init>(int)>(256);

        virtualinvoke $r23.<java.util.BitSet: void or(java.util.BitSet)>($r7);

        virtualinvoke $r23.<java.util.BitSet: void or(java.util.BitSet)>($r5);

        virtualinvoke $r23.<java.util.BitSet: void set(int)>(58);

        virtualinvoke $r23.<java.util.BitSet: void set(int)>(64);

        $r24 = new java.util.BitSet;

        specialinvoke $r24.<java.util.BitSet: void <init>(int)>(256);

        <org.springframework.web.util.UriUtils: java.util.BitSet SEGMENT> = $r24;

        $r25 = <org.springframework.web.util.UriUtils: java.util.BitSet SEGMENT>;

        virtualinvoke $r25.<java.util.BitSet: void or(java.util.BitSet)>($r23);

        $r26 = new java.util.BitSet;

        specialinvoke $r26.<java.util.BitSet: void <init>(int)>(256);

        <org.springframework.web.util.UriUtils: java.util.BitSet PATH> = $r26;

        $r28 = <org.springframework.web.util.UriUtils: java.util.BitSet PATH>;

        $r27 = <org.springframework.web.util.UriUtils: java.util.BitSet SEGMENT>;

        virtualinvoke $r28.<java.util.BitSet: void or(java.util.BitSet)>($r27);

        $r29 = <org.springframework.web.util.UriUtils: java.util.BitSet PATH>;

        virtualinvoke $r29.<java.util.BitSet: void set(int)>(47);

        $r30 = new java.util.BitSet;

        specialinvoke $r30.<java.util.BitSet: void <init>(int)>(256);

        <org.springframework.web.util.UriUtils: java.util.BitSet QUERY> = $r30;

        $r31 = <org.springframework.web.util.UriUtils: java.util.BitSet QUERY>;

        virtualinvoke $r31.<java.util.BitSet: void or(java.util.BitSet)>($r23);

        $r32 = <org.springframework.web.util.UriUtils: java.util.BitSet QUERY>;

        virtualinvoke $r32.<java.util.BitSet: void set(int)>(47);

        $r33 = <org.springframework.web.util.UriUtils: java.util.BitSet QUERY>;

        virtualinvoke $r33.<java.util.BitSet: void set(int)>(63);

        $r34 = new java.util.BitSet;

        specialinvoke $r34.<java.util.BitSet: void <init>(int)>(256);

        <org.springframework.web.util.UriUtils: java.util.BitSet QUERY_PARAM> = $r34;

        $r35 = <org.springframework.web.util.UriUtils: java.util.BitSet QUERY_PARAM>;

        virtualinvoke $r35.<java.util.BitSet: void or(java.util.BitSet)>($r23);

        $r36 = <org.springframework.web.util.UriUtils: java.util.BitSet QUERY_PARAM>;

        virtualinvoke $r36.<java.util.BitSet: void set(int)>(47);

        $r37 = <org.springframework.web.util.UriUtils: java.util.BitSet QUERY_PARAM>;

        virtualinvoke $r37.<java.util.BitSet: void set(int)>(63);

        $r38 = <org.springframework.web.util.UriUtils: java.util.BitSet QUERY_PARAM>;

        virtualinvoke $r38.<java.util.BitSet: void clear(int)>(61);

        $r39 = <org.springframework.web.util.UriUtils: java.util.BitSet QUERY_PARAM>;

        virtualinvoke $r39.<java.util.BitSet: void clear(int)>(43);

        $r40 = <org.springframework.web.util.UriUtils: java.util.BitSet QUERY_PARAM>;

        virtualinvoke $r40.<java.util.BitSet: void clear(int)>(38);

        $r41 = new java.util.BitSet;

        specialinvoke $r41.<java.util.BitSet: void <init>(int)>(256);

        <org.springframework.web.util.UriUtils: java.util.BitSet FRAGMENT> = $r41;

        $r42 = <org.springframework.web.util.UriUtils: java.util.BitSet FRAGMENT>;

        virtualinvoke $r42.<java.util.BitSet: void or(java.util.BitSet)>($r23);

        $r43 = <org.springframework.web.util.UriUtils: java.util.BitSet FRAGMENT>;

        virtualinvoke $r43.<java.util.BitSet: void set(int)>(47);

        $r44 = <org.springframework.web.util.UriUtils: java.util.BitSet FRAGMENT>;

        virtualinvoke $r44.<java.util.BitSet: void set(int)>(63);

        return;
    }

    public void <init>()
    {
        org.springframework.web.util.UriUtils r0;

        r0 := @this: org.springframework.web.util.UriUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String encodeUri(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.util.regex.Matcher $r3;
        java.lang.String r0, r1, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.util.regex.Pattern $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'uri\' must not be null");

        staticinvoke <org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>(r1, "\'encoding\' must not be empty");

        $r2 = <org.springframework.web.util.UriUtils: java.util.regex.Pattern URI_PATTERN>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r10 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $r11 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(5);

        $r12 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(6);

        $r13 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(8);

        $r14 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(9);

        $r15 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(11);

        $r16 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(13);

        $r17 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encodeUriComponents(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, r1);

        return $r17;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a valid URI");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;
    }

    public static java.lang.String encodeHttpUrl(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.util.regex.Matcher $r3;
        java.lang.String r0, r1, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.util.regex.Pattern $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'httpUrl\' must not be null");

        staticinvoke <org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>(r1, "\'encoding\' must not be empty");

        $r2 = <org.springframework.web.util.UriUtils: java.util.regex.Pattern HTTP_URL_PATTERN>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r10 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r11 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        $r12 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(5);

        $r13 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(7);

        $r14 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(8);

        $r15 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(10);

        $r16 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encodeUriComponents(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r9, $r10, $r11, $r12, $r13, $r14, $r15, null, r1);

        return $r16;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a valid HTTP URL");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;
    }

    public static java.lang.String encodeUriComponents(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.lang.String r0, r2, r3, r4, r5, r6, $r7, $r8, $r9, r10, r11, r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.StringBuilder $r1;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.String;

        r11 := @parameter3: java.lang.String;

        r12 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String;

        r5 := @parameter6: java.lang.String;

        r6 := @parameter7: java.lang.String;

        r0 := @parameter8: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>(r0, "\'encoding\' must not be empty");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        if r2 == null goto label1;

        $r16 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encodeScheme(java.lang.String,java.lang.String)>(r2, r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

     label1:
        if r3 == null goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("//");

        if r10 == null goto label2;

        $r15 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encodeUserInfo(java.lang.String,java.lang.String)>(r10, r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

     label2:
        if r11 == null goto label3;

        $r14 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encodeHost(java.lang.String,java.lang.String)>(r11, r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

     label3:
        if r12 == null goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r13 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encodePort(java.lang.String,java.lang.String)>(r12, r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

     label4:
        $r17 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encodePath(java.lang.String,java.lang.String)>(r4, r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        if r5 == null goto label5;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63);

        $r9 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encodeQuery(java.lang.String,java.lang.String)>(r5, r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label5:
        if r6 == null goto label6;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        $r8 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encodeFragment(java.lang.String,java.lang.String)>(r6, r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label6:
        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String encodeScheme(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.lang.String r0, r1, $r3;
        java.util.BitSet $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.springframework.web.util.UriUtils: java.util.BitSet SCHEME>;

        $r3 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encode(java.lang.String,java.lang.String,java.util.BitSet)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.String encodeUserInfo(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.lang.String r0, r1, $r3;
        java.util.BitSet $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.springframework.web.util.UriUtils: java.util.BitSet USER_INFO>;

        $r3 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encode(java.lang.String,java.lang.String,java.util.BitSet)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.String encodeHost(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.lang.String r0, r1, $r3;
        java.util.BitSet $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.springframework.web.util.UriUtils: java.util.BitSet HOST>;

        $r3 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encode(java.lang.String,java.lang.String,java.util.BitSet)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.String encodePort(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.lang.String r0, r1, $r3;
        java.util.BitSet $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.springframework.web.util.UriUtils: java.util.BitSet PORT>;

        $r3 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encode(java.lang.String,java.lang.String,java.util.BitSet)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.String encodePath(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.lang.String r0, r1, $r3;
        java.util.BitSet $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.springframework.web.util.UriUtils: java.util.BitSet PATH>;

        $r3 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encode(java.lang.String,java.lang.String,java.util.BitSet)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.String encodePathSegment(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.lang.String r0, r1, $r3;
        java.util.BitSet $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.springframework.web.util.UriUtils: java.util.BitSet SEGMENT>;

        $r3 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encode(java.lang.String,java.lang.String,java.util.BitSet)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.String encodeQuery(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.lang.String r0, r1, $r3;
        java.util.BitSet $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.springframework.web.util.UriUtils: java.util.BitSet QUERY>;

        $r3 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encode(java.lang.String,java.lang.String,java.util.BitSet)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.String encodeQueryParam(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.lang.String r0, r1, $r3;
        java.util.BitSet $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.springframework.web.util.UriUtils: java.util.BitSet QUERY_PARAM>;

        $r3 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encode(java.lang.String,java.lang.String,java.util.BitSet)>(r0, r1, $r2);

        return $r3;
    }

    public static java.lang.String encodeFragment(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.lang.String r0, r1, $r3;
        java.util.BitSet $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.springframework.web.util.UriUtils: java.util.BitSet FRAGMENT>;

        $r3 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String encode(java.lang.String,java.lang.String,java.util.BitSet)>(r0, r1, $r2);

        return $r3;
    }

    private static java.lang.String encode(java.lang.String, java.lang.String, java.util.BitSet) throws java.io.UnsupportedEncodingException
    {
        byte[] $r2, $r4;
        java.lang.String r0, r1, $r5;
        java.util.BitSet r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.BitSet;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'source\' must not be null");

        staticinvoke <org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>(r1, "\'encoding\' must not be empty");

        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

        $r4 = staticinvoke <org.springframework.web.util.UriUtils: byte[] encode(byte[],java.util.BitSet)>($r2, r3);

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, "US-ASCII");

        return $r5;
    }

    private static byte[] encode(byte[], java.util.BitSet)
    {
        byte[] r0, $r3;
        java.io.ByteArrayOutputStream $r4;
        int $i0, $i1, $i2, $i3, $i6, i9, i10, $i11, $i12, $i13;
        boolean $z0;
        char $c4, $c5, $c7, $c8;
        java.util.BitSet r2;

        r0 := @parameter0: byte[];

        r2 := @parameter1: java.util.BitSet;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'source\' must not be null");

        $r4 = new java.io.ByteArrayOutputStream;

        $i0 = lengthof r0;

        $i1 = $i0 * 2;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>(int)>($i1);

        i9 = 0;

        goto label5;

     label1:
        i10 = r0[i9];

        if i10 >= 0 goto label2;

        i10 = i10 + 256;

     label2:
        $z0 = virtualinvoke r2.<java.util.BitSet: boolean get(int)>(i10);

        if $z0 == 0 goto label3;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>(i10);

        goto label4;

     label3:
        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>(37);

        $i2 = i10 >> 4;

        $i3 = $i2 & 15;

        $c4 = staticinvoke <java.lang.Character: char forDigit(int,int)>($i3, 16);

        $c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c4);

        $i6 = i10 & 15;

        $c7 = staticinvoke <java.lang.Character: char forDigit(int,int)>($i6, 16);

        $c8 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c7);

        $i12 = (int) $c5;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>($i12);

        $i13 = (int) $c8;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>($i13);

     label4:
        i9 = i9 + 1;

     label5:
        $i11 = lengthof r0;

        if i9 < $i11 goto label1;

        $r3 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    public static java.lang.String decode(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        byte[] $r9;
        java.io.ByteArrayOutputStream $r11;
        int $i0, $i2, $i3, $i5, $i7, $i8, $i9, $i10, i12, $i13, $i14, $i15;
        java.lang.String r0, r1, $r5, $r8, $r10, $r14;
        boolean z0;
        char $c1, $c4, $c6, $c11;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuilder $r6, $r7, $r12;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'source\' must not be null");

        staticinvoke <org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>(r1, "\'encoding\' must not be empty");

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r11 = new java.io.ByteArrayOutputStream;

        specialinvoke $r11.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);

        z0 = 0;

        i12 = 0;

        goto label5;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        $i13 = (int) $c1;

        if $i13 != 37 goto label3;

        $i2 = i12 + 2;

        if $i2 >= $i0 goto label2;

        $i3 = i12 + 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $i5 = i12 + 2;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        $i7 = staticinvoke <java.lang.Character: int digit(char,int)>($c4, 16);

        $i8 = staticinvoke <java.lang.Character: int digit(char,int)>($c6, 16);

        $i9 = $i7 << 4;

        $i10 = $i9 + $i8;

        $c11 = (char) $i10;

        $i14 = (int) $c11;

        virtualinvoke $r11.<java.io.ByteArrayOutputStream: void write(int)>($i14);

        i12 = i12 + 2;

        z0 = 1;

        goto label4;

     label2:
        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid encoded sequence \"");

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i12);

        $r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r13;

     label3:
        $i15 = (int) $c1;

        virtualinvoke $r11.<java.io.ByteArrayOutputStream: void write(int)>($i15);

     label4:
        i12 = i12 + 1;

     label5:
        if i12 < $i0 goto label1;

        if z0 == 0 goto label6;

        $r14 = new java.lang.String;

        $r10 = $r14;

        $r9 = virtualinvoke $r11.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r14.<java.lang.String: void <init>(byte[],java.lang.String)>($r9, r1);

        goto label7;

     label6:
        $r10 = r0;

     label7:
        return $r10;
    }
}
