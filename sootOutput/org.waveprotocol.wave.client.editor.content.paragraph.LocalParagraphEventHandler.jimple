public class org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler extends org.waveprotocol.wave.client.editor.NodeEventHandlerImpl
{

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.NodeEventHandlerImpl: void <init>()>();

        return;
    }

    boolean isEmptyLine(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r5;
        org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler r8;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r0, $r2, $r6, $r7;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r1;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r8 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line fromParagraph(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getLineElement()>();

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.CMutableDocument: java.lang.Object getNextSibling(java.lang.Object)>($r2);

        r5 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r4;

        if r5 == null goto label1;

        $r6 = virtualinvoke r5.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r6 == null goto label2;

        $r7 = virtualinvoke r5.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLineElement(org.waveprotocol.wave.client.editor.content.ContentElement)>($r7);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean handleEnter(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r32, $r33;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r11;
        java.util.Map $r12;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.wave.client.editor.content.ContentView $r3, $r18;
        java.util.Set $r21;
        org.waveprotocol.wave.model.document.util.Point$El $r4, $r19;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour $r8, $r9;
        org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler r30;
        java.util.HashMap $r10;
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentElement r6, $r16, $r20;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r7, $r15;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r17;
        java.lang.String $r25, $r27;
        org.waveprotocol.wave.model.document.util.Point $r2, $r13;
        java.util.Map$Entry r35;
        java.util.Iterator $r22;
        java.util.AbstractMap r34;
        java.lang.Object $r5, $r14, $r23, $r24, $r26, $r28, $r29, $r31;
        org.waveprotocol.wave.client.editor.event.EditorEvent r0;

        r30 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler;

        r6 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isInTextNode()>();

        if $z0 != 0 goto label1;

        $r32 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode getContainer()>();

        if $r32 == r6 goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.model.document.util.Point asPoint()>();

        $z1 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z1 == 0 goto label2;

        $r31 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r33 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r31;

        goto label3;

     label2:
        $r3 = <org.waveprotocol.wave.client.editor.content.FullContentView: org.waveprotocol.wave.client.editor.content.ContentView INSTANCE>;

        $r4 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeBefore(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$El)>($r3, $r4);

        $r33 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r5;

     label3:
        $r7 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line fromParagraph(org.waveprotocol.wave.client.editor.content.ContentElement)>(r6);

        $r8 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour getBehaviour(org.waveprotocol.wave.client.editor.content.ContentElement)>(r6);

        $r9 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour LIST>;

        if $r8 != $r9 goto label4;

        $z5 = virtualinvoke r30.<org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler: boolean isEmptyLine(org.waveprotocol.wave.client.editor.content.ContentElement)>(r6);

        if $z5 == 0 goto label4;

        $z6 = virtualinvoke r30.<org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler: boolean handleBackspaceAtBeginning(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>(r6, r0);

        return $z6;

     label4:
        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r34 = $r10;

        $r11 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r12 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.paragraph.Line: java.util.Map getAttributes()>();

        if $r12 == null goto label7;

        $r21 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>();

        $r22 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r35 = (java.util.Map$Entry) $r23;

        $r24 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r25 = (java.lang.String) $r24;

        $r26 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r27 = (java.lang.String) $r26;

        $z4 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler: boolean attributeKeptOnNewline(java.lang.String,java.lang.String)>($r25, $r27);

        if $z4 == 0 goto label6;

        $r28 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r29 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r29);

     label6:
        goto label5;

     label7:
        $z2 = interfaceinvoke $r10.<java.util.Map: boolean isEmpty()>();

        if $z2 == 0 goto label8;

        r34 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

     label8:
        $i0 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.CMutableDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r2);

        $r13 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.CMutableDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>($i0);

        $r14 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.CMutableDocument: java.lang.Object createElement(org.waveprotocol.wave.model.document.util.Point,java.lang.String,java.util.Map)>($r13, "line", r34);

        $r20 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r14;

        $r15 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line fromLineElement(org.waveprotocol.wave.client.editor.content.ContentElement)>($r20);

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r17 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        $r18 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

        $r19 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El start(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r18, $r16);

        interfaceinvoke $r17.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r19);

        return 1;
    }

    public boolean handleBackspaceAtBeginning(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler r7;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r5, $r6;
        int[] $r3;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour $r4;
        int $i0, $i1, $i2, $i4;
        org.waveprotocol.wave.client.editor.content.ContentElement r0, $r2;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r8;

        r7 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r8 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line fromParagraph(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getLineElement()>();

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getIndent()>();

        if $i0 <= 0 goto label1;

        $i4 = (int) -1;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler: void indent(org.waveprotocol.wave.client.editor.content.ContentElement,int)>($r2, $i4);

        goto label4;

     label1:
        $r3 = <org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler$1: int[] $SwitchMap$org$waveprotocol$wave$client$editor$content$paragraph$ParagraphBehaviour>;

        $r4 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour getBehaviour()>();

        $i1 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: int ordinal()>();

        $i2 = $r3[$i1];

        lookupswitch($i2)
        {
            case 1: goto label2;
            default: goto label3;
        };

     label2:
        $r5 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void setElementAttribute(java.lang.Object,java.lang.String,java.lang.String)>($r2, "t", null);

        $r6 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        virtualinvoke $r6.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void setElementAttribute(java.lang.Object,java.lang.String,java.lang.String)>($r2, "listyle", null);

        goto label4;

     label3:
        specialinvoke r7.<org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler: void maybeRemove(org.waveprotocol.wave.client.editor.content.paragraph.Line)>($r1);

     label4:
        return 1;
    }

    public boolean handleDeleteAtEnd(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r1, $r2, $r4;
        org.waveprotocol.wave.client.editor.event.EditorEvent r5;

        r3 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r5 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line fromParagraph(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next()>();

        if $r2 == null goto label1;

        $r4 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next()>();

        specialinvoke r3.<org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler: void maybeRemove(org.waveprotocol.wave.client.editor.content.paragraph.Line)>($r4);

     label1:
        return 1;
    }

    private void maybeRemove(org.waveprotocol.wave.client.editor.content.paragraph.Line)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r8;
        org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler r15;
        java.util.Map $r13;
        int $i0;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0, $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2, $r4, $r5;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r9, $r11;
        org.waveprotocol.wave.model.document.util.Point $r12;
        boolean $z0;
        org.waveprotocol.wave.model.document.MutableDocument $r1;
        org.waveprotocol.wave.model.document.util.Point$El $r7, $r10;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r14;
        java.lang.Object $r6;

        r15 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.model.document.MutableDocument getMutableDoc()>();

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getLineElement()>();

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous()>();

        if $r3 == null goto label5;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getLineElement()>();

        $r5 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r6 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getNextSibling(java.lang.Object)>($r4);

        if $r6 != $r2 goto label1;

        $r13 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.MutableDocument: java.util.Map getAttributes(java.lang.Object)>($r2);

        $r14 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        specialinvoke $r14.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.util.Map)>($r13);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.MutableDocument: void setElementAttributes(java.lang.Object,org.waveprotocol.wave.model.document.operation.Attributes)>($r4, $r14);

     label1:
        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r5);

        $i0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.MutableDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r7);

        $r8 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        if $r8 != null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.MutableDocument: void deleteNode(java.lang.Object)>($r2);

        if $z0 != 0 goto label4;

        $r11 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        $r12 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.MutableDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>($i0);

        interfaceinvoke $r11.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r12);

        goto label5;

     label4:
        $r9 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El start(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r1, $r5);

        interfaceinvoke $r9.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r10);

     label5:
        return;
    }
}
