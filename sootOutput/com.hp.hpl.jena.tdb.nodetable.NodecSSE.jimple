public class com.hp.hpl.jena.tdb.nodetable.NodecSSE extends java.lang.Object implements com.hp.hpl.jena.tdb.nodetable.Nodec
{
    private static boolean SafeChars;
    private static final char MarkerChar;
    private static final char[] invalidIRIChars;
    public static final boolean compression;
    private static com.hp.hpl.jena.tdb.lib.StringAbbrev abbreviations;

    public void <init>()
    {
        com.hp.hpl.jena.tdb.nodetable.NodecSSE r0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodecSSE;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int maxSize(com.hp.hpl.jena.graph.Node)
    {
        int $i0;
        com.hp.hpl.jena.tdb.nodetable.NodecSSE r1;
        com.hp.hpl.jena.graph.Node r0;

        r1 := @this: com.hp.hpl.jena.tdb.nodetable.NodecSSE;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $i0 = staticinvoke <com.hp.hpl.jena.tdb.nodetable.NodecSSE: int maxLength(com.hp.hpl.jena.graph.Node)>(r0);

        return $i0;
    }

    public int encode(com.hp.hpl.jena.graph.Node, java.nio.ByteBuffer, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.tdb.nodetable.NodecSSE r12;
        com.hp.hpl.jena.graph.Node r14;
        java.nio.ByteBuffer r0;
        int $i0;
        java.lang.String $r1, $r2, $r7, $r8, $r10, $r11, $r15;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.tdb.TDBException $r3;
        char[] $r9;
        java.lang.StringBuilder $r4, $r5, $r6;
        com.hp.hpl.jena.shared.PrefixMapping r13;

        r12 := @this: com.hp.hpl.jena.tdb.nodetable.NodecSSE;

        r14 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: java.nio.ByteBuffer;

        r13 := @parameter2: com.hp.hpl.jena.shared.PrefixMapping;

        $z0 = virtualinvoke r14.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r14.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r9 = <com.hp.hpl.jena.tdb.nodetable.NodecSSE: char[] invalidIRIChars>;

        $r10 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String encodeHex(java.lang.String,char,char[])>($r8, 95, $r9);

        $r11 = virtualinvoke r14.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        if $r10 == $r11 goto label1;

        r14 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r10);

     label1:
        $z2 = virtualinvoke r14.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label2;

        $r1 = virtualinvoke r14.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        if $r1 == null goto label2;

        $r2 = virtualinvoke r14.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z1 = staticinvoke <org.apache.jena.riot.web.LangTag: boolean check(java.lang.String)>($r2);

        if $z1 != 0 goto label2;

        $r3 = new com.hp.hpl.jena.tdb.TDBException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad language tag: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        $r15 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String serialize(com.hp.hpl.jena.graph.Node)>(r14);

        staticinvoke <org.apache.jena.atlas.io.BlockUTF8: void fromChars(java.lang.CharSequence,java.nio.ByteBuffer)>($r15, r0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int limit()>();

        return $i0;
    }

    public com.hp.hpl.jena.graph.Node decode(java.nio.ByteBuffer, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.graph.Node $r4, $r18, $r21;
        java.nio.ByteBuffer r0;
        com.hp.hpl.jena.rdf.model.AnonId $r20;
        boolean $z0, $z1, $z2;
        org.apache.jena.riot.tokens.Tokenizer $r2;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r13, $r24, $r25, $r26;
        com.hp.hpl.jena.shared.PrefixMapping r29;
        com.hp.hpl.jena.tdb.nodetable.NodecSSE r28;
        org.apache.jena.riot.RiotException $r22;
        org.apache.jena.riot.tokens.Token $r3;
        int $i0, $i1;
        java.lang.String $r1, $r9, $r14, $r15, $r16, $r17, $r19, $r27;
        com.hp.hpl.jena.tdb.TDBException $r5, $r10, $r23;

        r28 := @this: com.hp.hpl.jena.tdb.nodetable.NodecSSE;

        r0 := @parameter0: java.nio.ByteBuffer;

        r29 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r1 = staticinvoke <org.apache.jena.atlas.io.BlockUTF8: java.lang.String toString(java.nio.ByteBuffer)>(r0);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("_:");

        if $z0 == 0 goto label1;

        $r19 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(2);

        $r20 = new com.hp.hpl.jena.rdf.model.AnonId;

        specialinvoke $r20.<com.hp.hpl.jena.rdf.model.AnonId: void <init>(java.lang.String)>($r19);

        $r21 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)>($r20);

        return $r21;

     label1:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("<");

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r15 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        $r16 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String unescapeString(java.lang.String)>($r15);

        $r17 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String decodeHex(java.lang.String,char)>($r16, 95);

        $r18 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r17);

        return $r18;

     label2:
        $r2 = staticinvoke <org.apache.jena.riot.tokens.TokenizerFactory: org.apache.jena.riot.tokens.Tokenizer makeTokenizerString(java.lang.String)>($r1);

        $z2 = interfaceinvoke $r2.<org.apache.jena.riot.tokens.Tokenizer: boolean hasNext()>();

        if $z2 != 0 goto label3;

        $r10 = new com.hp.hpl.jena.tdb.TDBException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to tokenise: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label3:
        $r3 = interfaceinvoke $r2.<org.apache.jena.riot.tokens.Tokenizer: org.apache.jena.riot.tokens.Token next()>();

     label4:
        $r4 = virtualinvoke $r3.<org.apache.jena.riot.tokens.Token: com.hp.hpl.jena.graph.Node asNode()>();

        if $r4 != null goto label5;

        $r5 = new com.hp.hpl.jena.tdb.TDBException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a node: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label5:
        return $r4;

     label6:
        $r22 := @caughtexception;

        $r23 = new com.hp.hpl.jena.tdb.TDBException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad string for node: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r27);

        throw $r23;

        catch org.apache.jena.riot.RiotException from label4 to label5 with label6;
    }

    private static int maxLength(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        com.hp.hpl.jena.tdb.TDBException $r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 == 0 goto label1;

        $r15 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

        $i14 = staticinvoke <com.hp.hpl.jena.tdb.nodetable.NodecSSE: int maxLength(java.lang.String)>($r15);

        $i15 = 2 + $i14;

        return $i15;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 == 0 goto label2;

        $r14 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $i12 = staticinvoke <com.hp.hpl.jena.tdb.nodetable.NodecSSE: int maxLength(java.lang.String)>($r14);

        $i13 = 2 + $i12;

        return $i13;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label5;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        if $r7 == null goto label3;

        $r12 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $i8 = staticinvoke <com.hp.hpl.jena.tdb.nodetable.NodecSSE: int maxLength(java.lang.String)>($r12);

        $i9 = 6 + $i8;

        $r13 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        $i10 = staticinvoke <com.hp.hpl.jena.tdb.nodetable.NodecSSE: int maxLength(java.lang.String)>($r13);

        $i11 = $i9 + $i10;

        return $i11;

     label3:
        $r8 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        if $r8 == null goto label4;

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $i4 = staticinvoke <com.hp.hpl.jena.tdb.nodetable.NodecSSE: int maxLength(java.lang.String)>($r10);

        $i5 = 3 + $i4;

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $i6 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i7 = $i5 + $i6;

        return $i7;

     label4:
        $r9 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $i2 = staticinvoke <com.hp.hpl.jena.tdb.nodetable.NodecSSE: int maxLength(java.lang.String)>($r9);

        $i3 = 2 + $i2;

        return $i3;

     label5:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label6;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getName()>();

        $i0 = staticinvoke <com.hp.hpl.jena.tdb.nodetable.NodecSSE: int maxLength(java.lang.String)>($r6);

        $i1 = 1 + $i0;

        return $i1;

     label6:
        $r1 = new com.hp.hpl.jena.tdb.TDBException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized node type: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    private static int maxLength(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 * 3;

        return $i1;
    }

    private java.lang.String compress(java.lang.String)
    {
        com.hp.hpl.jena.tdb.nodetable.NodecSSE r1;
        java.lang.String r0;

        r1 := @this: com.hp.hpl.jena.tdb.nodetable.NodecSSE;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    private java.lang.String decompress(java.lang.String)
    {
        com.hp.hpl.jena.tdb.nodetable.NodecSSE r1;
        java.lang.String r0;

        r1 := @this: com.hp.hpl.jena.tdb.nodetable.NodecSSE;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    static void <clinit>()
    {
        char[] $r0;
        com.hp.hpl.jena.tdb.lib.StringAbbrev $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        <com.hp.hpl.jena.tdb.nodetable.NodecSSE: boolean compression> = 0;

        <com.hp.hpl.jena.tdb.nodetable.NodecSSE: char MarkerChar> = 95;

        <com.hp.hpl.jena.tdb.nodetable.NodecSSE: boolean SafeChars> = 0;

        $r0 = newarray (char)[2];

        $r0[0] = 95;

        $r0[1] = 32;

        <com.hp.hpl.jena.tdb.nodetable.NodecSSE: char[] invalidIRIChars> = $r0;

        $r1 = new com.hp.hpl.jena.tdb.lib.StringAbbrev;

        specialinvoke $r1.<com.hp.hpl.jena.tdb.lib.StringAbbrev: void <init>()>();

        <com.hp.hpl.jena.tdb.nodetable.NodecSSE: com.hp.hpl.jena.tdb.lib.StringAbbrev abbreviations> = $r1;

        $r2 = <com.hp.hpl.jena.tdb.nodetable.NodecSSE: com.hp.hpl.jena.tdb.lib.StringAbbrev abbreviations>;

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.lib.StringAbbrev: void add(java.lang.String,java.lang.String)>("rdf", "<http://www.w3.org/1999/02/22-rdf-syntax-ns#");

        $r3 = <com.hp.hpl.jena.tdb.nodetable.NodecSSE: com.hp.hpl.jena.tdb.lib.StringAbbrev abbreviations>;

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.lib.StringAbbrev: void add(java.lang.String,java.lang.String)>("rdfs", "<http://www.w3.org/2000/01/rdf-schema#");

        $r4 = <com.hp.hpl.jena.tdb.nodetable.NodecSSE: com.hp.hpl.jena.tdb.lib.StringAbbrev abbreviations>;

        virtualinvoke $r4.<com.hp.hpl.jena.tdb.lib.StringAbbrev: void add(java.lang.String,java.lang.String)>("xsd", "<http://www.w3.org/2001/XMLSchema#");

        $r5 = <com.hp.hpl.jena.tdb.nodetable.NodecSSE: com.hp.hpl.jena.tdb.lib.StringAbbrev abbreviations>;

        virtualinvoke $r5.<com.hp.hpl.jena.tdb.lib.StringAbbrev: void add(java.lang.String,java.lang.String)>("mal", "<http://musicbrainz.org/mm-2.1/album/");

        $r6 = <com.hp.hpl.jena.tdb.nodetable.NodecSSE: com.hp.hpl.jena.tdb.lib.StringAbbrev abbreviations>;

        virtualinvoke $r6.<com.hp.hpl.jena.tdb.lib.StringAbbrev: void add(java.lang.String,java.lang.String)>("mt", "<http://musicbrainz.org/mm-2.1/track/");

        $r7 = <com.hp.hpl.jena.tdb.nodetable.NodecSSE: com.hp.hpl.jena.tdb.lib.StringAbbrev abbreviations>;

        virtualinvoke $r7.<com.hp.hpl.jena.tdb.lib.StringAbbrev: void add(java.lang.String,java.lang.String)>("mar", "<http://musicbrainz.org/mm-2.1/artist/");

        $r8 = <com.hp.hpl.jena.tdb.nodetable.NodecSSE: com.hp.hpl.jena.tdb.lib.StringAbbrev abbreviations>;

        virtualinvoke $r8.<com.hp.hpl.jena.tdb.lib.StringAbbrev: void add(java.lang.String,java.lang.String)>("mtr", "<http://musicbrainz.org/mm-2.1/trmid/");

        $r9 = <com.hp.hpl.jena.tdb.nodetable.NodecSSE: com.hp.hpl.jena.tdb.lib.StringAbbrev abbreviations>;

        virtualinvoke $r9.<com.hp.hpl.jena.tdb.lib.StringAbbrev: void add(java.lang.String,java.lang.String)>("mc", "<http://musicbrainz.org/mm-2.1/cdindex/");

        $r10 = <com.hp.hpl.jena.tdb.nodetable.NodecSSE: com.hp.hpl.jena.tdb.lib.StringAbbrev abbreviations>;

        virtualinvoke $r10.<com.hp.hpl.jena.tdb.lib.StringAbbrev: void add(java.lang.String,java.lang.String)>("m21", "<http://musicbrainz.org/mm/mm-2.1#");

        $r11 = <com.hp.hpl.jena.tdb.nodetable.NodecSSE: com.hp.hpl.jena.tdb.lib.StringAbbrev abbreviations>;

        virtualinvoke $r11.<com.hp.hpl.jena.tdb.lib.StringAbbrev: void add(java.lang.String,java.lang.String)>("dc", "<http://purl.org/dc/elements/1.1/");

        $r12 = <com.hp.hpl.jena.tdb.nodetable.NodecSSE: com.hp.hpl.jena.tdb.lib.StringAbbrev abbreviations>;

        virtualinvoke $r12.<com.hp.hpl.jena.tdb.lib.StringAbbrev: void add(java.lang.String,java.lang.String)>("r", "<http://dbpedia/resource/");

        $r13 = <com.hp.hpl.jena.tdb.nodetable.NodecSSE: com.hp.hpl.jena.tdb.lib.StringAbbrev abbreviations>;

        virtualinvoke $r13.<com.hp.hpl.jena.tdb.lib.StringAbbrev: void add(java.lang.String,java.lang.String)>("p", "<http://dbpedia/property/");

        return;
    }
}
