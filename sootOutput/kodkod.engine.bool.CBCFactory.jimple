final class kodkod.engine.bool.CBCFactory extends java.lang.Object
{
    private final java.util.Set scrap0;
    private final java.util.Set scrap1;
    private final kodkod.engine.bool.BooleanVariable[] vars;
    private final kodkod.util.collections.CacheSet[] cache;
    private int label;
    private int cmpMax;
    private final kodkod.engine.bool.CBCFactory$Assembler JoX;
    private final kodkod.engine.bool.CBCFactory$Assembler AoO;
    private final kodkod.engine.bool.CBCFactory$Assembler JoJ;
    private final kodkod.engine.bool.CBCFactory$Assembler JoI;
    private final kodkod.engine.bool.CBCFactory$Assembler JoN;
    private final kodkod.engine.bool.CBCFactory$Assembler IoV;
    private final kodkod.engine.bool.CBCFactory$Assembler IoN;
    private final kodkod.engine.bool.CBCFactory$Assembler NoX;
    private final kodkod.engine.bool.CBCFactory$Assembler NoN;
    private final kodkod.engine.bool.CBCFactory$Assembler NoV;
    private final kodkod.engine.bool.CBCFactory$Assembler XoX;
    private final kodkod.engine.bool.CBCFactory$Assembler[] ASSEMBLERS;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/engine/bool/CBCFactory;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.engine.bool.CBCFactory: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(int, int)
    {
        kodkod.engine.bool.BooleanVariable $r29;
        kodkod.engine.bool.BooleanVariable[] $r28, $r30;
        kodkod.engine.bool.CBCFactory$Assembler[] $r12;
        boolean $z0;
        kodkod.engine.bool.CBCFactory$9 $r9;
        kodkod.engine.bool.CBCFactory$8 $r8;
        kodkod.engine.bool.CBCFactory$Assembler $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;
        kodkod.util.collections.IdentityHashSet $r31, $r32;
        java.lang.AssertionError $r37;
        kodkod.engine.bool.CBCFactory$7 $r7;
        kodkod.engine.bool.CBCFactory$6 $r6;
        kodkod.engine.bool.CBCFactory$5 $r5;
        kodkod.engine.bool.CBCFactory$4 $r4;
        kodkod.engine.bool.CBCFactory$3 $r3;
        kodkod.engine.bool.CBCFactory$2 $r2;
        kodkod.engine.bool.CBCFactory$1 $r1;
        int i0, i1, $i2, $i3, i4;
        kodkod.engine.bool.CBCFactory$10 $r10;
        kodkod.engine.bool.CBCFactory$11 $r11;
        kodkod.util.collections.CacheSet $r34, $r35, $r36;
        kodkod.engine.bool.CBCFactory r0;
        kodkod.util.collections.CacheSet[] $r33;

        r0 := @this: kodkod.engine.bool.CBCFactory;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new kodkod.engine.bool.CBCFactory$1;

        specialinvoke $r1.<kodkod.engine.bool.CBCFactory$1: void <init>(kodkod.engine.bool.CBCFactory)>(r0);

        r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler JoX> = $r1;

        $r2 = new kodkod.engine.bool.CBCFactory$2;

        specialinvoke $r2.<kodkod.engine.bool.CBCFactory$2: void <init>(kodkod.engine.bool.CBCFactory)>(r0);

        r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler AoO> = $r2;

        $r3 = new kodkod.engine.bool.CBCFactory$3;

        specialinvoke $r3.<kodkod.engine.bool.CBCFactory$3: void <init>(kodkod.engine.bool.CBCFactory)>(r0);

        r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler JoJ> = $r3;

        $r4 = new kodkod.engine.bool.CBCFactory$4;

        specialinvoke $r4.<kodkod.engine.bool.CBCFactory$4: void <init>(kodkod.engine.bool.CBCFactory)>(r0);

        r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler JoI> = $r4;

        $r5 = new kodkod.engine.bool.CBCFactory$5;

        specialinvoke $r5.<kodkod.engine.bool.CBCFactory$5: void <init>(kodkod.engine.bool.CBCFactory)>(r0);

        r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler JoN> = $r5;

        $r6 = new kodkod.engine.bool.CBCFactory$6;

        specialinvoke $r6.<kodkod.engine.bool.CBCFactory$6: void <init>(kodkod.engine.bool.CBCFactory)>(r0);

        r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler IoV> = $r6;

        $r7 = new kodkod.engine.bool.CBCFactory$7;

        specialinvoke $r7.<kodkod.engine.bool.CBCFactory$7: void <init>(kodkod.engine.bool.CBCFactory)>(r0);

        r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler IoN> = $r7;

        $r8 = new kodkod.engine.bool.CBCFactory$8;

        specialinvoke $r8.<kodkod.engine.bool.CBCFactory$8: void <init>(kodkod.engine.bool.CBCFactory)>(r0);

        r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler NoX> = $r8;

        $r9 = new kodkod.engine.bool.CBCFactory$9;

        specialinvoke $r9.<kodkod.engine.bool.CBCFactory$9: void <init>(kodkod.engine.bool.CBCFactory)>(r0);

        r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler NoN> = $r9;

        $r10 = new kodkod.engine.bool.CBCFactory$10;

        specialinvoke $r10.<kodkod.engine.bool.CBCFactory$10: void <init>(kodkod.engine.bool.CBCFactory)>(r0);

        r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler NoV> = $r10;

        $r11 = new kodkod.engine.bool.CBCFactory$11;

        specialinvoke $r11.<kodkod.engine.bool.CBCFactory$11: void <init>(kodkod.engine.bool.CBCFactory)>(r0);

        r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler XoX> = $r11;

        $r12 = newarray (kodkod.engine.bool.CBCFactory$Assembler)[15];

        $r13 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler JoJ>;

        $r12[0] = $r13;

        $r14 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler AoO>;

        $r12[1] = $r14;

        $r15 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler JoI>;

        $r12[2] = $r15;

        $r16 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler JoN>;

        $r12[3] = $r16;

        $r17 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler JoX>;

        $r12[4] = $r17;

        $r18 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler JoJ>;

        $r12[5] = $r18;

        $r19 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler JoI>;

        $r12[6] = $r19;

        $r20 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler JoN>;

        $r12[7] = $r20;

        $r21 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler JoX>;

        $r12[8] = $r21;

        $r22 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler XoX>;

        $r12[9] = $r22;

        $r23 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler IoN>;

        $r12[10] = $r23;

        $r24 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler IoV>;

        $r12[11] = $r24;

        $r25 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler NoN>;

        $r12[12] = $r25;

        $r26 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler NoV>;

        $r12[13] = $r26;

        $r27 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler XoX>;

        $r12[14] = $r27;

        r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler[] ASSEMBLERS> = $r12;

        $z0 = <kodkod.engine.bool.CBCFactory: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 <= 0 goto label1;

        if i1 >= 0 goto label2;

     label1:
        $r37 = new java.lang.AssertionError;

        specialinvoke $r37.<java.lang.AssertionError: void <init>()>();

        throw $r37;

     label2:
        r0.<kodkod.engine.bool.CBCFactory: int cmpMax> = i0;

        $i2 = i1 + 1;

        r0.<kodkod.engine.bool.CBCFactory: int label> = $i2;

        $r28 = newarray (kodkod.engine.bool.BooleanVariable)[i1];

        r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanVariable[] vars> = $r28;

        i4 = 0;

        goto label4;

     label3:
        $r30 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanVariable[] vars>;

        $r29 = new kodkod.engine.bool.BooleanVariable;

        $i3 = i4 + 1;

        specialinvoke $r29.<kodkod.engine.bool.BooleanVariable: void <init>(int)>($i3);

        $r30[i4] = $r29;

        i4 = i4 + 1;

     label4:
        if i4 < i1 goto label3;

        $r31 = new kodkod.util.collections.IdentityHashSet;

        specialinvoke $r31.<kodkod.util.collections.IdentityHashSet: void <init>(int)>(i0);

        r0.<kodkod.engine.bool.CBCFactory: java.util.Set scrap0> = $r31;

        $r32 = new kodkod.util.collections.IdentityHashSet;

        specialinvoke $r32.<kodkod.util.collections.IdentityHashSet: void <init>(int)>(i0);

        r0.<kodkod.engine.bool.CBCFactory: java.util.Set scrap1> = $r32;

        $r33 = newarray (kodkod.util.collections.CacheSet)[3];

        $r34 = new kodkod.util.collections.CacheSet;

        specialinvoke $r34.<kodkod.util.collections.CacheSet: void <init>()>();

        $r33[0] = $r34;

        $r35 = new kodkod.util.collections.CacheSet;

        specialinvoke $r35.<kodkod.util.collections.CacheSet: void <init>()>();

        $r33[1] = $r35;

        $r36 = new kodkod.util.collections.CacheSet;

        specialinvoke $r36.<kodkod.util.collections.CacheSet: void <init>()>();

        $r33[2] = $r36;

        r0.<kodkod.engine.bool.CBCFactory: kodkod.util.collections.CacheSet[] cache> = $r33;

        return;
    }

    private kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)
    {
        int $i0;
        kodkod.engine.bool.CBCFactory r0;
        kodkod.engine.bool.Operator r1;
        kodkod.util.collections.CacheSet $r3;
        kodkod.util.collections.CacheSet[] $r2;

        r0 := @this: kodkod.engine.bool.CBCFactory;

        r1 := @parameter0: kodkod.engine.bool.Operator;

        $r2 = r0.<kodkod.engine.bool.CBCFactory: kodkod.util.collections.CacheSet[] cache>;

        $i0 = r1.<kodkod.engine.bool.Operator: int ordinal>;

        $r3 = $r2[$i0];

        return $r3;
    }

    void setCmpMax(int)
    {
        int i0;
        kodkod.engine.bool.CBCFactory r0;
        java.lang.AssertionError $r1;
        boolean $z0;

        r0 := @this: kodkod.engine.bool.CBCFactory;

        i0 := @parameter0: int;

        $z0 = <kodkod.engine.bool.CBCFactory: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 > 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        r0.<kodkod.engine.bool.CBCFactory: int cmpMax> = i0;

        return;
    }

    int cmpMax()
    {
        int $i0;
        kodkod.engine.bool.CBCFactory r0;

        r0 := @this: kodkod.engine.bool.CBCFactory;

        $i0 = r0.<kodkod.engine.bool.CBCFactory: int cmpMax>;

        return $i0;
    }

    void clear()
    {
        java.util.Set $r8, $r9;
        kodkod.util.collections.CacheSet $r3, $r5, $r7;
        kodkod.engine.bool.BooleanVariable[] $r1;
        int $i0, $i1;
        kodkod.engine.bool.CBCFactory r0;
        kodkod.util.collections.CacheSet[] $r2, $r4, $r6;

        r0 := @this: kodkod.engine.bool.CBCFactory;

        $r1 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanVariable[] vars>;

        $i0 = lengthof $r1;

        $i1 = $i0 + 1;

        r0.<kodkod.engine.bool.CBCFactory: int label> = $i1;

        $r2 = r0.<kodkod.engine.bool.CBCFactory: kodkod.util.collections.CacheSet[] cache>;

        $r3 = $r2[0];

        virtualinvoke $r3.<kodkod.util.collections.CacheSet: void clear()>();

        $r4 = r0.<kodkod.engine.bool.CBCFactory: kodkod.util.collections.CacheSet[] cache>;

        $r5 = $r4[1];

        virtualinvoke $r5.<kodkod.util.collections.CacheSet: void clear()>();

        $r6 = r0.<kodkod.engine.bool.CBCFactory: kodkod.util.collections.CacheSet[] cache>;

        $r7 = $r6[2];

        virtualinvoke $r7.<kodkod.util.collections.CacheSet: void clear()>();

        $r8 = r0.<kodkod.engine.bool.CBCFactory: java.util.Set scrap0>;

        interfaceinvoke $r8.<java.util.Set: void clear()>();

        $r9 = r0.<kodkod.engine.bool.CBCFactory: java.util.Set scrap1>;

        interfaceinvoke $r9.<java.util.Set: void clear()>();

        return;
    }

    boolean canAssemble(kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanVariable $r10;
        kodkod.engine.bool.BooleanValue r11;
        kodkod.engine.bool.BooleanFormula r4;
        kodkod.engine.bool.Operator $r0, $r1, $r5;
        kodkod.engine.bool.BooleanVariable[] $r3, $r9;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        java.util.Iterator $r7;
        kodkod.util.collections.CacheSet $r6;
        kodkod.engine.bool.CBCFactory r2;
        java.lang.Object $r8;

        r2 := @this: kodkod.engine.bool.CBCFactory;

        r11 := @parameter0: kodkod.engine.bool.BooleanValue;

        $r0 = virtualinvoke r11.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.Operator op()>();

        $r1 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator CONST>;

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        $i0 = virtualinvoke r11.<kodkod.engine.bool.BooleanValue: int label()>();

        if $i0 >= 0 goto label2;

        r11 = virtualinvoke r11.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

     label2:
        $i1 = virtualinvoke r11.<kodkod.engine.bool.BooleanValue: int label()>();

        $r3 = r2.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanVariable[] vars>;

        $i2 = lengthof $r3;

        if $i1 > $i2 goto label4;

        $r9 = r2.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanVariable[] vars>;

        $i4 = $i1 - 1;

        $r10 = $r9[$i4];

        if r11 != $r10 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        r4 = (kodkod.engine.bool.BooleanFormula) r11;

        $r5 = virtualinvoke r4.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        $r6 = specialinvoke r2.<kodkod.engine.bool.CBCFactory: kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)>($r5);

        $i3 = virtualinvoke r4.<java.lang.Object: int hashCode()>();

        $r7 = virtualinvoke $r6.<kodkod.util.collections.CacheSet: java.util.Iterator get(int)>($i3);

        goto label6;

     label5:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        if $r8 != r4 goto label6;

        return 1;

     label6:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label5;

        return 0;
    }

    int numVars()
    {
        int $i0;
        kodkod.engine.bool.CBCFactory r0;
        kodkod.engine.bool.BooleanVariable[] $r1;

        r0 := @this: kodkod.engine.bool.CBCFactory;

        $r1 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanVariable[] vars>;

        $i0 = lengthof $r1;

        return $i0;
    }

    kodkod.engine.bool.BooleanVariable variable(int)
    {
        kodkod.engine.bool.BooleanVariable $r2;
        kodkod.engine.bool.BooleanVariable[] $r1;
        int i0, $i1;
        kodkod.engine.bool.CBCFactory r0;

        r0 := @this: kodkod.engine.bool.CBCFactory;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanVariable[] vars>;

        $i1 = i0 - 1;

        $r2 = $r1[$i1];

        return $r2;
    }

    kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanValue r0, r2, r3, $r8, $r11, $r12, $r15, $r16, $r19;
        kodkod.engine.bool.BooleanConstant $r1, $r4, $r5, $r9, $r13, $r17;
        kodkod.engine.bool.ITEGate $r32;
        boolean $z0;
        kodkod.engine.bool.Operator$Nary $r7, $r10, $r14, $r18;
        kodkod.engine.bool.BooleanFormula r20, r21, r22, r28, $r29, $r30, $r31;
        kodkod.engine.bool.Operator$Ternary $r23, $r24, $r33;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Iterator $r26;
        kodkod.util.collections.CacheSet $r25, $r34;
        kodkod.engine.bool.CBCFactory r6;
        java.lang.Object $r27;

        r6 := @this: kodkod.engine.bool.CBCFactory;

        r0 := @parameter0: kodkod.engine.bool.BooleanValue;

        r2 := @parameter1: kodkod.engine.bool.BooleanValue;

        r3 := @parameter2: kodkod.engine.bool.BooleanValue;

        $r1 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if r0 == $r1 goto label01;

        if r2 != r3 goto label02;

     label01:
        return r2;

     label02:
        $r4 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if r0 != $r4 goto label03;

        return r3;

     label03:
        $r5 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if r2 == $r5 goto label04;

        if r0 != r2 goto label05;

     label04:
        $r7 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r8 = virtualinvoke r6.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r7, r0, r3);

        return $r8;

     label05:
        $r9 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if r2 == $r9 goto label06;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.BooleanValue: int label()>();

        $i1 = virtualinvoke r2.<kodkod.engine.bool.BooleanValue: int label()>();

        $i2 = neg $i1;

        if $i0 != $i2 goto label07;

     label06:
        $r10 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r11 = virtualinvoke r0.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r12 = virtualinvoke r6.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r10, $r11, r3);

        return $r12;

     label07:
        $r13 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if r3 == $r13 goto label08;

        $i3 = virtualinvoke r0.<kodkod.engine.bool.BooleanValue: int label()>();

        $i4 = virtualinvoke r3.<kodkod.engine.bool.BooleanValue: int label()>();

        $i5 = neg $i4;

        if $i3 != $i5 goto label09;

     label08:
        $r14 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r15 = virtualinvoke r0.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r16 = virtualinvoke r6.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r14, $r15, r2);

        return $r16;

     label09:
        $r17 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if r3 == $r17 goto label10;

        if r0 != r3 goto label11;

     label10:
        $r18 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r19 = virtualinvoke r6.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r18, r0, r2);

        return $r19;

     label11:
        r20 = (kodkod.engine.bool.BooleanFormula) r0;

        r21 = (kodkod.engine.bool.BooleanFormula) r2;

        r22 = (kodkod.engine.bool.BooleanFormula) r3;

        $r23 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Ternary ITE>;

        $i6 = virtualinvoke $r23.<kodkod.engine.bool.Operator$Ternary: int hash(kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>(r20, r21, r22);

        $r24 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Ternary ITE>;

        $r25 = specialinvoke r6.<kodkod.engine.bool.CBCFactory: kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)>($r24);

        $r26 = virtualinvoke $r25.<kodkod.util.collections.CacheSet: java.util.Iterator get(int)>($i6);

        goto label13;

     label12:
        $r27 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r28 = (kodkod.engine.bool.BooleanFormula) $r27;

        $r29 = virtualinvoke r28.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula input(int)>(0);

        if $r29 != r0 goto label13;

        $r30 = virtualinvoke r28.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula input(int)>(1);

        if $r30 != r2 goto label13;

        $r31 = virtualinvoke r28.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula input(int)>(2);

        if $r31 != r3 goto label13;

        return r28;

     label13:
        $z0 = interfaceinvoke $r26.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label12;

        $r32 = new kodkod.engine.bool.ITEGate;

        $i7 = r6.<kodkod.engine.bool.CBCFactory: int label>;

        $i8 = $i7 + 1;

        r6.<kodkod.engine.bool.CBCFactory: int label> = $i8;

        specialinvoke $r32.<kodkod.engine.bool.ITEGate: void <init>(int,int,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>($i7, $i6, r20, r21, r22);

        $r33 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Ternary ITE>;

        $r34 = specialinvoke r6.<kodkod.engine.bool.CBCFactory: kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)>($r33);

        virtualinvoke $r34.<kodkod.util.collections.CacheSet: boolean add(java.lang.Object)>($r32);

        return $r32;
    }

    kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary, kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.Operator$Nary r10;
        kodkod.engine.bool.BooleanValue r0, r2, $r13, r15, r16, $r17;
        kodkod.engine.bool.BooleanConstant $r14;
        kodkod.engine.bool.BooleanFormula $r11, $r12;
        kodkod.engine.bool.Operator $r1, $r3, $r4, $r5, $r7, $r8;
        int $i0, $i1;
        kodkod.engine.bool.CBCFactory$Assembler $r9;
        kodkod.engine.bool.CBCFactory r6;

        r6 := @this: kodkod.engine.bool.CBCFactory;

        r10 := @parameter0: kodkod.engine.bool.Operator$Nary;

        r0 := @parameter1: kodkod.engine.bool.BooleanValue;

        r2 := @parameter2: kodkod.engine.bool.BooleanValue;

        $r1 = virtualinvoke r0.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.Operator op()>();

        $i0 = $r1.<kodkod.engine.bool.Operator: int ordinal>;

        $r3 = virtualinvoke r2.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.Operator op()>();

        $i1 = $r3.<kodkod.engine.bool.Operator: int ordinal>;

        if $i0 >= $i1 goto label1;

        r15 = r0;

        r16 = r2;

        goto label2;

     label1:
        r15 = r2;

        r16 = r0;

     label2:
        $r4 = virtualinvoke r16.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.Operator op()>();

        $r5 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator CONST>;

        if $r4 != $r5 goto label5;

        $r14 = virtualinvoke r10.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant identity()>();

        if r16 != $r14 goto label3;

        $r17 = r15;

        goto label4;

     label3:
        $r17 = r16;

     label4:
        return $r17;

     label5:
        $r7 = virtualinvoke r15.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.Operator op()>();

        $r8 = virtualinvoke r16.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.Operator op()>();

        $r9 = specialinvoke r6.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler assembler(kodkod.engine.bool.Operator,kodkod.engine.bool.Operator)>($r7, $r8);

        $r12 = (kodkod.engine.bool.BooleanFormula) r15;

        $r11 = (kodkod.engine.bool.BooleanFormula) r16;

        $r13 = virtualinvoke $r9.<kodkod.engine.bool.CBCFactory$Assembler: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>(r10, $r12, $r11);

        return $r13;
    }

    kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.BooleanAccumulator)
    {
        kodkod.engine.bool.BooleanValue $r5, $r7, $r8, $r11, r22;
        kodkod.engine.bool.BooleanConstant $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r17, $r18, $r19, $r23;
        kodkod.engine.bool.Operator$Nary r1, $r27;
        kodkod.engine.bool.BooleanAccumulator r0;
        kodkod.engine.bool.BooleanFormula r34, r35;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.Iterator $r2, $r9, $r13, $r15, $r20, $r25, $r30, $r33;
        kodkod.engine.bool.NaryGate $r24, $r26, $r32;
        kodkod.util.collections.CacheSet $r14, $r28, $r29;
        kodkod.engine.bool.CBCFactory r3;
        java.lang.Object $r4, $r6, $r10, $r16, $r21, $r31;

        r3 := @this: kodkod.engine.bool.CBCFactory;

        r0 := @parameter0: kodkod.engine.bool.BooleanAccumulator;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: int size()>();

        r1 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op>;

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            default: goto label04;
        };

     label01:
        $r12 = virtualinvoke r1.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant identity()>();

        return $r12;

     label02:
        $r9 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: java.util.Iterator iterator()>();

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (kodkod.engine.bool.BooleanValue) $r10;

        return $r11;

     label03:
        $r2 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (kodkod.engine.bool.BooleanValue) $r4;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (kodkod.engine.bool.BooleanValue) $r6;

        $r8 = virtualinvoke r3.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r1, $r5, $r7);

        return $r8;

     label04:
        $r13 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: java.util.Iterator iterator()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.Operator$Nary: int hash(java.util.Iterator)>($r13);

        $i2 = r3.<kodkod.engine.bool.CBCFactory: int cmpMax>;

        if $i0 <= $i2 goto label07;

        $r29 = specialinvoke r3.<kodkod.engine.bool.CBCFactory: kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)>(r1);

        $r30 = virtualinvoke $r29.<kodkod.util.collections.CacheSet: java.util.Iterator get(int)>($i1);

        goto label06;

     label05:
        $r31 = interfaceinvoke $r30.<java.util.Iterator: java.lang.Object next()>();

        r34 = (kodkod.engine.bool.BooleanFormula) $r31;

        $i9 = virtualinvoke r34.<kodkod.engine.bool.BooleanFormula: int size()>();

        if $i9 != $i0 goto label06;

        $r32 = (kodkod.engine.bool.NaryGate) r34;

        $r33 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: java.util.Iterator iterator()>();

        $z3 = virtualinvoke $r32.<kodkod.engine.bool.NaryGate: boolean sameInputs(java.util.Iterator)>($r33);

        if $z3 == 0 goto label06;

        return r34;

     label06:
        $z4 = interfaceinvoke $r30.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label05;

        goto label13;

     label07:
        $r14 = specialinvoke r3.<kodkod.engine.bool.CBCFactory: kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)>(r1);

        $r15 = virtualinvoke $r14.<kodkod.util.collections.CacheSet: java.util.Iterator get(int)>($i1);

        goto label12;

     label08:
        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r35 = (kodkod.engine.bool.BooleanFormula) $r16;

        $i3 = virtualinvoke r35.<kodkod.engine.bool.BooleanFormula: int size()>();

        if $i3 != $i0 goto label09;

        $r24 = (kodkod.engine.bool.NaryGate) r35;

        $r25 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: java.util.Iterator iterator()>();

        $z2 = virtualinvoke $r24.<kodkod.engine.bool.NaryGate: boolean sameInputs(java.util.Iterator)>($r25);

        if $z2 == 0 goto label09;

        return r35;

     label09:
        $i4 = virtualinvoke r35.<kodkod.engine.bool.BooleanFormula: int size()>();

        if $i4 >= $i0 goto label12;

        $r17 = r3.<kodkod.engine.bool.CBCFactory: java.util.Set scrap0>;

        interfaceinvoke $r17.<java.util.Set: void clear()>();

        $r18 = r3.<kodkod.engine.bool.CBCFactory: java.util.Set scrap0>;

        $i5 = r3.<kodkod.engine.bool.CBCFactory: int cmpMax>;

        virtualinvoke r35.<kodkod.engine.bool.BooleanFormula: void flatten(kodkod.engine.bool.Operator,java.util.Set,int)>(r1, $r18, $i5);

        $r19 = r3.<kodkod.engine.bool.CBCFactory: java.util.Set scrap0>;

        $i6 = interfaceinvoke $r19.<java.util.Set: int size()>();

        if $i6 != $i0 goto label12;

        $r20 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: java.util.Iterator iterator()>();

        goto label11;

     label10:
        $r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r22 = (kodkod.engine.bool.BooleanValue) $r21;

        $r23 = r3.<kodkod.engine.bool.CBCFactory: java.util.Set scrap0>;

        $z1 = interfaceinvoke $r23.<java.util.Set: boolean contains(java.lang.Object)>(r22);

        if $z1 != 0 goto label11;

        goto label12;

     label11:
        $z0 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label10;

        return r35;

     label12:
        $z5 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label08;

     label13:
        $r26 = new kodkod.engine.bool.NaryGate;

        $i7 = r3.<kodkod.engine.bool.CBCFactory: int label>;

        $i8 = $i7 + 1;

        r3.<kodkod.engine.bool.CBCFactory: int label> = $i8;

        specialinvoke $r26.<kodkod.engine.bool.NaryGate: void <init>(kodkod.engine.bool.BooleanAccumulator,int,int)>(r0, $i7, $i1);

        $r27 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op>;

        $r28 = specialinvoke r3.<kodkod.engine.bool.CBCFactory: kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)>($r27);

        virtualinvoke $r28.<kodkod.util.collections.CacheSet: boolean add(java.lang.Object)>($r26);

        return $r26;
    }

    private kodkod.engine.bool.CBCFactory$Assembler assembler(kodkod.engine.bool.Operator, kodkod.engine.bool.Operator)
    {
        kodkod.engine.bool.Operator r1, r2;
        kodkod.engine.bool.CBCFactory$Assembler[] $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        kodkod.engine.bool.CBCFactory$Assembler $r4;
        kodkod.engine.bool.CBCFactory r0;

        r0 := @this: kodkod.engine.bool.CBCFactory;

        r1 := @parameter0: kodkod.engine.bool.Operator;

        r2 := @parameter1: kodkod.engine.bool.Operator;

        $r3 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler[] ASSEMBLERS>;

        $i0 = r1.<kodkod.engine.bool.Operator: int ordinal>;

        $i2 = $i0 << 2;

        $i1 = r2.<kodkod.engine.bool.Operator: int ordinal>;

        $i8 = $i2 + $i1;

        $i5 = r1.<kodkod.engine.bool.Operator: int ordinal>;

        $i3 = r1.<kodkod.engine.bool.Operator: int ordinal>;

        $i4 = $i3 - 1;

        $i6 = $i5 * $i4;

        $i7 = $i6 >> 1;

        $i9 = $i8 - $i7;

        $r4 = $r3[$i9];

        return $r4;
    }

    private kodkod.engine.bool.BooleanFormula cache(kodkod.engine.bool.Operator$Nary, kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFormula)
    {
        boolean $z0, $z1, $z2;
        kodkod.engine.bool.BinaryGate $r14;
        java.util.Set $r5, $r6, $r7, $r8, $r25, $r26, $r27, $r28;
        kodkod.engine.bool.Operator$Nary r2;
        kodkod.engine.bool.BooleanFormula r0, r1, $r12, $r13, $r20, $r21, r22, r23, r24, r29;
        kodkod.engine.bool.Operator $r3, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.util.Iterator $r10, $r18;
        kodkod.util.collections.CacheSet $r9, $r15, $r17;
        kodkod.engine.bool.CBCFactory r4;
        java.lang.Object $r11, $r19;

        r4 := @this: kodkod.engine.bool.CBCFactory;

        r2 := @parameter0: kodkod.engine.bool.Operator$Nary;

        r0 := @parameter1: kodkod.engine.bool.BooleanFormula;

        r1 := @parameter2: kodkod.engine.bool.BooleanFormula;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.BooleanFormula: int label()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.BooleanFormula: int label()>();

        if $i0 >= $i1 goto label01;

        r22 = r0;

        r23 = r1;

        goto label02;

     label01:
        r22 = r1;

        r23 = r0;

     label02:
        $i2 = virtualinvoke r2.<kodkod.engine.bool.Operator$Nary: int hash(kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>(r22, r23);

        $r3 = virtualinvoke r22.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        if $r3 == r2 goto label03;

        $r16 = virtualinvoke r23.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        if $r16 != r2 goto label07;

     label03:
        $r5 = r4.<kodkod.engine.bool.CBCFactory: java.util.Set scrap0>;

        interfaceinvoke $r5.<java.util.Set: void clear()>();

        $r6 = r4.<kodkod.engine.bool.CBCFactory: java.util.Set scrap0>;

        $i3 = r4.<kodkod.engine.bool.CBCFactory: int cmpMax>;

        $i4 = $i3 - 1;

        virtualinvoke r22.<kodkod.engine.bool.BooleanFormula: void flatten(kodkod.engine.bool.Operator,java.util.Set,int)>(r2, $r6, $i4);

        $r8 = r4.<kodkod.engine.bool.CBCFactory: java.util.Set scrap0>;

        $i5 = r4.<kodkod.engine.bool.CBCFactory: int cmpMax>;

        $r7 = r4.<kodkod.engine.bool.CBCFactory: java.util.Set scrap0>;

        $i6 = interfaceinvoke $r7.<java.util.Set: int size()>();

        $i7 = $i5 - $i6;

        virtualinvoke r23.<kodkod.engine.bool.BooleanFormula: void flatten(kodkod.engine.bool.Operator,java.util.Set,int)>(r2, $r8, $i7);

        $r9 = specialinvoke r4.<kodkod.engine.bool.CBCFactory: kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)>(r2);

        $r10 = virtualinvoke $r9.<kodkod.util.collections.CacheSet: java.util.Iterator get(int)>($i2);

        goto label06;

     label04:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r24 = (kodkod.engine.bool.BooleanFormula) $r11;

        $i8 = virtualinvoke r24.<kodkod.engine.bool.BooleanFormula: int size()>();

        if $i8 != 2 goto label05;

        $r12 = virtualinvoke r24.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula input(int)>(0);

        if $r12 != r22 goto label05;

        $r13 = virtualinvoke r24.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula input(int)>(1);

        if $r13 != r23 goto label05;

        return r24;

     label05:
        $r25 = r4.<kodkod.engine.bool.CBCFactory: java.util.Set scrap1>;

        interfaceinvoke $r25.<java.util.Set: void clear()>();

        $r26 = r4.<kodkod.engine.bool.CBCFactory: java.util.Set scrap1>;

        $i12 = r4.<kodkod.engine.bool.CBCFactory: int cmpMax>;

        virtualinvoke r24.<kodkod.engine.bool.BooleanFormula: void flatten(kodkod.engine.bool.Operator,java.util.Set,int)>(r2, $r26, $i12);

        $r27 = r4.<kodkod.engine.bool.CBCFactory: java.util.Set scrap0>;

        $r28 = r4.<kodkod.engine.bool.CBCFactory: java.util.Set scrap1>;

        $z1 = interfaceinvoke $r27.<java.util.Set: boolean equals(java.lang.Object)>($r28);

        if $z1 == 0 goto label06;

        return r24;

     label06:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label04;

        goto label10;

     label07:
        $r17 = specialinvoke r4.<kodkod.engine.bool.CBCFactory: kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)>(r2);

        $r18 = virtualinvoke $r17.<kodkod.util.collections.CacheSet: java.util.Iterator get(int)>($i2);

        goto label09;

     label08:
        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r29 = (kodkod.engine.bool.BooleanFormula) $r19;

        $i11 = virtualinvoke r29.<kodkod.engine.bool.BooleanFormula: int size()>();

        if $i11 != 2 goto label09;

        $r20 = virtualinvoke r29.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula input(int)>(0);

        if $r20 != r22 goto label09;

        $r21 = virtualinvoke r29.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula input(int)>(1);

        if $r21 != r23 goto label09;

        return r29;

     label09:
        $z2 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label08;

     label10:
        $r14 = new kodkod.engine.bool.BinaryGate;

        $i9 = r4.<kodkod.engine.bool.CBCFactory: int label>;

        $i10 = $i9 + 1;

        r4.<kodkod.engine.bool.CBCFactory: int label> = $i10;

        specialinvoke $r14.<kodkod.engine.bool.BinaryGate: void <init>(kodkod.engine.bool.Operator$Nary,int,int,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>(r2, $i9, $i2, r22, r23);

        $r15 = specialinvoke r4.<kodkod.engine.bool.CBCFactory: kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)>(r2);

        virtualinvoke $r15.<kodkod.util.collections.CacheSet: boolean add(java.lang.Object)>($r14);

        return $r14;
    }

    static int access$0(kodkod.engine.bool.CBCFactory)
    {
        int $i0;
        kodkod.engine.bool.CBCFactory r0;

        r0 := @parameter0: kodkod.engine.bool.CBCFactory;

        $i0 = r0.<kodkod.engine.bool.CBCFactory: int cmpMax>;

        return $i0;
    }

    static kodkod.engine.bool.BooleanFormula access$1(kodkod.engine.bool.CBCFactory, kodkod.engine.bool.Operator$Nary, kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFormula)
    {
        kodkod.engine.bool.Operator$Nary r1;
        kodkod.engine.bool.BooleanFormula r2, r3, $r4;
        kodkod.engine.bool.CBCFactory r0;

        r0 := @parameter0: kodkod.engine.bool.CBCFactory;

        r1 := @parameter1: kodkod.engine.bool.Operator$Nary;

        r2 := @parameter2: kodkod.engine.bool.BooleanFormula;

        r3 := @parameter3: kodkod.engine.bool.BooleanFormula;

        $r4 = specialinvoke r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanFormula cache(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>(r1, r2, r3);

        return $r4;
    }

    static java.util.Set access$2(kodkod.engine.bool.CBCFactory)
    {
        kodkod.engine.bool.CBCFactory r0;
        java.util.Set $r1;

        r0 := @parameter0: kodkod.engine.bool.CBCFactory;

        $r1 = r0.<kodkod.engine.bool.CBCFactory: java.util.Set scrap0>;

        return $r1;
    }

    static java.util.Set access$3(kodkod.engine.bool.CBCFactory)
    {
        kodkod.engine.bool.CBCFactory r0;
        java.util.Set $r1;

        r0 := @parameter0: kodkod.engine.bool.CBCFactory;

        $r1 = r0.<kodkod.engine.bool.CBCFactory: java.util.Set scrap1>;

        return $r1;
    }

    static kodkod.engine.bool.CBCFactory$Assembler access$4(kodkod.engine.bool.CBCFactory)
    {
        kodkod.engine.bool.CBCFactory$Assembler $r1;
        kodkod.engine.bool.CBCFactory r0;

        r0 := @parameter0: kodkod.engine.bool.CBCFactory;

        $r1 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler JoX>;

        return $r1;
    }

    static kodkod.engine.bool.CBCFactory$Assembler access$5(kodkod.engine.bool.CBCFactory)
    {
        kodkod.engine.bool.CBCFactory$Assembler $r1;
        kodkod.engine.bool.CBCFactory r0;

        r0 := @parameter0: kodkod.engine.bool.CBCFactory;

        $r1 = r0.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler NoX>;

        return $r1;
    }
}
