public class org.codehaus.jackson.map.introspect.BasicBeanDescription extends org.codehaus.jackson.map.BeanDescription
{
    protected final org.codehaus.jackson.map.MapperConfig _config;
    protected final org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector;
    protected final org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo;
    protected org.codehaus.jackson.map.type.TypeBindings _bindings;
    protected final java.util.List _properties;
    protected org.codehaus.jackson.map.introspect.AnnotatedMethod _anySetterMethod;
    protected java.util.Map _injectables;
    protected java.util.Set _ignoredPropertyNames;
    protected java.util.Set _ignoredPropertyNamesForDeser;
    protected org.codehaus.jackson.map.introspect.AnnotatedMethod _jsonValueMethod;
    protected org.codehaus.jackson.map.introspect.AnnotatedMethod _anyGetterMethod;

    public void <init>(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        java.util.List $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.MapperConfig r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: void <init>(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedClass,java.util.List)>(r1, r2, r3, $r4);

        return;
    }

    protected void <init>(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.AnnotatedClass, java.util.List)
    {
        java.util.List r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.MapperConfig r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r5;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r2 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r4 := @parameter3: java.util.List;

        specialinvoke r0.<org.codehaus.jackson.map.BeanDescription: void <init>(org.codehaus.jackson.type.JavaType)>(r1);

        r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.MapperConfig _config> = r2;

        if r2 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke r2.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

     label2:
        r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector> = $r5;

        r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo> = r3;

        r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List _properties> = r4;

        return;
    }

    public static org.codehaus.jackson.map.introspect.BasicBeanDescription forDeserialization(org.codehaus.jackson.map.introspect.POJOPropertiesCollector)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r6;
        java.util.Set $r7, $r8;
        org.codehaus.jackson.map.MapperConfig $r2;
        java.util.List $r5;
        org.codehaus.jackson.map.introspect.POJOPropertiesCollector r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r4;
        java.util.Map $r9;
        org.codehaus.jackson.type.JavaType $r3;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.POJOPropertiesCollector;

        $r0 = new org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: org.codehaus.jackson.map.MapperConfig getConfig()>();

        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: org.codehaus.jackson.type.JavaType getType()>();

        $r4 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: org.codehaus.jackson.map.introspect.AnnotatedClass getClassDef()>();

        $r5 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: java.util.List getProperties()>();

        specialinvoke $r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: void <init>(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedClass,java.util.List)>($r2, $r3, $r4, $r5);

        $r6 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: org.codehaus.jackson.map.introspect.AnnotatedMethod getAnySetterMethod()>();

        $r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod _anySetterMethod> = $r6;

        $r7 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: java.util.Set getIgnoredPropertyNames()>();

        $r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.Set _ignoredPropertyNames> = $r7;

        $r8 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: java.util.Set getIgnoredPropertyNamesForDeser()>();

        $r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.Set _ignoredPropertyNamesForDeser> = $r8;

        $r9 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: java.util.Map getInjectables()>();

        $r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.Map _injectables> = $r9;

        return $r0;
    }

    public static org.codehaus.jackson.map.introspect.BasicBeanDescription forSerialization(org.codehaus.jackson.map.introspect.POJOPropertiesCollector)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r6, $r7;
        org.codehaus.jackson.map.MapperConfig $r2;
        java.util.List $r5;
        org.codehaus.jackson.map.introspect.POJOPropertiesCollector r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r4;
        org.codehaus.jackson.type.JavaType $r3;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.POJOPropertiesCollector;

        $r0 = new org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: org.codehaus.jackson.map.MapperConfig getConfig()>();

        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: org.codehaus.jackson.type.JavaType getType()>();

        $r4 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: org.codehaus.jackson.map.introspect.AnnotatedClass getClassDef()>();

        $r5 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: java.util.List getProperties()>();

        specialinvoke $r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: void <init>(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedClass,java.util.List)>($r2, $r3, $r4, $r5);

        $r6 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: org.codehaus.jackson.map.introspect.AnnotatedMethod getJsonValueMethod()>();

        $r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod _jsonValueMethod> = $r6;

        $r7 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.POJOPropertiesCollector: org.codehaus.jackson.map.introspect.AnnotatedMethod getAnyGetterMethod()>();

        $r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod _anyGetterMethod> = $r7;

        return $r0;
    }

    public static org.codehaus.jackson.map.introspect.BasicBeanDescription forOtherUse(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        java.util.List $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r0;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.MapperConfig r1;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r0 = new org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: void <init>(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedClass,java.util.List)>(r1, r2, r3, $r4);

        return $r0;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        return $r1;
    }

    public java.util.List findProperties()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        java.util.List $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List _properties>;

        return $r1;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod findJsonValueMethod()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod _jsonValueMethod>;

        return $r1;
    }

    public java.util.Set getIgnoredPropertyNames()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        java.util.Set $r1, $r2, $r3;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.Set _ignoredPropertyNames>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r3;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.Set _ignoredPropertyNames>;

        return $r2;
    }

    public java.util.Set getIgnoredPropertyNamesForDeser()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        java.util.Set $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.Set _ignoredPropertyNamesForDeser>;

        return $r1;
    }

    public boolean hasKnownClassAnnotations()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: boolean hasAnnotations()>();

        return $z0;
    }

    public org.codehaus.jackson.map.util.Annotations getClassAnnotations()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.util.Annotations $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.util.Annotations getAnnotations()>();

        return $r2;
    }

    public org.codehaus.jackson.map.type.TypeBindings bindingsForBeanType()
    {
        org.codehaus.jackson.map.type.TypeFactory $r5;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.type.JavaType $r6;
        org.codehaus.jackson.map.type.TypeBindings $r1, $r2, $r3;
        org.codehaus.jackson.map.MapperConfig $r4;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.type.TypeBindings _bindings>;

        if $r1 != null goto label1;

        $r3 = new org.codehaus.jackson.map.type.TypeBindings;

        $r4 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.MapperConfig _config>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.type.TypeFactory getTypeFactory()>();

        $r6 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.type.JavaType _type>;

        specialinvoke $r3.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,org.codehaus.jackson.type.JavaType)>($r5, $r6);

        r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.type.TypeBindings _bindings> = $r3;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.type.TypeBindings _bindings>;

        return $r2;
    }

    public org.codehaus.jackson.type.JavaType resolveType(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r1;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.type.TypeBindings $r2;

        r1 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r0 := @parameter0: java.lang.reflect.Type;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.type.TypeBindings bindingsForBeanType()>();

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType resolveType(java.lang.reflect.Type)>(r0);

        return $r3;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedConstructor findDefaultConstructor()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor getDefaultConstructor()>();

        return $r2;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod findAnySetter() throws java.lang.IllegalArgumentException
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1, $r2, $r7, $r14;
        java.lang.IllegalArgumentException $r4;
        java.lang.Class $r3;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r12;
        java.lang.String $r8, $r11, $r13;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod _anySetterMethod>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod _anySetterMethod>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getParameterClass(int)>(0);

        if $r3 == class "Ljava/lang/String;" goto label1;

        if $r3 == class "Ljava/lang/Object;" goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid \'any-setter\' annotation on method ");

        $r7 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod _anySetterMethod>;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(): first argument not of type String or Object, but ");

        $r11 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r4;

     label1:
        $r14 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod _anySetterMethod>;

        return $r14;
    }

    public java.util.Map findInjectables()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        java.util.Map $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.Map _injectables>;

        return $r1;
    }

    public java.util.List getConstructors()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        java.util.List $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List getConstructors()>();

        return $r2;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod findMethod(java.lang.String, java.lang.Class[])
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r4;
        java.lang.Class[] r2;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        $r3 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethod findMethod(java.lang.String,java.lang.Class[])>(r1, r2);

        return $r4;
    }

    public java.lang.Object instantiateBean(boolean)
    {
        java.lang.Throwable $r7, r25;
        java.lang.Object[] $r4;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        java.lang.Error $r24;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r2;
        java.lang.reflect.Constructor $r3;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1, $r11;
        java.lang.String $r13, $r17, $r20, $r22;
        boolean z0, $z1, $z2;
        java.lang.RuntimeException $r23;
        java.lang.IllegalArgumentException $r8;
        java.lang.Exception $r6;
        java.lang.Object $r5;
        java.lang.StringBuilder $r9, $r10, $r14, $r15, $r18, $r19, $r21;
        java.lang.Class $r12, $r16;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor getDefaultConstructor()>();

        if $r2 != null goto label1;

        return null;

     label1:
        if z0 == 0 goto label2;

        virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: void fixAccess()>();

     label2:
        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: java.lang.reflect.Constructor getAnnotated()>();

        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r4);

     label3:
        return $r5;

     label4:
        $r6 := @caughtexception;

        r25 = $r6;

     label5:
        $r7 = virtualinvoke r25.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r7 == null goto label6;

        r25 = virtualinvoke r25.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label5;

     label6:
        $z1 = r25 instanceof java.lang.Error;

        if $z1 == 0 goto label7;

        $r24 = (java.lang.Error) r25;

        throw $r24;

     label7:
        $z2 = r25 instanceof java.lang.RuntimeException;

        if $z2 == 0 goto label8;

        $r23 = (java.lang.RuntimeException) r25;

        throw $r23;

     label8:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to instantiate bean of type ");

        $r11 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r12 = virtualinvoke $r11.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class getAnnotated()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": (");

        $r16 = virtualinvoke r25.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r20 = virtualinvoke r25.<java.lang.Throwable: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r22, r25);

        throw $r8;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public java.util.List getFactoryMethods()
    {
        java.util.Iterator $r4;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod r6;
        java.util.ArrayList $r3;
        java.util.List $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List getStaticMethods()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return $r2;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r5;

        $z2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: boolean isFactoryMethod(org.codehaus.jackson.map.introspect.AnnotatedMethod)>(r6);

        if $z2 == 0 goto label3;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

     label3:
        goto label2;

     label4:
        return $r3;
    }

    public transient java.lang.reflect.Constructor findSingleArgConstructor(java.lang.Class[])
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        java.lang.Class[] r7;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor r5;
        java.lang.reflect.Constructor $r9;
        java.util.List $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;
        int $i0, i1, i2;
        java.lang.Object $r4;
        java.lang.Class $r6, r8;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r7 := @parameter0: java.lang.Class[];

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List getConstructors()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.jackson.map.introspect.AnnotatedConstructor) $r4;

        $i0 = virtualinvoke r5.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: int getParameterCount()>();

        if $i0 != 1 goto label4;

        $r6 = virtualinvoke r5.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: java.lang.Class getParameterClass(int)>(0);

        i1 = lengthof r7;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        r8 = r7[i2];

        if r8 != $r6 goto label3;

        $r9 = virtualinvoke r5.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: java.lang.reflect.Constructor getAnnotated()>();

        return $r9;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        goto label1;

     label5:
        return null;
    }

    public transient java.lang.reflect.Method findFactoryMethod(java.lang.Class[])
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod r5;
        java.lang.Class[] r7;
        java.util.List $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;
        int i0, i1;
        java.lang.Object $r4;
        java.lang.Class $r6, r8;
        java.lang.reflect.Method $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r7 := @parameter0: java.lang.Class[];

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List getStaticMethods()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r4;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: boolean isFactoryMethod(org.codehaus.jackson.map.introspect.AnnotatedMethod)>(r5);

        if $z1 == 0 goto label4;

        $r6 = virtualinvoke r5.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getParameterClass(int)>(0);

        i0 = lengthof r7;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r8 = r7[i1];

        $z2 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r8);

        if $z2 == 0 goto label3;

        $r9 = virtualinvoke r5.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        return $r9;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        goto label1;

     label5:
        return null;
    }

    protected boolean isFactoryMethod(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r4;
        java.lang.Class $r1, $r3;
        java.lang.String $r5, $r6;
        boolean $z0, $z1, $z2;

        r2 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getRawType()>();

        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.Class getBeanClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z1 = virtualinvoke $r4.<org.codehaus.jackson.map.AnnotationIntrospector: boolean hasCreatorAnnotation(org.codehaus.jackson.map.introspect.Annotated)>(r0);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r5 = "valueOf";

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public java.util.List findCreatorPropertyNames()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r1;
        java.util.ArrayList $r11, r12;
        int $i0, i1, i2;
        java.lang.String $r7, $r10;
        boolean $z0;
        java.util.Iterator $r2;
        org.codehaus.jackson.map.introspect.AnnotatedWithParams r4;
        org.codehaus.jackson.map.introspect.AnnotatedParameter $r6, $r9;
        org.codehaus.jackson.map.AnnotationIntrospector $r5, $r8;
        java.util.List $r0, $r13;
        java.lang.Object $r3;

        r1 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r12 = null;

        i1 = 0;

     label01:
        if i1 >= 2 goto label11;

        if i1 != 0 goto label02;

        $r13 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List getConstructors()>();

        goto label03;

     label02:
        $r13 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List getFactoryMethods()>();

     label03:
        $r2 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.codehaus.jackson.map.introspect.AnnotatedWithParams) $r3;

        $i0 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: int getParameterCount()>();

        if $i0 >= 1 goto label05;

        goto label04;

     label05:
        $r5 = r1.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r6 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: org.codehaus.jackson.map.introspect.AnnotatedParameter getParameter(int)>(0);

        $r7 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findPropertyNameForParam(org.codehaus.jackson.map.introspect.AnnotatedParameter)>($r6);

        if $r7 != null goto label06;

        goto label04;

     label06:
        if r12 != null goto label07;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r12 = $r11;

     label07:
        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>($r7);

        i2 = 1;

     label08:
        if i2 >= $i0 goto label09;

        $r8 = r1.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r9 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: org.codehaus.jackson.map.introspect.AnnotatedParameter getParameter(int)>(i2);

        $r10 = virtualinvoke $r8.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findPropertyNameForParam(org.codehaus.jackson.map.introspect.AnnotatedParameter)>($r9);

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>($r10);

        i2 = i2 + 1;

        goto label08;

     label09:
        goto label04;

     label10:
        i1 = i1 + 1;

        goto label01;

     label11:
        if r12 != null goto label12;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r0;

     label12:
        return r12;
    }

    public org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion findSerializationInclusion(org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion r2, $r5;
        org.codehaus.jackson.map.AnnotationIntrospector $r1, $r4;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r2 := @parameter0: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r1 != null goto label1;

        return r2;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r3 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion findSerializationInclusion(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion)>($r3, r2);

        return $r5;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod findAnyGetter() throws java.lang.IllegalArgumentException
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1, $r2, $r3, $r9;
        java.lang.IllegalArgumentException $r6;
        java.lang.Class $r4, $r5;
        java.lang.StringBuilder $r7, $r8, $r11, $r12;
        java.lang.String $r10, $r13;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod _anyGetterMethod>;

        if $r1 == null goto label1;

        $r3 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod _anyGetterMethod>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getRawType()>();

        $r5 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid \'any-getter\' annotation on method ");

        $r9 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod _anyGetterMethod>;

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(): return type is not instance of java.util.Map");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod _anyGetterMethod>;

        return $r2;
    }

    public java.util.Map findBackReferenceProperties()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        java.util.HashMap $r16, r17;
        org.codehaus.jackson.map.BeanPropertyDefinition r4;
        org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty $r7;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r5;
        java.lang.String $r8, $r15;
        boolean $z0, $z1;
        java.util.Iterator $r2;
        java.lang.IllegalArgumentException $r10;
        org.codehaus.jackson.map.AnnotationIntrospector $r6;
        java.util.List $r1;
        java.lang.Object $r3, $r9;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r17 = null;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List _properties>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.codehaus.jackson.map.BeanPropertyDefinition) $r3;

        $r5 = virtualinvoke r4.<org.codehaus.jackson.map.BeanPropertyDefinition: org.codehaus.jackson.map.introspect.AnnotatedMember getMutator()>();

        if $r5 != null goto label2;

        goto label1;

     label2:
        $r6 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty findReferenceType(org.codehaus.jackson.map.introspect.AnnotatedMember)>($r5);

        if $r7 == null goto label4;

        $z0 = virtualinvoke $r7.<org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty: boolean isBackReference()>();

        if $z0 == 0 goto label4;

        if r17 != null goto label3;

        $r16 = new java.util.HashMap;

        specialinvoke $r16.<java.util.HashMap: void <init>()>();

        r17 = $r16;

     label3:
        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty: java.lang.String getName()>();

        $r9 = virtualinvoke r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r5);

        if $r9 == null goto label4;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple back-reference properties with name \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label4:
        goto label1;

     label5:
        return r17;
    }

    public java.util.LinkedHashMap _findPropertyFields(java.util.Collection, boolean)
    {
        java.util.Iterator $r3;
        java.util.Collection r8;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r1;
        org.codehaus.jackson.map.BeanPropertyDefinition r5;
        java.util.LinkedHashMap $r0;
        java.util.List $r2;
        java.lang.Object $r4;
        org.codehaus.jackson.map.introspect.AnnotatedField $r6;
        java.lang.String $r7;
        boolean $z0, z1, $z2;

        r1 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r8 := @parameter0: java.util.Collection;

        z1 := @parameter1: boolean;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r2 = r1.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List _properties>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.jackson.map.BeanPropertyDefinition) $r4;

        $r6 = virtualinvoke r5.<org.codehaus.jackson.map.BeanPropertyDefinition: org.codehaus.jackson.map.introspect.AnnotatedField getField()>();

        if $r6 == null goto label3;

        $r7 = virtualinvoke r5.<org.codehaus.jackson.map.BeanPropertyDefinition: java.lang.String getName()>();

        if r8 == null goto label2;

        $z0 = interfaceinvoke r8.<java.util.Collection: boolean contains(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        virtualinvoke $r0.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

     label3:
        goto label1;

     label4:
        return $r0;
    }

    public java.util.LinkedHashMap findGetters(org.codehaus.jackson.map.introspect.VisibilityChecker, java.util.Collection)
    {
        java.util.Iterator $r3;
        java.util.Collection r8;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r1;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r6;
        org.codehaus.jackson.map.BeanPropertyDefinition r5;
        java.util.LinkedHashMap $r0;
        java.util.List $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker r9;
        java.lang.Object $r4;
        java.lang.String $r7;
        boolean $z0, $z1;

        r1 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r9 := @parameter0: org.codehaus.jackson.map.introspect.VisibilityChecker;

        r8 := @parameter1: java.util.Collection;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r2 = r1.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List _properties>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.jackson.map.BeanPropertyDefinition) $r4;

        $r6 = virtualinvoke r5.<org.codehaus.jackson.map.BeanPropertyDefinition: org.codehaus.jackson.map.introspect.AnnotatedMethod getGetter()>();

        if $r6 == null goto label3;

        $r7 = virtualinvoke r5.<org.codehaus.jackson.map.BeanPropertyDefinition: java.lang.String getName()>();

        if r8 == null goto label2;

        $z0 = interfaceinvoke r8.<java.util.Collection: boolean contains(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        virtualinvoke $r0.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

     label3:
        goto label1;

     label4:
        return $r0;
    }

    public java.util.LinkedHashMap findSetters(org.codehaus.jackson.map.introspect.VisibilityChecker)
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r1;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r6;
        org.codehaus.jackson.map.BeanPropertyDefinition r5;
        java.util.LinkedHashMap $r0;
        java.util.List $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker r8;
        java.lang.Object $r4;
        java.lang.String $r7;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r8 := @parameter0: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r2 = r1.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List _properties>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.jackson.map.BeanPropertyDefinition) $r4;

        $r6 = virtualinvoke r5.<org.codehaus.jackson.map.BeanPropertyDefinition: org.codehaus.jackson.map.introspect.AnnotatedMethod getSetter()>();

        if $r6 == null goto label2;

        $r7 = virtualinvoke r5.<org.codehaus.jackson.map.BeanPropertyDefinition: java.lang.String getName()>();

        virtualinvoke $r0.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public java.util.LinkedHashMap findSerializableFields(org.codehaus.jackson.map.introspect.VisibilityChecker, java.util.Collection)
    {
        java.util.LinkedHashMap $r2;
        java.util.Collection r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r3 := @parameter0: org.codehaus.jackson.map.introspect.VisibilityChecker;

        r1 := @parameter1: java.util.Collection;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.LinkedHashMap _findPropertyFields(java.util.Collection,boolean)>(r1, 1);

        return $r2;
    }

    public java.util.LinkedHashMap findDeserializableFields(org.codehaus.jackson.map.introspect.VisibilityChecker, java.util.Collection)
    {
        java.util.LinkedHashMap $r2;
        java.util.Collection r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r3 := @parameter0: org.codehaus.jackson.map.introspect.VisibilityChecker;

        r1 := @parameter1: java.util.Collection;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.LinkedHashMap _findPropertyFields(java.util.Collection,boolean)>(r1, 0);

        return $r2;
    }

    public volatile java.util.Map findSerializableFields(org.codehaus.jackson.map.introspect.VisibilityChecker, java.util.Collection)
    {
        java.util.LinkedHashMap $r3;
        org.codehaus.jackson.map.introspect.VisibilityChecker r1;
        java.util.Collection r2;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.VisibilityChecker;

        r2 := @parameter1: java.util.Collection;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.LinkedHashMap findSerializableFields(org.codehaus.jackson.map.introspect.VisibilityChecker,java.util.Collection)>(r1, r2);

        return $r3;
    }
}
