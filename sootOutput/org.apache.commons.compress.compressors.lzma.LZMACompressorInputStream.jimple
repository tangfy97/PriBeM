public class org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream
{
    private final java.io.InputStream in;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream r0;
        org.tukaani.xz.LZMAInputStream $r1;
        java.io.InputStream r2;

        r0 := @this: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;

        r2 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.compress.compressors.CompressorInputStream: void <init>()>();

        $r1 = new org.tukaani.xz.LZMAInputStream;

        specialinvoke $r1.<org.tukaani.xz.LZMAInputStream: void <init>(java.io.InputStream)>(r2);

        r0.<org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream: java.io.InputStream in> = $r1;

        return;
    }

    public int read() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream r0;
        byte $b1;
        int $i0, $i3;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $b1 = 0;

        goto label2;

     label1:
        $b1 = 1;

     label2:
        virtualinvoke r0.<org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream: void count(int)>($b1);

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream r0;
        int i0, i1, $i2;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream: java.io.InputStream in>;

        $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream: void count(int)>($i2);

        return $i2;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream r0;
        long l0, $l1;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream: java.io.InputStream in>;

        $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0);

        return $l1;
    }

    public int available() throws java.io.IOException
    {
        int $i0;
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }
}
