public class org.springframework.web.multipart.support.MultipartFilter extends org.springframework.web.filter.OncePerRequestFilter
{
    public static final java.lang.String DEFAULT_MULTIPART_RESOLVER_BEAN_NAME;
    private java.lang.String multipartResolverBeanName;

    public void <init>()
    {
        org.springframework.web.multipart.support.MultipartFilter r0;

        r0 := @this: org.springframework.web.multipart.support.MultipartFilter;

        specialinvoke r0.<org.springframework.web.filter.OncePerRequestFilter: void <init>()>();

        r0.<org.springframework.web.multipart.support.MultipartFilter: java.lang.String multipartResolverBeanName> = "filterMultipartResolver";

        return;
    }

    public void setMultipartResolverBeanName(java.lang.String)
    {
        org.springframework.web.multipart.support.MultipartFilter r0;
        java.lang.String r1;

        r0 := @this: org.springframework.web.multipart.support.MultipartFilter;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.web.multipart.support.MultipartFilter: java.lang.String multipartResolverBeanName> = r1;

        return;
    }

    protected java.lang.String getMultipartResolverBeanName()
    {
        org.springframework.web.multipart.support.MultipartFilter r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.web.multipart.support.MultipartFilter;

        $r1 = r0.<org.springframework.web.multipart.support.MultipartFilter: java.lang.String multipartResolverBeanName>;

        return $r1;
    }

    protected void doFilterInternal(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.FilterChain) throws javax.servlet.ServletException, java.io.IOException
    {
        java.lang.Throwable $r20;
        javax.servlet.FilterChain r4;
        org.springframework.web.multipart.MultipartHttpServletRequest $r6, $r21;
        javax.servlet.http.HttpServletRequest r1, r22;
        java.lang.String $r9, $r12, $r16, $r19;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.servlet.http.HttpServletResponse r5;
        org.springframework.web.multipart.support.MultipartFilter r0;
        org.apache.commons.logging.Log $r3, $r8, $r13, $r15;
        java.lang.StringBuilder $r7, $r10, $r11, $r14, $r17, $r18;
        org.springframework.web.multipart.MultipartResolver $r2;

        r0 := @this: org.springframework.web.multipart.support.MultipartFilter;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r5 := @parameter1: javax.servlet.http.HttpServletResponse;

        r4 := @parameter2: javax.servlet.FilterChain;

        $r2 = virtualinvoke r0.<org.springframework.web.multipart.support.MultipartFilter: org.springframework.web.multipart.MultipartResolver lookupMultipartResolver(javax.servlet.http.HttpServletRequest)>(r1);

        r22 = r1;

        $z0 = interfaceinvoke $r2.<org.springframework.web.multipart.MultipartResolver: boolean isMultipart(javax.servlet.http.HttpServletRequest)>(r1);

        if $z0 == 0 goto label2;

        $r13 = r0.<org.springframework.web.multipart.support.MultipartFilter: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r13.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label1;

        $r15 = r0.<org.springframework.web.multipart.support.MultipartFilter: org.apache.commons.logging.Log logger>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Resolving multipart request [");

        $r16 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] with MultipartFilter");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r19);

     label1:
        r22 = interfaceinvoke $r2.<org.springframework.web.multipart.MultipartResolver: org.springframework.web.multipart.MultipartHttpServletRequest resolveMultipart(javax.servlet.http.HttpServletRequest)>(r1);

        goto label3;

     label2:
        $r3 = r0.<org.springframework.web.multipart.support.MultipartFilter: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label3;

        $r8 = r0.<org.springframework.web.multipart.support.MultipartFilter: org.apache.commons.logging.Log logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Request [");

        $r9 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a multipart request");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label3:
        interfaceinvoke r4.<javax.servlet.FilterChain: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>(r22, r5);

        goto label6;

     label4:
        $r20 := @caughtexception;

        $z4 = r22 instanceof org.springframework.web.multipart.MultipartHttpServletRequest;

        if $z4 == 0 goto label5;

        $r21 = (org.springframework.web.multipart.MultipartHttpServletRequest) r22;

        interfaceinvoke $r2.<org.springframework.web.multipart.MultipartResolver: void cleanupMultipart(org.springframework.web.multipart.MultipartHttpServletRequest)>($r21);

     label5:
        throw $r20;

     label6:
        $z2 = r22 instanceof org.springframework.web.multipart.MultipartHttpServletRequest;

        if $z2 == 0 goto label7;

        $r6 = (org.springframework.web.multipart.MultipartHttpServletRequest) r22;

        interfaceinvoke $r2.<org.springframework.web.multipart.MultipartResolver: void cleanupMultipart(org.springframework.web.multipart.MultipartHttpServletRequest)>($r6);

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label4;
    }

    protected org.springframework.web.multipart.MultipartResolver lookupMultipartResolver(javax.servlet.http.HttpServletRequest)
    {
        org.springframework.web.multipart.support.MultipartFilter r0;
        javax.servlet.http.HttpServletRequest r2;
        org.springframework.web.multipart.MultipartResolver $r1;

        r0 := @this: org.springframework.web.multipart.support.MultipartFilter;

        r2 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = virtualinvoke r0.<org.springframework.web.multipart.support.MultipartFilter: org.springframework.web.multipart.MultipartResolver lookupMultipartResolver()>();

        return $r1;
    }

    protected org.springframework.web.multipart.MultipartResolver lookupMultipartResolver()
    {
        org.springframework.web.context.WebApplicationContext $r3;
        org.springframework.web.multipart.support.MultipartFilter r0;
        org.apache.commons.logging.Log $r1, $r8;
        javax.servlet.ServletContext $r2;
        java.lang.Object $r5;
        java.lang.StringBuilder $r7, $r10, $r11;
        java.lang.String $r4, $r9, $r12;
        boolean $z0;
        org.springframework.web.multipart.MultipartResolver $r6;

        r0 := @this: org.springframework.web.multipart.support.MultipartFilter;

        $r1 = r0.<org.springframework.web.multipart.support.MultipartFilter: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<org.springframework.web.multipart.support.MultipartFilter: org.apache.commons.logging.Log logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Using MultipartResolver \'");

        $r9 = virtualinvoke r0.<org.springframework.web.multipart.support.MultipartFilter: java.lang.String getMultipartResolverBeanName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for MultipartFilter");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label1:
        $r2 = virtualinvoke r0.<org.springframework.web.multipart.support.MultipartFilter: javax.servlet.ServletContext getServletContext()>();

        $r3 = staticinvoke <org.springframework.web.context.support.WebApplicationContextUtils: org.springframework.web.context.WebApplicationContext getRequiredWebApplicationContext(javax.servlet.ServletContext)>($r2);

        $r4 = virtualinvoke r0.<org.springframework.web.multipart.support.MultipartFilter: java.lang.String getMultipartResolverBeanName()>();

        $r5 = interfaceinvoke $r3.<org.springframework.web.context.WebApplicationContext: java.lang.Object getBean(java.lang.String,java.lang.Class)>($r4, class "Lorg/springframework/web/multipart/MultipartResolver;");

        $r6 = (org.springframework.web.multipart.MultipartResolver) $r5;

        return $r6;
    }

    public static void <clinit>()
    {
        <org.springframework.web.multipart.support.MultipartFilter: java.lang.String DEFAULT_MULTIPART_RESOLVER_BEAN_NAME> = "filterMultipartResolver";

        return;
    }
}
