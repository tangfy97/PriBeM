public abstract class nu.xom.Node extends java.lang.Object
{
    private nu.xom.ParentNode parent;
    private static nu.xom.jaxen.NamespaceContext emptyContext;

    void <init>()
    {
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<nu.xom.Node: nu.xom.ParentNode parent> = null;

        return;
    }

    public abstract java.lang.String getValue();

    public final nu.xom.Document getDocument()
    {
        nu.xom.Document $r1;
        nu.xom.Node r0, r2;
        boolean $z0;

        r0 := @this: nu.xom.Node;

        r2 = r0;

     label1:
        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<nu.xom.Node: boolean isDocument()>();

        if $z0 != 0 goto label2;

        r2 = virtualinvoke r2.<nu.xom.Node: nu.xom.ParentNode getParent()>();

        goto label1;

     label2:
        $r1 = (nu.xom.Document) r2;

        return $r1;
    }

    final nu.xom.Node getRoot()
    {
        nu.xom.ParentNode $r1, $r2, r3;
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        $r1 = virtualinvoke r0.<nu.xom.Node: nu.xom.ParentNode getParent()>();

        r3 = $r1;

        if $r1 != null goto label1;

        return r0;

     label1:
        $r2 = virtualinvoke r3.<nu.xom.Node: nu.xom.ParentNode getParent()>();

        if $r2 == null goto label2;

        r3 = virtualinvoke r3.<nu.xom.Node: nu.xom.ParentNode getParent()>();

        goto label1;

     label2:
        return r3;
    }

    public java.lang.String getBaseURI()
    {
        nu.xom.ParentNode $r1, $r2;
        java.lang.String $r3;
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        $r1 = r0.<nu.xom.Node: nu.xom.ParentNode parent>;

        if $r1 != null goto label1;

        return "";

     label1:
        $r2 = r0.<nu.xom.Node: nu.xom.ParentNode parent>;

        $r3 = virtualinvoke $r2.<nu.xom.ParentNode: java.lang.String getBaseURI()>();

        return $r3;
    }

    public final nu.xom.ParentNode getParent()
    {
        nu.xom.ParentNode $r1;
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        $r1 = r0.<nu.xom.Node: nu.xom.ParentNode parent>;

        return $r1;
    }

    final void setParent(nu.xom.ParentNode)
    {
        nu.xom.ParentNode r1;
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        r1 := @parameter0: nu.xom.ParentNode;

        r0.<nu.xom.Node: nu.xom.ParentNode parent> = r1;

        return;
    }

    public void detach()
    {
        nu.xom.Attribute $r5;
        nu.xom.Element r4;
        nu.xom.ParentNode $r1, $r2, $r3;
        nu.xom.Node r0;
        boolean $z0;

        r0 := @this: nu.xom.Node;

        $r1 = r0.<nu.xom.Node: nu.xom.ParentNode parent>;

        if $r1 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<nu.xom.Node: boolean isAttribute()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<nu.xom.Node: nu.xom.ParentNode parent>;

        r4 = (nu.xom.Element) $r3;

        $r5 = (nu.xom.Attribute) r0;

        virtualinvoke r4.<nu.xom.Element: nu.xom.Attribute removeAttribute(nu.xom.Attribute)>($r5);

        goto label3;

     label2:
        $r2 = r0.<nu.xom.Node: nu.xom.ParentNode parent>;

        virtualinvoke $r2.<nu.xom.ParentNode: nu.xom.Node removeChild(nu.xom.Node)>(r0);

     label3:
        return;
    }

    public abstract nu.xom.Node getChild(int);

    public abstract int getChildCount();

    public abstract nu.xom.Node copy();

    public abstract java.lang.String toXML();

    public final boolean equals(java.lang.Object)
    {
        java.lang.Object r1;
        nu.xom.Node r0;
        boolean $z0;

        r0 := @this: nu.xom.Node;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final int hashCode()
    {
        int $i0;
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public final nu.xom.Nodes query(java.lang.String, nu.xom.XPathContext)
    {
        java.lang.Throwable $r11;
        nu.xom.XPathException $r10, $r13, $r19;
        java.lang.StringBuffer $r14, $r15, $r17;
        nu.xom.Nodes $r7;
        java.lang.String r3, $r16, $r18;
        boolean $z0, $z1;
        nu.xom.XPathContext r4;
        nu.xom.jaxen.NamespaceContext $r5, $r8;
        nu.xom.Node r0, $r1;
        java.lang.Exception $r12;
        java.util.List $r6;
        nu.xom.DocumentFragment $r9, r20;
        nu.xom.JaxenConnector $r2;

        r0 := @this: nu.xom.Node;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: nu.xom.XPathContext;

        $z0 = virtualinvoke r0.<nu.xom.Node: boolean isDocType()>();

        if $z0 == 0 goto label01;

        $r10 = new nu.xom.XPathException;

        specialinvoke $r10.<nu.xom.XPathException: void <init>(java.lang.String)>("Can\'t use XPath on a DocType");

        throw $r10;

     label01:
        r20 = null;

        $r1 = virtualinvoke r0.<nu.xom.Node: nu.xom.Node getRoot()>();

        $z1 = virtualinvoke $r1.<nu.xom.Node: boolean isDocument()>();

        if $z1 != 0 goto label02;

        $r9 = new nu.xom.DocumentFragment;

        specialinvoke $r9.<nu.xom.DocumentFragment: void <init>()>();

        r20 = $r9;

        virtualinvoke $r9.<nu.xom.DocumentFragment: void appendChild(nu.xom.Node)>($r1);

     label02:
        $r2 = new nu.xom.JaxenConnector;

        specialinvoke $r2.<nu.xom.JaxenConnector: void <init>(java.lang.String)>(r3);

        if r4 != null goto label03;

        $r8 = <nu.xom.Node: nu.xom.jaxen.NamespaceContext emptyContext>;

        virtualinvoke $r2.<nu.xom.JaxenConnector: void setNamespaceContext(nu.xom.jaxen.NamespaceContext)>($r8);

        goto label04;

     label03:
        $r5 = virtualinvoke r4.<nu.xom.XPathContext: nu.xom.jaxen.NamespaceContext getJaxenContext()>();

        virtualinvoke $r2.<nu.xom.JaxenConnector: void setNamespaceContext(nu.xom.jaxen.NamespaceContext)>($r5);

     label04:
        $r6 = virtualinvoke $r2.<nu.xom.JaxenConnector: java.util.List selectNodes(java.lang.Object)>(r0);

        $r7 = new nu.xom.Nodes;

        specialinvoke $r7.<nu.xom.Nodes: void <init>(java.util.List)>($r6);

     label05:
        if r20 == null goto label06;

        virtualinvoke r20.<nu.xom.DocumentFragment: nu.xom.Node removeChild(int)>(0);

     label06:
        return $r7;

     label07:
        $r19 := @caughtexception;

        virtualinvoke $r19.<nu.xom.XPathException: void setXPath(java.lang.String)>(r3);

        throw $r19;

     label08:
        $r12 := @caughtexception;

        $r13 = new nu.xom.XPathException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("XPath error: ");

        $r16 = virtualinvoke $r12.<java.lang.Exception: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<nu.xom.XPathException: void <init>(java.lang.String,java.lang.Throwable)>($r18, $r12);

        virtualinvoke $r13.<nu.xom.XPathException: void setXPath(java.lang.String)>(r3);

        throw $r13;

     label09:
        $r11 := @caughtexception;

     label10:
        if r20 == null goto label11;

        virtualinvoke r20.<nu.xom.DocumentFragment: nu.xom.Node removeChild(int)>(0);

     label11:
        throw $r11;

        catch nu.xom.XPathException from label02 to label05 with label07;
        catch java.lang.Exception from label02 to label05 with label08;
        catch java.lang.Throwable from label02 to label05 with label09;
        catch java.lang.Throwable from label07 to label10 with label09;
    }

    public final nu.xom.Nodes query(java.lang.String)
    {
        nu.xom.Nodes $r2;
        java.lang.String r1;
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<nu.xom.Node: nu.xom.Nodes query(java.lang.String,nu.xom.XPathContext)>(r1, null);

        return $r2;
    }

    boolean isElement()
    {
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        return 0;
    }

    boolean isText()
    {
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        return 0;
    }

    boolean isComment()
    {
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        return 0;
    }

    boolean isProcessingInstruction()
    {
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        return 0;
    }

    boolean isAttribute()
    {
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        return 0;
    }

    boolean isDocument()
    {
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        return 0;
    }

    boolean isDocType()
    {
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        return 0;
    }

    boolean isDocumentFragment()
    {
        nu.xom.Node r0;

        r0 := @this: nu.xom.Node;

        return 0;
    }

    static void <clinit>()
    {
        nu.xom.Node$EmptyNamespaceContext $r0;

        $r0 = new nu.xom.Node$EmptyNamespaceContext;

        specialinvoke $r0.<nu.xom.Node$EmptyNamespaceContext: void <init>(nu.xom.Node$1)>(null);

        <nu.xom.Node: nu.xom.jaxen.NamespaceContext emptyContext> = $r0;

        return;
    }
}
