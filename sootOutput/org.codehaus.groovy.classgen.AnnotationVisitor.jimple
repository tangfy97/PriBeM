public class org.codehaus.groovy.classgen.AnnotationVisitor extends java.lang.Object
{
    private static final java.lang.Class[] EMPTY_ARG_TYPES;
    private static final java.lang.Object[] EMPTY_ARGS;
    private final java.lang.Class annotationRootClass;
    private org.codehaus.groovy.control.SourceUnit source;
    private org.codehaus.groovy.control.ErrorCollector errorCollector;
    private org.codehaus.groovy.ast.AnnotationNode 'annotation';
    private java.lang.Class annotationClass;
    private java.util.Map requiredAttrTypes;
    private java.util.Map defaultAttrTypes;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$java$lang$Class;
    static java.lang.Class class$java$lang$reflect$Method;

    public void <init>(org.codehaus.groovy.control.SourceUnit, org.codehaus.groovy.control.ErrorCollector)
    {
        org.codehaus.groovy.control.ErrorCollector r4;
        org.codehaus.groovy.control.SourceUnit r3;
        org.codehaus.groovy.classgen.AnnotationVisitor r0;
        java.util.HashMap $r1, $r2;
        java.lang.Class $r5;

        r0 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r3 := @parameter0: org.codehaus.groovy.control.SourceUnit;

        r4 := @parameter1: org.codehaus.groovy.control.ErrorCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.util.Map requiredAttrTypes> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.util.Map defaultAttrTypes> = $r2;

        r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.control.SourceUnit source> = r3;

        r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.control.ErrorCollector errorCollector> = r4;

        $r5 = specialinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class loadAnnotationRootClass()>();

        r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class annotationRootClass> = $r5;

        return;
    }

    public org.codehaus.groovy.ast.AnnotationNode visit(org.codehaus.groovy.ast.AnnotationNode)
    {
        java.util.Map $r8, $r11, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Set $r9, $r18;
        org.codehaus.groovy.classgen.AnnotationVisitor r0;
        org.codehaus.groovy.ast.AnnotationNode r1, $r7, $r13, $r14, $r22, $r35, $r36;
        java.lang.StringBuffer $r15, $r16, $r19, $r20, $r30, $r31, $r32, $r33;
        java.lang.String $r21, r26, $r34;
        org.codehaus.groovy.ast.expr.Expression r28;
        org.codehaus.groovy.control.ErrorCollector $r6, $r12;
        java.util.Map$Entry r24;
        java.util.Iterator $r10;
        org.codehaus.groovy.ast.ClassNode $r2, $r3;
        java.lang.Class $r4, $r5, $r29;
        java.lang.Object $r23, $r25, $r27;

        r0 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.AnnotationNode;

        $z0 = specialinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: boolean isValidAnnotationClass(org.codehaus.groovy.ast.AnnotationNode)>(r1);

        if $z0 != 0 goto label1;

        virtualinvoke r1.<org.codehaus.groovy.ast.AnnotationNode: void setValid(boolean)>(0);

        return r1;

     label1:
        r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode 'annotation'> = r1;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.AnnotationNode: org.codehaus.groovy.ast.ClassNode getClassNode()>();

        $z1 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: boolean isResolved()>();

        if $z1 != 0 goto label2;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: void addError(java.lang.String)>("Current type was not yet resolved. Cannot introspect it.");

        virtualinvoke r1.<org.codehaus.groovy.ast.AnnotationNode: void setValid(boolean)>(0);

        return r1;

     label2:
        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.AnnotationNode: org.codehaus.groovy.ast.ClassNode getClassNode()>();

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: java.lang.Class getTypeClass()>();

        r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class annotationClass> = $r4;

        $r5 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class annotationClass>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: void extractAnnotationMeta(java.lang.Class)>($r5);

        $r6 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.control.ErrorCollector errorCollector>;

        $z2 = virtualinvoke $r6.<org.codehaus.groovy.control.ErrorCollector: boolean hasErrors()>();

        if $z2 == 0 goto label3;

        $r35 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode 'annotation'>;

        virtualinvoke $r35.<org.codehaus.groovy.ast.AnnotationNode: void setValid(boolean)>(0);

        $r36 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode 'annotation'>;

        return $r36;

     label3:
        $r7 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode 'annotation'>;

        $r8 = virtualinvoke $r7.<org.codehaus.groovy.ast.AnnotationNode: java.util.Map getMembers()>();

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r23 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.util.Map$Entry) $r23;

        $r25 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        r26 = (java.lang.String) $r25;

        $r27 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        r28 = (org.codehaus.groovy.ast.expr.Expression) $r27;

        $r29 = specialinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class getAttributeType(java.lang.String)>(r26);

        if $r29 != null goto label5;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown attribute \'");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r26);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r34, r28);

        goto label6;

     label5:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: void visitExpression(java.lang.String,org.codehaus.groovy.ast.expr.Expression,java.lang.Class)>(r26, r28, $r29);

        goto label4;

     label6:
        $r11 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.util.Map requiredAttrTypes>;

        $z4 = interfaceinvoke $r11.<java.util.Map: boolean isEmpty()>();

        if $z4 != 0 goto label7;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Required attributes ");

        $r17 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.util.Map requiredAttrTypes>;

        $r18 = interfaceinvoke $r17.<java.util.Map: java.util.Set keySet()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not found");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        $r22 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode 'annotation'>;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r21, $r22);

     label7:
        $r13 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode 'annotation'>;

        $r12 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.control.ErrorCollector errorCollector>;

        $z5 = virtualinvoke $r12.<org.codehaus.groovy.control.ErrorCollector: boolean hasErrors()>();

        if $z5 != 0 goto label8;

        $z6 = 1;

        goto label9;

     label8:
        $z6 = 0;

     label9:
        virtualinvoke $r13.<org.codehaus.groovy.ast.AnnotationNode: void setValid(boolean)>($z6);

        $r14 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode 'annotation'>;

        return $r14;
    }

    private boolean isValidAnnotationClass(org.codehaus.groovy.ast.AnnotationNode)
    {
        org.codehaus.groovy.ast.AnnotationNode r0;
        org.codehaus.groovy.ast.ClassNode $r1, $r2;
        org.codehaus.groovy.classgen.AnnotationVisitor r3;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.AnnotationNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.AnnotationNode: org.codehaus.groovy.ast.ClassNode getClassNode()>();

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode Annotation_Type>;

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: boolean implementsInterface(org.codehaus.groovy.ast.ClassNode)>($r2);

        return $z0;
    }

    protected void visitExpression(java.lang.String, org.codehaus.groovy.ast.expr.Expression, java.lang.Class)
    {
        org.codehaus.groovy.ast.expr.ListExpression $r19, $r22, r24;
        org.codehaus.groovy.ast.expr.ConstantExpression $r14, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.codehaus.groovy.classgen.AnnotationVisitor r3;
        org.codehaus.groovy.ast.expr.PropertyExpression $r11;
        org.codehaus.groovy.ast.AnnotationNode $r20, $r21;
        java.lang.StringBuffer $r7, $r8, $r9;
        java.lang.String r4, $r10;
        org.codehaus.groovy.ast.expr.Expression r5;
        org.codehaus.groovy.ast.ClassNode $r12, $r15, $r17, $r18;
        org.codehaus.groovy.ast.expr.AnnotationConstantExpression $r6;
        java.lang.Class r0, $r1, $r2, $r13, $r23, $r25, $r26, $r27;

        r3 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        r0 := @parameter2: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label04;

        $z6 = r5 instanceof org.codehaus.groovy.ast.expr.ListExpression;

        if $z6 == 0 goto label01;

        r24 = (org.codehaus.groovy.ast.expr.ListExpression) r5;

        $r22 = (org.codehaus.groovy.ast.expr.ListExpression) r5;

        $r23 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        virtualinvoke r3.<org.codehaus.groovy.classgen.AnnotationVisitor: void visitListExpression(java.lang.String,org.codehaus.groovy.ast.expr.ListExpression,java.lang.Class)>(r4, $r22, $r23);

        goto label04;

     label01:
        $z7 = r5 instanceof org.codehaus.groovy.ast.expr.ClosureExpression;

        if $z7 == 0 goto label02;

        virtualinvoke r3.<org.codehaus.groovy.classgen.AnnotationVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>("Annotation list attributes must use Groovy notation [el1, el2]", r5);

        goto label04;

     label02:
        $r19 = new org.codehaus.groovy.ast.expr.ListExpression;

        specialinvoke $r19.<org.codehaus.groovy.ast.expr.ListExpression: void <init>()>();

        virtualinvoke $r19.<org.codehaus.groovy.ast.expr.ListExpression: void addExpression(org.codehaus.groovy.ast.expr.Expression)>(r5);

        $r20 = r3.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode 'annotation'>;

        if $r20 == null goto label03;

        $r21 = r3.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode 'annotation'>;

        virtualinvoke $r21.<org.codehaus.groovy.ast.AnnotationNode: void setMember(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>(r4, $r19);

     label03:
        virtualinvoke r3.<org.codehaus.groovy.classgen.AnnotationVisitor: void visitExpression(java.lang.String,org.codehaus.groovy.ast.expr.Expression,java.lang.Class)>(r4, $r19, r0);

     label04:
        $z8 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z8 == 0 goto label05;

        $r16 = (org.codehaus.groovy.ast.expr.ConstantExpression) r5;

        $r17 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>(r0);

        $r18 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode getWrapper(org.codehaus.groovy.ast.ClassNode)>($r17);

        virtualinvoke r3.<org.codehaus.groovy.classgen.AnnotationVisitor: void visitConstantExpression(java.lang.String,org.codehaus.groovy.ast.expr.ConstantExpression,org.codehaus.groovy.ast.ClassNode)>(r4, $r16, $r18);

        goto label16;

     label05:
        $r1 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$java$lang$String>;

        if $r1 != null goto label06;

        $r25 = staticinvoke <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$java$lang$String> = $r25;

        goto label07;

     label06:
        $r25 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$java$lang$String>;

     label07:
        $z1 = virtualinvoke $r25.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label10;

        $r14 = (org.codehaus.groovy.ast.expr.ConstantExpression) r5;

        $r13 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$java$lang$String>;

        if $r13 != null goto label08;

        $r26 = staticinvoke <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$java$lang$String> = $r26;

        goto label09;

     label08:
        $r26 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$java$lang$String>;

     label09:
        $r15 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r26);

        virtualinvoke r3.<org.codehaus.groovy.classgen.AnnotationVisitor: void visitConstantExpression(java.lang.String,org.codehaus.groovy.ast.expr.ConstantExpression,org.codehaus.groovy.ast.ClassNode)>(r4, $r14, $r15);

        goto label16;

     label10:
        $r2 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$java$lang$Class>;

        if $r2 != null goto label11;

        $r27 = staticinvoke <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$(java.lang.String)>("java.lang.Class");

        <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$java$lang$Class> = $r27;

        goto label12;

     label11:
        $r27 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$java$lang$Class>;

     label12:
        $z2 = virtualinvoke $r27.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label13;

        goto label16;

     label13:
        $z3 = specialinvoke r3.<org.codehaus.groovy.classgen.AnnotationVisitor: boolean isEnum(java.lang.Class)>(r0);

        if $z3 == 0 goto label15;

        $z5 = r5 instanceof org.codehaus.groovy.ast.expr.PropertyExpression;

        if $z5 == 0 goto label14;

        $r11 = (org.codehaus.groovy.ast.expr.PropertyExpression) r5;

        $r12 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>(r0);

        virtualinvoke r3.<org.codehaus.groovy.classgen.AnnotationVisitor: void visitEnumExpression(java.lang.String,org.codehaus.groovy.ast.expr.PropertyExpression,org.codehaus.groovy.ast.ClassNode)>(r4, $r11, $r12);

        goto label16;

     label14:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value not defined for annotation attribute ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<org.codehaus.groovy.classgen.AnnotationVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r10, r5);

        goto label16;

     label15:
        $z4 = specialinvoke r3.<org.codehaus.groovy.classgen.AnnotationVisitor: boolean isAnnotation(java.lang.Class)>(r0);

        if $z4 == 0 goto label16;

        $r6 = (org.codehaus.groovy.ast.expr.AnnotationConstantExpression) r5;

        virtualinvoke r3.<org.codehaus.groovy.classgen.AnnotationVisitor: void visitAnnotationExpression(java.lang.String,org.codehaus.groovy.ast.expr.AnnotationConstantExpression,java.lang.Class)>(r4, $r6, r0);

     label16:
        return;
    }

    protected void visitAnnotationExpression(java.lang.String, org.codehaus.groovy.ast.expr.AnnotationConstantExpression, java.lang.Class)
    {
        org.codehaus.groovy.control.ErrorCollector $r5;
        org.codehaus.groovy.ast.AnnotationNode r2;
        org.codehaus.groovy.control.SourceUnit $r6;
        org.codehaus.groovy.ast.expr.AnnotationConstantExpression r0;
        java.lang.Object $r1;
        org.codehaus.groovy.classgen.AnnotationVisitor $r3, r4;
        java.lang.Class r8;
        java.lang.String r7;

        r4 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: org.codehaus.groovy.ast.expr.AnnotationConstantExpression;

        r8 := @parameter2: java.lang.Class;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.AnnotationConstantExpression: java.lang.Object getValue()>();

        r2 = (org.codehaus.groovy.ast.AnnotationNode) $r1;

        $r3 = new org.codehaus.groovy.classgen.AnnotationVisitor;

        $r6 = r4.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.control.SourceUnit source>;

        $r5 = r4.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.control.ErrorCollector errorCollector>;

        specialinvoke $r3.<org.codehaus.groovy.classgen.AnnotationVisitor: void <init>(org.codehaus.groovy.control.SourceUnit,org.codehaus.groovy.control.ErrorCollector)>($r6, $r5);

        virtualinvoke $r3.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode visit(org.codehaus.groovy.ast.AnnotationNode)>(r2);

        return;
    }

    protected void visitListExpression(java.lang.String, org.codehaus.groovy.ast.expr.ListExpression, java.lang.Class)
    {
        org.codehaus.groovy.ast.expr.ListExpression r0;
        java.util.List $r1;
        int $i0, i1;
        org.codehaus.groovy.classgen.AnnotationVisitor r2;
        java.lang.Object $r4;
        java.lang.Class r5;
        java.lang.String r3;
        org.codehaus.groovy.ast.expr.Expression $r6;

        r2 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.codehaus.groovy.ast.expr.ListExpression;

        r5 := @parameter2: java.lang.Class;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ListExpression: java.util.List getExpressions()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (org.codehaus.groovy.ast.expr.Expression) $r4;

        virtualinvoke r2.<org.codehaus.groovy.classgen.AnnotationVisitor: void visitExpression(java.lang.String,org.codehaus.groovy.ast.expr.Expression,java.lang.Class)>(r3, $r6, r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void visitConstantExpression(java.lang.String, org.codehaus.groovy.ast.expr.ConstantExpression, org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.expr.ConstantExpression r0;
        java.lang.StringBuffer $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r15, $r16;
        java.lang.String r6, $r9, $r14, $r17;
        boolean $z0;
        org.codehaus.groovy.ast.ClassNode $r1, r2, $r13;
        org.codehaus.groovy.classgen.AnnotationVisitor r3;

        r3 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: org.codehaus.groovy.ast.expr.ConstantExpression;

        r2 := @parameter2: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFrom(org.codehaus.groovy.ast.ClassNode)>(r2);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attribute \'");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' should have type \'");

        $r9 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'; ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("but found type \'");

        $r13 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r14 = virtualinvoke $r13.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<org.codehaus.groovy.classgen.AnnotationVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r17, r0);

     label1:
        return;
    }

    protected void visitEnumExpression(java.lang.String, org.codehaus.groovy.ast.expr.PropertyExpression, org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression r0;
        java.lang.StringBuffer $r5, $r6, $r8, $r9, $r11, $r12, $r16;
        org.codehaus.groovy.ast.expr.Expression $r1, $r13;
        java.lang.String r7, $r10, $r15, $r17;
        boolean $z0;
        org.codehaus.groovy.ast.ClassNode $r2, r3, $r14;
        org.codehaus.groovy.classgen.AnnotationVisitor r4;

        r4 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: org.codehaus.groovy.ast.expr.PropertyExpression;

        r3 := @parameter2: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        $z0 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFrom(org.codehaus.groovy.ast.ClassNode)>(r3);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attribute \'");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' should have type \'");

        $r10 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' (Enum), but found ");

        $r13 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $r14 = virtualinvoke $r13.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r15 = virtualinvoke $r14.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r16 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r4.<org.codehaus.groovy.classgen.AnnotationVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r17, r0);

     label1:
        return;
    }

    private boolean isAnnotation(java.lang.Class)
    {
        java.lang.Object[] $r3;
        java.lang.Class[] $r4;
        java.lang.Boolean r6;
        org.codehaus.groovy.classgen.AnnotationVisitor r0;
        java.lang.Class r1, $r2;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class[] EMPTY_ARG_TYPES>;

        $r3 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object[] EMPTY_ARGS>;

        $r5 = specialinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object invoke(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Object,java.lang.Object[])>($r2, "isAnnotation", $r4, r1, $r3);

        r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean isEnum(java.lang.Class)
    {
        java.lang.Object[] $r3;
        java.lang.Class[] $r4;
        java.lang.Boolean r6;
        org.codehaus.groovy.classgen.AnnotationVisitor r0;
        java.lang.Class r1, $r2;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class[] EMPTY_ARG_TYPES>;

        $r3 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object[] EMPTY_ARGS>;

        $r5 = specialinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object invoke(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Object,java.lang.Object[])>($r2, "isEnum", $r4, r1, $r3);

        r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private void extractAnnotationMeta(java.lang.Class)
    {
        org.codehaus.groovy.classgen.AnnotationVisitor r0;
        java.lang.Class r1;

        r0 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: void initializeAnnotationMeta(java.lang.Class)>(r1);

        specialinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: void initializeAttributeTypes(java.lang.Class)>(r1);

        return;
    }

    private void initializeAnnotationMeta(java.lang.Class)
    {
        java.lang.Object[] $r3, $r6, r7, $r8;
        int $i0, i1;
        java.lang.String $r14, $r15, $r16, $r17;
        boolean $z0, $z1;
        java.lang.Class[] $r4, $r10;
        org.codehaus.groovy.classgen.AnnotationVisitor r0;
        java.lang.Class r1, $r2, $r11, r13;
        java.lang.Object $r5, $r9, $r12, $r18, $r19;

        r0 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class[] EMPTY_ARG_TYPES>;

        $r3 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object[] EMPTY_ARGS>;

        $r5 = specialinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object invoke(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Object,java.lang.Object[])>($r2, "getAnnotations", $r4, r1, $r3);

        $r6 = (java.lang.Object[]) $r5;

        r7 = (java.lang.Object[]) $r6;

        if r7 != null goto label1;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: void addError(java.lang.String)>("Cannot retrieve annotation meta information. Please make sure you are running on a JVM >= 1.5");

        return;

     label1:
        i1 = 0;

     label2:
        $i0 = lengthof r7;

        if i1 >= $i0 goto label6;

        $r11 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class annotationRootClass>;

        $r10 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class[] EMPTY_ARG_TYPES>;

        $r9 = r7[i1];

        $r8 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object[] EMPTY_ARGS>;

        $r12 = specialinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object invoke(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Object,java.lang.Object[])>($r11, "annotationType", $r10, $r9, $r8);

        r13 = (java.lang.Class) $r12;

        if r13 != null goto label3;

        goto label5;

     label3:
        $r14 = "java.lang.annotation.Retention";

        $r15 = virtualinvoke r13.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z0 == 0 goto label4;

        $r19 = r7[i1];

        specialinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: void initializeRetention(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, r13, $r19);

        goto label5;

     label4:
        $r16 = "java.lang.annotation.Target";

        $r17 = virtualinvoke r13.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z1 == 0 goto label5;

        $r18 = r7[i1];

        specialinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: void initializeTarget(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, r13, $r18);

     label5:
        i1 = i1 + 1;

        goto label2;

     label6:
        return;
    }

    private void initializeAttributeTypes(java.lang.Class)
    {
        java.lang.Object[] $r4;
        java.lang.reflect.Method[] $r1;
        java.util.Map $r9, $r14;
        int $i0, i1;
        java.lang.String $r10, $r15;
        java.lang.reflect.Method $r5, $r8, $r11, $r13, $r16;
        java.lang.Class[] $r6;
        java.lang.Class r0, $r3, $r12, $r17, $r18;
        org.codehaus.groovy.classgen.AnnotationVisitor r2;
        java.lang.Object $r7;

        r2 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label6;

        $r3 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$java$lang$reflect$Method>;

        if $r3 != null goto label2;

        $r18 = staticinvoke <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$(java.lang.String)>("java.lang.reflect.Method");

        <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$java$lang$reflect$Method> = $r18;

        goto label3;

     label2:
        $r18 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class class$java$lang$reflect$Method>;

     label3:
        $r6 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class[] EMPTY_ARG_TYPES>;

        $r5 = $r1[i1];

        $r4 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object[] EMPTY_ARGS>;

        $r7 = specialinvoke r2.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object invoke(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Object,java.lang.Object[])>($r18, "getDefaultValue", $r6, $r5, $r4);

        if $r7 == null goto label4;

        $r14 = r2.<org.codehaus.groovy.classgen.AnnotationVisitor: java.util.Map defaultAttrTypes>;

        $r13 = $r1[i1];

        $r15 = virtualinvoke $r13.<java.lang.reflect.Method: java.lang.String getName()>();

        $r16 = $r1[i1];

        $r17 = virtualinvoke $r16.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r17);

        goto label5;

     label4:
        $r9 = r2.<org.codehaus.groovy.classgen.AnnotationVisitor: java.util.Map requiredAttrTypes>;

        $r8 = $r1[i1];

        $r10 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.String getName()>();

        $r11 = $r1[i1];

        $r12 = virtualinvoke $r11.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r12);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;
    }

    private void initializeRetention(java.lang.Class, java.lang.Class, java.lang.Object)
    {
        java.lang.Object[] $r3;
        org.codehaus.groovy.ast.AnnotationNode $r10, $r11;
        java.lang.StringBuffer $r12, $r13, $r16, $r17;
        java.lang.String $r6, $r7, $r8, $r9, $r15, $r18;
        boolean $z0, $z1;
        java.lang.Class[] $r4;
        org.codehaus.groovy.classgen.AnnotationVisitor r0;
        java.lang.Class r1, r14;
        java.lang.Object r2, $r5;

        r0 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r14 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Object;

        $r4 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class[] EMPTY_ARG_TYPES>;

        $r3 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object[] EMPTY_ARGS>;

        $r5 = specialinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object invoke(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Object,java.lang.Object[])>(r1, "value", $r4, r2, $r3);

        if $r5 != null goto label1;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot read @RetentionPolicy on the @");

        $r15 = virtualinvoke r14.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Please make sure you are running on a JVM >= 1.5");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: void addError(java.lang.String)>($r18);

        return;

     label1:
        $r6 = "RUNTIME";

        $r7 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        $r11 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode 'annotation'>;

        virtualinvoke $r11.<org.codehaus.groovy.ast.AnnotationNode: void setRuntimeRetention(boolean)>(1);

        goto label3;

     label2:
        $r8 = "SOURCE";

        $r9 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label3;

        $r10 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode 'annotation'>;

        virtualinvoke $r10.<org.codehaus.groovy.ast.AnnotationNode: void setSourceRetention(boolean)>(1);

     label3:
        return;
    }

    private void initializeTarget(java.lang.Class, java.lang.Class, java.lang.Object)
    {
        byte b1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.codehaus.groovy.classgen.AnnotationVisitor r0;
        java.lang.Object[] $r3, $r6, r7;
        org.codehaus.groovy.ast.AnnotationNode $r8;
        java.lang.StringBuffer $r18, $r19, $r22, $r23;
        int $i0, i2;
        java.lang.String $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r21, $r24;
        java.lang.Class[] $r4;
        java.lang.Class r1, r20;
        java.lang.Object r2, $r5, $r9;

        r0 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r20 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Object;

        $r4 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class[] EMPTY_ARG_TYPES>;

        $r3 = <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object[] EMPTY_ARGS>;

        $r5 = specialinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object invoke(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Object,java.lang.Object[])>(r1, "value", $r4, r2, $r3);

        $r6 = (java.lang.Object[]) $r5;

        r7 = (java.lang.Object[]) $r6;

        if r7 != null goto label01;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot read @Target on the @");

        $r21 = virtualinvoke r20.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Please make sure you are running on a JVM >= 1.5");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AnnotationVisitor: void addError(java.lang.String)>($r24);

        return;

     label01:
        b1 = 0;

        i2 = 0;

     label02:
        $i0 = lengthof r7;

        if i2 >= $i0 goto label10;

        $r9 = r7[i2];

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        $r11 = "TYPE";

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label03;

        b1 = b1 | 1;

        goto label09;

     label03:
        $r12 = "CONSTRUCTOR";

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label04;

        b1 = b1 | 2;

        goto label09;

     label04:
        $r13 = "METHOD";

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label05;

        b1 = b1 | 4;

        goto label09;

     label05:
        $r14 = "FIELD";

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label06;

        b1 = b1 | 8;

        goto label09;

     label06:
        $r15 = "PARAMETER";

        $z4 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z4 == 0 goto label07;

        b1 = b1 | 16;

        goto label09;

     label07:
        $r16 = "LOCAL_VARIABLE";

        $z5 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z5 == 0 goto label08;

        b1 = b1 | 32;

        goto label09;

     label08:
        $r17 = "ANNOTATION";

        $z6 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z6 == 0 goto label09;

        b1 = b1 | 64;

     label09:
        i2 = i2 + 1;

        goto label02;

     label10:
        $r8 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode 'annotation'>;

        virtualinvoke $r8.<org.codehaus.groovy.ast.AnnotationNode: void setAllowedTargets(int)>(b1);

        return;
    }

    protected void addError(java.lang.String)
    {
        org.codehaus.groovy.ast.AnnotationNode $r13, $r14;
        java.lang.StringBuffer $r3, $r6, $r7, $r10, $r11;
        int $i0, $i1;
        java.lang.String r5, $r9, $r12;
        org.codehaus.groovy.control.ErrorCollector $r4;
        org.codehaus.groovy.control.SourceUnit $r15;
        org.codehaus.groovy.control.messages.SyntaxErrorMessage $r1;
        org.codehaus.groovy.classgen.AnnotationVisitor r0;
        java.lang.Class $r8;
        org.codehaus.groovy.syntax.SyntaxException $r2;

        r0 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r5 := @parameter0: java.lang.String;

        $r4 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.control.ErrorCollector errorCollector>;

        $r1 = new org.codehaus.groovy.control.messages.SyntaxErrorMessage;

        $r2 = new org.codehaus.groovy.syntax.SyntaxException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in @");

        $r8 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class annotationClass>;

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode 'annotation'>;

        $i0 = virtualinvoke $r13.<org.codehaus.groovy.ast.AnnotationNode: int getLineNumber()>();

        $r14 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode 'annotation'>;

        $i1 = virtualinvoke $r14.<org.codehaus.groovy.ast.AnnotationNode: int getColumnNumber()>();

        specialinvoke $r2.<org.codehaus.groovy.syntax.SyntaxException: void <init>(java.lang.String,int,int)>($r12, $i0, $i1);

        $r15 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.control.SourceUnit source>;

        specialinvoke $r1.<org.codehaus.groovy.control.messages.SyntaxErrorMessage: void <init>(org.codehaus.groovy.syntax.SyntaxException,org.codehaus.groovy.control.SourceUnit)>($r2, $r15);

        virtualinvoke $r4.<org.codehaus.groovy.control.ErrorCollector: void addErrorAndContinue(org.codehaus.groovy.control.messages.Message)>($r1);

        return;
    }

    protected void addError(java.lang.String, org.codehaus.groovy.ast.ASTNode)
    {
        java.lang.StringBuffer $r3, $r6, $r7, $r10, $r11;
        int $i0, $i1;
        java.lang.String r5, $r9, $r12;
        org.codehaus.groovy.control.ErrorCollector $r4;
        org.codehaus.groovy.control.SourceUnit $r14;
        org.codehaus.groovy.control.messages.SyntaxErrorMessage $r1;
        org.codehaus.groovy.ast.ASTNode r13;
        org.codehaus.groovy.classgen.AnnotationVisitor r0;
        java.lang.Class $r8;
        org.codehaus.groovy.syntax.SyntaxException $r2;

        r0 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r5 := @parameter0: java.lang.String;

        r13 := @parameter1: org.codehaus.groovy.ast.ASTNode;

        $r4 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.control.ErrorCollector errorCollector>;

        $r1 = new org.codehaus.groovy.control.messages.SyntaxErrorMessage;

        $r2 = new org.codehaus.groovy.syntax.SyntaxException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in @");

        $r8 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class annotationClass>;

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $i0 = virtualinvoke r13.<org.codehaus.groovy.ast.ASTNode: int getLineNumber()>();

        $i1 = virtualinvoke r13.<org.codehaus.groovy.ast.ASTNode: int getColumnNumber()>();

        specialinvoke $r2.<org.codehaus.groovy.syntax.SyntaxException: void <init>(java.lang.String,int,int)>($r12, $i0, $i1);

        $r14 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.control.SourceUnit source>;

        specialinvoke $r1.<org.codehaus.groovy.control.messages.SyntaxErrorMessage: void <init>(org.codehaus.groovy.syntax.SyntaxException,org.codehaus.groovy.control.SourceUnit)>($r2, $r14);

        virtualinvoke $r4.<org.codehaus.groovy.control.ErrorCollector: void addErrorAndContinue(org.codehaus.groovy.control.messages.Message)>($r1);

        return;
    }

    private java.lang.Class getAttributeType(java.lang.String)
    {
        java.util.Map $r2, $r3, $r6;
        org.codehaus.groovy.classgen.AnnotationVisitor r0;
        java.lang.Object $r4, $r7;
        java.lang.Class $r5, $r8;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.util.Map requiredAttrTypes>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.util.Map requiredAttrTypes>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r8 = (java.lang.Class) $r7;

        return $r8;

     label1:
        $r3 = r0.<org.codehaus.groovy.classgen.AnnotationVisitor: java.util.Map defaultAttrTypes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r5 = (java.lang.Class) $r4;

        return $r5;
    }

    private java.lang.Object invoke(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Object, java.lang.Object[])
    {
        java.lang.Throwable $r7;
        java.lang.Object[] r5;
        java.lang.Class[] r2;
        java.lang.Class r0;
        java.lang.Object r4, $r6;
        org.codehaus.groovy.classgen.AnnotationVisitor r8;
        java.lang.String r1;
        java.lang.reflect.Method $r3;

        r8 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object[];

     label1:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, r2);

        $r6 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r4, r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private java.lang.Class loadAnnotationRootClass()
    {
        java.lang.Throwable $r1;
        java.lang.Class $r0;
        org.codehaus.groovy.classgen.AnnotationVisitor r2;

        r2 := @this: org.codehaus.groovy.classgen.AnnotationVisitor;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.annotation.Annotation");

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r0;
        java.lang.Object[] $r1;

        $r0 = newarray (java.lang.Class)[0];

        <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Class[] EMPTY_ARG_TYPES> = $r0;

        $r1 = newarray (java.lang.Object)[0];

        <org.codehaus.groovy.classgen.AnnotationVisitor: java.lang.Object[] EMPTY_ARGS> = $r1;

        return;
    }
}
