public class org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal extends org.apache.cxf.configuration.security.TLSServerParametersType
{
    private javax.net.ssl.KeyManager[] keyManagersRef;
    private javax.net.ssl.TrustManager[] trustManagersRef;

    public void <init>()
    {
        org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal r0;

        r0 := @this: org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal;

        specialinvoke r0.<org.apache.cxf.configuration.security.TLSServerParametersType: void <init>()>();

        return;
    }

    public javax.net.ssl.KeyManager[] getKeyManagersRef()
    {
        org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal r0;
        javax.net.ssl.KeyManager[] $r1;

        r0 := @this: org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal;

        $r1 = r0.<org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal: javax.net.ssl.KeyManager[] keyManagersRef>;

        return $r1;
    }

    public void setKeyManagersRef(javax.net.ssl.KeyManager[])
    {
        org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal r0;
        javax.net.ssl.KeyManager[] r1;

        r0 := @this: org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal;

        r1 := @parameter0: javax.net.ssl.KeyManager[];

        r0.<org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal: javax.net.ssl.KeyManager[] keyManagersRef> = r1;

        return;
    }

    public boolean isSetKeyManagersRef()
    {
        org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal r0;
        javax.net.ssl.KeyManager[] $r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal;

        $r1 = r0.<org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal: javax.net.ssl.KeyManager[] keyManagersRef>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public javax.net.ssl.TrustManager[] getTrustManagersRef()
    {
        org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal r0;
        javax.net.ssl.TrustManager[] $r1;

        r0 := @this: org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal;

        $r1 = r0.<org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal: javax.net.ssl.TrustManager[] trustManagersRef>;

        return $r1;
    }

    public void setTrustManagersRef(javax.net.ssl.TrustManager[])
    {
        org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal r0;
        javax.net.ssl.TrustManager[] r1;

        r0 := @this: org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal;

        r1 := @parameter0: javax.net.ssl.TrustManager[];

        r0.<org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal: javax.net.ssl.TrustManager[] trustManagersRef> = r1;

        return;
    }

    public boolean isSetTrustManagersRef()
    {
        org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal r0;
        javax.net.ssl.TrustManager[] $r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal;

        $r1 = r0.<org.apache.cxf.configuration.jsse.TLSServerParametersConfig$TLSServerParametersTypeInternal: javax.net.ssl.TrustManager[] trustManagersRef>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
