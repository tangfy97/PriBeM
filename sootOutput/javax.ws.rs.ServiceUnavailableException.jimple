public class javax.ws.rs.ServiceUnavailableException extends javax.ws.rs.ServerErrorException
{
    private static final long serialVersionUID;

    public void <init>()
    {
        javax.ws.rs.ServiceUnavailableException r0;
        javax.ws.rs.core.Response $r3;
        javax.ws.rs.core.Response$ResponseBuilder $r2;
        javax.ws.rs.core.Response$Status $r1;

        r0 := @this: javax.ws.rs.ServiceUnavailableException;

        $r1 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status SERVICE_UNAVAILABLE>;

        $r2 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status)>($r1);

        $r3 = virtualinvoke $r2.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>();

        specialinvoke r0.<javax.ws.rs.ServerErrorException: void <init>(javax.ws.rs.core.Response)>($r3);

        return;
    }

    public void <init>(java.lang.Long)
    {
        javax.ws.rs.ServiceUnavailableException r0;
        javax.ws.rs.core.Response $r5;
        java.lang.Long r3;
        javax.ws.rs.core.Response$ResponseBuilder $r2, $r4;
        javax.ws.rs.core.Response$Status $r1;

        r0 := @this: javax.ws.rs.ServiceUnavailableException;

        r3 := @parameter0: java.lang.Long;

        $r1 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status SERVICE_UNAVAILABLE>;

        $r2 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status)>($r1);

        $r4 = virtualinvoke $r2.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder header(java.lang.String,java.lang.Object)>("Retry-After", r3);

        $r5 = virtualinvoke $r4.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>();

        specialinvoke r0.<javax.ws.rs.ServerErrorException: void <init>(javax.ws.rs.core.Response)>($r5);

        return;
    }

    public void <init>(java.util.Date)
    {
        javax.ws.rs.ServiceUnavailableException r0;
        javax.ws.rs.core.Response $r5;
        java.util.Date r3;
        javax.ws.rs.core.Response$ResponseBuilder $r2, $r4;
        javax.ws.rs.core.Response$Status $r1;

        r0 := @this: javax.ws.rs.ServiceUnavailableException;

        r3 := @parameter0: java.util.Date;

        $r1 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status SERVICE_UNAVAILABLE>;

        $r2 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status)>($r1);

        $r4 = virtualinvoke $r2.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder header(java.lang.String,java.lang.Object)>("Retry-After", r3);

        $r5 = virtualinvoke $r4.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>();

        specialinvoke r0.<javax.ws.rs.ServerErrorException: void <init>(javax.ws.rs.core.Response)>($r5);

        return;
    }

    public void <init>(javax.ws.rs.core.Response) throws java.lang.IllegalArgumentException
    {
        javax.ws.rs.ServiceUnavailableException r0;
        javax.ws.rs.core.Response r1, $r3;
        javax.ws.rs.core.Response$Status $r2;

        r0 := @this: javax.ws.rs.ServiceUnavailableException;

        r1 := @parameter0: javax.ws.rs.core.Response;

        $r2 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status SERVICE_UNAVAILABLE>;

        $r3 = staticinvoke <javax.ws.rs.ServiceUnavailableException: javax.ws.rs.core.Response validate(javax.ws.rs.core.Response,javax.ws.rs.core.Response$Status)>(r1, $r2);

        specialinvoke r0.<javax.ws.rs.ServerErrorException: void <init>(javax.ws.rs.core.Response)>($r3);

        return;
    }

    public void <init>(java.util.Date, java.lang.Throwable)
    {
        java.lang.Throwable r6;
        javax.ws.rs.ServiceUnavailableException r0;
        javax.ws.rs.core.Response $r5;
        java.util.Date r3;
        javax.ws.rs.core.Response$ResponseBuilder $r2, $r4;
        javax.ws.rs.core.Response$Status $r1;

        r0 := @this: javax.ws.rs.ServiceUnavailableException;

        r3 := @parameter0: java.util.Date;

        r6 := @parameter1: java.lang.Throwable;

        $r1 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status SERVICE_UNAVAILABLE>;

        $r2 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status)>($r1);

        $r4 = virtualinvoke $r2.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder header(java.lang.String,java.lang.Object)>("Retry-After", r3);

        $r5 = virtualinvoke $r4.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>();

        specialinvoke r0.<javax.ws.rs.ServerErrorException: void <init>(javax.ws.rs.core.Response,java.lang.Throwable)>($r5, r6);

        return;
    }

    public void <init>(java.lang.Long, java.lang.Throwable)
    {
        java.lang.Throwable r6;
        javax.ws.rs.ServiceUnavailableException r0;
        javax.ws.rs.core.Response $r5;
        java.lang.Long r3;
        javax.ws.rs.core.Response$ResponseBuilder $r2, $r4;
        javax.ws.rs.core.Response$Status $r1;

        r0 := @this: javax.ws.rs.ServiceUnavailableException;

        r3 := @parameter0: java.lang.Long;

        r6 := @parameter1: java.lang.Throwable;

        $r1 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status SERVICE_UNAVAILABLE>;

        $r2 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status)>($r1);

        $r4 = virtualinvoke $r2.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder header(java.lang.String,java.lang.Object)>("Retry-After", r3);

        $r5 = virtualinvoke $r4.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>();

        specialinvoke r0.<javax.ws.rs.ServerErrorException: void <init>(javax.ws.rs.core.Response,java.lang.Throwable)>($r5, r6);

        return;
    }

    public void <init>(javax.ws.rs.core.Response, java.lang.Throwable) throws java.lang.IllegalArgumentException
    {
        java.lang.Throwable r4;
        javax.ws.rs.ServiceUnavailableException r0;
        javax.ws.rs.core.Response r1, $r3;
        javax.ws.rs.core.Response$Status $r2;

        r0 := @this: javax.ws.rs.ServiceUnavailableException;

        r1 := @parameter0: javax.ws.rs.core.Response;

        r4 := @parameter1: java.lang.Throwable;

        $r2 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status UNAUTHORIZED>;

        $r3 = staticinvoke <javax.ws.rs.ServiceUnavailableException: javax.ws.rs.core.Response validate(javax.ws.rs.core.Response,javax.ws.rs.core.Response$Status)>(r1, $r2);

        specialinvoke r0.<javax.ws.rs.ServerErrorException: void <init>(javax.ws.rs.core.Response,java.lang.Throwable)>($r3, r4);

        return;
    }

    public boolean hasRetryAfter()
    {
        javax.ws.rs.core.MultivaluedMap $r2;
        javax.ws.rs.ServiceUnavailableException r0;
        javax.ws.rs.core.Response $r1;
        boolean $z0;

        r0 := @this: javax.ws.rs.ServiceUnavailableException;

        $r1 = virtualinvoke r0.<javax.ws.rs.ServiceUnavailableException: javax.ws.rs.core.Response getResponse()>();

        $r2 = virtualinvoke $r1.<javax.ws.rs.core.Response: javax.ws.rs.core.MultivaluedMap getHeaders()>();

        $z0 = interfaceinvoke $r2.<javax.ws.rs.core.MultivaluedMap: boolean containsKey(java.lang.Object)>("Retry-After");

        return $z0;
    }

    public java.util.Date getRetryTime(java.util.Date)
    {
        java.util.Date $r4, r5, $r10;
        long $l0, $l1, $l2, $l3, $l4;
        java.lang.Long $r3;
        javax.ws.rs.ext.RuntimeDelegate $r7;
        java.lang.String $r2;
        java.lang.NumberFormatException $r6;
        javax.ws.rs.ext.RuntimeDelegate$HeaderDelegate $r8;
        javax.ws.rs.ServiceUnavailableException r0;
        javax.ws.rs.core.Response $r1;
        java.lang.Object $r9;

        r0 := @this: javax.ws.rs.ServiceUnavailableException;

        r5 := @parameter0: java.util.Date;

        $r1 = virtualinvoke r0.<javax.ws.rs.ServiceUnavailableException: javax.ws.rs.core.Response getResponse()>();

        $r2 = virtualinvoke $r1.<javax.ws.rs.core.Response: java.lang.String getHeaderString(java.lang.String)>("Retry-After");

        if $r2 != null goto label1;

        return null;

     label1:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4 = new java.util.Date;

        $l1 = virtualinvoke r5.<java.util.Date: long getTime()>();

        $l2 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $l3 = $l2 * 1000L;

        $l4 = $l1 + $l3;

        specialinvoke $r4.<java.util.Date: void <init>(long)>($l4);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = staticinvoke <javax.ws.rs.ext.RuntimeDelegate: javax.ws.rs.ext.RuntimeDelegate getInstance()>();

        $r8 = virtualinvoke $r7.<javax.ws.rs.ext.RuntimeDelegate: javax.ws.rs.ext.RuntimeDelegate$HeaderDelegate createHeaderDelegate(java.lang.Class)>(class "Ljava/util/Date;");

        $r9 = interfaceinvoke $r8.<javax.ws.rs.ext.RuntimeDelegate$HeaderDelegate: java.lang.Object fromString(java.lang.String)>($r2);

        $r10 = (java.util.Date) $r9;

        return $r10;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <javax.ws.rs.ServiceUnavailableException: long serialVersionUID> = 3821068205617492633L;

        return;
    }
}
