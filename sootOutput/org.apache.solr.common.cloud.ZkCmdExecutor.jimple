public class org.apache.solr.common.cloud.ZkCmdExecutor extends java.lang.Object
{
    private long retryDelay;
    private int retryCount;
    private java.util.List acl;

    public void <init>(int)
    {
        org.apache.solr.common.cloud.ZkCmdExecutor r0;
        java.util.ArrayList $r1;
        int i0, $i1;
        float $f0, $f1, $f2;
        double $d0, d1, $d2, $d3, $d4;

        r0 := @this: org.apache.solr.common.cloud.ZkCmdExecutor;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.solr.common.cloud.ZkCmdExecutor: long retryDelay> = 1300L;

        $r1 = <org.apache.zookeeper.ZooDefs$Ids: java.util.ArrayList OPEN_ACL_UNSAFE>;

        r0.<org.apache.solr.common.cloud.ZkCmdExecutor: java.util.List acl> = $r1;

        $d0 = (double) i0;

        d1 = $d0 / 1000.0;

        $d2 = 8.0 * d1;

        $d3 = $d2 + 1.0;

        $d4 = staticinvoke <java.lang.Math: double sqrt(double)>($d3);

        $f0 = (float) $d4;

        $f1 = $f0 - 1.0F;

        $f2 = 0.5F * $f1;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f2);

        r0.<org.apache.solr.common.cloud.ZkCmdExecutor: int retryCount> = $i1;

        return;
    }

    public java.util.List getAcl()
    {
        org.apache.solr.common.cloud.ZkCmdExecutor r0;
        java.util.List $r1;

        r0 := @this: org.apache.solr.common.cloud.ZkCmdExecutor;

        $r1 = r0.<org.apache.solr.common.cloud.ZkCmdExecutor: java.util.List acl>;

        return $r1;
    }

    public void setAcl(java.util.List)
    {
        org.apache.solr.common.cloud.ZkCmdExecutor r0;
        java.util.List r1;

        r0 := @this: org.apache.solr.common.cloud.ZkCmdExecutor;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.solr.common.cloud.ZkCmdExecutor: java.util.List acl> = r1;

        return;
    }

    public long getRetryDelay()
    {
        org.apache.solr.common.cloud.ZkCmdExecutor r0;
        long $l0;

        r0 := @this: org.apache.solr.common.cloud.ZkCmdExecutor;

        $l0 = r0.<org.apache.solr.common.cloud.ZkCmdExecutor: long retryDelay>;

        return $l0;
    }

    public void setRetryDelay(long)
    {
        org.apache.solr.common.cloud.ZkCmdExecutor r0;
        long l0;

        r0 := @this: org.apache.solr.common.cloud.ZkCmdExecutor;

        l0 := @parameter0: long;

        r0.<org.apache.solr.common.cloud.ZkCmdExecutor: long retryDelay> = l0;

        return;
    }

    public java.lang.Object retryOperation(org.apache.solr.common.cloud.ZkOperation) throws org.apache.zookeeper.KeeperException, java.lang.InterruptedException
    {
        org.apache.solr.common.cloud.ZkCmdExecutor r0;
        org.apache.solr.common.cloud.ClosableThread $r7;
        java.lang.Thread $r4, $r5, $r6, $r8;
        int $i0, i1;
        org.apache.zookeeper.KeeperException$ConnectionLossException $r3, r10;
        boolean $z0, $z1, $z2;
        org.apache.solr.common.cloud.ZkOperation r1;
        java.lang.InterruptedException $r9;
        java.lang.Object $r2;

        r0 := @this: org.apache.solr.common.cloud.ZkCmdExecutor;

        r1 := @parameter0: org.apache.solr.common.cloud.ZkOperation;

        r10 = null;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.solr.common.cloud.ZkCmdExecutor: int retryCount>;

        if i1 >= $i0 goto label8;

     label2:
        $r2 = virtualinvoke r1.<org.apache.solr.common.cloud.ZkOperation: java.lang.Object execute()>();

     label3:
        return $r2;

     label4:
        $r3 := @caughtexception;

        if r10 != null goto label5;

        r10 = $r3;

     label5:
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r4.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label6;

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r8.<java.lang.Thread: void interrupt()>();

        $r9 = new java.lang.InterruptedException;

        specialinvoke $r9.<java.lang.InterruptedException: void <init>()>();

        throw $r9;

     label6:
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = $r5 instanceof org.apache.solr.common.cloud.ClosableThread;

        if $z1 == 0 goto label7;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = (org.apache.solr.common.cloud.ClosableThread) $r6;

        $z2 = interfaceinvoke $r7.<org.apache.solr.common.cloud.ClosableThread: boolean isClosed()>();

        if $z2 == 0 goto label7;

        throw r10;

     label7:
        virtualinvoke r0.<org.apache.solr.common.cloud.ZkCmdExecutor: void retryDelay(int)>(i1);

        i1 = i1 + 1;

        goto label1;

     label8:
        throw r10;

        catch org.apache.zookeeper.KeeperException$ConnectionLossException from label2 to label3 with label4;
    }

    public void ensureExists(java.lang.String, org.apache.solr.common.cloud.SolrZkClient) throws org.apache.zookeeper.KeeperException, java.lang.InterruptedException
    {
        org.apache.zookeeper.CreateMode $r3;
        org.apache.solr.common.cloud.ZkCmdExecutor r0;
        java.lang.String r1;
        org.apache.solr.common.cloud.SolrZkClient r2;

        r0 := @this: org.apache.solr.common.cloud.ZkCmdExecutor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.solr.common.cloud.SolrZkClient;

        $r3 = <org.apache.zookeeper.CreateMode: org.apache.zookeeper.CreateMode PERSISTENT>;

        virtualinvoke r0.<org.apache.solr.common.cloud.ZkCmdExecutor: void ensureExists(java.lang.String,byte[],org.apache.zookeeper.CreateMode,org.apache.solr.common.cloud.SolrZkClient)>(r1, null, $r3, r2);

        return;
    }

    public void ensureExists(java.lang.String, byte[], org.apache.zookeeper.CreateMode, org.apache.solr.common.cloud.SolrZkClient) throws org.apache.zookeeper.KeeperException, java.lang.InterruptedException
    {
        org.apache.zookeeper.CreateMode r6;
        byte[] r3;
        org.apache.solr.common.cloud.ZkCmdExecutor r5;
        org.apache.zookeeper.KeeperException$NodeExistsException $r4;
        java.lang.Boolean $r2;
        java.lang.String r1;
        org.apache.solr.common.cloud.SolrZkClient r0;
        boolean $z0;

        r5 := @this: org.apache.solr.common.cloud.ZkCmdExecutor;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: byte[];

        r6 := @parameter2: org.apache.zookeeper.CreateMode;

        r0 := @parameter3: org.apache.solr.common.cloud.SolrZkClient;

        $r2 = virtualinvoke r0.<org.apache.solr.common.cloud.SolrZkClient: java.lang.Boolean exists(java.lang.String,boolean)>(r1, 1);

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.solr.common.cloud.SolrZkClient: void makePath(java.lang.String,byte[],boolean)>(r1, r3, 1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch org.apache.zookeeper.KeeperException$NodeExistsException from label1 to label2 with label3;
    }

    protected void retryDelay(int) throws java.lang.InterruptedException
    {
        org.apache.solr.common.cloud.ZkCmdExecutor r0;
        int i0;
        long $l1, $l2, $l3;

        r0 := @this: org.apache.solr.common.cloud.ZkCmdExecutor;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $l2 = (long) i0;

        $l1 = r0.<org.apache.solr.common.cloud.ZkCmdExecutor: long retryDelay>;

        $l3 = $l2 * $l1;

        staticinvoke <java.lang.Thread: void sleep(long)>($l3);

     label1:
        return;
    }
}
