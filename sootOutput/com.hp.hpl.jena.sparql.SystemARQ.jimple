public class com.hp.hpl.jena.sparql.SystemARQ extends java.lang.Object
{
    private static java.util.List versions;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.SystemARQ r0;

        r0 := @this: com.hp.hpl.jena.sparql.SystemARQ;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void sync(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <com.hp.hpl.jena.sparql.SystemARQ: void sync(com.hp.hpl.jena.graph.Graph)>($r1);

        return;
    }

    public static void sync(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        staticinvoke <com.hp.hpl.jena.sparql.SystemARQ: void syncGraph(com.hp.hpl.jena.graph.Graph)>(r0);

        return;
    }

    private static void syncGraph(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.InfGraph $r5;
        com.hp.hpl.jena.graph.compose.Polyadic $r3;
        com.hp.hpl.jena.sparql.graph.GraphWrapper $r1;
        com.hp.hpl.jena.graph.Graph r0, $r2, $r4, $r6;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.InfGraph;

        if $z0 == 0 goto label1;

        $r5 = (com.hp.hpl.jena.reasoner.InfGraph) r0;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.reasoner.InfGraph: com.hp.hpl.jena.graph.Graph getRawGraph()>();

        staticinvoke <com.hp.hpl.jena.sparql.SystemARQ: void syncGraph(com.hp.hpl.jena.graph.Graph)>($r6);

        goto label4;

     label1:
        $z1 = r0 instanceof com.hp.hpl.jena.graph.compose.Polyadic;

        if $z1 == 0 goto label2;

        $r3 = (com.hp.hpl.jena.graph.compose.Polyadic) r0;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.graph.compose.Polyadic: com.hp.hpl.jena.graph.Graph getBaseGraph()>();

        staticinvoke <com.hp.hpl.jena.sparql.SystemARQ: void syncGraph(com.hp.hpl.jena.graph.Graph)>($r4);

        goto label4;

     label2:
        $z2 = r0 instanceof com.hp.hpl.jena.sparql.graph.GraphWrapper;

        if $z2 == 0 goto label3;

        $r1 = (com.hp.hpl.jena.sparql.graph.GraphWrapper) r0;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph get()>();

        staticinvoke <com.hp.hpl.jena.sparql.SystemARQ: void syncGraph(com.hp.hpl.jena.graph.Graph)>($r2);

        goto label4;

     label3:
        staticinvoke <com.hp.hpl.jena.sparql.SystemARQ: void syncObject(java.lang.Object)>(r0);

     label4:
        return;
    }

    public static void sync(com.hp.hpl.jena.query.Dataset)
    {
        com.hp.hpl.jena.query.Dataset r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @parameter0: com.hp.hpl.jena.query.Dataset;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <com.hp.hpl.jena.sparql.SystemARQ: void sync(com.hp.hpl.jena.sparql.core.DatasetGraph)>($r1);

        return;
    }

    public static void sync(com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        java.util.Iterator $r2, $r3;
        com.hp.hpl.jena.graph.Node r5;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;
        java.lang.Object $r4;
        org.apache.jena.atlas.lib.Sync $r7;
        com.hp.hpl.jena.graph.Graph $r1, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $z0 = r0 instanceof org.apache.jena.atlas.lib.Sync;

        if $z0 == 0 goto label1;

        $r7 = (org.apache.jena.atlas.lib.Sync) r0;

        interfaceinvoke $r7.<org.apache.jena.atlas.lib.Sync: void sync()>();

        return;

     label1:
        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        staticinvoke <com.hp.hpl.jena.sparql.SystemARQ: void sync(com.hp.hpl.jena.graph.Graph)>($r1);

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator listGraphNodes()>();

        $r3 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator iterator(java.util.Iterator)>($r2);

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Node) $r4;

        $r6 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>(r5);

        staticinvoke <com.hp.hpl.jena.sparql.SystemARQ: void sync(com.hp.hpl.jena.graph.Graph)>($r6);

        goto label2;

     label3:
        return;
    }

    public static void syncObject(java.lang.Object)
    {
        java.lang.Object r0;
        org.apache.jena.atlas.lib.Sync $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.jena.atlas.lib.Sync;

        if $z0 == 0 goto label1;

        $r1 = (org.apache.jena.atlas.lib.Sync) r0;

        interfaceinvoke $r1.<org.apache.jena.atlas.lib.Sync: void sync()>();

     label1:
        return;
    }

    public static void registerSubSystem(com.hp.hpl.jena.sparql.mgt.SystemInfo)
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.mgt.SystemInfo r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.mgt.SystemInfo;

        $r1 = <com.hp.hpl.jena.sparql.SystemARQ: java.util.List versions>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public static java.util.Iterator registeredSubsystems()
    {
        java.util.List $r0;
        java.util.Iterator $r1;

        $r0 = <com.hp.hpl.jena.sparql.SystemARQ: java.util.List versions>;

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.util.ArrayList $r0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <com.hp.hpl.jena.sparql.SystemARQ: java.util.List versions> = $r0;

        return;
    }
}
