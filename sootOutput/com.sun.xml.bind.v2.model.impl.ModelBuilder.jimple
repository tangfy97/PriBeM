public class com.sun.xml.bind.v2.model.impl.ModelBuilder extends java.lang.Object
{
    final com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl typeInfoSet;
    public final com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader;
    public final com.sun.xml.bind.v2.model.nav.Navigator nav;
    private final java.util.Map typeNames;
    public final java.lang.String defaultNsUri;
    final java.util.Map registries;
    private final java.util.Map subclassReplacements;
    private com.sun.xml.bind.v2.model.core.ErrorHandler errorHandler;
    private boolean hadError;
    public boolean hasSwaRef;
    private final com.sun.xml.bind.v2.model.core.ErrorHandler proxyErrorHandler;
    private boolean linked;
    static final boolean $assertionsDisabled;

    public void <init>(com.sun.xml.bind.v2.model.'annotation'.AnnotationReader, com.sun.xml.bind.v2.model.nav.Navigator, java.util.Map, java.lang.String)
    {
        com.sun.xml.bind.v2.model.impl.ModelBuilder$1 $r3;
        java.util.HashMap $r1, $r2;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader r4;
        java.util.Map r6;
        com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl $r8;
        java.lang.String r9;
        com.sun.xml.bind.v2.model.nav.Navigator r5;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r0;
        com.sun.xml.bind.v2.model.core.ErrorHandler $r7;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r4 := @parameter0: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader;

        r5 := @parameter1: com.sun.xml.bind.v2.model.nav.Navigator;

        r6 := @parameter2: java.util.Map;

        r9 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: java.util.Map typeNames> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: java.util.Map registries> = $r2;

        $r3 = new com.sun.xml.bind.v2.model.impl.ModelBuilder$1;

        specialinvoke $r3.<com.sun.xml.bind.v2.model.impl.ModelBuilder$1: void <init>(com.sun.xml.bind.v2.model.impl.ModelBuilder)>(r0);

        r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.ErrorHandler proxyErrorHandler> = $r3;

        r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader> = r4;

        r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.nav.Navigator nav> = r5;

        r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: java.util.Map subclassReplacements> = r6;

        if r9 != null goto label1;

        r9 = "";

     label1:
        r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: java.lang.String defaultNsUri> = r9;

        $r7 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.ErrorHandler proxyErrorHandler>;

        interfaceinvoke r4.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: void setErrorHandler(com.sun.xml.bind.v2.model.core.ErrorHandler)>($r7);

        $r8 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl createTypeInfoSet()>();

        r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl typeInfoSet> = $r8;

        return;
    }

    protected com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl createTypeInfoSet()
    {
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r4;
        java.util.Map $r5;
        com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl $r0;
        com.sun.xml.bind.v2.model.nav.Navigator $r2, $r3;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r1;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        $r0 = new com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl;

        $r3 = r1.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.nav.Navigator nav>;

        $r4 = r1.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader>;

        $r2 = r1.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.nav.Navigator nav>;

        $r5 = staticinvoke <com.sun.xml.bind.v2.model.impl.BuiltinLeafInfoImpl: java.util.Map createLeaves(com.sun.xml.bind.v2.model.nav.Navigator)>($r2);

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl: void <init>(com.sun.xml.bind.v2.model.nav.Navigator,com.sun.xml.bind.v2.model.'annotation'.AnnotationReader,java.util.Map)>($r3, $r4, $r5);

        return $r0;
    }

    public com.sun.xml.bind.v2.model.core.NonElement getClassInfo(java.lang.Object, com.sun.xml.bind.v2.model.'annotation'.Locatable)
    {
        com.sun.xml.bind.v2.model.'annotation'.Locatable r2;
        com.sun.xml.bind.v2.model.core.NonElement $r3;
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.sun.xml.bind.v2.model.'annotation'.Locatable;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.NonElement getClassInfo(java.lang.Object,boolean,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(r1, 0, r2);

        return $r3;
    }

    public com.sun.xml.bind.v2.model.core.NonElement getClassInfo(java.lang.Object, boolean, com.sun.xml.bind.v2.model.'annotation'.Locatable)
    {
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r6, $r12, $r45;
        java.util.Map $r5, $r26, $r35;
        com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl $r2, $r16, $r38;
        boolean $z0, $z1, $z2, $z3, z4, $z5, $z6, $z7;
        com.sun.xml.bind.v2.model.core.TypeInfo r44;
        java.util.Collection $r42;
        com.sun.xml.bind.v2.model.core.NonElement $r3, r40;
        java.util.List $r17;
        java.lang.'annotation'.Annotation $r46;
        java.lang.StringBuilder $r27, $r29, $r30;
        java.lang.Object[] $r13;
        com.sun.xml.bind.v2.model.'annotation'.ClassLocatable $r9;
        java.lang.AssertionError $r39;
        javax.xml.bind.'annotation'.XmlSeeAlso $r47;
        int i0, i1;
        com.sun.xml.bind.v2.model.core.PropertyKind $r20, $r21;
        com.sun.xml.bind.v2.model.impl.EnumLeafInfoImpl $r37;
        java.lang.String $r25, $r31;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r0;
        java.util.Iterator $r18, $r43;
        com.sun.xml.bind.v2.model.'annotation'.Locatable r10, $r14, $r34;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r15;
        com.sun.xml.bind.v2.model.core.PropertyInfo r41;
        java.lang.Object r1, $r8, $r19, $r22, $r24, $r32, $r33, $r36, r48;
        com.sun.xml.bind.v2.model.nav.Navigator $r4, $r7, $r11, $r23, $r28;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r1 := @parameter0: java.lang.Object;

        z4 := @parameter1: boolean;

        r10 := @parameter2: com.sun.xml.bind.v2.model.'annotation'.Locatable;

        $z0 = <com.sun.xml.bind.v2.model.impl.ModelBuilder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if r1 != null goto label01;

        $r39 = new java.lang.AssertionError;

        specialinvoke $r39.<java.lang.AssertionError: void <init>()>();

        throw $r39;

     label01:
        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl typeInfoSet>;

        $r3 = virtualinvoke $r2.<com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl: com.sun.xml.bind.v2.model.core.NonElement getClassInfo(java.lang.Object)>(r1);

        if $r3 == null goto label02;

        return $r3;

     label02:
        $r4 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.nav.Navigator nav>;

        $z1 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isEnum(java.lang.Object)>(r1);

        if $z1 == 0 goto label03;

        $r37 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.impl.EnumLeafInfoImpl createEnumLeafInfo(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(r1, r10);

        $r38 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl typeInfoSet>;

        virtualinvoke $r38.<com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl: void add(com.sun.xml.bind.v2.model.impl.EnumLeafInfoImpl)>($r37);

        r40 = $r37;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void addTypeName(com.sun.xml.bind.v2.model.core.NonElement)>($r37);

        goto label12;

     label03:
        $r5 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: java.util.Map subclassReplacements>;

        $z2 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z2 == 0 goto label04;

        if z4 != 0 goto label04;

        $r35 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: java.util.Map subclassReplacements>;

        $r36 = interfaceinvoke $r35.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r40 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.NonElement getClassInfo(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r36, r10);

        goto label12;

     label04:
        $r6 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader>;

        $z3 = interfaceinvoke $r6.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: boolean hasClassAnnotation(java.lang.Object,java.lang.Class)>(r1, class "Ljavax/xml/bind/annotation/XmlTransient;");

        if $z3 != 0 goto label05;

        if $z2 == 0 goto label06;

     label05:
        $r7 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.nav.Navigator nav>;

        $r8 = interfaceinvoke $r7.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getSuperClass(java.lang.Object)>(r1);

        $r9 = new com.sun.xml.bind.v2.model.'annotation'.ClassLocatable;

        $r11 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.nav.Navigator nav>;

        specialinvoke $r9.<com.sun.xml.bind.v2.model.'annotation'.ClassLocatable: void <init>(com.sun.xml.bind.v2.model.'annotation'.Locatable,java.lang.Object,com.sun.xml.bind.v2.model.nav.Navigator)>(r10, r1, $r11);

        r40 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.NonElement getClassInfo(java.lang.Object,boolean,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r8, z4, $r9);

        goto label12;

     label06:
        $r15 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.impl.ClassInfoImpl createClassInfo(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(r1, r10);

        $r16 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl typeInfoSet>;

        virtualinvoke $r16.<com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl: void add(com.sun.xml.bind.v2.model.impl.ClassInfoImpl)>($r15);

        $r17 = virtualinvoke $r15.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.util.List getProperties()>();

        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z5 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label11;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r41 = (com.sun.xml.bind.v2.model.core.PropertyInfo) $r19;

        $r20 = interfaceinvoke r41.<com.sun.xml.bind.v2.model.core.PropertyInfo: com.sun.xml.bind.v2.model.core.PropertyKind kind()>();

        $r21 = <com.sun.xml.bind.v2.model.core.PropertyKind: com.sun.xml.bind.v2.model.core.PropertyKind REFERENCE>;

        if $r20 != $r21 goto label08;

        $r23 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.nav.Navigator nav>;

        $r24 = virtualinvoke $r15.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object getClazz()>();

        $r25 = interfaceinvoke $r23.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getPackageName(java.lang.Object)>($r24);

        $r26 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: java.util.Map registries>;

        $z6 = interfaceinvoke $r26.<java.util.Map: boolean containsKey(java.lang.Object)>($r25);

        if $z6 != 0 goto label08;

        $r28 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.nav.Navigator nav>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".ObjectFactory");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = virtualinvoke $r15.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object getClazz()>();

        $r33 = interfaceinvoke $r28.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object findClass(java.lang.String,java.lang.Object)>($r31, $r32);

        if $r33 == null goto label08;

        $r34 = (com.sun.xml.bind.v2.model.'annotation'.Locatable) r41;

        virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.RegistryInfo addRegistry(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r33, $r34);

     label08:
        $r42 = interfaceinvoke r41.<com.sun.xml.bind.v2.model.core.PropertyInfo: java.util.Collection ref()>();

        $r43 = interfaceinvoke $r42.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z7 = interfaceinvoke $r43.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label10;

        $r22 = interfaceinvoke $r43.<java.util.Iterator: java.lang.Object next()>();

        r44 = (com.sun.xml.bind.v2.model.core.TypeInfo) $r22;

        goto label09;

     label10:
        goto label07;

     label11:
        virtualinvoke $r15.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl getBaseClass()>();

        r40 = $r15;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void addTypeName(com.sun.xml.bind.v2.model.core.NonElement)>($r15);

     label12:
        $r45 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader>;

        $r46 = interfaceinvoke $r45.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getClassAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(class "Ljavax/xml/bind/annotation/XmlSeeAlso;", r1, r10);

        $r47 = (javax.xml.bind.'annotation'.XmlSeeAlso) $r46;

        if $r47 == null goto label14;

        $r12 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader>;

        $r13 = interfaceinvoke $r12.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.Object[] getClassArrayValue(java.lang.'annotation'.Annotation,java.lang.String)>($r47, "value");

        i0 = lengthof $r13;

        i1 = 0;

     label13:
        if i1 >= i0 goto label14;

        r48 = $r13[i1];

        $r14 = (com.sun.xml.bind.v2.model.'annotation'.Locatable) $r47;

        virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.NonElement getTypeInfo(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(r48, $r14);

        i1 = i1 + 1;

        goto label13;

     label14:
        return r40;
    }

    private void addTypeName(com.sun.xml.bind.v2.model.core.NonElement)
    {
        com.sun.xml.bind.v2.model.core.TypeInfo r5;
        java.lang.Object[] $r7;
        com.sun.xml.bind.v2.model.core.NonElement r0;
        com.sun.xml.bind.v2.model.impl.Messages $r8;
        java.util.Map $r3;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r6;
        java.lang.Object $r4;
        javax.xml.namespace.QName $r1, $r9;
        java.lang.String $r10;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r2;

        r2 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.NonElement;

        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName getTypeName()>();

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = r2.<com.sun.xml.bind.v2.model.impl.ModelBuilder: java.util.Map typeNames>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r0);

        r5 = (com.sun.xml.bind.v2.model.core.TypeInfo) $r4;

        if r5 == null goto label2;

        $r6 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r8 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages CONFLICTING_XML_TYPE_MAPPING>;

        $r7 = newarray (java.lang.Object)[1];

        $r9 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName getTypeName()>();

        $r7[0] = $r9;

        $r10 = virtualinvoke $r8.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r7);

        specialinvoke $r6.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r10, r5, r0);

        virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r6);

     label2:
        return;
    }

    public com.sun.xml.bind.v2.model.core.NonElement getTypeInfo(java.lang.Object, com.sun.xml.bind.v2.model.'annotation'.Locatable)
    {
        java.lang.AssertionError $r9;
        com.sun.xml.bind.v2.model.impl.ArrayInfoImpl $r15;
        com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl $r2, $r16;
        java.lang.String $r11, $r14;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r0;
        boolean $z0, $z1;
        com.sun.xml.bind.v2.model.'annotation'.Locatable r7;
        com.sun.xml.bind.v2.model.core.NonElement $r3, $r8;
        java.lang.Object r1, $r6;
        java.lang.StringBuilder $r10, $r12, $r13;
        com.sun.xml.bind.v2.model.nav.Navigator $r4, $r5;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r1 := @parameter0: java.lang.Object;

        r7 := @parameter1: com.sun.xml.bind.v2.model.'annotation'.Locatable;

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl typeInfoSet>;

        $r3 = virtualinvoke $r2.<com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl: com.sun.xml.bind.v2.model.core.NonElement getTypeInfo(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r4 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.nav.Navigator nav>;

        $z0 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isArray(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r15 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.impl.ArrayInfoImpl createArrayInfo(com.sun.xml.bind.v2.model.'annotation'.Locatable,java.lang.Object)>(r7, r1);

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void addTypeName(com.sun.xml.bind.v2.model.core.NonElement)>($r15);

        $r16 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl typeInfoSet>;

        virtualinvoke $r16.<com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl: void add(com.sun.xml.bind.v2.model.impl.ArrayInfoImpl)>($r15);

        return $r15;

     label2:
        $r5 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.nav.Navigator nav>;

        $r6 = interfaceinvoke $r5.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Object)>(r1);

        $z1 = <com.sun.xml.bind.v2.model.impl.ModelBuilder: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if $r6 != null goto label3;

        $r9 = new java.lang.AssertionError;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be a leaf, but we failed to recognize it.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r14);

        throw $r9;

     label3:
        $r8 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.NonElement getClassInfo(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r6, r7);

        return $r8;
    }

    public com.sun.xml.bind.v2.model.core.NonElement getTypeInfo(com.sun.xml.bind.v2.model.core.Ref)
    {
        java.lang.AssertionError $r12;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r7;
        java.util.Map $r10;
        java.lang.String $r11;
        boolean $z0, $z1, $z2;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r0;
        com.sun.xml.bind.v2.model.core.NonElement $r6;
        com.sun.xml.bind.v2.model.core.Ref r1;
        java.lang.'annotation'.Annotation $r8;
        java.lang.Object $r2, $r4, $r5;
        com.sun.xml.bind.v2.model.nav.Navigator $r3, $r9;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r1 := @parameter0: com.sun.xml.bind.v2.model.core.Ref;

        $z0 = <com.sun.xml.bind.v2.model.impl.ModelBuilder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = r1.<com.sun.xml.bind.v2.model.core.Ref: boolean valueList>;

        if $z2 == 0 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $r3 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.nav.Navigator nav>;

        $r2 = r1.<com.sun.xml.bind.v2.model.core.Ref: java.lang.Object type>;

        $r4 = interfaceinvoke $r3.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Object)>($r2);

        if $r4 == null goto label3;

        $r7 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader>;

        $r8 = interfaceinvoke $r7.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getClassAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(class "Ljavax/xml/bind/annotation/XmlRegistry;", $r4, null);

        if $r8 == null goto label3;

        $r10 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: java.util.Map registries>;

        $r9 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.nav.Navigator nav>;

        $r11 = interfaceinvoke $r9.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getPackageName(java.lang.Object)>($r4);

        $z1 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);

        if $z1 != 0 goto label2;

        virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.RegistryInfo addRegistry(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r4, null);

     label2:
        return null;

     label3:
        $r5 = r1.<com.sun.xml.bind.v2.model.core.Ref: java.lang.Object type>;

        $r6 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.NonElement getTypeInfo(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r5, null);

        return $r6;
    }

    protected com.sun.xml.bind.v2.model.impl.EnumLeafInfoImpl createEnumLeafInfo(java.lang.Object, com.sun.xml.bind.v2.model.'annotation'.Locatable)
    {
        com.sun.xml.bind.v2.model.'annotation'.Locatable r2;
        com.sun.xml.bind.v2.model.impl.EnumLeafInfoImpl $r0;
        java.lang.Object r3, $r5;
        com.sun.xml.bind.v2.model.nav.Navigator $r4;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r1;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r3 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.sun.xml.bind.v2.model.'annotation'.Locatable;

        $r0 = new com.sun.xml.bind.v2.model.impl.EnumLeafInfoImpl;

        $r4 = r1.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.nav.Navigator nav>;

        $r5 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object use(java.lang.Object)>(r3);

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.EnumLeafInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ModelBuilder,com.sun.xml.bind.v2.model.'annotation'.Locatable,java.lang.Object,java.lang.Object)>(r1, r2, r3, $r5);

        return $r0;
    }

    protected com.sun.xml.bind.v2.model.impl.ClassInfoImpl createClassInfo(java.lang.Object, com.sun.xml.bind.v2.model.'annotation'.Locatable)
    {
        com.sun.xml.bind.v2.model.'annotation'.Locatable r2;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r0;
        java.lang.Object r3;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r1;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r3 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.sun.xml.bind.v2.model.'annotation'.Locatable;

        $r0 = new com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ModelBuilder,com.sun.xml.bind.v2.model.'annotation'.Locatable,java.lang.Object)>(r1, r2, r3);

        return $r0;
    }

    protected com.sun.xml.bind.v2.model.impl.ElementInfoImpl createElementInfo(com.sun.xml.bind.v2.model.impl.RegistryInfoImpl, java.lang.Object) throws com.sun.xml.bind.v2.runtime.IllegalAnnotationException
    {
        com.sun.xml.bind.v2.model.impl.ElementInfoImpl $r0;
        com.sun.xml.bind.v2.model.impl.RegistryInfoImpl r2;
        java.lang.Object r3;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r1;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r2 := @parameter0: com.sun.xml.bind.v2.model.impl.RegistryInfoImpl;

        r3 := @parameter1: java.lang.Object;

        $r0 = new com.sun.xml.bind.v2.model.impl.ElementInfoImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.ElementInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ModelBuilder,com.sun.xml.bind.v2.model.impl.RegistryInfoImpl,java.lang.Object)>(r1, r2, r3);

        return $r0;
    }

    protected com.sun.xml.bind.v2.model.impl.ArrayInfoImpl createArrayInfo(com.sun.xml.bind.v2.model.'annotation'.Locatable, java.lang.Object)
    {
        com.sun.xml.bind.v2.model.'annotation'.Locatable r2;
        com.sun.xml.bind.v2.model.impl.ArrayInfoImpl $r0;
        java.lang.Object r3;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r1;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r2 := @parameter0: com.sun.xml.bind.v2.model.'annotation'.Locatable;

        r3 := @parameter1: java.lang.Object;

        $r0 = new com.sun.xml.bind.v2.model.impl.ArrayInfoImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.ArrayInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ModelBuilder,com.sun.xml.bind.v2.model.'annotation'.Locatable,java.lang.Object)>(r1, r2, r3);

        return $r0;
    }

    public com.sun.xml.bind.v2.model.core.RegistryInfo addRegistry(java.lang.Object, com.sun.xml.bind.v2.model.'annotation'.Locatable)
    {
        com.sun.xml.bind.v2.model.'annotation'.Locatable r2;
        com.sun.xml.bind.v2.model.impl.RegistryInfoImpl $r0;
        java.lang.Object r3;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r1;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r3 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.sun.xml.bind.v2.model.'annotation'.Locatable;

        $r0 = new com.sun.xml.bind.v2.model.impl.RegistryInfoImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.RegistryInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ModelBuilder,com.sun.xml.bind.v2.model.'annotation'.Locatable,java.lang.Object)>(r1, r2, r3);

        return $r0;
    }

    public com.sun.xml.bind.v2.model.core.RegistryInfo getRegistry(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        com.sun.xml.bind.v2.model.core.RegistryInfo $r4;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: java.util.Map registries>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.sun.xml.bind.v2.model.core.RegistryInfo) $r3;

        return $r4;
    }

    public com.sun.xml.bind.v2.model.core.TypeInfoSet link()
    {
        java.lang.AssertionError $r16;
        java.lang.Iterable $r2;
        java.util.Map $r5, $r9;
        com.sun.xml.bind.v2.model.impl.EnumLeafInfoImpl r19;
        com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl $r1, $r4, $r8, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r0;
        java.util.Iterator $r3, $r7, $r11;
        java.util.Collection $r6, $r10;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r18;
        com.sun.xml.bind.v2.model.impl.ElementInfoImpl r17;
        java.lang.Object $r13, $r14, $r15;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        $z0 = <com.sun.xml.bind.v2.model.impl.ModelBuilder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z4 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: boolean linked>;

        if $z4 == 0 goto label1;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label1:
        r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: boolean linked> = 1;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl typeInfoSet>;

        $r2 = virtualinvoke $r1.<com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl: java.lang.Iterable getAllElements()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label3;

        $r15 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r17 = (com.sun.xml.bind.v2.model.impl.ElementInfoImpl) $r15;

        virtualinvoke r17.<com.sun.xml.bind.v2.model.impl.ElementInfoImpl: void link()>();

        goto label2;

     label3:
        $r4 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl typeInfoSet>;

        $r5 = virtualinvoke $r4.<com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl: java.util.Map beans()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r14 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r18 = (com.sun.xml.bind.v2.model.impl.ClassInfoImpl) $r14;

        virtualinvoke r18.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void link()>();

        goto label4;

     label5:
        $r8 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl typeInfoSet>;

        $r9 = virtualinvoke $r8.<com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl: java.util.Map enums()>();

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Collection values()>();

        $r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r13 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r19 = (com.sun.xml.bind.v2.model.impl.EnumLeafInfoImpl) $r13;

        virtualinvoke r19.<com.sun.xml.bind.v2.model.impl.EnumLeafInfoImpl: void link()>();

        goto label6;

     label7:
        $z3 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: boolean hadError>;

        if $z3 == 0 goto label8;

        return null;

     label8:
        $r12 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl typeInfoSet>;

        return $r12;
    }

    public void setErrorHandler(com.sun.xml.bind.v2.model.core.ErrorHandler)
    {
        com.sun.xml.bind.v2.model.impl.ModelBuilder r0;
        com.sun.xml.bind.v2.model.core.ErrorHandler r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r1 := @parameter0: com.sun.xml.bind.v2.model.core.ErrorHandler;

        r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.ErrorHandler errorHandler> = r1;

        return;
    }

    public final void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)
    {
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException r2;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r0;
        com.sun.xml.bind.v2.model.core.ErrorHandler $r1, $r3;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r2 := @parameter0: com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: boolean hadError> = 1;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.ErrorHandler errorHandler>;

        if $r1 == null goto label1;

        $r3 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.ErrorHandler errorHandler>;

        interfaceinvoke $r3.<com.sun.xml.bind.v2.model.core.ErrorHandler: void error(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>(r2);

     label1:
        return;
    }

    public boolean isReplaced(java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object r1;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ModelBuilder: java.util.Map subclassReplacements>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r3, $r11;
        java.lang.NullPointerException $r15, r17;
        java.lang.String $r5, $r6, $r7, $r12, $r13, $r14;
        boolean $z0, $z1;
        java.lang.LinkageError $r2, $r10;
        java.lang.NoSuchMethodError $r1, $r8;
        com.sun.xml.bind.v2.model.impl.Messages $r4, r16;
        java.lang.Class $r0;
        java.lang.ClassLoader $r9;

        $r0 = class "Lcom/sun/xml/bind/v2/model/impl/ModelBuilder;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        <com.sun.xml.bind.v2.model.impl.ModelBuilder: boolean $assertionsDisabled> = $z1;

     label03:
        r17 = new java.lang.NullPointerException;

        specialinvoke r17.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: interfaceinvoke $stack8.<javax.xml.bind.\'annotation\'.XmlSchema: java.lang.String location()>()");

        throw r17;

     label04:
        $r15 := @caughtexception;

        goto label08;

     label05:
        $r8 := @caughtexception;

        $r9 = staticinvoke <com.sun.xml.bind.v2.model.impl.SecureLoader: java.lang.ClassLoader getClassClassLoader(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlSchema;");

        if $r9 != null goto label06;

        r16 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages INCOMPATIBLE_API_VERSION_MUSTANG>;

        goto label07;

     label06:
        r16 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages INCOMPATIBLE_API_VERSION>;

     label07:
        $r10 = new java.lang.LinkageError;

        $r11 = newarray (java.lang.Object)[2];

        $r12 = staticinvoke <com.sun.xml.bind.util.Which: java.lang.String which(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlSchema;");

        $r11[0] = $r12;

        $r13 = staticinvoke <com.sun.xml.bind.util.Which: java.lang.String which(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/model/impl/ModelBuilder;");

        $r11[1] = $r13;

        $r14 = virtualinvoke r16.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r11);

        specialinvoke $r10.<java.lang.LinkageError: void <init>(java.lang.String)>($r14);

        throw $r10;

     label08:
        staticinvoke <com.sun.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpace(java.lang.CharSequence)>("xyz");

     label09:
        goto label11;

     label10:
        $r1 := @caughtexception;

        $r2 = new java.lang.LinkageError;

        $r4 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages RUNNING_WITH_1_0_RUNTIME>;

        $r3 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <com.sun.xml.bind.util.Which: java.lang.String which(java.lang.Class)>(class "Lcom/sun/xml/bind/WhiteSpaceProcessor;");

        $r3[0] = $r5;

        $r6 = staticinvoke <com.sun.xml.bind.util.Which: java.lang.String which(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/model/impl/ModelBuilder;");

        $r3[1] = $r6;

        $r7 = virtualinvoke $r4.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r3);

        specialinvoke $r2.<java.lang.LinkageError: void <init>(java.lang.String)>($r7);

        throw $r2;

     label11:
        return;

        catch java.lang.NullPointerException from label03 to label04 with label04;
        catch java.lang.NoSuchMethodError from label03 to label04 with label05;
        catch java.lang.NoSuchMethodError from label08 to label09 with label10;
    }
}
