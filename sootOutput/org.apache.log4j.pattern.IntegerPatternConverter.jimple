public final class org.apache.log4j.pattern.IntegerPatternConverter extends org.apache.log4j.pattern.PatternConverter
{
    private static final org.apache.log4j.pattern.IntegerPatternConverter INSTANCE;

    private void <init>()
    {
        org.apache.log4j.pattern.IntegerPatternConverter r0;

        r0 := @this: org.apache.log4j.pattern.IntegerPatternConverter;

        specialinvoke r0.<org.apache.log4j.pattern.PatternConverter: void <init>(java.lang.String,java.lang.String)>("Integer", "integer");

        return;
    }

    public static org.apache.log4j.pattern.IntegerPatternConverter newInstance(java.lang.String[])
    {
        java.lang.String[] r1;
        org.apache.log4j.pattern.IntegerPatternConverter $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = <org.apache.log4j.pattern.IntegerPatternConverter: org.apache.log4j.pattern.IntegerPatternConverter INSTANCE>;

        return $r0;
    }

    public void format(java.lang.Object, java.lang.StringBuffer)
    {
        java.util.Date $r2;
        long $l0;
        org.apache.log4j.pattern.IntegerPatternConverter r5;
        java.lang.StringBuffer r1;
        java.lang.Object r0;
        java.lang.String $r3, $r4;
        boolean $z0, $z1;

        r5 := @this: org.apache.log4j.pattern.IntegerPatternConverter;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.StringBuffer;

        $z0 = r0 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label1:
        $z1 = r0 instanceof java.util.Date;

        if $z1 == 0 goto label2;

        $r2 = (java.util.Date) r0;

        $l0 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label2:
        return;
    }

    static void <clinit>()
    {
        org.apache.log4j.pattern.IntegerPatternConverter $r0;

        $r0 = new org.apache.log4j.pattern.IntegerPatternConverter;

        specialinvoke $r0.<org.apache.log4j.pattern.IntegerPatternConverter: void <init>()>();

        <org.apache.log4j.pattern.IntegerPatternConverter: org.apache.log4j.pattern.IntegerPatternConverter INSTANCE> = $r0;

        return;
    }
}
