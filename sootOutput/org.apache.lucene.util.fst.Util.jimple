public final class org.apache.lucene.util.fst.Util extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.lucene.util.fst.Util r0;

        r0 := @this: org.apache.lucene.util.fst.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object get(org.apache.lucene.util.fst.FST, org.apache.lucene.util.IntsRef) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$BytesReader $r3;
        org.apache.lucene.util.fst.Outputs $r4, $r7, $r12;
        org.apache.lucene.util.fst.FST$Arc $r1, $r2, $r10;
        org.apache.lucene.util.IntsRef r5;
        int[] $r9;
        int $i0, $i1, $i2, $i3, i4;
        boolean $z0;
        org.apache.lucene.util.fst.FST r0;
        java.lang.Object $r6, $r8, $r11, r13;

        r0 := @parameter0: org.apache.lucene.util.fst.FST;

        r5 := @parameter1: org.apache.lucene.util.IntsRef;

        $r1 = new org.apache.lucene.util.fst.FST$Arc;

        specialinvoke $r1.<org.apache.lucene.util.fst.FST$Arc: void <init>()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc getFirstArc(org.apache.lucene.util.fst.FST$Arc)>($r1);

        $r3 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$BytesReader getBytesReader()>();

        $r4 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        r13 = virtualinvoke $r4.<org.apache.lucene.util.fst.Outputs: java.lang.Object getNoOutput()>();

        i4 = 0;

     label1:
        $i0 = r5.<org.apache.lucene.util.IntsRef: int length>;

        if i4 >= $i0 goto label3;

        $r9 = r5.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i1 = r5.<org.apache.lucene.util.IntsRef: int offset>;

        $i2 = $i1 + i4;

        $i3 = $r9[$i2];

        $r10 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc findTargetArc(int,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($i3, $r2, $r2, $r3);

        if $r10 != null goto label2;

        return null;

     label2:
        $r12 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r11 = $r2.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output>;

        r13 = virtualinvoke $r12.<org.apache.lucene.util.fst.Outputs: java.lang.Object add(java.lang.Object,java.lang.Object)>(r13, $r11);

        i4 = i4 + 1;

        goto label1;

     label3:
        $z0 = virtualinvoke $r2.<org.apache.lucene.util.fst.FST$Arc: boolean isFinal()>();

        if $z0 == 0 goto label4;

        $r7 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r6 = $r2.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        $r8 = virtualinvoke $r7.<org.apache.lucene.util.fst.Outputs: java.lang.Object add(java.lang.Object,java.lang.Object)>(r13, $r6);

        return $r8;

     label4:
        return null;
    }

    public static java.lang.Object get(org.apache.lucene.util.fst.FST, org.apache.lucene.util.BytesRef) throws java.io.IOException
    {
        byte[] $r9;
        org.apache.lucene.util.fst.FST$BytesReader $r1;
        java.lang.AssertionError $r17;
        org.apache.lucene.util.fst.Outputs $r4, $r7, $r12;
        org.apache.lucene.util.fst.FST$Arc $r3, $r10, $r18;
        short $s3, $s6;
        byte $b2;
        int $i0, $i1, i4, $i5, $i7;
        org.apache.lucene.util.fst.FST$INPUT_TYPE $r13, $r14;
        boolean $z0, $z1;
        org.apache.lucene.util.BytesRef r5;
        org.apache.lucene.util.fst.FST r0;
        java.lang.Object $r6, $r8, $r11, r16;

        r0 := @parameter0: org.apache.lucene.util.fst.FST;

        r5 := @parameter1: org.apache.lucene.util.BytesRef;

        $z0 = <org.apache.lucene.util.fst.Util: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r14 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$INPUT_TYPE inputType>;

        $r13 = <org.apache.lucene.util.fst.FST$INPUT_TYPE: org.apache.lucene.util.fst.FST$INPUT_TYPE BYTE1>;

        if $r14 == $r13 goto label1;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label1:
        $r1 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$BytesReader getBytesReader()>();

        $r18 = new org.apache.lucene.util.fst.FST$Arc;

        specialinvoke $r18.<org.apache.lucene.util.fst.FST$Arc: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc getFirstArc(org.apache.lucene.util.fst.FST$Arc)>($r18);

        $r4 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        r16 = virtualinvoke $r4.<org.apache.lucene.util.fst.Outputs: java.lang.Object getNoOutput()>();

        i4 = 0;

     label2:
        $i5 = r5.<org.apache.lucene.util.BytesRef: int length>;

        if i4 >= $i5 goto label4;

        $r9 = r5.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i0 = r5.<org.apache.lucene.util.BytesRef: int offset>;

        $i1 = i4 + $i0;

        $b2 = $r9[$i1];

        $s6 = (short) $b2;

        $s3 = $s6 & 255;

        $i7 = (int) $s3;

        $r10 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc findTargetArc(int,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($i7, $r3, $r3, $r1);

        if $r10 != null goto label3;

        return null;

     label3:
        $r12 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r11 = $r3.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output>;

        r16 = virtualinvoke $r12.<org.apache.lucene.util.fst.Outputs: java.lang.Object add(java.lang.Object,java.lang.Object)>(r16, $r11);

        i4 = i4 + 1;

        goto label2;

     label4:
        $z1 = virtualinvoke $r3.<org.apache.lucene.util.fst.FST$Arc: boolean isFinal()>();

        if $z1 == 0 goto label5;

        $r7 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r6 = $r3.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        $r8 = virtualinvoke $r7.<org.apache.lucene.util.fst.Outputs: java.lang.Object add(java.lang.Object,java.lang.Object)>(r16, $r6);

        return $r8;

     label5:
        return null;
    }

    public static org.apache.lucene.util.IntsRef getByOutput(org.apache.lucene.util.fst.FST, long) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$BytesReader $r1;
        long l0;
        org.apache.lucene.util.fst.FST$Arc $r2, $r3, $r4;
        org.apache.lucene.util.IntsRef $r5, $r6;
        org.apache.lucene.util.fst.FST r0;

        r0 := @parameter0: org.apache.lucene.util.fst.FST;

        l0 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$BytesReader getBytesReader()>();

        $r2 = new org.apache.lucene.util.fst.FST$Arc;

        specialinvoke $r2.<org.apache.lucene.util.fst.FST$Arc: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc getFirstArc(org.apache.lucene.util.fst.FST$Arc)>($r2);

        $r4 = new org.apache.lucene.util.fst.FST$Arc;

        specialinvoke $r4.<org.apache.lucene.util.fst.FST$Arc: void <init>()>();

        $r5 = new org.apache.lucene.util.IntsRef;

        specialinvoke $r5.<org.apache.lucene.util.IntsRef: void <init>()>();

        $r6 = staticinvoke <org.apache.lucene.util.fst.Util: org.apache.lucene.util.IntsRef getByOutput(org.apache.lucene.util.fst.FST,long,org.apache.lucene.util.fst.FST$BytesReader,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.IntsRef)>(r0, l0, $r1, $r3, $r4, $r5);

        return $r6;
    }

    public static org.apache.lucene.util.IntsRef getByOutput(org.apache.lucene.util.fst.FST, long, org.apache.lucene.util.fst.FST$BytesReader, org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.IntsRef) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$Arc r0, r9, r23;
        byte $b5, $b6, $b25, $b26, $b27, $b28, $b32, $b33;
        java.lang.Long $r2, $r8, $r13, $r17, $r20, $r22;
        long $l1, $l3, l4, $l7, $l12, $l19, $l22, $l29, $l31, l34, l36, l40;
        org.apache.lucene.util.fst.Outputs $r18;
        org.apache.lucene.util.fst.FST r5;
        org.apache.lucene.util.IntsRef r3;
        int[] $r4, $r10, $r11, $r14, $r15;
        boolean $z0, $z1, $z2, z3;
        org.apache.lucene.util.fst.FST$BytesReader r6;
        int $i0, $i2, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i23, $i24, $i30, i35, i37, i38, i39, $i41, $i42, $i44, $i45;
        java.lang.Object $r1, $r7, $r12, $r16, $r19, $r21;

        r5 := @parameter0: org.apache.lucene.util.fst.FST;

        l4 := @parameter1: long;

        r6 := @parameter2: org.apache.lucene.util.fst.FST$BytesReader;

        r0 := @parameter3: org.apache.lucene.util.fst.FST$Arc;

        r9 := @parameter4: org.apache.lucene.util.fst.FST$Arc;

        r3 := @parameter5: org.apache.lucene.util.IntsRef;

        $r1 = r0.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output>;

        $r2 = (java.lang.Long) $r1;

        l34 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        i35 = 0;

     label01:
        $z2 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: boolean isFinal()>();

        if $z2 == 0 goto label03;

        $r21 = r0.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        $r22 = (java.lang.Long) $r21;

        $l31 = virtualinvoke $r22.<java.lang.Long: long longValue()>();

        l36 = l34 + $l31;

        $b32 = l36 cmp l4;

        if $b32 != 0 goto label02;

        r3.<org.apache.lucene.util.IntsRef: int length> = i35;

        return r3;

     label02:
        $b33 = l36 cmp l4;

        $i41 = (int) $b33;

        if $i41 <= 0 goto label03;

        return null;

     label03:
        $z0 = staticinvoke <org.apache.lucene.util.fst.FST: boolean targetHasArcs(org.apache.lucene.util.fst.FST$Arc)>(r0);

        if $z0 == 0 goto label22;

        $r4 = r3.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i0 = lengthof $r4;

        if $i0 != i35 goto label04;

        $i30 = 1 + i35;

        virtualinvoke r3.<org.apache.lucene.util.IntsRef: void grow(int)>($i30);

     label04:
        $l1 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        virtualinvoke r5.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readFirstRealTargetArc(long,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($l1, r0, r6);

        $i2 = r0.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc>;

        if $i2 == 0 goto label15;

        i37 = 0;

        $i15 = r0.<org.apache.lucene.util.fst.FST$Arc: int numArcs>;

        i38 = $i15 - 1;

        i39 = 0;

        z3 = 0;

     label05:
        if i37 > i38 goto label11;

        $i21 = i37 + i38;

        i39 = $i21 >>> 1;

        $l22 = r0.<org.apache.lucene.util.fst.FST$Arc: long posArcsStart>;

        virtualinvoke r6.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l22);

        $i23 = r0.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc>;

        $i24 = $i23 * i39;

        virtualinvoke r6.<org.apache.lucene.util.fst.FST$BytesReader: void skipBytes(int)>($i24);

        $b25 = virtualinvoke r6.<org.apache.lucene.util.fst.FST$BytesReader: byte readByte()>();

        virtualinvoke r5.<org.apache.lucene.util.fst.FST: int readLabel(org.apache.lucene.store.DataInput)>(r6);

        $b26 = $b25 & 16;

        if $b26 == 0 goto label06;

        $r18 = r5.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r19 = virtualinvoke $r18.<org.apache.lucene.util.fst.Outputs: java.lang.Object read(org.apache.lucene.store.DataInput)>(r6);

        $r20 = (java.lang.Long) $r19;

        $l29 = virtualinvoke $r20.<java.lang.Long: long longValue()>();

        l40 = l34 + $l29;

        goto label07;

     label06:
        l40 = l34;

     label07:
        $b27 = l40 cmp l4;

        if $b27 != 0 goto label08;

        z3 = 1;

        goto label11;

     label08:
        $b28 = l40 cmp l4;

        $i42 = (int) $b28;

        if $i42 >= 0 goto label09;

        i37 = i39 + 1;

        goto label10;

     label09:
        i38 = i39 - 1;

     label10:
        goto label05;

     label11:
        $i44 = (int) -1;

        if i38 != $i44 goto label12;

        return null;

     label12:
        if z3 == 0 goto label13;

        $i20 = i39 - 1;

        r0.<org.apache.lucene.util.fst.FST$Arc: int arcIdx> = $i20;

        goto label14;

     label13:
        $i16 = i37 - 2;

        r0.<org.apache.lucene.util.fst.FST$Arc: int arcIdx> = $i16;

     label14:
        virtualinvoke r5.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(r0, r6);

        $r15 = r3.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i17 = i35;

        i35 = i35 + 1;

        $i18 = r0.<org.apache.lucene.util.fst.FST$Arc: int label>;

        $r15[$i17] = $i18;

        $r16 = r0.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output>;

        $r17 = (java.lang.Long) $r16;

        $l19 = virtualinvoke $r17.<java.lang.Long: long longValue()>();

        l34 = l34 + $l19;

        goto label01;

     label15:
        r23 = null;

     label16:
        $r7 = r0.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output>;

        $r8 = (java.lang.Long) $r7;

        $l3 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        $l7 = l34 + $l3;

        $b5 = $l7 cmp l4;

        if $b5 != 0 goto label17;

        l34 = $l7;

        $r14 = r3.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i13 = i35;

        i35 = i35 + 1;

        $i14 = r0.<org.apache.lucene.util.fst.FST$Arc: int label>;

        $r14[$i13] = $i14;

        goto label21;

     label17:
        $b6 = $l7 cmp l4;

        $i45 = (int) $b6;

        if $i45 <= 0 goto label19;

        if r23 != null goto label18;

        return null;

     label18:
        virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: org.apache.lucene.util.fst.FST$Arc copyFrom(org.apache.lucene.util.fst.FST$Arc)>(r23);

        $r11 = r3.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i10 = i35;

        i35 = i35 + 1;

        $i11 = r0.<org.apache.lucene.util.fst.FST$Arc: int label>;

        $r11[$i10] = $i11;

        $r12 = r0.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output>;

        $r13 = (java.lang.Long) $r12;

        $l12 = virtualinvoke $r13.<java.lang.Long: long longValue()>();

        l34 = l34 + $l12;

        goto label21;

     label19:
        $z1 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: boolean isLast()>();

        if $z1 == 0 goto label20;

        l34 = $l7;

        $r10 = r3.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i8 = i35;

        i35 = i35 + 1;

        $i9 = r0.<org.apache.lucene.util.fst.FST$Arc: int label>;

        $r10[$i8] = $i9;

        goto label21;

     label20:
        r23 = r9;

        virtualinvoke r9.<org.apache.lucene.util.fst.FST$Arc: org.apache.lucene.util.fst.FST$Arc copyFrom(org.apache.lucene.util.fst.FST$Arc)>(r0);

        virtualinvoke r5.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(r0, r6);

        goto label16;

     label21:
        goto label01;

     label22:
        return null;
    }

    public static org.apache.lucene.util.fst.Util$MinResult[] shortestPaths(org.apache.lucene.util.fst.FST, org.apache.lucene.util.fst.FST$Arc, java.lang.Object, java.util.Comparator, int, boolean) throws java.io.IOException
    {
        org.apache.lucene.util.fst.Util$TopNSearcher $r0;
        org.apache.lucene.util.fst.FST$Arc r3;
        org.apache.lucene.util.IntsRef $r5;
        org.apache.lucene.util.fst.Util$MinResult[] $r6;
        int i0;
        org.apache.lucene.util.fst.FST r1;
        java.lang.Object r4;
        java.util.Comparator r2;
        boolean z0;

        r1 := @parameter0: org.apache.lucene.util.fst.FST;

        r3 := @parameter1: org.apache.lucene.util.fst.FST$Arc;

        r4 := @parameter2: java.lang.Object;

        r2 := @parameter3: java.util.Comparator;

        i0 := @parameter4: int;

        z0 := @parameter5: boolean;

        $r0 = new org.apache.lucene.util.fst.Util$TopNSearcher;

        specialinvoke $r0.<org.apache.lucene.util.fst.Util$TopNSearcher: void <init>(org.apache.lucene.util.fst.FST,int,int,java.util.Comparator)>(r1, i0, i0, r2);

        $r5 = new org.apache.lucene.util.IntsRef;

        specialinvoke $r5.<org.apache.lucene.util.IntsRef: void <init>()>();

        virtualinvoke $r0.<org.apache.lucene.util.fst.Util$TopNSearcher: void addStartPaths(org.apache.lucene.util.fst.FST$Arc,java.lang.Object,boolean,org.apache.lucene.util.IntsRef)>(r3, r4, z0, $r5);

        $r6 = virtualinvoke $r0.<org.apache.lucene.util.fst.Util$TopNSearcher: org.apache.lucene.util.fst.Util$MinResult[] search()>();

        return $r6;
    }

    public static void toDot(org.apache.lucene.util.fst.FST, java.io.Writer, boolean, boolean) throws java.io.IOException
    {
        java.lang.Integer $r19, $r79;
        org.apache.lucene.util.fst.FST$Arc $r2, r73, $r78, $r84, $r91;
        byte $b9;
        java.lang.StringBuilder $r13, $r14, $r15, $r21, $r22, $r26, $r27, $r28, $r29, $r30, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r43, $r44, $r48, $r49, $r51, $r55, $r69, $r70, $r71, $r89, $r90, $r92, $r93, $r95, $r96;
        long $l0, $l2, $l7, $l8, $l10, $l13, $l15, l17, $l18, $l19, $l21;
        java.lang.AssertionError $r94;
        org.apache.lucene.util.fst.Outputs $r8, $r11, $r46, $r53, $r59;
        java.util.ArrayList $r85, $r86, $r87;
        java.lang.String $r16, $r23, $r31, $r39, $r47, $r54, r61, $r64, $r65, $r66, $r67, $r72, r74, r75, $r76, r81, r82, $r83;
        org.apache.lucene.util.fst.FST r0;
        boolean z0, $z1, $z2, $z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, $z15, $z16;
        java.io.Writer r7;
        org.apache.lucene.util.fst.FST$BytesReader $r10;
        int $i1, $i3, $i4, $i5, $i6, $i11, $i12, $i14, i16, $i20, $i22, $i23, $i25;
        java.util.Iterator $r17;
        java.lang.Object $r9, $r18, $r24, $r41, $r45, $r52, $r56, $r57, $r58, $r60, $r62, r63, $r80;
        java.util.BitSet $r88;

        r0 := @parameter0: org.apache.lucene.util.fst.FST;

        r7 := @parameter1: java.io.Writer;

        z4 := @parameter2: boolean;

        z0 := @parameter3: boolean;

        $r84 = new org.apache.lucene.util.fst.FST$Arc;

        specialinvoke $r84.<org.apache.lucene.util.fst.FST$Arc: void <init>()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc getFirstArc(org.apache.lucene.util.fst.FST$Arc)>($r84);

        $r85 = new java.util.ArrayList;

        specialinvoke $r85.<java.util.ArrayList: void <init>()>();

        $r86 = new java.util.ArrayList;

        specialinvoke $r86.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r86.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r87 = new java.util.ArrayList;

        specialinvoke $r87.<java.util.ArrayList: void <init>()>();

        $r88 = new java.util.BitSet;

        specialinvoke $r88.<java.util.BitSet: void <init>()>();

        $l0 = $r2.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $i1 = (int) $l0;

        virtualinvoke $r88.<java.util.BitSet: void set(int)>($i1);

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>("digraph FST {\n");

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>("  rankdir = LR; splines=true; concentrate=true; ordering=out; ranksep=2.5; \n");

        if z0 != 0 goto label01;

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>("  node [shape=circle, width=.2, height=.2, style=filled]\n");

     label01:
        staticinvoke <org.apache.lucene.util.fst.Util: void emitDotState(java.io.Writer,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r7, "initial", "point", "white", "");

        $r8 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r9 = virtualinvoke $r8.<org.apache.lucene.util.fst.Outputs: java.lang.Object getNoOutput()>();

        $r10 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$BytesReader getBytesReader()>();

        $z1 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: boolean isExpandedTarget(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($r2, $r10);

        if $z1 == 0 goto label02;

        r61 = "blue";

        goto label03;

     label02:
        r61 = null;

     label03:
        $z2 = virtualinvoke $r2.<org.apache.lucene.util.fst.FST$Arc: boolean isFinal()>();

        if $z2 == 0 goto label06;

        z14 = 1;

        $r60 = $r2.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        if $r60 != $r9 goto label04;

        $r62 = null;

        goto label05;

     label04:
        $r62 = $r2.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

     label05:
        r63 = $r62;

        goto label07;

     label06:
        z14 = 0;

        r63 = null;

     label07:
        $l2 = $r2.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $r64 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l2);

        if z14 == 0 goto label08;

        $r65 = "doublecircle";

        goto label09;

     label08:
        $r65 = "circle";

     label09:
        $r66 = r61;

        if r63 != null goto label10;

        $r67 = "";

        goto label11;

     label10:
        $r11 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r67 = virtualinvoke $r11.<org.apache.lucene.util.fst.Outputs: java.lang.String outputToString(java.lang.Object)>(r63);

     label11:
        staticinvoke <org.apache.lucene.util.fst.Util: void emitDotState(java.io.Writer,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r7, $r64, $r65, $r66, $r67);

        $r89 = new java.lang.StringBuilder;

        specialinvoke $r89.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  initial -> ");

        $l15 = $r2.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l15);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>($r72);

        i16 = 0;

     label12:
        $z15 = interfaceinvoke $r86.<java.util.List: boolean isEmpty()>();

        if $z15 != 0 goto label34;

        interfaceinvoke $r85.<java.util.List: boolean addAll(java.util.Collection)>($r86);

        interfaceinvoke $r86.<java.util.List: void clear()>();

        i16 = i16 + 1;

        $r90 = new java.lang.StringBuilder;

        specialinvoke $r90.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  // Transitions and states at level: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>($r16);

     label13:
        $z3 = interfaceinvoke $r85.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label30;

        $i5 = interfaceinvoke $r85.<java.util.List: int size()>();

        $i6 = $i5 - 1;

        $r24 = interfaceinvoke $r85.<java.util.List: java.lang.Object remove(int)>($i6);

        r73 = (org.apache.lucene.util.fst.FST$Arc) $r24;

        $z6 = staticinvoke <org.apache.lucene.util.fst.FST: boolean targetHasArcs(org.apache.lucene.util.fst.FST$Arc)>(r73);

        if $z6 == 0 goto label29;

        l17 = r73.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $l7 = r73.<org.apache.lucene.util.fst.FST$Arc: long target>;

        virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readFirstRealTargetArc(long,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($l7, r73, $r10);

     label14:
        $l8 = r73.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $b9 = $l8 cmp 0L;

        $i23 = (int) $b9;

        if $i23 < 0 goto label19;

        $l13 = r73.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $i14 = (int) $l13;

        $z12 = virtualinvoke $r88.<java.util.BitSet: boolean get(int)>($i14);

        if $z12 != 0 goto label19;

        $z13 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: boolean isExpandedTarget(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(r73, $r10);

        if $z13 == 0 goto label15;

        r74 = "blue";

        goto label16;

     label15:
        r74 = null;

     label16:
        $r56 = r73.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        if $r56 == null goto label17;

        $r57 = r73.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        if $r57 == $r9 goto label17;

        $r59 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r58 = r73.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        r75 = virtualinvoke $r59.<org.apache.lucene.util.fst.Outputs: java.lang.String outputToString(java.lang.Object)>($r58);

        goto label18;

     label17:
        r75 = "";

     label18:
        $l18 = r73.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $r76 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l18);

        staticinvoke <org.apache.lucene.util.fst.Util: void emitDotState(java.io.Writer,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r7, $r76, "circle", r74, r75);

        $l19 = r73.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $i20 = (int) $l19;

        virtualinvoke $r88.<java.util.BitSet: void set(int)>($i20);

        $r91 = new org.apache.lucene.util.fst.FST$Arc;

        specialinvoke $r91.<org.apache.lucene.util.fst.FST$Arc: void <init>()>();

        $r78 = virtualinvoke $r91.<org.apache.lucene.util.fst.FST$Arc: org.apache.lucene.util.fst.FST$Arc copyFrom(org.apache.lucene.util.fst.FST$Arc)>(r73);

        interfaceinvoke $r86.<java.util.List: boolean add(java.lang.Object)>($r78);

        $l21 = r73.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $i22 = (int) $l21;

        $r79 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i22);

        interfaceinvoke $r87.<java.util.List: boolean add(java.lang.Object)>($r79);

     label19:
        $r80 = r73.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output>;

        if $r80 == $r9 goto label20;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r53 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r52 = r73.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output>;

        $r54 = virtualinvoke $r53.<org.apache.lucene.util.fst.Outputs: java.lang.String outputToString(java.lang.Object)>($r52);

        $r55 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        r81 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label21;

     label20:
        r81 = "";

     label21:
        $z7 = staticinvoke <org.apache.lucene.util.fst.FST: boolean targetHasArcs(org.apache.lucene.util.fst.FST$Arc)>(r73);

        if $z7 != 0 goto label22;

        $z11 = virtualinvoke r73.<org.apache.lucene.util.fst.FST$Arc: boolean isFinal()>();

        if $z11 == 0 goto label22;

        $r41 = r73.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        if $r41 == $r9 goto label22;

        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r81);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/[");

        $r46 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r45 = r73.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        $r47 = virtualinvoke $r46.<org.apache.lucene.util.fst.Outputs: java.lang.String outputToString(java.lang.Object)>($r45);

        $r48 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r81 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

     label22:
        $z16 = virtualinvoke r73.<org.apache.lucene.util.fst.FST$Arc: boolean flag(int)>(4);

        if $z16 == 0 goto label23;

        r82 = "red";

        goto label24;

     label23:
        r82 = "black";

     label24:
        $z8 = <org.apache.lucene.util.fst.Util: boolean $assertionsDisabled>;

        if $z8 != 0 goto label25;

        $i12 = r73.<org.apache.lucene.util.fst.FST$Arc: int label>;

        $i25 = (int) -1;

        if $i12 != $i25 goto label25;

        $r94 = new java.lang.AssertionError;

        specialinvoke $r94.<java.lang.AssertionError: void <init>()>();

        throw $r94;

     label25:
        $r95 = new java.lang.StringBuilder;

        specialinvoke $r95.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l17);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $l10 = r73.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [label=\"");

        $i11 = r73.<org.apache.lucene.util.fst.FST$Arc: int label>;

        $r31 = staticinvoke <org.apache.lucene.util.fst.Util: java.lang.String printableLabel(int)>($i11);

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r81);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $z9 = virtualinvoke r73.<org.apache.lucene.util.fst.FST$Arc: boolean isFinal()>();

        if $z9 == 0 goto label26;

        $r83 = " style=\"bold\"";

        goto label27;

     label26:
        $r83 = "";

     label27:
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r83);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" color=\"");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r82);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"]\n");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>($r39);

        $z10 = virtualinvoke r73.<org.apache.lucene.util.fst.FST$Arc: boolean isLast()>();

        if $z10 == 0 goto label28;

        goto label29;

     label28:
        virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(r73, $r10);

        goto label14;

     label29:
        goto label13;

     label30:
        if z4 == 0 goto label33;

        $i3 = interfaceinvoke $r87.<java.util.List: int size()>();

        if $i3 <= 1 goto label33;

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>("  {rank=same; ");

        $r17 = interfaceinvoke $r87.<java.util.List: java.util.Iterator iterator()>();

     label31:
        $z5 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label32;

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.lang.Integer) $r18;

        $i4 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        $r96 = new java.lang.StringBuilder;

        specialinvoke $r96.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>($r23);

        goto label31;

     label32:
        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>(" }\n");

     label33:
        interfaceinvoke $r87.<java.util.List: void clear()>();

        goto label12;

     label34:
        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>("  -1 [style=filled, color=black, shape=doublecircle, label=\"\"]\n\n");

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>("  {rank=sink; -1 }\n");

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>("}\n");

        virtualinvoke r7.<java.io.Writer: void flush()>();

        return;
    }

    private static void emitDotState(java.io.Writer, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r3, r6, r9, r12, $r16, $r27, $r28, $r29;
        java.io.Writer r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;

        r0 := @parameter0: java.io.Writer;

        r3 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        r9 := @parameter3: java.lang.String;

        r12 := @parameter4: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        if r6 == null goto label1;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shape=");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r27 = "";

     label2:
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        if r9 == null goto label3;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("color=");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r28 = "";

     label4:
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        if r12 == null goto label5;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=\"");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r29 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label5:
        $r29 = "label=\"\"";

     label6:
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]\n");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r16);

        return;
    }

    private static java.lang.String printableLabel(int)
    {
        char $c1;
        int i0;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r2, $r4, $r5;

        i0 := @parameter0: int;

        if i0 < 32 goto label1;

        if i0 > 125 goto label1;

        $c1 = (char) i0;

        $r5 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c1);

        return $r5;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static org.apache.lucene.util.IntsRef toUTF16(java.lang.CharSequence, org.apache.lucene.util.IntsRef)
    {
        java.lang.CharSequence r0;
        int[] $r2;
        int $i0, i2, $i3;
        char $c1;
        org.apache.lucene.util.IntsRef r1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: org.apache.lucene.util.IntsRef;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        r1.<org.apache.lucene.util.IntsRef: int offset> = 0;

        r1.<org.apache.lucene.util.IntsRef: int length> = $i0;

        virtualinvoke r1.<org.apache.lucene.util.IntsRef: void grow(int)>($i0);

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $r2 = r1.<org.apache.lucene.util.IntsRef: int[] ints>;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $i3 = (int) $c1;

        $r2[i2] = $i3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static org.apache.lucene.util.IntsRef toUTF32(java.lang.CharSequence, org.apache.lucene.util.IntsRef)
    {
        java.lang.CharSequence r0;
        org.apache.lucene.util.IntsRef r1;
        int[] $r2;
        int $i0, $i1, $i2, $i3, i4, i5;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: org.apache.lucene.util.IntsRef;

        i4 = 0;

        i5 = 0;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

     label1:
        if i4 >= $i0 goto label2;

        $i1 = i5 + 1;

        virtualinvoke r1.<org.apache.lucene.util.IntsRef: void grow(int)>($i1);

        $i2 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r0, i4);

        $r2 = r1.<org.apache.lucene.util.IntsRef: int[] ints>;

        $r2[i5] = $i2;

        $i3 = staticinvoke <java.lang.Character: int charCount(int)>($i2);

        i4 = i4 + $i3;

        i5 = i5 + 1;

        goto label1;

     label2:
        r1.<org.apache.lucene.util.IntsRef: int length> = i5;

        return r1;
    }

    public static org.apache.lucene.util.IntsRef toUTF32(char[], int, int, org.apache.lucene.util.IntsRef)
    {
        org.apache.lucene.util.IntsRef r0;
        int[] $r2;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7;
        char[] r1;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0 := @parameter3: org.apache.lucene.util.IntsRef;

        i6 = i0;

        i7 = 0;

        i2 = i0 + i1;

     label1:
        if i6 >= i2 goto label2;

        $i3 = i7 + 1;

        virtualinvoke r0.<org.apache.lucene.util.IntsRef: void grow(int)>($i3);

        $i4 = staticinvoke <java.lang.Character: int codePointAt(char[],int)>(r1, i6);

        $r2 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        $r2[i7] = $i4;

        $i5 = staticinvoke <java.lang.Character: int charCount(int)>($i4);

        i6 = i6 + $i5;

        i7 = i7 + 1;

        goto label1;

     label2:
        r0.<org.apache.lucene.util.IntsRef: int length> = i7;

        return r0;
    }

    public static org.apache.lucene.util.IntsRef toIntsRef(org.apache.lucene.util.BytesRef, org.apache.lucene.util.IntsRef)
    {
        byte[] $r2;
        org.apache.lucene.util.BytesRef r1;
        org.apache.lucene.util.IntsRef r0;
        short $s6, $s8;
        byte $b5;
        int[] $r3;
        int $i0, $i1, $i2, $i3, $i4, i7, $i9;

        r1 := @parameter0: org.apache.lucene.util.BytesRef;

        r0 := @parameter1: org.apache.lucene.util.IntsRef;

        $i0 = r1.<org.apache.lucene.util.BytesRef: int length>;

        virtualinvoke r0.<org.apache.lucene.util.IntsRef: void grow(int)>($i0);

        i7 = 0;

     label1:
        $i1 = r1.<org.apache.lucene.util.BytesRef: int length>;

        if i7 >= $i1 goto label2;

        $r3 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        $r2 = r1.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i3 = r1.<org.apache.lucene.util.BytesRef: int offset>;

        $i4 = i7 + $i3;

        $b5 = $r2[$i4];

        $s8 = (short) $b5;

        $s6 = $s8 & 255;

        $i9 = (int) $s6;

        $r3[i7] = $i9;

        i7 = i7 + 1;

        goto label1;

     label2:
        $i2 = r1.<org.apache.lucene.util.BytesRef: int length>;

        r0.<org.apache.lucene.util.IntsRef: int length> = $i2;

        return r0;
    }

    public static org.apache.lucene.util.BytesRef toBytesRef(org.apache.lucene.util.IntsRef, org.apache.lucene.util.BytesRef)
    {
        byte[] $r3;
        java.lang.AssertionError $r11;
        org.apache.lucene.util.IntsRef r1;
        byte $b6;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, i5, i7, $i9;
        java.lang.String $r9;
        boolean $z0;
        org.apache.lucene.util.BytesRef r0;
        java.lang.StringBuilder $r6, $r7, $r8, $r10;

        r1 := @parameter0: org.apache.lucene.util.IntsRef;

        r0 := @parameter1: org.apache.lucene.util.BytesRef;

        $i0 = r1.<org.apache.lucene.util.IntsRef: int length>;

        virtualinvoke r0.<org.apache.lucene.util.BytesRef: void grow(int)>($i0);

        i7 = 0;

     label1:
        $i1 = r1.<org.apache.lucene.util.IntsRef: int length>;

        if i7 >= $i1 goto label4;

        $r2 = r1.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i3 = r1.<org.apache.lucene.util.IntsRef: int offset>;

        $i4 = i7 + $i3;

        i5 = $r2[$i4];

        $z0 = <org.apache.lucene.util.fst.Util: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $i9 = (int) -128;

        if i5 < $i9 goto label2;

        if i5 <= 255 goto label3;

     label2:
        $r11 = new java.lang.AssertionError;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t fit into byte");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r11;

     label3:
        $r3 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $b6 = (byte) i5;

        $r3[i7] = $b6;

        i7 = i7 + 1;

        goto label1;

     label4:
        $i2 = r1.<org.apache.lucene.util.IntsRef: int length>;

        r0.<org.apache.lucene.util.BytesRef: int length> = $i2;

        return r0;
    }

    public static org.apache.lucene.util.fst.FST$Arc readCeilArc(int, org.apache.lucene.util.fst.FST, org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$Arc r0, r2, $r4, $r5;
        byte $b15;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.fst.FST$BytesReader r3;
        long $l2, $l7, $l14, $l16, $l17;
        int i0, $i1, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, i12, $i13, i18, i19, i20, $i21, $i22, $i24, $i25, $i27, $i29;
        org.apache.lucene.util.fst.FST r1;
        java.lang.Object $r6;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.lucene.util.fst.FST;

        r0 := @parameter2: org.apache.lucene.util.fst.FST$Arc;

        r2 := @parameter3: org.apache.lucene.util.fst.FST$Arc;

        r3 := @parameter4: org.apache.lucene.util.fst.FST$BytesReader;

        $i24 = (int) -1;

        if i0 != $i24 goto label04;

        $z2 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: boolean isFinal()>();

        if $z2 == 0 goto label03;

        $l14 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $b15 = $l14 cmp 0L;

        $i25 = (int) $b15;

        if $i25 > 0 goto label01;

        r2.<org.apache.lucene.util.fst.FST$Arc: byte flags> = 2;

        goto label02;

     label01:
        r2.<org.apache.lucene.util.fst.FST$Arc: byte flags> = 0;

        $l16 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        r2.<org.apache.lucene.util.fst.FST$Arc: long nextArc> = $l16;

        $l17 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        r2.<org.apache.lucene.util.fst.FST$Arc: long node> = $l17;

     label02:
        $r6 = r0.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        r2.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output> = $r6;

        $i27 = (int) -1;

        r2.<org.apache.lucene.util.fst.FST$Arc: int label> = $i27;

        return r2;

     label03:
        return null;

     label04:
        $z0 = staticinvoke <org.apache.lucene.util.fst.FST: boolean targetHasArcs(org.apache.lucene.util.fst.FST$Arc)>(r0);

        if $z0 != 0 goto label05;

        return null;

     label05:
        virtualinvoke r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readFirstTargetArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(r0, r2, r3);

        $i1 = r2.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc>;

        if $i1 == 0 goto label14;

        $i3 = r2.<org.apache.lucene.util.fst.FST$Arc: int label>;

        $i29 = (int) -1;

        if $i3 == $i29 goto label14;

        i18 = r2.<org.apache.lucene.util.fst.FST$Arc: int arcIdx>;

        $i4 = r2.<org.apache.lucene.util.fst.FST$Arc: int numArcs>;

        i19 = $i4 - 1;

     label06:
        if i18 > i19 goto label10;

        $i6 = i18 + i19;

        i20 = $i6 >>> 1;

        $l7 = r2.<org.apache.lucene.util.fst.FST$Arc: long posArcsStart>;

        virtualinvoke r3.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l7);

        $i8 = r2.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc>;

        $i9 = $i8 * i20;

        $i10 = $i9 + 1;

        virtualinvoke r3.<org.apache.lucene.util.fst.FST$BytesReader: void skipBytes(int)>($i10);

        $i11 = virtualinvoke r1.<org.apache.lucene.util.fst.FST: int readLabel(org.apache.lucene.store.DataInput)>(r3);

        i12 = $i11 - i0;

        if i12 >= 0 goto label07;

        i18 = i20 + 1;

        goto label09;

     label07:
        if i12 <= 0 goto label08;

        i19 = i20 - 1;

        goto label09;

     label08:
        $i13 = i20 - 1;

        r2.<org.apache.lucene.util.fst.FST$Arc: int arcIdx> = $i13;

        $r5 = virtualinvoke r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(r2, r3);

        return $r5;

     label09:
        goto label06;

     label10:
        $i5 = r2.<org.apache.lucene.util.fst.FST$Arc: int numArcs>;

        if i18 != $i5 goto label11;

        return null;

     label11:
        if i18 <= i19 goto label12;

        $i21 = i19;

        goto label13;

     label12:
        $i21 = i18;

     label13:
        r2.<org.apache.lucene.util.fst.FST$Arc: int arcIdx> = $i21;

        $r4 = virtualinvoke r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(r2, r3);

        return $r4;

     label14:
        $l2 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        virtualinvoke r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readFirstRealTargetArc(long,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($l2, r2, r3);

     label15:
        $i22 = r2.<org.apache.lucene.util.fst.FST$Arc: int label>;

        if $i22 < i0 goto label16;

        return r2;

     label16:
        $z1 = virtualinvoke r2.<org.apache.lucene.util.fst.FST$Arc: boolean isLast()>();

        if $z1 == 0 goto label17;

        return null;

     label17:
        virtualinvoke r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(r2, r3);

        goto label15;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/fst/Util;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.fst.Util: boolean $assertionsDisabled> = $z1;

        return;
    }
}
