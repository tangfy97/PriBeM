public class org.springframework.beans.factory.xml.BeansDtdResolver extends java.lang.Object implements org.xml.sax.EntityResolver
{
    private static final java.lang.String DTD_EXTENSION;
    private static final java.lang.String[] DTD_NAMES;
    private static final org.apache.commons.logging.Log logger;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        org.apache.commons.logging.Log $r1;

        <org.springframework.beans.factory.xml.BeansDtdResolver: java.lang.String DTD_EXTENSION> = ".dtd";

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "spring-beans-2.0";

        $r0[1] = "spring-beans";

        <org.springframework.beans.factory.xml.BeansDtdResolver: java.lang.String[] DTD_NAMES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/beans/factory/xml/BeansDtdResolver;");

        <org.springframework.beans.factory.xml.BeansDtdResolver: org.apache.commons.logging.Log logger> = $r1;

        return;
    }

    public void <init>()
    {
        org.springframework.beans.factory.xml.BeansDtdResolver r0;

        r0 := @this: org.springframework.beans.factory.xml.BeansDtdResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String) throws java.io.IOException
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r13, $r15, $r16, $r17, $r19, $r21, $r22, $r24, $r26, $r27, $r28, $r29, $r33, $r35, $r36;
        org.springframework.beans.factory.xml.BeansDtdResolver r7;
        org.springframework.core.io.ClassPathResource $r6;
        java.lang.String[] $r2;
        int $i0, i1, $i2, i3;
        java.lang.String r1, r3, $r4, r11, $r18, $r23, $r30, $r37;
        org.xml.sax.InputSource $r9;
        java.io.IOException $r31;
        org.apache.commons.logging.Log $r0, $r5, $r12, $r14, $r20, $r25, $r32, $r34;
        java.lang.Class $r8;
        java.io.InputStream $r10;

        r7 := @this: org.springframework.beans.factory.xml.BeansDtdResolver;

        r11 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = <org.springframework.beans.factory.xml.BeansDtdResolver: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r25 = <org.springframework.beans.factory.xml.BeansDtdResolver: org.apache.commons.logging.Log logger>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Trying to resolve XML entity with public ID [");

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] and system ID [");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r30);

     label1:
        if r1 == null goto label8;

        $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".dtd");

        if $z1 == 0 goto label8;

        $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $r2 = <org.springframework.beans.factory.xml.BeansDtdResolver: java.lang.String[] DTD_NAMES>;

        i1 = lengthof $r2;

        i3 = 0;

        goto label7;

     label2:
        r3 = $r2[i3];

        $i2 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(r3);

        if $i2 <= $i0 goto label6;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);

        $r5 = <org.springframework.beans.factory.xml.BeansDtdResolver: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z2 == 0 goto label3;

        $r20 = <org.springframework.beans.factory.xml.BeansDtdResolver: org.apache.commons.logging.Log logger>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Trying to locate [");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] in Spring jar");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r23);

     label3:
        $r6 = new org.springframework.core.io.ClassPathResource;

        $r8 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r6.<org.springframework.core.io.ClassPathResource: void <init>(java.lang.String,java.lang.Class)>($r4, $r8);

        $r9 = new org.xml.sax.InputSource;

        $r10 = interfaceinvoke $r6.<org.springframework.core.io.Resource: java.io.InputStream getInputStream()>();

        specialinvoke $r9.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r10);

        virtualinvoke $r9.<org.xml.sax.InputSource: void setPublicId(java.lang.String)>(r11);

        virtualinvoke $r9.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>(r1);

        $r12 = <org.springframework.beans.factory.xml.BeansDtdResolver: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r12.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label4;

        $r14 = <org.springframework.beans.factory.xml.BeansDtdResolver: org.apache.commons.logging.Log logger>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found beans DTD [");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] in classpath: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r18);

     label4:
        return $r9;

     label5:
        $r31 := @caughtexception;

        $r32 = <org.springframework.beans.factory.xml.BeansDtdResolver: org.apache.commons.logging.Log logger>;

        $z4 = interfaceinvoke $r32.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z4 == 0 goto label6;

        $r34 = <org.springframework.beans.factory.xml.BeansDtdResolver: org.apache.commons.logging.Log logger>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not resolve beans DTD [");

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: not found in class path");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r34.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r37, $r31);

     label6:
        i3 = i3 + 1;

     label7:
        if i3 < i1 goto label2;

     label8:
        return null;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public java.lang.String toString()
    {
        org.springframework.beans.factory.xml.BeansDtdResolver r5;
        java.lang.StringBuilder $r0, $r3;
        java.lang.String[] $r1;
        java.lang.String $r2, $r4;

        r5 := @this: org.springframework.beans.factory.xml.BeansDtdResolver;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("EntityResolver for DTDs ");

        $r1 = <org.springframework.beans.factory.xml.BeansDtdResolver: java.lang.String[] DTD_NAMES>;

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r1);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
}
