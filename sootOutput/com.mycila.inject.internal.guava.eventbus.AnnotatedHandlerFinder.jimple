class com.mycila.inject.internal.guava.eventbus.AnnotatedHandlerFinder extends java.lang.Object implements com.mycila.inject.internal.guava.eventbus.HandlerFindingStrategy
{

    void <init>()
    {
        com.mycila.inject.internal.guava.eventbus.AnnotatedHandlerFinder r0;

        r0 := @this: com.mycila.inject.internal.guava.eventbus.AnnotatedHandlerFinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.mycila.inject.internal.guava.collect.Multimap findAllHandlers(java.lang.Object)
    {
        com.mycila.inject.internal.guava.eventbus.Subscribe r5;
        java.lang.reflect.Method[] $r2;
        int i0, $i1, $i2, i3;
        java.lang.String $r17;
        java.lang.reflect.Method r3;
        java.lang.Class[] $r6;
        java.lang.IllegalArgumentException $r9;
        com.mycila.inject.internal.guava.eventbus.AnnotatedHandlerFinder r18;
        com.mycila.inject.internal.guava.eventbus.EventHandler $r8;
        com.mycila.inject.internal.guava.collect.HashMultimap $r0;
        java.lang.'annotation'.Annotation $r4;
        java.lang.Object r1;
        java.lang.Class r7, r19;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, $r16;

        r18 := @this: com.mycila.inject.internal.guava.eventbus.AnnotatedHandlerFinder;

        r1 := @parameter0: java.lang.Object;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.HashMultimap: com.mycila.inject.internal.guava.collect.HashMultimap create()>();

        r19 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        if r19 == null goto label6;

        $r2 = virtualinvoke r19.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r2;

        i3 = 0;

     label2:
        if i3 >= i0 goto label5;

        r3 = $r2[i3];

        $r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/mycila/inject/internal/guava/eventbus/Subscribe;");

        r5 = (com.mycila.inject.internal.guava.eventbus.Subscribe) $r4;

        if r5 == null goto label4;

        $r6 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r6;

        if $i1 == 1 goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has @Subscribe annotation, but requires ");

        $i2 = lengthof $r6;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arguments.  Event handler methods ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must require a single argument.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r9;

     label3:
        r7 = $r6[0];

        $r8 = staticinvoke <com.mycila.inject.internal.guava.eventbus.AnnotatedHandlerFinder: com.mycila.inject.internal.guava.eventbus.EventHandler makeHandler(java.lang.Object,java.lang.reflect.Method)>(r1, r3);

        interfaceinvoke $r0.<com.mycila.inject.internal.guava.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>(r7, $r8);

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        r19 = virtualinvoke r19.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label6:
        return $r0;
    }

    private static com.mycila.inject.internal.guava.eventbus.EventHandler makeHandler(java.lang.Object, java.lang.reflect.Method)
    {
        com.mycila.inject.internal.guava.eventbus.SynchronizedEventHandler $r1;
        com.mycila.inject.internal.guava.eventbus.EventHandler $r3, r4;
        java.lang.Object r2;
        java.lang.reflect.Method r0;
        boolean $z0;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.reflect.Method;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.eventbus.AnnotatedHandlerFinder: boolean methodIsDeclaredThreadSafe(java.lang.reflect.Method)>(r0);

        if $z0 == 0 goto label1;

        $r3 = new com.mycila.inject.internal.guava.eventbus.EventHandler;

        specialinvoke $r3.<com.mycila.inject.internal.guava.eventbus.EventHandler: void <init>(java.lang.Object,java.lang.reflect.Method)>(r2, r0);

        r4 = $r3;

        goto label2;

     label1:
        $r1 = new com.mycila.inject.internal.guava.eventbus.SynchronizedEventHandler;

        specialinvoke $r1.<com.mycila.inject.internal.guava.eventbus.SynchronizedEventHandler: void <init>(java.lang.Object,java.lang.reflect.Method)>(r2, r0);

        r4 = $r1;

     label2:
        return r4;
    }

    private static boolean methodIsDeclaredThreadSafe(java.lang.reflect.Method)
    {
        java.lang.'annotation'.Annotation $r1;
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/mycila/inject/internal/guava/eventbus/AllowConcurrentEvents;");

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
