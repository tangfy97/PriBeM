class com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper extends com.hp.hpl.jena.sparql.engine.iterator.QueryIter
{
    private com.hp.hpl.jena.graph.Node s;
    private com.hp.hpl.jena.graph.Node p;
    private com.hp.hpl.jena.graph.Node o;
    private com.hp.hpl.jena.sparql.engine.binding.Binding binding;
    private com.hp.hpl.jena.util.iterator.ClosableIterator graphIter;
    private com.hp.hpl.jena.sparql.engine.binding.Binding slot;
    private boolean finished;
    private volatile boolean cancelled;

    void <init>(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r1;
        com.hp.hpl.jena.graph.Graph $r16;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper r0;
        com.hp.hpl.jena.graph.Triple r2;
        com.hp.hpl.jena.sparql.engine.binding.Binding r4;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r17;

        r0 := @this: com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper;

        r4 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.graph.Triple;

        r1 := @parameter2: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIter: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1);

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.sparql.engine.binding.Binding slot> = null;

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: boolean finished> = 0;

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: boolean cancelled> = 0;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r3, r4);

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node s> = $r5;

        $r6 = virtualinvoke r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r6, r4);

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node p> = $r7;

        $r8 = virtualinvoke r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r8, r4);

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node o> = $r9;

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.sparql.engine.binding.Binding binding> = r4;

        $r10 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node s>;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node tripleNode(com.hp.hpl.jena.graph.Node)>($r10);

        $r12 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node p>;

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node tripleNode(com.hp.hpl.jena.graph.Node)>($r12);

        $r14 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node o>;

        $r15 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node tripleNode(com.hp.hpl.jena.graph.Node)>($r14);

        $r16 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        $r17 = interfaceinvoke $r16.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r11, $r13, $r15);

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.util.iterator.ClosableIterator graphIter> = $r17;

        return;
    }

    private static com.hp.hpl.jena.graph.Node tripleNode(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label1;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        return $r1;

     label1:
        return r0;
    }

    private static com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.graph.Node r0, $r3;
        com.hp.hpl.jena.sparql.core.Var $r2;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r0);

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>($r2);

        if $r3 == null goto label1;

        return $r3;

     label1:
        return r0;
    }

    private com.hp.hpl.jena.sparql.engine.binding.Binding mapper(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper r0;
        com.hp.hpl.jena.graph.Node $r4, $r5, $r6, $r7, $r8, $r9;
        com.hp.hpl.jena.graph.Triple r3;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r1;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create(com.hp.hpl.jena.sparql.engine.binding.Binding)>($r1);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node s>;

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: boolean insert(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.BindingMap)>($r4, $r5, $r2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r6 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node p>;

        $r7 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: boolean insert(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.BindingMap)>($r6, $r7, $r2);

        if $z1 != 0 goto label2;

        return null;

     label2:
        $r8 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.graph.Node o>;

        $r9 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: boolean insert(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.BindingMap)>($r8, $r9, $r2);

        if $z2 != 0 goto label3;

        return null;

     label3:
        return $r2;
    }

    private static boolean insert(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.binding.BindingMap)
    {
        com.hp.hpl.jena.sparql.engine.binding.BindingMap r2;
        com.hp.hpl.jena.graph.Node r0, $r3, r4;
        com.hp.hpl.jena.sparql.core.Var $r1;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.sparql.engine.binding.BindingMap;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r0);

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>($r1);

        if $r3 == null goto label2;

        $z1 = virtualinvoke r4.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r3);

        return $z1;

     label2:
        interfaceinvoke r2.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r1, r4);

        return 1;
    }

    protected boolean hasNextBinding()
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper r0;
        com.hp.hpl.jena.util.iterator.ClosableIterator $r2, $r6, $r10;
        com.hp.hpl.jena.graph.Triple r8;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r1, $r3, $r4, $r5, $r9;
        java.lang.Object $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper;

        $z0 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: boolean finished>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.sparql.engine.binding.Binding slot>;

        if $r1 == null goto label2;

        return 1;

     label2:
        $z1 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: boolean cancelled>;

        if $z1 == 0 goto label3;

        $r10 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.util.iterator.ClosableIterator graphIter>;

        interfaceinvoke $r10.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: boolean finished> = 1;

        return 0;

     label3:
        $r2 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.util.iterator.ClosableIterator graphIter>;

        $z2 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r5 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.sparql.engine.binding.Binding slot>;

        if $r5 != null goto label4;

        $r6 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.util.iterator.ClosableIterator graphIter>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ClosableIterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        $r9 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.sparql.engine.binding.Binding mapper(com.hp.hpl.jena.graph.Triple)>(r8);

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.sparql.engine.binding.Binding slot> = $r9;

        goto label3;

     label4:
        $r3 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.sparql.engine.binding.Binding slot>;

        if $r3 != null goto label5;

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: boolean finished> = 1;

     label5:
        $r4 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.sparql.engine.binding.Binding slot>;

        if $r4 == null goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        return $z3;
    }

    protected com.hp.hpl.jena.sparql.engine.binding.Binding moveToNextBinding()
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r2;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: boolean hasNextBinding()>();

        if $z0 != 0 goto label1;

        $r2 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>()>();

        throw $r2;

     label1:
        r1 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.sparql.engine.binding.Binding slot>;

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.sparql.engine.binding.Binding slot> = null;

        return r1;
    }

    protected void closeIterator()
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper r0;
        com.hp.hpl.jena.util.iterator.ClosableIterator $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.util.iterator.ClosableIterator graphIter>;

        if $r1 == null goto label1;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.util.iterator.ClosableIterator graphIter>;

        staticinvoke <com.hp.hpl.jena.util.iterator.NiceIterator: void close(java.util.Iterator)>($r2);

     label1:
        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: com.hp.hpl.jena.util.iterator.ClosableIterator graphIter> = null;

        return;
    }

    protected void requestCancel()
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper;

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern$TripleMapper: boolean cancelled> = 1;

        return;
    }
}
