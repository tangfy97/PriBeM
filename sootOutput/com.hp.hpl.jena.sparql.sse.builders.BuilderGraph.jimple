public class com.hp.hpl.jena.sparql.sse.builders.BuilderGraph extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.sse.builders.BuilderGraph r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderGraph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.graph.Graph buildGraph(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.Item r1;
        com.hp.hpl.jena.graph.Graph $r0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.graph.Graph createDefaultGraph()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: void buildGraph(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.sse.Item)>($r0, r1);

        return $r0;
    }

    public static com.hp.hpl.jena.graph.Graph buildGraph(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r1;
        com.hp.hpl.jena.graph.Graph $r0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.graph.Graph createDefaultGraph()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.graph.Graph buildGraph(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.sse.ItemList)>($r0, r1);

        return $r0;
    }

    public static void buildGraph(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r2, $r3;
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 == 0 goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>(r0, "Attempt to build graph from a plain node");

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z1 == 0 goto label2;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>(r0, "Attempt to build graph from a bare symbol");

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isTagged(java.lang.String)>("graph");

        if $z2 == 0 goto label3;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.graph.Graph buildGraph(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.sse.ItemList)>(r1, $r3);

        return;

     label3:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isTagged(java.lang.String)>("graph@");

        if $z3 == 0 goto label4;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: void loadGraph(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.sse.ItemList)>(r1, $r2);

        return;

     label4:
        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>(r0, "Wanted (graph...) or (graph@...)");

        return;
    }

    public static com.hp.hpl.jena.graph.Graph buildGraph(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r3, r7;
        java.util.Iterator $r8;
        com.hp.hpl.jena.sparql.sse.Item r2, $r5, $r6;
        com.hp.hpl.jena.graph.Triple $r4;
        java.lang.Object $r1;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r7 := @parameter1: com.hp.hpl.jena.sparql.sse.ItemList;

        $z0 = virtualinvoke r7.<com.hp.hpl.jena.sparql.sse.ItemList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r7.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $z1 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z1 == 0 goto label1;

        $r6 = virtualinvoke r7.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $z2 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol(java.lang.String)>("graph");

        if $z2 == 0 goto label1;

        r7 = virtualinvoke r7.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

     label1:
        $r8 = virtualinvoke r7.<com.hp.hpl.jena.sparql.sse.ItemList: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r1 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.hp.hpl.jena.sparql.sse.Item) $r1;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkList(com.hp.hpl.jena.sparql.sse.Item)>(r2);

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.graph.Triple buildTriple(com.hp.hpl.jena.sparql.sse.ItemList)>($r3);

        interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r4);

        goto label2;

     label3:
        return r0;
    }

    public static com.hp.hpl.jena.sparql.core.DatasetGraph buildDataset(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.Item r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r0, $r2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphFactory: com.hp.hpl.jena.sparql.core.DatasetGraph createMem()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.sparql.core.DatasetGraph buildDataset(com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.sse.Item)>($r0, r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.core.DatasetGraph buildDataset(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraph $r0, $r2;
        com.hp.hpl.jena.sparql.sse.ItemList r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphFactory: com.hp.hpl.jena.sparql.core.DatasetGraph createMem()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.sparql.core.DatasetGraph buildDataset(com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.sse.ItemList)>($r0, r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.core.DatasetGraph buildDataset(com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r2, $r4;
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1, $r3, $r6;
        com.hp.hpl.jena.graph.Graph $r5;
        boolean $z0, $z1, $z2, $z3;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r0 := @parameter1: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 == 0 goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>(r0, "Attempt to build dataset from a plain node");

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z1 == 0 goto label2;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>(r0, "Attempt to build dataset from a bare symbol");

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isTagged(java.lang.String)>("graph");

        if $z2 == 0 goto label3;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.graph.Graph buildGraph(com.hp.hpl.jena.sparql.sse.ItemList)>($r4);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphFactory: com.hp.hpl.jena.sparql.core.DatasetGraph create(com.hp.hpl.jena.graph.Graph)>($r5);

        return $r6;

     label3:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isTagged(java.lang.String)>("dataset");

        if $z3 != 0 goto label4;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>(r0, "Wanted (dataset...)");

     label4:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.sparql.core.DatasetGraph buildDataset(com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.sse.ItemList)>(r1, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.core.DatasetGraph buildDataset(com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.graph.Node r14;
        com.hp.hpl.jena.graph.Graph $r7, $r8, $r9, $r10, r16;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.sse.ItemList $r0, $r5, $r6, r13, r15;
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.sse.Item r4, $r11, $r12;
        com.hp.hpl.jena.sparql.core.DatasetGraph r2;
        java.lang.Object $r3;

        r2 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r13 := @parameter1: com.hp.hpl.jena.sparql.sse.ItemList;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkTag(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(r13, "dataset");

        $r0 = virtualinvoke r13.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

        $r1 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.ItemList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.sse.Item) $r3;

        $z1 = virtualinvoke r4.<com.hp.hpl.jena.sparql.sse.Item: boolean isTagged(java.lang.String)>("graph");

        if $z1 != 0 goto label2;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>(r4, "Expected (graph ...) as elements of a dataset");

     label2:
        r14 = null;

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

        r15 = $r6;

        $z2 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.sse.ItemList: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $r11 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item car()>();

        $z3 = virtualinvoke $r11.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z3 == 0 goto label3;

        $r12 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item car()>();

        r14 = virtualinvoke $r12.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        r15 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

     label3:
        if r14 != null goto label4;

        $r9 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        r16 = $r9;

        if $r9 != null goto label5;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.graph.Graph createDefaultGraph()>();

        r16 = $r10;

        interfaceinvoke r2.<com.hp.hpl.jena.sparql.core.DatasetGraph: void setDefaultGraph(com.hp.hpl.jena.graph.Graph)>($r10);

        goto label5;

     label4:
        $r7 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>(r14);

        r16 = $r7;

        if $r7 != null goto label5;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.graph.Graph createDefaultGraph()>();

        r16 = $r8;

        interfaceinvoke r2.<com.hp.hpl.jena.sparql.core.DatasetGraph: void addGraph(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Graph)>(r14, $r8);

     label5:
        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.graph.Graph buildGraph(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.sse.ItemList)>(r16, r15);

        goto label1;

     label6:
        return r2;
    }

    private static void loadGraph(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        com.hp.hpl.jena.sparql.sse.Item $r1;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.rdf.model.Model $r5;
        com.hp.hpl.jena.util.FileManager $r6;
        java.lang.String $r3;
        com.hp.hpl.jena.graph.Graph r4;
        boolean $z0;

        r4 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: com.hp.hpl.jena.sparql.sse.ItemList;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkLength(int,com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(2, r0, "graph@");

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 != 0 goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>($r1, "Expected: (graph@ \'filename\')");

     label1:
        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: java.lang.String stringLiteral(com.hp.hpl.jena.graph.Node)>($r2);

        if $r3 != null goto label2;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>($r1, "Expected: (graph@ \'filename\')");

     label2:
        $r5 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createModelForGraph(com.hp.hpl.jena.graph.Graph)>(r4);

        $r6 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager get()>();

        virtualinvoke $r6.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model readModel(com.hp.hpl.jena.rdf.model.Model,java.lang.String)>($r5, $r3);

        return;
    }

    public static com.hp.hpl.jena.graph.Triple buildTriple(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r1;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.sparql.sse.Item $r0;
        boolean $z0;
        com.hp.hpl.jena.graph.Triple $r2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        $i0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i0 == 3 goto label1;

        $i1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i1 == 4 goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemLocation,java.lang.String,com.hp.hpl.jena.sparql.sse.ItemList)>(r1, "Not a triple", r1);

     label1:
        $i2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i2 != 4 goto label3;

        $r0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $z0 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol(java.lang.String)>("triple");

        if $z0 != 0 goto label2;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(r1, "Not a triple");

     label2:
        r1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

     label3:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.graph.Triple _buildNode3(com.hp.hpl.jena.sparql.sse.ItemList)>(r1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Triple buildNode3(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        com.hp.hpl.jena.graph.Triple $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkLength(int,com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(3, r0, null);

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.graph.Triple _buildNode3(com.hp.hpl.jena.sparql.sse.ItemList)>(r0);

        return $r1;
    }

    private static com.hp.hpl.jena.graph.Triple _buildNode3(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        com.hp.hpl.jena.sparql.sse.Item $r1, $r3, $r5;
        com.hp.hpl.jena.graph.Node $r2, $r4, $r6;
        com.hp.hpl.jena.graph.Triple $r7;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: com.hp.hpl.jena.graph.Node buildNode(com.hp.hpl.jena.sparql.sse.Item)>($r1);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: com.hp.hpl.jena.graph.Node buildNode(com.hp.hpl.jena.sparql.sse.Item)>($r3);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(2);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: com.hp.hpl.jena.graph.Node buildNode(com.hp.hpl.jena.sparql.sse.Item)>($r5);

        $r7 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r7.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r4, $r6);

        return $r7;
    }

    public static com.hp.hpl.jena.sparql.core.Quad buildQuad(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r1;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.sparql.sse.Item $r0;
        boolean $z0;
        com.hp.hpl.jena.sparql.core.Quad $r2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        $i0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i0 == 4 goto label1;

        $i1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i1 == 5 goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(r1, "Not a quad");

     label1:
        $i2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i2 != 5 goto label3;

        $r0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $z0 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol(java.lang.String)>("quad");

        if $z0 != 0 goto label2;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(r1, "Not a quad");

     label2:
        r1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

     label3:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.sparql.core.Quad _buildNode4(com.hp.hpl.jena.sparql.sse.ItemList)>(r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.core.Quad buildNode4(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        com.hp.hpl.jena.sparql.core.Quad $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkLength(int,com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(4, r0, null);

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.sparql.core.Quad _buildNode4(com.hp.hpl.jena.sparql.sse.ItemList)>(r0);

        return $r1;
    }

    private static com.hp.hpl.jena.sparql.core.Quad _buildNode4(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        com.hp.hpl.jena.sparql.sse.Item $r1, $r2, $r3, $r4, $r6, $r8;
        com.hp.hpl.jena.graph.Node $r5, $r7, $r9, r11;
        com.hp.hpl.jena.sparql.core.Quad $r10;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $r2 = <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item defaultItem>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        r11 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        r11 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: com.hp.hpl.jena.graph.Node buildNode(com.hp.hpl.jena.sparql.sse.Item)>($r3);

     label2:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: com.hp.hpl.jena.graph.Node buildNode(com.hp.hpl.jena.sparql.sse.Item)>($r4);

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(2);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: com.hp.hpl.jena.graph.Node buildNode(com.hp.hpl.jena.sparql.sse.Item)>($r6);

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(3);

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: com.hp.hpl.jena.graph.Node buildNode(com.hp.hpl.jena.sparql.sse.Item)>($r8);

        $r10 = new com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r11, $r5, $r7, $r9);

        return $r10;
    }
}
