class org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer extends org.jdesktop.swingx.JXTree implements javax.swing.table.TableCellRenderer
{
    private java.beans.PropertyChangeListener rolloverListener;
    protected javax.swing.border.Border highlightBorder;
    protected org.jdesktop.swingx.JXTreeTable treeTable;
    protected int visibleRow;
    private int hierarchicalColumnWidth;
    static final boolean $assertionsDisabled;

    public void <init>(org.jdesktop.swingx.treetable.TreeTableModel)
    {
        org.jdesktop.swingx.treetable.TreeTableModel r1;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$ClippedTreeCellRenderer $r2;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        r1 := @parameter0: org.jdesktop.swingx.treetable.TreeTableModel;

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void <init>(javax.swing.tree.TreeModel)>(r1);

        r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.border.Border highlightBorder> = null;

        r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable> = null;

        r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: int visibleRow> = 0;

        r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: int hierarchicalColumnWidth> = 0;

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void putClientProperty(java.lang.Object,java.lang.Object)>("JTree.lineStyle", "None");

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setRootVisible(boolean)>(0);

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setShowsRootHandles(boolean)>(1);

        $r2 = new org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$ClippedTreeCellRenderer;

        specialinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$ClippedTreeCellRenderer: void <init>(org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer,org.jdesktop.swingx.JXTreeTable$1)>(r0, null);

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setCellRenderer(javax.swing.tree.TreeCellRenderer)>($r2);

        return;
    }

    public boolean isVisible()
    {
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean shouldApplyDropHack()>();

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = specialinvoke r0.<org.jdesktop.swingx.JXTree: boolean isVisible()>();

     label2:
        return $z1;
    }

    protected boolean shouldApplyDropHack()
    {
        java.lang.Boolean $r2;
        java.lang.Object $r3;
        org.jdesktop.swingx.JXTreeTable $r1;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        $r2 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $r3 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable: java.lang.Object getClientProperty(java.lang.Object)>("treeTable.dropHackFlag");

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private java.lang.String getToolTipText(java.awt.event.MouseEvent, int, int)
    {
        javax.swing.tree.TreeModel $r4;
        java.awt.Point $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.swing.tree.TreePath $r2;
        java.awt.Component $r5;
        javax.swing.tree.TreeCellRenderer $r1;
        java.awt.Rectangle $r7, $r9;
        long $l9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13;
        java.lang.String $r6, r14;
        javax.swing.JComponent $r13;
        org.jdesktop.swingx.JXTreeTable $r8;
        java.awt.event.MouseEvent r10, $r12;
        java.lang.Object $r3;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        r10 := @parameter0: java.awt.event.MouseEvent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 >= 0 goto label1;

        return null;

     label1:
        r14 = null;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreeCellRenderer getCellRenderer()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreePath getPathForRow(int)>(i0);

        $r3 = virtualinvoke $r2.<javax.swing.tree.TreePath: java.lang.Object getLastPathComponent()>();

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean isRowSelected(int)>(i0);

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean isExpanded(int)>(i0);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreeModel getModel()>();

        $z2 = interfaceinvoke $r4.<javax.swing.tree.TreeModel: boolean isLeaf(java.lang.Object)>($r3);

        $r5 = interfaceinvoke $r1.<javax.swing.tree.TreeCellRenderer: java.awt.Component getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)>(r0, $r3, $z0, $z1, $z2, i0, 1);

        $z3 = $r5 instanceof javax.swing.JComponent;

        if $z3 == 0 goto label2;

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: java.awt.Rectangle getPathBounds(javax.swing.tree.TreePath)>($r2);

        $r8 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $r9 = virtualinvoke $r8.<org.jdesktop.swingx.JXTreeTable: java.awt.Rectangle getCellRect(int,int,boolean)>(i0, i1, 0);

        $r11 = virtualinvoke r10.<java.awt.event.MouseEvent: java.awt.Point getPoint()>();

        $i2 = $r9.<java.awt.Rectangle: int x>;

        $i5 = neg $i2;

        $i3 = $r9.<java.awt.Rectangle: int y>;

        $i4 = neg $i3;

        virtualinvoke $r11.<java.awt.Point: void translate(int,int)>($i5, $i4);

        $i6 = $r7.<java.awt.Rectangle: int x>;

        $i7 = neg $i6;

        virtualinvoke $r11.<java.awt.Point: void translate(int,int)>($i7, 0);

        $r12 = new java.awt.event.MouseEvent;

        $i8 = virtualinvoke r10.<java.awt.event.MouseEvent: int getID()>();

        $l9 = virtualinvoke r10.<java.awt.event.MouseEvent: long getWhen()>();

        $i10 = virtualinvoke r10.<java.awt.event.MouseEvent: int getModifiers()>();

        $i11 = $r11.<java.awt.Point: int x>;

        $i12 = $r11.<java.awt.Point: int y>;

        $i13 = virtualinvoke r10.<java.awt.event.MouseEvent: int getClickCount()>();

        $z4 = virtualinvoke r10.<java.awt.event.MouseEvent: boolean isPopupTrigger()>();

        specialinvoke $r12.<java.awt.event.MouseEvent: void <init>(java.awt.Component,int,long,int,int,int,int,boolean)>($r5, $i8, $l9, $i10, $i11, $i12, $i13, $z4);

        $r13 = (javax.swing.JComponent) $r5;

        r14 = virtualinvoke $r13.<javax.swing.JComponent: java.lang.String getToolTipText(java.awt.event.MouseEvent)>($r12);

     label2:
        if r14 == null goto label3;

        return r14;

     label3:
        $r6 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: java.lang.String getToolTipText()>();

        return $r6;
    }

    public void setToolTipText(java.lang.String)
    {
        java.lang.String r1;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void putClientProperty(java.lang.Object,java.lang.Object)>("ToolTipText", r1);

        return;
    }

    public final void bind(org.jdesktop.swingx.JXTreeTable)
    {
        java.lang.IllegalArgumentException $r3, $r4;
        org.jdesktop.swingx.JXTreeTable r0, $r2;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r1;

        r1 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        r0 := @parameter0: org.jdesktop.swingx.JXTreeTable;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null treeTable");

        throw $r4;

     label1:
        $r2 = r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        if $r2 != null goto label2;

        r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable> = r0;

        goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("renderer already bound");

        throw $r3;

     label3:
        return;
    }

    private void bindRollover()
    {
        java.beans.PropertyChangeListener $r3;
        org.jdesktop.swingx.JXTreeTable $r1, $r2;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $z0 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable: boolean isRolloverEnabled()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setRolloverEnabled(boolean)>($z0);

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $r3 = specialinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: java.beans.PropertyChangeListener getRolloverListener()>();

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable: void addPropertyChangeListener(java.beans.PropertyChangeListener)>($r3);

        return;
    }

    private java.beans.PropertyChangeListener getRolloverListener()
    {
        java.beans.PropertyChangeListener $r1, $r2, $r3;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: java.beans.PropertyChangeListener rolloverListener>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: java.beans.PropertyChangeListener createRolloverListener()>();

        r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: java.beans.PropertyChangeListener rolloverListener> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: java.beans.PropertyChangeListener rolloverListener>;

        return $r2;
    }

    protected java.beans.PropertyChangeListener createRolloverListener()
    {
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$1 $r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r1;

        r1 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        $r0 = new org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$1;

        specialinvoke $r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$1: void <init>(org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer)>(r1);

        return $r0;
    }

    protected org.jdesktop.swingx.rollover.RolloverProducer createRolloverProducer()
    {
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$2 $r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r1;

        r1 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        $r0 = new org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$2;

        specialinvoke $r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$2: void <init>(org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer)>(r1);

        return $r0;
    }

    public void scrollRectToVisible(java.awt.Rectangle)
    {
        java.awt.Rectangle r1;
        org.jdesktop.swingx.JXTreeTable $r2;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        r1 := @parameter0: java.awt.Rectangle;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable: void scrollRectToVisible(java.awt.Rectangle)>(r1);

        return;
    }

    protected void setExpandedState(javax.swing.tree.TreePath, boolean)
    {
        javax.swing.tree.TreePath r1;
        org.jdesktop.swingx.JXTreeTable $r2, $r4;
        org.jdesktop.swingx.JXTreeTable$TreeTableHacker $r3, $r5;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;
        boolean $z0, z1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        r1 := @parameter0: javax.swing.tree.TreePath;

        z1 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean isExpanded(javax.swing.tree.TreePath)>(r1);

        if $z0 != z1 goto label1;

        return;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $r3 = virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableHacker getTreeTableHacker()>();

        virtualinvoke $r3.<org.jdesktop.swingx.JXTreeTable$TreeTableHacker: void completeEditing()>();

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void setExpandedState(javax.swing.tree.TreePath,boolean)>(r1, z1);

        $r4 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $r5 = virtualinvoke $r4.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableHacker getTreeTableHacker()>();

        virtualinvoke $r5.<org.jdesktop.swingx.JXTreeTable$TreeTableHacker: void expansionChanged()>();

        return;
    }

    public void updateUI()
    {
        java.awt.Color $r3, $r4;
        javax.swing.tree.TreeCellRenderer $r1;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;
        boolean $z0;
        javax.swing.tree.DefaultTreeCellRenderer r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void updateUI()>();

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreeCellRenderer getCellRenderer()>();

        $z0 = $r1 instanceof javax.swing.tree.DefaultTreeCellRenderer;

        if $z0 == 0 goto label1;

        r2 = (javax.swing.tree.DefaultTreeCellRenderer) $r1;

        virtualinvoke r2.<javax.swing.tree.DefaultTreeCellRenderer: void setBorderSelectionColor(java.awt.Color)>(null);

        $r3 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("Table.selectionForeground");

        virtualinvoke r2.<javax.swing.tree.DefaultTreeCellRenderer: void setTextSelectionColor(java.awt.Color)>($r3);

        $r4 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("Table.selectionBackground");

        virtualinvoke r2.<javax.swing.tree.DefaultTreeCellRenderer: void setBackgroundSelectionColor(java.awt.Color)>($r4);

     label1:
        return;
    }

    public void setRowHeight(int)
    {
        int i0;
        org.jdesktop.swingx.JXTreeTable $r1, $r2;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        i0 := @parameter0: int;

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void setRowHeight(int)>(i0);

        if i0 <= 0 goto label1;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable: void adjustTableRowHeight(int)>(i0);

     label1:
        return;
    }

    public void setBounds(int, int, int, int)
    {
        javax.swing.table.TableColumn $r5;
        org.jdesktop.swingx.JXTreeTable $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        i3 := @parameter0: int;

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        i6 := @parameter3: int;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $i0 = virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable: int getRowCount()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: int getRowHeight()>();

        i6 = $i0 * $i1;

        $r3 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $i2 = virtualinvoke $r3.<org.jdesktop.swingx.JXTreeTable: int getHierarchicalColumn()>();

        if $i2 < 0 goto label1;

        $r4 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $r5 = virtualinvoke $r4.<org.jdesktop.swingx.JXTreeTable: javax.swing.table.TableColumn getColumn(int)>($i2);

        i5 = virtualinvoke $r5.<javax.swing.table.TableColumn: int getWidth()>();

     label1:
        specialinvoke r0.<org.jdesktop.swingx.JXTree: void setBounds(int,int,int,int)>(0, 0, i5, i6);

        return;
    }

    public void paint(java.awt.Graphics)
    {
        java.awt.Rectangle $r2;
        org.jdesktop.swingx.JXTreeTable $r1;
        javax.swing.border.Border $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.awt.Graphics r3;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        r3 := @parameter0: java.awt.Graphics;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $i0 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: int visibleRow>;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable: java.awt.Rectangle getCellRect(int,int,boolean)>($i0, 0, 0);

        $i1 = $r2.<java.awt.Rectangle: int y>;

        $i2 = neg $i1;

        virtualinvoke r3.<java.awt.Graphics: void translate(int,int)>(0, $i2);

        $i3 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: int getWidth()>();

        r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: int hierarchicalColumnWidth> = $i3;

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void paint(java.awt.Graphics)>(r3);

        $r4 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.border.Border highlightBorder>;

        if $r4 == null goto label1;

        $r5 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.border.Border highlightBorder>;

        $i4 = $r2.<java.awt.Rectangle: int y>;

        $i5 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: int getWidth()>();

        $i6 = $r2.<java.awt.Rectangle: int height>;

        interfaceinvoke $r5.<javax.swing.border.Border: void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)>(r0, r3, 0, $i4, $i5, $i6);

     label1:
        return;
    }

    public void doClick()
    {
        javax.swing.tree.TreeCellRenderer $r1, $r2, $r4;
        org.jdesktop.swingx.rollover.RolloverRenderer $r3, $r5;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreeCellRenderer getCellRenderer()>();

        $z0 = $r1 instanceof org.jdesktop.swingx.rollover.RolloverRenderer;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreeCellRenderer getCellRenderer()>();

        $r3 = (org.jdesktop.swingx.rollover.RolloverRenderer) $r2;

        $z1 = interfaceinvoke $r3.<org.jdesktop.swingx.rollover.RolloverRenderer: boolean isEnabled()>();

        if $z1 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreeCellRenderer getCellRenderer()>();

        $r5 = (org.jdesktop.swingx.rollover.RolloverRenderer) $r4;

        interfaceinvoke $r5.<org.jdesktop.swingx.rollover.RolloverRenderer: void doClick()>();

     label1:
        return;
    }

    public boolean isRowSelected(int)
    {
        org.jdesktop.swingx.JXTreeTable $r1, $r2, $r3, $r4;
        int $i0, i1, $i2;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        i1 := @parameter0: int;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $i0 = virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable: int getHierarchicalColumn()>();

        if $i0 >= 0 goto label2;

     label1:
        return 0;

     label2:
        $r4 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $r3 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $i2 = virtualinvoke $r3.<org.jdesktop.swingx.JXTreeTable: int getHierarchicalColumn()>();

        $z0 = virtualinvoke $r4.<org.jdesktop.swingx.JXTreeTable: boolean isCellSelected(int,int)>(i1, $i2);

        return $z0;
    }

    public java.awt.Component getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int)
    {
        java.awt.Color $r2, $r3, $r8, $r9;
        java.lang.AssertionError $r11;
        javax.swing.border.Border $r6;
        int i0, $i1, $i2, i3;
        boolean $z0, z1, z2;
        org.jdesktop.swingx.JXTreeTable $r4, $r5, $r7, $r10;
        javax.swing.JTable r1;
        java.lang.Object r12;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        r1 := @parameter0: javax.swing.JTable;

        r12 := @parameter1: java.lang.Object;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        i0 := @parameter4: int;

        i3 := @parameter5: int;

        $z0 = <org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r10 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        if r1 == $r10 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        if z1 == 0 goto label2;

        $r8 = virtualinvoke r1.<javax.swing.JTable: java.awt.Color getSelectionBackground()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setBackground(java.awt.Color)>($r8);

        $r9 = virtualinvoke r1.<javax.swing.JTable: java.awt.Color getSelectionForeground()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setForeground(java.awt.Color)>($r9);

        goto label3;

     label2:
        $r2 = virtualinvoke r1.<javax.swing.JTable: java.awt.Color getBackground()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setBackground(java.awt.Color)>($r2);

        $r3 = virtualinvoke r1.<javax.swing.JTable: java.awt.Color getForeground()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setForeground(java.awt.Color)>($r3);

     label3:
        r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.border.Border highlightBorder> = null;

        $r4 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        if $r4 == null goto label5;

        $r5 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $i1 = staticinvoke <org.jdesktop.swingx.JXTreeTable: int access$1000(org.jdesktop.swingx.JXTreeTable)>($r5);

        if $i1 != i0 goto label4;

        $r7 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: org.jdesktop.swingx.JXTreeTable treeTable>;

        $i2 = virtualinvoke $r7.<org.jdesktop.swingx.JXTreeTable: int getEditingColumn()>();

        if $i2 != i3 goto label4;

        goto label5;

     label4:
        if z2 == 0 goto label5;

        $r6 = staticinvoke <javax.swing.UIManager: javax.swing.border.Border getBorder(java.lang.Object)>("Table.focusCellHighlightBorder");

        r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.border.Border highlightBorder> = $r6;

     label5:
        r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: int visibleRow> = i0;

        return r0;
    }

    static java.lang.String access$300(org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer, java.awt.event.MouseEvent, int, int)
    {
        int i0, i1;
        java.lang.String $r2;
        java.awt.event.MouseEvent r1;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;

        r0 := @parameter0: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        r1 := @parameter1: java.awt.event.MouseEvent;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = specialinvoke r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: java.lang.String getToolTipText(java.awt.event.MouseEvent,int,int)>(r1, i0, i1);

        return $r2;
    }

    static int access$1100(org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer)
    {
        int $i0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r0;

        r0 := @parameter0: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        $i0 = r0.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: int hierarchicalColumnWidth>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/jdesktop/swingx/JXTreeTable;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
