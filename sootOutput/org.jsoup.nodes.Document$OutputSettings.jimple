public class org.jsoup.nodes.Document$OutputSettings extends java.lang.Object implements java.lang.Cloneable
{
    private org.jsoup.nodes.Entities$EscapeMode escapeMode;
    private java.nio.charset.Charset charset;
    private java.nio.charset.CharsetEncoder charsetEncoder;
    private boolean prettyPrint;
    private boolean outline;
    private int indentAmount;

    public void <init>()
    {
        java.nio.charset.Charset $r2, $r3;
        org.jsoup.nodes.Document$OutputSettings r0;
        java.nio.charset.CharsetEncoder $r4;
        org.jsoup.nodes.Entities$EscapeMode $r1;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.jsoup.nodes.Entities$EscapeMode: org.jsoup.nodes.Entities$EscapeMode base>;

        r0.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Entities$EscapeMode escapeMode> = $r1;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        r0.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.Charset charset> = $r2;

        $r3 = r0.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.Charset charset>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        r0.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.CharsetEncoder charsetEncoder> = $r4;

        r0.<org.jsoup.nodes.Document$OutputSettings: boolean prettyPrint> = 1;

        r0.<org.jsoup.nodes.Document$OutputSettings: boolean outline> = 0;

        r0.<org.jsoup.nodes.Document$OutputSettings: int indentAmount> = 1;

        return;
    }

    public org.jsoup.nodes.Entities$EscapeMode escapeMode()
    {
        org.jsoup.nodes.Entities$EscapeMode $r1;
        org.jsoup.nodes.Document$OutputSettings r0;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        $r1 = r0.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Entities$EscapeMode escapeMode>;

        return $r1;
    }

    public org.jsoup.nodes.Document$OutputSettings escapeMode(org.jsoup.nodes.Entities$EscapeMode)
    {
        org.jsoup.nodes.Entities$EscapeMode r1;
        org.jsoup.nodes.Document$OutputSettings r0;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        r1 := @parameter0: org.jsoup.nodes.Entities$EscapeMode;

        r0.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Entities$EscapeMode escapeMode> = r1;

        return r0;
    }

    public java.nio.charset.Charset charset()
    {
        java.nio.charset.Charset $r1;
        org.jsoup.nodes.Document$OutputSettings r0;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        $r1 = r0.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.Charset charset>;

        return $r1;
    }

    public org.jsoup.nodes.Document$OutputSettings charset(java.nio.charset.Charset)
    {
        java.nio.charset.Charset r1;
        org.jsoup.nodes.Document$OutputSettings r0;
        java.nio.charset.CharsetEncoder $r2;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        r1 := @parameter0: java.nio.charset.Charset;

        r0.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.Charset charset> = r1;

        $r2 = virtualinvoke r1.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        r0.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.CharsetEncoder charsetEncoder> = $r2;

        return r0;
    }

    public org.jsoup.nodes.Document$OutputSettings charset(java.lang.String)
    {
        java.lang.String r1;
        java.nio.charset.Charset $r2;
        org.jsoup.nodes.Document$OutputSettings r0;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r1);

        virtualinvoke r0.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Document$OutputSettings charset(java.nio.charset.Charset)>($r2);

        return r0;
    }

    java.nio.charset.CharsetEncoder encoder()
    {
        org.jsoup.nodes.Document$OutputSettings r0;
        java.nio.charset.CharsetEncoder $r1;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        $r1 = r0.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.CharsetEncoder charsetEncoder>;

        return $r1;
    }

    public boolean prettyPrint()
    {
        org.jsoup.nodes.Document$OutputSettings r0;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        $z0 = r0.<org.jsoup.nodes.Document$OutputSettings: boolean prettyPrint>;

        return $z0;
    }

    public org.jsoup.nodes.Document$OutputSettings prettyPrint(boolean)
    {
        org.jsoup.nodes.Document$OutputSettings r0;
        boolean z0;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        z0 := @parameter0: boolean;

        r0.<org.jsoup.nodes.Document$OutputSettings: boolean prettyPrint> = z0;

        return r0;
    }

    public boolean outline()
    {
        org.jsoup.nodes.Document$OutputSettings r0;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        $z0 = r0.<org.jsoup.nodes.Document$OutputSettings: boolean outline>;

        return $z0;
    }

    public org.jsoup.nodes.Document$OutputSettings outline(boolean)
    {
        org.jsoup.nodes.Document$OutputSettings r0;
        boolean z0;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        z0 := @parameter0: boolean;

        r0.<org.jsoup.nodes.Document$OutputSettings: boolean outline> = z0;

        return r0;
    }

    public int indentAmount()
    {
        int $i0;
        org.jsoup.nodes.Document$OutputSettings r0;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        $i0 = r0.<org.jsoup.nodes.Document$OutputSettings: int indentAmount>;

        return $i0;
    }

    public org.jsoup.nodes.Document$OutputSettings indentAmount(int)
    {
        int i0;
        org.jsoup.nodes.Document$OutputSettings r0;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($z0);

        r0.<org.jsoup.nodes.Document$OutputSettings: int indentAmount> = i0;

        return r0;
    }

    public org.jsoup.nodes.Document$OutputSettings clone()
    {
        org.jsoup.nodes.Entities$EscapeMode $r5, $r7;
        java.lang.RuntimeException $r9;
        java.lang.CloneNotSupportedException $r8;
        java.nio.charset.Charset $r3;
        org.jsoup.nodes.Document$OutputSettings r0, r2;
        java.lang.Object $r1;
        java.lang.String $r4, $r6;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.jsoup.nodes.Document$OutputSettings) $r1;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label4:
        $r3 = r0.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.Charset charset>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        virtualinvoke r2.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Document$OutputSettings charset(java.lang.String)>($r4);

        $r5 = r0.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Entities$EscapeMode escapeMode>;

        $r6 = virtualinvoke $r5.<org.jsoup.nodes.Entities$EscapeMode: java.lang.String name()>();

        $r7 = staticinvoke <org.jsoup.nodes.Entities$EscapeMode: org.jsoup.nodes.Entities$EscapeMode valueOf(java.lang.String)>($r6);

        r2.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Entities$EscapeMode escapeMode> = $r7;

        return r2;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jsoup.nodes.Document$OutputSettings r0, $r1;

        r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Document$OutputSettings clone()>();

        return $r1;
    }
}
