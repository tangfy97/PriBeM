public class com.jidesoft.swing.CheckBoxList extends javax.swing.JList
{
    protected com.jidesoft.swing.CheckBoxListCellRenderer _listCellRenderer;
    public static final java.lang.String PROPERTY_CHECKBOX_ENABLED;
    public static final java.lang.String PROPERTY_CLICK_IN_CHECKBOX_ONLY;
    private boolean _checkBoxEnabled;
    private boolean _clickInCheckBoxOnly;
    private com.jidesoft.swing.CheckBoxListSelectionModel _checkBoxListSelectionModel;
    protected com.jidesoft.swing.CheckBoxList$Handler _handler;
    public static final java.lang.String ALL;
    public static final java.lang.Object ALL_ENTRY;

    public void <init>()
    {
        com.jidesoft.swing.CheckBoxList r0;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        specialinvoke r0.<javax.swing.JList: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxList: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxList: boolean _clickInCheckBoxOnly> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void init()>();

        return;
    }

    public void <init>(java.util.Vector)
    {
        com.jidesoft.swing.CheckBoxList r0;
        java.util.Vector r1;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        r1 := @parameter0: java.util.Vector;

        specialinvoke r0.<javax.swing.JList: void <init>(java.util.Vector)>(r1);

        r0.<com.jidesoft.swing.CheckBoxList: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxList: boolean _clickInCheckBoxOnly> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void init()>();

        return;
    }

    public void <init>(java.lang.Object[])
    {
        com.jidesoft.swing.CheckBoxList r0;
        java.lang.Object[] r1;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        r1 := @parameter0: java.lang.Object[];

        specialinvoke r0.<javax.swing.JList: void <init>(java.lang.Object[])>(r1);

        r0.<com.jidesoft.swing.CheckBoxList: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxList: boolean _clickInCheckBoxOnly> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void init()>();

        return;
    }

    public void <init>(javax.swing.ListModel)
    {
        com.jidesoft.swing.CheckBoxList r0;
        javax.swing.ListModel r1;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        r1 := @parameter0: javax.swing.ListModel;

        specialinvoke r0.<javax.swing.JList: void <init>(javax.swing.ListModel)>(r1);

        r0.<com.jidesoft.swing.CheckBoxList: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxList: boolean _clickInCheckBoxOnly> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void init()>();

        return;
    }

    public void setModel(javax.swing.ListModel)
    {
        com.jidesoft.swing.CheckBoxList r0;
        com.jidesoft.swing.CheckBoxListSelectionModel $r2, $r3;
        javax.swing.ListModel r1;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        r1 := @parameter0: javax.swing.ListModel;

        specialinvoke r0.<javax.swing.JList: void setModel(javax.swing.ListModel)>(r1);

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()>();

        virtualinvoke $r3.<com.jidesoft.swing.CheckBoxListSelectionModel: void clearSelection()>();

     label1:
        return;
    }

    public void updateUI()
    {
        com.jidesoft.swing.CheckBoxList r0;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        specialinvoke r0.<javax.swing.JList: void updateUI()>();

        return;
    }

    protected void init()
    {
        com.jidesoft.swing.CheckBoxList r0;
        com.jidesoft.swing.CheckBoxListSelectionModel $r2, $r6;
        com.jidesoft.swing.CheckBoxListCellRenderer $r3;
        com.jidesoft.swing.CheckBoxList$Handler $r4, $r5, $r7, $r8, $r9, $r11;
        javax.swing.ListModel $r1, $r10;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel createCheckBoxListSelectionModel(javax.swing.ListModel)>($r1);

        r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel _checkBoxListSelectionModel> = $r2;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void setSelectionMode(int)>(2);

        $r3 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListCellRenderer createCellRenderer()>();

        r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListCellRenderer _listCellRenderer> = $r3;

        $r4 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxList$Handler createHandler()>();

        r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxList$Handler _handler> = $r4;

        $r6 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel _checkBoxListSelectionModel>;

        $r5 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxList$Handler _handler>;

        virtualinvoke $r6.<com.jidesoft.swing.CheckBoxListSelectionModel: void addListSelectionListener(javax.swing.event.ListSelectionListener)>($r5);

        $r7 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxList$Handler _handler>;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void insertMouseListener(java.awt.Component,java.awt.event.MouseListener,int)>(r0, $r7, 0);

        $r8 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxList$Handler _handler>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void addKeyListener(java.awt.event.KeyListener)>($r8);

        $r9 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxList$Handler _handler>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>("model", $r9);

        $r10 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        if $r10 == null goto label1;

        $r11 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxList$Handler _handler>;

        interfaceinvoke $r10.<javax.swing.ListModel: void addListDataListener(javax.swing.event.ListDataListener)>($r11);

     label1:
        return;
    }

    public int getLastVisibleIndex()
    {
        com.jidesoft.swing.CheckBoxList r0;
        int $i0, $i1, $i2;
        javax.swing.ListModel $r1;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $i0 = specialinvoke r0.<javax.swing.JList: int getLastVisibleIndex()>();

        if $i0 >= 0 goto label1;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $i1 = interfaceinvoke $r1.<javax.swing.ListModel: int getSize()>();

        $i2 = $i1 - 1;

        return $i2;

     label1:
        return $i0;
    }

    protected com.jidesoft.swing.CheckBoxListSelectionModel createCheckBoxListSelectionModel(javax.swing.ListModel)
    {
        com.jidesoft.swing.CheckBoxListSelectionModel $r0;
        com.jidesoft.swing.CheckBoxList r2;
        javax.swing.ListModel r1;

        r2 := @this: com.jidesoft.swing.CheckBoxList;

        r1 := @parameter0: javax.swing.ListModel;

        $r0 = new com.jidesoft.swing.CheckBoxListSelectionModel;

        specialinvoke $r0.<com.jidesoft.swing.CheckBoxListSelectionModel: void <init>(javax.swing.ListModel)>(r1);

        return $r0;
    }

    protected com.jidesoft.swing.CheckBoxListCellRenderer createCellRenderer()
    {
        com.jidesoft.swing.CheckBoxList r1;
        com.jidesoft.swing.CheckBoxListCellRenderer $r0;

        r1 := @this: com.jidesoft.swing.CheckBoxList;

        $r0 = new com.jidesoft.swing.CheckBoxListCellRenderer;

        specialinvoke $r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void <init>()>();

        return $r0;
    }

    protected com.jidesoft.swing.CheckBoxList$Handler createHandler()
    {
        com.jidesoft.swing.CheckBoxList r1;
        com.jidesoft.swing.CheckBoxList$Handler $r0;

        r1 := @this: com.jidesoft.swing.CheckBoxList;

        $r0 = new com.jidesoft.swing.CheckBoxList$Handler;

        specialinvoke $r0.<com.jidesoft.swing.CheckBoxList$Handler: void <init>(com.jidesoft.swing.CheckBoxList)>(r1);

        return $r0;
    }

    public javax.swing.ListCellRenderer getCellRenderer()
    {
        javax.swing.ListCellRenderer $r2, $r4;
        com.jidesoft.swing.CheckBoxList r0;
        com.jidesoft.swing.CheckBoxListCellRenderer $r1, $r3, $r5;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $r1 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListCellRenderer _listCellRenderer>;

        if $r1 == null goto label1;

        $r3 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListCellRenderer _listCellRenderer>;

        $r4 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListCellRenderer getActualCellRenderer()>();

        virtualinvoke $r3.<com.jidesoft.swing.CheckBoxListCellRenderer: void setActualListRenderer(javax.swing.ListCellRenderer)>($r4);

        $r5 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListCellRenderer _listCellRenderer>;

        return $r5;

     label1:
        $r2 = specialinvoke r0.<javax.swing.JList: javax.swing.ListCellRenderer getCellRenderer()>();

        return $r2;
    }

    public javax.swing.ListCellRenderer getActualCellRenderer()
    {
        javax.swing.ListCellRenderer $r1;
        com.jidesoft.swing.CheckBoxList r0;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $r1 = specialinvoke r0.<javax.swing.JList: javax.swing.ListCellRenderer getCellRenderer()>();

        return $r1;
    }

    public int getNextMatch(java.lang.String, int, javax.swing.text.Position$Bias)
    {
        com.jidesoft.swing.CheckBoxList r0;
        javax.swing.text.Position$Bias r2;
        int i0, $i2;
        java.lang.String r1;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: javax.swing.text.Position$Bias;

        $i2 = (int) -1;

        return $i2;
    }

    public boolean isCheckBoxEnabled(int)
    {
        int i0;
        com.jidesoft.swing.CheckBoxList r0;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        i0 := @parameter0: int;

        return 1;
    }

    public boolean isCheckBoxVisible(int)
    {
        int i0;
        com.jidesoft.swing.CheckBoxList r0;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        i0 := @parameter0: int;

        return 1;
    }

    public boolean isCheckBoxEnabled()
    {
        com.jidesoft.swing.CheckBoxList r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $z0 = r0.<com.jidesoft.swing.CheckBoxList: boolean _checkBoxEnabled>;

        return $z0;
    }

    public void setCheckBoxEnabled(boolean)
    {
        com.jidesoft.swing.CheckBoxList r0;
        boolean z0, $z1, z2, $z3;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.jidesoft.swing.CheckBoxList: boolean _checkBoxEnabled>;

        if z0 == $z1 goto label1;

        z2 = r0.<com.jidesoft.swing.CheckBoxList: boolean _checkBoxEnabled>;

        r0.<com.jidesoft.swing.CheckBoxList: boolean _checkBoxEnabled> = z0;

        $z3 = r0.<com.jidesoft.swing.CheckBoxList: boolean _checkBoxEnabled>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void firePropertyChange(java.lang.String,boolean,boolean)>("checkBoxEnabled", z2, $z3);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void repaint()>();

     label1:
        return;
    }

    public boolean isClickInCheckBoxOnly()
    {
        com.jidesoft.swing.CheckBoxList r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $z0 = r0.<com.jidesoft.swing.CheckBoxList: boolean _clickInCheckBoxOnly>;

        return $z0;
    }

    public void setClickInCheckBoxOnly(boolean)
    {
        com.jidesoft.swing.CheckBoxList r0;
        boolean z0, $z1, z2, $z3;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.jidesoft.swing.CheckBoxList: boolean _clickInCheckBoxOnly>;

        if z0 == $z1 goto label1;

        z2 = r0.<com.jidesoft.swing.CheckBoxList: boolean _clickInCheckBoxOnly>;

        r0.<com.jidesoft.swing.CheckBoxList: boolean _clickInCheckBoxOnly> = z0;

        $z3 = r0.<com.jidesoft.swing.CheckBoxList: boolean _clickInCheckBoxOnly>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void firePropertyChange(java.lang.String,boolean,boolean)>("clickInCheckBoxOnly", z2, $z3);

     label1:
        return;
    }

    public com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()
    {
        com.jidesoft.swing.CheckBoxListSelectionModel $r1;
        com.jidesoft.swing.CheckBoxList r0;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $r1 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel _checkBoxListSelectionModel>;

        return $r1;
    }

    public void setCheckBoxListSelectionModel(com.jidesoft.swing.CheckBoxListSelectionModel)
    {
        com.jidesoft.swing.CheckBoxList r0;
        com.jidesoft.swing.CheckBoxListSelectionModel r1, $r2, $r3, $r4, $r5, $r8;
        javax.swing.ListModel $r6, $r7;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        r1 := @parameter0: com.jidesoft.swing.CheckBoxListSelectionModel;

        $r2 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel _checkBoxListSelectionModel>;

        if $r2 == r1 goto label2;

        $r3 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel _checkBoxListSelectionModel>;

        if $r3 == null goto label1;

        $r7 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $r8 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel _checkBoxListSelectionModel>;

        interfaceinvoke $r7.<javax.swing.ListModel: void removeListDataListener(javax.swing.event.ListDataListener)>($r8);

     label1:
        r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel _checkBoxListSelectionModel> = r1;

        $r4 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel _checkBoxListSelectionModel>;

        if $r4 == null goto label2;

        $r5 = r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel _checkBoxListSelectionModel>;

        $r6 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        virtualinvoke $r5.<com.jidesoft.swing.CheckBoxListSelectionModel: void setModel(javax.swing.ListModel)>($r6);

     label2:
        return;
    }

    public int[] getCheckBoxListSelectedIndices()
    {
        com.jidesoft.swing.CheckBoxList r0;
        com.jidesoft.swing.CheckBoxListSelectionModel $r1;
        int[] $r2, r3, r4;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()>();

        $i0 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxListSelectionModel: int getMinSelectionIndex()>();

        $i1 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxListSelectionModel: int getMaxSelectionIndex()>();

        if $i0 < 0 goto label1;

        if $i1 >= 0 goto label2;

     label1:
        $r2 = newarray (int)[0];

        return $r2;

     label2:
        $i2 = $i1 - $i0;

        $i3 = 1 + $i2;

        r3 = newarray (int)[$i3];

        i5 = 0;

        i6 = $i0;

     label3:
        if i6 > $i1 goto label6;

        $z0 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxListSelectionModel: boolean isAllEntryConsidered()>();

        if $z0 == 0 goto label4;

        $i4 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxListSelectionModel: int getAllEntryIndex()>();

        if i6 != $i4 goto label4;

        goto label5;

     label4:
        $z1 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxListSelectionModel: boolean isSelectedIndex(int)>(i6);

        if $z1 == 0 goto label5;

        r3[i5] = i6;

        i5 = i5 + 1;

     label5:
        i6 = i6 + 1;

        goto label3;

     label6:
        r4 = newarray (int)[i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, 0, i5);

        return r4;
    }

    public void setCheckBoxListSelectedIndex(int)
    {
        com.jidesoft.swing.CheckBoxList r0;
        int i0, $i1;
        com.jidesoft.swing.CheckBoxListSelectionModel $r2;
        javax.swing.ListModel $r1;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $i1 = interfaceinvoke $r1.<javax.swing.ListModel: int getSize()>();

        if i0 >= $i1 goto label1;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()>();

        virtualinvoke $r2.<com.jidesoft.swing.CheckBoxListSelectionModel: void setSelectionInterval(int,int)>(i0, i0);

     label1:
        return;
    }

    public void addCheckBoxListSelectedIndex(int)
    {
        com.jidesoft.swing.CheckBoxList r0;
        int i0, $i1;
        com.jidesoft.swing.CheckBoxListSelectionModel $r2;
        javax.swing.ListModel $r1;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $i1 = interfaceinvoke $r1.<javax.swing.ListModel: int getSize()>();

        if i0 >= $i1 goto label1;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()>();

        virtualinvoke $r2.<com.jidesoft.swing.CheckBoxListSelectionModel: void addSelectionInterval(int,int)>(i0, i0);

     label1:
        return;
    }

    public void removeCheckBoxListSelectedIndex(int)
    {
        com.jidesoft.swing.CheckBoxList r0;
        int i0, $i1;
        com.jidesoft.swing.CheckBoxListSelectionModel $r2;
        javax.swing.ListModel $r1;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $i1 = interfaceinvoke $r1.<javax.swing.ListModel: int getSize()>();

        if i0 >= $i1 goto label1;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()>();

        virtualinvoke $r2.<com.jidesoft.swing.CheckBoxListSelectionModel: void removeSelectionInterval(int,int)>(i0, i0);

     label1:
        return;
    }

    public void setCheckBoxListSelectedIndices(int[])
    {
        java.lang.Throwable $r4;
        com.jidesoft.swing.CheckBoxList r0;
        com.jidesoft.swing.CheckBoxListSelectionModel $r1;
        int[] r3;
        int $i0, i1, i2, i3;
        javax.swing.ListModel $r2;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        r3 := @parameter0: int[];

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()>();

     label1:
        interfaceinvoke $r1.<javax.swing.ListSelectionModel: void setValueIsAdjusting(boolean)>(1);

        interfaceinvoke $r1.<javax.swing.ListSelectionModel: void clearSelection()>();

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $i0 = interfaceinvoke $r2.<javax.swing.ListModel: int getSize()>();

        i1 = lengthof r3;

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        i2 = r3[i3];

        if i2 < 0 goto label3;

        if i2 >= $i0 goto label3;

        interfaceinvoke $r1.<javax.swing.ListSelectionModel: void addSelectionInterval(int,int)>(i2, i2);

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        interfaceinvoke $r1.<javax.swing.ListSelectionModel: void setValueIsAdjusting(boolean)>(0);

        goto label7;

     label5:
        $r4 := @caughtexception;

     label6:
        interfaceinvoke $r1.<javax.swing.ListSelectionModel: void setValueIsAdjusting(boolean)>(0);

        throw $r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setSelectedObjects(java.lang.Object[])
    {
        com.jidesoft.swing.CheckBoxList r2;
        java.lang.Object[] r1;
        int i0, i1;
        java.util.HashMap $r0;
        java.lang.Object r3;

        r2 := @this: com.jidesoft.swing.CheckBoxList;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r1[i1];

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, "");

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r2.<com.jidesoft.swing.CheckBoxList: void setSelectedObjects(java.util.Map)>($r0);

        return;
    }

    public void setSelectedObjects(java.util.Vector)
    {
        com.jidesoft.swing.CheckBoxList r3;
        java.util.Vector r1;
        java.util.Iterator $r2;
        java.util.HashMap $r0;
        java.lang.Object $r4;
        boolean $z0;

        r3 := @this: com.jidesoft.swing.CheckBoxList;

        r1 := @parameter0: java.util.Vector;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r1.<java.util.Vector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "");

        goto label1;

     label2:
        specialinvoke r3.<com.jidesoft.swing.CheckBoxList: void setSelectedObjects(java.util.Map)>($r0);

        return;
    }

    private void setSelectedObjects(java.util.Map)
    {
        java.lang.Integer r4, $r9;
        java.util.ArrayList $r0;
        int[] r10;
        java.util.Map r7;
        int $i0, $i1, $i2, $i3, i4, i5;
        com.jidesoft.swing.CheckBoxList r1;
        java.lang.Object $r3, $r6, $r8;
        javax.swing.ListModel $r2, $r5;

        r1 := @this: com.jidesoft.swing.CheckBoxList;

        r7 := @parameter0: java.util.Map;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i4 = 0;

     label1:
        $r2 = virtualinvoke r1.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $i0 = interfaceinvoke $r2.<javax.swing.ListModel: int getSize()>();

        if i4 >= $i0 goto label3;

        $r5 = virtualinvoke r1.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $r6 = interfaceinvoke $r5.<javax.swing.ListModel: java.lang.Object getElementAt(int)>(i4);

        $r8 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        if $r8 == null goto label2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        r10 = newarray (int)[$i1];

        i5 = 0;

     label4:
        $i2 = interfaceinvoke $r0.<java.util.List: int size()>();

        if i5 >= $i2 goto label5;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i5);

        r4 = (java.lang.Integer) $r3;

        $i3 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        r10[i5] = $i3;

        i5 = i5 + 1;

        goto label4;

     label5:
        virtualinvoke r1.<com.jidesoft.swing.CheckBoxList: void setCheckBoxListSelectedIndices(int[])>(r10);

        return;
    }

    public java.lang.Object[] getCheckBoxListSelectedValues()
    {
        java.lang.Object[] $r3, r4, r6;
        com.jidesoft.swing.CheckBoxListSelectionModel $r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        boolean $z0, $z1;
        com.jidesoft.swing.CheckBoxList r0;
        java.lang.Object $r5;
        javax.swing.ListModel $r2;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()>();

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $i0 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxListSelectionModel: int getMinSelectionIndex()>();

        $i1 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxListSelectionModel: int getMaxSelectionIndex()>();

        if $i0 < 0 goto label1;

        if $i1 >= 0 goto label2;

     label1:
        $r3 = newarray (java.lang.Object)[0];

        return $r3;

     label2:
        $i2 = $i1 - $i0;

        $i3 = 1 + $i2;

        r4 = newarray (java.lang.Object)[$i3];

        i5 = 0;

        i6 = $i0;

     label3:
        if i6 > $i1 goto label6;

        $z0 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxListSelectionModel: boolean isAllEntryConsidered()>();

        if $z0 == 0 goto label4;

        $i4 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxListSelectionModel: int getAllEntryIndex()>();

        if i6 != $i4 goto label4;

        goto label5;

     label4:
        $z1 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxListSelectionModel: boolean isSelectedIndex(int)>(i6);

        if $z1 == 0 goto label5;

        $r5 = interfaceinvoke $r2.<javax.swing.ListModel: java.lang.Object getElementAt(int)>(i6);

        r4[i5] = $r5;

        i5 = i5 + 1;

     label5:
        i6 = i6 + 1;

        goto label3;

     label6:
        r6 = newarray (java.lang.Object)[i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r6, 0, i5);

        return r6;
    }

    public int getCheckBoxListSelectedIndex()
    {
        int $i0;
        com.jidesoft.swing.CheckBoxListSelectionModel $r1;
        com.jidesoft.swing.CheckBoxList r0;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()>();

        $i0 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxListSelectionModel: int getMinSelectionIndex()>();

        return $i0;
    }

    public java.lang.Object getCheckBoxListSelectedValue()
    {
        com.jidesoft.swing.CheckBoxList r0;
        int $i0, $i2;
        com.jidesoft.swing.CheckBoxListSelectionModel $r1;
        java.lang.Object $r3;
        javax.swing.ListModel $r2;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()>();

        $i0 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxListSelectionModel: int getMinSelectionIndex()>();

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $r3 = interfaceinvoke $r2.<javax.swing.ListModel: java.lang.Object getElementAt(int)>($i0);

     label2:
        return $r3;
    }

    public void setCheckBoxListSelectedValue(java.lang.Object, boolean)
    {
        com.jidesoft.swing.CheckBoxList r1;
        int $i0, i1, $i3, $i5;
        java.lang.Object r0, $r3;
        javax.swing.ListModel $r2;
        boolean $z0, z1;

        r1 := @this: com.jidesoft.swing.CheckBoxList;

        r0 := @parameter0: java.lang.Object;

        z1 := @parameter1: boolean;

        if r0 != null goto label1;

        $i3 = (int) -1;

        virtualinvoke r1.<com.jidesoft.swing.CheckBoxList: void setSelectedIndex(int)>($i3);

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        i1 = 0;

        $i0 = interfaceinvoke $r2.<javax.swing.ListModel: int getSize()>();

     label2:
        if i1 >= $i0 goto label5;

        $r3 = interfaceinvoke $r2.<javax.swing.ListModel: java.lang.Object getElementAt(int)>(i1);

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label4;

        virtualinvoke r1.<com.jidesoft.swing.CheckBoxList: void setCheckBoxListSelectedIndex(int)>(i1);

        if z1 == 0 goto label3;

        virtualinvoke r1.<com.jidesoft.swing.CheckBoxList: void ensureIndexIsVisible(int)>(i1);

     label3:
        virtualinvoke r1.<com.jidesoft.swing.CheckBoxList: void repaint()>();

        return;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        $i5 = (int) -1;

        virtualinvoke r1.<com.jidesoft.swing.CheckBoxList: void setCheckBoxListSelectedIndex(int)>($i5);

     label6:
        virtualinvoke r1.<com.jidesoft.swing.CheckBoxList: void repaint()>();

        return;
    }

    public void addCheckBoxListSelectedValue(java.lang.Object, boolean)
    {
        com.jidesoft.swing.CheckBoxList r0;
        int $i0, $i1, i2, i3;
        java.lang.Object r2, $r3, $r4;
        javax.swing.ListModel $r1;
        boolean z0, $z1;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        r2 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        if r2 == null goto label4;

        i2 = 0;

        $i1 = interfaceinvoke $r1.<javax.swing.ListModel: int getSize()>();

     label1:
        if i2 >= $i1 goto label8;

        $r4 = interfaceinvoke $r1.<javax.swing.ListModel: java.lang.Object getElementAt(int)>(i2);

        $z1 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void addCheckBoxListSelectedIndex(int)>(i2);

        if z0 == 0 goto label2;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void ensureIndexIsVisible(int)>(i2);

     label2:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void repaint()>();

        return;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        i3 = 0;

        $i0 = interfaceinvoke $r1.<javax.swing.ListModel: int getSize()>();

     label5:
        if i3 >= $i0 goto label8;

        $r3 = interfaceinvoke $r1.<javax.swing.ListModel: java.lang.Object getElementAt(int)>(i3);

        if $r3 != null goto label7;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void addCheckBoxListSelectedIndex(int)>(i3);

        if z0 == 0 goto label6;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void ensureIndexIsVisible(int)>(i3);

     label6:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: void repaint()>();

        return;

     label7:
        i3 = i3 + 1;

        goto label5;

     label8:
        return;
    }

    public void addCheckBoxListSelectedValues(java.lang.Object[])
    {
        com.jidesoft.swing.CheckBoxList r2;
        java.lang.Object[] r0;
        java.util.HashMap $r1;
        int $i0, i1, i2, i3;
        java.lang.Object $r4, $r5, r6;
        javax.swing.ListModel $r3;
        boolean z0;

        r2 := @this: com.jidesoft.swing.CheckBoxList;

        r0 := @parameter0: java.lang.Object[];

        if r0 == null goto label7;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        i1 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r6 = r0[i2];

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, "");

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r2.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        z0 = 0;

        i3 = 0;

        $i0 = interfaceinvoke $r3.<javax.swing.ListModel: int getSize()>();

     label3:
        if i3 >= $i0 goto label5;

        $r4 = interfaceinvoke $r3.<javax.swing.ListModel: java.lang.Object getElementAt(int)>(i3);

        $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        if $r5 == null goto label4;

        virtualinvoke r2.<com.jidesoft.swing.CheckBoxList: void addCheckBoxListSelectedIndex(int)>(i3);

        z0 = 1;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        if z0 == 0 goto label6;

        virtualinvoke r2.<com.jidesoft.swing.CheckBoxList: void repaint()>();

     label6:
        interfaceinvoke $r1.<java.util.Map: void clear()>();

     label7:
        return;
    }

    public void removeCheckBoxListSelectedValues(java.lang.Object[])
    {
        com.jidesoft.swing.CheckBoxList r2;
        java.lang.Object[] r0;
        java.util.HashMap $r1;
        int $i0, i1, i2, i3;
        java.lang.Object $r4, $r5, r6;
        javax.swing.ListModel $r3;
        boolean z0;

        r2 := @this: com.jidesoft.swing.CheckBoxList;

        r0 := @parameter0: java.lang.Object[];

        if r0 == null goto label7;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        i1 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r6 = r0[i2];

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, "");

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r2.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        z0 = 0;

        i3 = 0;

        $i0 = interfaceinvoke $r3.<javax.swing.ListModel: int getSize()>();

     label3:
        if i3 >= $i0 goto label5;

        $r4 = interfaceinvoke $r3.<javax.swing.ListModel: java.lang.Object getElementAt(int)>(i3);

        $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        if $r5 == null goto label4;

        virtualinvoke r2.<com.jidesoft.swing.CheckBoxList: void removeCheckBoxListSelectedIndex(int)>(i3);

        z0 = 1;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        if z0 == 0 goto label6;

        virtualinvoke r2.<com.jidesoft.swing.CheckBoxList: void repaint()>();

     label6:
        interfaceinvoke $r1.<java.util.Map: void clear()>();

     label7:
        return;
    }

    public void removeCheckBoxListSelectedValue(java.lang.Object, boolean)
    {
        com.jidesoft.swing.CheckBoxList r1;
        int $i0, i1;
        java.lang.Object r0, $r3;
        javax.swing.ListModel $r2;
        boolean $z0, z1;

        r1 := @this: com.jidesoft.swing.CheckBoxList;

        r0 := @parameter0: java.lang.Object;

        z1 := @parameter1: boolean;

        if r0 == null goto label4;

        $r2 = virtualinvoke r1.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        i1 = 0;

        $i0 = interfaceinvoke $r2.<javax.swing.ListModel: int getSize()>();

     label1:
        if i1 >= $i0 goto label4;

        $r3 = interfaceinvoke $r2.<javax.swing.ListModel: java.lang.Object getElementAt(int)>(i1);

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        virtualinvoke r1.<com.jidesoft.swing.CheckBoxList: void removeCheckBoxListSelectedIndex(int)>(i1);

        if z1 == 0 goto label2;

        virtualinvoke r1.<com.jidesoft.swing.CheckBoxList: void ensureIndexIsVisible(int)>(i1);

     label2:
        virtualinvoke r1.<com.jidesoft.swing.CheckBoxList: void repaint()>();

        return;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public void clearCheckBoxListSelection()
    {
        com.jidesoft.swing.CheckBoxListSelectionModel $r1;
        com.jidesoft.swing.CheckBoxList r0;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()>();

        virtualinvoke $r1.<com.jidesoft.swing.CheckBoxListSelectionModel: void clearSelection()>();

        return;
    }

    public void selectAll()
    {
        com.jidesoft.swing.CheckBoxList r0;
        int $i0, $i1, $i2;
        com.jidesoft.swing.CheckBoxListSelectionModel $r2;
        javax.swing.ListModel $r1, $r3;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $i0 = interfaceinvoke $r1.<javax.swing.ListModel: int getSize()>();

        if $i0 <= 0 goto label1;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()>();

        $r3 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $i1 = interfaceinvoke $r3.<javax.swing.ListModel: int getSize()>();

        $i2 = $i1 - 1;

        virtualinvoke $r2.<com.jidesoft.swing.CheckBoxListSelectionModel: void setSelectionInterval(int,int)>(0, $i2);

     label1:
        return;
    }

    public void selectNone()
    {
        com.jidesoft.swing.CheckBoxList r0;
        int $i0, $i1, $i2;
        com.jidesoft.swing.CheckBoxListSelectionModel $r2;
        javax.swing.ListModel $r1, $r3;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $i0 = interfaceinvoke $r1.<javax.swing.ListModel: int getSize()>();

        if $i0 <= 0 goto label1;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()>();

        $r3 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxList: javax.swing.ListModel getModel()>();

        $i1 = interfaceinvoke $r3.<javax.swing.ListModel: int getSize()>();

        $i2 = $i1 - 1;

        virtualinvoke $r2.<com.jidesoft.swing.CheckBoxListSelectionModel: void removeIndexInterval(int,int)>(0, $i2);

     label1:
        return;
    }

    public java.awt.Dimension getPreferredScrollableViewportSize()
    {
        com.jidesoft.swing.CheckBoxList r0;
        java.awt.Dimension $r1, $r2;
        int $i0, $i1;

        r0 := @this: com.jidesoft.swing.CheckBoxList;

        $r1 = specialinvoke r0.<javax.swing.JList: java.awt.Dimension getPreferredScrollableViewportSize()>();

        if $r1 == null goto label1;

        $i0 = $r1.<java.awt.Dimension: int width>;

        if $i0 <= 0 goto label1;

        $i1 = $r1.<java.awt.Dimension: int height>;

        if $i1 <= 0 goto label1;

        $r2 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.awt.Dimension adjustPreferredScrollableViewportSize(javax.swing.JList,java.awt.Dimension)>(r0, $r1);

        goto label2;

     label1:
        $r2 = $r1;

     label2:
        return $r2;
    }

    static void <clinit>()
    {
        com.jidesoft.swing.CheckBoxList$AllEntry $r0;

        <com.jidesoft.swing.CheckBoxList: java.lang.String ALL> = "(All)";

        <com.jidesoft.swing.CheckBoxList: java.lang.String PROPERTY_CLICK_IN_CHECKBOX_ONLY> = "clickInCheckBoxOnly";

        <com.jidesoft.swing.CheckBoxList: java.lang.String PROPERTY_CHECKBOX_ENABLED> = "checkBoxEnabled";

        $r0 = new com.jidesoft.swing.CheckBoxList$AllEntry;

        specialinvoke $r0.<com.jidesoft.swing.CheckBoxList$AllEntry: void <init>()>();

        <com.jidesoft.swing.CheckBoxList: java.lang.Object ALL_ENTRY> = $r0;

        return;
    }
}
