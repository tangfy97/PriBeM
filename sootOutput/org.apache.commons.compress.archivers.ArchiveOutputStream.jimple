public abstract class org.apache.commons.compress.archivers.ArchiveOutputStream extends java.io.OutputStream
{
    private final byte[] oneByte;
    static final int BYTE_MASK;
    private long bytesWritten;

    public void <init>()
    {
        org.apache.commons.compress.archivers.ArchiveOutputStream r0;
        byte[] $r1;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveOutputStream;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r1 = newarray (byte)[1];

        r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: byte[] oneByte> = $r1;

        r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: long bytesWritten> = 0L;

        return;
    }

    public abstract void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry) throws java.io.IOException;

    public abstract void closeArchiveEntry() throws java.io.IOException;

    public abstract void finish() throws java.io.IOException;

    public abstract org.apache.commons.compress.archivers.ArchiveEntry createArchiveEntry(java.io.File, java.lang.String) throws java.io.IOException;

    public void write(int) throws java.io.IOException
    {
        byte[] $r1, $r2;
        byte $b2;
        int i0, $i1;
        org.apache.commons.compress.archivers.ArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: byte[] oneByte>;

        $i1 = i0 & 255;

        $b2 = (byte) $i1;

        $r1[0] = $b2;

        $r2 = r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: byte[] oneByte>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: void write(byte[],int,int)>($r2, 0, 1);

        return;
    }

    protected void count(int)
    {
        int i0;
        org.apache.commons.compress.archivers.ArchiveOutputStream r0;
        long $l1;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveOutputStream;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        virtualinvoke r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: void count(long)>($l1);

        return;
    }

    protected void count(long)
    {
        byte $b1;
        org.apache.commons.compress.archivers.ArchiveOutputStream r0;
        long l0, $l2, $l3;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveOutputStream;

        l0 := @parameter0: long;

        $b1 = l0 cmp -1L;

        if $b1 == 0 goto label1;

        $l2 = r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: long bytesWritten>;

        $l3 = $l2 + l0;

        r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: long bytesWritten> = $l3;

     label1:
        return;
    }

    public int getCount()
    {
        int $i1;
        org.apache.commons.compress.archivers.ArchiveOutputStream r0;
        long $l0;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveOutputStream;

        $l0 = r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: long bytesWritten>;

        $i1 = (int) $l0;

        return $i1;
    }

    public long getBytesWritten()
    {
        org.apache.commons.compress.archivers.ArchiveOutputStream r0;
        long $l0;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveOutputStream;

        $l0 = r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: long bytesWritten>;

        return $l0;
    }

    public boolean canWriteEntryData(org.apache.commons.compress.archivers.ArchiveEntry)
    {
        org.apache.commons.compress.archivers.ArchiveOutputStream r0;
        org.apache.commons.compress.archivers.ArchiveEntry r1;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveOutputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.ArchiveEntry;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.archivers.ArchiveOutputStream: int BYTE_MASK> = 255;

        return;
    }
}
