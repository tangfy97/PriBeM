class com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed extends com.hp.hpl.jena.graph.impl.GraphBase
{
    private final com.hp.hpl.jena.graph.Node graphName;
    final com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem this$0;

    void <init>(com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed r0;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem this$0> = r1;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed: com.hp.hpl.jena.graph.Node graphName> = r2;

        return;
    }

    public void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r5;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed r1;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem $r4;
        com.hp.hpl.jena.sparql.core.Quad $r0;
        com.hp.hpl.jena.graph.Triple r2;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = new com.hp.hpl.jena.sparql.core.Quad;

        $r3 = r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed: com.hp.hpl.jena.graph.Node graphName>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Triple)>($r3, r2);

        $r4 = r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem this$0>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet access$100(com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem)>($r4);

        virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: void add(java.lang.Object)>($r0);

        return;
    }

    public void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r5;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed r1;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem $r4;
        com.hp.hpl.jena.sparql.core.Quad $r0;
        com.hp.hpl.jena.graph.Triple r2;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = new com.hp.hpl.jena.sparql.core.Quad;

        $r3 = r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed: com.hp.hpl.jena.graph.Node graphName>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Triple)>($r3, r2);

        $r4 = r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem this$0>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet access$100(com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem)>($r4);

        virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: void remove(java.lang.Object)>($r0);

        return;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.TripleMatch)
    {
        java.util.Iterator $r8, $r9;
        com.hp.hpl.jena.graph.Node $r4, $r5, $r6, $r7;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.core.Quad $r12;
        com.hp.hpl.jena.graph.Triple $r13;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r10;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed r1;
        java.lang.Object $r11;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem $r3;
        com.hp.hpl.jena.graph.TripleMatch r2;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed;

        r2 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem this$0>;

        $r4 = r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed: com.hp.hpl.jena.graph.Node graphName>;

        $r5 = interfaceinvoke r2.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchSubject()>();

        $r6 = interfaceinvoke r2.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchPredicate()>();

        $r7 = interfaceinvoke r2.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchObject()>();

        $r8 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: java.util.Iterator findNG(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r5, $r6, $r7);

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (com.hp.hpl.jena.sparql.core.Quad) $r11;

        $r13 = virtualinvoke $r12.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Triple asTriple()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label1;

     label2:
        $r9 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        $r10 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r9);

        return $r10;
    }
}
