public class org.apache.batik.script.InterpreterPool extends java.lang.Object
{
    public static final java.lang.String BIND_NAME_DOCUMENT;
    protected static java.util.Map defaultFactories;
    protected java.util.Map factories;
    static java.lang.Class class$org$apache$batik$script$InterpreterFactory;

    public void <init>()
    {
        java.util.Map $r2, $r3;
        org.apache.batik.script.InterpreterPool r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.batik.script.InterpreterPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(7);

        r0.<org.apache.batik.script.InterpreterPool: java.util.Map factories> = $r1;

        $r3 = r0.<org.apache.batik.script.InterpreterPool: java.util.Map factories>;

        $r2 = <org.apache.batik.script.InterpreterPool: java.util.Map defaultFactories>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r2);

        return;
    }

    public org.apache.batik.script.Interpreter createInterpreter(org.w3c.dom.Document, java.lang.String)
    {
        java.net.MalformedURLException $r9;
        java.net.URL $r7;
        org.apache.batik.script.Interpreter r10;
        org.apache.batik.script.InterpreterPool r0;
        org.apache.batik.dom.svg.SVGOMDocument r6;
        org.w3c.dom.Document r5;
        java.util.Map $r2;
        org.apache.batik.script.InterpreterFactory r4;
        java.lang.Object $r3;
        java.lang.String r1, $r8;
        boolean $z0;

        r0 := @this: org.apache.batik.script.InterpreterPool;

        r5 := @parameter0: org.w3c.dom.Document;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.batik.script.InterpreterPool: java.util.Map factories>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.batik.script.InterpreterFactory) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        r10 = null;

        r6 = (org.apache.batik.dom.svg.SVGOMDocument) r5;

     label2:
        $r7 = new java.net.URL;

        $r8 = virtualinvoke r6.<org.apache.batik.dom.AbstractDocument: java.lang.String getDocumentURI()>();

        specialinvoke $r7.<java.net.URL: void <init>(java.lang.String)>($r8);

        $z0 = virtualinvoke r6.<org.apache.batik.dom.svg.SVGOMDocument: boolean isSVG12()>();

        r10 = interfaceinvoke r4.<org.apache.batik.script.InterpreterFactory: org.apache.batik.script.Interpreter createInterpreter(java.net.URL,boolean)>($r7, $z0);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

     label5:
        if r10 != null goto label6;

        return null;

     label6:
        if r5 == null goto label7;

        interfaceinvoke r10.<org.apache.batik.script.Interpreter: void bindObject(java.lang.String,java.lang.Object)>("document", r5);

     label7:
        return r10;

        catch java.net.MalformedURLException from label2 to label3 with label4;
    }

    public void putInterpreterFactory(java.lang.String, org.apache.batik.script.InterpreterFactory)
    {
        java.util.Map $r3;
        org.apache.batik.script.InterpreterFactory r2;
        org.apache.batik.script.InterpreterPool r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.script.InterpreterPool;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.batik.script.InterpreterFactory;

        $r3 = r0.<org.apache.batik.script.InterpreterPool: java.util.Map factories>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void removeInterpreterFactory(java.lang.String)
    {
        org.apache.batik.script.InterpreterPool r0;
        java.lang.String r1;
        java.util.Map $r2;

        r0 := @this: org.apache.batik.script.InterpreterPool;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.script.InterpreterPool: java.util.Map factories>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    static void <clinit>()
    {
        java.util.Iterator $r2;
        java.util.HashMap $r0;
        java.lang.String[] $r4;
        java.util.Map $r6;
        int $i0, i1;
        org.apache.batik.script.InterpreterFactory r8;
        java.lang.Class $r1, $r7;
        java.lang.Object $r3;
        java.lang.String $r5;
        boolean $z0;

        <org.apache.batik.script.InterpreterPool: java.lang.String BIND_NAME_DOCUMENT> = "document";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(7);

        <org.apache.batik.script.InterpreterPool: java.util.Map defaultFactories> = $r0;

        $r1 = <org.apache.batik.script.InterpreterPool: java.lang.Class class$org$apache$batik$script$InterpreterFactory>;

        if $r1 != null goto label1;

        $r7 = staticinvoke <org.apache.batik.script.InterpreterPool: java.lang.Class class$(java.lang.String)>("org.apache.batik.script.InterpreterFactory");

        <org.apache.batik.script.InterpreterPool: java.lang.Class class$org$apache$batik$script$InterpreterFactory> = $r7;

        goto label2;

     label1:
        $r7 = <org.apache.batik.script.InterpreterPool: java.lang.Class class$org$apache$batik$script$InterpreterFactory>;

     label2:
        $r2 = staticinvoke <org.apache.batik.util.Service: java.util.Iterator providers(java.lang.Class)>($r7);

        goto label6;

     label3:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.batik.script.InterpreterFactory) $r3;

        $r4 = interfaceinvoke r8.<org.apache.batik.script.InterpreterFactory: java.lang.String[] getMimeTypes()>();

        i1 = 0;

        goto label5;

     label4:
        $r6 = <org.apache.batik.script.InterpreterPool: java.util.Map defaultFactories>;

        $r5 = $r4[i1];

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r8);

        i1 = i1 + 1;

     label5:
        $i0 = lengthof $r4;

        if i1 < $i0 goto label4;

     label6:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        return;
    }
}
