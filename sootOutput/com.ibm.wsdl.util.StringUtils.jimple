public class com.ibm.wsdl.util.StringUtils extends java.lang.Object
{
    public static final java.lang.String lineSeparator;
    public static final java.lang.String lineSeparatorStr;

    public void <init>()
    {
        com.ibm.wsdl.util.StringUtils r0;

        r0 := @this: com.ibm.wsdl.util.StringUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String cleanString(java.lang.String)
    {
        char $c1, $c2;
        java.lang.StringBuffer $r4;
        int $i0, i3, $i4;
        char[] $r1;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        i3 = 0;

     label2:
        $i0 = lengthof $r1;

        if i3 >= $i0 goto label9;

        $c1 = $r1[i3];

        $i4 = (int) $c1;

        lookupswitch($i4)
        {
            case 10: goto label5;
            case 13: goto label6;
            case 34: goto label3;
            case 92: goto label4;
            default: goto label7;
        };

     label3:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\"");

        goto label8;

     label4:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\\");

        goto label8;

     label5:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\n");

        goto label8;

     label6:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\r");

        goto label8;

     label7:
        $c2 = $r1[i3];

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label8:
        i3 = i3 + 1;

        goto label2;

     label9:
        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String getClassName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.ibm.wsdl.util.StringUtils: java.lang.String parseDescriptor(java.lang.String)>($r1);

        goto label2;

     label1:
        $r2 = $r1;

     label2:
        return $r2;
    }

    private static java.lang.String parseDescriptor(java.lang.String)
    {
        char $c0, $c1;
        java.lang.StringBuffer $r4;
        int $i2, $i3, $i4, i5, i6, i7, i8, $i9, $i10;
        char[] $r1;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        i5 = 0;

        i6 = 0;

     label01:
        $c0 = $r1[i6];

        $i9 = (int) $c0;

        if $i9 != 91 goto label02;

        i5 = i5 + 1;

        i6 = i6 + 1;

        goto label01;

     label02:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        i7 = i6 + 1;

        $c1 = $r1[i6];

        $i10 = (int) $c1;

        tableswitch($i10)
        {
            case 66: goto label03;
            case 67: goto label04;
            case 68: goto label05;
            case 69: goto label12;
            case 70: goto label06;
            case 71: goto label12;
            case 72: goto label12;
            case 73: goto label07;
            case 74: goto label08;
            case 75: goto label12;
            case 76: goto label11;
            case 77: goto label12;
            case 78: goto label12;
            case 79: goto label12;
            case 80: goto label12;
            case 81: goto label12;
            case 82: goto label12;
            case 83: goto label09;
            case 84: goto label12;
            case 85: goto label12;
            case 86: goto label12;
            case 87: goto label12;
            case 88: goto label12;
            case 89: goto label12;
            case 90: goto label10;
            default: goto label12;
        };

     label03:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("byte");

        goto label12;

     label04:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("char");

        goto label12;

     label05:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("double");

        goto label12;

     label06:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("float");

        goto label12;

     label07:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("int");

        goto label12;

     label08:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("long");

        goto label12;

     label09:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("short");

        goto label12;

     label10:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("boolean");

        goto label12;

     label11:
        $i2 = lengthof $r1;

        $i3 = $i2 - i7;

        $i4 = $i3 - 1;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r1, i7, $i4);

     label12:
        i8 = 0;

     label13:
        if i8 >= i5 goto label14;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        i8 = i8 + 1;

        goto label13;

     label14:
        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.net.URL getURL(java.net.URL, java.lang.String) throws java.net.MalformedURLException
    {
        java.net.MalformedURLException $r3;
        java.net.URL $r0, r1, $r5;
        java.lang.String r2;
        java.io.File $r4;
        boolean $z0;

        r1 := @parameter0: java.net.URL;

        r2 := @parameter1: java.lang.String;

     label1:
        $r0 = new java.net.URL;

        specialinvoke $r0.<java.net.URL: void <init>(java.net.URL,java.lang.String)>(r1, r2);

     label2:
        return $r0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r2);

        if r1 == null goto label4;

        if r1 == null goto label5;

        $z0 = virtualinvoke $r4.<java.io.File: boolean isAbsolute()>();

        if $z0 == 0 goto label5;

     label4:
        $r5 = virtualinvoke $r4.<java.io.File: java.net.URL toURL()>();

        return $r5;

     label5:
        throw $r3;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    public static java.io.InputStream getContentAsInputStream(java.net.URL) throws java.lang.SecurityException, java.lang.IllegalArgumentException, java.io.IOException
    {
        java.net.URL r0;
        java.lang.IllegalArgumentException $r2, $r3;
        java.io.FileNotFoundException $r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.SecurityException $r10, $r11;
        java.lang.String $r9;
        java.io.InputStream $r1;

        r0 := @parameter0: java.net.URL;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("URL cannot be null.");

        throw $r3;

     label1:
        $r1 = virtualinvoke r0.<java.net.URL: java.io.InputStream openStream()>();

        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No content.");

        throw $r2;

     label2:
        return $r1;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Your JVM\'s SecurityManager has disallowed this.");

        throw $r11;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.io.FileNotFoundException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This file was not found: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r9);

        throw $r5;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.io.FileNotFoundException from label1 to label2 with label4;
    }

    public static java.util.List parseNMTokens(java.lang.String)
    {
        java.util.Vector $r2;
        java.util.StringTokenizer $r0;
        java.lang.String r1, $r3;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, " ");

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

     label1:
        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r2;
    }

    public static java.lang.String getNMTokens(java.util.List)
    {
        java.util.List r0;
        java.lang.StringBuffer $r1;
        int $i0, i1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r2, r4, $r8, $r9;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label5;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label4;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (java.lang.String) $r3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        if i1 <= 0 goto label2;

        $r9 = " ";

        goto label3;

     label2:
        $r9 = "";

     label3:
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        i1 = i1 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label5:
        return null;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1, $r2;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("line.separator", "\n");

        <com.ibm.wsdl.util.StringUtils: java.lang.String lineSeparator> = $r0;

        $r1 = <com.ibm.wsdl.util.StringUtils: java.lang.String lineSeparator>;

        $r2 = staticinvoke <com.ibm.wsdl.util.StringUtils: java.lang.String cleanString(java.lang.String)>($r1);

        <com.ibm.wsdl.util.StringUtils: java.lang.String lineSeparatorStr> = $r2;

        return;
    }
}
