public class org.apache.xalan.xslt.EnvironmentCheck extends java.lang.Object
{
    public static final java.lang.String ERROR;
    public static final java.lang.String WARNING;
    public static final java.lang.String ERROR_FOUND;
    public static final java.lang.String VERSION;
    public static final java.lang.String FOUNDCLASSES;
    public static final java.lang.String CLASS_PRESENT;
    public static final java.lang.String CLASS_NOTPRESENT;
    public java.lang.String[] jarNames;
    protected static java.util.Hashtable jarVersions;
    protected java.io.PrintWriter outWriter;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$org$xml$sax$Attributes;

    public void <init>()
    {
        java.io.PrintWriter $r2;
        java.io.PrintStream $r3;
        java.lang.String[] $r1;
        org.apache.xalan.xslt.EnvironmentCheck r0;

        r0 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.String)[16];

        $r1[0] = "xalan.jar";

        $r1[1] = "xalansamples.jar";

        $r1[2] = "xalanj1compat.jar";

        $r1[3] = "xalanservlet.jar";

        $r1[4] = "xerces.jar";

        $r1[5] = "xercesImpl.jar";

        $r1[6] = "testxsl.jar";

        $r1[7] = "crimson.jar";

        $r1[8] = "lotusxsl.jar";

        $r1[9] = "jaxp.jar";

        $r1[10] = "parser.jar";

        $r1[11] = "dom.jar";

        $r1[12] = "sax.jar";

        $r1[13] = "xml.jar";

        $r1[14] = "xml-apis.jar";

        $r1[15] = "xsltc.jar";

        r0.<org.apache.xalan.xslt.EnvironmentCheck: java.lang.String[] jarNames> = $r1;

        $r2 = new java.io.PrintWriter;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>($r3, 1);

        r0.<org.apache.xalan.xslt.EnvironmentCheck: java.io.PrintWriter outWriter> = $r2;

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r2;
        java.lang.StringBuffer $r11, $r13, $r15, $r16, $r18;
        int $i0, i1, $i2;
        java.lang.String $r3, $r4, $r8, $r14, $r17, $r19;
        boolean $z0;
        java.io.PrintWriter $r0, $r6, r20;
        java.io.PrintStream $r1, $r5, $r12;
        java.io.FileWriter $r7;
        java.lang.Exception $r10;
        org.apache.xalan.xslt.EnvironmentCheck $r9;

        r2 := @parameter0: java.lang.String[];

        $r0 = new java.io.PrintWriter;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>($r1, 1);

        r20 = $r0;

        i1 = 0;

        goto label8;

     label1:
        $r4 = "-out";

        $r3 = r2[i1];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label7;

        i1 = i1 + 1;

        $i0 = lengthof r2;

        if i1 >= $i0 goto label6;

     label2:
        $r6 = new java.io.PrintWriter;

        $r7 = new java.io.FileWriter;

        $r8 = r2[i1];

        specialinvoke $r7.<java.io.FileWriter: void <init>(java.lang.String,boolean)>($r8, 1);

        specialinvoke $r6.<java.io.PrintWriter: void <init>(java.io.Writer)>($r7);

        r20 = $r6;

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r12 = <java.lang.System: java.io.PrintStream err>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("# WARNING: -out ");

        $r14 = r2[i1];

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" threw ");

        $r17 = virtualinvoke $r10.<java.lang.Throwable: java.lang.String toString()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r19);

     label5:
        goto label7;

     label6:
        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("# WARNING: -out argument should have a filename, output sent to console");

     label7:
        i1 = i1 + 1;

     label8:
        $i2 = lengthof r2;

        if i1 < $i2 goto label1;

        $r9 = new org.apache.xalan.xslt.EnvironmentCheck;

        specialinvoke $r9.<org.apache.xalan.xslt.EnvironmentCheck: void <init>()>();

        virtualinvoke $r9.<org.apache.xalan.xslt.EnvironmentCheck: boolean checkEnvironment(java.io.PrintWriter)>(r20);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public boolean checkEnvironment(java.io.PrintWriter)
    {
        java.io.PrintWriter r0, $r3, $r4, $r5, $r6;
        org.apache.xalan.xslt.EnvironmentCheck r1;
        java.util.Hashtable $r2;
        boolean $z0;

        r1 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r0 := @parameter0: java.io.PrintWriter;

        if null == r0 goto label1;

        r1.<org.apache.xalan.xslt.EnvironmentCheck: java.io.PrintWriter outWriter> = r0;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable getEnvironmentHash()>();

        $z0 = virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: boolean writeEnvironmentReport(java.util.Hashtable)>($r2);

        if $z0 == 0 goto label3;

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)>("# WARNING: Potential problems found in your environment!");

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)>("#    Check any \'ERROR\' items above against the Xalan FAQs");

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)>("#    to correct potential problems with your classes/jars");

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)>("#    http://xml.apache.org/xalan-j/faq.html");

        $r5 = r1.<org.apache.xalan.xslt.EnvironmentCheck: java.io.PrintWriter outWriter>;

        if null == $r5 goto label2;

        $r6 = r1.<org.apache.xalan.xslt.EnvironmentCheck: java.io.PrintWriter outWriter>;

        virtualinvoke $r6.<java.io.PrintWriter: void flush()>();

     label2:
        return 0;

     label3:
        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)>("# YAHOO! Your environment seems to be OK.");

        $r3 = r1.<org.apache.xalan.xslt.EnvironmentCheck: java.io.PrintWriter outWriter>;

        if null == $r3 goto label4;

        $r4 = r1.<org.apache.xalan.xslt.EnvironmentCheck: java.io.PrintWriter outWriter>;

        virtualinvoke $r4.<java.io.PrintWriter: void flush()>();

     label4:
        return 1;
    }

    public java.util.Hashtable getEnvironmentHash()
    {
        java.util.Hashtable $r0;
        org.apache.xalan.xslt.EnvironmentCheck r1;

        r1 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void checkJAXPVersion(java.util.Hashtable)>($r0);

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void checkProcessorVersion(java.util.Hashtable)>($r0);

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void checkParserVersion(java.util.Hashtable)>($r0);

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void checkAntVersion(java.util.Hashtable)>($r0);

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void checkDOMVersion(java.util.Hashtable)>($r0);

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void checkSAXVersion(java.util.Hashtable)>($r0);

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void checkSystemProperties(java.util.Hashtable)>($r0);

        return $r0;
    }

    protected boolean writeEnvironmentReport(java.util.Hashtable)
    {
        java.util.Enumeration $r2;
        java.util.Vector r20;
        java.lang.StringBuffer $r5, $r6, $r7, $r9, $r13, $r14, $r15, $r16, $r18;
        java.lang.String r4, $r10, $r17, $r19;
        java.util.Hashtable r0;
        boolean $z0, $z1, $z2, z3, $z4;
        java.lang.Exception $r12;
        java.lang.Object $r3, $r8, $r11;
        org.apache.xalan.xslt.EnvironmentCheck r1;

        r1 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r0 := @parameter0: java.util.Hashtable;

        if null != r0 goto label1;

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)>("# ERROR: writeEnvironmentReport called with null Hashtable");

        return 0;

     label1:
        z3 = 0;

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)>("#---- BEGIN writeEnvironmentReport($Revision: 1.26 $): Useful stuff found: ----");

        $r2 = virtualinvoke r0.<java.util.Hashtable: java.util.Enumeration keys()>();

        goto label8;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.lang.String) $r3;

     label3:
        $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("foundclasses.");

        if $z0 == 0 goto label4;

        $r11 = virtualinvoke r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4);

        r20 = (java.util.Vector) $r11;

        $z2 = virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: boolean logFoundJars(java.util.Vector,java.lang.String)>(r20, r4);

        z3 = z3 | $z2;

        goto label6;

     label4:
        $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("ERROR.");

        if $z1 == 0 goto label5;

        z3 = 1;

     label5:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

        $r8 = virtualinvoke r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)>($r10);

     label6:
        goto label8;

     label7:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Reading-");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("= threw: ");

        $r17 = virtualinvoke $r12.<java.lang.Throwable: java.lang.String toString()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)>($r19);

     label8:
        $z4 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z4 != 0 goto label2;

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)>("#----- END writeEnvironmentReport: Useful properties found: -----");

        return z3;

        catch java.lang.Exception from label3 to label6 with label7;
    }

    protected boolean logFoundJars(java.util.Vector, java.lang.String)
    {
        java.util.Enumeration $r10;
        java.util.Vector r0;
        boolean $z0, z1, $z2;
        java.lang.Exception $r24;
        java.lang.StringBuffer $r2, $r3, $r5, $r6, $r13, $r14, $r15, $r17, $r19, $r20, $r21, $r22, $r25, $r26, $r27, $r28, $r30;
        int $i0, $i1, i2;
        java.lang.String r4, $r7, r12, $r18, $r23, $r29, $r31;
        java.util.Hashtable r9;
        java.lang.Object $r8, $r11, $r16;
        org.apache.xalan.xslt.EnvironmentCheck r1;

        r1 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r0 := @parameter0: java.util.Vector;

        r4 := @parameter1: java.lang.String;

        if null == r0 goto label01;

        $i0 = virtualinvoke r0.<java.util.Vector: int size()>();

        if $i0 >= 1 goto label02;

     label01:
        return 0;

     label02:
        z1 = 0;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("#---- BEGIN Listing XML-related jars in: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ----");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)>($r7);

        i2 = 0;

        goto label10;

     label03:
        $r8 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r9 = (java.util.Hashtable) $r8;

        $r10 = virtualinvoke r9.<java.util.Hashtable: java.util.Enumeration keys()>();

        goto label09;

     label04:
        $r11 = interfaceinvoke $r10.<java.util.Enumeration: java.lang.Object nextElement()>();

        r12 = (java.lang.String) $r11;

     label05:
        $z0 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>("ERROR.");

        if $z0 == 0 goto label06;

        z1 = 1;

     label06:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

        $r16 = virtualinvoke r9.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r12);

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)>($r18);

     label07:
        goto label09;

     label08:
        $r24 := @caughtexception;

        z1 = 1;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Reading-");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("= threw: ");

        $r29 = virtualinvoke $r24.<java.lang.Throwable: java.lang.String toString()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)>($r31);

     label09:
        $z2 = interfaceinvoke $r10.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 != 0 goto label04;

        i2 = i2 + 1;

     label10:
        $i1 = virtualinvoke r0.<java.util.Vector: int size()>();

        if i2 < $i1 goto label03;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("#----- END Listing XML-related jars in: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" -----");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)>($r23);

        return z1;

        catch java.lang.Exception from label05 to label07 with label08;
    }

    public void appendEnvironmentReport(org.w3c.dom.Node, org.w3c.dom.Document, java.util.Hashtable)
    {
        org.w3c.dom.Text $r11, $r16, $r33;
        java.util.Enumeration $r5;
        java.util.Vector r34;
        org.w3c.dom.Document r1;
        boolean $z0, $z1, $z2, z3, $z4;
        java.lang.Exception $r17, $r24;
        java.lang.StringBuffer $r18, $r20, $r22, $r26, $r27, $r28, $r29, $r31;
        org.w3c.dom.Node r0;
        java.lang.String r7, $r10, $r21, $r23, $r30, $r32, $r35;
        java.util.Hashtable r3;
        java.io.PrintStream $r19;
        org.w3c.dom.Element $r2, $r4, $r8, $r14, $r15, $r25;
        java.lang.Object $r6, $r9, $r12;
        org.apache.xalan.xslt.EnvironmentCheck r13;

        r13 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.w3c.dom.Document;

        r3 := @parameter2: java.util.Hashtable;

        if null == r0 goto label01;

        if null != r1 goto label02;

     label01:
        return;

     label02:
        $r2 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("EnvironmentCheck");

        interfaceinvoke $r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("version", "$Revision: 1.26 $");

        interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r2);

        if null != r3 goto label03;

        $r15 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("status");

        interfaceinvoke $r15.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("result", "ERROR");

        $r16 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>("appendEnvironmentReport called with null Hashtable!");

        interfaceinvoke $r15.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r16);

        interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r15);

        return;

     label03:
        z3 = 0;

        $r4 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("environment");

        interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r4);

        $r5 = virtualinvoke r3.<java.util.Hashtable: java.util.Enumeration keys()>();

        goto label10;

     label04:
        $r6 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        r7 = (java.lang.String) $r6;

     label05:
        $z0 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("foundclasses.");

        if $z0 == 0 goto label06;

        $r12 = virtualinvoke r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r7);

        r34 = (java.util.Vector) $r12;

        $z2 = virtualinvoke r13.<org.apache.xalan.xslt.EnvironmentCheck: boolean appendFoundJars(org.w3c.dom.Node,org.w3c.dom.Document,java.util.Vector,java.lang.String)>($r4, r1, r34, r7);

        z3 = z3 | $z2;

        goto label08;

     label06:
        $z1 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("ERROR.");

        if $z1 == 0 goto label07;

        z3 = 1;

     label07:
        $r8 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("item");

        interfaceinvoke $r8.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("key", r7);

        $r9 = virtualinvoke r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r7);

        $r10 = (java.lang.String) $r9;

        $r11 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r10);

        interfaceinvoke $r8.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r11);

        interfaceinvoke $r4.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r8);

     label08:
        goto label10;

     label09:
        $r24 := @caughtexception;

        z3 = 1;

        $r25 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("item");

        interfaceinvoke $r25.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("key", r7);

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ERROR. Reading ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" threw: ");

        $r30 = virtualinvoke $r24.<java.lang.Throwable: java.lang.String toString()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        $r33 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r32);

        interfaceinvoke $r25.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r33);

        interfaceinvoke $r4.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r25);

     label10:
        $z4 = interfaceinvoke $r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z4 != 0 goto label04;

        $r14 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("status");

        if z3 == 0 goto label11;

        $r35 = "ERROR";

        goto label12;

     label11:
        $r35 = "OK";

     label12:
        interfaceinvoke $r14.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("result", $r35);

        interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r14);

     label13:
        goto label15;

     label14:
        $r17 := @caughtexception;

        $r19 = <java.lang.System: java.io.PrintStream err>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("appendEnvironmentReport threw: ");

        $r21 = virtualinvoke $r17.<java.lang.Throwable: java.lang.String toString()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r23);

        virtualinvoke $r17.<java.lang.Throwable: void printStackTrace()>();

     label15:
        return;

        catch java.lang.Exception from label05 to label08 with label09;
        catch java.lang.Exception from label02 to label13 with label14;
    }

    protected boolean appendFoundJars(org.w3c.dom.Node, org.w3c.dom.Document, java.util.Vector, java.lang.String)
    {
        org.w3c.dom.Text $r11, $r22;
        java.util.Enumeration $r3;
        java.util.Vector r0;
        org.w3c.dom.Document r5;
        boolean $z0, z1, $z2;
        java.lang.Exception $r13;
        java.lang.StringBuffer $r15, $r16, $r17, $r18, $r20;
        org.w3c.dom.Node r12;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r7, $r8, $r10, $r19, $r21, r24, r25;
        java.util.Hashtable r2;
        org.w3c.dom.Element $r6, $r14;
        java.lang.Object $r1, $r4, $r9;
        org.apache.xalan.xslt.EnvironmentCheck r23;

        r23 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r12 := @parameter0: org.w3c.dom.Node;

        r5 := @parameter1: org.w3c.dom.Document;

        r0 := @parameter2: java.util.Vector;

        r24 := @parameter3: java.lang.String;

        if null == r0 goto label01;

        $i0 = virtualinvoke r0.<java.util.Vector: int size()>();

        if $i0 >= 1 goto label02;

     label01:
        return 0;

     label02:
        z1 = 0;

        i5 = 0;

        goto label10;

     label03:
        $r1 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i5);

        r2 = (java.util.Hashtable) $r1;

        $r3 = virtualinvoke r2.<java.util.Hashtable: java.util.Enumeration keys()>();

        goto label09;

     label04:
        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

     label05:
        r25 = (java.lang.String) $r4;

        $z0 = virtualinvoke r25.<java.lang.String: boolean startsWith(java.lang.String)>("ERROR.");

        if $z0 == 0 goto label06;

        z1 = 1;

     label06:
        $r6 = interfaceinvoke r5.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("foundJar");

        $i2 = virtualinvoke r25.<java.lang.String: int indexOf(java.lang.String)>("-");

        $r7 = virtualinvoke r25.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        interfaceinvoke $r6.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("name", $r7);

        $i3 = virtualinvoke r25.<java.lang.String: int indexOf(java.lang.String)>("-");

        $i4 = $i3 + 1;

        $r8 = virtualinvoke r25.<java.lang.String: java.lang.String substring(int)>($i4);

        interfaceinvoke $r6.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("desc", $r8);

        $r9 = virtualinvoke r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r25);

        $r10 = (java.lang.String) $r9;

        $r11 = interfaceinvoke r5.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r10);

        interfaceinvoke $r6.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r11);

        interfaceinvoke r12.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

     label07:
        goto label09;

     label08:
        $r13 := @caughtexception;

        z1 = 1;

        $r14 = interfaceinvoke r5.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("foundJar");

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ERROR. Reading ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" threw: ");

        $r19 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String toString()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        $r22 = interfaceinvoke r5.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r21);

        interfaceinvoke $r14.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r22);

        interfaceinvoke r12.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r14);

     label09:
        $z2 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 != 0 goto label04;

        i5 = i5 + 1;

     label10:
        $i1 = virtualinvoke r0.<java.util.Vector: int size()>();

        if i5 < $i1 goto label03;

        return z1;

        catch java.lang.Exception from label05 to label07 with label08;
    }

    protected void checkSystemProperties(java.util.Hashtable)
    {
        java.lang.String[] $r3, $r6, $r8;
        java.util.Vector $r4, $r7, $r9;
        java.lang.SecurityException $r11, $r12;
        java.lang.String $r0, $r1, $r5, $r14;
        org.apache.xalan.xslt.EnvironmentCheck r2;
        java.util.Hashtable $r10, r13;

        r2 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r13 := @parameter0: java.util.Hashtable;

        if null != r13 goto label1;

        $r10 = new java.util.Hashtable;

        specialinvoke $r10.<java.util.Hashtable: void <init>()>();

        r13 = $r10;

     label1:
        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        virtualinvoke r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.version", $r0);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        virtualinvoke r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.version", "WARNING: SecurityException thrown accessing system version properties");

     label4:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        virtualinvoke r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.class.path", $r1);

        $r3 = r2.<org.apache.xalan.xslt.EnvironmentCheck: java.lang.String[] jarNames>;

        $r4 = virtualinvoke r2.<org.apache.xalan.xslt.EnvironmentCheck: java.util.Vector checkPathForJars(java.lang.String,java.lang.String[])>($r1, $r3);

        if null == $r4 goto label5;

        virtualinvoke r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("foundclasses.java.class.path", $r4);

     label5:
        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("sun.boot.class.path");

        if null == $r5 goto label6;

        virtualinvoke r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("sun.boot.class.path", $r5);

        $r8 = r2.<org.apache.xalan.xslt.EnvironmentCheck: java.lang.String[] jarNames>;

        $r9 = virtualinvoke r2.<org.apache.xalan.xslt.EnvironmentCheck: java.util.Vector checkPathForJars(java.lang.String,java.lang.String[])>($r5, $r8);

        if null == $r9 goto label6;

        virtualinvoke r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("foundclasses.sun.boot.class.path", $r9);

     label6:
        $r14 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.ext.dirs");

        if null == $r14 goto label7;

        virtualinvoke r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.ext.dirs", $r14);

        $r6 = r2.<org.apache.xalan.xslt.EnvironmentCheck: java.lang.String[] jarNames>;

        $r7 = virtualinvoke r2.<org.apache.xalan.xslt.EnvironmentCheck: java.util.Vector checkPathForJars(java.lang.String,java.lang.String[])>($r14, $r6);

        if null == $r7 goto label7;

        virtualinvoke r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("foundclasses.java.ext.dirs", $r7);

     label7:
        goto label9;

     label8:
        $r11 := @caughtexception;

        virtualinvoke r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.class.path", "WARNING: SecurityException thrown accessing system classpath properties");

     label9:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.lang.SecurityException from label4 to label7 with label8;
    }

    protected java.util.Vector checkPathForJars(java.lang.String, java.lang.String[])
    {
        java.util.Vector $r42;
        boolean $z0, $z1, $z2;
        java.lang.Exception $r41;
        java.lang.String[] r1;
        long $l3;
        java.lang.StringBuffer $r11, $r12, $r15, $r16, $r17, $r21, $r22, $r27, $r28, $r35, $r36, $r46, $r47, $r49, $r50, $r51;
        java.util.StringTokenizer $r43;
        int $i0, $i1, $i2, i4, $i5, $i7;
        java.lang.String r0, $r4, $r5, $r6, $r10, $r13, $r18, $r20, $r23, $r26, $r29, $r30, $r31, $r32, $r34, $r37, $r39, $r40;
        java.util.Hashtable $r45, $r48;
        java.io.File $r44;
        org.apache.xalan.xslt.EnvironmentCheck r38;

        r38 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        if null == r0 goto label01;

        if null == r1 goto label01;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if 0 == $i0 goto label01;

        $i1 = lengthof r1;

        if 0 != $i1 goto label02;

     label01:
        return null;

     label02:
        $r42 = new java.util.Vector;

        specialinvoke $r42.<java.util.Vector: void <init>()>();

        $r43 = new java.util.StringTokenizer;

        $r4 = <java.io.File: java.lang.String pathSeparator>;

        specialinvoke $r43.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r0, $r4);

        goto label13;

     label03:
        $r5 = virtualinvoke $r43.<java.util.StringTokenizer: java.lang.String nextToken()>();

        i4 = 0;

        goto label12;

     label04:
        $r6 = r1[i4];

        $i2 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>($r6);

        $i7 = (int) -1;

        if $i2 <= $i7 goto label11;

        $r44 = new java.io.File;

        specialinvoke $r44.<java.io.File: void <init>(java.lang.String)>($r5);

        $z1 = virtualinvoke $r44.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label10;

     label05:
        $r45 = new java.util.Hashtable;

        specialinvoke $r45.<java.util.Hashtable: void <init>(int)>(2);

        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r26 = r1[i4];

        $r27 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-path");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        $r30 = virtualinvoke $r44.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r45.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r30);

        $r32 = "xalan.jar";

        $r31 = r1[i4];

        $z2 = virtualinvoke $r32.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r31);

        if $z2 != 0 goto label06;

        $r47 = new java.lang.StringBuffer;

        specialinvoke $r47.<java.lang.StringBuffer: void <init>()>();

        $r34 = r1[i4];

        $r35 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-apparent.version");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

        $r39 = r1[i4];

        $l3 = virtualinvoke $r44.<java.io.File: long length()>();

        $r40 = virtualinvoke r38.<org.apache.xalan.xslt.EnvironmentCheck: java.lang.String getApparentVersion(java.lang.String,long)>($r39, $l3);

        virtualinvoke $r45.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, $r40);

     label06:
        virtualinvoke $r42.<java.util.Vector: void addElement(java.lang.Object)>($r45);

     label07:
        goto label09;

     label08:
        $r41 := @caughtexception;

     label09:
        goto label11;

     label10:
        $r48 = new java.util.Hashtable;

        specialinvoke $r48.<java.util.Hashtable: void <init>(int)>(2);

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r10 = r1[i4];

        $r11 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-path");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("WARNING. Classpath entry: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not exist");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r48.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r18);

        $r51 = new java.lang.StringBuffer;

        specialinvoke $r51.<java.lang.StringBuffer: void <init>()>();

        $r20 = r1[i4];

        $r21 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-apparent.version");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r48.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, "not-present");

        virtualinvoke $r42.<java.util.Vector: void addElement(java.lang.Object)>($r48);

     label11:
        i4 = i4 + 1;

     label12:
        $i5 = lengthof r1;

        if i4 < $i5 goto label04;

     label13:
        $z0 = virtualinvoke $r43.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label03;

        return $r42;

        catch java.lang.Exception from label05 to label07 with label08;
    }

    protected java.lang.String getApparentVersion(java.lang.String, long)
    {
        long l0;
        java.lang.Long $r0;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16;
        java.lang.String r3, r4, $r5, $r11, $r12, $r17;
        java.util.Hashtable $r1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2;
        org.apache.xalan.xslt.EnvironmentCheck r18;

        r18 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r4 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r1 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r0 = new java.lang.Long;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>(l0);

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r0);

        r3 = (java.lang.String) $r2;

        if null == r3 goto label1;

        $z2 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(r4);

        if $z2 == 0 goto label1;

        return r3;

     label1:
        $r5 = "xerces.jar";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z0 != 0 goto label2;

        $r12 = "xercesImpl.jar";

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z1 == 0 goto label3;

     label2:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("WARNING.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("present-unknown-version");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;

     label3:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("present-unknown-version");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r17;
    }

    protected void checkJAXPVersion(java.util.Hashtable)
    {
        java.lang.Class[] $r3;
        java.lang.Exception $r4;
        java.lang.Class $r1, r7;
        java.lang.ClassLoader $r0;
        java.util.Hashtable $r2, r6;
        org.apache.xalan.xslt.EnvironmentCheck r5;

        r5 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r6 := @parameter0: java.util.Hashtable;

        if null != r6 goto label1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r6 = $r2;

     label1:
        $r3 = newarray (java.lang.Class)[0];

        r7 = null;

     label2:
        $r0 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r1 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>("javax.xml.parsers.DocumentBuilder", $r0, 1);

        r7 = $r1;

        virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getDOMImplementation", $r3);

        virtualinvoke r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.JAXP", "1.1 or higher");

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        if null == r7 goto label5;

        virtualinvoke r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.version.JAXP", "1.0.1");

        virtualinvoke r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.", "At least one error was found!");

        goto label6;

     label5:
        virtualinvoke r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.version.JAXP", "not-present");

        virtualinvoke r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.", "At least one error was found!");

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected void checkProcessorVersion(java.util.Hashtable)
    {
        java.lang.Object[] $r19;
        java.lang.StringBuffer $r2, $r12;
        java.lang.String $r9, $r15, $r21;
        java.lang.reflect.Method $r18;
        java.util.Hashtable $r22, r28;
        java.lang.Class[] $r25;
        java.lang.reflect.Field $r3, $r5, $r7, $r13;
        java.lang.Exception $r23, $r24, $r26;
        java.lang.Class $r1, $r11, $r17;
        java.lang.Object $r4, $r6, $r8, $r14, $r20;
        java.lang.ClassLoader $r0, $r10, $r16;
        org.apache.xalan.xslt.EnvironmentCheck r27;

        r27 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r28 := @parameter0: java.util.Hashtable;

        if null != r28 goto label01;

        $r22 = new java.util.Hashtable;

        specialinvoke $r22.<java.util.Hashtable: void <init>()>();

        r28 = $r22;

     label01:
        $r0 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r1 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>("org.apache.xalan.xslt.XSLProcessorVersion", $r0, 1);

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("PRODUCT");

        $r4 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("LANGUAGE");

        $r6 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        $r7 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("S_VERSION");

        $r8 = virtualinvoke $r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        $r9 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r28.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.xalan1", $r9);

     label02:
        goto label04;

     label03:
        $r26 := @caughtexception;

        virtualinvoke r28.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.xalan1", "not-present");

     label04:
        $r10 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r11 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>("org.apache.xalan.processor.XSLProcessorVersion", $r10, 1);

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("S_VERSION");

        $r14 = virtualinvoke $r13.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r14);

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r28.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.xalan2x", $r15);

     label05:
        goto label07;

     label06:
        $r24 := @caughtexception;

        virtualinvoke r28.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.xalan2x", "not-present");

     label07:
        $r25 = newarray (java.lang.Class)[0];

        $r16 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r17 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>("org.apache.xalan.Version", $r16, 1);

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getVersion", $r25);

        $r19 = newarray (java.lang.Object)[0];

        $r20 = virtualinvoke $r18.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r19);

        $r21 = (java.lang.String) $r20;

        virtualinvoke r28.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.xalan2_2", $r21);

     label08:
        goto label10;

     label09:
        $r23 := @caughtexception;

        virtualinvoke r28.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.xalan2_2", "not-present");

     label10:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
    }

    protected void checkParserVersion(java.util.Hashtable)
    {
        java.lang.String $r10, $r14;
        java.util.Hashtable $r9, r16;
        java.lang.reflect.Field $r2, $r6;
        java.lang.Exception $r11, $r12, $r13;
        java.lang.Class $r1, $r5;
        java.lang.Object $r3, $r7;
        java.lang.ClassLoader $r0, $r4, $r8;
        org.apache.xalan.xslt.EnvironmentCheck r15;

        r15 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r16 := @parameter0: java.util.Hashtable;

        if null != r16 goto label01;

        $r9 = new java.util.Hashtable;

        specialinvoke $r9.<java.util.Hashtable: void <init>()>();

        r16 = $r9;

     label01:
        $r0 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r1 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>("org.apache.xerces.framework.Version", $r0, 1);

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("fVersion");

        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r10 = (java.lang.String) $r3;

        virtualinvoke r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.xerces1", $r10);

     label02:
        goto label04;

     label03:
        $r13 := @caughtexception;

        virtualinvoke r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.xerces1", "not-present");

     label04:
        $r4 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r5 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>("org.apache.xerces.impl.Version", $r4, 1);

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("fVersion");

        $r7 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r14 = (java.lang.String) $r7;

        virtualinvoke r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.xerces2", $r14);

     label05:
        goto label07;

     label06:
        $r12 := @caughtexception;

        virtualinvoke r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.xerces2", "not-present");

     label07:
        $r8 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>("org.apache.crimson.parser.Parser2", $r8, 1);

        virtualinvoke r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.crimson", "present-unknown-version");

     label08:
        goto label10;

     label09:
        $r11 := @caughtexception;

        virtualinvoke r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.crimson", "not-present");

     label10:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
    }

    protected void checkAntVersion(java.util.Hashtable)
    {
        java.lang.Object[] $r3;
        java.lang.Class[] $r7;
        java.lang.Exception $r8;
        java.lang.Class $r1;
        java.lang.Object $r4;
        java.lang.ClassLoader $r0;
        java.lang.String $r5;
        java.lang.reflect.Method $r2;
        java.util.Hashtable $r6, r10;
        org.apache.xalan.xslt.EnvironmentCheck r9;

        r9 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r10 := @parameter0: java.util.Hashtable;

        if null != r10 goto label1;

        $r6 = new java.util.Hashtable;

        specialinvoke $r6.<java.util.Hashtable: void <init>()>();

        r10 = $r6;

     label1:
        $r7 = newarray (java.lang.Class)[0];

        $r0 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r1 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>("org.apache.tools.ant.Main", $r0, 1);

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getAntVersion", $r7);

        $r3 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        $r5 = (java.lang.String) $r4;

        virtualinvoke r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.ant", $r5);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        virtualinvoke r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.ant", "not-present");

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void checkDOMVersion(java.util.Hashtable)
    {
        java.lang.StringBuffer $r9, $r10, $r12;
        java.lang.String $r11, $r13;
        java.util.Hashtable $r7, r19;
        java.lang.Class[] $r0;
        java.lang.Exception $r8, $r14, $r15;
        java.lang.Class $r1, $r2, $r4, $r6, $r17, $r20, $r21;
        java.lang.ClassLoader $r3, $r5, $r16;
        org.apache.xalan.xslt.EnvironmentCheck r18;

        r18 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r19 := @parameter0: java.util.Hashtable;

        if null != r19 goto label01;

        $r7 = new java.util.Hashtable;

        specialinvoke $r7.<java.util.Hashtable: void <init>()>();

        r19 = $r7;

     label01:
        $r0 = newarray (java.lang.Class)[2];

        $r1 = <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$java$lang$String>;

        if $r1 != null goto label02;

        $r20 = staticinvoke <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$java$lang$String> = $r20;

        goto label03;

     label02:
        $r20 = <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$java$lang$String>;

     label03:
        $r0[0] = $r20;

        $r2 = <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$java$lang$String>;

        if $r2 != null goto label04;

        $r21 = staticinvoke <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$java$lang$String> = $r21;

        goto label05;

     label04:
        $r21 = <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$java$lang$String>;

     label05:
        $r0[1] = $r21;

     label06:
        $r3 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r4 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>("org.w3c.dom.Document", $r3, 1);

        virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("createElementNS", $r0);

        virtualinvoke r19.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.DOM", "2.0");

     label07:
        $r5 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r6 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>("org.w3c.dom.Node", $r5, 1);

        virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("supported", $r0);

        virtualinvoke r19.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.version.DOM.draftlevel", "2.0wd");

        virtualinvoke r19.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.", "At least one error was found!");

     label08:
        goto label13;

     label09:
        $r15 := @caughtexception;

     label10:
        $r16 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r17 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>("org.w3c.dom.Node", $r16, 1);

        virtualinvoke $r17.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isSupported", $r0);

        virtualinvoke r19.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.DOM.draftlevel", "2.0fd");

     label11:
        goto label13;

     label12:
        $r14 := @caughtexception;

        virtualinvoke r19.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.version.DOM.draftlevel", "2.0unknown");

        virtualinvoke r19.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.", "At least one error was found!");

     label13:
        goto label15;

     label14:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ERROR attempting to load DOM level 2 class: ");

        $r11 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r19.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.version.DOM", $r13);

        virtualinvoke r19.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.", "At least one error was found!");

     label15:
        return;

        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label06 to label13 with label14;
    }

    protected void checkSAXVersion(java.util.Hashtable)
    {
        java.lang.Exception $r7, $r13, $r21;
        java.lang.ClassLoader $r4, $r19, $r27;
        java.lang.StringBuffer $r8, $r9, $r11, $r14, $r15, $r17, $r22, $r23, $r25;
        java.lang.String $r10, $r12, $r16, $r18, $r24, $r26;
        java.util.Hashtable $r6, r30;
        java.lang.Class[] $r0, $r2;
        java.lang.Class $r1, $r3, $r5, $r20, $r28, $r31, $r32;
        org.apache.xalan.xslt.EnvironmentCheck r29;

        r29 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r30 := @parameter0: java.util.Hashtable;

        if null != r30 goto label01;

        $r6 = new java.util.Hashtable;

        specialinvoke $r6.<java.util.Hashtable: void <init>()>();

        r30 = $r6;

     label01:
        $r0 = newarray (java.lang.Class)[1];

        $r1 = <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$java$lang$String>;

        if $r1 != null goto label02;

        $r31 = staticinvoke <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$java$lang$String> = $r31;

        goto label03;

     label02:
        $r31 = <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$java$lang$String>;

     label03:
        $r0[0] = $r31;

        $r2 = newarray (java.lang.Class)[1];

        $r3 = <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$org$xml$sax$Attributes>;

        if $r3 != null goto label04;

        $r32 = staticinvoke <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$(java.lang.String)>("org.xml.sax.Attributes");

        <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$org$xml$sax$Attributes> = $r32;

        goto label05;

     label04:
        $r32 = <org.apache.xalan.xslt.EnvironmentCheck: java.lang.Class class$org$xml$sax$Attributes>;

     label05:
        $r2[0] = $r32;

     label06:
        $r4 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r5 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>("org.xml.sax.helpers.AttributesImpl", $r4, 1);

        virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setAttributes", $r2);

        virtualinvoke r30.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.SAX", "2.0");

     label07:
        goto label15;

     label08:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ERROR attempting to load SAX version 2 class: ");

        $r24 = virtualinvoke $r21.<java.lang.Throwable: java.lang.String toString()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r30.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.version.SAX", $r26);

        virtualinvoke r30.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.", "At least one error was found!");

     label09:
        $r27 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r28 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>("org.xml.sax.XMLReader", $r27, 1);

        virtualinvoke $r28.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("parse", $r0);

        virtualinvoke r30.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.SAX-backlevel", "2.0beta2-or-earlier");

     label10:
        goto label15;

     label11:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ERROR attempting to load SAX version 2 class: ");

        $r16 = virtualinvoke $r21.<java.lang.Throwable: java.lang.String toString()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r30.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.version.SAX", $r18);

        virtualinvoke r30.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.", "At least one error was found!");

     label12:
        $r19 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r20 = staticinvoke <org.apache.xalan.xslt.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>("org.xml.sax.Parser", $r19, 1);

        virtualinvoke $r20.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("parse", $r0);

        virtualinvoke r30.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("version.SAX-backlevel", "1.0");

     label13:
        goto label15;

     label14:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ERROR attempting to load SAX version 1 class: ");

        $r10 = virtualinvoke $r7.<java.lang.Throwable: java.lang.String toString()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r30.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ERROR.version.SAX-backlevel", $r12);

     label15:
        return;

        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label12 to label13 with label14;
    }

    protected void logMsg(java.lang.String)
    {
        java.io.PrintWriter $r2;
        java.lang.String r1;
        org.apache.xalan.xslt.EnvironmentCheck r0;

        r0 := @this: org.apache.xalan.xslt.EnvironmentCheck;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xalan.xslt.EnvironmentCheck: java.io.PrintWriter outWriter>;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(r1);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    static void <clinit>()
    {
        java.lang.Long $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r49, $r51, $r53, $r55, $r57, $r59, $r61, $r63, $r65, $r67, $r69, $r71, $r73, $r75, $r77, $r79, $r81, $r83, $r85, $r87, $r89, $r91, $r93, $r95, $r97, $r99, $r101, $r103, $r105, $r107, $r109, $r111, $r113, $r115, $r117, $r119, $r121, $r123, $r125, $r127, $r129, $r131, $r133, $r135, $r137, $r139;
        java.util.Hashtable $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r48, $r50, $r52, $r54, $r56, $r58, $r60, $r62, $r64, $r66, $r68, $r70, $r72, $r74, $r76, $r78, $r80, $r82, $r84, $r86, $r88, $r90, $r92, $r94, $r96, $r98, $r100, $r102, $r104, $r106, $r108, $r110, $r112, $r114, $r116, $r118, $r120, $r122, $r124, $r126, $r128, $r130, $r132, $r134, $r136, $r138, $r140;

        <org.apache.xalan.xslt.EnvironmentCheck: java.lang.String CLASS_NOTPRESENT> = "not-present";

        <org.apache.xalan.xslt.EnvironmentCheck: java.lang.String CLASS_PRESENT> = "present-unknown-version";

        <org.apache.xalan.xslt.EnvironmentCheck: java.lang.String FOUNDCLASSES> = "foundclasses.";

        <org.apache.xalan.xslt.EnvironmentCheck: java.lang.String VERSION> = "version.";

        <org.apache.xalan.xslt.EnvironmentCheck: java.lang.String ERROR_FOUND> = "At least one error was found!";

        <org.apache.xalan.xslt.EnvironmentCheck: java.lang.String WARNING> = "WARNING.";

        <org.apache.xalan.xslt.EnvironmentCheck: java.lang.String ERROR> = "ERROR.";

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions> = $r0;

        $r2 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r1 = new java.lang.Long;

        specialinvoke $r1.<java.lang.Long: void <init>(long)>(857192L);

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, "xalan.jar from xalan-j_1_1");

        $r4 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r3 = new java.lang.Long;

        specialinvoke $r3.<java.lang.Long: void <init>(long)>(440237L);

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, "xalan.jar from xalan-j_1_2");

        $r6 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r5 = new java.lang.Long;

        specialinvoke $r5.<java.lang.Long: void <init>(long)>(436094L);

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, "xalan.jar from xalan-j_1_2_1");

        $r8 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r7 = new java.lang.Long;

        specialinvoke $r7.<java.lang.Long: void <init>(long)>(426249L);

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "xalan.jar from xalan-j_1_2_2");

        $r10 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r9 = new java.lang.Long;

        specialinvoke $r9.<java.lang.Long: void <init>(long)>(702536L);

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, "xalan.jar from xalan-j_2_0_0");

        $r12 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r11 = new java.lang.Long;

        specialinvoke $r11.<java.lang.Long: void <init>(long)>(720930L);

        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, "xalan.jar from xalan-j_2_0_1");

        $r14 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r13 = new java.lang.Long;

        specialinvoke $r13.<java.lang.Long: void <init>(long)>(732330L);

        virtualinvoke $r14.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, "xalan.jar from xalan-j_2_1_0");

        $r16 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r15 = new java.lang.Long;

        specialinvoke $r15.<java.lang.Long: void <init>(long)>(872241L);

        virtualinvoke $r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, "xalan.jar from xalan-j_2_2_D10");

        $r18 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r17 = new java.lang.Long;

        specialinvoke $r17.<java.lang.Long: void <init>(long)>(882739L);

        virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, "xalan.jar from xalan-j_2_2_D11");

        $r20 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r19 = new java.lang.Long;

        specialinvoke $r19.<java.lang.Long: void <init>(long)>(923866L);

        virtualinvoke $r20.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, "xalan.jar from xalan-j_2_2_0");

        $r22 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r21 = new java.lang.Long;

        specialinvoke $r21.<java.lang.Long: void <init>(long)>(905872L);

        virtualinvoke $r22.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, "xalan.jar from xalan-j_2_3_D1");

        $r24 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r23 = new java.lang.Long;

        specialinvoke $r23.<java.lang.Long: void <init>(long)>(906122L);

        virtualinvoke $r24.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, "xalan.jar from xalan-j_2_3_0");

        $r26 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r25 = new java.lang.Long;

        specialinvoke $r25.<java.lang.Long: void <init>(long)>(906248L);

        virtualinvoke $r26.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, "xalan.jar from xalan-j_2_3_1");

        $r28 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r27 = new java.lang.Long;

        specialinvoke $r27.<java.lang.Long: void <init>(long)>(983377L);

        virtualinvoke $r28.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, "xalan.jar from xalan-j_2_4_D1");

        $r30 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r29 = new java.lang.Long;

        specialinvoke $r29.<java.lang.Long: void <init>(long)>(997276L);

        virtualinvoke $r30.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, "xalan.jar from xalan-j_2_4_0");

        $r32 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r31 = new java.lang.Long;

        specialinvoke $r31.<java.lang.Long: void <init>(long)>(1031036L);

        virtualinvoke $r32.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, "xalan.jar from xalan-j_2_4_1");

        $r34 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r33 = new java.lang.Long;

        specialinvoke $r33.<java.lang.Long: void <init>(long)>(596540L);

        virtualinvoke $r34.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, "xsltc.jar from xalan-j_2_2_0");

        $r36 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r35 = new java.lang.Long;

        specialinvoke $r35.<java.lang.Long: void <init>(long)>(590247L);

        virtualinvoke $r36.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, "xsltc.jar from xalan-j_2_3_D1");

        $r38 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r37 = new java.lang.Long;

        specialinvoke $r37.<java.lang.Long: void <init>(long)>(589914L);

        virtualinvoke $r38.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, "xsltc.jar from xalan-j_2_3_0");

        $r40 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r39 = new java.lang.Long;

        specialinvoke $r39.<java.lang.Long: void <init>(long)>(589915L);

        virtualinvoke $r40.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, "xsltc.jar from xalan-j_2_3_1");

        $r42 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r41 = new java.lang.Long;

        specialinvoke $r41.<java.lang.Long: void <init>(long)>(1306667L);

        virtualinvoke $r42.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r41, "xsltc.jar from xalan-j_2_4_D1");

        $r44 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r43 = new java.lang.Long;

        specialinvoke $r43.<java.lang.Long: void <init>(long)>(1328227L);

        virtualinvoke $r44.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, "xsltc.jar from xalan-j_2_4_0");

        $r46 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r45 = new java.lang.Long;

        specialinvoke $r45.<java.lang.Long: void <init>(long)>(1344009L);

        virtualinvoke $r46.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r45, "xsltc.jar from xalan-j_2_4_1");

        $r48 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r47 = new java.lang.Long;

        specialinvoke $r47.<java.lang.Long: void <init>(long)>(1348361L);

        virtualinvoke $r48.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r47, "xsltc.jar from xalan-j_2_5_D1");

        $r50 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r49 = new java.lang.Long;

        specialinvoke $r49.<java.lang.Long: void <init>(long)>(1268634L);

        virtualinvoke $r50.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r49, "xsltc.jar-bundled from xalan-j_2_3_0");

        $r52 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r51 = new java.lang.Long;

        specialinvoke $r51.<java.lang.Long: void <init>(long)>(100196L);

        virtualinvoke $r52.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r51, "xml-apis.jar from xalan-j_2_2_0 or xalan-j_2_3_D1");

        $r54 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r53 = new java.lang.Long;

        specialinvoke $r53.<java.lang.Long: void <init>(long)>(108484L);

        virtualinvoke $r54.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r53, "xml-apis.jar from xalan-j_2_3_0, or xalan-j_2_3_1 from xml-commons-1.0.b2");

        $r56 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r55 = new java.lang.Long;

        specialinvoke $r55.<java.lang.Long: void <init>(long)>(109049L);

        virtualinvoke $r56.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r55, "xml-apis.jar from xalan-j_2_4_0 from xml-commons RIVERCOURT1 branch");

        $r58 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r57 = new java.lang.Long;

        specialinvoke $r57.<java.lang.Long: void <init>(long)>(113749L);

        virtualinvoke $r58.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r57, "xml-apis.jar from xalan-j_2_4_1 from factoryfinder-build of xml-commons RIVERCOURT1");

        $r60 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r59 = new java.lang.Long;

        specialinvoke $r59.<java.lang.Long: void <init>(long)>(124704L);

        virtualinvoke $r60.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r59, "xml-apis.jar from tck-jaxp-1_2_0 branch of xml-commons");

        $r62 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r61 = new java.lang.Long;

        specialinvoke $r61.<java.lang.Long: void <init>(long)>(124724L);

        virtualinvoke $r62.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r61, "xml-apis.jar from tck-jaxp-1_2_0 branch of xml-commons, tag: xml-commons-external_1_2_01");

        $r64 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r63 = new java.lang.Long;

        specialinvoke $r63.<java.lang.Long: void <init>(long)>(424490L);

        virtualinvoke $r64.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r63, "xalan.jar from Xerces Tools releases - ERROR:DO NOT USE!");

        $r66 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r65 = new java.lang.Long;

        specialinvoke $r65.<java.lang.Long: void <init>(long)>(1591855L);

        virtualinvoke $r66.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r65, "xerces.jar from xalan-j_1_1 from xerces-1...");

        $r68 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r67 = new java.lang.Long;

        specialinvoke $r67.<java.lang.Long: void <init>(long)>(1498679L);

        virtualinvoke $r68.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r67, "xerces.jar from xalan-j_1_2 from xerces-1_2_0.bin");

        $r70 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r69 = new java.lang.Long;

        specialinvoke $r69.<java.lang.Long: void <init>(long)>(1484896L);

        virtualinvoke $r70.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r69, "xerces.jar from xalan-j_1_2_1 from xerces-1_2_1.bin");

        $r72 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r71 = new java.lang.Long;

        specialinvoke $r71.<java.lang.Long: void <init>(long)>(804460L);

        virtualinvoke $r72.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r71, "xerces.jar from xalan-j_1_2_2 from xerces-1_2_2.bin");

        $r74 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r73 = new java.lang.Long;

        specialinvoke $r73.<java.lang.Long: void <init>(long)>(1499244L);

        virtualinvoke $r74.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r73, "xerces.jar from xalan-j_2_0_0 from xerces-1_2_3.bin");

        $r76 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r75 = new java.lang.Long;

        specialinvoke $r75.<java.lang.Long: void <init>(long)>(1605266L);

        virtualinvoke $r76.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r75, "xerces.jar from xalan-j_2_0_1 from xerces-1_3_0.bin");

        $r78 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r77 = new java.lang.Long;

        specialinvoke $r77.<java.lang.Long: void <init>(long)>(904030L);

        virtualinvoke $r78.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r77, "xerces.jar from xalan-j_2_1_0 from xerces-1_4.bin");

        $r80 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r79 = new java.lang.Long;

        specialinvoke $r79.<java.lang.Long: void <init>(long)>(904030L);

        virtualinvoke $r80.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r79, "xerces.jar from xerces-1_4_0.bin");

        $r82 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r81 = new java.lang.Long;

        specialinvoke $r81.<java.lang.Long: void <init>(long)>(1802885L);

        virtualinvoke $r82.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r81, "xerces.jar from xerces-1_4_2.bin");

        $r84 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r83 = new java.lang.Long;

        specialinvoke $r83.<java.lang.Long: void <init>(long)>(1734594L);

        virtualinvoke $r84.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r83, "xerces.jar from Xerces-J-bin.2.0.0.beta3");

        $r86 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r85 = new java.lang.Long;

        specialinvoke $r85.<java.lang.Long: void <init>(long)>(1808883L);

        virtualinvoke $r86.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r85, "xerces.jar from xalan-j_2_2_D10,D11,D12 or xerces-1_4_3.bin");

        $r88 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r87 = new java.lang.Long;

        specialinvoke $r87.<java.lang.Long: void <init>(long)>(1812019L);

        virtualinvoke $r88.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r87, "xerces.jar from xalan-j_2_2_0");

        $r90 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r89 = new java.lang.Long;

        specialinvoke $r89.<java.lang.Long: void <init>(long)>(1720292L);

        virtualinvoke $r90.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r89, "xercesImpl.jar from xalan-j_2_3_D1");

        $r92 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r91 = new java.lang.Long;

        specialinvoke $r91.<java.lang.Long: void <init>(long)>(1730053L);

        virtualinvoke $r92.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r91, "xercesImpl.jar from xalan-j_2_3_0 or xalan-j_2_3_1 from xerces-2_0_0");

        $r94 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r93 = new java.lang.Long;

        specialinvoke $r93.<java.lang.Long: void <init>(long)>(1728861L);

        virtualinvoke $r94.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r93, "xercesImpl.jar from xalan-j_2_4_D1 from xerces-2_0_1");

        $r96 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r95 = new java.lang.Long;

        specialinvoke $r95.<java.lang.Long: void <init>(long)>(972027L);

        virtualinvoke $r96.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r95, "xercesImpl.jar from xalan-j_2_4_0 from xerces-2_1");

        $r98 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r97 = new java.lang.Long;

        specialinvoke $r97.<java.lang.Long: void <init>(long)>(831587L);

        virtualinvoke $r98.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r97, "xercesImpl.jar from xalan-j_2_4_1 from xerces-2_2");

        $r100 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r99 = new java.lang.Long;

        specialinvoke $r99.<java.lang.Long: void <init>(long)>(891817L);

        virtualinvoke $r100.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r99, "xercesImpl.jar from xalan-j_2_5_D1 from xerces-2_3");

        $r102 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r101 = new java.lang.Long;

        specialinvoke $r101.<java.lang.Long: void <init>(long)>(895924L);

        virtualinvoke $r102.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r101, "xercesImpl.jar from xerces-2_4");

        $r104 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r103 = new java.lang.Long;

        specialinvoke $r103.<java.lang.Long: void <init>(long)>(1010806L);

        virtualinvoke $r104.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r103, "xercesImpl.jar from Xerces-J-bin.2.6.2");

        $r106 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r105 = new java.lang.Long;

        specialinvoke $r105.<java.lang.Long: void <init>(long)>(37485L);

        virtualinvoke $r106.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r105, "xalanj1compat.jar from xalan-j_2_0_0");

        $r108 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r107 = new java.lang.Long;

        specialinvoke $r107.<java.lang.Long: void <init>(long)>(38100L);

        virtualinvoke $r108.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r107, "xalanj1compat.jar from xalan-j_2_0_1");

        $r110 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r109 = new java.lang.Long;

        specialinvoke $r109.<java.lang.Long: void <init>(long)>(18779L);

        virtualinvoke $r110.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r109, "xalanservlet.jar from xalan-j_2_0_0");

        $r112 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r111 = new java.lang.Long;

        specialinvoke $r111.<java.lang.Long: void <init>(long)>(21453L);

        virtualinvoke $r112.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r111, "xalanservlet.jar from xalan-j_2_0_1");

        $r114 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r113 = new java.lang.Long;

        specialinvoke $r113.<java.lang.Long: void <init>(long)>(24826L);

        virtualinvoke $r114.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r113, "xalanservlet.jar from xalan-j_2_3_1 or xalan-j_2_4_1");

        $r116 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r115 = new java.lang.Long;

        specialinvoke $r115.<java.lang.Long: void <init>(long)>(24831L);

        virtualinvoke $r116.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r115, "xalanservlet.jar from xalan-j_2_4_1");

        $r118 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r117 = new java.lang.Long;

        specialinvoke $r117.<java.lang.Long: void <init>(long)>(5618L);

        virtualinvoke $r118.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r117, "jaxp.jar from jaxp1.0.1");

        $r120 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r119 = new java.lang.Long;

        specialinvoke $r119.<java.lang.Long: void <init>(long)>(136133L);

        virtualinvoke $r120.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r119, "parser.jar from jaxp1.0.1");

        $r122 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r121 = new java.lang.Long;

        specialinvoke $r121.<java.lang.Long: void <init>(long)>(28404L);

        virtualinvoke $r122.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r121, "jaxp.jar from jaxp-1.1");

        $r124 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r123 = new java.lang.Long;

        specialinvoke $r123.<java.lang.Long: void <init>(long)>(187162L);

        virtualinvoke $r124.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r123, "crimson.jar from jaxp-1.1");

        $r126 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r125 = new java.lang.Long;

        specialinvoke $r125.<java.lang.Long: void <init>(long)>(801714L);

        virtualinvoke $r126.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r125, "xalan.jar from jaxp-1.1");

        $r128 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r127 = new java.lang.Long;

        specialinvoke $r127.<java.lang.Long: void <init>(long)>(196399L);

        virtualinvoke $r128.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r127, "crimson.jar from crimson-1.1.1");

        $r130 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r129 = new java.lang.Long;

        specialinvoke $r129.<java.lang.Long: void <init>(long)>(33323L);

        virtualinvoke $r130.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r129, "jaxp.jar from crimson-1.1.1 or jakarta-ant-1.4.1b1");

        $r132 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r131 = new java.lang.Long;

        specialinvoke $r131.<java.lang.Long: void <init>(long)>(152717L);

        virtualinvoke $r132.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r131, "crimson.jar from crimson-1.1.2beta2");

        $r134 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r133 = new java.lang.Long;

        specialinvoke $r133.<java.lang.Long: void <init>(long)>(88143L);

        virtualinvoke $r134.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r133, "xml-apis.jar from crimson-1.1.2beta2");

        $r136 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r135 = new java.lang.Long;

        specialinvoke $r135.<java.lang.Long: void <init>(long)>(206384L);

        virtualinvoke $r136.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r135, "crimson.jar from crimson-1.1.3 or jakarta-ant-1.4.1b1");

        $r138 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r137 = new java.lang.Long;

        specialinvoke $r137.<java.lang.Long: void <init>(long)>(136198L);

        virtualinvoke $r138.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r137, "parser.jar from jakarta-ant-1.3 or 1.2");

        $r140 = <org.apache.xalan.xslt.EnvironmentCheck: java.util.Hashtable jarVersions>;

        $r139 = new java.lang.Long;

        specialinvoke $r139.<java.lang.Long: void <init>(long)>(5537L);

        virtualinvoke $r140.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r139, "jaxp.jar from jakarta-ant-1.3 or 1.2");

        return;
    }
}
