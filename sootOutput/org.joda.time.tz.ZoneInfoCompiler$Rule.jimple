class org.joda.time.tz.ZoneInfoCompiler$Rule extends java.lang.Object
{
    public final java.lang.String iName;
    public final int iFromYear;
    public final int iToYear;
    public final java.lang.String iType;
    public final org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iDateTimeOfYear;
    public final int iSaveMillis;
    public final java.lang.String iLetterS;

    void <init>(java.util.StringTokenizer)
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r8;
        java.util.StringTokenizer r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11;
        java.lang.IllegalArgumentException $r12;
        org.joda.time.tz.ZoneInfoCompiler$Rule r0;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Rule;

        r1 := @parameter0: java.util.StringTokenizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String intern()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName> = $r3;

        $r4 = virtualinvoke r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>($r4, 0);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iFromYear> = $i0;

        $r5 = virtualinvoke r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i1 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iFromYear>;

        $i2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>($r5, $i1);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iToYear> = $i2;

        $i4 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iToYear>;

        $i3 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iFromYear>;

        if $i4 >= $i3 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label1:
        $r6 = virtualinvoke r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r7 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>($r6);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iType> = $r7;

        $r8 = new org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        specialinvoke $r8.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>(r1);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iDateTimeOfYear> = $r8;

        $r9 = virtualinvoke r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i5 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>($r9);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iSaveMillis> = $i5;

        $r10 = virtualinvoke r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r11 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>($r10);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS> = $r11;

        return;
    }

    public void addRecurring(org.joda.time.tz.DateTimeZoneBuilder, java.lang.String)
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r4;
        int $i0, $i1, $i2;
        org.joda.time.tz.DateTimeZoneBuilder r3;
        java.lang.String r1, $r2;
        org.joda.time.tz.ZoneInfoCompiler$Rule r0;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Rule;

        r3 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>(r1);

        $r4 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iDateTimeOfYear>;

        $i2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iSaveMillis>;

        $i1 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iFromYear>;

        $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iToYear>;

        virtualinvoke $r4.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int)>(r3, $r2, $i2, $i1, $i0);

        return;
    }

    private java.lang.String formatName(java.lang.String)
    {
        java.lang.StringBuffer $r5, $r6, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String r0, $r1, $r2, $r4, $r7, $r10, $r11, $r12, $r13, $r14, r15;
        org.joda.time.tz.ZoneInfoCompiler$Rule r3;

        r3 := @this: org.joda.time.tz.ZoneInfoCompiler$Rule;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(47);

        if $i0 <= 0 goto label2;

        $i3 = r3.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iSaveMillis>;

        if $i3 != 0 goto label1;

        $r13 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String intern()>();

        return $r14;

     label1:
        $i4 = $i0 + 1;

        $r11 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i4);

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String intern()>();

        return $r12;

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("%s");

        if $i1 >= 0 goto label3;

        return r0;

     label3:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $i2 = $i1 + 2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        $r4 = r3.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS>;

        if $r4 != null goto label4;

        r15 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r2);

        goto label5;

     label4:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r7 = r3.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        r15 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

     label5:
        $r10 = virtualinvoke r15.<java.lang.String: java.lang.String intern()>();

        return $r10;
    }

    public java.lang.String toString()
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r16;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r23, $r24;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r13, $r22, $r25;
        org.joda.time.tz.ZoneInfoCompiler$Rule r2;

        r2 := @this: org.joda.time.tz.ZoneInfoCompiler$Rule;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[Rule]\nName: ");

        $r3 = r2.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FromYear: ");

        $i0 = r2.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iFromYear>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ToYear: ");

        $i1 = r2.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iToYear>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Type: ");

        $r13 = r2.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iType>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r16 = r2.<org.joda.time.tz.ZoneInfoCompiler$Rule: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iDateTimeOfYear>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SaveMillis: ");

        $i2 = r2.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iSaveMillis>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LetterS: ");

        $r22 = r2.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r25;
    }
}
