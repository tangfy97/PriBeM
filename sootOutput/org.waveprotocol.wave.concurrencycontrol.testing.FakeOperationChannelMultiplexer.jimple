public class org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannelMultiplexer extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer
{

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannelMultiplexer r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannelMultiplexer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void close()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannelMultiplexer r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannelMultiplexer;

        return;
    }

    public void createOperationChannel(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannelMultiplexer r1;
        org.waveprotocol.wave.model.id.WaveletId r2;
        org.waveprotocol.wave.model.wave.ParticipantId r3;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannelMultiplexer;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r3 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void open(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener, org.waveprotocol.wave.model.id.IdFilter, java.util.Collection)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility $r8;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener r2;
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r5, $r9;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel $r7;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannelMultiplexer r10;
        org.waveprotocol.wave.model.version.HashedVersion $r6;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.id.IdFilter r11;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet r4;
        boolean $z0, $z1;

        r10 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannelMultiplexer;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener;

        r11 := @parameter1: org.waveprotocol.wave.model.id.IdFilter;

        r0 := @parameter2: java.util.Collection;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet) $r3;

        $r5 = r4.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData snapshot>;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r5, "Snapshot has no wavelet");

        $r6 = r4.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet: org.waveprotocol.wave.model.version.HashedVersion committedVersion>;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r6, "Known wavelet has null committed version");

        $r7 = new org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel;

        specialinvoke $r7.<org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel: void <init>()>();

        $r9 = r4.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData snapshot>;

        $r8 = r4.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility accessibility>;

        interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener: void onOperationChannelCreated(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.concurrencycontrol.channel.Accessibility)>($r7, $r9, $r8);

        goto label1;

     label2:
        interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener: void onOpenFinished()>();

     label3:
        return;
    }

    public void open(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener, org.waveprotocol.wave.model.id.IdFilter)
    {
        org.waveprotocol.wave.model.id.IdFilter r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener r1;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannelMultiplexer r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannelMultiplexer;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener;

        r2 := @parameter1: org.waveprotocol.wave.model.id.IdFilter;

        return;
    }
}
