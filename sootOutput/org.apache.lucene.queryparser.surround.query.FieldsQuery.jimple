public class org.apache.lucene.queryparser.surround.query.FieldsQuery extends org.apache.lucene.queryparser.surround.query.SrndQuery
{
    private org.apache.lucene.queryparser.surround.query.SrndQuery q;
    private java.util.List fieldNames;
    private final char fieldOp;
    private final java.lang.String OrOperatorName;

    public void <init>(org.apache.lucene.queryparser.surround.query.SrndQuery, java.util.List, char)
    {
        org.apache.lucene.queryparser.surround.query.FieldsQuery r0;
        java.util.List r2;
        org.apache.lucene.queryparser.surround.query.SrndQuery r1;
        char c0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.FieldsQuery;

        r1 := @parameter0: org.apache.lucene.queryparser.surround.query.SrndQuery;

        r2 := @parameter1: java.util.List;

        c0 := @parameter2: char;

        specialinvoke r0.<org.apache.lucene.queryparser.surround.query.SrndQuery: void <init>()>();

        r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: java.lang.String OrOperatorName> = "OR";

        r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: java.lang.String OrOperatorName> = "OR";

        r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: org.apache.lucene.queryparser.surround.query.SrndQuery q> = r1;

        r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: java.util.List fieldNames> = r2;

        r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: char fieldOp> = c0;

        return;
    }

    public void <init>(org.apache.lucene.queryparser.surround.query.SrndQuery, java.lang.String, char)
    {
        org.apache.lucene.queryparser.surround.query.FieldsQuery r0;
        java.util.List $r4;
        org.apache.lucene.queryparser.surround.query.SrndQuery r1;
        char c0;
        java.lang.String r3;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.lucene.queryparser.surround.query.FieldsQuery;

        r1 := @parameter0: org.apache.lucene.queryparser.surround.query.SrndQuery;

        r3 := @parameter1: java.lang.String;

        c0 := @parameter2: char;

        specialinvoke r0.<org.apache.lucene.queryparser.surround.query.SrndQuery: void <init>()>();

        r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: java.lang.String OrOperatorName> = "OR";

        r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: java.lang.String OrOperatorName> = "OR";

        r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: org.apache.lucene.queryparser.surround.query.SrndQuery q> = r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: java.util.List fieldNames> = $r2;

        $r4 = r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: java.util.List fieldNames>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r3);

        r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: char fieldOp> = c0;

        return;
    }

    public boolean isFieldsSubQueryAcceptable()
    {
        org.apache.lucene.queryparser.surround.query.FieldsQuery r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.FieldsQuery;

        return 0;
    }

    public org.apache.lucene.search.Query makeLuceneQueryNoBoost(org.apache.lucene.queryparser.surround.query.BasicQueryFactory)
    {
        org.apache.lucene.search.Query $r7, $r17;
        org.apache.lucene.queryparser.surround.query.SrndQuery $r8, $r9, $r14;
        java.util.ListIterator $r4;
        java.util.ArrayList $r2;
        org.apache.lucene.queryparser.surround.query.OrQuery $r5;
        int $i0;
        java.lang.String $r12, $r16;
        boolean $z0;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r6;
        char $c1;
        org.apache.lucene.queryparser.surround.query.FieldsQuery r0, $r10;
        java.util.List $r1, $r3, $r13;
        java.lang.Object $r11, $r15;

        r0 := @this: org.apache.lucene.queryparser.surround.query.FieldsQuery;

        r6 := @parameter0: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        $r1 = r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: java.util.List fieldNames>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r14 = r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: org.apache.lucene.queryparser.surround.query.SrndQuery q>;

        $r13 = r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: java.util.List fieldNames>;

        $r15 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (java.lang.String) $r15;

        $r17 = virtualinvoke $r14.<org.apache.lucene.queryparser.surround.query.SrndQuery: org.apache.lucene.search.Query makeLuceneQueryFieldNoBoost(java.lang.String,org.apache.lucene.queryparser.surround.query.BasicQueryFactory)>($r16, r6);

        return $r17;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: java.util.List getFieldNames()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.ListIterator listIterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: org.apache.lucene.queryparser.surround.query.SrndQuery q>;

        $r9 = virtualinvoke $r8.<org.apache.lucene.queryparser.surround.query.SrndQuery: org.apache.lucene.queryparser.surround.query.SrndQuery clone()>();

        $r10 = new org.apache.lucene.queryparser.surround.query.FieldsQuery;

        $r11 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.String) $r11;

        $c1 = r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: char fieldOp>;

        specialinvoke $r10.<org.apache.lucene.queryparser.surround.query.FieldsQuery: void <init>(org.apache.lucene.queryparser.surround.query.SrndQuery,java.lang.String,char)>($r9, $r12, $c1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label2;

     label3:
        $r5 = new org.apache.lucene.queryparser.surround.query.OrQuery;

        specialinvoke $r5.<org.apache.lucene.queryparser.surround.query.OrQuery: void <init>(java.util.List,boolean,java.lang.String)>($r2, 1, "OR");

        $r7 = virtualinvoke $r5.<org.apache.lucene.queryparser.surround.query.OrQuery: org.apache.lucene.search.Query makeLuceneQueryField(java.lang.String,org.apache.lucene.queryparser.surround.query.BasicQueryFactory)>(null, r6);

        return $r7;
    }

    public org.apache.lucene.search.Query makeLuceneQueryFieldNoBoost(java.lang.String, org.apache.lucene.queryparser.surround.query.BasicQueryFactory)
    {
        org.apache.lucene.search.Query $r2;
        org.apache.lucene.queryparser.surround.query.FieldsQuery r0;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r1;
        java.lang.String r3;

        r0 := @this: org.apache.lucene.queryparser.surround.query.FieldsQuery;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: org.apache.lucene.search.Query makeLuceneQueryNoBoost(org.apache.lucene.queryparser.surround.query.BasicQueryFactory)>(r1);

        return $r2;
    }

    public java.util.List getFieldNames()
    {
        org.apache.lucene.queryparser.surround.query.FieldsQuery r0;
        java.util.List $r1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.FieldsQuery;

        $r1 = r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: java.util.List fieldNames>;

        return $r1;
    }

    public char getFieldOperator()
    {
        org.apache.lucene.queryparser.surround.query.FieldsQuery r0;
        char $c0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.FieldsQuery;

        $c0 = r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: char fieldOp>;

        return $c0;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.queryparser.surround.query.FieldsQuery r1;
        org.apache.lucene.queryparser.surround.query.SrndQuery $r2;
        java.lang.StringBuilder $r0;
        java.lang.String $r3, $r4;

        r1 := @this: org.apache.lucene.queryparser.surround.query.FieldsQuery;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.FieldsQuery: void fieldNamesToString(java.lang.StringBuilder)>($r0);

        $r2 = r1.<org.apache.lucene.queryparser.surround.query.FieldsQuery: org.apache.lucene.queryparser.surround.query.SrndQuery q>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.queryparser.surround.query.SrndQuery: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    protected void fieldNamesToString(java.lang.StringBuilder)
    {
        java.util.ListIterator $r2;
        char $c0;
        org.apache.lucene.queryparser.surround.query.FieldsQuery r0;
        java.util.List $r1;
        java.lang.StringBuilder r3;
        java.lang.Object $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.FieldsQuery;

        r3 := @parameter0: java.lang.StringBuilder;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: java.util.List getFieldNames()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $c0 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.FieldsQuery: char getFieldOperator()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        goto label1;

     label2:
        return;
    }
}
