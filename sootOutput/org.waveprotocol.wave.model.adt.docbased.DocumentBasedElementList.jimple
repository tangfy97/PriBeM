public final class org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList extends java.lang.Object implements org.waveprotocol.wave.model.adt.ObservableElementList, org.waveprotocol.wave.model.util.ElementListener
{
    private final java.util.Map valueToElement;
    private final java.util.Map elementToValue;
    private final org.waveprotocol.wave.model.document.util.DocumentEventRouter router;
    private final java.lang.Object parent;
    protected final java.util.List orderedValues;
    private final java.lang.String childTag;
    private final org.waveprotocol.wave.model.adt.docbased.Factory factory;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;
    static final boolean $assertionsDisabled;

    private void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object, java.lang.String, org.waveprotocol.wave.model.adt.docbased.Factory)
    {
        java.util.HashMap $r2, $r3;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r8;
        java.util.ArrayList $r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r4;
        org.waveprotocol.wave.model.adt.docbased.Factory r7;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        java.lang.Object r5;
        java.lang.String r6;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        r8 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r5 := @parameter1: java.lang.Object;

        r6 := @parameter2: java.lang.String;

        r7 := @parameter3: org.waveprotocol.wave.model.adt.docbased.Factory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.List orderedValues> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.Map valueToElement> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.Map elementToValue> = $r3;

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r4;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.lang.Object parent> = r5;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.lang.String childTag> = r6;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.adt.docbased.Factory factory> = r7;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.document.util.DocumentEventRouter router> = r8;

        return;
    }

    private org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.document.util.DocumentEventRouter router>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        return $r2;
    }

    public static org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList create(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object, java.lang.String, org.waveprotocol.wave.model.adt.docbased.Factory)
    {
        org.waveprotocol.wave.model.adt.docbased.Factory r4;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList $r0;
        java.lang.Object r2;
        java.lang.String r3;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.waveprotocol.wave.model.adt.docbased.Factory;

        $r0 = new org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        specialinvoke $r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,java.lang.String,org.waveprotocol.wave.model.adt.docbased.Factory)>(r1, r2, r3, r4);

        specialinvoke $r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: void dispatchAndLoad()>();

        return $r0;
    }

    public java.lang.Object add(java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.Factory $r2;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r4;
        java.util.Map $r3, $r8;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r1;
        java.lang.Object r0, $r6, $r7, $r9;
        java.lang.String $r5;

        r1 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        r0 := @parameter0: java.lang.Object;

        $r2 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.adt.docbased.Factory factory>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.Initializer$Helper: java.util.Map buildAttributes(java.lang.Object,org.waveprotocol.wave.model.adt.docbased.Factory)>(r0, $r2);

        $r4 = specialinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r6 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.lang.Object parent>;

        $r5 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.lang.String childTag>;

        $r7 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object createChildElement(java.lang.Object,java.lang.String,java.util.Map)>($r6, $r5, $r3);

        $r8 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.Map elementToValue>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        return $r9;
    }

    public java.lang.Object get(int)
    {
        java.util.List $r1;
        int i0;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        java.lang.Object $r2;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.List orderedValues>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        return $r2;
    }

    public int indexOf(java.lang.Object)
    {
        java.util.List $r2;
        int $i0;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.List orderedValues>;

        $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r1);

        return $i0;
    }

    public java.lang.Object add(int, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r9;
        java.util.Map $r4, $r8, $r11;
        int $i0, i1;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        java.util.List $r1, $r2;
        org.waveprotocol.wave.model.adt.docbased.Factory $r7;
        java.lang.Object $r3, $r5, r6, $r10, $r12, $r13;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        i1 := @parameter0: int;

        r6 := @parameter1: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.List orderedValues>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndex(int,int)>(i1, $i0);

        if i1 != $i0 goto label1;

        $r13 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.lang.Object add(java.lang.Object)>(r6);

        return $r13;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.List orderedValues>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.Map valueToElement>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r7 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.adt.docbased.Factory factory>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.Initializer$Helper: java.util.Map buildAttributes(java.lang.Object,org.waveprotocol.wave.model.adt.docbased.Factory)>(r6, $r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.lang.Object createBefore(org.waveprotocol.wave.model.document.ObservableMutableDocument,java.lang.Object,java.util.Map)>($r9, $r5, $r8);

        $r11 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.Map elementToValue>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        return $r12;
    }

    private java.lang.Object createBefore(org.waveprotocol.wave.model.document.ObservableMutableDocument, java.lang.Object, java.util.Map)
    {
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;
        java.util.Map r4;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r3;
        java.lang.Object r1, $r6;
        java.lang.String $r5;
        org.waveprotocol.wave.model.document.util.Point$El $r2;

        r3 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        r1 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.util.Map;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r1);

        $r5 = r3.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.lang.String childTag>;

        $r6 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object createElement(org.waveprotocol.wave.model.document.util.Point,java.lang.String,java.util.Map)>($r2, $r5, r4);

        return $r6;
    }

    public java.lang.Iterable getValues()
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        java.util.List $r1;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.List orderedValues>;

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r4;
        java.util.Map $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.Map valueToElement>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        return 0;

     label1:
        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ObservableMutableDocument: void deleteNode(java.lang.Object)>($r3);

        return 1;
    }

    public void clear()
    {
        java.util.Iterator $r3;
        java.lang.AssertionError $r5;
        java.util.ArrayList $r0;
        java.util.List $r2, $r4;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r1;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.List orderedValues>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: boolean remove(java.lang.Object)>($r6);

        goto label1;

     label2:
        $z1 = <org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $r4 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.List orderedValues>;

        $z2 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        return;
    }

    public int size()
    {
        int $i0;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        java.util.List $r1;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.List orderedValues>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public void onElementAdded(java.lang.Object)
    {
        java.lang.AssertionError $r16;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2, $r13;
        java.util.Map $r11, $r12;
        int $i0, $i1;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        java.lang.String $r1, $r4;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r5;
        java.util.List $r9, $r10;
        org.waveprotocol.wave.model.adt.docbased.Factory $r6;
        java.lang.Object r3, $r7, $r8, $r14, $r15;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        r3 := @parameter0: java.lang.Object;

        $z0 = <org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r13 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getParentElement(java.lang.Object)>(r3);

        $r15 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.lang.Object parent>;

        $z2 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>($r15);

        if $z2 != 0 goto label1;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>("Received event for unrelated element");

        throw $r16;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.lang.String childTag>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getTagName(java.lang.Object)>(r3);

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label4;

        $r6 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.adt.docbased.Factory factory>;

        $r5 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.document.util.DocumentEventRouter router>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.adt.docbased.Factory: java.lang.Object adapt(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object)>($r5, r3);

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.lang.Object getPreviousKnownValue(java.lang.Object)>(r3);

        $r10 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.List orderedValues>;

        if $r8 != null goto label2;

        $i1 = 0;

        goto label3;

     label2:
        $r9 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.List orderedValues>;

        $i0 = interfaceinvoke $r9.<java.util.List: int indexOf(java.lang.Object)>($r8);

        $i1 = $i0 + 1;

     label3:
        interfaceinvoke $r10.<java.util.List: void add(int,java.lang.Object)>($i1, $r7);

        $r11 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.Map elementToValue>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r7);

        $r12 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.Map valueToElement>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r3);

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: void fireElementAdded(java.lang.Object)>($r7);

     label4:
        return;
    }

    private java.lang.Object getPreviousKnownValue(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1, $r5;
        java.util.Map $r3;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        java.lang.Object r2, $r4, r6;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        r6 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getPreviousSiblingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r1, r2);

     label1:
        if r6 == null goto label3;

        $r3 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.Map elementToValue>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        if $r4 == null goto label2;

        return $r4;

     label2:
        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        r6 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getPreviousSiblingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r5, r6);

        goto label1;

     label3:
        return null;
    }

    public void onElementRemoved(java.lang.Object)
    {
        java.util.List $r4;
        java.util.Map $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.Map elementToValue>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.util.List orderedValues>;

        interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>($r3);

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: void fireElementRemoved(java.lang.Object)>($r3);

     label1:
        return;
    }

    private void dispatchAndLoad()
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        java.lang.Object $r1;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r2;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.document.util.DocumentEventRouter router>;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.lang.Object parent>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.util.ListenerRegistration addChildListener(java.lang.Object,org.waveprotocol.wave.model.util.ElementListener)>($r1, r0);

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: void load()>();

        return;
    }

    private void load()
    {
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1, $r3;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        java.lang.Object $r2, r4;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: java.lang.Object parent>;

        r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getFirstChildElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r1, $r2);

     label1:
        if r4 == null goto label2;

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: void onElementAdded(java.lang.Object)>(r4);

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextSiblingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r3, r4);

        goto label1;

     label2:
        return;
    }

    public void addListener(org.waveprotocol.wave.model.adt.ObservableElementList$Listener)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        org.waveprotocol.wave.model.adt.ObservableElementList$Listener r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        r1 := @parameter0: org.waveprotocol.wave.model.adt.ObservableElementList$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.adt.ObservableElementList$Listener)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        org.waveprotocol.wave.model.adt.ObservableElementList$Listener r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        r1 := @parameter0: org.waveprotocol.wave.model.adt.ObservableElementList$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private void fireElementAdded(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        org.waveprotocol.wave.model.adt.ObservableElementList$Listener r4;
        java.lang.Object $r3, r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        r5 := @parameter0: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.adt.ObservableElementList$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.adt.ObservableElementList$Listener: void onValueAdded(java.lang.Object)>(r5);

        goto label1;

     label2:
        return;
    }

    private void fireElementRemoved(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        org.waveprotocol.wave.model.adt.ObservableElementList$Listener r4;
        java.lang.Object $r3, r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        r5 := @parameter0: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.adt.ObservableElementList$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.adt.ObservableElementList$Listener: void onValueRemoved(java.lang.Object)>(r5);

        goto label1;

     label2:
        return;
    }

    public volatile void removeListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        org.waveprotocol.wave.model.adt.ObservableElementList$Listener $r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.adt.ObservableElementList$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: void removeListener(org.waveprotocol.wave.model.adt.ObservableElementList$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList r0;
        org.waveprotocol.wave.model.adt.ObservableElementList$Listener $r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.adt.ObservableElementList$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: void addListener(org.waveprotocol.wave.model.adt.ObservableElementList$Listener)>($r2);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/adt/docbased/DocumentBasedElementList;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: boolean $assertionsDisabled> = $z1;

        return;
    }
}
