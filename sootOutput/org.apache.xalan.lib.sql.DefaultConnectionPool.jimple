public class org.apache.xalan.lib.sql.DefaultConnectionPool extends java.lang.Object implements org.apache.xalan.lib.sql.ConnectionPool
{
    private java.sql.Driver m_Driver;
    private static final boolean DEBUG;
    private java.lang.String m_driver;
    private java.lang.String m_url;
    private int m_PoolMinSize;
    private java.util.Properties m_ConnectionProtocol;
    private java.util.Vector m_pool;
    private boolean m_IsActive;

    public void <init>()
    {
        java.util.Properties $r3;
        java.util.Vector $r4;
        java.lang.String $r1, $r2;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.sql.Driver m_Driver> = null;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>("");

        r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.lang.String m_driver> = $r1;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(java.lang.String)>("");

        r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.lang.String m_url> = $r2;

        r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: int m_PoolMinSize> = 1;

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

        r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Properties m_ConnectionProtocol> = $r3;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool> = $r4;

        r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: boolean m_IsActive> = 0;

        return;
    }

    public boolean isEnabled()
    {
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        $z0 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: boolean m_IsActive>;

        return $z0;
    }

    public void setDriver(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.lang.String m_driver> = r1;

        return;
    }

    public void setURL(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.lang.String m_url> = r1;

        return;
    }

    public void freeUnused()
    {
        java.util.Vector $r1, $r4;
        int i0, $i1;
        java.lang.Object $r2;
        org.apache.xalan.lib.sql.PooledConnection r3;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        i0 = 0;

        goto label3;

     label1:
        $r1 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r3 = (org.apache.xalan.lib.sql.PooledConnection) $r2;

        $z0 = virtualinvoke r3.<org.apache.xalan.lib.sql.PooledConnection: boolean inUse()>();

        if $z0 != 0 goto label2;

        virtualinvoke r3.<org.apache.xalan.lib.sql.PooledConnection: void close()>();

     label2:
        i0 = i0 + 1;

     label3:
        $r4 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        $i1 = virtualinvoke $r4.<java.util.Vector: int size()>();

        if i0 < $i1 goto label1;

        return;
    }

    public boolean hasActiveConnections()
    {
        java.util.Vector $r1;
        int $i0;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        $r1 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setPassword(java.lang.String)
    {
        java.lang.String r1;
        java.util.Properties $r2;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Properties m_ConnectionProtocol>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", r1);

        return;
    }

    public void setUser(java.lang.String)
    {
        java.lang.String r1;
        java.util.Properties $r2;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Properties m_ConnectionProtocol>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("user", r1);

        return;
    }

    public void setProtocol(java.util.Properties)
    {
        java.util.Properties r0, $r5;
        java.util.Enumeration $r1;
        java.lang.Object $r2;
        java.lang.String r3, $r6;
        org.apache.xalan.lib.sql.DefaultConnectionPool r4;
        boolean $z0;

        r4 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        r0 := @parameter0: java.util.Properties;

        $r1 = virtualinvoke r0.<java.util.Hashtable: java.util.Enumeration keys()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (java.lang.String) $r2;

        $r5 = r4.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Properties m_ConnectionProtocol>;

        $r6 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r3);

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r6);

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        return;
    }

    public void setMinConnections(int)
    {
        int i0;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        i0 := @parameter0: int;

        r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: int m_PoolMinSize> = i0;

        return;
    }

    public boolean testConnection()
    {
        java.sql.Connection $r1;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;
        java.lang.Exception $r2;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.sql.Connection getConnection()>();

        if $r1 != null goto label2;

        return 0;

     label2:
        virtualinvoke r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: void releaseConnection(java.sql.Connection)>($r1);

        return 1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label3 with label3;
    }

    public synchronized java.sql.Connection getConnection() throws java.lang.IllegalArgumentException, java.sql.SQLException
    {
        java.sql.Connection $r5, $r6, $r9;
        java.util.Vector $r1, $r2, $r3, $r8;
        int $i0, $i1, $i2, i3;
        org.apache.xalan.lib.sql.PooledConnection $r7, r10;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        $r1 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        $i1 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: int m_PoolMinSize>;

        if $i0 >= $i1 goto label1;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: void initializePool()>();

     label1:
        i3 = 0;

        goto label4;

     label2:
        $r3 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r10 = (org.apache.xalan.lib.sql.PooledConnection) $r4;

        $z0 = virtualinvoke r10.<org.apache.xalan.lib.sql.PooledConnection: boolean inUse()>();

        if $z0 != 0 goto label3;

        virtualinvoke r10.<org.apache.xalan.lib.sql.PooledConnection: void setInUse(boolean)>(1);

        $r5 = virtualinvoke r10.<org.apache.xalan.lib.sql.PooledConnection: java.sql.Connection getConnection()>();

        return $r5;

     label3:
        i3 = i3 + 1;

     label4:
        $r2 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        $i2 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if i3 < $i2 goto label2;

        $r6 = specialinvoke r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.sql.Connection createConnection()>();

        $r7 = new org.apache.xalan.lib.sql.PooledConnection;

        specialinvoke $r7.<org.apache.xalan.lib.sql.PooledConnection: void <init>(java.sql.Connection)>($r6);

        virtualinvoke $r7.<org.apache.xalan.lib.sql.PooledConnection: void setInUse(boolean)>(1);

        $r8 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        virtualinvoke $r8.<java.util.Vector: void addElement(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r7.<org.apache.xalan.lib.sql.PooledConnection: java.sql.Connection getConnection()>();

        return $r9;
    }

    public synchronized void releaseConnection(java.sql.Connection) throws java.sql.SQLException
    {
        java.sql.Connection $r5, r6;
        java.util.Vector $r1, $r2, $r7;
        int $i0, i1;
        java.lang.Object $r3;
        org.apache.xalan.lib.sql.PooledConnection r4;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        r6 := @parameter0: java.sql.Connection;

        i1 = 0;

        goto label4;

     label1:
        $r2 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r4 = (org.apache.xalan.lib.sql.PooledConnection) $r3;

        $r5 = virtualinvoke r4.<org.apache.xalan.lib.sql.PooledConnection: java.sql.Connection getConnection()>();

        if $r5 != r6 goto label3;

        $z0 = virtualinvoke r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: boolean isEnabled()>();

        if $z0 != 0 goto label2;

        interfaceinvoke r6.<java.sql.Connection: void close()>();

        $r7 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        virtualinvoke $r7.<java.util.Vector: void removeElementAt(int)>(i1);

        goto label5;

     label2:
        virtualinvoke r4.<org.apache.xalan.lib.sql.PooledConnection: void setInUse(boolean)>(0);

        goto label5;

     label3:
        i1 = i1 + 1;

     label4:
        $r1 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if i1 < $i0 goto label1;

     label5:
        return;
    }

    public synchronized void releaseConnectionOnError(java.sql.Connection) throws java.sql.SQLException
    {
        java.sql.Connection $r5, r6;
        java.util.Vector $r1, $r2, $r7;
        int $i0, i1;
        java.lang.Object $r3;
        org.apache.xalan.lib.sql.PooledConnection r4;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        r6 := @parameter0: java.sql.Connection;

        i1 = 0;

        goto label3;

     label1:
        $r2 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r4 = (org.apache.xalan.lib.sql.PooledConnection) $r3;

        $r5 = virtualinvoke r4.<org.apache.xalan.lib.sql.PooledConnection: java.sql.Connection getConnection()>();

        if $r5 != r6 goto label2;

        interfaceinvoke r6.<java.sql.Connection: void close()>();

        $r7 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        virtualinvoke $r7.<java.util.Vector: void removeElementAt(int)>(i1);

        goto label4;

     label2:
        i1 = i1 + 1;

     label3:
        $r1 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if i1 < $i0 goto label1;

     label4:
        return;
    }

    private java.sql.Connection createConnection() throws java.sql.SQLException
    {
        java.util.Properties $r1;
        java.sql.Connection $r4;
        java.sql.Driver $r3;
        java.lang.String $r2;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        $r3 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.sql.Driver m_Driver>;

        $r2 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.lang.String m_url>;

        $r1 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Properties m_ConnectionProtocol>;

        $r4 = interfaceinvoke $r3.<java.sql.Driver: java.sql.Connection connect(java.lang.String,java.util.Properties)>($r2, $r1);

        return $r4;
    }

    public synchronized void initializePool() throws java.lang.IllegalArgumentException, java.sql.SQLException
    {
        java.sql.Connection $r8;
        java.util.Vector $r9;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r2, $r3, $r12, $r14, $r16, $r19, $r22;
        org.apache.xalan.lib.sql.PooledConnection $r10;
        boolean $z0;
        java.lang.IllegalArgumentException $r11, $r13, $r15, $r18, $r21;
        java.lang.Exception $r17;
        org.apache.xalan.lib.sql.ObjectFactory$ConfigurationError $r20;
        java.sql.Driver $r6, $r7;
        java.lang.Object $r5;
        java.lang.ClassLoader $r4;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        $r1 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.lang.String m_driver>;

        if $r1 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_NO_DRIVER_NAME_SPECIFIED", null);

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label1:
        $r2 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.lang.String m_url>;

        if $r2 != null goto label2;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_NO_URL_SPECIFIED", null);

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label2:
        $i0 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: int m_PoolMinSize>;

        if $i0 >= 1 goto label3;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_POOLSIZE_LESS_THAN_ONE", null);

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label3:
        $r3 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.lang.String m_driver>;

        $r4 = staticinvoke <org.apache.xalan.lib.sql.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r5 = staticinvoke <org.apache.xalan.lib.sql.ObjectFactory: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader,boolean)>($r3, $r4, 1);

        $r6 = (java.sql.Driver) $r5;

        r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.sql.Driver m_Driver> = $r6;

        $r7 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.sql.Driver m_Driver>;

        staticinvoke <java.sql.DriverManager: void registerDriver(java.sql.Driver)>($r7);

     label4:
        goto label7;

     label5:
        $r20 := @caughtexception;

        $r21 = new java.lang.IllegalArgumentException;

        $r22 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_INVALID_DRIVER_NAME", null);

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label6:
        $r17 := @caughtexception;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_INVALID_DRIVER_NAME", null);

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label7:
        $z0 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: boolean m_IsActive>;

        if $z0 != 0 goto label8;

        return;

     label8:
        $r8 = specialinvoke r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.sql.Connection createConnection()>();

        if $r8 == null goto label9;

        $r10 = new org.apache.xalan.lib.sql.PooledConnection;

        specialinvoke $r10.<org.apache.xalan.lib.sql.PooledConnection: void <init>(java.sql.Connection)>($r8);

        specialinvoke r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: void addConnection(org.apache.xalan.lib.sql.PooledConnection)>($r10);

     label9:
        $r9 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        $i1 = virtualinvoke $r9.<java.util.Vector: int size()>();

        $i2 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: int m_PoolMinSize>;

        if $i1 < $i2 goto label8;

        return;

        catch org.apache.xalan.lib.sql.ObjectFactory$ConfigurationError from label3 to label4 with label5;
        catch java.lang.Exception from label3 to label4 with label6;
    }

    private void addConnection(org.apache.xalan.lib.sql.PooledConnection)
    {
        org.apache.xalan.lib.sql.PooledConnection r1;
        java.util.Vector $r2;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        r1 := @parameter0: org.apache.xalan.lib.sql.PooledConnection;

        $r2 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        java.util.Vector $r1, $r5;
        java.lang.InterruptedException $r4;
        int i0, $i1;
        java.lang.Object $r2;
        org.apache.xalan.lib.sql.PooledConnection r3;
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        i0 = 0;

        goto label6;

     label1:
        $r1 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r3 = (org.apache.xalan.lib.sql.PooledConnection) $r2;

        $z0 = virtualinvoke r3.<org.apache.xalan.lib.sql.PooledConnection: boolean inUse()>();

        if $z0 != 0 goto label2;

        virtualinvoke r3.<org.apache.xalan.lib.sql.PooledConnection: void close()>();

        goto label5;

     label2:
        staticinvoke <java.lang.Thread: void sleep(long)>(30000L);

        virtualinvoke r3.<org.apache.xalan.lib.sql.PooledConnection: void close()>();

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        i0 = i0 + 1;

     label6:
        $r5 = r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: java.util.Vector m_pool>;

        $i1 = virtualinvoke $r5.<java.util.Vector: int size()>();

        if i0 < $i1 goto label1;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public void setPoolEnabled(boolean)
    {
        org.apache.xalan.lib.sql.DefaultConnectionPool r0;
        boolean z0;

        r0 := @this: org.apache.xalan.lib.sql.DefaultConnectionPool;

        z0 := @parameter0: boolean;

        r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: boolean m_IsActive> = z0;

        if z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DefaultConnectionPool: void freeUnused()>();

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.lib.sql.DefaultConnectionPool: boolean DEBUG> = 0;

        return;
    }
}
