public class org.jdesktop.swingx.event.EventListenerMap extends java.lang.Object
{
    private final java.util.Map listenerList;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.jdesktop.swingx.event.EventListenerMap r0;

        r0 := @this: org.jdesktop.swingx.event.EventListenerMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.jdesktop.swingx.event.EventListenerMap: java.util.Map listenerList> = $r1;

        return;
    }

    public java.util.List getListeners()
    {
        java.util.Iterator $r4;
        org.jdesktop.swingx.event.EventListenerMap r1;
        java.util.Collection $r3;
        java.util.ArrayList $r0;
        java.util.List r6;
        java.util.Map $r2;
        java.lang.Object $r5;
        boolean $z0;

        r1 := @this: org.jdesktop.swingx.event.EventListenerMap;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.jdesktop.swingx.event.EventListenerMap: java.util.Map listenerList>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.List) $r5;

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>(r6);

        goto label1;

     label2:
        return $r0;
    }

    public java.util.List getListeners(java.lang.Class)
    {
        java.util.List r5;
        org.jdesktop.swingx.event.EventListenerMap r0;
        java.util.Map $r2;
        java.lang.Class r1;
        java.lang.Object $r3;
        java.util.ArrayList $r4;

        r0 := @this: org.jdesktop.swingx.event.EventListenerMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.jdesktop.swingx.event.EventListenerMap: java.util.Map listenerList>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.util.List) $r3;

        if r5 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r5 = $r4;

     label1:
        return r5;
    }

    public int getListenerCount()
    {
        java.util.Iterator $r3;
        org.jdesktop.swingx.event.EventListenerMap r0;
        java.util.Collection $r2;
        java.util.List r5;
        java.util.Map $r1;
        int $i0, i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.event.EventListenerMap;

        i1 = 0;

        $r1 = r0.<org.jdesktop.swingx.event.EventListenerMap: java.util.Map listenerList>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.List) $r4;

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    public int getListenerCount(java.lang.Class)
    {
        java.util.List r4;
        org.jdesktop.swingx.event.EventListenerMap r0;
        java.util.Map $r2;
        int $i0;
        java.lang.Class r1;
        java.lang.Object $r3;

        r0 := @this: org.jdesktop.swingx.event.EventListenerMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.jdesktop.swingx.event.EventListenerMap: java.util.Map listenerList>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.List) $r3;

        if r4 == null goto label1;

        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        return $i0;

     label1:
        return 0;
    }

    public synchronized void add(java.lang.Class, java.util.EventListener)
    {
        org.jdesktop.swingx.event.EventListenerMap r1;
        java.util.ArrayList $r5;
        java.util.EventListener r0;
        java.util.List r7;
        java.util.Map $r3, $r6;
        java.lang.Class r2;
        java.lang.Object $r4;

        r1 := @this: org.jdesktop.swingx.event.EventListenerMap;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.util.EventListener;

        if r0 != null goto label1;

        return;

     label1:
        $r3 = r1.<org.jdesktop.swingx.event.EventListenerMap: java.util.Map listenerList>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r7 = (java.util.List) $r4;

        if r7 != null goto label2;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r7 = $r5;

        $r6 = r1.<org.jdesktop.swingx.event.EventListenerMap: java.util.Map listenerList>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5);

     label2:
        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public synchronized void remove(java.lang.Class, java.util.EventListener)
    {
        java.util.EventListener r0;
        java.util.List r5;
        org.jdesktop.swingx.event.EventListenerMap r1;
        java.util.Map $r3;
        java.lang.Class r2;
        java.lang.Object $r4;

        r1 := @this: org.jdesktop.swingx.event.EventListenerMap;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.util.EventListener;

        if r0 != null goto label1;

        return;

     label1:
        $r3 = r1.<org.jdesktop.swingx.event.EventListenerMap: java.util.Map listenerList>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.util.List) $r4;

        if r5 == null goto label2;

        interfaceinvoke r5.<java.util.List: boolean remove(java.lang.Object)>(r0);

     label2:
        return;
    }
}
