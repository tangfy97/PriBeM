public class org.codehaus.groovy.runtime.DefaultGroovyMethods extends org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport
{
    private static final java.util.logging.Logger LOG;
    private static final java.lang.Integer ONE;
    private static final char[] T_TABLE;
    private static final java.lang.String CHUNK_SEPARATOR;
    private static final byte[] TRANSLATE_TABLE;
    private static int charBufferSize;
    private static int expectedLineLength;
    private static int EOF;
    static java.lang.String lineSeparator;
    static java.lang.Class class$org$codehaus$groovy$runtime$DefaultGroovyMethods;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class array$Ljava$lang$Object;
    static java.lang.Class class$java$lang$Character;
    static java.lang.Class class$java$lang$Number;
    static java.lang.Class class$java$util$List;
    static java.lang.Class class$java$util$Set;
    static java.lang.Class class$java$util$SortedSet;
    static java.lang.Class class$java$util$Stack;
    static java.lang.Class class$java$lang$Short;
    static java.lang.Class class$java$lang$Integer;
    static java.lang.Class class$java$lang$Long;
    static java.lang.Class class$java$lang$Float;
    static java.lang.Class class$java$lang$Double;
    static java.lang.Class class$java$math$BigDecimal;
    static java.lang.Class class$java$math$BigInteger;
    static java.lang.Class class$groovy$lang$Writable;
    static java.lang.Class class$java$io$File;
    static java.lang.Class class$java$lang$Byte;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$org$codehaus$groovy$tools$RootLoader;

    public void <init>()
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods r0;

        r0 := @this: org.codehaus.groovy.runtime.DefaultGroovyMethods;

        specialinvoke r0.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: void <init>()>();

        return;
    }

    public static boolean is(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.Object identity(java.lang.Object, groovy.lang.Closure)
    {
        groovy.lang.Closure r1;
        java.lang.Object r0, $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object 'with'(java.lang.Object,groovy.lang.Closure)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object 'with'(java.lang.Object, groovy.lang.Closure)
    {
        groovy.lang.Closure r0, r2;
        java.lang.Object $r1, r3, $r4;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object clone()>();

        r2 = (groovy.lang.Closure) $r1;

        virtualinvoke r2.<groovy.lang.Closure: void setDelegate(java.lang.Object)>(r3);

        $r4 = virtualinvoke r2.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r3);

        return $r4;
    }

    public static java.lang.Object getAt(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0, $r2;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object getProperty(java.lang.Object,java.lang.String)>(r0, r1);

        return $r2;
    }

    public static void putAt(java.lang.Object, java.lang.String, java.lang.Object)
    {
        java.lang.Object r0, r2;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static java.lang.String dump(java.lang.Object)
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods$1 $r8;
        java.lang.StringBuffer $r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r3, $r4, $r5, $r9, $r11, $r12;
        boolean z0, $z1;
        java.lang.reflect.Field r7;
        java.lang.Exception $r13;
        java.lang.reflect.Field[] $r6;
        java.lang.Object r0, $r10;
        java.lang.Class $r2, r14;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        return "null";

     label01:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("<");

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r14 = $r2;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@");

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        z0 = r0 instanceof groovy.lang.GroovyObject;

     label02:
        if r14 == null goto label10;

        $r6 = virtualinvoke r14.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i4 = 0;

     label03:
        $i1 = lengthof $r6;

        if i4 >= $i1 goto label09;

        r7 = $r6[i4];

        $i2 = virtualinvoke r7.<java.lang.reflect.Field: int getModifiers()>();

        $i3 = $i2 & 8;

        if $i3 != 0 goto label08;

        if z0 == 0 goto label04;

        $r12 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.String getName()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("metaClass");

        if $z1 == 0 goto label04;

        goto label08;

     label04:
        $r8 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$1;

        specialinvoke $r8.<org.codehaus.groovy.runtime.DefaultGroovyMethods$1: void <init>(java.lang.reflect.Field)>(r7);

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r8);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r9 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

     label05:
        $r10 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r11 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toString(java.lang.Object)>($r10);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

     label06:
        goto label08;

     label07:
        $r13 := @caughtexception;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r13);

     label08:
        i4 = i4 + 1;

        goto label03;

     label09:
        r14 = virtualinvoke r14.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label02;

     label10:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;

        catch java.lang.Exception from label05 to label06 with label07;
    }

    public static java.util.List getMetaPropertyValues(java.lang.Object)
    {
        groovy.lang.MetaClass $r1;
        java.util.Iterator $r4;
        java.util.ArrayList $r3;
        java.util.List $r2;
        groovy.lang.PropertyValue $r7;
        int $i0;
        java.lang.Object r0, $r5;
        groovy.lang.MetaProperty r6;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: groovy.lang.MetaClass getMetaClass(java.lang.Object)>(r0);

        $r2 = interfaceinvoke $r1.<groovy.lang.MetaClass: java.util.List getProperties()>();

        $r3 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (groovy.lang.MetaProperty) $r5;

        $r7 = new groovy.lang.PropertyValue;

        specialinvoke $r7.<groovy.lang.PropertyValue: void <init>(java.lang.Object,groovy.lang.MetaProperty)>(r0, r6);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r3;
    }

    public static java.util.Map getProperties(java.lang.Object)
    {
        java.util.HashMap $r2;
        groovy.lang.PropertyValue r5;
        java.lang.StringBuffer $r12, $r13, $r15, $r16;
        int $i0;
        java.lang.String $r6, $r11, $r14, $r17;
        boolean $z0;
        java.util.Iterator $r3;
        java.util.logging.Logger $r9;
        java.lang.Exception $r8;
        java.util.List $r1;
        java.lang.Object r0, $r4, $r7;
        java.lang.Class $r10;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List getMetaPropertyValues(java.lang.Object)>(r0);

        $r2 = new java.util.HashMap;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>($i0);

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (groovy.lang.PropertyValue) $r4;

     label2:
        $r6 = virtualinvoke r5.<groovy.lang.PropertyValue: java.lang.String getName()>();

        $r7 = virtualinvoke r5.<groovy.lang.PropertyValue: java.lang.Object getValue()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.logging.Logger LOG>;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getProperty(");

        $r14 = virtualinvoke r5.<groovy.lang.PropertyValue: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.logging.Logger: void throwing(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, $r17, $r8);

     label5:
        goto label1;

     label6:
        return $r2;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static java.lang.Object use(java.lang.Object, java.lang.Class, groovy.lang.Closure)
    {
        groovy.lang.Closure r1;
        java.lang.Class r0;
        java.lang.Object $r2, r3;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Class;

        r1 := @parameter2: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: java.lang.Object use(java.lang.Class,groovy.lang.Closure)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object use(java.lang.Object, java.util.List, groovy.lang.Closure)
    {
        java.util.List r0;
        groovy.lang.Closure r1;
        java.lang.Object $r2, r3;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.List;

        r1 := @parameter2: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: java.lang.Object use(java.util.List,groovy.lang.Closure)>(r0, r1);

        return $r2;
    }

    public static void addShutdownHook(java.lang.Object, groovy.lang.Closure)
    {
        java.lang.Runtime $r0;
        java.lang.Thread $r1;
        groovy.lang.Closure r2;
        java.lang.Object r3;

        r3 := @parameter0: java.lang.Object;

        r2 := @parameter1: groovy.lang.Closure;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r1 = new java.lang.Thread;

        specialinvoke $r1.<java.lang.Thread: void <init>(java.lang.Runnable)>(r2);

        virtualinvoke $r0.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r1);

        return;
    }

    public static java.lang.Object use(java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] r0;
        groovy.lang.Closure r2;
        java.lang.ClassCastException $r7;
        java.util.ArrayList $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.IllegalArgumentException $r6, $r8;
        java.lang.Object $r1, $r4, $r5, r9;

        r9 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object[];

        $i0 = lengthof r0;

        if $i0 >= 2 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Expecting at least 2 arguments, a category class and a Closure");

        throw $r6;

     label1:
        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        $r1 = r0[$i2];

        r2 = (groovy.lang.Closure) $r1;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Expecting a Closure to be the last argument");

        throw $r8;

     label4:
        $r3 = new java.util.ArrayList;

        $i3 = lengthof r0;

        $i4 = $i3 - 1;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i4);

        i7 = 0;

     label5:
        $i5 = lengthof r0;

        $i6 = $i5 - 1;

        if i7 >= $i6 goto label6;

        $r5 = r0[i7];

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        i7 = i7 + 1;

        goto label5;

     label6:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.GroovyCategorySupport: java.lang.Object use(java.util.List,groovy.lang.Closure)>($r3, r2);

        return $r4;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static void print(java.lang.Object, java.lang.Object)
    {
        java.io.PrintStream $r2;
        java.io.PrintWriter $r4;
        java.io.Writer $r5;
        java.lang.Object r0, r1;
        java.lang.String $r3, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.io.Writer;

        if $z0 == 0 goto label1;

        $r4 = new java.io.PrintWriter;

        $r5 = (java.io.Writer) r0;

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.Writer)>($r5);

        $r6 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toString(java.lang.Object)>(r1);

        virtualinvoke $r4.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        virtualinvoke $r4.<java.io.PrintWriter: void flush()>();

        goto label2;

     label1:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toString(java.lang.Object)>(r1);

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>($r3);

     label2:
        return;
    }

    public static void print(groovy.lang.Closure, java.lang.Object)
    {
        java.lang.Object[] $r2;
        groovy.lang.Closure r0;
        java.lang.Object $r1, r3;

        r0 := @parameter0: groovy.lang.Closure;

        r3 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object getClosureOwner(groovy.lang.Closure)>(r0);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>($r1, "print", $r2);

        return;
    }

    public static void println(java.lang.Object)
    {
        java.io.PrintStream $r1;
        java.io.PrintWriter $r2;
        java.io.Writer $r3;
        java.lang.Object r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.io.Writer;

        if $z0 == 0 goto label1;

        $r2 = new java.io.PrintWriter;

        $r3 = (java.io.Writer) r0;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>($r3, 1);

        virtualinvoke $r2.<java.io.PrintWriter: void println()>();

        goto label2;

     label1:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println()>();

     label2:
        return;
    }

    public static void println(groovy.lang.Closure)
    {
        groovy.lang.Closure r0;
        java.lang.Object $r1;
        java.lang.Object[] $r2;

        r0 := @parameter0: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object getClosureOwner(groovy.lang.Closure)>(r0);

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>($r1, "println", $r2);

        return;
    }

    private static java.lang.Object getClosureOwner(groovy.lang.Closure)
    {
        groovy.lang.Closure r0, $r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @parameter0: groovy.lang.Closure;

        r2 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object getOwner()>();

     label1:
        $z0 = r2 instanceof org.codehaus.groovy.runtime.GeneratedClosure;

        if $z0 == 0 goto label2;

        $r1 = (groovy.lang.Closure) r2;

        r2 = virtualinvoke $r1.<groovy.lang.Closure: java.lang.Object getOwner()>();

        goto label1;

     label2:
        return r2;
    }

    public static void println(java.lang.Object, java.lang.Object)
    {
        java.io.PrintStream $r2;
        java.io.PrintWriter $r4;
        java.io.Writer $r5;
        java.lang.Object r0, r1;
        java.lang.String $r3, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.io.Writer;

        if $z0 == 0 goto label1;

        $r4 = new java.io.PrintWriter;

        $r5 = (java.io.Writer) r0;

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>($r5, 1);

        $r6 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toString(java.lang.Object)>(r1);

        virtualinvoke $r4.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        goto label2;

     label1:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toString(java.lang.Object)>(r1);

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

     label2:
        return;
    }

    public static void println(groovy.lang.Closure, java.lang.Object)
    {
        java.lang.Object[] $r2;
        groovy.lang.Closure r0;
        java.lang.Object $r1, r3;

        r0 := @parameter0: groovy.lang.Closure;

        r3 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object getClosureOwner(groovy.lang.Closure)>(r0);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>($r1, "println", $r2);

        return;
    }

    public static void printf(java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.io.PrintStream $r3, $r4;
        java.lang.Object[] r2;
        java.lang.Object r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $z0 = r0 instanceof java.io.PrintStream;

        if $z0 == 0 goto label1;

        $r4 = (java.io.PrintStream) r0;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void printf(java.io.PrintStream,java.lang.String,java.lang.Object[])>($r4, r1, r2);

        goto label2;

     label1:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void printf(java.io.PrintStream,java.lang.String,java.lang.Object[])>($r3, r1, r2);

     label2:
        return;
    }

    public static java.lang.String sprintf(java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.io.PrintStream $r1;
        java.lang.Object[] r3;
        java.io.ByteArrayOutputStream $r0;
        java.lang.Object r5;
        java.lang.String r2, $r4;

        r5 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.PrintStream;

        specialinvoke $r1.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r0);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void printf(java.io.PrintStream,java.lang.String,java.lang.Object[])>($r1, r2, r3);

        $r4 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        return $r4;
    }

    private static void printf(java.io.PrintStream, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r8, r10;
        java.lang.NoSuchMethodException $r15;
        int $i1;
        org.codehaus.groovy.runtime.InvokerInvocationException $r21;
        java.lang.String $r0, r9;
        java.lang.reflect.Method $r7;
        java.io.PrintStream r2;
        java.lang.IllegalAccessException $r13;
        java.lang.Class[] $r4;
        char $c0;
        java.lang.RuntimeException $r19, $r20, $r22;
        java.lang.reflect.InvocationTargetException $r11;
        java.lang.Class $r3, $r5, $r6, $r17, $r18;

        r2 := @parameter0: java.io.PrintStream;

        r9 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.Object[];

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(2);

        $i1 = (int) $c0;

        if $i1 < 53 goto label10;

     label01:
        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = newarray (java.lang.Class)[2];

        $r5 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$String>;

        if $r5 != null goto label02;

        $r17 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$String> = $r17;

        goto label03;

     label02:
        $r17 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$String>;

     label03:
        $r4[0] = $r17;

        $r6 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class array$Ljava$lang$Object>;

        if $r6 != null goto label04;

        $r18 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("[Ljava.lang.Object;");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class array$Ljava$lang$Object> = $r18;

        goto label05;

     label04:
        $r18 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class array$Ljava$lang$Object>;

     label05:
        $r4[1] = $r18;

        $r7 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("printf", $r4);

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = r9;

        $r8[1] = r10;

        virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r8);

     label06:
        goto label11;

     label07:
        $r15 := @caughtexception;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>("getMethod threw a NoSuchMethodException.  This is impossible.");

        throw $r19;

     label08:
        $r13 := @caughtexception;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>("invoke threw an IllegalAccessException.  This is impossible.");

        throw $r20;

     label09:
        $r11 := @caughtexception;

        $r21 = new org.codehaus.groovy.runtime.InvokerInvocationException;

        specialinvoke $r21.<org.codehaus.groovy.runtime.InvokerInvocationException: void <init>(java.lang.reflect.InvocationTargetException)>($r11);

        throw $r21;

     label10:
        $r22 = new java.lang.RuntimeException;

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.String)>("printf requires JDK1.5 or later.");

        throw $r22;

     label11:
        return;

        catch java.lang.NoSuchMethodException from label01 to label06 with label07;
        catch java.lang.IllegalAccessException from label01 to label06 with label08;
        catch java.lang.reflect.InvocationTargetException from label01 to label06 with label09;
    }

    public static void printf(java.lang.Object, java.lang.String, java.lang.Object)
    {
        java.io.PrintStream $r3, $r4;
        java.lang.Object r0, r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        $z0 = r0 instanceof java.io.PrintStream;

        if $z0 == 0 goto label1;

        $r4 = (java.io.PrintStream) r0;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void printf(java.io.PrintStream,java.lang.String,java.lang.Object)>($r4, r1, r2);

        goto label2;

     label1:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void printf(java.io.PrintStream,java.lang.String,java.lang.Object)>($r3, r1, r2);

     label2:
        return;
    }

    private static void printf(java.io.PrintStream, java.lang.String, java.lang.Object)
    {
        java.lang.Float $r17;
        byte[] $r20, r40;
        java.lang.Integer $r27;
        byte $b12;
        java.lang.Character $r25;
        java.lang.Long $r15;
        java.lang.Object[] $r30, $r32, $r33, $r34, r35;
        java.lang.Double $r13;
        double[] $r10, r44;
        long $l4;
        float[] $r16, r42;
        short $s9;
        java.lang.StringBuffer $r5, $r6, $r7, $r8;
        java.lang.String $r3, $r9, r12;
        boolean[] $r22, r39;
        java.lang.RuntimeException $r4;
        char[] $r24, r38;
        int[] $r26, r36;
        java.lang.Short $r19;
        java.lang.Byte $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.util.List $r31;
        float $f0;
        short[] $r18, r41;
        long[] $r14, r43;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i10, $i11, $i13, $i14, $i15, $i16, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, i27, i28;
        java.lang.Boolean $r23;
        double $d0;
        java.io.PrintStream r11;
        char $c17;
        java.lang.Comparable[] r37;
        java.lang.Object r0, $r29;
        java.lang.Class $r1, $r2, $r28;

        r11 := @parameter0: java.io.PrintStream;

        r12 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.Object;

        $z0 = r0 instanceof java.lang.Object[];

        if $z0 == 0 goto label01;

        $r33 = (java.lang.Object[]) r0;

        $r34 = (java.lang.Object[]) $r33;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void printf(java.io.PrintStream,java.lang.String,java.lang.Object[])>(r11, r12, $r34);

        return;

     label01:
        $z1 = r0 instanceof java.util.List;

        if $z1 == 0 goto label02;

        $r31 = (java.util.List) r0;

        $r32 = interfaceinvoke $r31.<java.util.List: java.lang.Object[] toArray()>();

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void printf(java.io.PrintStream,java.lang.String,java.lang.Object[])>(r11, r12, $r32);

        return;

     label02:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z2 != 0 goto label03;

        $r28 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r29 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r28, 1);

        $r30 = (java.lang.Object[]) $r29;

        r35 = (java.lang.Object[]) $r30;

        r35[0] = r0;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void printf(java.io.PrintStream,java.lang.String,java.lang.Object[])>(r11, r12, r35);

        return;

     label03:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[I");

        if $z3 == 0 goto label06;

        $r26 = (int[]) r0;

        r36 = (int[]) $r26;

        $i18 = lengthof r36;

        r37 = newarray (java.lang.Integer)[$i18];

        i21 = 0;

     label04:
        $i19 = lengthof r36;

        if i21 >= $i19 goto label05;

        $r27 = new java.lang.Integer;

        $i20 = r36[i21];

        specialinvoke $r27.<java.lang.Integer: void <init>(int)>($i20);

        r37[i21] = $r27;

        i21 = i21 + 1;

        goto label04;

     label05:
        goto label28;

     label06:
        $z4 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[C");

        if $z4 == 0 goto label09;

        $r24 = (char[]) r0;

        r38 = (char[]) $r24;

        $i15 = lengthof r38;

        r37 = newarray (java.lang.Character)[$i15];

        i22 = 0;

     label07:
        $i16 = lengthof r38;

        if i22 >= $i16 goto label08;

        $r25 = new java.lang.Character;

        $c17 = r38[i22];

        specialinvoke $r25.<java.lang.Character: void <init>(char)>($c17);

        r37[i22] = $r25;

        i22 = i22 + 1;

        goto label07;

     label08:
        goto label28;

     label09:
        $z5 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[Z");

        if $z5 == 0 goto label12;

        $r22 = (boolean[]) r0;

        r39 = (boolean[]) $r22;

        $i13 = lengthof r39;

        r37 = newarray (java.lang.Boolean)[$i13];

        i23 = 0;

     label10:
        $i14 = lengthof r39;

        if i23 >= $i14 goto label11;

        $r23 = new java.lang.Boolean;

        $z11 = r39[i23];

        specialinvoke $r23.<java.lang.Boolean: void <init>(boolean)>($z11);

        r37[i23] = $r23;

        i23 = i23 + 1;

        goto label10;

     label11:
        goto label28;

     label12:
        $z6 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[B");

        if $z6 == 0 goto label15;

        $r20 = (byte[]) r0;

        r40 = (byte[]) $r20;

        $i10 = lengthof r40;

        r37 = newarray (java.lang.Byte)[$i10];

        i24 = 0;

     label13:
        $i11 = lengthof r40;

        if i24 >= $i11 goto label14;

        $r21 = new java.lang.Byte;

        $b12 = r40[i24];

        specialinvoke $r21.<java.lang.Byte: void <init>(byte)>($b12);

        r37[i24] = $r21;

        i24 = i24 + 1;

        goto label13;

     label14:
        goto label28;

     label15:
        $z7 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[S");

        if $z7 == 0 goto label18;

        $r18 = (short[]) r0;

        r41 = (short[]) $r18;

        $i7 = lengthof r41;

        r37 = newarray (java.lang.Short)[$i7];

        i25 = 0;

     label16:
        $i8 = lengthof r41;

        if i25 >= $i8 goto label17;

        $r19 = new java.lang.Short;

        $s9 = r41[i25];

        specialinvoke $r19.<java.lang.Short: void <init>(short)>($s9);

        r37[i25] = $r19;

        i25 = i25 + 1;

        goto label16;

     label17:
        goto label28;

     label18:
        $z8 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[F");

        if $z8 == 0 goto label21;

        $r16 = (float[]) r0;

        r42 = (float[]) $r16;

        $i5 = lengthof r42;

        r37 = newarray (java.lang.Float)[$i5];

        i26 = 0;

     label19:
        $i6 = lengthof r42;

        if i26 >= $i6 goto label20;

        $r17 = new java.lang.Float;

        $f0 = r42[i26];

        specialinvoke $r17.<java.lang.Float: void <init>(float)>($f0);

        r37[i26] = $r17;

        i26 = i26 + 1;

        goto label19;

     label20:
        goto label28;

     label21:
        $z9 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[J");

        if $z9 == 0 goto label24;

        $r14 = (long[]) r0;

        r43 = (long[]) $r14;

        $i2 = lengthof r43;

        r37 = newarray (java.lang.Long)[$i2];

        i27 = 0;

     label22:
        $i3 = lengthof r43;

        if i27 >= $i3 goto label23;

        $r15 = new java.lang.Long;

        $l4 = r43[i27];

        specialinvoke $r15.<java.lang.Long: void <init>(long)>($l4);

        r37[i27] = $r15;

        i27 = i27 + 1;

        goto label22;

     label23:
        goto label28;

     label24:
        $z10 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[D");

        if $z10 == 0 goto label27;

        $r10 = (double[]) r0;

        r44 = (double[]) $r10;

        $i0 = lengthof r44;

        r37 = newarray (java.lang.Double)[$i0];

        i28 = 0;

     label25:
        $i1 = lengthof r44;

        if i28 >= $i1 goto label26;

        $r13 = new java.lang.Double;

        $d0 = r44[i28];

        specialinvoke $r13.<java.lang.Double: void <init>(double)>($d0);

        r37[i28] = $r13;

        i28 = i28 + 1;

        goto label25;

     label26:
        goto label28;

     label27:
        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("printf(String,");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label28:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void printf(java.io.PrintStream,java.lang.String,java.lang.Object[])>(r11, r12, r37);

        return;
    }

    public static java.lang.String sprintf(java.lang.Object, java.lang.String, java.lang.Object)
    {
        java.lang.Float $r17;
        byte[] $r20, r43;
        java.lang.Integer $r27;
        byte $b12;
        java.lang.Character $r25;
        java.lang.Long $r15;
        java.lang.Object[] $r30, $r33, $r35, $r36, r38, $r48;
        java.lang.Double $r13;
        double[] $r10, r47;
        long $l4;
        float[] $r16, r45;
        short $s9;
        java.lang.StringBuffer $r5, $r6, $r7, $r8;
        java.lang.String $r3, $r9, r12, $r31, $r34, $r37, $r49;
        boolean[] $r22, r42;
        java.lang.RuntimeException $r4;
        char[] $r24, r41;
        int[] $r26, r39;
        java.lang.Short $r19;
        java.lang.Byte $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.util.List $r32;
        float $f0;
        short[] $r18, r44;
        long[] $r14, r46;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i10, $i11, $i13, $i14, $i15, $i16, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, i27, i28;
        java.lang.Boolean $r23;
        double $d0;
        char $c17;
        java.lang.Comparable[] r40;
        java.lang.Object r0, r11, $r29;
        java.lang.Class $r1, $r2, $r28;

        r11 := @parameter0: java.lang.Object;

        r12 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.Object;

        $z0 = r0 instanceof java.lang.Object[];

        if $z0 == 0 goto label01;

        $r35 = (java.lang.Object[]) r0;

        $r36 = (java.lang.Object[]) $r35;

        $r37 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String sprintf(java.lang.Object,java.lang.String,java.lang.Object[])>(r11, r12, $r36);

        return $r37;

     label01:
        $z1 = r0 instanceof java.util.List;

        if $z1 == 0 goto label02;

        $r32 = (java.util.List) r0;

        $r33 = interfaceinvoke $r32.<java.util.List: java.lang.Object[] toArray()>();

        $r34 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String sprintf(java.lang.Object,java.lang.String,java.lang.Object[])>(r11, r12, $r33);

        return $r34;

     label02:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z2 != 0 goto label03;

        $r28 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r29 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r28, 1);

        $r30 = (java.lang.Object[]) $r29;

        r38 = (java.lang.Object[]) $r30;

        r38[0] = r0;

        $r31 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String sprintf(java.lang.Object,java.lang.String,java.lang.Object[])>(r11, r12, r38);

        return $r31;

     label03:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[I");

        if $z3 == 0 goto label06;

        $r26 = (int[]) r0;

        r39 = (int[]) $r26;

        $i18 = lengthof r39;

        r40 = newarray (java.lang.Integer)[$i18];

        i21 = 0;

     label04:
        $i19 = lengthof r39;

        if i21 >= $i19 goto label05;

        $r27 = new java.lang.Integer;

        $i20 = r39[i21];

        specialinvoke $r27.<java.lang.Integer: void <init>(int)>($i20);

        r40[i21] = $r27;

        i21 = i21 + 1;

        goto label04;

     label05:
        goto label28;

     label06:
        $z4 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[C");

        if $z4 == 0 goto label09;

        $r24 = (char[]) r0;

        r41 = (char[]) $r24;

        $i15 = lengthof r41;

        r40 = newarray (java.lang.Character)[$i15];

        i22 = 0;

     label07:
        $i16 = lengthof r41;

        if i22 >= $i16 goto label08;

        $r25 = new java.lang.Character;

        $c17 = r41[i22];

        specialinvoke $r25.<java.lang.Character: void <init>(char)>($c17);

        r40[i22] = $r25;

        i22 = i22 + 1;

        goto label07;

     label08:
        goto label28;

     label09:
        $z5 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[Z");

        if $z5 == 0 goto label12;

        $r22 = (boolean[]) r0;

        r42 = (boolean[]) $r22;

        $i13 = lengthof r42;

        r40 = newarray (java.lang.Boolean)[$i13];

        i23 = 0;

     label10:
        $i14 = lengthof r42;

        if i23 >= $i14 goto label11;

        $r23 = new java.lang.Boolean;

        $z11 = r42[i23];

        specialinvoke $r23.<java.lang.Boolean: void <init>(boolean)>($z11);

        r40[i23] = $r23;

        i23 = i23 + 1;

        goto label10;

     label11:
        goto label28;

     label12:
        $z6 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[B");

        if $z6 == 0 goto label15;

        $r20 = (byte[]) r0;

        r43 = (byte[]) $r20;

        $i10 = lengthof r43;

        r40 = newarray (java.lang.Byte)[$i10];

        i24 = 0;

     label13:
        $i11 = lengthof r43;

        if i24 >= $i11 goto label14;

        $r21 = new java.lang.Byte;

        $b12 = r43[i24];

        specialinvoke $r21.<java.lang.Byte: void <init>(byte)>($b12);

        r40[i24] = $r21;

        i24 = i24 + 1;

        goto label13;

     label14:
        goto label28;

     label15:
        $z7 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[S");

        if $z7 == 0 goto label18;

        $r18 = (short[]) r0;

        r44 = (short[]) $r18;

        $i7 = lengthof r44;

        r40 = newarray (java.lang.Short)[$i7];

        i25 = 0;

     label16:
        $i8 = lengthof r44;

        if i25 >= $i8 goto label17;

        $r19 = new java.lang.Short;

        $s9 = r44[i25];

        specialinvoke $r19.<java.lang.Short: void <init>(short)>($s9);

        r40[i25] = $r19;

        i25 = i25 + 1;

        goto label16;

     label17:
        goto label28;

     label18:
        $z8 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[F");

        if $z8 == 0 goto label21;

        $r16 = (float[]) r0;

        r45 = (float[]) $r16;

        $i5 = lengthof r45;

        r40 = newarray (java.lang.Float)[$i5];

        i26 = 0;

     label19:
        $i6 = lengthof r45;

        if i26 >= $i6 goto label20;

        $r17 = new java.lang.Float;

        $f0 = r45[i26];

        specialinvoke $r17.<java.lang.Float: void <init>(float)>($f0);

        r40[i26] = $r17;

        i26 = i26 + 1;

        goto label19;

     label20:
        goto label28;

     label21:
        $z9 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[J");

        if $z9 == 0 goto label24;

        $r14 = (long[]) r0;

        r46 = (long[]) $r14;

        $i2 = lengthof r46;

        r40 = newarray (java.lang.Long)[$i2];

        i27 = 0;

     label22:
        $i3 = lengthof r46;

        if i27 >= $i3 goto label23;

        $r15 = new java.lang.Long;

        $l4 = r46[i27];

        specialinvoke $r15.<java.lang.Long: void <init>(long)>($l4);

        r40[i27] = $r15;

        i27 = i27 + 1;

        goto label22;

     label23:
        goto label28;

     label24:
        $z10 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("[D");

        if $z10 == 0 goto label27;

        $r10 = (double[]) r0;

        r47 = (double[]) $r10;

        $i0 = lengthof r47;

        r40 = newarray (java.lang.Double)[$i0];

        i28 = 0;

     label25:
        $i1 = lengthof r47;

        if i28 >= $i1 goto label26;

        $r13 = new java.lang.Double;

        $d0 = r47[i28];

        specialinvoke $r13.<java.lang.Double: void <init>(double)>($d0);

        r40[i28] = $r13;

        i28 = i28 + 1;

        goto label25;

     label26:
        goto label28;

     label27:
        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("sprintf(String,");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label28:
        $r48 = (java.lang.Object[]) r40;

        $r49 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String sprintf(java.lang.Object,java.lang.String,java.lang.Object[])>(r11, r12, $r48);

        return $r49;
    }

    public static java.lang.String inspect(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String inspect(java.lang.Object)>(r0);

        return $r1;
    }

    public static void print(java.lang.Object, java.io.PrintWriter)
    {
        java.io.PrintWriter $r2, r4;
        java.io.PrintStream $r3;
        java.lang.Object r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.io.PrintWriter;

        if r4 != null goto label1;

        $r2 = new java.io.PrintWriter;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r3);

        r4 = $r2;

     label1:
        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toString(java.lang.Object)>(r0);

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>($r1);

        return;
    }

    public static void println(java.lang.Object, java.io.PrintWriter)
    {
        java.io.PrintWriter $r1, r3;
        java.io.PrintStream $r2;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.io.PrintWriter;

        if r3 != null goto label1;

        $r1 = new java.io.PrintWriter;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r2);

        r3 = $r1;

     label1:
        staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r0, "print", r3);

        virtualinvoke r3.<java.io.PrintWriter: void println()>();

        return;
    }

    public static java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Object)
    {
        java.lang.Object r0, r2, $r3;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r0, r1, r2);

        return $r3;
    }

    public static boolean isCase(java.lang.Object, java.lang.Object)
    {
        java.util.Collection $r3;
        java.lang.Object r0, r2;
        java.lang.Class $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.util.Collection asCollection(java.lang.Object)>(r0);

        $z2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: boolean isCase(java.util.Collection,java.lang.Object)>($r3, r2);

        return $z2;

     label1:
        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        return $z1;
    }

    public static boolean isCase(java.lang.String, java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String r1, $r2;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label3;

        if r1 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public static boolean isCase(java.lang.Class, java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class r1, r2;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        r2 = (java.lang.Class) r0;

        $z2 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        return $z2;

     label1:
        $z1 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        return $z1;
    }

    public static boolean isCase(java.util.Collection, java.lang.Object)
    {
        java.lang.Object r1;
        java.util.Collection r0;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public static boolean isCase(java.util.regex.Pattern, java.lang.Object)
    {
        java.util.regex.Matcher $r3;
        java.lang.Object r0;
        java.util.regex.Pattern r1;
        java.lang.String $r2;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.regex.Pattern;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label3;

        if r1 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label4;

        staticinvoke <org.codehaus.groovy.runtime.RegexSupport: void setLastMatcher(java.util.regex.Matcher)>($r3);

        return 1;

     label4:
        return 0;
    }

    public static boolean isCase(java.lang.Number, java.lang.Number)
    {
        int $i0;
        java.lang.Number r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: int compareTo(java.lang.Number,java.lang.Number)>(r0, r1);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.util.Iterator unique(java.util.Iterator)
    {
        java.util.List $r1, $r3;
        java.util.Iterator r0;
        java.util.ListIterator $r4;
        java.util.Collection $r2;

        r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection unique(java.util.Collection)>($r1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Collection)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.ListIterator listIterator()>();

        return $r4;
    }

    public static java.util.Collection unique(java.util.Collection)
    {
        java.util.Iterator $r3, $r5;
        java.util.Collection r0;
        java.util.ArrayList $r1;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator $r2;
        int $i0;
        java.lang.Object $r4, $r6;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof java.util.Set;

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator;

        specialinvoke $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: void <init>(org.codehaus.groovy.runtime.DefaultGroovyMethods$1)>(null);

        $r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        z3 = 0;

        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r6);

        if $i0 != 0 goto label4;

        z3 = 1;

        goto label5;

     label4:
        goto label3;

     label5:
        if z3 != 0 goto label6;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

     label6:
        goto label2;

     label7:
        interfaceinvoke r0.<java.util.Collection: void clear()>();

        interfaceinvoke r0.<java.util.Collection: boolean addAll(java.util.Collection)>($r1);

        return r0;
    }

    public static int numberAwareCompareTo(java.lang.Comparable, java.lang.Comparable)
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator $r0;
        int $i0;
        java.lang.Comparable r1, r2;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: java.lang.Comparable;

        $r0 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator;

        specialinvoke $r0.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: void <init>(org.codehaus.groovy.runtime.DefaultGroovyMethods$1)>(null);

        $i0 = virtualinvoke $r0.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        return $i0;
    }

    public static java.util.Iterator unique(java.util.Iterator, groovy.lang.Closure)
    {
        java.util.List $r1, $r4;
        java.util.Iterator r0;
        java.util.ListIterator $r5;
        java.util.Collection $r3;
        groovy.lang.Closure r2;

        r0 := @parameter0: java.util.Iterator;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection unique(java.util.Collection,groovy.lang.Closure)>($r1, r2);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Collection)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.ListIterator listIterator()>();

        return $r5;
    }

    public static java.util.Collection unique(java.util.Collection, groovy.lang.Closure)
    {
        groovy.util.OrderBy $r3;
        groovy.util.ClosureComparator $r2;
        java.util.Collection r1;
        int $i0;
        groovy.lang.Closure r0;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: groovy.lang.Closure;

        $i0 = virtualinvoke r0.<groovy.lang.Closure: int getMaximumNumberOfParameters()>();

        if $i0 != 1 goto label1;

        $r3 = new groovy.util.OrderBy;

        specialinvoke $r3.<groovy.util.OrderBy: void <init>(groovy.lang.Closure)>(r0);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection unique(java.util.Collection,java.util.Comparator)>(r1, $r3);

        goto label2;

     label1:
        $r2 = new groovy.util.ClosureComparator;

        specialinvoke $r2.<groovy.util.ClosureComparator: void <init>(groovy.lang.Closure)>(r0);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection unique(java.util.Collection,java.util.Comparator)>(r1, $r2);

     label2:
        return r1;
    }

    public static java.util.Iterator unique(java.util.Iterator, java.util.Comparator)
    {
        java.util.List $r1, $r4;
        java.util.Iterator r0;
        java.util.ListIterator $r5;
        java.util.Collection $r3;
        java.util.Comparator r2;

        r0 := @parameter0: java.util.Iterator;

        r2 := @parameter1: java.util.Comparator;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection unique(java.util.Collection,java.util.Comparator)>($r1, r2);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Collection)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.ListIterator listIterator()>();

        return $r5;
    }

    public static java.util.Collection unique(java.util.Collection, java.util.Comparator)
    {
        java.util.Iterator $r2, $r4;
        java.util.Collection r1;
        java.util.ArrayList $r0;
        int $i0;
        java.lang.Object $r3, $r5;
        java.util.Comparator r6;
        boolean $z0, $z1, z2;

        r1 := @parameter0: java.util.Collection;

        r6 := @parameter1: java.util.Comparator;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        z2 = 0;

        $r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $i0 = interfaceinvoke r6.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r5);

        if $i0 != 0 goto label3;

        z2 = 1;

        goto label4;

     label3:
        goto label2;

     label4:
        if z2 != 0 goto label5;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

     label5:
        goto label1;

     label6:
        interfaceinvoke r1.<java.util.Collection: void clear()>();

        interfaceinvoke r1.<java.util.Collection: boolean addAll(java.util.Collection)>($r0);

        return r1;
    }

    public static java.lang.Object each(java.lang.Object, groovy.lang.Closure)
    {
        groovy.lang.Closure r2;
        java.lang.Object r0;
        java.util.Iterator $r1;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r0);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Iterator each(java.util.Iterator,groovy.lang.Closure)>($r1, r2);

        return r0;
    }

    public static java.lang.Object eachWithIndex(java.lang.Object, groovy.lang.Closure)
    {
        java.lang.Object[] $r3;
        java.util.Iterator $r1;
        groovy.lang.Closure r2;
        java.lang.Integer $r5;
        int $i0, i1;
        java.lang.Object r0, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: groovy.lang.Closure;

        i1 = 0;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3[0] = $r4;

        $r5 = new java.lang.Integer;

        $i0 = i1;

        i1 = i1 + 1;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i0);

        $r3[1] = $r5;

        virtualinvoke r2.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r3);

        goto label1;

     label2:
        return r0;
    }

    private static java.util.Iterator each(java.util.Iterator, groovy.lang.Closure)
    {
        java.util.Iterator r0;
        groovy.lang.Closure r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: groovy.lang.Closure;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r2);

        goto label1;

     label2:
        return r0;
    }

    public static java.util.Map each(java.util.Map, groovy.lang.Closure)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Map r0;
        java.util.Set $r1;
        groovy.lang.Closure r5;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r5 := @parameter1: groovy.lang.Closure;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object callClosureForMapEntry(groovy.lang.Closure,java.util.Map$Entry)>(r5, r4);

        goto label1;

     label2:
        return r0;
    }

    public static java.lang.Object eachWithIndex(java.util.Map, groovy.lang.Closure)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        groovy.lang.Closure r5;
        java.util.Map r0;
        int $i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r5 := @parameter1: groovy.lang.Closure;

        i1 = 0;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $i0 = i1;

        i1 = i1 + 1;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object callClosureForMapEntryAndCounter(groovy.lang.Closure,java.util.Map$Entry,int)>(r5, r4, $i0);

        goto label1;

     label2:
        return r0;
    }

    public static java.util.List reverseEach(java.util.List, groovy.lang.Closure)
    {
        groovy.lang.Closure r2;
        java.util.List r1;
        org.codehaus.groovy.runtime.ReverseListIterator $r0;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: groovy.lang.Closure;

        $r0 = new org.codehaus.groovy.runtime.ReverseListIterator;

        specialinvoke $r0.<org.codehaus.groovy.runtime.ReverseListIterator: void <init>(java.util.List)>(r1);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Iterator each(java.util.Iterator,groovy.lang.Closure)>($r0, r2);

        return r1;
    }

    public static java.lang.Object[] reverseEach(java.lang.Object[], groovy.lang.Closure)
    {
        java.util.List $r2;
        java.lang.Object[] r1;
        groovy.lang.Closure r3;
        org.codehaus.groovy.runtime.ReverseListIterator $r0;

        r1 := @parameter0: java.lang.Object[];

        r3 := @parameter1: groovy.lang.Closure;

        $r0 = new org.codehaus.groovy.runtime.ReverseListIterator;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r0.<org.codehaus.groovy.runtime.ReverseListIterator: void <init>(java.util.List)>($r2);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Iterator each(java.util.Iterator,groovy.lang.Closure)>($r0, r3);

        return r1;
    }

    public static java.lang.Object[] reverse(java.lang.Object[])
    {
        java.util.List $r2, $r3;
        java.lang.Object[] r1, $r4;
        org.codehaus.groovy.runtime.ReverseListIterator $r0;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new org.codehaus.groovy.runtime.ReverseListIterator;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r0.<org.codehaus.groovy.runtime.ReverseListIterator: void <init>(java.util.List)>($r2);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>($r0);

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray()>();

        return $r4;
    }

    public static boolean every(java.lang.Object, groovy.lang.Closure)
    {
        java.util.Iterator $r1;
        groovy.lang.Closure r2;
        java.lang.Object r0, $r3, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = virtualinvoke r2.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r3);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r4);

        if $z1 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    public static boolean every(java.util.Map, groovy.lang.Closure)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        groovy.lang.Closure r5;
        java.util.Map r0;
        java.lang.Object $r3, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;

        r5 := @parameter1: groovy.lang.Closure;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object callClosureForMapEntry(groovy.lang.Closure,java.util.Map$Entry)>(r5, r4);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r6);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public static boolean every(java.lang.Object)
    {
        java.util.Iterator $r1;
        java.lang.Object r0, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    public static boolean any(java.lang.Object, groovy.lang.Closure)
    {
        java.util.Iterator $r1;
        groovy.lang.Closure r2;
        java.lang.Object r0, $r3, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = virtualinvoke r2.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r3);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public static boolean any(java.util.Map, groovy.lang.Closure)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        groovy.lang.Closure r5;
        java.util.Map r0;
        java.lang.Object $r3, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;

        r5 := @parameter1: groovy.lang.Closure;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object callClosureForMapEntry(groovy.lang.Closure,java.util.Map$Entry)>(r5, r4);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public static boolean any(java.lang.Object)
    {
        java.util.Iterator $r1;
        java.lang.Object r0, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r2);

        if $z1 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public static java.util.Collection grep(java.lang.Object, java.lang.Object)
    {
        groovy.lang.MetaClass $r3;
        java.util.Iterator $r4;
        java.util.Collection $r1;
        java.lang.Object r0, r2, $r5, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection createSimilarOrDefaultCollection(java.lang.Object)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: groovy.lang.MetaClass getMetaClass(java.lang.Object)>(r2);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r0);

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r2, "isCase", $r5);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r5);

     label2:
        goto label1;

     label3:
        return $r1;
    }

    public static int count(java.util.Iterator, java.lang.Object)
    {
        java.util.List $r1;
        java.util.Iterator r0;
        int $i0;
        java.lang.Object r2;

        r0 := @parameter0: java.util.Iterator;

        r2 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $i0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int count(java.util.Collection,java.lang.Object)>($r1, r2);

        return $i0;
    }

    public static int count(java.util.Collection, java.lang.Object)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        int i0;
        java.lang.Object $r2, r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r3 := @parameter1: java.lang.Object;

        i0 = 0;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean compareEqual(java.lang.Object,java.lang.Object)>($r2, r3);

        if $z0 == 0 goto label1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }

    public static java.util.List toList(java.util.Collection)
    {
        int $i0;
        java.util.ArrayList $r0;
        java.util.Collection r1;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return $r0;
    }

    public static java.util.List toList(java.util.Iterator)
    {
        java.util.Iterator r1;
        java.lang.Object $r2;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @parameter0: java.util.Iterator;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.List toList(java.util.Enumeration)
    {
        java.util.Enumeration r1;
        java.lang.Object $r2;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @parameter0: java.util.Enumeration;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.List collect(java.lang.Object, groovy.lang.Closure)
    {
        java.util.List $r4;
        java.util.Collection $r3;
        groovy.lang.Closure r2;
        java.lang.Object r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection collect(java.lang.Object,java.util.Collection,groovy.lang.Closure)>(r0, $r1, r2);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public static java.util.Collection collect(java.lang.Object, java.util.Collection, groovy.lang.Closure)
    {
        java.util.Iterator $r1;
        java.util.Collection r2;
        groovy.lang.Closure r3;
        java.lang.Object r0, $r4, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.Collection;

        r3 := @parameter2: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r4);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return r2;
    }

    public static java.util.List collect(java.util.Collection, groovy.lang.Closure)
    {
        java.util.List $r4;
        java.util.Collection r0, $r3;
        int $i0;
        groovy.lang.Closure r2;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection collect(java.util.Collection,java.util.Collection,groovy.lang.Closure)>(r0, $r1, r2);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public static java.util.Collection collect(java.util.Collection, java.util.Collection, groovy.lang.Closure)
    {
        java.util.Iterator $r1;
        java.util.Collection r0, r2;
        groovy.lang.Closure r3;
        int $i0;
        java.lang.Object $r4, $r5;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.util.Collection;

        r3 := @parameter2: groovy.lang.Closure;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r4);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $i0 = virtualinvoke r3.<groovy.lang.Closure: int getDirective()>();

        if $i0 != 1 goto label1;

        goto label2;

     label2:
        return r2;
    }

    public static java.util.List collectAll(java.util.Collection, groovy.lang.Closure)
    {
        java.util.List $r4;
        java.util.Collection r0, $r3;
        int $i0;
        groovy.lang.Closure r2;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection collectAll(java.util.Collection,java.util.Collection,groovy.lang.Closure)>(r0, $r1, r2);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public static java.util.Collection collectAll(java.util.Collection, java.util.Collection, groovy.lang.Closure)
    {
        java.util.Iterator $r1;
        java.util.Collection r0, r2, r6, $r7, $r8;
        groovy.lang.Closure r4;
        int $i0, $i1;
        java.lang.Object $r3, $r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.util.Collection;

        r4 := @parameter2: groovy.lang.Closure;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r3 instanceof java.util.Collection;

        if $z1 == 0 goto label2;

        r6 = (java.util.Collection) $r3;

        $i1 = interfaceinvoke r6.<java.util.Collection: int size()>();

        $r7 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection createSimilarCollection(java.util.Collection,int)>(r2, $i1);

        $r8 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection collectAll(java.util.Collection,java.util.Collection,groovy.lang.Closure)>(r6, $r7, r4);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        goto label3;

     label2:
        $r5 = virtualinvoke r4.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r5);

     label3:
        $i0 = virtualinvoke r4.<groovy.lang.Closure: int getDirective()>();

        if $i0 != 1 goto label4;

        goto label5;

     label4:
        goto label1;

     label5:
        return r2;
    }

    public static java.util.Collection collect(java.util.Map, java.util.Collection, groovy.lang.Closure)
    {
        java.lang.Object[] $r10;
        groovy.lang.Closure r0;
        java.util.Map r2;
        int $i0;
        boolean z0, $z1, $z2;
        java.util.Map$Entry r9;
        java.util.Iterator $r4;
        java.util.Collection r5;
        java.lang.Class[] $r1;
        java.util.Set $r3;
        java.lang.Object $r6, $r7, $r8, $r11, $r12, $r13;

        r2 := @parameter0: java.util.Map;

        r5 := @parameter1: java.util.Collection;

        r0 := @parameter2: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        if $i0 != 2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        if z0 == 0 goto label4;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r10 = newarray (java.lang.Object)[2];

        $r11 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10[0] = $r11;

        $r12 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10[1] = $r12;

        $r13 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r10);

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r13);

        goto label3;

     label4:
        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r6);

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        goto label3;

     label5:
        return r5;
    }

    public static java.util.List collect(java.util.Map, groovy.lang.Closure)
    {
        java.util.List $r4;
        java.util.Map r0;
        java.util.Collection $r3;
        int $i0;
        groovy.lang.Closure r2;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.util.Map;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection collect(java.util.Map,java.util.Collection,groovy.lang.Closure)>(r0, $r1, r2);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public static java.lang.Object find(java.lang.Object, groovy.lang.Closure)
    {
        java.util.Iterator $r1;
        groovy.lang.Closure r3;
        java.lang.Object r0, $r2, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = virtualinvoke r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r2);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        return $r2;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static java.lang.Object find(java.util.Collection, groovy.lang.Closure)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        groovy.lang.Closure r3;
        java.lang.Object $r2, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r3 := @parameter1: groovy.lang.Closure;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = virtualinvoke r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r2);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        return $r2;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static java.lang.Object find(java.util.Map, groovy.lang.Closure)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        groovy.lang.Closure r5;
        java.util.Map r0;
        java.lang.Object $r3, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;

        r5 := @parameter1: groovy.lang.Closure;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object callClosureForMapEntry(groovy.lang.Closure,java.util.Map$Entry)>(r5, r4);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static java.util.Collection findAll(java.lang.Object, groovy.lang.Closure)
    {
        java.util.Iterator $r2;
        java.util.Collection $r4;
        groovy.lang.Closure r3;
        java.lang.Object r1;
        java.util.ArrayList $r0;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: groovy.lang.Closure;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r1);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection findAll(groovy.lang.Closure,java.util.Collection,java.util.Iterator)>(r3, $r0, $r2);

        return $r4;
    }

    public static java.util.Collection findAll(java.util.Collection, groovy.lang.Closure)
    {
        java.util.Iterator $r2;
        java.util.Collection r0, $r1, $r4;
        groovy.lang.Closure r3;

        r0 := @parameter0: java.util.Collection;

        r3 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection createSimilarCollection(java.util.Collection)>(r0);

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection findAll(groovy.lang.Closure,java.util.Collection,java.util.Iterator)>(r3, $r1, $r2);

        return $r4;
    }

    private static java.util.Collection findAll(groovy.lang.Closure, java.util.Collection, java.util.Iterator)
    {
        java.util.Iterator r0;
        java.util.Collection r1;
        groovy.lang.Closure r3;
        java.lang.Object $r2, $r4;
        boolean $z0, $z1;

        r3 := @parameter0: groovy.lang.Closure;

        r1 := @parameter1: java.util.Collection;

        r0 := @parameter2: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r4 = virtualinvoke r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r2);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r2);

     label2:
        goto label1;

     label3:
        return r1;
    }

    public static java.util.Collection split(java.lang.Object, groovy.lang.Closure)
    {
        java.util.Iterator $r3;
        java.util.Collection $r5;
        groovy.lang.Closure r4;
        java.lang.Object r2;
        java.util.ArrayList $r0, $r1;

        r2 := @parameter0: java.lang.Object;

        r4 := @parameter1: groovy.lang.Closure;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r2);

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection split(groovy.lang.Closure,java.util.Collection,java.util.Collection,java.util.Iterator)>(r4, $r0, $r1, $r3);

        return $r5;
    }

    public static java.util.Collection split(java.util.Collection, groovy.lang.Closure)
    {
        java.util.Iterator $r3;
        java.util.Collection r0, $r1, $r2, $r5;
        groovy.lang.Closure r4;

        r0 := @parameter0: java.util.Collection;

        r4 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection createSimilarCollection(java.util.Collection)>(r0);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection createSimilarCollection(java.util.Collection)>(r0);

        $r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection split(groovy.lang.Closure,java.util.Collection,java.util.Collection,java.util.Iterator)>(r4, $r1, $r2, $r3);

        return $r5;
    }

    private static java.util.Collection split(groovy.lang.Closure, java.util.Collection, java.util.Collection, java.util.Iterator)
    {
        java.util.Iterator r1;
        java.util.Collection r2, r3;
        groovy.lang.Closure r5;
        java.util.ArrayList $r0;
        java.lang.Object $r4, $r6;
        boolean $z0, $z1;

        r5 := @parameter0: groovy.lang.Closure;

        r2 := @parameter1: java.util.Collection;

        r3 := @parameter2: java.util.Collection;

        r1 := @parameter3: java.util.Iterator;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r6 = virtualinvoke r5.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r4);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        goto label3;

     label2:
        interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label3:
        goto label1;

     label4:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r2);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r3);

        return $r0;
    }

    public static java.util.List combinations(java.util.Collection)
    {
        java.util.List $r1;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <groovy.util.GroovyCollections: java.util.List combinations(java.util.Collection)>(r0);

        return $r1;
    }

    public static java.util.List transpose(java.util.List)
    {
        java.util.List r0, $r1;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <groovy.util.GroovyCollections: java.util.List transpose(java.util.List)>(r0);

        return $r1;
    }

    public static java.util.Map findAll(java.util.Map, groovy.lang.Closure)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        groovy.lang.Closure r6;
        java.util.HashMap $r0;
        java.util.Map r1;
        int $i0;
        java.lang.Object $r4, $r7, $r8, $r9;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Map;

        r6 := @parameter1: groovy.lang.Closure;

        $r0 = new java.util.HashMap;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object callClosureForMapEntry(groovy.lang.Closure,java.util.Map$Entry)>(r6, r5);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public static java.util.Map groupBy(java.util.Collection, groovy.lang.Closure)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        groovy.lang.Closure r4;
        java.util.HashMap $r0;
        java.lang.Object $r3, $r5;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        r4 := @parameter1: groovy.lang.Closure;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke r4.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r3);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void groupAnswer(java.util.Map,java.lang.Object,java.lang.Object)>($r0, $r3, $r5);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.Map groupEntriesBy(java.util.Map, groovy.lang.Closure)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        groovy.lang.Closure r6;
        java.util.HashMap $r0;
        java.util.Map r1;
        java.lang.Object $r4, $r7;
        boolean $z0;

        r1 := @parameter0: java.util.Map;

        r6 := @parameter1: groovy.lang.Closure;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object callClosureForMapEntry(groovy.lang.Closure,java.util.Map$Entry)>(r6, r5);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void groupAnswer(java.util.Map,java.lang.Object,java.lang.Object)>($r0, r5, $r7);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.Map groupBy(java.util.Map, groovy.lang.Closure)
    {
        groovy.lang.Closure r1;
        java.util.HashMap $r3, $r11;
        java.util.Map r0, $r2;
        int $i0, i1;
        boolean $z0;
        java.util.Map$Entry r7, r13;
        java.util.Iterator $r5;
        java.util.Set $r4;
        java.util.List r10;
        java.lang.Object $r6, $r8, $r9, $r12, $r14, $r15;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Map groupEntriesBy(java.util.Map,groovy.lang.Closure)>(r0, r1);

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r10 = (java.util.List) $r9;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        i1 = 0;

     label2:
        $i0 = interfaceinvoke r10.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r12 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i1);

        r13 = (java.util.Map$Entry) $r12;

        $r14 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

        i1 = i1 + 1;

        goto label2;

     label3:
        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r11);

        goto label1;

     label4:
        return $r3;
    }

    protected static void groupAnswer(java.util.Map, java.lang.Object, java.lang.Object)
    {
        java.util.List $r5;
        java.util.Map r0;
        java.lang.Object r1, r3, $r4;
        boolean $z0;
        java.util.ArrayList $r2;

        r0 := @parameter0: java.util.Map;

        r3 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (java.util.List) $r4;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label2;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

     label2:
        return;
    }

    protected static java.lang.Object callClosureForMapEntry(groovy.lang.Closure, java.util.Map$Entry)
    {
        java.util.Map$Entry r1;
        java.lang.Object[] $r3;
        groovy.lang.Closure r0;
        int $i0;
        java.lang.Object $r2, $r4, $r5, $r6;

        r0 := @parameter0: groovy.lang.Closure;

        r1 := @parameter1: java.util.Map$Entry;

        $i0 = virtualinvoke r0.<groovy.lang.Closure: int getMaximumNumberOfParameters()>();

        if $i0 != 2 goto label1;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3[0] = $r4;

        $r5 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3[1] = $r5;

        $r6 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r3);

        return $r6;

     label1:
        $r2 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r1);

        return $r2;
    }

    protected static java.lang.Object callClosureForLine(groovy.lang.Closure, java.lang.String, int)
    {
        java.lang.Object[] $r3;
        groovy.lang.Closure r0;
        java.lang.Integer $r4;
        int $i0, i1;
        java.lang.Object $r2, $r5;
        java.lang.String r1;

        r0 := @parameter0: groovy.lang.Closure;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $i0 = virtualinvoke r0.<groovy.lang.Closure: int getMaximumNumberOfParameters()>();

        if $i0 != 2 goto label1;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i1);

        $r3[1] = $r4;

        $r5 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r3);

        return $r5;

     label1:
        $r2 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r1);

        return $r2;
    }

    protected static java.lang.Object callClosureForMapEntryAndCounter(groovy.lang.Closure, java.util.Map$Entry, int)
    {
        java.util.Map$Entry r1;
        java.lang.Object[] $r3, $r6;
        groovy.lang.Closure r0;
        java.lang.Integer $r4, $r9;
        int $i0, $i1, i2;
        java.lang.Object $r2, $r5, $r7, $r8, $r10;

        r0 := @parameter0: groovy.lang.Closure;

        r1 := @parameter1: java.util.Map$Entry;

        i2 := @parameter2: int;

        $i0 = virtualinvoke r0.<groovy.lang.Closure: int getMaximumNumberOfParameters()>();

        if $i0 != 3 goto label1;

        $r6 = newarray (java.lang.Object)[3];

        $r7 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6[0] = $r7;

        $r8 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6[1] = $r8;

        $r9 = new java.lang.Integer;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>(i2);

        $r6[2] = $r9;

        $r10 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r6);

        return $r10;

     label1:
        $i1 = virtualinvoke r0.<groovy.lang.Closure: int getMaximumNumberOfParameters()>();

        if $i1 != 2 goto label2;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i2);

        $r3[1] = $r4;

        $r5 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r3);

        return $r5;

     label2:
        $r2 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r1);

        return $r2;
    }

    public static java.lang.Object inject(java.util.Collection, java.lang.Object, groovy.lang.Closure)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        groovy.lang.Closure r3;
        java.lang.Object r2, $r4;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: groovy.lang.Closure;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object inject(java.util.Iterator,java.lang.Object,groovy.lang.Closure)>($r1, r2, r3);

        return $r4;
    }

    public static java.lang.Object inject(java.util.Iterator, java.lang.Object, groovy.lang.Closure)
    {
        java.lang.Object[] r0;
        java.util.Iterator r1;
        groovy.lang.Closure r3;
        java.lang.Object $r2, r4;
        boolean $z0;

        r1 := @parameter0: java.util.Iterator;

        r4 := @parameter1: java.lang.Object;

        r3 := @parameter2: groovy.lang.Closure;

        r0 = newarray (java.lang.Object)[2];

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r0[0] = r4;

        r0[1] = $r2;

        r4 = virtualinvoke r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>(r0);

        goto label1;

     label2:
        return r4;
    }

    public static java.lang.Object inject(java.lang.Object, java.lang.Object, groovy.lang.Closure)
    {
        java.util.Iterator $r1;
        groovy.lang.Closure r3;
        java.lang.Object r0, r2, $r4;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r0);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object inject(java.util.Iterator,java.lang.Object,groovy.lang.Closure)>($r1, r2, r3);

        return $r4;
    }

    public static java.lang.Object inject(java.lang.Object[], java.lang.Object, groovy.lang.Closure)
    {
        java.lang.Object[] r0, r2;
        groovy.lang.Closure r4;
        int $i0, i1;
        java.lang.Object r1, $r3, r5;

        r2 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        r4 := @parameter2: groovy.lang.Closure;

        r0 = newarray (java.lang.Object)[2];

        r5 = r1;

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label2;

        r0[0] = r5;

        $r3 = r2[i1];

        r0[1] = $r3;

        r5 = virtualinvoke r4.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>(r0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r5;
    }

    public static java.lang.Object sum(java.util.Collection)
    {
        java.lang.Object $r1;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object sum(java.util.Collection,java.lang.Object,boolean)>(r0, null, 1);

        return $r1;
    }

    public static java.lang.Object sum(java.util.Iterator)
    {
        java.util.List $r1;
        java.lang.Object $r2;
        java.util.Iterator r0;

        r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object sum(java.util.Collection,java.lang.Object,boolean)>($r1, null, 1);

        return $r2;
    }

    public static java.lang.Object sum(java.util.Collection, java.lang.Object)
    {
        java.lang.Object r1, $r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object sum(java.util.Collection,java.lang.Object,boolean)>(r0, r1, 0);

        return $r2;
    }

    public static java.lang.Object sum(java.util.Iterator, java.lang.Object)
    {
        java.util.List $r1;
        java.util.Iterator r0;
        java.lang.Object r2, $r3;

        r0 := @parameter0: java.util.Iterator;

        r2 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object sum(java.util.Collection,java.lang.Object,boolean)>($r1, r2, 0);

        return $r3;
    }

    private static java.lang.Object sum(java.util.Collection, java.lang.Object, boolean)
    {
        groovy.lang.MetaClass $r5;
        java.lang.Object[] r1;
        java.util.Iterator $r3;
        java.util.Collection r2;
        java.lang.Object r0, $r4, r6;
        boolean z0, $z1;

        r2 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r6 = r0;

        r1 = newarray (java.lang.Object)[1];

        $r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r1[0] = $r4;

        if z0 == 0 goto label2;

        r6 = r1[0];

        z0 = 0;

        goto label1;

     label2:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: groovy.lang.MetaClass getMetaClass(java.lang.Object)>(r6);

        r6 = interfaceinvoke $r5.<groovy.lang.MetaClass: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])>(r6, "plus", r1);

        goto label1;

     label3:
        return r6;
    }

    public static java.lang.Object sum(java.util.Collection, groovy.lang.Closure)
    {
        groovy.lang.Closure r1;
        java.lang.Object $r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object sum(java.util.Collection,java.lang.Object,groovy.lang.Closure,boolean)>(r0, null, r1, 1);

        return $r2;
    }

    public static java.lang.Object sum(java.util.Collection, java.lang.Object, groovy.lang.Closure)
    {
        java.util.Collection r0;
        groovy.lang.Closure r2;
        java.lang.Object r1, $r3;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: groovy.lang.Closure;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object sum(java.util.Collection,java.lang.Object,groovy.lang.Closure,boolean)>(r0, r1, r2, 0);

        return $r3;
    }

    private static java.lang.Object sum(java.util.Collection, java.lang.Object, groovy.lang.Closure, boolean)
    {
        groovy.lang.MetaClass $r8;
        java.lang.Object[] r1, r2;
        java.util.Iterator $r4;
        java.util.Collection r3;
        groovy.lang.Closure r6;
        java.lang.Object r0, $r5, $r7, r9;
        boolean z0, $z1;

        r3 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.lang.Object;

        r6 := @parameter2: groovy.lang.Closure;

        z0 := @parameter3: boolean;

        r9 = r0;

        r1 = newarray (java.lang.Object)[1];

        r2 = newarray (java.lang.Object)[1];

        $r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r1[0] = $r5;

        $r7 = virtualinvoke r6.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>(r1);

        r2[0] = $r7;

        if z0 == 0 goto label2;

        r9 = r2[0];

        z0 = 0;

        goto label1;

     label2:
        $r8 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: groovy.lang.MetaClass getMetaClass(java.lang.Object)>(r9);

        r9 = interfaceinvoke $r8.<groovy.lang.MetaClass: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])>(r9, "plus", r2);

        goto label1;

     label3:
        return r9;
    }

    public static java.lang.String join(java.util.Iterator, java.lang.String)
    {
        java.util.List $r1;
        java.util.Iterator r0;
        java.lang.String r2, $r3;

        r0 := @parameter0: java.util.Iterator;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String join(java.util.Collection,java.lang.String)>($r1, r2);

        return $r3;
    }

    public static java.lang.String join(java.util.Collection, java.lang.String)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        java.lang.StringBuffer $r0;
        java.lang.Object $r4;
        java.lang.String $r3, $r5, r6;
        boolean z0, $z1;

        r1 := @parameter0: java.util.Collection;

        r6 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        z0 = 1;

        if r6 != null goto label1;

        r6 = "";

     label1:
        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if z0 == 0 goto label3;

        z0 = 0;

        goto label4;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

     label4:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toString(java.lang.Object)>($r4);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        goto label2;

     label5:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String join(java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] r1;
        java.lang.StringBuffer $r0;
        int i0, $i1;
        java.lang.Object $r3;
        java.lang.String $r2, $r4, r5;
        boolean z0;

        r1 := @parameter0: java.lang.Object[];

        r5 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        z0 = 1;

        if r5 != null goto label1;

        r5 = "";

     label1:
        i0 = 0;

     label2:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label5;

        $r3 = r1[i0];

        $r4 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toString(java.lang.Object)>($r3);

        if z0 == 0 goto label3;

        z0 = 0;

        goto label4;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        i0 = i0 + 1;

        goto label2;

     label5:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.Object min(java.util.Collection)
    {
        java.lang.Object $r1;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <groovy.util.GroovyCollections: java.lang.Object min(java.util.Collection)>(r0);

        return $r1;
    }

    public static java.lang.Object min(java.util.Iterator)
    {
        java.util.List $r1;
        java.lang.Object $r2;
        java.util.Iterator r0;

        r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object min(java.util.Collection)>($r1);

        return $r2;
    }

    public static java.lang.Object min(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object min(java.util.Collection)>($r1);

        return $r2;
    }

    public static java.lang.Object min(java.util.Collection, java.util.Comparator)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        int $i0;
        java.lang.Object $r2, r4;
        java.util.Comparator r3;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r3 := @parameter1: java.util.Comparator;

        r4 = null;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        if r4 == null goto label2;

        $i0 = interfaceinvoke r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r2, r4);

        if $i0 >= 0 goto label3;

     label2:
        r4 = $r2;

     label3:
        goto label1;

     label4:
        return r4;
    }

    public static java.lang.Object min(java.util.Iterator, java.util.Comparator)
    {
        java.util.List $r1;
        java.util.Iterator r0;
        java.lang.Object $r3;
        java.util.Comparator r2;

        r0 := @parameter0: java.util.Iterator;

        r2 := @parameter1: java.util.Comparator;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object min(java.util.Collection,java.util.Comparator)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object min(java.lang.Object[], java.util.Comparator)
    {
        java.util.List $r1;
        java.lang.Object[] r0;
        java.lang.Object $r3;
        java.util.Comparator r2;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.util.Comparator;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.lang.Object[])>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object min(java.util.Collection,java.util.Comparator)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object min(java.util.Collection, groovy.lang.Closure)
    {
        java.util.Iterator $r2;
        groovy.util.ClosureComparator $r5;
        java.util.Collection r1;
        groovy.lang.Closure r0;
        int $i0;
        java.lang.Object $r3, $r4, $r6, r7, r8;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: groovy.lang.Closure;

        $i0 = virtualinvoke r0.<groovy.lang.Closure: int getMaximumNumberOfParameters()>();

        if $i0 == 1 goto label1;

        $r5 = new groovy.util.ClosureComparator;

        specialinvoke $r5.<groovy.util.ClosureComparator: void <init>(groovy.lang.Closure)>(r0);

        $r6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object min(java.util.Collection,java.util.Comparator)>(r1, $r5);

        return $r6;

     label1:
        r7 = null;

        r8 = null;

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r3);

        if r7 == null goto label3;

        $z1 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareLessThan(java.lang.Object,java.lang.Object)>($r4, r8);

        if $z1 == 0 goto label4;

     label3:
        r7 = $r3;

        r8 = $r4;

     label4:
        goto label2;

     label5:
        return r7;
    }

    public static java.lang.Object min(java.util.Iterator, groovy.lang.Closure)
    {
        java.util.List $r1;
        java.util.Iterator r0;
        groovy.lang.Closure r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.Iterator;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object min(java.util.Collection,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object min(java.lang.Object[], groovy.lang.Closure)
    {
        java.util.List $r1;
        java.lang.Object[] r0;
        groovy.lang.Closure r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.lang.Object[])>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object min(java.util.Collection,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object max(java.util.Collection)
    {
        java.lang.Object $r1;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <groovy.util.GroovyCollections: java.lang.Object max(java.util.Collection)>(r0);

        return $r1;
    }

    public static java.lang.Object max(java.util.Iterator)
    {
        java.util.List $r1;
        java.lang.Object $r2;
        java.util.Iterator r0;

        r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object max(java.util.Collection)>($r1);

        return $r2;
    }

    public static java.lang.Object max(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object max(java.util.Collection)>($r1);

        return $r2;
    }

    public static java.lang.Object max(java.util.Collection, groovy.lang.Closure)
    {
        java.util.Iterator $r2;
        groovy.util.ClosureComparator $r5;
        java.util.Collection r1;
        groovy.lang.Closure r0;
        int $i0;
        java.lang.Object $r3, $r4, $r6, r7, r8;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: groovy.lang.Closure;

        $i0 = virtualinvoke r0.<groovy.lang.Closure: int getMaximumNumberOfParameters()>();

        if $i0 == 1 goto label1;

        $r5 = new groovy.util.ClosureComparator;

        specialinvoke $r5.<groovy.util.ClosureComparator: void <init>(groovy.lang.Closure)>(r0);

        $r6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object max(java.util.Collection,java.util.Comparator)>(r1, $r5);

        return $r6;

     label1:
        r7 = null;

        r8 = null;

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r3);

        if r7 == null goto label3;

        $z1 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareLessThan(java.lang.Object,java.lang.Object)>(r8, $r4);

        if $z1 == 0 goto label4;

     label3:
        r7 = $r3;

        r8 = $r4;

     label4:
        goto label2;

     label5:
        return r7;
    }

    public static java.lang.Object max(java.util.Iterator, groovy.lang.Closure)
    {
        java.util.List $r1;
        java.util.Iterator r0;
        groovy.lang.Closure r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.Iterator;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object max(java.util.Collection,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object max(java.lang.Object[], groovy.lang.Closure)
    {
        java.util.List $r1;
        java.lang.Object[] r0;
        groovy.lang.Closure r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.lang.Object[])>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object max(java.util.Collection,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object max(java.util.Collection, java.util.Comparator)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        int $i0;
        java.lang.Object $r2, r4;
        java.util.Comparator r3;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r3 := @parameter1: java.util.Comparator;

        r4 = null;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        if r4 == null goto label2;

        $i0 = interfaceinvoke r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r2, r4);

        if $i0 <= 0 goto label3;

     label2:
        r4 = $r2;

     label3:
        goto label1;

     label4:
        return r4;
    }

    public static java.lang.Object max(java.util.Iterator, java.util.Comparator)
    {
        java.util.List $r1;
        java.util.Iterator r0;
        java.lang.Object $r3;
        java.util.Comparator r2;

        r0 := @parameter0: java.util.Iterator;

        r2 := @parameter1: java.util.Comparator;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object max(java.util.Collection,java.util.Comparator)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object max(java.lang.Object[], java.util.Comparator)
    {
        java.util.List $r1;
        java.lang.Object[] r0;
        java.lang.Object $r3;
        java.util.Comparator r2;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.util.Comparator;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.lang.Object[])>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object max(java.util.Collection,java.util.Comparator)>($r1, r2);

        return $r3;
    }

    public static int size(java.util.Iterator)
    {
        int i0;
        java.util.Iterator r0;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        i0 = 0;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }

    public static int size(java.lang.String)
    {
        int $i0;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        return $i0;
    }

    public static int size(java.lang.StringBuffer)
    {
        int $i0;
        java.lang.StringBuffer r0;

        r0 := @parameter0: java.lang.StringBuffer;

        $i0 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        return $i0;
    }

    public static long size(java.io.File)
    {
        long $l0;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        return $l0;
    }

    public static long size(java.util.regex.Matcher)
    {
        int $i0;
        long $l1;
        java.util.regex.Matcher r0;

        r0 := @parameter0: java.util.regex.Matcher;

        $i0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int getCount(java.util.regex.Matcher)>(r0);

        $l1 = (long) $i0;

        return $l1;
    }

    public static int size(java.lang.Object[])
    {
        int $i0;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        return $i0;
    }

    public static java.lang.CharSequence getAt(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0, $r1;
        int $i0, $i1, $i2, i3;

        r0 := @parameter0: java.lang.CharSequence;

        i3 := @parameter1: int;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>(i3, $i0);

        $i2 = $i1 + 1;

        $r1 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i2);

        return $r1;
    }

    public static java.lang.String getAt(java.lang.String, int)
    {
        int $i0, $i1, $i2, i3;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>(i3, $i0);

        $i2 = $i1 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        return $r1;
    }

    public static java.lang.CharSequence getAt(java.lang.CharSequence, groovy.lang.Range)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8;
        java.lang.String $r4;
        boolean $z0, z1, $z2;
        java.lang.CharSequence r2, $r5, $r6;
        groovy.lang.Range r0;
        java.lang.Comparable $r1, $r3;

        r2 := @parameter0: java.lang.CharSequence;

        r0 := @parameter1: groovy.lang.Range;

        $r1 = interfaceinvoke r0.<groovy.lang.Range: java.lang.Comparable getFrom()>();

        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r1);

        $i1 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        $i2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>($i0, $i1);

        i6 = $i2;

        $r3 = interfaceinvoke r0.<groovy.lang.Range: java.lang.Comparable getTo()>();

        $i3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r3);

        $i4 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        $i5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>($i3, $i4);

        i7 = $i5;

        $z0 = interfaceinvoke r0.<groovy.lang.Range: boolean isReverse()>();

        z1 = $z0;

        if $i2 <= $i5 goto label3;

        i6 = $i5;

        i7 = $i2;

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z1 = $z2;

     label3:
        $i8 = i7 + 1;

        $r5 = interfaceinvoke r2.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i6, $i8);

        if z1 == 0 goto label4;

        $r4 = (java.lang.String) $r5;

        $r6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String reverse(java.lang.String)>($r4);

        goto label5;

     label4:
        $r6 = $r5;

     label5:
        return $r6;
    }

    public static java.lang.CharSequence getAt(java.lang.CharSequence, groovy.lang.IntRange)
    {
        java.lang.CharSequence r0, $r2;
        groovy.lang.IntRange r1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: groovy.lang.IntRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.CharSequence getAt(java.lang.CharSequence,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.CharSequence getAt(java.lang.CharSequence, groovy.lang.EmptyRange)
    {
        java.lang.CharSequence r0;
        groovy.lang.EmptyRange r1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: groovy.lang.EmptyRange;

        return "";
    }

    public static java.lang.String getAt(java.lang.String, groovy.lang.IntRange)
    {
        java.lang.String r0, $r2;
        groovy.lang.IntRange r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: groovy.lang.IntRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getAt(java.lang.String,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.String getAt(java.lang.String, groovy.lang.EmptyRange)
    {
        java.lang.String r0;
        groovy.lang.EmptyRange r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: groovy.lang.EmptyRange;

        return "";
    }

    public static java.lang.String getAt(java.lang.String, groovy.lang.Range)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8;
        java.lang.String r2, $r4, r5;
        boolean $z0, z1, $z2;
        groovy.lang.Range r0;
        java.lang.Comparable $r1, $r3;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: groovy.lang.Range;

        $r1 = interfaceinvoke r0.<groovy.lang.Range: java.lang.Comparable getFrom()>();

        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r1);

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $i2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>($i0, $i1);

        i6 = $i2;

        $r3 = interfaceinvoke r0.<groovy.lang.Range: java.lang.Comparable getTo()>();

        $i3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r3);

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        $i5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>($i3, $i4);

        i7 = $i5;

        $z0 = interfaceinvoke r0.<groovy.lang.Range: boolean isReverse()>();

        z1 = $z0;

        if $i2 <= $i5 goto label3;

        i7 = $i2;

        i6 = $i5;

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z1 = $z2;

     label3:
        $i8 = i7 + 1;

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i6, $i8);

        r5 = $r4;

        if z1 == 0 goto label4;

        r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String reverse(java.lang.String)>($r4);

     label4:
        return r5;
    }

    public static java.lang.String reverse(java.lang.String)
    {
        java.lang.StringBuffer $r3;
        int $i0, i2, $i4;
        char $c1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>($i0);

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label2;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label2:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.net.URL toURL(java.lang.String) throws java.net.MalformedURLException
    {
        java.lang.String r1;
        java.net.URL $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.net.URL;

        specialinvoke $r0.<java.net.URL: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static java.net.URI toURI(java.lang.String) throws java.net.URISyntaxException
    {
        java.net.URI $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.net.URI;

        specialinvoke $r0.<java.net.URI: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static java.util.regex.Pattern bitwiseNegate(java.lang.String)
    {
        java.lang.String r0;
        java.util.regex.Pattern $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.String replaceAll(java.lang.String, java.lang.String, groovy.lang.Closure)
    {
        java.lang.Object[] $r7;
        groovy.lang.Closure r6;
        java.util.ArrayList $r5;
        java.util.regex.Matcher $r3;
        java.lang.StringBuffer $r4;
        int $i0, $i1, $i2, i3;
        java.lang.String r0, r2, $r9, $r10, $r11, $r12;
        boolean $z0, $z1;
        java.lang.Object $r8;
        java.util.regex.Pattern $r1;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r6 := @parameter2: groovy.lang.Closure;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r0);

        $r3 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label4;

        $r4 = new java.lang.StringBuffer;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = $i0 + 16;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i1);

     label1:
        $i2 = virtualinvoke $r3.<java.util.regex.Matcher: int groupCount()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i3 = 0;

     label2:
        if i3 > $i2 goto label3;

        $r12 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(i3);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r12);

        i3 = i3 + 1;

        goto label2;

     label3:
        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray()>();

        $r8 = virtualinvoke r6.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r7);

        $r9 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toString(java.lang.Object)>($r8);

        $r10 = staticinvoke <groovy.text.RegexUtils: java.lang.String quoteReplacement(java.lang.String)>($r9);

        virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r4, $r10);

        $z1 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z1 != 0 goto label1;

        virtualinvoke $r3.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>($r4);

        $r11 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;

     label4:
        return r2;
    }

    public static java.lang.String replace(java.lang.String, java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r3;
        java.lang.String $r1, $r2, $r4, $r5, r6, $r7;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.CharSequence;

        r3 := @parameter2: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = staticinvoke <groovy.text.RegexUtils: java.lang.String quote(java.lang.String)>($r1);

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = staticinvoke <groovy.text.RegexUtils: java.lang.String quoteReplacement(java.lang.String)>($r4);

        $r7 = virtualinvoke r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>($r2, $r5);

        return $r7;
    }

    private static java.lang.String getPadding(java.lang.String, int)
    {
        java.lang.Integer $r2;
        int $i0, i1, $i2, $i3, $i4;
        java.lang.String r0, $r1, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 >= i1 goto label1;

        $r2 = new java.lang.Integer;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = i1 / $i2;

        $i4 = $i3 + 1;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>($i4);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String multiply(java.lang.String,java.lang.Number)>(r0, $r2);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        return $r4;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        return $r1;
    }

    public static java.lang.String padLeft(java.lang.String, java.lang.Number, java.lang.String)
    {
        java.lang.StringBuffer $r2, $r5, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1, r3, $r4, $r7;
        java.lang.Number r0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Number;

        r3 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 > $i1 goto label1;

        return r1;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = $i0 - $i2;

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getPadding(java.lang.String,int)>(r3, $i3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String padLeft(java.lang.String, java.lang.Number)
    {
        java.lang.String r0, $r2;
        java.lang.Number r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String padLeft(java.lang.String,java.lang.Number,java.lang.String)>(r0, r1, " ");

        return $r2;
    }

    public static java.lang.String padRight(java.lang.String, java.lang.Number, java.lang.String)
    {
        java.lang.StringBuffer $r2, $r3, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1, r4, $r5, $r7;
        java.lang.Number r0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Number;

        r4 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 > $i1 goto label1;

        return r1;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = $i0 - $i2;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getPadding(java.lang.String,int)>(r4, $i3);

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String padRight(java.lang.String, java.lang.Number)
    {
        java.lang.String r0, $r2;
        java.lang.Number r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String padRight(java.lang.String,java.lang.Number,java.lang.String)>(r0, r1, " ");

        return $r2;
    }

    public static java.lang.String center(java.lang.String, java.lang.Number, java.lang.String)
    {
        java.lang.StringBuffer $r3, $r5, $r6, $r7, $r9, $r10, $r11, $r12;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String r1, r2, $r4, $r8, $r13, $r14;
        java.lang.Number r0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Number;

        r2 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 > $i1 goto label1;

        return r1;

     label1:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        i3 = $i0 - $i2;

        $i4 = i3 % 2;

        if $i4 != 1 goto label2;

        $i8 = i3 / 2;

        $i9 = $i8 + 1;

        $r14 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getPadding(java.lang.String,int)>(r2, $i9);

        goto label3;

     label2:
        $i5 = i3 / 2;

        $r14 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getPadding(java.lang.String,int)>(r2, $i5);

     label3:
        $i6 = i3 % 2;

        if $i6 != 0 goto label4;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;

     label4:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $i7 = i3 / 2;

        $r4 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(0, $i7);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String center(java.lang.String, java.lang.Number)
    {
        java.lang.String r0, $r2;
        java.lang.Number r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String center(java.lang.String,java.lang.Number,java.lang.String)>(r0, r1, " ");

        return $r2;
    }

    public static java.lang.Object getAt(java.util.regex.Matcher, int)
    {
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.IllegalStateException $r14;
        java.util.ArrayList $r12;
        java.util.regex.Matcher r0;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        java.lang.String $r10, $r11, $r13;
        boolean $z0;

        r0 := @parameter0: java.util.regex.Matcher;

        i7 := @parameter1: int;

     label01:
        $i0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int getCount(java.util.regex.Matcher)>(r0);

        $i1 = neg $i0;

        if i7 < $i1 goto label02;

        if i7 < $i0 goto label03;

     label02:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("index is out of range ");

        $i2 = neg $i0;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("..");

        $i3 = $i0 - 1;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (index = ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r1;

     label03:
        $i4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>(i7, $i0);

        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();

        i8 = 0;

     label04:
        if i8 > $i4 goto label05;

        virtualinvoke r0.<java.util.regex.Matcher: boolean find()>();

        i8 = i8 + 1;

        goto label04;

     label05:
        $z0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: boolean hasGroup(java.util.regex.Matcher)>(r0);

        if $z0 == 0 goto label08;

        $r12 = new java.util.ArrayList;

        $i5 = virtualinvoke r0.<java.util.regex.Matcher: int groupCount()>();

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>($i5);

        i9 = 0;

     label06:
        $i6 = virtualinvoke r0.<java.util.regex.Matcher: int groupCount()>();

        if i9 > $i6 goto label07;

        $r13 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>(i9);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        i9 = i9 + 1;

        goto label06;

     label07:
        return $r12;

     label08:
        $r11 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group()>();

     label09:
        return $r11;

     label10:
        $r14 := @caughtexception;

        return null;

        catch java.lang.IllegalStateException from label01 to label07 with label10;
        catch java.lang.IllegalStateException from label08 to label09 with label10;
    }

    public static void setIndex(java.util.regex.Matcher, int)
    {
        java.lang.IndexOutOfBoundsException $r1;
        java.util.regex.Matcher r0;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;
        java.lang.String $r10;

        r0 := @parameter0: java.util.regex.Matcher;

        i5 := @parameter1: int;

        $i0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int getCount(java.util.regex.Matcher)>(r0);

        $i1 = neg $i0;

        if i5 < $i1 goto label1;

        if i5 < $i0 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("index is out of range ");

        $i2 = neg $i0;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("..");

        $i3 = $i0 - 1;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (index = ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r1;

     label2:
        if i5 != 0 goto label3;

        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();

        goto label8;

     label3:
        if i5 <= 0 goto label6;

        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();

        i6 = 0;

     label4:
        if i6 >= i5 goto label5;

        virtualinvoke r0.<java.util.regex.Matcher: boolean find()>();

        i6 = i6 + 1;

        goto label4;

     label5:
        goto label8;

     label6:
        if i5 >= 0 goto label8;

        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();

        $i4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int getCount(java.util.regex.Matcher)>(r0);

        i7 = i5 + $i4;

        i8 = 0;

     label7:
        if i8 >= i7 goto label8;

        virtualinvoke r0.<java.util.regex.Matcher: boolean find()>();

        i8 = i8 + 1;

        goto label7;

     label8:
        return;
    }

    public static int getCount(java.util.regex.Matcher)
    {
        int i0;
        java.util.regex.Matcher r0;
        boolean $z0;

        r0 := @parameter0: java.util.regex.Matcher;

        i0 = 0;

        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();

     label1:
        $z0 = virtualinvoke r0.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        i0 = i0 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();

        return i0;
    }

    public static boolean hasGroup(java.util.regex.Matcher)
    {
        int $i0;
        java.util.regex.Matcher r0;
        boolean $z0;

        r0 := @parameter0: java.util.regex.Matcher;

        $i0 = virtualinvoke r0.<java.util.regex.Matcher: int groupCount()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.util.List getAt(java.util.List, groovy.lang.IntRange)
    {
        groovy.lang.IntRange r1;
        java.util.List r0, $r3, r4;
        org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo $r2;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: groovy.lang.IntRange;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo subListBorders(int,groovy.lang.IntRange)>($i0, r1);

        $i2 = $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: int 'from'>;

        $i1 = $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: int 'to'>;

        $r3 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>($i2, $i1);

        r4 = $r3;

        $z0 = $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: boolean reverse>;

        if $z0 == 0 goto label1;

        r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List reverse(java.util.List)>($r3);

     label1:
        return r4;
    }

    public static java.util.List getAt(java.util.List, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        java.util.ArrayList $r0;
        groovy.lang.Range $r8;
        java.util.List r4, $r6, $r7, $r9;
        int $i0, $i1;
        java.lang.Object $r3, $r5;
        boolean $z0, $z1, $z2;

        r4 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Collection;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r3 instanceof groovy.lang.Range;

        if $z1 == 0 goto label2;

        $r8 = (groovy.lang.Range) $r3;

        $r9 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List getAt(java.util.List,java.util.Collection)>(r4, $r8);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r9);

        goto label4;

     label2:
        $z2 = $r3 instanceof java.util.List;

        if $z2 == 0 goto label3;

        $r6 = (java.util.List) $r3;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List getAt(java.util.List,java.util.Collection)>(r4, $r6);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        goto label4;

     label3:
        $i1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r3);

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object getAt(java.util.List,int)>(r4, $i1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

     label4:
        goto label1;

     label5:
        return $r0;
    }

    public static java.util.List getAt(java.lang.Object[], java.util.Collection)
    {
        java.lang.Object[] r4;
        java.util.Iterator $r2;
        java.util.Collection r1, $r6;
        java.util.ArrayList $r0;
        groovy.lang.Range $r8;
        java.util.List $r7, $r9;
        int $i0, $i1;
        java.lang.Object $r3, $r5;
        boolean $z0, $z1, $z2;

        r4 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.util.Collection;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r3 instanceof groovy.lang.Range;

        if $z1 == 0 goto label2;

        $r8 = (groovy.lang.Range) $r3;

        $r9 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List getAt(java.lang.Object[],groovy.lang.Range)>(r4, $r8);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r9);

        goto label4;

     label2:
        $z2 = $r3 instanceof java.util.Collection;

        if $z2 == 0 goto label3;

        $r6 = (java.util.Collection) $r3;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List getAt(java.lang.Object[],java.util.Collection)>(r4, $r6);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        goto label4;

     label3:
        $i1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r3);

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object getAt(java.lang.Object[],int)>(r4, $i1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

     label4:
        goto label1;

     label5:
        return $r0;
    }

    public static java.lang.CharSequence getAt(java.lang.CharSequence, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.lang.CharSequence r5, $r6, $r8, $r10;
        java.util.Collection r1, $r7;
        groovy.lang.Range $r9;
        java.lang.StringBuffer $r0;
        int $i0;
        java.lang.Object $r4;
        java.lang.String $r3;
        boolean $z0, $z1, $z2;

        r5 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.util.Collection;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r4 instanceof groovy.lang.Range;

        if $z1 == 0 goto label2;

        $r9 = (groovy.lang.Range) $r4;

        $r10 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.CharSequence getAt(java.lang.CharSequence,groovy.lang.Range)>(r5, $r9);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>($r10);

        goto label4;

     label2:
        $z2 = $r4 instanceof java.util.Collection;

        if $z2 == 0 goto label3;

        $r7 = (java.util.Collection) $r4;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.CharSequence getAt(java.lang.CharSequence,java.util.Collection)>(r5, $r7);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>($r8);

        goto label4;

     label3:
        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r4);

        $r6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.CharSequence getAt(java.lang.CharSequence,int)>(r5, $i0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>($r6);

     label4:
        goto label1;

     label5:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String getAt(java.lang.String, java.util.Collection)
    {
        java.lang.CharSequence $r2;
        java.util.Collection r1;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.CharSequence getAt(java.lang.CharSequence,java.util.Collection)>(r0, r1);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public static java.lang.String getAt(java.util.regex.Matcher, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1, $r7;
        groovy.lang.Range $r9;
        java.util.regex.Matcher r5;
        java.lang.StringBuffer $r0;
        int $i0;
        java.lang.Object $r4, $r6;
        java.lang.String $r3, $r8, $r10;
        boolean $z0, $z1, $z2;

        r5 := @parameter0: java.util.regex.Matcher;

        r1 := @parameter1: java.util.Collection;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r4 instanceof groovy.lang.Range;

        if $z1 == 0 goto label2;

        $r9 = (groovy.lang.Range) $r4;

        $r10 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getAt(java.util.regex.Matcher,java.util.Collection)>(r5, $r9);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        goto label4;

     label2:
        $z2 = $r4 instanceof java.util.Collection;

        if $z2 == 0 goto label3;

        $r7 = (java.util.Collection) $r4;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getAt(java.util.regex.Matcher,java.util.Collection)>(r5, $r7);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        goto label4;

     label3:
        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r4);

        $r6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object getAt(java.util.regex.Matcher,int)>(r5, $i0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

     label4:
        goto label1;

     label5:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.util.Map subMap(java.util.Map, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        java.util.LinkedHashMap $r0;
        java.util.Map r4;
        int $i0;
        java.lang.Object $r3, $r5;
        boolean $z0;

        r4 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Collection;

        $r0 = new java.util.LinkedHashMap;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        goto label1;

     label2:
        return $r0;
    }

    public static java.lang.Object get(java.util.Map, java.lang.Object, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1, $r2, r3, r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = $r2;

        if $r2 != null goto label1;

        r4 = r3;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

     label1:
        return r4;
    }

    public static java.util.List getAt(java.lang.Object[], groovy.lang.Range)
    {
        groovy.lang.Range r2;
        java.util.List $r1, $r3;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: groovy.lang.Range;

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List getAt(java.util.List,java.util.Collection)>($r1, r2);

        return $r3;
    }

    public static java.util.List getAt(java.lang.Object[], groovy.lang.IntRange)
    {
        java.util.List $r1, $r3;
        java.lang.Object[] r0;
        groovy.lang.IntRange r2;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: groovy.lang.IntRange;

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List getAt(java.util.List,groovy.lang.IntRange)>($r1, r2);

        return $r3;
    }

    public static java.util.List getAt(java.lang.Object[], groovy.lang.EmptyRange)
    {
        java.lang.Object[] r1;
        java.util.ArrayList $r0;
        groovy.lang.EmptyRange r2;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: groovy.lang.EmptyRange;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        return $r0;
    }

    public static java.util.List getAt(java.lang.Object[], groovy.lang.ObjectRange)
    {
        java.util.List $r1, $r3;
        java.lang.Object[] r0;
        groovy.lang.ObjectRange r2;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: groovy.lang.ObjectRange;

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List getAt(java.util.List,java.util.Collection)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object getAt(java.lang.Object[], int)
    {
        java.lang.Object[] r0;
        int i0, $i1, $i2;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $i2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>(i0, $i1);

        $r1 = r0[$i2];

        return $r1;
    }

    public static void putAt(java.lang.Object[], int, java.lang.Object)
    {
        java.lang.Object[] r0;
        java.lang.Character $r6, $r11;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Class $r1, $r2, $r4, $r5, $r7, $r9, $r10;
        java.lang.Object r3, $r8, $r12;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r3 := @parameter2: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $i1 = lengthof r0;

        $i2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>(i0, $i1);

        $z0 = r3 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $z6 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z6 != 0 goto label8;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r3, $r2);

        r0[$i2] = $r8;

        return;

     label1:
        $r4 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Character>;

        if $r4 != null goto label2;

        $r9 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Character");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Character> = $r9;

        goto label3;

     label2:
        $r9 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Character>;

     label3:
        $z1 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z1 == 0 goto label4;

        $r6 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Character getCharFromSizeOneString(java.lang.Object)>(r3);

        r0[$i2] = $r6;

        return;

     label4:
        $r5 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Number>;

        if $r5 != null goto label5;

        $r10 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Number");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Number> = $r10;

        goto label6;

     label5:
        $r10 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Number>;

     label6:
        $z2 = virtualinvoke $r10.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z2 == 0 goto label8;

        $z3 = r3 instanceof java.lang.Character;

        if $z3 != 0 goto label7;

        $z4 = r3 instanceof java.lang.String;

        if $z4 != 0 goto label7;

        $z5 = r3 instanceof groovy.lang.GString;

        if $z5 == 0 goto label8;

     label7:
        $r11 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Character getCharFromSizeOneString(java.lang.Object)>(r3);

        $r12 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r11, $r2);

        r0[$i2] = $r12;

        return;

     label8:
        r0[$i2] = r3;

        return;
    }

    public static java.util.List toList(java.lang.Object[])
    {
        java.util.List $r2;
        java.lang.Object[] r1;
        java.util.ArrayList $r0;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new java.util.ArrayList;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r0;
    }

    public static java.lang.Object getAt(java.util.List, int)
    {
        java.util.List r0;
        int $i0, i1, $i2;
        java.lang.Object $r1;

        r0 := @parameter0: java.util.List;

        i1 := @parameter1: int;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>(i1, $i0);

        if $i2 >= $i0 goto label1;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i2);

        return $r1;

     label1:
        return null;
    }

    public static int getAt(java.util.Date, int)
    {
        java.util.Calendar $r0;
        java.util.Date r1;
        int i0, $i1;

        r1 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        $i1 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(i0);

        return $i1;
    }

    public static void putAt(java.util.List, int, java.lang.Object)
    {
        java.util.List r0;
        int $i0, $i1, $i2, i3, i4;
        java.lang.Object r1;

        r0 := @parameter0: java.util.List;

        i3 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i4 = $i0;

        $i1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>(i3, $i0);

        if $i1 >= $i0 goto label1;

        interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i1, r1);

        goto label3;

     label1:
        if i4 >= $i1 goto label2;

        $i2 = i4;

        i4 = i4 + 1;

        interfaceinvoke r0.<java.util.List: void add(int,java.lang.Object)>($i2, null);

        goto label1;

     label2:
        interfaceinvoke r0.<java.util.List: void add(int,java.lang.Object)>($i1, r1);

     label3:
        return;
    }

    public static void putAt(java.lang.StringBuffer, groovy.lang.IntRange, java.lang.Object)
    {
        groovy.lang.IntRange r1;
        org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo $r2;
        java.lang.StringBuffer r0;
        int $i0, $i1, $i2;
        java.lang.Object r3;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: groovy.lang.IntRange;

        r3 := @parameter2: java.lang.Object;

        $i0 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo subListBorders(int,groovy.lang.IntRange)>($i0, r1);

        $i1 = $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: int 'from'>;

        $i2 = $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: int 'to'>;

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>($i1, $i2, $r4);

        return;
    }

    public static void putAt(java.lang.StringBuffer, groovy.lang.EmptyRange, java.lang.Object)
    {
        groovy.lang.EmptyRange r1;
        org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo $r2;
        java.lang.StringBuffer r0;
        int $i0, $i1, $i2;
        java.lang.Object r3;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: groovy.lang.EmptyRange;

        r3 := @parameter2: java.lang.Object;

        $i0 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo subListBorders(int,groovy.lang.EmptyRange)>($i0, r1);

        $i1 = $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: int 'from'>;

        $i2 = $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: int 'to'>;

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>($i1, $i2, $r4);

        return;
    }

    public static void putAt(java.util.List, groovy.lang.EmptyRange, java.lang.Object)
    {
        java.util.Collection r5;
        groovy.lang.EmptyRange r1;
        java.util.List r0, $r3;
        org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo $r2;
        int $i0, $i1, $i2;
        java.lang.Object r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: groovy.lang.EmptyRange;

        r4 := @parameter2: java.lang.Object;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo subListBorders(int,groovy.lang.EmptyRange)>($i0, r1);

        $i2 = $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: int 'from'>;

        $i1 = $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: int 'to'>;

        $r3 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>($i2, $i1);

        interfaceinvoke $r3.<java.util.List: void clear()>();

        $z0 = r4 instanceof java.util.Collection;

        if $z0 == 0 goto label2;

        r5 = (java.util.Collection) r4;

        $z1 = interfaceinvoke r5.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        return;

     label1:
        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r5);

        goto label3;

     label2:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r4);

     label3:
        return;
    }

    private static java.util.List resizeListWithRangeAndGetSublist(java.util.List, groovy.lang.IntRange)
    {
        groovy.lang.IntRange r1;
        java.util.List r0, $r3;
        org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: groovy.lang.IntRange;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo subListBorders(int,groovy.lang.IntRange)>($i0, r1);

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        i7 = $i1;

        $i2 = $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: int 'to'>;

        if $i2 < $i1 goto label2;

     label1:
        $i5 = $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: int 'to'>;

        if i7 >= $i5 goto label2;

        $i6 = i7;

        i7 = i7 + 1;

        interfaceinvoke r0.<java.util.List: void add(int,java.lang.Object)>($i6, null);

        goto label1;

     label2:
        $i4 = $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: int 'from'>;

        $i3 = $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: int 'to'>;

        $r3 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>($i4, $i3);

        interfaceinvoke $r3.<java.util.List: void clear()>();

        return $r3;
    }

    public static void putAt(java.util.List, groovy.lang.IntRange, java.util.Collection)
    {
        java.util.List r0, $r2;
        groovy.lang.IntRange r1;
        java.util.Collection r3;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: groovy.lang.IntRange;

        r3 := @parameter2: java.util.Collection;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List resizeListWithRangeAndGetSublist(java.util.List,groovy.lang.IntRange)>(r0, r1);

        $z0 = interfaceinvoke r3.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r3);

        return;
    }

    public static void putAt(java.util.List, groovy.lang.IntRange, java.lang.Object)
    {
        java.util.List r0, $r2;
        groovy.lang.IntRange r1;
        java.lang.Object r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: groovy.lang.IntRange;

        r3 := @parameter2: java.lang.Object;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List resizeListWithRangeAndGetSublist(java.util.List,groovy.lang.IntRange)>(r0, r1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;
    }

    public static void putAt(java.util.List, java.util.List, java.util.List)
    {
        java.util.List r0, r1, $r2, r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List getSubList(java.util.List,java.util.List)>(r0, r1);

        interfaceinvoke $r2.<java.util.List: void clear()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r3);

        return;
    }

    public static void putAt(java.util.List, java.util.List, java.lang.Object)
    {
        java.util.List r0, r1, $r2;
        java.lang.Object r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r3 := @parameter2: java.lang.Object;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List getSubList(java.util.List,java.util.List)>(r0, r1);

        interfaceinvoke $r2.<java.util.List: void clear()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;
    }

    protected static java.util.List getSubList(java.util.List, java.util.List)
    {
        int $i0, $i1, $i2, i3, i4, $i5, $i6, $i7;
        boolean $z0, $z1, z2;
        groovy.lang.IntRange r7;
        java.lang.IllegalArgumentException $r1;
        groovy.lang.EmptyRange $r3;
        java.util.List r0, r2, r8;
        org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo $r4;
        java.lang.Object $r5, $r6;

        r2 := @parameter0: java.util.List;

        r0 := @parameter1: java.util.List;

        i3 = 0;

        z2 = 0;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 2 goto label1;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        i4 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r5);

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        i3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r6);

        goto label4;

     label1:
        $z0 = r0 instanceof groovy.lang.IntRange;

        if $z0 == 0 goto label2;

        r7 = (groovy.lang.IntRange) r0;

        i4 = virtualinvoke r7.<groovy.lang.IntRange: int getFromInt()>();

        i3 = virtualinvoke r7.<groovy.lang.IntRange: int getToInt()>();

        goto label4;

     label2:
        $z1 = r0 instanceof groovy.lang.EmptyRange;

        if $z1 == 0 goto label3;

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        $r3 = (groovy.lang.EmptyRange) r0;

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo subListBorders(int,groovy.lang.EmptyRange)>($i1, $r3);

        i4 = $r4.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: int 'from'>;

        z2 = 1;

        goto label4;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must specify a list of 2 indexes to create a sub-list");

        throw $r1;

     label4:
        $i5 = interfaceinvoke r2.<java.util.List: int size()>();

        $i6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>(i4, $i5);

        $i7 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>(i3, $i5);

        if z2 != 0 goto label5;

        $i2 = $i7 + 1;

        r8 = interfaceinvoke r2.<java.util.List: java.util.List subList(int,int)>($i6, $i2);

        goto label6;

     label5:
        r8 = interfaceinvoke r2.<java.util.List: java.util.List subList(int,int)>($i6, $i6);

     label6:
        return r8;
    }

    public static java.lang.Object getAt(java.util.Map, java.lang.Object)
    {
        java.lang.Object r1, $r2;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r2;
    }

    public static java.util.Map plus(java.util.Map, java.util.Map)
    {
        java.util.Map r0, $r1, r2;

        r0 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Map cloneSimilarMap(java.util.Map)>(r0);

        interfaceinvoke $r1.<java.util.Map: void putAll(java.util.Map)>(r2);

        return $r1;
    }

    public static java.lang.Object putAt(java.util.Map, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return r2;
    }

    public static java.util.List getAt(java.util.Collection, java.lang.String)
    {
        org.codehaus.groovy.runtime.metaclass.MissingPropertyExceptionNoStack $r6;
        java.util.ArrayList $r0;
        java.lang.StringBuffer $r12, $r13, $r14, $r15, $r18, $r19, $r20;
        int $i0;
        java.lang.String r4, $r8, $r10, $r17, $r21;
        groovy.lang.MissingPropertyException $r7, $r11;
        boolean $z0;
        java.util.Iterator $r2;
        java.util.Collection r1;
        java.lang.Object $r3, $r5;
        java.lang.Class $r9, $r16;

        r1 := @parameter0: java.util.Collection;

        r4 := @parameter1: java.lang.String;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object getProperty(java.lang.Object,java.lang.String)>($r3, r4);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = new groovy.lang.MissingPropertyException;

        $r8 = virtualinvoke $r6.<org.codehaus.groovy.runtime.metaclass.MissingPropertyExceptionNoStack: java.lang.String getProperty()>();

        $r9 = virtualinvoke $r6.<org.codehaus.groovy.runtime.metaclass.MissingPropertyExceptionNoStack: java.lang.Class getType()>();

        specialinvoke $r7.<groovy.lang.MissingPropertyException: void <init>(java.lang.String,java.lang.Class)>($r8, $r9);

        $r10 = virtualinvoke $r7.<groovy.lang.MissingPropertyException: java.lang.String toString()>();

        $r11 = new groovy.lang.MissingPropertyException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Exception evaluating property \'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' for ");

        $r16 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", Reason: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<groovy.lang.MissingPropertyException: void <init>(java.lang.String)>($r21);

        throw $r11;

     label5:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label6:
        return $r0;

        catch org.codehaus.groovy.runtime.metaclass.MissingPropertyExceptionNoStack from label2 to label3 with label4;
    }

    public static java.util.Map asImmutable(java.util.Map)
    {
        java.util.Map r0, $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r0);

        return $r1;
    }

    public static java.util.SortedMap asImmutable(java.util.SortedMap)
    {
        java.util.SortedMap r0, $r1;

        r0 := @parameter0: java.util.SortedMap;

        $r1 = staticinvoke <java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>(r0);

        return $r1;
    }

    public static java.util.List asImmutable(java.util.List)
    {
        java.util.List r0, $r1;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r0);

        return $r1;
    }

    public static java.util.Set asImmutable(java.util.Set)
    {
        java.util.Set r0, $r1;

        r0 := @parameter0: java.util.Set;

        $r1 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r0);

        return $r1;
    }

    public static java.util.SortedSet asImmutable(java.util.SortedSet)
    {
        java.util.SortedSet r0, $r1;

        r0 := @parameter0: java.util.SortedSet;

        $r1 = staticinvoke <java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>(r0);

        return $r1;
    }

    public static java.util.Collection asImmutable(java.util.Collection)
    {
        java.util.Collection r0, $r1;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(r0);

        return $r1;
    }

    public static java.util.Map asSynchronized(java.util.Map)
    {
        java.util.Map r0, $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>(r0);

        return $r1;
    }

    public static java.util.SortedMap asSynchronized(java.util.SortedMap)
    {
        java.util.SortedMap r0, $r1;

        r0 := @parameter0: java.util.SortedMap;

        $r1 = staticinvoke <java.util.Collections: java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)>(r0);

        return $r1;
    }

    public static java.util.Collection asSynchronized(java.util.Collection)
    {
        java.util.Collection r0, $r1;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <java.util.Collections: java.util.Collection synchronizedCollection(java.util.Collection)>(r0);

        return $r1;
    }

    public static java.util.List asSynchronized(java.util.List)
    {
        java.util.List r0, $r1;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>(r0);

        return $r1;
    }

    public static java.util.Set asSynchronized(java.util.Set)
    {
        java.util.Set r0, $r1;

        r0 := @parameter0: java.util.Set;

        $r1 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>(r0);

        return $r1;
    }

    public static java.util.SortedSet asSynchronized(java.util.SortedSet)
    {
        java.util.SortedSet r0, $r1;

        r0 := @parameter0: java.util.SortedSet;

        $r1 = staticinvoke <java.util.Collections: java.util.SortedSet synchronizedSortedSet(java.util.SortedSet)>(r0);

        return $r1;
    }

    public static groovy.lang.SpreadMap spread(java.util.Map)
    {
        groovy.lang.SpreadMap $r1;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: groovy.lang.SpreadMap toSpreadMap(java.util.Map)>(r0);

        return $r1;
    }

    public static groovy.lang.SpreadMap toSpreadMap(java.util.Map)
    {
        groovy.lang.SpreadMap $r1;
        groovy.lang.GroovyRuntimeException $r2;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        $r2 = new groovy.lang.GroovyRuntimeException;

        specialinvoke $r2.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>("Fail to convert Map to SpreadMap, because it is null.");

        throw $r2;

     label1:
        $r1 = new groovy.lang.SpreadMap;

        specialinvoke $r1.<groovy.lang.SpreadMap: void <init>(java.util.Map)>(r0);

        return $r1;
    }

    public static groovy.lang.SpreadMap toSpreadMap(java.lang.Object[])
    {
        java.lang.Object[] r0;
        groovy.lang.GroovyRuntimeException $r2, $r3;
        int $i0, $i1;
        groovy.lang.SpreadMap $r1;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label1;

        $r3 = new groovy.lang.GroovyRuntimeException;

        specialinvoke $r3.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>("Fail to convert Object[] to SpreadMap, because it is null.");

        throw $r3;

     label1:
        $i0 = lengthof r0;

        $i1 = $i0 % 2;

        if $i1 == 0 goto label2;

        $r2 = new groovy.lang.GroovyRuntimeException;

        specialinvoke $r2.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>("Fail to convert Object[] to SpreadMap, because it\'s size is not even.");

        throw $r2;

     label2:
        $r1 = new groovy.lang.SpreadMap;

        specialinvoke $r1.<groovy.lang.SpreadMap: void <init>(java.lang.Object[])>(r0);

        return $r1;
    }

    public static java.util.List sort(java.util.Collection)
    {
        java.util.List $r1;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator $r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List asList(java.util.Collection)>(r0);

        $r2 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator;

        specialinvoke $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: void <init>(org.codehaus.groovy.runtime.DefaultGroovyMethods$1)>(null);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, $r2);

        return $r1;
    }

    public static java.util.Map sort(java.util.Map, groovy.lang.Closure)
    {
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        java.util.Set $r2;
        groovy.lang.Closure r4;
        java.util.LinkedHashMap $r0;
        java.util.List $r3;
        java.util.Map r1;
        java.lang.Object $r6, $r8, $r9;
        boolean $z0;

        r1 := @parameter0: java.util.Map;

        r4 := @parameter1: groovy.lang.Closure;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List asList(java.util.Collection)>($r2);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List sort(java.util.Collection,groovy.lang.Closure)>($r3, r4);

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        goto label1;

     label2:
        return $r0;
    }

    public static java.lang.Object[] sort(java.lang.Object[])
    {
        java.lang.Object[] r0;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator;

        specialinvoke $r1.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: void <init>(org.codehaus.groovy.runtime.DefaultGroovyMethods$1)>(null);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r0, $r1);

        return r0;
    }

    public static java.util.Iterator sort(java.util.Iterator)
    {
        java.util.List $r1, $r2;
        java.util.Iterator r0;
        java.util.ListIterator $r3;

        r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List sort(java.util.Collection)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.ListIterator listIterator()>();

        return $r3;
    }

    public static java.util.Iterator sort(java.util.Iterator, java.util.Comparator)
    {
        java.util.List $r1, $r3;
        java.util.Iterator r0;
        java.util.ListIterator $r4;
        java.util.Comparator r2;

        r0 := @parameter0: java.util.Iterator;

        r2 := @parameter1: java.util.Comparator;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List sort(java.util.Collection,java.util.Comparator)>($r1, r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.ListIterator listIterator()>();

        return $r4;
    }

    public static java.util.List sort(java.util.Collection, java.util.Comparator)
    {
        java.util.List $r1;
        java.util.Comparator r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.util.Comparator;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List asList(java.util.Collection)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, r2);

        return $r1;
    }

    public static java.lang.Object[] sort(java.lang.Object[], java.util.Comparator)
    {
        java.lang.Object[] r0;
        java.util.Comparator r1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.util.Comparator;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r0, r1);

        return r0;
    }

    public static java.util.Iterator sort(java.util.Iterator, groovy.lang.Closure)
    {
        java.util.List $r1, $r3;
        java.util.Iterator r0;
        java.util.ListIterator $r4;
        groovy.lang.Closure r2;

        r0 := @parameter0: java.util.Iterator;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List sort(java.util.Collection,groovy.lang.Closure)>($r1, r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.ListIterator listIterator()>();

        return $r4;
    }

    public static java.lang.Object[] sort(java.lang.Object[], groovy.lang.Closure)
    {
        java.util.List $r1, $r3;
        java.lang.Object[] r0, $r4;
        groovy.lang.Closure r2;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.lang.Object[])>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List sort(java.util.Collection,groovy.lang.Closure)>($r1, r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray()>();

        return $r4;
    }

    public static java.util.List sort(java.util.Collection, groovy.lang.Closure)
    {
        groovy.util.OrderBy $r4;
        java.util.List $r1;
        groovy.util.ClosureComparator $r3;
        java.util.Collection r0;
        int $i0;
        groovy.lang.Closure r2;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List asList(java.util.Collection)>(r0);

        $i0 = virtualinvoke r2.<groovy.lang.Closure: int getMaximumNumberOfParameters()>();

        if $i0 != 1 goto label1;

        $r4 = new groovy.util.OrderBy;

        specialinvoke $r4.<groovy.util.OrderBy: void <init>(groovy.lang.Closure)>(r2);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, $r4);

        goto label2;

     label1:
        $r3 = new groovy.util.ClosureComparator;

        specialinvoke $r3.<groovy.util.ClosureComparator: void <init>(groovy.lang.Closure)>(r2);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, $r3);

     label2:
        return $r1;
    }

    public static java.util.SortedSet sort(java.util.SortedSet)
    {
        java.util.SortedSet r0;

        r0 := @parameter0: java.util.SortedSet;

        return r0;
    }

    public static java.lang.Object pop(java.util.List)
    {
        java.util.List r0;
        int $i0, $i1;
        java.lang.Object $r1;
        java.util.NoSuchElementException $r2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Cannot pop() an empty List");

        throw $r2;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>($i1);

        return $r1;
    }

    public static boolean push(java.util.List, java.lang.Object)
    {
        java.util.List r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Object;

        $z0 = interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public static java.lang.Object last(java.util.List)
    {
        java.util.List r0;
        int $i0, $i1;
        java.lang.Object $r1;
        java.util.NoSuchElementException $r2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Cannot access last() element from an empty List");

        throw $r2;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i1);

        return $r1;
    }

    public static java.lang.Object first(java.util.List)
    {
        java.util.List r0;
        java.lang.Object $r1;
        java.util.NoSuchElementException $r2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Cannot access first() element from an empty List");

        throw $r2;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        return $r1;
    }

    public static java.lang.Object head(java.util.List)
    {
        java.util.List r0;
        java.lang.Object $r1;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object first(java.util.List)>(r0);

        return $r1;
    }

    public static java.util.List tail(java.util.List)
    {
        java.util.List r0;
        java.util.NoSuchElementException $r2;
        boolean $z0;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Cannot access tail() for an empty List");

        throw $r2;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(0);

        return $r1;
    }

    public static java.util.List asList(java.util.Collection)
    {
        java.util.List $r2;
        java.util.Collection r0;
        boolean $z0;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = (java.util.List) r0;

        return $r2;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        return $r1;
    }

    public static java.lang.Object asType(java.util.Collection, java.lang.Class)
    {
        java.lang.Object[] $r7;
        java.util.Stack $r9;
        java.util.TreeSet $r10;
        java.util.HashSet $r11;
        boolean $z0, $z1, $z2;
        java.util.Collection r0;
        java.lang.Exception $r13;
        java.util.List $r12;
        java.lang.Class $r1, r2, $r3, $r4, $r5, $r6, $r15, $r16, $r17, $r18;
        java.lang.Object $r8, $r14;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != r2 goto label01;

        return r0;

     label01:
        $r3 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$List>;

        if $r3 != null goto label02;

        $r15 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.util.List");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$List> = $r15;

        goto label03;

     label02:
        $r15 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$List>;

     label03:
        if r2 != $r15 goto label04;

        $r12 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List asList(java.util.Collection)>(r0);

        return $r12;

     label04:
        $r4 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$Set>;

        if $r4 != null goto label05;

        $r16 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.util.Set");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$Set> = $r16;

        goto label06;

     label05:
        $r16 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$Set>;

     label06:
        if r2 != $r16 goto label08;

        $z2 = r0 instanceof java.util.Set;

        if $z2 == 0 goto label07;

        return r0;

     label07:
        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>(java.util.Collection)>(r0);

        return $r11;

     label08:
        $r5 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$SortedSet>;

        if $r5 != null goto label09;

        $r17 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.util.SortedSet");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$SortedSet> = $r17;

        goto label10;

     label09:
        $r17 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$SortedSet>;

     label10:
        if r2 != $r17 goto label12;

        $z1 = r0 instanceof java.util.SortedSet;

        if $z1 == 0 goto label11;

        return r0;

     label11:
        $r10 = new java.util.TreeSet;

        specialinvoke $r10.<java.util.TreeSet: void <init>(java.util.Collection)>(r0);

        return $r10;

     label12:
        $r6 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$Stack>;

        if $r6 != null goto label13;

        $r18 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.util.Stack");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$Stack> = $r18;

        goto label14;

     label13:
        $r18 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$Stack>;

     label14:
        if r2 != $r18 goto label16;

        $z0 = r0 instanceof java.util.Stack;

        if $z0 == 0 goto label15;

        return r0;

     label15:
        $r9 = new java.util.Stack;

        specialinvoke $r9.<java.util.Stack: void <init>()>();

        virtualinvoke $r9.<java.util.Stack: boolean addAll(java.util.Collection)>(r0);

        return $r9;

     label16:
        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r0;

     label17:
        $r8 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeConstructorOf(java.lang.Class,java.lang.Object)>(r2, $r7);

     label18:
        return $r8;

     label19:
        $r13 := @caughtexception;

        $r14 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object asType(java.lang.Object,java.lang.Class)>(r0, r2);

        return $r14;

        catch java.lang.Exception from label17 to label18 with label19;
    }

    public static java.lang.Object asType(java.lang.Object[], java.lang.Class)
    {
        java.lang.Object[] r4;
        java.util.TreeSet $r6;
        java.util.ArrayList $r10;
        java.util.HashSet $r8;
        java.util.List $r7, $r9, $r11;
        java.lang.Class r0, $r1, $r2, $r3, $r12, $r13, $r14;
        java.lang.Object $r5;

        r4 := @parameter0: java.lang.Object[];

        r0 := @parameter1: java.lang.Class;

        $r1 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$List>;

        if $r1 != null goto label1;

        $r12 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.util.List");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$List> = $r12;

        goto label2;

     label1:
        $r12 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$List>;

     label2:
        if r0 != $r12 goto label3;

        $r10 = new java.util.ArrayList;

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r4);

        specialinvoke $r10.<java.util.ArrayList: void <init>(java.util.Collection)>($r11);

        return $r10;

     label3:
        $r2 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$Set>;

        if $r2 != null goto label4;

        $r13 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.util.Set");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$Set> = $r13;

        goto label5;

     label4:
        $r13 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$Set>;

     label5:
        if r0 != $r13 goto label6;

        $r8 = new java.util.HashSet;

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r4);

        specialinvoke $r8.<java.util.HashSet: void <init>(java.util.Collection)>($r9);

        return $r8;

     label6:
        $r3 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$SortedSet>;

        if $r3 != null goto label7;

        $r14 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.util.SortedSet");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$SortedSet> = $r14;

        goto label8;

     label7:
        $r14 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$SortedSet>;

     label8:
        if r0 != $r14 goto label9;

        $r6 = new java.util.TreeSet;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r4);

        specialinvoke $r6.<java.util.TreeSet: void <init>(java.util.Collection)>($r7);

        return $r6;

     label9:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object asType(java.lang.Object,java.lang.Class)>(r4, r0);

        return $r5;
    }

    public static java.lang.Object asType(groovy.lang.Closure, java.lang.Class)
    {
        groovy.lang.Closure r1;
        java.lang.Class[] $r4;
        org.codehaus.groovy.runtime.ConvertedClosure $r5;
        java.lang.Class r0;
        java.lang.Object $r2, $r6;
        java.lang.ClassLoader $r3;
        boolean $z0, $z1;

        r1 := @parameter0: groovy.lang.Closure;

        r0 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = r0;

        $r5 = new org.codehaus.groovy.runtime.ConvertedClosure;

        specialinvoke $r5.<org.codehaus.groovy.runtime.ConvertedClosure: void <init>(groovy.lang.Closure)>(r1);

        $r6 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r3, $r4, $r5);

        return $r6;

     label1:
        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object asType(java.lang.Object,java.lang.Class)>(r1, r0);

        return $r2;
    }

    public static java.lang.Object asType(java.util.Map, java.lang.Class)
    {
        org.codehaus.groovy.runtime.ConvertedMap $r5;
        org.codehaus.groovy.runtime.typehandling.GroovyCastException $r8, $r17;
        java.lang.StringBuffer $r9, $r10, $r12, $r13, $r15;
        groovy.util.ProxyGenerator $r18;
        java.util.Map r1;
        java.lang.String $r11, $r14, $r16;
        boolean $z0, $z1;
        groovy.lang.GroovyRuntimeException $r7;
        java.lang.Class[] $r4;
        java.lang.Class r0;
        java.lang.Object $r2, $r6, $r19;
        java.lang.ClassLoader $r3;

        r1 := @parameter0: java.util.Map;

        r0 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = r0;

        $r5 = new org.codehaus.groovy.runtime.ConvertedMap;

        specialinvoke $r5.<org.codehaus.groovy.runtime.ConvertedMap: void <init>(java.util.Map)>(r1);

        $r6 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r3, $r4, $r5);

        return $r6;

     label1:
        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object asType(java.lang.Object,java.lang.Class)>(r1, r0);

     label2:
        return $r2;

     label3:
        $r17 := @caughtexception;

     label4:
        $r18 = <groovy.util.ProxyGenerator: groovy.util.ProxyGenerator INSTANCE>;

        $r19 = virtualinvoke $r18.<groovy.util.ProxyGenerator: java.lang.Object instantiateAggregateFromBaseClass(java.util.Map,java.lang.Class)>(r1, r0);

     label5:
        return $r19;

     label6:
        $r7 := @caughtexception;

        $r8 = new org.codehaus.groovy.runtime.typehandling.GroovyCastException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error casting map to ");

        $r11 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", Reason: ");

        $r14 = virtualinvoke $r7.<groovy.lang.GroovyRuntimeException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<org.codehaus.groovy.runtime.typehandling.GroovyCastException: void <init>(java.lang.String)>($r16);

        throw $r8;

        catch org.codehaus.groovy.runtime.typehandling.GroovyCastException from label1 to label2 with label3;
        catch groovy.lang.GroovyRuntimeException from label4 to label5 with label6;
    }

    public static java.util.List reverse(java.util.List)
    {
        java.util.List r0;
        java.util.ListIterator $r2;
        int $i0;
        java.lang.Object $r3;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

     label1:
        $z0 = interfaceinvoke $r2.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object previous()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r1;
    }

    public static java.util.Iterator reverse(java.util.Iterator)
    {
        java.util.List $r2;
        java.util.Iterator r1;
        org.codehaus.groovy.runtime.ReverseListIterator $r0;

        r1 := @parameter0: java.util.Iterator;

        $r0 = new org.codehaus.groovy.runtime.ReverseListIterator;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Iterator)>(r1);

        specialinvoke $r0.<org.codehaus.groovy.runtime.ReverseListIterator: void <init>(java.util.List)>($r2);

        return $r0;
    }

    public static java.util.Collection plus(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1, $r2;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i2 = $i0 + $i1;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection cloneSimilarCollection(java.util.Collection,int)>(r0, $i2);

        interfaceinvoke $r2.<java.util.Collection: boolean addAll(java.util.Collection)>(r1);

        return $r2;
    }

    public static java.util.Collection plus(java.util.Collection, java.lang.Object)
    {
        java.util.Collection r0, $r1;
        int $i0, $i1;
        java.lang.Object r2;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.lang.Object;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i1 = $i0 + 1;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection cloneSimilarCollection(java.util.Collection,int)>(r0, $i1);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>(r2);

        return $r1;
    }

    public static java.util.List multiply(java.util.Collection, java.lang.Number)
    {
        java.util.Collection r2;
        int $i0, $i1, $i2, i3;
        java.lang.Number r0;
        java.util.ArrayList $r1;

        r2 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.lang.Number;

        $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        $r1 = new java.util.ArrayList;

        $i1 = interfaceinvoke r2.<java.util.Collection: int size()>();

        $i2 = $i1 * $i0;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i2);

        i3 = 0;

     label1:
        if i3 >= $i0 goto label2;

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>(r2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public static java.util.Collection intersect(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r3;
        java.util.Collection $r0, $r5, r6, r7, r8;
        java.util.TreeSet $r1;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator $r2;
        int $i0, $i1, $i2;
        java.lang.Object $r4;
        boolean $z0, $z1, $z2;

        r6 := @parameter0: java.util.Collection;

        r7 := @parameter1: java.util.Collection;

        $z0 = interfaceinvoke r6.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection createSimilarCollection(java.util.Collection,int)>(r6, 0);

        return $r5;

     label1:
        $i0 = interfaceinvoke r6.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r7.<java.util.Collection: int size()>();

        if $i0 >= $i1 goto label2;

        r8 = r6;

        r6 = r7;

        r7 = r8;

     label2:
        $i2 = interfaceinvoke r6.<java.util.Collection: int size()>();

        $r0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection createSimilarCollection(java.util.Collection,int)>(r6, $i2);

        $r1 = new java.util.TreeSet;

        $r2 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator;

        specialinvoke $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: void <init>(org.codehaus.groovy.runtime.DefaultGroovyMethods$1)>(null);

        specialinvoke $r1.<java.util.TreeSet: void <init>(java.util.Comparator)>($r2);

        interfaceinvoke $r1.<java.util.Collection: boolean addAll(java.util.Collection)>(r6);

        $r3 = interfaceinvoke r7.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>($r4);

        if $z1 == 0 goto label4;

        interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label4:
        goto label3;

     label5:
        return $r0;
    }

    public static boolean disjoint(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r4;
        java.util.Collection r0, r1;
        java.util.TreeSet $r2;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator $r3;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        $r2 = new java.util.TreeSet;

        $r3 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator;

        specialinvoke $r3.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: void <init>(org.codehaus.groovy.runtime.DefaultGroovyMethods$1)>(null);

        specialinvoke $r2.<java.util.TreeSet: void <init>(java.util.Comparator)>($r3);

        interfaceinvoke $r2.<java.util.Collection: boolean addAll(java.util.Collection)>(r1);

        $r4 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z3 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>($r5);

        if $z3 == 0 goto label4;

        return 0;

     label4:
        goto label3;

     label5:
        return 1;
    }

    public static boolean equals(int[], int[])
    {
        int[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, i5;
        boolean $z0;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        if r0 != null goto label3;

        if r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        if r1 != null goto label4;

        return 0;

     label4:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label5;

        return 0;

     label5:
        i5 = 0;

     label6:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label8;

        $i4 = r0[i5];

        $i3 = r1[i5];

        if $i4 == $i3 goto label7;

        return 0;

     label7:
        i5 = i5 + 1;

        goto label6;

     label8:
        return 1;
    }

    public static boolean equals(java.lang.Object[], java.util.List)
    {
        java.util.List r1;
        java.lang.Object[] r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.util.List;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: boolean coercedEquals(java.lang.Object[],java.util.List)>(r0, r1);

        return $z0;
    }

    public static boolean equals(java.util.List, java.lang.Object[])
    {
        java.util.List r1;
        java.lang.Object[] r0;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        r0 := @parameter1: java.lang.Object[];

        $z0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: boolean coercedEquals(java.lang.Object[],java.util.List)>(r0, r1);

        return $z0;
    }

    private static boolean coercedEquals(java.lang.Object[], java.util.List)
    {
        java.lang.Object[] r0;
        java.util.List r1;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator $r5;
        int $i0, $i1, $i2, $i3, i4, $i6;
        java.lang.Object r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.util.List;

        if r0 != null goto label03;

        if r1 != null goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        return $z3;

     label03:
        if r1 != null goto label04;

        return 0;

     label04:
        $i0 = lengthof r0;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label05;

        return 0;

     label05:
        $r5 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator;

        specialinvoke $r5.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: void <init>(org.codehaus.groovy.runtime.DefaultGroovyMethods$1)>(null);

        $i2 = lengthof r0;

        i4 = $i2 - 1;

     label06:
        if i4 < 0 goto label11;

        r3 = r0[i4];

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4);

        if r3 != null goto label07;

        if $r4 == null goto label10;

        return 0;

     label07:
        $z0 = r3 instanceof java.lang.Number;

        if $z0 == 0 goto label09;

        $z2 = $r4 instanceof java.lang.Number;

        if $z2 == 0 goto label08;

        $i3 = virtualinvoke $r5.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: int compare(java.lang.Object,java.lang.Object)>(r3, $r4);

        if $i3 == 0 goto label10;

     label08:
        return 0;

     label09:
        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean compareEqual(java.lang.Object,java.lang.Object)>(r3, $r4);

        if $z1 != 0 goto label10;

        return 0;

     label10:
        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label06;

     label11:
        return 1;
    }

    public static boolean equals(java.util.List, java.util.List)
    {
        java.util.Iterator $r3, $r4;
        java.util.List r0, r1;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator $r2;
        int $i0, $i1, $i2;
        java.lang.Object $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        if r0 != null goto label03;

        if r1 != null goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        return $z4;

     label03:
        if r1 != null goto label04;

        return 0;

     label04:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label05;

        return 0;

     label05:
        $r2 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator;

        specialinvoke $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: void <init>(org.codehaus.groovy.runtime.DefaultGroovyMethods$1)>(null);

        $r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $r5 != null goto label07;

        if $r6 == null goto label10;

        return 0;

     label07:
        $z1 = $r5 instanceof java.lang.Number;

        if $z1 == 0 goto label09;

        $z3 = $r6 instanceof java.lang.Number;

        if $z3 == 0 goto label08;

        $i2 = virtualinvoke $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: int compare(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $i2 == 0 goto label10;

     label08:
        return 0;

     label09:
        $z2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean compareEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z2 != 0 goto label10;

        return 0;

     label10:
        goto label06;

     label11:
        return 1;
    }

    public static java.util.Set minus(java.util.Set, java.util.Collection)
    {
        java.util.Collection r2;
        int $i0;
        java.util.Set r0, $r1;

        r0 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Collection;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Set createSimilarSet(java.util.Set)>(r0);

        interfaceinvoke $r1.<java.util.Set: boolean addAll(java.util.Collection)>(r0);

        $i0 = interfaceinvoke r0.<java.util.Set: int size()>();

        if $i0 <= 0 goto label1;

        interfaceinvoke $r1.<java.util.Set: boolean removeAll(java.util.Collection)>(r2);

     label1:
        return $r1;
    }

    public static java.util.Set minus(java.util.Set, java.lang.Object)
    {
        java.util.Iterator $r3;
        java.util.Set r0, $r1;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator $r2;
        int $i0;
        java.lang.Object $r4, r5;
        boolean $z0;

        r0 := @parameter0: java.util.Set;

        r5 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Set createSimilarSet(java.util.Set)>(r0);

        $r2 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator;

        specialinvoke $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: void <init>(org.codehaus.groovy.runtime.DefaultGroovyMethods$1)>(null);

        $r3 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, r5);

        if $i0 == 0 goto label2;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r4);

     label2:
        goto label1;

     label3:
        return $r1;
    }

    public static java.lang.Object[] minus(java.lang.Object[], java.util.Collection)
    {
        java.util.List $r1, $r3;
        java.lang.Object[] r0, $r4;
        java.util.Collection r2;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.util.Collection;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.lang.Object[])>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List minus(java.util.List,java.util.Collection)>($r1, r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray()>();

        return $r4;
    }

    public static java.lang.Object[] minus(java.lang.Object[], java.lang.Object[])
    {
        java.util.List $r1, $r3, $r4;
        java.lang.Object[] r0, r2, $r5;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.lang.Object[])>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.lang.Object[])>(r2);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List minus(java.util.List,java.util.Collection)>($r1, $r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray()>();

        return $r5;
    }

    public static java.util.List minus(java.util.List, java.util.Collection)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12;
        java.util.Collection r2;
        java.util.List r0;
        java.util.Collection[] $r1;
        java.util.TreeSet $r13, $r17, r26;
        java.util.ArrayList $r6, $r14, $r24;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator $r3;
        int $i0, $i1, $i2;
        java.util.LinkedList $r4;
        java.util.Iterator $r5, $r8, $r15, $r18, $r21;
        java.lang.Object $r7, $r9, $r10, $r12, $r16, $r19, $r22;
        java.lang.Class $r11, $r20, $r23, $r25, $r27, $r28;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label01;

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>()>();

        return $r24;

     label01:
        $r1 = newarray (java.util.Collection)[2];

        $r1[0] = r0;

        $r1[1] = r2;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: boolean sameType(java.util.Collection[])>($r1);

        $r3 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator;

        specialinvoke $r3.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: void <init>(org.codehaus.groovy.runtime.DefaultGroovyMethods$1)>(null);

        if $z0 == 0 goto label20;

        $r10 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $z2 = $r10 instanceof java.lang.Comparable;

        if $z2 == 0 goto label20;

        $r11 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Number>;

        if $r11 != null goto label02;

        $r25 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Number");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Number> = $r25;

        goto label03;

     label02:
        $r25 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Number>;

     label03:
        $r12 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $z3 = virtualinvoke $r25.<java.lang.Class: boolean isInstance(java.lang.Object)>($r12);

        if $z3 == 0 goto label15;

        $r17 = new java.util.TreeSet;

        specialinvoke $r17.<java.util.TreeSet: void <init>(java.util.Comparator)>($r3);

        r26 = $r17;

        interfaceinvoke $r17.<java.util.Set: boolean addAll(java.util.Collection)>(r0);

        $r18 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label14;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r20 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Number>;

        if $r20 != null goto label05;

        $r27 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Number");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Number> = $r27;

        goto label06;

     label05:
        $r27 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Number>;

     label06:
        $z6 = virtualinvoke $r27.<java.lang.Class: boolean isInstance(java.lang.Object)>($r19);

        if $z6 == 0 goto label12;

        $r21 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z8 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label11;

        $r22 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        $r23 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Number>;

        if $r23 != null goto label08;

        $r28 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Number");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Number> = $r28;

        goto label09;

     label08:
        $r28 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Number>;

     label09:
        $z9 = virtualinvoke $r28.<java.lang.Class: boolean isInstance(java.lang.Object)>($r22);

        if $z9 == 0 goto label10;

        $i2 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r19, $r22);

        if $i2 != 0 goto label10;

        interfaceinvoke $r17.<java.util.Set: boolean remove(java.lang.Object)>($r19);

     label10:
        goto label07;

     label11:
        goto label13;

     label12:
        $z7 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>($r19);

        if $z7 == 0 goto label13;

        interfaceinvoke $r17.<java.util.Set: boolean remove(java.lang.Object)>($r19);

     label13:
        goto label04;

     label14:
        goto label16;

     label15:
        $r13 = new java.util.TreeSet;

        specialinvoke $r13.<java.util.TreeSet: void <init>(java.util.Comparator)>($r3);

        r26 = $r13;

        interfaceinvoke $r13.<java.util.Set: boolean addAll(java.util.Collection)>(r0);

        interfaceinvoke $r13.<java.util.Set: boolean removeAll(java.util.Collection)>(r2);

     label16:
        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        $r15 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z10 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label19;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        $z4 = interfaceinvoke r26.<java.util.Set: boolean contains(java.lang.Object)>($r16);

        if $z4 == 0 goto label18;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r16);

     label18:
        goto label17;

     label19:
        return $r14;

     label20:
        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>(r0);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label21:
        $z11 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label25;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        z12 = 0;

        $r8 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label22:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label24;

        if z12 != 0 goto label24;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $i1 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r7, $r9);

        if $i1 != 0 goto label23;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        z12 = 1;

     label23:
        goto label22;

     label24:
        goto label21;

     label25:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        return $r6;
    }

    public static java.util.List minus(java.util.List, java.lang.Object)
    {
        java.util.Iterator $r3;
        java.util.ArrayList $r1;
        java.util.List r2;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator $r0;
        int $i0;
        java.lang.Object $r4, r5;
        boolean $z0;

        r2 := @parameter0: java.util.List;

        r5 := @parameter1: java.lang.Object;

        $r0 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator;

        specialinvoke $r0.<org.codehaus.groovy.runtime.DefaultGroovyMethods$NumberAwareComparator: void <init>(org.codehaus.groovy.runtime.DefaultGroovyMethods$1)>(null);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, r5);

        if $i0 == 0 goto label2;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        goto label1;

     label3:
        return $r1;
    }

    public static java.lang.Object[] minus(java.lang.Object[], java.lang.Object)
    {
        java.util.List $r1, $r3;
        java.lang.Object[] r0, $r4;
        java.lang.Object r2;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.lang.Object[])>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List minus(java.util.List,java.lang.Object)>($r1, r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray()>();

        return $r4;
    }

    public static java.util.Collection flatten(java.util.Collection)
    {
        java.util.Collection r0, $r1, $r2;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection createSimilarCollection(java.util.Collection)>(r0);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection)>(r0, $r1);

        return $r2;
    }

    public static java.util.Collection flatten(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object[] r0;
        java.util.Collection $r3;
        java.util.ArrayList $r2;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.lang.Object[])>(r0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection)>($r1, $r2);

        return $r3;
    }

    public static java.util.Collection flatten(boolean[])
    {
        java.util.List $r1;
        java.util.Collection $r3;
        boolean[] r0;
        java.util.ArrayList $r2;

        r0 := @parameter0: boolean[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(boolean[])>(r0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection)>($r1, $r2);

        return $r3;
    }

    public static java.util.Collection flatten(byte[])
    {
        byte[] r0;
        java.util.List $r1;
        java.util.Collection $r3;
        java.util.ArrayList $r2;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(byte[])>(r0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection)>($r1, $r2);

        return $r3;
    }

    public static java.util.Collection flatten(char[])
    {
        java.util.List $r1;
        java.util.Collection $r3;
        char[] r0;
        java.util.ArrayList $r2;

        r0 := @parameter0: char[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(char[])>(r0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection)>($r1, $r2);

        return $r3;
    }

    public static java.util.Collection flatten(short[])
    {
        java.util.List $r1;
        java.util.Collection $r3;
        short[] r0;
        java.util.ArrayList $r2;

        r0 := @parameter0: short[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(short[])>(r0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection)>($r1, $r2);

        return $r3;
    }

    public static java.util.Collection flatten(int[])
    {
        java.util.List $r1;
        int[] r0;
        java.util.Collection $r3;
        java.util.ArrayList $r2;

        r0 := @parameter0: int[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(int[])>(r0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection)>($r1, $r2);

        return $r3;
    }

    public static java.util.Collection flatten(long[])
    {
        java.util.List $r1;
        long[] r0;
        java.util.Collection $r3;
        java.util.ArrayList $r2;

        r0 := @parameter0: long[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(long[])>(r0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection)>($r1, $r2);

        return $r3;
    }

    public static java.util.Collection flatten(float[])
    {
        java.util.List $r1;
        java.util.Collection $r3;
        float[] r0;
        java.util.ArrayList $r2;

        r0 := @parameter0: float[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(float[])>(r0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection)>($r1, $r2);

        return $r3;
    }

    public static java.util.Collection flatten(double[])
    {
        java.util.List $r1;
        java.util.Collection $r3;
        double[] r0;
        java.util.ArrayList $r2;

        r0 := @parameter0: double[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(double[])>(r0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection)>($r1, $r2);

        return $r3;
    }

    private static java.util.Collection flatten(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0, r2, $r5, $r7, $r8;
        java.util.Map $r6;
        java.lang.Object $r3;
        java.lang.Class $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r3 instanceof java.util.Collection;

        if $z1 == 0 goto label2;

        $r8 = (java.util.Collection) $r3;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection)>($r8, r2);

        goto label5;

     label2:
        $z2 = $r3 instanceof java.util.Map;

        if $z2 == 0 goto label3;

        $r6 = (java.util.Map) $r3;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection)>($r7, r2);

        goto label5;

     label3:
        if $r3 == null goto label4;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $z3 = virtualinvoke $r4.<java.lang.Class: boolean isArray()>();

        if $z3 == 0 goto label4;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.util.Collection arrayAsCollection(java.lang.Object)>($r3);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection)>($r5, r2);

        goto label5;

     label4:
        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label5:
        goto label1;

     label6:
        return r2;
    }

    public static java.util.Collection flatten(java.util.Collection, groovy.lang.Closure)
    {
        java.util.Collection r0, $r1, $r3;
        groovy.lang.Closure r2;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection createSimilarCollection(java.util.Collection)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection,groovy.lang.Closure)>(r0, $r1, r2);

        return $r3;
    }

    private static java.util.Collection flatten(java.util.Collection, java.util.Collection, groovy.lang.Closure)
    {
        java.lang.Object[] $r5;
        groovy.lang.Closure r4;
        int $i0;
        boolean $z0, $z1, $z2, $z3, z5, $z6, $z7, $z8;
        java.util.Iterator $r1;
        java.util.Collection r0, r2, $r7, $r8, $r12, $r13;
        java.util.List $r9;
        java.lang.Object $r3, $r6, $r10;
        java.lang.Class $r11;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.util.Collection;

        r4 := @parameter2: groovy.lang.Closure;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r3 instanceof java.util.Collection;

        if $z1 == 0 goto label2;

        $r13 = (java.util.Collection) $r3;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection,groovy.lang.Closure)>($r13, r2, r4);

        goto label8;

     label2:
        if $r3 == null goto label3;

        $r11 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $z3 = virtualinvoke $r11.<java.lang.Class: boolean isArray()>();

        if $z3 == 0 goto label3;

        $r12 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.util.Collection arrayAsCollection(java.lang.Object)>($r3);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection,groovy.lang.Closure)>($r12, r2, r4);

        goto label8;

     label3:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r3;

        $r6 = virtualinvoke r4.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r5);

        if $r6 != $r3 goto label4;

        $z8 = 1;

        $z7 = 1;

        goto label5;

     label4:
        $z8 = 0;

        $z7 = 0;

     label5:
        z5 = $z7;

        if $z8 != 0 goto label6;

        $z2 = $r6 instanceof java.util.Collection;

        if $z2 == 0 goto label6;

        $r8 = (java.util.Collection) $r6;

        $r9 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.util.Collection)>($r8);

        $i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i0 != 1 goto label6;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        if $r10 != $r3 goto label6;

        z5 = 1;

     label6:
        $z6 = $r6 instanceof java.util.Collection;

        if $z6 == 0 goto label7;

        if z5 != 0 goto label7;

        $r7 = (java.util.Collection) $r6;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Collection flatten(java.util.Collection,java.util.Collection,groovy.lang.Closure)>($r7, r2, r4);

        goto label8;

     label7:
        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label8:
        goto label1;

     label9:
        return r2;
    }

    public static java.util.Collection leftShift(java.util.Collection, java.lang.Object)
    {
        java.lang.Object r1;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object;

        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public static java.util.Map leftShift(java.util.Map, java.util.Map$Entry)
    {
        java.util.Map$Entry r1;
        java.util.Map r0;
        java.lang.Object $r2, $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map$Entry;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public static java.lang.StringBuffer leftShift(java.lang.String, java.lang.Object)
    {
        java.lang.StringBuffer $r0, $r3;
        java.lang.Object r2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>(r1);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        return $r3;
    }

    protected static java.io.StringWriter createStringWriter(java.lang.String)
    {
        java.lang.String r1;
        java.io.StringWriter $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>(r1);

        return $r0;
    }

    protected static org.codehaus.groovy.runtime.StringBufferWriter createStringBufferWriter(java.lang.StringBuffer)
    {
        org.codehaus.groovy.runtime.StringBufferWriter $r0;
        java.lang.StringBuffer r1;

        r1 := @parameter0: java.lang.StringBuffer;

        $r0 = new org.codehaus.groovy.runtime.StringBufferWriter;

        specialinvoke $r0.<org.codehaus.groovy.runtime.StringBufferWriter: void <init>(java.lang.StringBuffer)>(r1);

        return $r0;
    }

    public static java.lang.StringBuffer leftShift(java.lang.StringBuffer, java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.StringBuffer r0;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: java.lang.Object;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        return r0;
    }

    public static java.io.Writer leftShift(java.io.Writer, java.lang.Object) throws java.io.IOException
    {
        java.io.Writer r0;
        java.lang.Object r1;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: void write(java.io.Writer,java.lang.Object)>(r0, r1);

        return r0;
    }

    public static java.lang.Number leftShift(java.lang.Number, java.lang.Number)
    {
        java.lang.Number r0, r1, $r2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number leftShift(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r2;
    }

    public static java.lang.Number rightShift(java.lang.Number, java.lang.Number)
    {
        java.lang.Number r0, r1, $r2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number rightShift(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r2;
    }

    public static java.lang.Number rightShiftUnsigned(java.lang.Number, java.lang.Number)
    {
        java.lang.Number r0, r1, $r2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number rightShiftUnsigned(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r2;
    }

    public static void write(java.io.Writer, groovy.lang.Writable) throws java.io.IOException
    {
        java.io.Writer r1;
        groovy.lang.Writable r0;

        r1 := @parameter0: java.io.Writer;

        r0 := @parameter1: groovy.lang.Writable;

        interfaceinvoke r0.<groovy.lang.Writable: java.io.Writer writeTo(java.io.Writer)>(r1);

        return;
    }

    public static java.io.Writer leftShift(java.io.OutputStream, java.lang.Object) throws java.io.IOException
    {
        org.codehaus.groovy.runtime.FlushingStreamWriter $r0;
        java.io.OutputStream r1;
        java.lang.Object r2;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.Object;

        $r0 = new org.codehaus.groovy.runtime.FlushingStreamWriter;

        specialinvoke $r0.<org.codehaus.groovy.runtime.FlushingStreamWriter: void <init>(java.io.OutputStream)>(r1);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.Writer leftShift(java.io.Writer,java.lang.Object)>($r0, r2);

        return $r0;
    }

    public static void leftShift(java.io.ObjectOutputStream, java.lang.Object) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;

        r0 := @parameter0: java.io.ObjectOutputStream;

        r1 := @parameter1: java.lang.Object;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r1);

        return;
    }

    public static java.io.OutputStream leftShift(java.io.OutputStream, java.io.InputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r0;
        int $i0, $i1, $i3;
        java.io.InputStream r1;

        r2 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.io.InputStream;

        r0 = newarray (byte)[1024];

     label1:
        $i0 = lengthof r0;

        $i1 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r0, 0, $i0);

        $i3 = (int) -1;

        if $i1 != $i3 goto label2;

        goto label4;

     label2:
        if $i1 != 0 goto label3;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label1;

     label3:
        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i1);

        goto label1;

     label4:
        virtualinvoke r2.<java.io.OutputStream: void flush()>();

        return r2;
    }

    public static java.io.OutputStream leftShift(java.io.OutputStream, byte[]) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: byte[];

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>(r1);

        virtualinvoke r0.<java.io.OutputStream: void flush()>();

        return r0;
    }

    public static java.lang.Object getAt(byte[], int)
    {
        int i0;
        byte[] r0;
        java.lang.Object $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayGet(java.lang.Object,int)>(r0, i0);

        return $r1;
    }

    public static java.lang.Object getAt(char[], int)
    {
        int i0;
        char[] r0;
        java.lang.Object $r1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayGet(java.lang.Object,int)>(r0, i0);

        return $r1;
    }

    public static java.lang.Object getAt(short[], int)
    {
        int i0;
        java.lang.Object $r1;
        short[] r0;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayGet(java.lang.Object,int)>(r0, i0);

        return $r1;
    }

    public static java.lang.Object getAt(int[], int)
    {
        int i0;
        java.lang.Object $r1;
        int[] r0;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayGet(java.lang.Object,int)>(r0, i0);

        return $r1;
    }

    public static java.lang.Object getAt(long[], int)
    {
        int i0;
        java.lang.Object $r1;
        long[] r0;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayGet(java.lang.Object,int)>(r0, i0);

        return $r1;
    }

    public static java.lang.Object getAt(float[], int)
    {
        int i0;
        float[] r0;
        java.lang.Object $r1;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayGet(java.lang.Object,int)>(r0, i0);

        return $r1;
    }

    public static java.lang.Object getAt(double[], int)
    {
        double[] r0;
        int i0;
        java.lang.Object $r1;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayGet(java.lang.Object,int)>(r0, i0);

        return $r1;
    }

    public static java.lang.Object getAt(boolean[], int)
    {
        boolean[] r0;
        int i0;
        java.lang.Object $r1;

        r0 := @parameter0: boolean[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayGet(java.lang.Object,int)>(r0, i0);

        return $r1;
    }

    public static java.lang.Object getAt(byte[], groovy.lang.Range)
    {
        byte[] r0;
        groovy.lang.Range r1;
        java.util.List $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: groovy.lang.Range;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(char[], groovy.lang.Range)
    {
        char[] r0;
        groovy.lang.Range r1;
        java.util.List $r2;

        r0 := @parameter0: char[];

        r1 := @parameter1: groovy.lang.Range;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(short[], groovy.lang.Range)
    {
        groovy.lang.Range r1;
        java.util.List $r2;
        short[] r0;

        r0 := @parameter0: short[];

        r1 := @parameter1: groovy.lang.Range;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(int[], groovy.lang.Range)
    {
        groovy.lang.Range r1;
        java.util.List $r2;
        int[] r0;

        r0 := @parameter0: int[];

        r1 := @parameter1: groovy.lang.Range;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(long[], groovy.lang.Range)
    {
        groovy.lang.Range r1;
        java.util.List $r2;
        long[] r0;

        r0 := @parameter0: long[];

        r1 := @parameter1: groovy.lang.Range;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(float[], groovy.lang.Range)
    {
        groovy.lang.Range r1;
        float[] r0;
        java.util.List $r2;

        r0 := @parameter0: float[];

        r1 := @parameter1: groovy.lang.Range;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(double[], groovy.lang.Range)
    {
        double[] r0;
        groovy.lang.Range r1;
        java.util.List $r2;

        r0 := @parameter0: double[];

        r1 := @parameter1: groovy.lang.Range;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(boolean[], groovy.lang.Range)
    {
        boolean[] r0;
        groovy.lang.Range r1;
        java.util.List $r2;

        r0 := @parameter0: boolean[];

        r1 := @parameter1: groovy.lang.Range;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(byte[], groovy.lang.IntRange)
    {
        byte[] r0;
        java.util.List $r2;
        groovy.lang.IntRange r1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: groovy.lang.IntRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(char[], groovy.lang.IntRange)
    {
        char[] r0;
        java.util.List $r2;
        groovy.lang.IntRange r1;

        r0 := @parameter0: char[];

        r1 := @parameter1: groovy.lang.IntRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(short[], groovy.lang.IntRange)
    {
        java.util.List $r2;
        short[] r0;
        groovy.lang.IntRange r1;

        r0 := @parameter0: short[];

        r1 := @parameter1: groovy.lang.IntRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(int[], groovy.lang.IntRange)
    {
        java.util.List $r2;
        int[] r0;
        groovy.lang.IntRange r1;

        r0 := @parameter0: int[];

        r1 := @parameter1: groovy.lang.IntRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(long[], groovy.lang.IntRange)
    {
        java.util.List $r2;
        long[] r0;
        groovy.lang.IntRange r1;

        r0 := @parameter0: long[];

        r1 := @parameter1: groovy.lang.IntRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(float[], groovy.lang.IntRange)
    {
        float[] r0;
        java.util.List $r2;
        groovy.lang.IntRange r1;

        r0 := @parameter0: float[];

        r1 := @parameter1: groovy.lang.IntRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(double[], groovy.lang.IntRange)
    {
        double[] r0;
        java.util.List $r2;
        groovy.lang.IntRange r1;

        r0 := @parameter0: double[];

        r1 := @parameter1: groovy.lang.IntRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(boolean[], groovy.lang.IntRange)
    {
        boolean[] r0;
        java.util.List $r2;
        groovy.lang.IntRange r1;

        r0 := @parameter0: boolean[];

        r1 := @parameter1: groovy.lang.IntRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(byte[], groovy.lang.ObjectRange)
    {
        byte[] r0;
        java.util.List $r2;
        groovy.lang.ObjectRange r1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: groovy.lang.ObjectRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(char[], groovy.lang.ObjectRange)
    {
        char[] r0;
        java.util.List $r2;
        groovy.lang.ObjectRange r1;

        r0 := @parameter0: char[];

        r1 := @parameter1: groovy.lang.ObjectRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(short[], groovy.lang.ObjectRange)
    {
        java.util.List $r2;
        short[] r0;
        groovy.lang.ObjectRange r1;

        r0 := @parameter0: short[];

        r1 := @parameter1: groovy.lang.ObjectRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(int[], groovy.lang.ObjectRange)
    {
        java.util.List $r2;
        int[] r0;
        groovy.lang.ObjectRange r1;

        r0 := @parameter0: int[];

        r1 := @parameter1: groovy.lang.ObjectRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(long[], groovy.lang.ObjectRange)
    {
        java.util.List $r2;
        long[] r0;
        groovy.lang.ObjectRange r1;

        r0 := @parameter0: long[];

        r1 := @parameter1: groovy.lang.ObjectRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(float[], groovy.lang.ObjectRange)
    {
        float[] r0;
        java.util.List $r2;
        groovy.lang.ObjectRange r1;

        r0 := @parameter0: float[];

        r1 := @parameter1: groovy.lang.ObjectRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(double[], groovy.lang.ObjectRange)
    {
        double[] r0;
        java.util.List $r2;
        groovy.lang.ObjectRange r1;

        r0 := @parameter0: double[];

        r1 := @parameter1: groovy.lang.ObjectRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(boolean[], groovy.lang.ObjectRange)
    {
        boolean[] r0;
        java.util.List $r2;
        groovy.lang.ObjectRange r1;

        r0 := @parameter0: boolean[];

        r1 := @parameter1: groovy.lang.ObjectRange;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(byte[], java.util.Collection)
    {
        byte[] r0;
        java.util.List $r2;
        java.util.Collection r1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,java.util.Collection)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(char[], java.util.Collection)
    {
        char[] r0;
        java.util.List $r2;
        java.util.Collection r1;

        r0 := @parameter0: char[];

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,java.util.Collection)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(short[], java.util.Collection)
    {
        java.util.List $r2;
        short[] r0;
        java.util.Collection r1;

        r0 := @parameter0: short[];

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,java.util.Collection)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(int[], java.util.Collection)
    {
        java.util.List $r2;
        int[] r0;
        java.util.Collection r1;

        r0 := @parameter0: int[];

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,java.util.Collection)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(long[], java.util.Collection)
    {
        java.util.List $r2;
        long[] r0;
        java.util.Collection r1;

        r0 := @parameter0: long[];

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,java.util.Collection)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(float[], java.util.Collection)
    {
        float[] r0;
        java.util.List $r2;
        java.util.Collection r1;

        r0 := @parameter0: float[];

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,java.util.Collection)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(double[], java.util.Collection)
    {
        double[] r0;
        java.util.List $r2;
        java.util.Collection r1;

        r0 := @parameter0: double[];

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,java.util.Collection)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getAt(boolean[], java.util.Collection)
    {
        boolean[] r0;
        java.util.List $r2;
        java.util.Collection r1;

        r0 := @parameter0: boolean[];

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,java.util.Collection)>(r0, r1);

        return $r2;
    }

    public static boolean getAt(java.util.BitSet, int)
    {
        int i0;
        java.util.BitSet r0;
        boolean $z0;

        r0 := @parameter0: java.util.BitSet;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<java.util.BitSet: boolean get(int)>(i0);

        return $z0;
    }

    public static java.util.BitSet getAt(java.util.BitSet, groovy.lang.IntRange)
    {
        byte b6;
        int $i0, $i1, $i2, i3, $i4, $i5, i7, i8;
        boolean $z0, $z1;
        groovy.lang.IntRange r0;
        java.lang.Comparable $r1, $r2;
        java.util.BitSet $r3, r4;

        r4 := @parameter0: java.util.BitSet;

        r0 := @parameter1: groovy.lang.IntRange;

        $r1 = virtualinvoke r0.<groovy.lang.IntRange: java.lang.Comparable getFrom()>();

        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r1);

        $r2 = virtualinvoke r0.<groovy.lang.IntRange: java.lang.Comparable getTo()>();

        $i1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r2);

        $r3 = new java.util.BitSet;

        specialinvoke $r3.<java.util.BitSet: void <init>()>();

        $i2 = $i1 - $i0;

        i3 = $i2 + 1;

        b6 = 1;

        i7 = $i0;

        $z0 = virtualinvoke r0.<groovy.lang.IntRange: boolean isReverse()>();

        if $z0 == 0 goto label1;

        b6 = -1;

        i7 = $i1;

     label1:
        i8 = 0;

     label2:
        if i8 >= i3 goto label3;

        $i4 = b6 * i8;

        $i5 = i7 + $i4;

        $z1 = virtualinvoke r4.<java.util.BitSet: boolean get(int)>($i5);

        virtualinvoke $r3.<java.util.BitSet: void set(int,boolean)>(i8, $z1);

        i8 = i8 + 1;

        goto label2;

     label3:
        return $r3;
    }

    public static java.lang.Boolean putAt(boolean[], int, java.lang.Boolean)
    {
        boolean[] r0;
        int i0;
        java.lang.Boolean r1, $r3;
        java.lang.Object $r2;

        r0 := @parameter0: boolean[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Boolean;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayPut(java.lang.Object,int,java.lang.Object)>(r0, i0, r1);

        $r3 = (java.lang.Boolean) $r2;

        return $r3;
    }

    public static java.lang.Byte putAt(byte[], int, java.lang.Object)
    {
        byte[] r0;
        byte $b1;
        int i0;
        java.lang.Object $r1, r5;
        java.lang.Byte $r2, $r4;
        java.lang.Number r3;
        boolean $z0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r5 := @parameter2: java.lang.Object;

        $z0 = r5 instanceof java.lang.Byte;

        if $z0 != 0 goto label1;

        r3 = (java.lang.Number) r5;

        $r4 = new java.lang.Byte;

        $b1 = virtualinvoke r3.<java.lang.Number: byte byteValue()>();

        specialinvoke $r4.<java.lang.Byte: void <init>(byte)>($b1);

        r5 = $r4;

     label1:
        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayPut(java.lang.Object,int,java.lang.Object)>(r0, i0, r5);

        $r2 = (java.lang.Byte) $r1;

        return $r2;
    }

    public static java.lang.Character putAt(char[], int, java.lang.Object)
    {
        java.lang.Character $r0, $r3;
        int i0;
        char[] r1;
        java.lang.Object $r2, r4;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        r4 := @parameter2: java.lang.Object;

        $r0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Character getCharFromSizeOneString(java.lang.Object)>(r4);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayPut(java.lang.Object,int,java.lang.Object)>(r1, i0, $r0);

        $r3 = (java.lang.Character) $r2;

        return $r3;
    }

    public static java.lang.Short putAt(short[], int, java.lang.Object)
    {
        short $s1;
        java.lang.Character $r3;
        java.lang.Short $r1, $r8;
        int i0;
        java.lang.Object r2, $r7;
        java.lang.Class $r4, $r5;
        short[] r0;
        java.lang.Number r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $z0 = r2 instanceof java.lang.Short;

        if $z0 != 0 goto label5;

        $z1 = r2 instanceof java.lang.Character;

        if $z1 != 0 goto label1;

        $z2 = r2 instanceof java.lang.String;

        if $z2 != 0 goto label1;

        $z3 = r2 instanceof groovy.lang.GString;

        if $z3 == 0 goto label4;

     label1:
        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Character getCharFromSizeOneString(java.lang.Object)>(r2);

        $r4 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Short>;

        if $r4 != null goto label2;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Short> = $r5;

        goto label3;

     label2:
        $r5 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Short>;

     label3:
        r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r3, $r5);

        goto label5;

     label4:
        r6 = (java.lang.Number) r2;

        $r1 = new java.lang.Short;

        $s1 = virtualinvoke r6.<java.lang.Number: short shortValue()>();

        specialinvoke $r1.<java.lang.Short: void <init>(short)>($s1);

        r2 = $r1;

     label5:
        $r7 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayPut(java.lang.Object,int,java.lang.Object)>(r0, i0, r2);

        $r8 = (java.lang.Short) $r7;

        return $r8;
    }

    public static java.lang.Integer putAt(int[], int, java.lang.Object)
    {
        java.lang.Integer $r1, $r8;
        java.lang.Character $r3;
        int[] r0;
        int i0, $i1;
        java.lang.Object r2, $r7;
        java.lang.Class $r4, $r5;
        java.lang.Number r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $z0 = r2 instanceof java.lang.Integer;

        if $z0 != 0 goto label5;

        $z1 = r2 instanceof java.lang.Character;

        if $z1 != 0 goto label1;

        $z2 = r2 instanceof java.lang.String;

        if $z2 != 0 goto label1;

        $z3 = r2 instanceof groovy.lang.GString;

        if $z3 == 0 goto label4;

     label1:
        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Character getCharFromSizeOneString(java.lang.Object)>(r2);

        $r4 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Integer>;

        if $r4 != null goto label2;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Integer> = $r5;

        goto label3;

     label2:
        $r5 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Integer>;

     label3:
        r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r3, $r5);

        goto label5;

     label4:
        r6 = (java.lang.Number) r2;

        $r1 = new java.lang.Integer;

        $i1 = virtualinvoke r6.<java.lang.Number: int intValue()>();

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i1);

        r2 = $r1;

     label5:
        $r7 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayPut(java.lang.Object,int,java.lang.Object)>(r0, i0, r2);

        $r8 = (java.lang.Integer) $r7;

        return $r8;
    }

    public static java.lang.Long putAt(long[], int, java.lang.Object)
    {
        long $l1;
        long[] r0;
        java.lang.Character $r3;
        java.lang.Long $r1, $r8;
        int i0;
        java.lang.Object r2, $r7;
        java.lang.Class $r4, $r5;
        java.lang.Number r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $z0 = r2 instanceof java.lang.Long;

        if $z0 != 0 goto label5;

        $z1 = r2 instanceof java.lang.Character;

        if $z1 != 0 goto label1;

        $z2 = r2 instanceof java.lang.String;

        if $z2 != 0 goto label1;

        $z3 = r2 instanceof groovy.lang.GString;

        if $z3 == 0 goto label4;

     label1:
        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Character getCharFromSizeOneString(java.lang.Object)>(r2);

        $r4 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Long>;

        if $r4 != null goto label2;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Long> = $r5;

        goto label3;

     label2:
        $r5 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Long>;

     label3:
        r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r3, $r5);

        goto label5;

     label4:
        r6 = (java.lang.Number) r2;

        $r1 = new java.lang.Long;

        $l1 = virtualinvoke r6.<java.lang.Number: long longValue()>();

        specialinvoke $r1.<java.lang.Long: void <init>(long)>($l1);

        r2 = $r1;

     label5:
        $r7 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayPut(java.lang.Object,int,java.lang.Object)>(r0, i0, r2);

        $r8 = (java.lang.Long) $r7;

        return $r8;
    }

    public static java.lang.Float putAt(float[], int, java.lang.Object)
    {
        java.lang.Float $r1, $r8;
        float[] r0;
        java.lang.Character $r3;
        int i0;
        float $f0;
        java.lang.Object r2, $r7;
        java.lang.Class $r4, $r5;
        java.lang.Number r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $z0 = r2 instanceof java.lang.Float;

        if $z0 != 0 goto label5;

        $z1 = r2 instanceof java.lang.Character;

        if $z1 != 0 goto label1;

        $z2 = r2 instanceof java.lang.String;

        if $z2 != 0 goto label1;

        $z3 = r2 instanceof groovy.lang.GString;

        if $z3 == 0 goto label4;

     label1:
        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Character getCharFromSizeOneString(java.lang.Object)>(r2);

        $r4 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Float>;

        if $r4 != null goto label2;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Float> = $r5;

        goto label3;

     label2:
        $r5 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Float>;

     label3:
        r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r3, $r5);

        goto label5;

     label4:
        r6 = (java.lang.Number) r2;

        $r1 = new java.lang.Float;

        $f0 = virtualinvoke r6.<java.lang.Number: float floatValue()>();

        specialinvoke $r1.<java.lang.Float: void <init>(float)>($f0);

        r2 = $r1;

     label5:
        $r7 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayPut(java.lang.Object,int,java.lang.Object)>(r0, i0, r2);

        $r8 = (java.lang.Float) $r7;

        return $r8;
    }

    public static java.lang.Double putAt(double[], int, java.lang.Object)
    {
        java.lang.Double $r1, $r8;
        double[] r0;
        java.lang.Character $r3;
        int i0;
        java.lang.Object r2, $r7;
        java.lang.Class $r4, $r5;
        java.lang.Number r6;
        boolean $z0, $z1, $z2, $z3;
        double $d0;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $z0 = r2 instanceof java.lang.Double;

        if $z0 != 0 goto label5;

        $z1 = r2 instanceof java.lang.Character;

        if $z1 != 0 goto label1;

        $z2 = r2 instanceof java.lang.String;

        if $z2 != 0 goto label1;

        $z3 = r2 instanceof groovy.lang.GString;

        if $z3 == 0 goto label4;

     label1:
        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Character getCharFromSizeOneString(java.lang.Object)>(r2);

        $r4 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Double>;

        if $r4 != null goto label2;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Double> = $r5;

        goto label3;

     label2:
        $r5 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Double>;

     label3:
        r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r3, $r5);

        goto label5;

     label4:
        r6 = (java.lang.Number) r2;

        $r1 = new java.lang.Double;

        $d0 = virtualinvoke r6.<java.lang.Number: double doubleValue()>();

        specialinvoke $r1.<java.lang.Double: void <init>(double)>($d0);

        r2 = $r1;

     label5:
        $r7 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayPut(java.lang.Object,int,java.lang.Object)>(r0, i0, r2);

        $r8 = (java.lang.Double) $r7;

        return $r8;
    }

    public static void putAt(java.util.BitSet, groovy.lang.IntRange, boolean)
    {
        groovy.lang.IntRange r0;
        int $i0, $i1, $i2, i3, i4;
        java.lang.Comparable $r1, $r2;
        java.util.BitSet r3;
        boolean z0;

        r3 := @parameter0: java.util.BitSet;

        r0 := @parameter1: groovy.lang.IntRange;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<groovy.lang.IntRange: java.lang.Comparable getFrom()>();

        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r1);

        i3 = $i0;

        $r2 = virtualinvoke r0.<groovy.lang.IntRange: java.lang.Comparable getTo()>();

        $i1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r2);

        i4 = $i1;

        if $i0 <= $i1 goto label1;

        i4 = $i0;

        i3 = $i1;

     label1:
        $i2 = i4 + 1;

        virtualinvoke r3.<java.util.BitSet: void set(int,int,boolean)>(i3, $i2, z0);

        return;
    }

    public static void putAt(java.util.BitSet, int, boolean)
    {
        int i0;
        java.util.BitSet r0;
        boolean z0;

        r0 := @parameter0: java.util.BitSet;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<java.util.BitSet: void set(int,boolean)>(i0, z0);

        return;
    }

    public static int size(boolean[])
    {
        boolean[] r0;
        int $i0;

        r0 := @parameter0: boolean[];

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        return $i0;
    }

    public static int size(byte[])
    {
        int $i0;
        byte[] r0;

        r0 := @parameter0: byte[];

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        return $i0;
    }

    public static int size(char[])
    {
        int $i0;
        char[] r0;

        r0 := @parameter0: char[];

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        return $i0;
    }

    public static int size(short[])
    {
        int $i0;
        short[] r0;

        r0 := @parameter0: short[];

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        return $i0;
    }

    public static int size(int[])
    {
        int $i0;
        int[] r0;

        r0 := @parameter0: int[];

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        return $i0;
    }

    public static int size(long[])
    {
        int $i0;
        long[] r0;

        r0 := @parameter0: long[];

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        return $i0;
    }

    public static int size(float[])
    {
        int $i0;
        float[] r0;

        r0 := @parameter0: float[];

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        return $i0;
    }

    public static int size(double[])
    {
        double[] r0;
        int $i0;

        r0 := @parameter0: double[];

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        return $i0;
    }

    public static java.util.List toList(byte[])
    {
        byte[] r0;
        java.util.List $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.util.List primitiveArrayToList(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.util.List toList(boolean[])
    {
        boolean[] r0;
        java.util.List $r1;

        r0 := @parameter0: boolean[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.util.List primitiveArrayToList(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.util.List toList(char[])
    {
        char[] r0;
        java.util.List $r1;

        r0 := @parameter0: char[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.util.List primitiveArrayToList(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.util.List toList(short[])
    {
        java.util.List $r1;
        short[] r0;

        r0 := @parameter0: short[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.util.List primitiveArrayToList(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.util.List toList(int[])
    {
        java.util.List $r1;
        int[] r0;

        r0 := @parameter0: int[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.util.List primitiveArrayToList(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.util.List toList(long[])
    {
        java.util.List $r1;
        long[] r0;

        r0 := @parameter0: long[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.util.List primitiveArrayToList(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.util.List toList(float[])
    {
        float[] r0;
        java.util.List $r1;

        r0 := @parameter0: float[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.util.List primitiveArrayToList(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.util.List toList(double[])
    {
        double[] r0;
        java.util.List $r1;

        r0 := @parameter0: double[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.util.List primitiveArrayToList(java.lang.Object)>(r0);

        return $r1;
    }

    public static groovy.lang.Writable encodeBase64(java.lang.Byte[], boolean)
    {
        byte[] $r1;
        java.lang.Byte[] r0;
        groovy.lang.Writable $r2;
        boolean z0;

        r0 := @parameter0: java.lang.Byte[];

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: byte[] convertToByteArray(java.lang.Object)>(r0);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: groovy.lang.Writable encodeBase64(byte[],boolean)>($r1, z0);

        return $r2;
    }

    public static groovy.lang.Writable encodeBase64(java.lang.Byte[])
    {
        byte[] $r1;
        java.lang.Byte[] r0;
        groovy.lang.Writable $r2;

        r0 := @parameter0: java.lang.Byte[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: byte[] convertToByteArray(java.lang.Object)>(r0);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: groovy.lang.Writable encodeBase64(byte[],boolean)>($r1, 0);

        return $r2;
    }

    public static groovy.lang.Writable encodeBase64(byte[], boolean)
    {
        byte[] r1;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$2 $r0;
        boolean z0;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        $r0 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$2;

        specialinvoke $r0.<org.codehaus.groovy.runtime.DefaultGroovyMethods$2: void <init>(byte[],boolean)>(r1, z0);

        return $r0;
    }

    public static groovy.lang.Writable encodeBase64(byte[])
    {
        byte[] r0;
        groovy.lang.Writable $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: groovy.lang.Writable encodeBase64(byte[],boolean)>(r0, 0);

        return $r1;
    }

    public static byte[] decodeBase64(java.lang.String)
    {
        byte[] $r3, $r6;
        byte $b11;
        java.lang.StringBuffer $r9;
        int $i0, $i2, $i3, $i4, $i5, $i6, i8, i9, i10, $i12, $i13, $i15, $i17;
        java.lang.String r1, $r2;
        boolean z0;
        char $c1, $c7;
        java.lang.RuntimeException $r10, $r11, $r12;
        java.io.UnsupportedEncodingException $r7;

        r1 := @parameter0: java.lang.String;

        i8 = 4;

        i9 = 0;

        z0 = 0;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        i10 = 0;

     label01:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i10 == $i0 goto label09;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i10);

        $i12 = (int) $c1;

        if $i12 >= 123 goto label02;

        $r6 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: byte[] TRANSLATE_TABLE>;

        $i13 = (int) $c1;

        $b11 = $r6[$i13];

        goto label03;

     label02:
        $b11 = 66;

     label03:
        if $b11 >= 64 goto label05;

        if z0 == 0 goto label04;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("= character not at end of base64 value");

        throw $r10;

     label04:
        $i2 = i9 << 6;

        i9 = $i2 | $b11;

        $i3 = i8;

        $i15 = (int) -1;

        i8 = i8 + $i15;

        if $i3 == 4 goto label07;

        $i4 = i8 * 2;

        $i5 = i9 >> $i4;

        $i6 = $i5 & 255;

        $c7 = (char) $i6;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c7);

        goto label07;

     label05:
        if $b11 != 64 goto label06;

        $i17 = (int) -1;

        i8 = i8 + $i17;

        z0 = 1;

        goto label07;

     label06:
        if $b11 != 66 goto label07;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("bad character in base64 value");

        throw $r11;

     label07:
        if i8 != 0 goto label08;

        i8 = 4;

     label08:
        i10 = i10 + 1;

        goto label01;

     label09:
        $r2 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

     label10:
        return $r3;

     label11:
        $r7 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("Base 64 decode produced byte values > 255");

        throw $r12;

        catch java.io.UnsupportedEncodingException from label09 to label10 with label11;
    }

    protected static java.lang.Object primitiveArrayGet(java.lang.Object, int)
    {
        int i0, $i1, $i2;
        java.lang.Object r0, $r1;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        $i2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>(i0, $i1);

        $r1 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r0, $i2);

        return $r1;
    }

    protected static java.util.List primitiveArrayGet(java.lang.Object, groovy.lang.Range)
    {
        java.util.Iterator $r2;
        java.util.ArrayList $r0;
        groovy.lang.Range r1;
        int $i0;
        java.lang.Object $r3, r4, $r5;
        boolean $z0;

        r4 := @parameter0: java.lang.Object;

        r1 := @parameter1: groovy.lang.Range;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<groovy.lang.Range: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r3);

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayGet(java.lang.Object,int)>(r4, $i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    protected static java.util.List primitiveArrayGet(java.lang.Object, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        java.util.ArrayList $r0;
        groovy.lang.Range $r8;
        java.util.List $r6, $r7, $r9;
        int $i0;
        java.lang.Object $r3, r4, $r5;
        boolean $z0, $z1, $z2;

        r4 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.util.Collection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r3 instanceof groovy.lang.Range;

        if $z1 == 0 goto label2;

        $r8 = (groovy.lang.Range) $r3;

        $r9 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,groovy.lang.Range)>(r4, $r8);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r9);

        goto label4;

     label2:
        $z2 = $r3 instanceof java.util.List;

        if $z2 == 0 goto label3;

        $r6 = (java.util.List) $r3;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List primitiveArrayGet(java.lang.Object,java.util.Collection)>(r4, $r6);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        goto label4;

     label3:
        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r3);

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object primitiveArrayGet(java.lang.Object,int)>(r4, $i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

     label4:
        goto label1;

     label5:
        return $r0;
    }

    protected static java.lang.Object primitiveArrayPut(java.lang.Object, int, java.lang.Object)
    {
        int i0, $i1, $i2;
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        $i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        $i2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int normaliseIndex(int,int)>(i0, $i1);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(r0, $i2, r1);

        return r1;
    }

    public static java.lang.Character toCharacter(java.lang.String)
    {
        char $c0;
        java.lang.String r1;
        java.lang.Character $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.Character;

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        specialinvoke $r0.<java.lang.Character: void <init>(char)>($c0);

        return $r0;
    }

    public static java.lang.Boolean toBoolean(java.lang.String)
    {
        java.lang.Boolean $r5, $r6;
        java.lang.String r0, $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $r2 = "true";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r3 = "y";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z1 != 0 goto label1;

        $r4 = "1";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 == 0 goto label2;

     label1:
        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r6;

     label2:
        $r5 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r5;
    }

    public static java.lang.String[] split(java.lang.String)
    {
        java.util.StringTokenizer $r0;
        int $i0, $i1, i2;
        java.lang.String[] r2;
        java.lang.String r1, $r3;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String)>(r1);

        $i0 = virtualinvoke $r0.<java.util.StringTokenizer: int countTokens()>();

        r2 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r2;

        if i2 >= $i1 goto label2;

        $r3 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r2[i2] = $r3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static java.lang.String[] split(groovy.lang.GString)
    {
        groovy.lang.GString r0;
        java.lang.String[] $r2;
        java.lang.String $r1;

        r0 := @parameter0: groovy.lang.GString;

        $r1 = virtualinvoke r0.<groovy.lang.GString: java.lang.String toString()>();

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String[] split(java.lang.String)>($r1);

        return $r2;
    }

    public static java.util.List tokenize(java.lang.String, java.lang.String)
    {
        java.util.List $r3;
        java.util.StringTokenizer $r0;
        java.lang.String r1, r2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.List asList(java.lang.Object)>($r0);

        return $r3;
    }

    public static java.util.List tokenize(java.lang.String)
    {
        java.util.List $r2;
        java.lang.String r1;
        java.util.StringTokenizer $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.List asList(java.lang.Object)>($r0);

        return $r2;
    }

    public static java.lang.String plus(java.lang.String, java.lang.Object)
    {
        java.lang.StringBuffer $r0, $r2, $r5;
        java.lang.Object r3;
        java.lang.String r1, $r4, $r6;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String toString(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String plus(java.lang.Number, java.lang.String)
    {
        java.lang.StringBuffer $r0, $r3, $r5;
        java.lang.String $r2, r4, $r6;
        java.lang.Number r1;

        r1 := @parameter0: java.lang.Number;

        r4 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String toString(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String plus(java.lang.StringBuffer, java.lang.String)
    {
        java.lang.StringBuffer $r0, r1, $r2, $r4;
        java.lang.String r3, $r5;

        r1 := @parameter0: java.lang.StringBuffer;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String minus(java.lang.String, java.lang.Object)
    {
        java.util.regex.Matcher $r11;
        java.lang.StringBuffer $r6, $r8, $r13;
        int $i0, $i1, i2, $i3, $i5;
        java.lang.String $r1, r2, $r3, $r5, $r7, $r9, $r12;
        boolean $z0;
        java.lang.Object r0;
        java.util.regex.Pattern $r10;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.util.regex.Pattern;

        if $z0 == 0 goto label1;

        $r10 = (java.util.regex.Pattern) r0;

        $r11 = virtualinvoke $r10.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $r12 = virtualinvoke $r11.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>("");

        return $r12;

     label1:
        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String toString(java.lang.Object)>(r0);

        $i0 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>($r1);

        $i5 = (int) -1;

        if $i0 != $i5 goto label2;

        return r2;

     label2:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        i2 = $i0 + $i1;

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i3 <= i2 goto label3;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r6 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(i2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;

     label3:
        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r3;
    }

    public static boolean contains(java.lang.String, java.lang.String)
    {
        int $i0;
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int count(java.lang.String, java.lang.String)
    {
        int $i0, i1, i2;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i1 = 0;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i2);

        if $i0 < 0 goto label2;

        i1 = i1 + 1;

        i2 = $i0 + 1;

        goto label1;

     label2:
        return i1;
    }

    public static java.lang.String next(java.lang.String)
    {
        char $c3, c7;
        java.lang.StringBuffer $r3;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i8, $i10, $i11;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>(r1);

        $i0 = virtualinvoke $r3.<java.lang.StringBuffer: int length()>();

        if $i0 != 0 goto label1;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(0);

        goto label3;

     label1:
        $i1 = virtualinvoke $r3.<java.lang.StringBuffer: int length()>();

        $i2 = $i1 - 1;

        $c3 = virtualinvoke $r3.<java.lang.StringBuffer: char charAt(int)>($i2);

        $i8 = (int) $c3;

        $i10 = (int) 65535;

        if $i8 != $i10 goto label2;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(0);

        goto label3;

     label2:
        $i11 = (int) $c3;

        $i4 = $i11 + 1;

        c7 = (char) $i4;

        $i5 = virtualinvoke $r3.<java.lang.StringBuffer: int length()>();

        $i6 = $i5 - 1;

        virtualinvoke $r3.<java.lang.StringBuffer: void setCharAt(int,char)>($i6, c7);

     label3:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String previous(java.lang.String)
    {
        char $c3, c9;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuffer $r4;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i10;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(java.lang.String)>(r1);

        $i0 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        if $i0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("the string is empty");

        throw $r5;

     label1:
        $i1 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        $i2 = $i1 - 1;

        $c3 = virtualinvoke $r4.<java.lang.StringBuffer: char charAt(int)>($i2);

        if $c3 != 0 goto label2;

        $i7 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        $i8 = $i7 - 1;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>($i8);

        goto label3;

     label2:
        $i10 = (int) $c3;

        $i4 = $i10 - 1;

        c9 = (char) $i4;

        $i5 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        $i6 = $i5 - 1;

        virtualinvoke $r4.<java.lang.StringBuffer: void setCharAt(int,char)>($i6, c9);

     label3:
        $r2 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.Process execute(java.lang.String) throws java.io.IOException
    {
        java.lang.String r1;
        java.lang.Process $r2;
        java.lang.Runtime $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r2 = virtualinvoke $r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>(r1);

        return $r2;
    }

    public static java.lang.Process execute(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r1;
        java.lang.Process $r2;
        java.lang.Runtime $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r2 = virtualinvoke $r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>(r1);

        return $r2;
    }

    public static java.lang.Process execute(java.lang.String, java.lang.String[], java.io.File) throws java.io.IOException
    {
        java.lang.Process $r4;
        java.lang.Runtime $r0;
        java.lang.String[] r2;
        java.lang.String r1;
        java.io.File r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.io.File;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r4 = virtualinvoke $r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>(r1, r2, r3);

        return $r4;
    }

    public static java.lang.Process execute(java.util.List) throws java.io.IOException
    {
        java.util.Iterator $r2;
        java.lang.Process $r3;
        java.lang.String[] r1;
        java.util.List r0;
        int $i0, i1;
        java.lang.Object $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (java.lang.String)[$i0];

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        i1 = 0;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        r1[i1] = $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Process execute(java.lang.String[])>(r1);

        return $r3;
    }

    public static java.lang.Process execute(java.lang.String, java.util.List, java.io.File) throws java.io.IOException
    {
        java.util.Iterator $r2;
        java.lang.Process $r5, $r9;
        java.lang.String[] r1, $r8;
        java.io.File r4;
        java.util.List r0;
        int $i0, i1;
        java.lang.Object $r6;
        java.lang.String r3, $r7;
        boolean $z0;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.List;

        r4 := @parameter2: java.io.File;

        if r0 != null goto label1;

        $r8 = (java.lang.String[]) null;

        $r9 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Process execute(java.lang.String,java.lang.String[],java.io.File)>(r3, $r8, r4);

        return $r9;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (java.lang.String)[$i0];

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        i1 = 0;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        r1[i1] = $r7;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Process execute(java.lang.String,java.lang.String[],java.io.File)>(r3, r1, r4);

        return $r5;
    }

    public static java.lang.String multiply(java.lang.String, java.lang.Number)
    {
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuffer $r1, $r5, $r6, $r7;
        int $i0, i1;
        java.lang.String r2, $r3, $r8;
        java.lang.Number r0;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Number;

        $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        if $i0 != 0 goto label1;

        return "";

     label1:
        if $i0 >= 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("multiply() should be called with a number of 0 or greater not: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>(r2);

        i1 = 1;

     label3:
        if i1 >= $i0 goto label4;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        i1 = i1 + 1;

        goto label3;

     label4:
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String toString(java.util.Map)
    {
        java.lang.String $r1;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String toMapString(java.util.Map)>(r0);

        return $r1;
    }

    public static java.lang.String toMapString(java.util.Map)
    {
        java.lang.String $r1;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        $r1 = "null";

        goto label2;

     label1:
        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toMapString(java.util.Map)>(r0);

     label2:
        return $r1;
    }

    public static java.lang.String toString(java.util.Collection)
    {
        java.lang.String $r1;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String toListString(java.util.Collection)>(r0);

        return $r1;
    }

    public static java.lang.String toListString(java.util.Collection)
    {
        java.lang.String $r1;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        $r1 = "null";

        goto label2;

     label1:
        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toListString(java.util.Collection)>(r0);

     label2:
        return $r1;
    }

    public static java.lang.String toString(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String toArrayString(java.lang.Object[])>(r0);

        return $r1;
    }

    public static java.lang.String toArrayString(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label1;

        $r1 = "null";

        goto label2;

     label1:
        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toArrayString(java.lang.Object[])>(r0);

     label2:
        return $r1;
    }

    protected static java.lang.String toString(java.lang.Object)
    {
        java.lang.Object[] $r2, $r3;
        java.util.Collection $r5;
        java.util.Map $r7;
        java.lang.Object r0;
        java.lang.String $r1, $r4, $r6, $r8;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.Map;

        if $z0 == 0 goto label1;

        $r7 = (java.util.Map) r0;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String toMapString(java.util.Map)>($r7);

        return $r8;

     label1:
        $z1 = r0 instanceof java.util.Collection;

        if $z1 == 0 goto label2;

        $r5 = (java.util.Collection) r0;

        $r6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String toListString(java.util.Collection)>($r5);

        return $r6;

     label2:
        $z2 = r0 instanceof java.lang.Object[];

        if $z2 == 0 goto label3;

        $r2 = (java.lang.Object[]) r0;

        $r3 = (java.lang.Object[]) $r2;

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String toArrayString(java.lang.Object[])>($r3);

        return $r4;

     label3:
        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toString(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.lang.Character next(java.lang.Character)
    {
        java.lang.Character r0, $r2;
        int $i1, $i3;
        char $c0, c2;

        r0 := @parameter0: java.lang.Character;

        $c0 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        $i3 = (int) $c0;

        $i1 = $i3 + 1;

        c2 = (char) $i1;

        $r2 = new java.lang.Character;

        specialinvoke $r2.<java.lang.Character: void <init>(char)>(c2);

        return $r2;
    }

    public static java.lang.Number next(java.lang.Number)
    {
        java.lang.Number r0, $r2;
        java.lang.Integer $r1;

        r0 := @parameter0: java.lang.Number;

        $r1 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Integer ONE>;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number plus(java.lang.Number,java.lang.Number)>(r0, $r1);

        return $r2;
    }

    public static java.lang.Character previous(java.lang.Character)
    {
        java.lang.Character r0, $r2;
        int $i1, $i3;
        char $c0, c2;

        r0 := @parameter0: java.lang.Character;

        $c0 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        $i3 = (int) $c0;

        $i1 = $i3 - 1;

        c2 = (char) $i1;

        $r2 = new java.lang.Character;

        specialinvoke $r2.<java.lang.Character: void <init>(char)>(c2);

        return $r2;
    }

    public static java.lang.Number previous(java.lang.Number)
    {
        java.lang.Number r0, $r2;
        java.lang.Integer $r1;

        r0 := @parameter0: java.lang.Number;

        $r1 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Integer ONE>;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number minus(java.lang.Number,java.lang.Number)>(r0, $r1);

        return $r2;
    }

    public static java.lang.Number plus(java.lang.Character, java.lang.Number)
    {
        java.lang.Character r1;
        int $i1;
        char $c0;
        java.lang.Number r2, $r3;
        java.lang.Integer $r4;

        r1 := @parameter0: java.lang.Character;

        r2 := @parameter1: java.lang.Number;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number plus(java.lang.Number,java.lang.Number)>($r4, r2);

        return $r3;
    }

    public static java.lang.Number plus(java.lang.Number, java.lang.Character)
    {
        java.lang.Character r2;
        int $i1;
        char $c0;
        java.lang.Number r0, $r3;
        java.lang.Integer $r4;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Character;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r2.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number plus(java.lang.Number,java.lang.Number)>(r0, $r4);

        return $r3;
    }

    public static java.lang.Number plus(java.lang.Character, java.lang.Character)
    {
        java.lang.Character r1, r2;
        int $i1;
        char $c0;
        java.lang.Number $r3;
        java.lang.Integer $r4;

        r1 := @parameter0: java.lang.Character;

        r2 := @parameter1: java.lang.Character;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number plus(java.lang.Number,java.lang.Character)>($r4, r2);

        return $r3;
    }

    public static java.lang.Number plus(java.lang.Number, java.lang.Number)
    {
        java.lang.Number r0, r1, $r2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number add(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r2;
    }

    public static int compareTo(java.lang.Character, java.lang.Number)
    {
        java.lang.Character r1;
        int $i1, $i2;
        char $c0;
        java.lang.Number r2;
        java.lang.Integer $r3;

        r1 := @parameter0: java.lang.Character;

        r2 := @parameter1: java.lang.Number;

        $r3 = new java.lang.Integer;

        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();

        $i2 = (int) $c0;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i2);

        $i1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int compareTo(java.lang.Number,java.lang.Number)>($r3, r2);

        return $i1;
    }

    public static int compareTo(java.lang.Number, java.lang.Character)
    {
        java.lang.Character r2;
        int $i1, $i2;
        char $c0;
        java.lang.Number r0;
        java.lang.Integer $r3;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Character;

        $r3 = new java.lang.Integer;

        $c0 = virtualinvoke r2.<java.lang.Character: char charValue()>();

        $i2 = (int) $c0;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i2);

        $i1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int compareTo(java.lang.Number,java.lang.Number)>(r0, $r3);

        return $i1;
    }

    public static int compareTo(java.lang.Character, java.lang.Character)
    {
        java.lang.Character r1, r2;
        int $i1, $i2;
        char $c0;
        java.lang.Integer $r3;

        r1 := @parameter0: java.lang.Character;

        r2 := @parameter1: java.lang.Character;

        $r3 = new java.lang.Integer;

        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();

        $i2 = (int) $c0;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i2);

        $i1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int compareTo(java.lang.Number,java.lang.Character)>($r3, r2);

        return $i1;
    }

    public static int compareTo(java.lang.Number, java.lang.Number)
    {
        int $i0;
        java.lang.Number r0, r1;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: int compareTo(java.lang.Number,java.lang.Number)>(r0, r1);

        return $i0;
    }

    public static java.lang.Number minus(java.lang.Character, java.lang.Number)
    {
        java.lang.Character r1;
        int $i1;
        char $c0;
        java.lang.Number r2, $r3;
        java.lang.Integer $r4;

        r1 := @parameter0: java.lang.Character;

        r2 := @parameter1: java.lang.Number;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number minus(java.lang.Number,java.lang.Number)>($r4, r2);

        return $r3;
    }

    public static java.lang.Number minus(java.lang.Number, java.lang.Character)
    {
        java.lang.Character r2;
        int $i1;
        char $c0;
        java.lang.Number r0, $r3;
        java.lang.Integer $r4;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Character;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r2.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number minus(java.lang.Number,java.lang.Number)>(r0, $r4);

        return $r3;
    }

    public static java.lang.Number minus(java.lang.Character, java.lang.Character)
    {
        java.lang.Character r1, r2;
        int $i1;
        char $c0;
        java.lang.Number $r3;
        java.lang.Integer $r4;

        r1 := @parameter0: java.lang.Character;

        r2 := @parameter1: java.lang.Character;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number minus(java.lang.Number,java.lang.Character)>($r4, r2);

        return $r3;
    }

    public static java.lang.Number minus(java.lang.Number, java.lang.Number)
    {
        java.lang.Number r0, r1, $r2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number subtract(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r2;
    }

    public static java.lang.Number multiply(java.lang.Character, java.lang.Number)
    {
        java.lang.Character r1;
        int $i1;
        char $c0;
        java.lang.Number r2, $r3;
        java.lang.Integer $r4;

        r1 := @parameter0: java.lang.Character;

        r2 := @parameter1: java.lang.Number;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number multiply(java.lang.Number,java.lang.Number)>($r4, r2);

        return $r3;
    }

    public static java.lang.Number multiply(java.lang.Number, java.lang.Character)
    {
        java.lang.Character r2;
        int $i1;
        char $c0;
        java.lang.Number r0, $r3;
        java.lang.Integer $r4;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Character;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r2.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number multiply(java.lang.Number,java.lang.Number)>(r0, $r4);

        return $r3;
    }

    public static java.lang.Number multiply(java.lang.Character, java.lang.Character)
    {
        java.lang.Character r1, r2;
        int $i1;
        char $c0;
        java.lang.Number $r3;
        java.lang.Integer $r4;

        r1 := @parameter0: java.lang.Character;

        r2 := @parameter1: java.lang.Character;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number multiply(java.lang.Number,java.lang.Character)>($r4, r2);

        return $r3;
    }

    public static java.lang.Number multiply(java.lang.Number, java.lang.Number)
    {
        java.lang.Number r0, r1, $r2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number multiply(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r2;
    }

    public static java.lang.Number multiply(java.math.BigDecimal, java.lang.Double)
    {
        java.math.BigDecimal r0;
        java.lang.Number $r2;
        java.lang.Double r1;

        r0 := @parameter0: java.math.BigDecimal;

        r1 := @parameter1: java.lang.Double;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number multiply(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r2;
    }

    public static java.lang.Number multiply(java.math.BigDecimal, java.math.BigInteger)
    {
        java.math.BigDecimal r0;
        java.math.BigInteger r1;
        java.lang.Number $r2;

        r0 := @parameter0: java.math.BigDecimal;

        r1 := @parameter1: java.math.BigInteger;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number multiply(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r2;
    }

    public static java.lang.Number power(java.lang.Number, java.lang.Number)
    {
        java.lang.Double $r2;
        long $l2, $l4;
        java.lang.Integer $r4;
        byte $b1, $b3;
        java.lang.Long $r3;
        int $i0, $i5;
        java.lang.Number r0, r1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        $d1 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, $d1);

        $i0 = (int) $d2;

        $d3 = (double) $i0;

        $b1 = $d3 cmpl $d2;

        if $b1 != 0 goto label1;

        $r4 = new java.lang.Integer;

        $i5 = (int) $d2;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i5);

        return $r4;

     label1:
        $l2 = (long) $d2;

        $d4 = (double) $l2;

        $b3 = $d4 cmpl $d2;

        if $b3 != 0 goto label2;

        $r3 = new java.lang.Long;

        $l4 = (long) $d2;

        specialinvoke $r3.<java.lang.Long: void <init>(long)>($l4);

        return $r3;

     label2:
        $r2 = new java.lang.Double;

        specialinvoke $r2.<java.lang.Double: void <init>(double)>($d2);

        return $r2;
    }

    public static java.lang.Number div(java.lang.Character, java.lang.Number)
    {
        java.lang.Character r1;
        int $i1;
        char $c0;
        java.lang.Number r2, $r3;
        java.lang.Integer $r4;

        r1 := @parameter0: java.lang.Character;

        r2 := @parameter1: java.lang.Number;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number div(java.lang.Number,java.lang.Number)>($r4, r2);

        return $r3;
    }

    public static java.lang.Number div(java.lang.Number, java.lang.Character)
    {
        java.lang.Character r2;
        int $i1;
        char $c0;
        java.lang.Number r0, $r3;
        java.lang.Integer $r4;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Character;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r2.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number div(java.lang.Number,java.lang.Number)>(r0, $r4);

        return $r3;
    }

    public static java.lang.Number div(java.lang.Character, java.lang.Character)
    {
        java.lang.Character r1, r2;
        int $i1;
        char $c0;
        java.lang.Number $r3;
        java.lang.Integer $r4;

        r1 := @parameter0: java.lang.Character;

        r2 := @parameter1: java.lang.Character;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number div(java.lang.Number,java.lang.Character)>($r4, r2);

        return $r3;
    }

    public static java.lang.Number div(java.lang.Number, java.lang.Number)
    {
        java.lang.Number r0, r1, $r2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number divide(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r2;
    }

    public static java.lang.Number intdiv(java.lang.Character, java.lang.Number)
    {
        java.lang.Character r1;
        int $i1;
        char $c0;
        java.lang.Number r2, $r3;
        java.lang.Integer $r4;

        r1 := @parameter0: java.lang.Character;

        r2 := @parameter1: java.lang.Number;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number intdiv(java.lang.Number,java.lang.Number)>($r4, r2);

        return $r3;
    }

    public static java.lang.Number intdiv(java.lang.Number, java.lang.Character)
    {
        java.lang.Character r2;
        int $i1;
        char $c0;
        java.lang.Number r0, $r3;
        java.lang.Integer $r4;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Character;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r2.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number intdiv(java.lang.Number,java.lang.Number)>(r0, $r4);

        return $r3;
    }

    public static java.lang.Number intdiv(java.lang.Character, java.lang.Character)
    {
        java.lang.Character r1, r2;
        int $i1;
        char $c0;
        java.lang.Number $r3;
        java.lang.Integer $r4;

        r1 := @parameter0: java.lang.Character;

        r2 := @parameter1: java.lang.Character;

        $r4 = new java.lang.Integer;

        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Number intdiv(java.lang.Number,java.lang.Character)>($r4, r2);

        return $r3;
    }

    public static java.lang.Number intdiv(java.lang.Number, java.lang.Number)
    {
        java.lang.Number r0, r1, $r2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number intdiv(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r2;
    }

    public static java.lang.Number or(java.lang.Number, java.lang.Number)
    {
        java.lang.Number r0, r1, $r2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number or(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r2;
    }

    public static java.lang.Number and(java.lang.Number, java.lang.Number)
    {
        java.lang.Number r0, r1, $r2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number and(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r2;
    }

    public static java.util.BitSet and(java.util.BitSet, java.util.BitSet)
    {
        java.lang.Object $r1;
        java.util.BitSet r0, r2, r3;

        r0 := @parameter0: java.util.BitSet;

        r3 := @parameter1: java.util.BitSet;

        $r1 = virtualinvoke r0.<java.util.BitSet: java.lang.Object clone()>();

        r2 = (java.util.BitSet) $r1;

        virtualinvoke r2.<java.util.BitSet: void and(java.util.BitSet)>(r3);

        return r2;
    }

    public static java.util.BitSet xor(java.util.BitSet, java.util.BitSet)
    {
        java.lang.Object $r1;
        java.util.BitSet r0, r2, r3;

        r0 := @parameter0: java.util.BitSet;

        r3 := @parameter1: java.util.BitSet;

        $r1 = virtualinvoke r0.<java.util.BitSet: java.lang.Object clone()>();

        r2 = (java.util.BitSet) $r1;

        virtualinvoke r2.<java.util.BitSet: void xor(java.util.BitSet)>(r3);

        return r2;
    }

    public static java.util.BitSet bitwiseNegate(java.util.BitSet)
    {
        int $i0, $i1;
        java.lang.Object $r1;
        java.util.BitSet r0, r2;

        r0 := @parameter0: java.util.BitSet;

        $r1 = virtualinvoke r0.<java.util.BitSet: java.lang.Object clone()>();

        r2 = (java.util.BitSet) $r1;

        $i0 = virtualinvoke r2.<java.util.BitSet: int size()>();

        $i1 = $i0 - 1;

        virtualinvoke r2.<java.util.BitSet: void flip(int,int)>(0, $i1);

        return r2;
    }

    public static java.util.BitSet or(java.util.BitSet, java.util.BitSet)
    {
        java.lang.Object $r1;
        java.util.BitSet r0, r2, r3;

        r0 := @parameter0: java.util.BitSet;

        r3 := @parameter1: java.util.BitSet;

        $r1 = virtualinvoke r0.<java.util.BitSet: java.lang.Object clone()>();

        r2 = (java.util.BitSet) $r1;

        virtualinvoke r2.<java.util.BitSet: void or(java.util.BitSet)>(r3);

        return r2;
    }

    public static java.lang.Number xor(java.lang.Number, java.lang.Number)
    {
        java.lang.Number r0, r1, $r2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number xor(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r2;
    }

    public static java.lang.Number mod(java.lang.Number, java.lang.Number)
    {
        java.lang.Number r0, r1, $r2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number mod(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r2;
    }

    public static java.lang.Number unaryMinus(java.lang.Number)
    {
        java.lang.Number r0, $r1;

        r0 := @parameter0: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number unaryMinus(java.lang.Number)>(r0);

        return $r1;
    }

    public static void times(java.lang.Number, groovy.lang.Closure)
    {
        int $i0, $i1, i2;
        groovy.lang.Closure r1;
        java.lang.Number r0;
        java.lang.Integer $r2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: groovy.lang.Closure;

        i2 = 0;

        $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>();

     label1:
        if i2 >= $i0 goto label3;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i2);

        virtualinvoke r1.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r2);

        $i1 = virtualinvoke r1.<groovy.lang.Closure: int getDirective()>();

        if $i1 != 1 goto label2;

        goto label3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public static void upto(java.lang.Number, java.lang.Number, groovy.lang.Closure)
    {
        groovy.lang.GroovyRuntimeException $r2;
        groovy.lang.Closure r10;
        java.lang.Integer $r11;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, i2;
        java.lang.String $r9;
        java.lang.Number r0, r1;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        r10 := @parameter2: groovy.lang.Closure;

        $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        if $i0 > $i1 goto label3;

        i2 = $i0;

     label1:
        if i2 > $i1 goto label2;

        $r11 = new java.lang.Integer;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>(i2);

        virtualinvoke r10.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r11);

        i2 = i2 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        $r2 = new groovy.lang.GroovyRuntimeException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".upto(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label4:
        return;
    }

    public static void upto(long, java.lang.Number, groovy.lang.Closure)
    {
        groovy.lang.Closure r9;
        long $l0, l1, l4;
        byte $b2, $b3;
        java.lang.Long $r11;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r12;
        int $i5, $i6;
        java.lang.String $r8;
        java.lang.Number r0;
        groovy.lang.GroovyRuntimeException $r13;

        l1 := @parameter0: long;

        r0 := @parameter1: java.lang.Number;

        r9 := @parameter2: groovy.lang.Closure;

        $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $b2 = l1 cmp $l0;

        $i5 = (int) $b2;

        if $i5 > 0 goto label3;

        l4 = l1;

     label1:
        $b3 = l4 cmp $l0;

        $i6 = (int) $b3;

        if $i6 > 0 goto label2;

        $r11 = new java.lang.Long;

        specialinvoke $r11.<java.lang.Long: void <init>(long)>(l4);

        virtualinvoke r9.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r11);

        l4 = l4 + 1L;

        goto label1;

     label2:
        goto label4;

     label3:
        $r13 = new groovy.lang.GroovyRuntimeException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".upto(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r8);

        throw $r13;

     label4:
        return;
    }

    public static void upto(java.lang.Long, java.lang.Number, groovy.lang.Closure)
    {
        groovy.lang.Closure r10;
        long $l0, $l1, l4;
        byte $b2, $b3;
        java.lang.Long r0, $r12;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8, $r13;
        int $i5, $i6;
        java.lang.String $r9;
        java.lang.Number r1;
        groovy.lang.GroovyRuntimeException $r14;

        r0 := @parameter0: java.lang.Long;

        r1 := @parameter1: java.lang.Number;

        r10 := @parameter2: groovy.lang.Closure;

        $l0 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $l1 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $b2 = $l0 cmp $l1;

        $i5 = (int) $b2;

        if $i5 > 0 goto label3;

        l4 = $l0;

     label1:
        $b3 = l4 cmp $l1;

        $i6 = (int) $b3;

        if $i6 > 0 goto label2;

        $r12 = new java.lang.Long;

        specialinvoke $r12.<java.lang.Long: void <init>(long)>(l4);

        virtualinvoke r10.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r12);

        l4 = l4 + 1L;

        goto label1;

     label2:
        goto label4;

     label3:
        $r14 = new groovy.lang.GroovyRuntimeException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".upto(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r9);

        throw $r14;

     label4:
        return;
    }

    public static void upto(float, java.lang.Number, groovy.lang.Closure)
    {
        java.lang.Float $r11;
        groovy.lang.Closure r9;
        byte $b0, $b1;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r12;
        int $i2, $i3;
        java.lang.String $r8;
        java.lang.Number r0;
        groovy.lang.GroovyRuntimeException $r13;
        float $f0, f1, f2;

        f1 := @parameter0: float;

        r0 := @parameter1: java.lang.Number;

        r9 := @parameter2: groovy.lang.Closure;

        $f0 = virtualinvoke r0.<java.lang.Number: float floatValue()>();

        $b0 = f1 cmpg $f0;

        $i2 = (int) $b0;

        if $i2 > 0 goto label3;

        f2 = f1;

     label1:
        $b1 = f2 cmpg $f0;

        $i3 = (int) $b1;

        if $i3 > 0 goto label2;

        $r11 = new java.lang.Float;

        specialinvoke $r11.<java.lang.Float: void <init>(float)>(f2);

        virtualinvoke r9.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r11);

        f2 = f2 + 1.0F;

        goto label1;

     label2:
        goto label4;

     label3:
        $r13 = new groovy.lang.GroovyRuntimeException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(f1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".upto(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r8);

        throw $r13;

     label4:
        return;
    }

    public static void upto(java.lang.Float, java.lang.Number, groovy.lang.Closure)
    {
        java.lang.Float r0, $r12;
        groovy.lang.Closure r10;
        byte $b0, $b1;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8, $r13;
        int $i2, $i3;
        java.lang.String $r9;
        java.lang.Number r1;
        groovy.lang.GroovyRuntimeException $r14;
        float $f0, $f1, f2;

        r0 := @parameter0: java.lang.Float;

        r1 := @parameter1: java.lang.Number;

        r10 := @parameter2: groovy.lang.Closure;

        $f0 = virtualinvoke r0.<java.lang.Float: float floatValue()>();

        $f1 = virtualinvoke r1.<java.lang.Number: float floatValue()>();

        $b0 = $f0 cmpg $f1;

        $i2 = (int) $b0;

        if $i2 > 0 goto label3;

        f2 = $f0;

     label1:
        $b1 = f2 cmpg $f1;

        $i3 = (int) $b1;

        if $i3 > 0 goto label2;

        $r12 = new java.lang.Float;

        specialinvoke $r12.<java.lang.Float: void <init>(float)>(f2);

        virtualinvoke r10.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r12);

        f2 = f2 + 1.0F;

        goto label1;

     label2:
        goto label4;

     label3:
        $r14 = new groovy.lang.GroovyRuntimeException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".upto(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r9);

        throw $r14;

     label4:
        return;
    }

    public static void upto(double, java.lang.Number, groovy.lang.Closure)
    {
        java.lang.Double $r11;
        groovy.lang.Closure r9;
        byte $b0, $b1;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r12;
        int $i2, $i3;
        java.lang.String $r8;
        java.lang.Number r0;
        double $d0, d1, d2;
        groovy.lang.GroovyRuntimeException $r13;

        d1 := @parameter0: double;

        r0 := @parameter1: java.lang.Number;

        r9 := @parameter2: groovy.lang.Closure;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        $b0 = d1 cmpg $d0;

        $i2 = (int) $b0;

        if $i2 > 0 goto label3;

        d2 = d1;

     label1:
        $b1 = d2 cmpg $d0;

        $i3 = (int) $b1;

        if $i3 > 0 goto label2;

        $r11 = new java.lang.Double;

        specialinvoke $r11.<java.lang.Double: void <init>(double)>(d2);

        virtualinvoke r9.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r11);

        d2 = d2 + 1.0;

        goto label1;

     label2:
        goto label4;

     label3:
        $r13 = new groovy.lang.GroovyRuntimeException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(d1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".upto(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r8);

        throw $r13;

     label4:
        return;
    }

    public static void upto(java.lang.Double, java.lang.Number, groovy.lang.Closure)
    {
        java.lang.Double r0, $r12;
        groovy.lang.Closure r10;
        byte $b0, $b1;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8, $r13;
        int $i2, $i3;
        java.lang.String $r9;
        java.lang.Number r1;
        double $d0, $d1, d2;
        groovy.lang.GroovyRuntimeException $r14;

        r0 := @parameter0: java.lang.Double;

        r1 := @parameter1: java.lang.Number;

        r10 := @parameter2: groovy.lang.Closure;

        $d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $b0 = $d0 cmpg $d1;

        $i2 = (int) $b0;

        if $i2 > 0 goto label3;

        d2 = $d0;

     label1:
        $b1 = d2 cmpg $d1;

        $i3 = (int) $b1;

        if $i3 > 0 goto label2;

        $r12 = new java.lang.Double;

        specialinvoke $r12.<java.lang.Double: void <init>(double)>(d2);

        virtualinvoke r10.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r12);

        d2 = d2 + 1.0;

        goto label1;

     label2:
        goto label4;

     label3:
        $r14 = new groovy.lang.GroovyRuntimeException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".upto(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r9);

        throw $r14;

     label4:
        return;
    }

    public static void upto(java.math.BigInteger, java.lang.Number, groovy.lang.Closure)
    {
        groovy.lang.Closure r16;
        java.math.BigDecimal $r26, $r27, r36, r37;
        java.math.BigInteger $r1, $r2, r7, $r17, r38, r39, r40;
        boolean $z0, $z1;
        groovy.lang.GroovyRuntimeException $r8, $r18, $r28;
        java.lang.StringBuffer $r3, $r4, $r5, $r9, $r10, $r11, $r12, $r13, $r14, $r19, $r20, $r21, $r22, $r23, $r24, $r29, $r30, $r31, $r32, $r33, $r34;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r6, $r15, $r25, $r35;
        java.lang.Number r0;

        r7 := @parameter0: java.math.BigInteger;

        r0 := @parameter1: java.lang.Number;

        r16 := @parameter2: groovy.lang.Closure;

        $z0 = r0 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label05;

        $r26 = new java.math.BigDecimal;

        specialinvoke $r26.<java.math.BigDecimal: void <init>(java.lang.String)>("1.0");

        $r27 = new java.math.BigDecimal;

        specialinvoke $r27.<java.math.BigDecimal: void <init>(java.math.BigInteger)>(r7);

        r36 = (java.math.BigDecimal) r0;

        $i4 = virtualinvoke $r27.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r36);

        if $i4 > 0 goto label03;

        r37 = $r27;

     label01:
        $i5 = virtualinvoke r37.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r36);

        if $i5 > 0 goto label02;

        virtualinvoke r16.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r37);

        r37 = virtualinvoke r37.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r26);

        goto label01;

     label02:
        goto label04;

     label03:
        $r28 = new groovy.lang.GroovyRuntimeException;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".upto(");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r28.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r35);

        throw $r28;

     label04:
        goto label14;

     label05:
        $z1 = r0 instanceof java.math.BigInteger;

        if $z1 == 0 goto label10;

        $r17 = new java.math.BigInteger;

        specialinvoke $r17.<java.math.BigInteger: void <init>(java.lang.String)>("1");

        r38 = (java.math.BigInteger) r0;

        $i2 = virtualinvoke r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r38);

        if $i2 > 0 goto label08;

        r39 = r7;

     label06:
        $i3 = virtualinvoke r39.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r38);

        if $i3 > 0 goto label07;

        virtualinvoke r16.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r39);

        r39 = virtualinvoke r39.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r17);

        goto label06;

     label07:
        goto label09;

     label08:
        $r18 = new groovy.lang.GroovyRuntimeException;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".upto(");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r25);

        throw $r18;

     label09:
        goto label14;

     label10:
        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(java.lang.String)>("1");

        $r2 = new java.math.BigInteger;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.math.BigInteger: void <init>(java.lang.String)>($r6);

        $i0 = virtualinvoke r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 > 0 goto label13;

        r40 = r7;

     label11:
        $i1 = virtualinvoke r40.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i1 > 0 goto label12;

        virtualinvoke r16.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r40);

        r40 = virtualinvoke r40.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        goto label11;

     label12:
        goto label14;

     label13:
        $r8 = new groovy.lang.GroovyRuntimeException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".upto(");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label14:
        return;
    }

    public static void upto(java.math.BigDecimal, java.lang.Number, groovy.lang.Closure)
    {
        groovy.lang.Closure r16;
        java.math.BigDecimal $r0, $r2, r7, $r17, r35, r36, r37, r38;
        java.math.BigInteger $r18;
        boolean $z0, $z1;
        groovy.lang.GroovyRuntimeException $r8, $r19, $r27;
        java.lang.StringBuffer $r3, $r4, $r5, $r9, $r10, $r11, $r12, $r13, $r14, $r20, $r21, $r22, $r23, $r24, $r25, $r28, $r29, $r30, $r31, $r32, $r33;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r6, $r15, $r26, $r34;
        java.lang.Number r1;

        r7 := @parameter0: java.math.BigDecimal;

        r1 := @parameter1: java.lang.Number;

        r16 := @parameter2: groovy.lang.Closure;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>("1.0");

        $z0 = r1 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label05;

        r35 = (java.math.BigDecimal) r1;

        $i4 = virtualinvoke r7.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r35);

        if $i4 > 0 goto label03;

        r36 = r7;

     label01:
        $i5 = virtualinvoke r36.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r35);

        if $i5 > 0 goto label02;

        virtualinvoke r16.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r36);

        r36 = virtualinvoke r36.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r0);

        goto label01;

     label02:
        goto label04;

     label03:
        $r27 = new groovy.lang.GroovyRuntimeException;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".upto(");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r27.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r34);

        throw $r27;

     label04:
        goto label14;

     label05:
        $z1 = r1 instanceof java.math.BigInteger;

        if $z1 == 0 goto label10;

        $r17 = new java.math.BigDecimal;

        $r18 = (java.math.BigInteger) r1;

        specialinvoke $r17.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r18);

        $i2 = virtualinvoke r7.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r17);

        if $i2 > 0 goto label08;

        r37 = r7;

     label06:
        $i3 = virtualinvoke r37.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r17);

        if $i3 > 0 goto label07;

        virtualinvoke r16.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r37);

        r37 = virtualinvoke r37.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r0);

        goto label06;

     label07:
        goto label09;

     label08:
        $r19 = new groovy.lang.GroovyRuntimeException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".upto(");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r26);

        throw $r19;

     label09:
        goto label14;

     label10:
        $r2 = new java.math.BigDecimal;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.lang.String)>($r6);

        $i0 = virtualinvoke r7.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r2);

        if $i0 > 0 goto label13;

        r38 = r7;

     label11:
        $i1 = virtualinvoke r38.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r2);

        if $i1 > 0 goto label12;

        virtualinvoke r16.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r38);

        r38 = virtualinvoke r38.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r0);

        goto label11;

     label12:
        goto label14;

     label13:
        $r8 = new groovy.lang.GroovyRuntimeException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".upto(");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label14:
        return;
    }

    public static void downto(java.lang.Number, java.lang.Number, groovy.lang.Closure)
    {
        groovy.lang.Closure r10;
        java.lang.Integer $r12;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8, $r13;
        int $i0, $i1, i2, $i4;
        java.lang.String $r9;
        java.lang.Number r0, r1;
        groovy.lang.GroovyRuntimeException $r14;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        r10 := @parameter2: groovy.lang.Closure;

        $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        if $i0 < $i1 goto label3;

        i2 = $i0;

     label1:
        if i2 < $i1 goto label2;

        $r12 = new java.lang.Integer;

        specialinvoke $r12.<java.lang.Integer: void <init>(int)>(i2);

        virtualinvoke r10.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r12);

        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label2:
        goto label4;

     label3:
        $r14 = new groovy.lang.GroovyRuntimeException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".downto(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r9);

        throw $r14;

     label4:
        return;
    }

    public static void downto(long, java.lang.Number, groovy.lang.Closure)
    {
        groovy.lang.Closure r9;
        long $l0, l1, l4;
        byte $b2, $b3;
        java.lang.Long $r11;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r12;
        int $i5, $i6;
        java.lang.String $r8;
        java.lang.Number r0;
        groovy.lang.GroovyRuntimeException $r13;

        l1 := @parameter0: long;

        r0 := @parameter1: java.lang.Number;

        r9 := @parameter2: groovy.lang.Closure;

        $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $b2 = l1 cmp $l0;

        $i5 = (int) $b2;

        if $i5 < 0 goto label3;

        l4 = l1;

     label1:
        $b3 = l4 cmp $l0;

        $i6 = (int) $b3;

        if $i6 < 0 goto label2;

        $r11 = new java.lang.Long;

        specialinvoke $r11.<java.lang.Long: void <init>(long)>(l4);

        virtualinvoke r9.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r11);

        l4 = l4 - 1L;

        goto label1;

     label2:
        goto label4;

     label3:
        $r13 = new groovy.lang.GroovyRuntimeException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".downto(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r8);

        throw $r13;

     label4:
        return;
    }

    public static void downto(java.lang.Long, java.lang.Number, groovy.lang.Closure)
    {
        groovy.lang.Closure r10;
        long $l0, $l1, l4;
        byte $b2, $b3;
        java.lang.Long r0, $r12;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8, $r13;
        int $i5, $i6;
        java.lang.String $r9;
        java.lang.Number r1;
        groovy.lang.GroovyRuntimeException $r14;

        r0 := @parameter0: java.lang.Long;

        r1 := @parameter1: java.lang.Number;

        r10 := @parameter2: groovy.lang.Closure;

        $l0 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $l1 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $b2 = $l0 cmp $l1;

        $i5 = (int) $b2;

        if $i5 < 0 goto label3;

        l4 = $l0;

     label1:
        $b3 = l4 cmp $l1;

        $i6 = (int) $b3;

        if $i6 < 0 goto label2;

        $r12 = new java.lang.Long;

        specialinvoke $r12.<java.lang.Long: void <init>(long)>(l4);

        virtualinvoke r10.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r12);

        l4 = l4 - 1L;

        goto label1;

     label2:
        goto label4;

     label3:
        $r14 = new groovy.lang.GroovyRuntimeException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".downto(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r9);

        throw $r14;

     label4:
        return;
    }

    public static void downto(float, java.lang.Number, groovy.lang.Closure)
    {
        java.lang.Float $r11;
        groovy.lang.Closure r9;
        byte $b0, $b1;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r12;
        int $i2, $i3;
        java.lang.String $r8;
        java.lang.Number r0;
        groovy.lang.GroovyRuntimeException $r13;
        float $f0, f1, f2;

        f1 := @parameter0: float;

        r0 := @parameter1: java.lang.Number;

        r9 := @parameter2: groovy.lang.Closure;

        $f0 = virtualinvoke r0.<java.lang.Number: float floatValue()>();

        $b0 = f1 cmpl $f0;

        $i2 = (int) $b0;

        if $i2 < 0 goto label3;

        f2 = f1;

     label1:
        $b1 = f2 cmpl $f0;

        $i3 = (int) $b1;

        if $i3 < 0 goto label2;

        $r11 = new java.lang.Float;

        specialinvoke $r11.<java.lang.Float: void <init>(float)>(f2);

        virtualinvoke r9.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r11);

        f2 = f2 - 1.0F;

        goto label1;

     label2:
        goto label4;

     label3:
        $r13 = new groovy.lang.GroovyRuntimeException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(f1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".downto(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r8);

        throw $r13;

     label4:
        return;
    }

    public static void downto(java.lang.Float, java.lang.Number, groovy.lang.Closure)
    {
        java.lang.Float r0, $r12;
        groovy.lang.Closure r10;
        byte $b0, $b1;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8, $r13;
        int $i2, $i3;
        java.lang.String $r9;
        java.lang.Number r1;
        groovy.lang.GroovyRuntimeException $r14;
        float $f0, $f1, f2;

        r0 := @parameter0: java.lang.Float;

        r1 := @parameter1: java.lang.Number;

        r10 := @parameter2: groovy.lang.Closure;

        $f0 = virtualinvoke r0.<java.lang.Float: float floatValue()>();

        $f1 = virtualinvoke r1.<java.lang.Number: float floatValue()>();

        $b0 = $f0 cmpl $f1;

        $i2 = (int) $b0;

        if $i2 < 0 goto label3;

        f2 = $f0;

     label1:
        $b1 = f2 cmpl $f1;

        $i3 = (int) $b1;

        if $i3 < 0 goto label2;

        $r12 = new java.lang.Float;

        specialinvoke $r12.<java.lang.Float: void <init>(float)>(f2);

        virtualinvoke r10.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r12);

        f2 = f2 - 1.0F;

        goto label1;

     label2:
        goto label4;

     label3:
        $r14 = new groovy.lang.GroovyRuntimeException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".downto(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r9);

        throw $r14;

     label4:
        return;
    }

    public static void downto(double, java.lang.Number, groovy.lang.Closure)
    {
        java.lang.Double $r11;
        groovy.lang.Closure r9;
        byte $b0, $b1;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r12;
        int $i2, $i3;
        java.lang.String $r8;
        java.lang.Number r0;
        double $d0, d1, d2;
        groovy.lang.GroovyRuntimeException $r13;

        d1 := @parameter0: double;

        r0 := @parameter1: java.lang.Number;

        r9 := @parameter2: groovy.lang.Closure;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        $b0 = d1 cmpl $d0;

        $i2 = (int) $b0;

        if $i2 < 0 goto label3;

        d2 = d1;

     label1:
        $b1 = d2 cmpl $d0;

        $i3 = (int) $b1;

        if $i3 < 0 goto label2;

        $r11 = new java.lang.Double;

        specialinvoke $r11.<java.lang.Double: void <init>(double)>(d2);

        virtualinvoke r9.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r11);

        d2 = d2 - 1.0;

        goto label1;

     label2:
        goto label4;

     label3:
        $r13 = new groovy.lang.GroovyRuntimeException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(d1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".downto(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r8);

        throw $r13;

     label4:
        return;
    }

    public static void downto(java.lang.Double, java.lang.Number, groovy.lang.Closure)
    {
        java.lang.Double r0, $r12;
        groovy.lang.Closure r10;
        byte $b0, $b1;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8, $r13;
        int $i2, $i3;
        java.lang.String $r9;
        java.lang.Number r1;
        double $d0, $d1, d2;
        groovy.lang.GroovyRuntimeException $r14;

        r0 := @parameter0: java.lang.Double;

        r1 := @parameter1: java.lang.Number;

        r10 := @parameter2: groovy.lang.Closure;

        $d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $b0 = $d0 cmpl $d1;

        $i2 = (int) $b0;

        if $i2 < 0 goto label3;

        d2 = $d0;

     label1:
        $b1 = d2 cmpl $d1;

        $i3 = (int) $b1;

        if $i3 < 0 goto label2;

        $r12 = new java.lang.Double;

        specialinvoke $r12.<java.lang.Double: void <init>(double)>(d2);

        virtualinvoke r10.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r12);

        d2 = d2 - 1.0;

        goto label1;

     label2:
        goto label4;

     label3:
        $r14 = new groovy.lang.GroovyRuntimeException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".downto(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r9);

        throw $r14;

     label4:
        return;
    }

    public static void downto(java.math.BigInteger, java.lang.Number, groovy.lang.Closure)
    {
        groovy.lang.Closure r16;
        java.math.BigDecimal $r26, $r27, r37, r38;
        java.math.BigInteger $r1, $r2, r7, $r17, $r36, r39, r40, r41;
        boolean $z0, $z1;
        groovy.lang.GroovyRuntimeException $r8, $r18, $r28;
        java.lang.StringBuffer $r3, $r4, $r5, $r9, $r10, $r11, $r12, $r13, $r14, $r19, $r20, $r21, $r22, $r23, $r24, $r29, $r30, $r31, $r32, $r33, $r34;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r6, $r15, $r25, $r35;
        java.lang.Number r0;

        r7 := @parameter0: java.math.BigInteger;

        r0 := @parameter1: java.lang.Number;

        r16 := @parameter2: groovy.lang.Closure;

        $z0 = r0 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label05;

        $r26 = new java.math.BigDecimal;

        specialinvoke $r26.<java.math.BigDecimal: void <init>(java.lang.String)>("1.0");

        r37 = (java.math.BigDecimal) r0;

        $r27 = new java.math.BigDecimal;

        specialinvoke $r27.<java.math.BigDecimal: void <init>(java.math.BigInteger)>(r7);

        $i4 = virtualinvoke $r27.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r37);

        if $i4 < 0 goto label03;

        r38 = $r27;

     label01:
        $i5 = virtualinvoke r38.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r37);

        if $i5 < 0 goto label02;

        $r36 = virtualinvoke r38.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        virtualinvoke r16.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r36);

        r38 = virtualinvoke r38.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r26);

        goto label01;

     label02:
        goto label04;

     label03:
        $r28 = new groovy.lang.GroovyRuntimeException;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".downto(");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r28.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r35);

        throw $r28;

     label04:
        goto label14;

     label05:
        $z1 = r0 instanceof java.math.BigInteger;

        if $z1 == 0 goto label10;

        $r17 = new java.math.BigInteger;

        specialinvoke $r17.<java.math.BigInteger: void <init>(java.lang.String)>("1");

        r39 = (java.math.BigInteger) r0;

        $i2 = virtualinvoke r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r39);

        if $i2 < 0 goto label08;

        r40 = r7;

     label06:
        $i3 = virtualinvoke r40.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r39);

        if $i3 < 0 goto label07;

        virtualinvoke r16.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r40);

        r40 = virtualinvoke r40.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r17);

        goto label06;

     label07:
        goto label09;

     label08:
        $r18 = new groovy.lang.GroovyRuntimeException;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".downto(");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r25);

        throw $r18;

     label09:
        goto label14;

     label10:
        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(java.lang.String)>("1");

        $r2 = new java.math.BigInteger;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.math.BigInteger: void <init>(java.lang.String)>($r6);

        $i0 = virtualinvoke r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 < 0 goto label13;

        r41 = r7;

     label11:
        $i1 = virtualinvoke r41.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i1 < 0 goto label12;

        virtualinvoke r16.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r41);

        r41 = virtualinvoke r41.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

        goto label11;

     label12:
        goto label14;

     label13:
        $r8 = new groovy.lang.GroovyRuntimeException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".downto(");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label14:
        return;
    }

    public static void downto(java.math.BigDecimal, java.lang.Number, groovy.lang.Closure)
    {
        groovy.lang.Closure r16;
        java.math.BigDecimal $r0, $r2, r7, $r17, r35, r36, r37, r38;
        java.math.BigInteger $r18;
        boolean $z0, $z1;
        groovy.lang.GroovyRuntimeException $r8, $r19, $r27;
        java.lang.StringBuffer $r3, $r4, $r5, $r9, $r10, $r11, $r12, $r13, $r14, $r20, $r21, $r22, $r23, $r24, $r25, $r28, $r29, $r30, $r31, $r32, $r33;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r6, $r15, $r26, $r34;
        java.lang.Number r1;

        r7 := @parameter0: java.math.BigDecimal;

        r1 := @parameter1: java.lang.Number;

        r16 := @parameter2: groovy.lang.Closure;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>("1.0");

        $z0 = r1 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label05;

        r35 = (java.math.BigDecimal) r1;

        $i4 = virtualinvoke r7.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r35);

        if $i4 < 0 goto label03;

        r36 = r7;

     label01:
        $i5 = virtualinvoke r36.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r35);

        if $i5 < 0 goto label02;

        virtualinvoke r16.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r36);

        r36 = virtualinvoke r36.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r0);

        goto label01;

     label02:
        goto label04;

     label03:
        $r27 = new groovy.lang.GroovyRuntimeException;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".downto(");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r27.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r34);

        throw $r27;

     label04:
        goto label14;

     label05:
        $z1 = r1 instanceof java.math.BigInteger;

        if $z1 == 0 goto label10;

        $r17 = new java.math.BigDecimal;

        $r18 = (java.math.BigInteger) r1;

        specialinvoke $r17.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r18);

        $i2 = virtualinvoke r7.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r17);

        if $i2 < 0 goto label08;

        r37 = r7;

     label06:
        $i3 = virtualinvoke r37.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r17);

        if $i3 < 0 goto label07;

        virtualinvoke r16.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r37);

        r37 = virtualinvoke r37.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r0);

        goto label06;

     label07:
        goto label09;

     label08:
        $r19 = new groovy.lang.GroovyRuntimeException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".downto(");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r26);

        throw $r19;

     label09:
        goto label14;

     label10:
        $r2 = new java.math.BigDecimal;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.lang.String)>($r6);

        $i0 = virtualinvoke r7.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r2);

        if $i0 < 0 goto label13;

        r38 = r7;

     label11:
        $i1 = virtualinvoke r38.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r2);

        if $i1 < 0 goto label12;

        virtualinvoke r16.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r38);

        r38 = virtualinvoke r38.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r0);

        goto label11;

     label12:
        goto label14;

     label13:
        $r8 = new groovy.lang.GroovyRuntimeException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".downto(");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label14:
        return;
    }

    public static void step(java.lang.Number, java.lang.Number, java.lang.Number, groovy.lang.Closure)
    {
        groovy.lang.Closure r25;
        java.lang.Integer $r58, $r59;
        java.math.BigDecimal $r60, $r61, r62, $r63, r64, $r65, r66, r67, r68;
        java.math.BigInteger $r69, $r70, r71, $r72, r73, $r74, r75, r76, r77;
        groovy.lang.GroovyRuntimeException $r15, $r38, $r48;
        java.lang.StringBuffer $r1, $r2, $r3, $r6, $r7, $r8, $r11, $r12, $r13, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r26, $r27, $r28, $r30, $r31, $r32, $r34, $r35, $r36, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56;
        java.lang.String $r4, $r9, $r14, $r24, $r29, $r33, $r37, $r47, $r57;
        java.lang.Number r0, r5, r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;

        r0 := @parameter0: java.lang.Number;

        r5 := @parameter1: java.lang.Number;

        r10 := @parameter2: java.lang.Number;

        r25 := @parameter3: groovy.lang.Closure;

        $z0 = r0 instanceof java.math.BigDecimal;

        if $z0 != 0 goto label01;

        $z3 = r5 instanceof java.math.BigDecimal;

        if $z3 != 0 goto label01;

        $z4 = r10 instanceof java.math.BigDecimal;

        if $z4 == 0 goto label15;

     label01:
        $r60 = new java.math.BigDecimal;

        specialinvoke $r60.<java.math.BigDecimal: void <init>(java.lang.String)>("0.0");

        $z10 = r0 instanceof java.math.BigDecimal;

        if $z10 == 0 goto label02;

        $r61 = (java.math.BigDecimal) r0;

        goto label03;

     label02:
        $r61 = new java.math.BigDecimal;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r61.<java.math.BigDecimal: void <init>(java.lang.String)>($r4);

     label03:
        r62 = $r61;

        $z1 = r5 instanceof java.math.BigDecimal;

        if $z1 == 0 goto label04;

        $r63 = (java.math.BigDecimal) r5;

        goto label05;

     label04:
        $r63 = new java.math.BigDecimal;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r63.<java.math.BigDecimal: void <init>(java.lang.String)>($r9);

     label05:
        r64 = $r63;

        $z2 = r10 instanceof java.math.BigDecimal;

        if $z2 == 0 goto label06;

        $r65 = (java.math.BigDecimal) r10;

        goto label07;

     label06:
        $r65 = new java.math.BigDecimal;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r10);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r65.<java.math.BigDecimal: void <init>(java.lang.String)>($r14);

     label07:
        r66 = $r65;

        $i0 = virtualinvoke $r65.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r60);

        if $i0 <= 0 goto label10;

        $i4 = virtualinvoke r64.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r62);

        if $i4 <= 0 goto label10;

        r67 = r62;

     label08:
        $i5 = virtualinvoke r67.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r64);

        if $i5 >= 0 goto label09;

        virtualinvoke r25.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r67);

        r67 = virtualinvoke r67.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r66);

        goto label08;

     label09:
        goto label14;

     label10:
        $i1 = virtualinvoke r66.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r60);

        if $i1 >= 0 goto label13;

        $i2 = virtualinvoke r64.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r62);

        if $i2 >= 0 goto label13;

        r68 = r62;

     label11:
        $i3 = virtualinvoke r68.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r64);

        if $i3 <= 0 goto label12;

        virtualinvoke r25.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r68);

        r68 = virtualinvoke r68.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r66);

        goto label11;

     label12:
        goto label14;

     label13:
        $r15 = new groovy.lang.GroovyRuntimeException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r62);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".step(");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r64);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r66);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r24);

        throw $r15;

     label14:
        goto label37;

     label15:
        $z5 = r0 instanceof java.math.BigInteger;

        if $z5 != 0 goto label16;

        $z8 = r5 instanceof java.math.BigInteger;

        if $z8 != 0 goto label16;

        $z9 = r10 instanceof java.math.BigInteger;

        if $z9 == 0 goto label30;

     label16:
        $r69 = new java.math.BigInteger;

        specialinvoke $r69.<java.math.BigInteger: void <init>(java.lang.String)>("0");

        $z11 = r0 instanceof java.math.BigInteger;

        if $z11 == 0 goto label17;

        $r70 = (java.math.BigInteger) r0;

        goto label18;

     label17:
        $r70 = new java.math.BigInteger;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r70.<java.math.BigInteger: void <init>(java.lang.String)>($r29);

     label18:
        r71 = $r70;

        $z6 = r5 instanceof java.math.BigInteger;

        if $z6 == 0 goto label19;

        $r72 = (java.math.BigInteger) r5;

        goto label20;

     label19:
        $r72 = new java.math.BigInteger;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r5);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r72.<java.math.BigInteger: void <init>(java.lang.String)>($r33);

     label20:
        r73 = $r72;

        $z7 = r10 instanceof java.math.BigInteger;

        if $z7 == 0 goto label21;

        $r74 = (java.math.BigInteger) r10;

        goto label22;

     label21:
        $r74 = new java.math.BigInteger;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r10);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r74.<java.math.BigInteger: void <init>(java.lang.String)>($r37);

     label22:
        r75 = $r74;

        $i6 = virtualinvoke $r74.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r69);

        if $i6 <= 0 goto label25;

        $i10 = virtualinvoke r73.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r71);

        if $i10 <= 0 goto label25;

        r76 = r71;

     label23:
        $i11 = virtualinvoke r76.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r73);

        if $i11 >= 0 goto label24;

        virtualinvoke r25.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r76);

        r76 = virtualinvoke r76.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r75);

        goto label23;

     label24:
        goto label29;

     label25:
        $i7 = virtualinvoke r75.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r69);

        if $i7 >= 0 goto label28;

        $i8 = virtualinvoke r73.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r71);

        if $i8 >= 0 goto label28;

        r77 = r71;

     label26:
        $i9 = virtualinvoke r77.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r73);

        if $i9 <= 0 goto label27;

        virtualinvoke r25.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r77);

        r77 = virtualinvoke r77.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r75);

        goto label26;

     label27:
        goto label29;

     label28:
        $r38 = new groovy.lang.GroovyRuntimeException;

        $r39 = new java.lang.StringBuffer;

        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r71);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".step(");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r73);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r75);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r38.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r47);

        throw $r38;

     label29:
        goto label37;

     label30:
        $i12 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        $i13 = virtualinvoke r5.<java.lang.Number: int intValue()>();

        $i14 = virtualinvoke r10.<java.lang.Number: int intValue()>();

        if $i14 <= 0 goto label33;

        if $i13 <= $i12 goto label33;

        i15 = $i12;

     label31:
        if i15 >= $i13 goto label32;

        $r59 = new java.lang.Integer;

        specialinvoke $r59.<java.lang.Integer: void <init>(int)>(i15);

        virtualinvoke r25.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r59);

        i15 = i15 + $i14;

        goto label31;

     label32:
        goto label37;

     label33:
        if $i14 >= 0 goto label36;

        if $i13 >= $i12 goto label36;

        i16 = $i12;

     label34:
        if i16 <= $i13 goto label35;

        $r58 = new java.lang.Integer;

        specialinvoke $r58.<java.lang.Integer: void <init>(int)>(i16);

        virtualinvoke r25.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r58);

        i16 = i16 + $i14;

        goto label34;

     label35:
        goto label37;

     label36:
        $r48 = new groovy.lang.GroovyRuntimeException;

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Infinite loop in ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i12);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".step(");

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i13);

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i14);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r48.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>($r57);

        throw $r48;

     label37:
        return;
    }

    public static int abs(java.lang.Number)
    {
        int $i0, $i1;
        java.lang.Number r0;

        r0 := @parameter0: java.lang.Number;

        $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        return $i1;
    }

    public static long abs(java.lang.Long)
    {
        long $l0, $l1;
        java.lang.Long r0;

        r0 := @parameter0: java.lang.Long;

        $l0 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $l1 = staticinvoke <java.lang.Math: long abs(long)>($l0);

        return $l1;
    }

    public static float abs(java.lang.Float)
    {
        java.lang.Float r0;
        float $f0, $f1;

        r0 := @parameter0: java.lang.Float;

        $f0 = virtualinvoke r0.<java.lang.Float: float floatValue()>();

        $f1 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        return $f1;
    }

    public static double abs(java.lang.Double)
    {
        java.lang.Double r0;
        double $d0, $d1;

        r0 := @parameter0: java.lang.Double;

        $d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        return $d1;
    }

    public static int round(java.lang.Float)
    {
        int $i0;
        java.lang.Float r0;
        float $f0;

        r0 := @parameter0: java.lang.Float;

        $f0 = virtualinvoke r0.<java.lang.Float: float floatValue()>();

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        return $i0;
    }

    public static long round(java.lang.Double)
    {
        long $l0;
        java.lang.Double r0;
        double $d0;

        r0 := @parameter0: java.lang.Double;

        $d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $l0 = staticinvoke <java.lang.Math: long round(double)>($d0);

        return $l0;
    }

    public static java.lang.Integer toInteger(java.lang.String)
    {
        java.lang.String r0, $r1;
        java.lang.Integer $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.Long toLong(java.lang.String)
    {
        java.lang.String r0, $r1;
        java.lang.Long $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.Short toShort(java.lang.String)
    {
        java.lang.String r0, $r1;
        java.lang.Short $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $r2 = staticinvoke <java.lang.Short: java.lang.Short valueOf(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.Float toFloat(java.lang.String)
    {
        java.lang.Float $r2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.Double toDouble(java.lang.String)
    {
        java.lang.String r0, $r1;
        java.lang.Double $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r1);

        return $r2;
    }

    public static java.math.BigInteger toBigInteger(java.lang.String)
    {
        java.math.BigInteger $r0;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.math.BigInteger;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String)>($r2);

        return $r0;
    }

    public static java.math.BigDecimal toBigDecimal(java.lang.String)
    {
        java.math.BigDecimal $r0;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.math.BigDecimal;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>($r2);

        return $r0;
    }

    public static boolean isInteger(java.lang.String)
    {
        java.lang.NumberFormatException $r2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r1);

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static boolean isLong(java.lang.String)
    {
        java.lang.NumberFormatException $r2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r1);

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static boolean isFloat(java.lang.String)
    {
        java.lang.NumberFormatException $r2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r1);

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static boolean isDouble(java.lang.String)
    {
        java.lang.NumberFormatException $r2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r1);

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static boolean isBigInteger(java.lang.String)
    {
        java.math.BigInteger $r0;
        java.lang.NumberFormatException $r3;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.math.BigInteger;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String)>($r2);

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static boolean isBigDecimal(java.lang.String)
    {
        java.math.BigDecimal $r0;
        java.lang.NumberFormatException $r3;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.math.BigDecimal;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>($r2);

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static boolean isNumber(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: boolean isBigDecimal(java.lang.String)>(r0);

        return $z0;
    }

    public static boolean isUpperCase(java.lang.Character)
    {
        char $c0;
        java.lang.Character r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Character;

        $c0 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c0);

        return $z0;
    }

    public static boolean isLowerCase(java.lang.Character)
    {
        char $c0;
        java.lang.Character r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Character;

        $c0 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        $z0 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c0);

        return $z0;
    }

    public static boolean isLetter(java.lang.Character)
    {
        char $c0;
        java.lang.Character r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Character;

        $c0 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c0);

        return $z0;
    }

    public static boolean isDigit(java.lang.Character)
    {
        char $c0;
        java.lang.Character r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Character;

        $c0 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c0);

        return $z0;
    }

    public static boolean isLetterOrDigit(java.lang.Character)
    {
        char $c0;
        java.lang.Character r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Character;

        $c0 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c0);

        return $z0;
    }

    public static boolean isWhitespace(java.lang.Character)
    {
        char $c0;
        java.lang.Character r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Character;

        $c0 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        return $z0;
    }

    public static char toUpperCase(java.lang.Character)
    {
        char $c0, $c1;
        java.lang.Character r0;

        r0 := @parameter0: java.lang.Character;

        $c0 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        return $c1;
    }

    public static char toLowerCase(java.lang.Character)
    {
        char $c0, $c1;
        java.lang.Character r0;

        r0 := @parameter0: java.lang.Character;

        $c0 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c0);

        return $c1;
    }

    public static java.lang.Integer toInteger(java.lang.Number)
    {
        int $i0;
        java.lang.Number r1;
        java.lang.Integer $r0;

        r1 := @parameter0: java.lang.Number;

        $r0 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i0);

        return $r0;
    }

    public static java.lang.Long toLong(java.lang.Number)
    {
        long $l0;
        java.lang.Number r1;
        java.lang.Long $r0;

        r1 := @parameter0: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l0);

        return $r0;
    }

    public static java.lang.Float toFloat(java.lang.Number)
    {
        java.lang.Float $r0;
        float $f0;
        java.lang.Number r1;

        r1 := @parameter0: java.lang.Number;

        $r0 = new java.lang.Float;

        $f0 = virtualinvoke r1.<java.lang.Number: float floatValue()>();

        specialinvoke $r0.<java.lang.Float: void <init>(float)>($f0);

        return $r0;
    }

    public static java.lang.Double toDouble(java.lang.Number)
    {
        java.lang.Number r1;
        java.lang.Double $r0;
        double $d0;

        r1 := @parameter0: java.lang.Number;

        $r0 = new java.lang.Double;

        $d0 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        specialinvoke $r0.<java.lang.Double: void <init>(double)>($d0);

        return $r0;
    }

    public static java.math.BigDecimal toBigDecimal(java.lang.Number)
    {
        java.math.BigDecimal $r0;
        java.lang.Number r1;
        double $d0;

        r1 := @parameter0: java.lang.Number;

        $r0 = new java.math.BigDecimal;

        $d0 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        specialinvoke $r0.<java.math.BigDecimal: void <init>(double)>($d0);

        return $r0;
    }

    public static java.lang.Object asType(java.lang.Number, java.lang.Class)
    {
        java.lang.Float $r7;
        java.lang.Double $r8;
        java.math.BigDecimal $r10;
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r11, $r12, $r13, $r14;
        java.lang.Object $r6;
        java.math.BigInteger $r9;
        java.lang.Number r5;

        r5 := @parameter0: java.lang.Number;

        r0 := @parameter1: java.lang.Class;

        $r1 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$math$BigDecimal>;

        if $r1 != null goto label01;

        $r11 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.math.BigDecimal");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$math$BigDecimal> = $r11;

        goto label02;

     label01:
        $r11 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$math$BigDecimal>;

     label02:
        if r0 != $r11 goto label03;

        $r10 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r5);

        return $r10;

     label03:
        $r2 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$math$BigInteger>;

        if $r2 != null goto label04;

        $r12 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.math.BigInteger");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$math$BigInteger> = $r12;

        goto label05;

     label04:
        $r12 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$math$BigInteger>;

     label05:
        if r0 != $r12 goto label06;

        $r9 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.math.BigInteger toBigInteger(java.lang.Number)>(r5);

        return $r9;

     label06:
        $r3 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Double>;

        if $r3 != null goto label07;

        $r13 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Double> = $r13;

        goto label08;

     label07:
        $r13 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Double>;

     label08:
        if r0 != $r13 goto label09;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Double toDouble(java.lang.Number)>(r5);

        return $r8;

     label09:
        $r4 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Float>;

        if $r4 != null goto label10;

        $r14 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Float> = $r14;

        goto label11;

     label10:
        $r14 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Float>;

     label11:
        if r0 != $r14 goto label12;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Float toFloat(java.lang.Number)>(r5);

        return $r7;

     label12:
        $r6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object asType(java.lang.Object,java.lang.Class)>(r5, r0);

        return $r6;
    }

    public static java.math.BigInteger toBigInteger(java.lang.Number)
    {
        java.math.BigInteger $r0;
        long $l0;
        java.lang.String $r2;
        java.lang.Number r1;

        r1 := @parameter0: java.lang.Number;

        $r0 = new java.math.BigInteger;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String)>($r2);

        return $r0;
    }

    public static java.util.Date next(java.util.Date)
    {
        java.util.Date r0, $r1;

        r0 := @parameter0: java.util.Date;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Date plus(java.util.Date,int)>(r0, 1);

        return $r1;
    }

    public static java.sql.Date next(java.sql.Date)
    {
        java.util.Date $r2;
        long $l0;
        java.sql.Date $r0, r1;

        r1 := @parameter0: java.sql.Date;

        $r0 = new java.sql.Date;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Date next(java.util.Date)>(r1);

        $l0 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        specialinvoke $r0.<java.sql.Date: void <init>(long)>($l0);

        return $r0;
    }

    public static java.util.Date previous(java.util.Date)
    {
        java.util.Date r0, $r1;

        r0 := @parameter0: java.util.Date;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Date minus(java.util.Date,int)>(r0, 1);

        return $r1;
    }

    public static java.sql.Date previous(java.sql.Date)
    {
        java.util.Date $r2;
        long $l0;
        java.sql.Date $r0, r1;

        r1 := @parameter0: java.sql.Date;

        $r0 = new java.sql.Date;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Date previous(java.util.Date)>(r1);

        $l0 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        specialinvoke $r0.<java.sql.Date: void <init>(long)>($l0);

        return $r0;
    }

    public static java.util.Date plus(java.util.Date, int)
    {
        java.util.Calendar $r0, r2;
        java.util.Date r3, $r4;
        int i0;
        java.lang.Object $r1;

        r3 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r1 = virtualinvoke $r0.<java.util.Calendar: java.lang.Object clone()>();

        r2 = (java.util.Calendar) $r1;

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>(r3);

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(6, i0);

        $r4 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        return $r4;
    }

    public static java.sql.Date plus(java.sql.Date, int)
    {
        java.util.Date $r2;
        int i0;
        long $l1;
        java.sql.Date $r0, r1;

        r1 := @parameter0: java.sql.Date;

        i0 := @parameter1: int;

        $r0 = new java.sql.Date;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Date plus(java.util.Date,int)>(r1, i0);

        $l1 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        specialinvoke $r0.<java.sql.Date: void <init>(long)>($l1);

        return $r0;
    }

    public static java.util.Date minus(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0, $i1;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $i1 = neg i0;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Date plus(java.util.Date,int)>(r0, $i1);

        return $r1;
    }

    public static java.sql.Date minus(java.sql.Date, int)
    {
        java.util.Date $r2;
        int i0;
        long $l1;
        java.sql.Date $r0, r1;

        r1 := @parameter0: java.sql.Date;

        i0 := @parameter1: int;

        $r0 = new java.sql.Date;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Date minus(java.util.Date,int)>(r1, i0);

        $l1 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        specialinvoke $r0.<java.sql.Date: void <init>(long)>($l1);

        return $r0;
    }

    public static int minus(java.util.Calendar, java.util.Calendar)
    {
        java.util.Calendar r0, r1, $r3, r4, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, i10;
        boolean $z0;
        java.lang.Object $r2;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Calendar;

        r4 = r0;

        r5 = r1;

        $z0 = virtualinvoke r0.<java.util.Calendar: boolean before(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        r4 = r1;

        r5 = r0;

     label1:
        i7 = 0;

        $r2 = virtualinvoke r5.<java.util.Calendar: java.lang.Object clone()>();

        $r3 = (java.util.Calendar) $r2;

     label2:
        $i8 = virtualinvoke r4.<java.util.Calendar: int get(int)>(1);

        $i9 = virtualinvoke $r3.<java.util.Calendar: int get(int)>(1);

        if $i8 <= $i9 goto label3;

        $i3 = virtualinvoke $r3.<java.util.Calendar: int getActualMaximum(int)>(6);

        $i4 = virtualinvoke $r3.<java.util.Calendar: int get(int)>(6);

        $i5 = $i3 - $i4;

        $i6 = 1 + $i5;

        i7 = i7 + $i6;

        virtualinvoke $r3.<java.util.Calendar: void set(int,int)>(6, 1);

        virtualinvoke $r3.<java.util.Calendar: void add(int,int)>(1, 1);

        goto label2;

     label3:
        $i0 = virtualinvoke r4.<java.util.Calendar: int get(int)>(6);

        $i1 = virtualinvoke $r3.<java.util.Calendar: int get(int)>(6);

        $i2 = $i0 - $i1;

        i10 = i7 + $i2;

        if $z0 == 0 goto label4;

        i10 = neg i10;

     label4:
        return i10;
    }

    public static int minus(java.util.Date, java.util.Date)
    {
        java.util.Date r3, r7;
        java.util.Calendar $r0, r2, $r4, r6;
        int $i0;
        java.lang.Object $r1, $r5;

        r3 := @parameter0: java.util.Date;

        r7 := @parameter1: java.util.Date;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r1 = virtualinvoke $r0.<java.util.Calendar: java.lang.Object clone()>();

        r2 = (java.util.Calendar) $r1;

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>(r3);

        $r4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r5 = virtualinvoke $r4.<java.util.Calendar: java.lang.Object clone()>();

        r6 = (java.util.Calendar) $r5;

        virtualinvoke r6.<java.util.Calendar: void setTime(java.util.Date)>(r7);

        $i0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int minus(java.util.Calendar,java.util.Calendar)>(r2, r6);

        return $i0;
    }

    public static java.lang.String format(java.util.Date, java.lang.String)
    {
        java.util.Date r2;
        java.text.SimpleDateFormat $r0;
        java.lang.String r1, $r3;

        r2 := @parameter0: java.util.Date;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>(r1);

        $r3 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r2);

        return $r3;
    }

    public static java.lang.String getDateString(java.util.Date)
    {
        java.lang.String $r2;
        java.text.DateFormat $r0;
        java.util.Date r1;

        r1 := @parameter0: java.util.Date;

        $r0 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance(int)>(3);

        $r2 = virtualinvoke $r0.<java.text.DateFormat: java.lang.String format(java.util.Date)>(r1);

        return $r2;
    }

    public static java.lang.String getTimeString(java.util.Date)
    {
        java.lang.String $r2;
        java.text.DateFormat $r0;
        java.util.Date r1;

        r1 := @parameter0: java.util.Date;

        $r0 = staticinvoke <java.text.DateFormat: java.text.DateFormat getTimeInstance(int)>(2);

        $r2 = virtualinvoke $r0.<java.text.DateFormat: java.lang.String format(java.util.Date)>(r1);

        return $r2;
    }

    public static java.lang.String getDateTimeString(java.util.Date)
    {
        java.lang.String $r2;
        java.text.DateFormat $r0;
        java.util.Date r1;

        r1 := @parameter0: java.util.Date;

        $r0 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int)>(3, 2);

        $r2 = virtualinvoke $r0.<java.text.DateFormat: java.lang.String format(java.util.Date)>(r1);

        return $r2;
    }

    public static java.lang.Boolean and(java.lang.Boolean, java.lang.Boolean)
    {
        java.lang.Boolean r0, r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Boolean;

        r1 := @parameter1: java.lang.Boolean;

        $z0 = virtualinvoke r0.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        return $r2;
    }

    public static java.lang.Boolean or(java.lang.Boolean, java.lang.Boolean)
    {
        java.lang.Boolean r0, $r1, r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Boolean;

        r2 := @parameter1: java.lang.Boolean;

        $z0 = virtualinvoke r0.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        return $r1;
    }

    public static java.lang.Boolean xor(java.lang.Boolean, java.lang.Boolean)
    {
        java.lang.Boolean r0, r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Boolean;

        r1 := @parameter1: java.lang.Boolean;

        $z0 = virtualinvoke r0.<java.lang.Boolean: boolean booleanValue()>();

        $z1 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        $z2 = $z0 ^ $z1;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        return $r2;
    }

    public static java.io.ObjectInputStream newObjectInputStream(java.io.File) throws java.io.IOException
    {
        java.io.ObjectInputStream $r0;
        java.io.FileInputStream $r1;
        java.io.File r2;

        r2 := @parameter0: java.io.File;

        $r0 = new java.io.ObjectInputStream;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r1);

        return $r0;
    }

    public static java.io.ObjectOutputStream newObjectOutputStream(java.io.File) throws java.io.IOException
    {
        java.io.FileOutputStream $r1;
        java.io.ObjectOutputStream $r0;
        java.io.File r2;

        r2 := @parameter0: java.io.File;

        $r0 = new java.io.ObjectOutputStream;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r1);

        return $r0;
    }

    public static void eachObject(java.io.File, groovy.lang.Closure) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream $r1;
        groovy.lang.Closure r2;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.ObjectInputStream newObjectInputStream(java.io.File)>(r0);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void eachObject(java.io.ObjectInputStream,groovy.lang.Closure)>($r1, r2);

        return;
    }

    public static void eachObject(java.io.ObjectInputStream, groovy.lang.Closure) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Throwable $r8;
        java.io.ObjectInputStream r16, r17;
        groovy.lang.Closure r1;
        java.lang.StringBuffer $r3, $r5, $r6, $r10, $r12, $r13;
        java.lang.String $r7, $r14;
        java.util.logging.Logger $r4, $r11;
        java.io.EOFException $r15;
        java.lang.Exception $r2, $r9;
        java.lang.Object $r0;

        r16 := @parameter0: java.io.ObjectInputStream;

        r1 := @parameter1: groovy.lang.Closure;

     label01:
        $r0 = virtualinvoke r16.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke r1.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r0);

     label02:
        goto label01;

     label03:
        $r15 := @caughtexception;

        goto label04;

     label04:
        r17 = r16;

        r16 = null;

        virtualinvoke r17.<java.io.InputStream: void close()>();

     label05:
        if null == null goto label15;

     label06:
        virtualinvoke r16.<java.io.ObjectInputStream: void close()>();

     label07:
        goto label15;

     label08:
        $r9 := @caughtexception;

        $r11 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.logging.Logger LOG>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught exception closing ObjectInputStream: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void warning(java.lang.String)>($r14);

        goto label15;

     label09:
        $r8 := @caughtexception;

     label10:
        if r16 == null goto label14;

     label11:
        virtualinvoke r16.<java.io.ObjectInputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r2 := @caughtexception;

        $r4 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.logging.Logger LOG>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught exception closing ObjectInputStream: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void warning(java.lang.String)>($r7);

     label14:
        throw $r8;

     label15:
        return;

        catch java.io.EOFException from label01 to label02 with label03;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Throwable from label01 to label05 with label09;
        catch java.lang.Exception from label11 to label12 with label13;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public static java.lang.Object withObjectInputStream(java.io.File, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.ObjectInputStream $r1;
        groovy.lang.Closure r2;
        java.lang.Object $r3;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.ObjectInputStream newObjectInputStream(java.io.File)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withStream(java.io.InputStream,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object withObjectOutputStream(java.io.File, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r2;
        java.io.ObjectOutputStream $r1;
        java.lang.Object $r3;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.ObjectOutputStream newObjectOutputStream(java.io.File)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withStream(java.io.OutputStream,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object eachLine(java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r1;
        java.lang.Object $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object eachLine(java.lang.String,int,groovy.lang.Closure)>(r0, 0, r1);

        return $r2;
    }

    public static java.lang.Object eachLine(java.lang.String, int, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r3;
        java.util.List $r1;
        int i0, $i1, i2, i3;
        java.lang.Object $r2;
        java.lang.String r0, r4;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r3 := @parameter2: groovy.lang.Closure;

        i2 = i0;

        r4 = null;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List readLines(java.lang.String)>(r0);

        i3 = 0;

     label1:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i3 >= $i1 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i3);

        r4 = (java.lang.String) $r2;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object callClosureForLine(groovy.lang.Closure,java.lang.String,int)>(r3, r4, i2);

        i2 = i2 + 1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r4;
    }

    public static java.lang.Object eachLine(java.io.File, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r1;
        java.lang.Object $r2;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object eachLine(java.io.File,int,groovy.lang.Closure)>(r0, 1, r1);

        return $r2;
    }

    public static java.lang.Object eachLine(java.io.File, int, groovy.lang.Closure) throws java.io.IOException
    {
        int i0;
        groovy.lang.Closure r2;
        java.lang.Object $r3;
        java.io.BufferedReader $r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedReader newReader(java.io.File)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object eachLine(java.io.Reader,int,groovy.lang.Closure)>($r1, i0, r2);

        return $r3;
    }

    public static java.lang.Object eachLine(java.io.InputStream, java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r2;
        java.lang.Object $r3;
        java.lang.String r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: groovy.lang.Closure;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object eachLine(java.io.InputStream,java.lang.String,int,groovy.lang.Closure)>(r0, r1, 1, r2);

        return $r3;
    }

    public static java.lang.Object eachLine(java.io.InputStream, java.lang.String, int, groovy.lang.Closure) throws java.io.IOException
    {
        int i0;
        groovy.lang.Closure r3;
        java.lang.Object $r4;
        java.lang.String r2;
        java.io.InputStreamReader $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: groovy.lang.Closure;

        $r0 = new java.io.InputStreamReader;

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r1, r2);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object eachLine(java.io.Reader,int,groovy.lang.Closure)>($r0, i0, r3);

        return $r4;
    }

    public static java.lang.Object eachLine(java.io.InputStream, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r1;
        java.lang.Object $r2;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object eachLine(java.io.InputStream,int,groovy.lang.Closure)>(r0, 1, r1);

        return $r2;
    }

    public static java.lang.Object eachLine(java.io.InputStream, int, groovy.lang.Closure) throws java.io.IOException
    {
        int i0;
        groovy.lang.Closure r2;
        java.lang.Object $r3;
        java.io.InputStreamReader $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r2 := @parameter2: groovy.lang.Closure;

        $r0 = new java.io.InputStreamReader;

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object eachLine(java.io.Reader,int,groovy.lang.Closure)>($r0, i0, r2);

        return $r3;
    }

    public static java.lang.Object eachLine(java.net.URL, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r1;
        java.lang.Object $r2;
        java.net.URL r0;

        r0 := @parameter0: java.net.URL;

        r1 := @parameter1: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object eachLine(java.net.URL,int,groovy.lang.Closure)>(r0, 1, r1);

        return $r2;
    }

    public static java.lang.Object eachLine(java.net.URL, int, groovy.lang.Closure) throws java.io.IOException
    {
        java.net.URL r0;
        java.net.URLConnection $r1;
        int i0;
        groovy.lang.Closure r3;
        java.lang.Object $r4;
        java.io.InputStream $r2;

        r0 := @parameter0: java.net.URL;

        i0 := @parameter1: int;

        r3 := @parameter2: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<java.net.URL: java.net.URLConnection openConnection()>();

        $r2 = virtualinvoke $r1.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object eachLine(java.io.InputStream,int,groovy.lang.Closure)>($r2, i0, r3);

        return $r4;
    }

    public static java.lang.Object eachLine(java.net.URL, java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        java.net.URL r0;
        groovy.lang.Closure r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @parameter0: java.net.URL;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: groovy.lang.Closure;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object eachLine(java.net.URL,java.lang.String,int,groovy.lang.Closure)>(r0, r1, 1, r2);

        return $r3;
    }

    public static java.lang.Object eachLine(java.net.URL, java.lang.String, int, groovy.lang.Closure) throws java.io.IOException
    {
        java.net.URL r1;
        groovy.lang.Closure r5;
        java.io.InputStreamReader $r0;
        java.net.URLConnection $r2;
        int i0;
        java.lang.Object $r6;
        java.lang.String r4;
        java.io.InputStream $r3;

        r1 := @parameter0: java.net.URL;

        r4 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r5 := @parameter3: groovy.lang.Closure;

        $r0 = new java.io.InputStreamReader;

        $r2 = virtualinvoke r1.<java.net.URL: java.net.URLConnection openConnection()>();

        $r3 = virtualinvoke $r2.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r3, r4);

        $r6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object eachLine(java.io.Reader,int,groovy.lang.Closure)>($r0, i0, r5);

        return $r6;
    }

    public static java.lang.Object eachLine(java.io.Reader, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r1;
        java.lang.Object $r2;
        java.io.Reader r0;

        r0 := @parameter0: java.io.Reader;

        r1 := @parameter1: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object eachLine(java.io.Reader,int,groovy.lang.Closure)>(r0, 1, r1);

        return $r2;
    }

    public static java.lang.Object eachLine(java.io.Reader, int, groovy.lang.Closure) throws java.io.IOException
    {
        java.lang.Throwable $r2;
        groovy.lang.Closure r1;
        java.io.Reader r3, r7;
        int i0, i1;
        java.lang.Object r4;
        java.io.BufferedReader $r0, r5;
        java.lang.String $r6;
        boolean $z0;

        r3 := @parameter0: java.io.Reader;

        i0 := @parameter1: int;

        r1 := @parameter2: groovy.lang.Closure;

        i1 = i0;

        r4 = null;

        $z0 = r3 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label1;

        r5 = (java.io.BufferedReader) r3;

        goto label2;

     label1:
        $r0 = new java.io.BufferedReader;

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>(r3);

        r5 = $r0;

     label2:
        $r6 = virtualinvoke r5.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r6 != null goto label3;

        goto label4;

     label3:
        r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object callClosureForLine(groovy.lang.Closure,java.lang.String,int)>(r1, $r6, i1);

        i1 = i1 + 1;

        goto label2;

     label4:
        r7 = r3;

        r3 = null;

        virtualinvoke r7.<java.io.Reader: void close()>();

     label5:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(null);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(r5);

        return r4;

     label6:
        $r2 := @caughtexception;

     label7:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(r3);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(r5);

        throw $r2;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public static java.lang.Object splitEachLine(java.io.File, java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r3;
        java.lang.Object $r4;
        java.io.BufferedReader $r1;
        java.lang.String r2;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedReader newReader(java.io.File)>(r0);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object splitEachLine(java.io.Reader,java.lang.String,groovy.lang.Closure)>($r1, r2, r3);

        return $r4;
    }

    public static java.lang.Object splitEachLine(java.io.Reader, java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        groovy.lang.Closure r4;
        java.lang.String[] $r2;
        java.io.Reader r6, r10;
        java.util.List $r3;
        java.lang.Object r7;
        java.io.BufferedReader $r0, r8;
        java.lang.String r1, $r9;
        boolean $z0;

        r6 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: groovy.lang.Closure;

        r7 = null;

        $z0 = r6 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label1;

        r8 = (java.io.BufferedReader) r6;

        goto label2;

     label1:
        $r0 = new java.io.BufferedReader;

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>(r6);

        r8 = $r0;

     label2:
        $r9 = virtualinvoke r8.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r9 != null goto label3;

        goto label4;

     label3:
        $r2 = virtualinvoke $r9.<java.lang.String: java.lang.String[] split(java.lang.String)>(r1);

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        r7 = virtualinvoke r4.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r3);

        goto label2;

     label4:
        r10 = r6;

        r6 = null;

        virtualinvoke r10.<java.io.Reader: void close()>();

     label5:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(null);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(r8);

        return r7;

     label6:
        $r5 := @caughtexception;

     label7:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(r6);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(r8);

        throw $r5;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public static java.lang.Object splitEachLine(java.io.InputStream, java.lang.String, java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r5;
        java.lang.Object $r6;
        java.io.BufferedReader $r0;
        java.lang.String r3, r4;
        java.io.InputStreamReader $r1;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r4 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r5 := @parameter3: groovy.lang.Closure;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r2, r3);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        $r6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object splitEachLine(java.io.Reader,java.lang.String,groovy.lang.Closure)>($r0, r4, r5);

        return $r6;
    }

    public static java.lang.Object splitEachLine(java.io.InputStream, java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r4;
        java.lang.Object $r5;
        java.io.BufferedReader $r0;
        java.lang.String r3;
        java.io.InputStreamReader $r1;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: groovy.lang.Closure;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object splitEachLine(java.io.Reader,java.lang.String,groovy.lang.Closure)>($r0, r3, r4);

        return $r5;
    }

    public static java.lang.Object splitEachLine(java.lang.String, java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r7;
        java.lang.String[] $r5;
        java.util.List $r1, $r6;
        int $i0, i1;
        java.lang.Object $r2, r8;
        java.lang.String r0, r3, r4;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r7 := @parameter2: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List readLines(java.lang.String)>(r0);

        r8 = null;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (java.lang.String) $r2;

        $r5 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>(r4);

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        r8 = virtualinvoke r7.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r8;
    }

    public static java.lang.String readLine(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        java.lang.String $r1, $r2, $r4;
        java.io.BufferedReader r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.io.Reader;

        $z0 = r0 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label1;

        r3 = (java.io.BufferedReader) r0;

        $r4 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>();

        return $r4;

     label1:
        $z1 = virtualinvoke r0.<java.io.Reader: boolean markSupported()>();

        if $z1 == 0 goto label2;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String readLineFromReaderWithMark(java.io.Reader)>(r0);

        return $r2;

     label2:
        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String readLineFromReaderWithoutMark(java.io.Reader)>(r0);

        return $r1;
    }

    private static java.lang.String readLineFromReaderWithMark(java.io.Reader) throws java.io.IOException
    {
        byte b15;
        java.io.Reader r1;
        java.util.logging.Logger $r6;
        long $l18;
        java.lang.StringBuffer $r7, $r8, $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11, $i12, i13, i14, $i16, $i17, $i20, $i21, $i22, $i23;
        java.lang.String $r3, $r9, $r10, $r11;
        char $c6, $c8, $c10;
        java.io.IOException $r4;
        char[] r0;

        r1 := @parameter0: java.io.Reader;

        $i0 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: int charBufferSize>;

        r0 = newarray (char)[$i0];

     label01:
        $i1 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: int charBufferSize>;

        virtualinvoke r1.<java.io.Reader: void mark(int)>($i1);

     label02:
        goto label04;

     label03:
        $r4 := @caughtexception;

        $r6 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.logging.Logger LOG>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught exception setting mark on supporting reader: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void warning(java.lang.String)>($r9);

        $r10 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String readLineFromReaderWithoutMark(java.io.Reader)>(r1);

        return $r10;

     label04:
        $i2 = virtualinvoke r1.<java.io.Reader: int read(char[])>(r0);

        i13 = $i2;

        $i3 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: int EOF>;

        if $i2 != $i3 goto label05;

        return null;

     label05:
        $r13 = new java.lang.StringBuffer;

        $i4 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: int expectedLineLength>;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>(int)>($i4);

        i14 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int lineSeparatorIndex(char[],int)>(r0, $i2);

     label06:
        $i20 = (int) -1;

        if i14 != $i20 goto label08;

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r0, 0, i13);

        $i11 = virtualinvoke r1.<java.io.Reader: int read(char[])>(r0);

        i13 = $i11;

        $i12 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: int EOF>;

        if $i11 != $i12 goto label07;

        $r3 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label07:
        i14 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int lineSeparatorIndex(char[],int)>(r0, $i11);

        goto label06;

     label08:
        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r0, 0, i14);

        b15 = 1;

        $i5 = i14 + 1;

        if $i5 >= i13 goto label09;

        $c8 = r0[i14];

        $i21 = (int) $c8;

        if $i21 != 13 goto label10;

        $i9 = i14 + 1;

        $c10 = r0[$i9];

        $i22 = (int) $c10;

        if $i22 != 10 goto label10;

        b15 = 2;

        goto label10;

     label09:
        $c6 = r0[i14];

        $i23 = (int) $c6;

        if $i23 != 13 goto label10;

        $i7 = virtualinvoke r1.<java.io.Reader: int read()>();

        if $i7 != 10 goto label10;

        b15 = 2;

     label10:
        virtualinvoke r1.<java.io.Reader: void reset()>();

        $i16 = virtualinvoke $r13.<java.lang.StringBuffer: int length()>();

        $i17 = $i16 + b15;

        $l18 = (long) $i17;

        virtualinvoke r1.<java.io.Reader: long skip(long)>($l18);

        $r11 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;

        catch java.io.IOException from label01 to label02 with label03;
    }

    private static java.lang.String readLineFromReaderWithoutMark(java.io.Reader) throws java.io.IOException
    {
        char c3;
        java.io.Reader r0;
        java.lang.StringBuffer $r3;
        int $i0, $i1, $i2, i4, $i6;
        java.lang.String $r2;

        r0 := @parameter0: java.io.Reader;

        $i0 = virtualinvoke r0.<java.io.Reader: int read()>();

        i4 = $i0;

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        return null;

     label1:
        $r3 = new java.lang.StringBuffer;

        $i1 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: int expectedLineLength>;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>($i1);

     label2:
        $i2 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: int EOF>;

        if i4 == $i2 goto label3;

        if i4 == 10 goto label3;

        if i4 == 13 goto label3;

        c3 = (char) i4;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c3);

        i4 = virtualinvoke r0.<java.io.Reader: int read()>();

        goto label2;

     label3:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private static int lineSeparatorIndex(char[], int)
    {
        int i0, i2, $i4;
        char[] r0;
        char $c1;
        boolean $z0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $c1 = r0[i2];

        $z0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: boolean isLineSeparator(char)>($c1);

        if $z0 == 0 goto label2;

        return i2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i4 = (int) -1;

        return $i4;
    }

    private static boolean isLineSeparator(char)
    {
        int $i1, $i2;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 10 goto label1;

        $i2 = (int) c0;

        if $i2 != 13 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static java.lang.String readLine(java.io.InputStream) throws java.io.IOException
    {
        groovy.lang.DeprecationException $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new groovy.lang.DeprecationException;

        specialinvoke $r0.<groovy.lang.DeprecationException: void <init>(java.lang.String)>("readLine() on InputStream is no longer supported. Either use a Reader or encapsulate the InputStream with a BufferedReader and an InputStreamReader.");

        throw $r0;
    }

    public static java.util.List readLines(java.lang.String) throws java.io.IOException
    {
        java.util.List $r2;
        java.lang.String r1;
        java.io.StringReader $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.StringReader;

        specialinvoke $r0.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List readLines(java.io.Reader)>($r0);

        return $r2;
    }

    public static java.lang.String denormalize(java.lang.String)
    {
        java.lang.StringBuffer $r12;
        int $i0, $i1, $i2, $i5, i6, $i7, $i8;
        java.lang.String $r0, r1, $r3, $r4, $r5, $r8;
        java.io.BufferedWriter $r11;
        java.io.StringWriter $r10;
        char $c3, $c4;
        java.io.IOException $r9;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String lineSeparator>;

        if $r0 != null goto label04;

        $r10 = new java.io.StringWriter;

        specialinvoke $r10.<java.io.StringWriter: void <init>(int)>(2);

     label01:
        $r11 = new java.io.BufferedWriter;

        specialinvoke $r11.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r10);

        virtualinvoke $r11.<java.io.BufferedWriter: void newLine()>();

        virtualinvoke $r11.<java.io.BufferedWriter: void flush()>();

        $r8 = virtualinvoke $r10.<java.io.StringWriter: java.lang.String toString()>();

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String lineSeparator> = $r8;

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String lineSeparator> = "\n";

     label04:
        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i5 >= 1 goto label05;

        return r1;

     label05:
        $r12 = new java.lang.StringBuffer;

        $i0 = 110 * $i5;

        $i1 = $i0 / 100;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>(int)>($i1);

        i6 = 0;

     label06:
        if i6 >= $i5 goto label11;

        $i2 = i6;

        i6 = i6 + 1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i2);

        $i7 = (int) $c3;

        lookupswitch($i7)
        {
            case 10: goto label08;
            case 13: goto label07;
            default: goto label09;
        };

     label07:
        $r4 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String lineSeparator>;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        if i6 >= $i5 goto label10;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        $i8 = (int) $c4;

        if $i8 != 10 goto label10;

        i6 = i6 + 1;

        goto label10;

     label08:
        $r5 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String lineSeparator>;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        goto label10;

     label09:
        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

     label10:
        goto label06;

     label11:
        $r3 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

        catch java.io.IOException from label01 to label02 with label03;
    }

    public static java.lang.String normalize(java.lang.String)
    {
        char $c3;
        java.lang.StringBuffer $r5;
        int $i0, $i1, $i2, $i4, i5, i6, $i7;
        java.lang.String r0, $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(13);

        i5 = $i0;

        if $i0 >= 0 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>(int)>($i1);

        i6 = 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i6, i5);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $i2 = i5 + 1;

        i6 = $i2;

        if $i2 < $i1 goto label3;

        goto label5;

     label3:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i7 = (int) $c3;

        if $i7 != 10 goto label4;

        i6 = $i2 + 1;

        if i6 < $i1 goto label4;

        goto label5;

     label4:
        $i4 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(13, i6);

        i5 = $i4;

        if $i4 > 0 goto label2;

     label5:
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i6);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.util.List readLines(java.io.File) throws java.io.IOException
    {
        org.codehaus.groovy.runtime.IteratorClosureAdapter $r0;
        java.util.List $r2;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        $r0 = new org.codehaus.groovy.runtime.IteratorClosureAdapter;

        specialinvoke $r0.<org.codehaus.groovy.runtime.IteratorClosureAdapter: void <init>(java.lang.Object)>(r1);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object eachLine(java.io.File,groovy.lang.Closure)>(r1, $r0);

        $r2 = virtualinvoke $r0.<org.codehaus.groovy.runtime.IteratorClosureAdapter: java.util.List asList()>();

        return $r2;
    }

    public static java.lang.String getText(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.lang.String r1, $r3;
        java.io.BufferedReader $r2;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedReader newReader(java.io.File,java.lang.String)>(r0, r1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getText(java.io.BufferedReader)>($r2);

        return $r3;
    }

    public static java.lang.String getText(java.io.File) throws java.io.IOException
    {
        java.io.BufferedReader $r1;
        java.lang.String $r2;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedReader newReader(java.io.File)>(r0);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getText(java.io.BufferedReader)>($r1);

        return $r2;
    }

    public static java.lang.String getText(java.net.URL) throws java.io.IOException
    {
        java.nio.charset.Charset $r1;
        java.net.URL r0;
        java.lang.String $r2, $r3;

        r0 := @parameter0: java.net.URL;

        $r1 = staticinvoke <groovy.util.CharsetToolkit: java.nio.charset.Charset getDefaultSystemCharset()>();

        $r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.lang.String toString()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getText(java.net.URL,java.lang.String)>(r0, $r2);

        return $r3;
    }

    public static java.lang.String getText(java.net.URL, java.lang.String) throws java.io.IOException
    {
        java.net.URL r2;
        java.net.URLConnection $r3;
        java.io.BufferedReader $r0;
        java.lang.String r5, $r6;
        java.io.InputStreamReader $r1;
        java.io.InputStream $r4;

        r2 := @parameter0: java.net.URL;

        r5 := @parameter1: java.lang.String;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        $r3 = virtualinvoke r2.<java.net.URL: java.net.URLConnection openConnection()>();

        $r4 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r4, r5);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        $r6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getText(java.io.BufferedReader)>($r0);

        return $r6;
    }

    public static java.lang.String getText(java.io.InputStream) throws java.io.IOException
    {
        java.io.BufferedReader $r0;
        java.lang.String $r3;
        java.io.InputStreamReader $r1;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getText(java.io.BufferedReader)>($r0);

        return $r3;
    }

    public static java.lang.String getText(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.io.BufferedReader $r0;
        java.lang.String r3, $r4;
        java.io.InputStreamReader $r1;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r2, r3);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getText(java.io.BufferedReader)>($r0);

        return $r4;
    }

    public static java.lang.String getText(java.io.Reader) throws java.io.IOException
    {
        java.io.BufferedReader $r0;
        java.io.Reader r1;
        java.lang.String $r2;

        r1 := @parameter0: java.io.Reader;

        $r0 = new java.io.BufferedReader;

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>(r1);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getText(java.io.BufferedReader)>($r0);

        return $r2;
    }

    public static java.lang.String getText(java.io.BufferedReader) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        java.lang.StringBuffer $r6;
        int $i0, $i2;
        char[] r1;
        java.io.BufferedReader r2, r5;
        java.lang.String $r3;

        r5 := @parameter0: java.io.BufferedReader;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        r1 = newarray (char)[4096];

     label1:
        $i0 = virtualinvoke r5.<java.io.BufferedReader: int read(char[])>(r1);

        $i2 = (int) -1;

        if $i0 == $i2 goto label2;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r1, 0, $i0);

        goto label1;

     label2:
        r2 = r5;

        r5 = null;

        virtualinvoke r2.<java.io.Reader: void close()>();

     label3:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(null);

        goto label6;

     label4:
        $r4 := @caughtexception;

     label5:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(r5);

        throw $r4;

     label6:
        $r3 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void writeLine(java.io.BufferedWriter, java.lang.String) throws java.io.IOException
    {
        java.lang.String r1;
        java.io.BufferedWriter r0;

        r0 := @parameter0: java.io.BufferedWriter;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>(r1);

        virtualinvoke r0.<java.io.BufferedWriter: void newLine()>();

        return;
    }

    public static void write(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r3;
        java.io.BufferedWriter $r1, r4;
        java.lang.String r2;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        r4 = null;

     label1:
        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedWriter newWriter(java.io.File)>(r0);

        r4 = $r1;

        virtualinvoke $r1.<java.io.BufferedWriter: void write(java.lang.String)>(r2);

        virtualinvoke $r1.<java.io.BufferedWriter: void flush()>();

        r4 = null;

        virtualinvoke $r1.<java.io.Writer: void close()>();

     label2:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(null);

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(r4);

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void setText(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.lang.String r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void write(java.io.File,java.lang.String)>(r0, r1);

        return;
    }

    public static java.io.File leftShift(java.io.File, java.lang.Object) throws java.io.IOException
    {
        java.lang.Object r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void append(java.io.File,java.lang.Object)>(r0, r1);

        return r0;
    }

    public static java.io.File leftShift(java.io.File, byte[]) throws java.io.IOException
    {
        byte[] r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: byte[];

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void append(java.io.File,byte[])>(r0, r1);

        return r0;
    }

    public static void write(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        java.io.BufferedWriter $r2, r5;
        java.lang.String r1, r3;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r3 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r5 = null;

     label1:
        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedWriter newWriter(java.io.File,java.lang.String)>(r0, r1);

        r5 = $r2;

        virtualinvoke $r2.<java.io.BufferedWriter: void write(java.lang.String)>(r3);

        virtualinvoke $r2.<java.io.BufferedWriter: void flush()>();

        r5 = null;

        virtualinvoke $r2.<java.io.Writer: void close()>();

     label2:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(null);

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(r5);

        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void append(java.io.File, java.lang.Object) throws java.io.IOException
    {
        java.lang.Throwable $r3;
        java.io.BufferedWriter $r1, r4;
        java.lang.Object r2;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.Object;

        r4 = null;

     label1:
        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedWriter newWriter(java.io.File,boolean)>(r0, 1);

        r4 = $r1;

        staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: void write(java.io.Writer,java.lang.Object)>($r1, r2);

        virtualinvoke $r1.<java.io.BufferedWriter: void flush()>();

        r4 = null;

        virtualinvoke $r1.<java.io.Writer: void close()>();

     label2:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(null);

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(r4);

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void append(java.io.File, byte[]) throws java.io.IOException
    {
        java.lang.Throwable $r3;
        byte[] r2;
        int $i0;
        java.io.File r0;
        java.io.BufferedOutputStream $r1, r4;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: byte[];

        r4 = null;

     label1:
        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedOutputStream newOutputStream(java.io.File)>(r0);

        r4 = $r1;

        $i0 = lengthof r2;

        virtualinvoke $r1.<java.io.BufferedOutputStream: void write(byte[],int,int)>(r2, 0, $i0);

        virtualinvoke $r1.<java.io.BufferedOutputStream: void flush()>();

        r4 = null;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

     label2:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeOutputStreamWithWarning(java.io.OutputStream)>(null);

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeOutputStreamWithWarning(java.io.OutputStream)>(r4);

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void append(java.io.File, java.lang.Object, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        java.io.BufferedWriter $r2, r5;
        java.lang.Object r3;
        java.lang.String r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r3 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.String;

        r5 = null;

     label1:
        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedWriter newWriter(java.io.File,java.lang.String,boolean)>(r0, r1, 1);

        r5 = $r2;

        staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: void write(java.io.Writer,java.lang.Object)>($r2, r3);

        virtualinvoke $r2.<java.io.BufferedWriter: void flush()>();

        r5 = null;

        virtualinvoke $r2.<java.io.Writer: void close()>();

     label2:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(null);

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(r5);

        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.util.List readLines(java.io.Reader) throws java.io.IOException
    {
        org.codehaus.groovy.runtime.IteratorClosureAdapter $r0;
        java.util.List $r2;
        java.io.Reader r1;

        r1 := @parameter0: java.io.Reader;

        $r0 = new org.codehaus.groovy.runtime.IteratorClosureAdapter;

        specialinvoke $r0.<org.codehaus.groovy.runtime.IteratorClosureAdapter: void <init>(java.lang.Object)>(r1);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object eachLine(java.io.Reader,groovy.lang.Closure)>(r1, $r0);

        $r2 = virtualinvoke $r0.<org.codehaus.groovy.runtime.IteratorClosureAdapter: java.util.List asList()>();

        return $r2;
    }

    private static void checkDir(java.io.File) throws java.io.FileNotFoundException, java.lang.IllegalArgumentException
    {
        java.lang.IllegalArgumentException $r1;
        java.io.File r0;
        java.io.FileNotFoundException $r7;
        java.lang.StringBuffer $r2, $r3, $r5;
        java.lang.String $r4, $r6, $r8;
        boolean $z0, $z1;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r7 = new java.io.FileNotFoundException;

        $r8 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r7.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The provided File object is not a directory: ");

        $r4 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        return;
    }

    private static void eachFile(java.io.File, groovy.lang.Closure, boolean) throws java.io.FileNotFoundException, java.lang.IllegalArgumentException
    {
        groovy.lang.Closure r2;
        java.io.File r0, $r3, $r4;
        int $i0, i1;
        java.io.File[] $r1;
        boolean z0, $z1;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: groovy.lang.Closure;

        z0 := @parameter2: boolean;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void checkDir(java.io.File)>(r0);

        $r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if $r1 != null goto label1;

        return;

     label1:
        i1 = 0;

     label2:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label5;

        if z0 == 0 goto label3;

        $r4 = $r1[i1];

        $z1 = virtualinvoke $r4.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label4;

     label3:
        $r3 = $r1[i1];

        virtualinvoke r2.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r3);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return;
    }

    public static void eachFile(java.io.File, groovy.lang.Closure) throws java.io.FileNotFoundException, java.lang.IllegalArgumentException
    {
        groovy.lang.Closure r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: groovy.lang.Closure;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void eachFile(java.io.File,groovy.lang.Closure,boolean)>(r0, r1, 0);

        return;
    }

    public static void eachDir(java.io.File, groovy.lang.Closure) throws java.io.FileNotFoundException, java.lang.IllegalArgumentException
    {
        groovy.lang.Closure r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: groovy.lang.Closure;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void eachFile(java.io.File,groovy.lang.Closure,boolean)>(r0, r1, 1);

        return;
    }

    private static void eachFileRecurse(java.io.File, groovy.lang.Closure, boolean) throws java.io.FileNotFoundException, java.lang.IllegalArgumentException
    {
        groovy.lang.Closure r3;
        java.io.File r0, $r2, $r4, $r5, $r6;
        int $i0, i1;
        java.io.File[] $r1;
        boolean $z0, z1;

        r0 := @parameter0: java.io.File;

        r3 := @parameter1: groovy.lang.Closure;

        z1 := @parameter2: boolean;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void checkDir(java.io.File)>(r0);

        $r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if $r1 != null goto label1;

        return;

     label1:
        i1 = 0;

     label2:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label5;

        $r2 = $r1[i1];

        $z0 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label3;

        $r5 = $r1[i1];

        virtualinvoke r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r5);

        $r6 = $r1[i1];

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void eachFileRecurse(java.io.File,groovy.lang.Closure,boolean)>($r6, r3, z1);

        goto label4;

     label3:
        if z1 != 0 goto label4;

        $r4 = $r1[i1];

        virtualinvoke r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r4);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return;
    }

    public static void eachFileRecurse(java.io.File, groovy.lang.Closure) throws java.io.FileNotFoundException, java.lang.IllegalArgumentException
    {
        groovy.lang.Closure r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: groovy.lang.Closure;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void eachFileRecurse(java.io.File,groovy.lang.Closure,boolean)>(r0, r1, 0);

        return;
    }

    public static void eachDirRecurse(java.io.File, groovy.lang.Closure) throws java.io.FileNotFoundException, java.lang.IllegalArgumentException
    {
        groovy.lang.Closure r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: groovy.lang.Closure;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void eachFileRecurse(java.io.File,groovy.lang.Closure,boolean)>(r0, r1, 1);

        return;
    }

    private static void eachFileMatch(java.io.File, java.lang.Object, groovy.lang.Closure, boolean) throws java.io.FileNotFoundException, java.lang.IllegalArgumentException
    {
        groovy.lang.MetaClass $r3;
        groovy.lang.Closure r7;
        java.io.File r0, r4;
        int $i0, i1;
        java.lang.Object r2, $r6;
        java.lang.String $r5;
        java.io.File[] $r1;
        boolean z0, $z1, $z2;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.Object;

        r7 := @parameter2: groovy.lang.Closure;

        z0 := @parameter3: boolean;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void checkDir(java.io.File)>(r0);

        $r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: groovy.lang.MetaClass getMetaClass(java.lang.Object)>(r2);

        i1 = 0;

     label2:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label5;

        r4 = $r1[i1];

        if z0 == 0 goto label3;

        $z2 = virtualinvoke r4.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label4;

     label3:
        $r5 = virtualinvoke r4.<java.io.File: java.lang.String getName()>();

        $r6 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r2, "isCase", $r5);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r6);

        if $z1 == 0 goto label4;

        virtualinvoke r7.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r4);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return;
    }

    public static void eachFileMatch(java.io.File, java.lang.Object, groovy.lang.Closure) throws java.io.FileNotFoundException, java.lang.IllegalArgumentException
    {
        groovy.lang.Closure r2;
        java.lang.Object r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: groovy.lang.Closure;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void eachFileMatch(java.io.File,java.lang.Object,groovy.lang.Closure,boolean)>(r0, r1, r2, 0);

        return;
    }

    public static void eachDirMatch(java.io.File, java.lang.Object, groovy.lang.Closure) throws java.io.FileNotFoundException, java.lang.IllegalArgumentException
    {
        groovy.lang.Closure r2;
        java.lang.Object r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: groovy.lang.Closure;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void eachFileMatch(java.io.File,java.lang.Object,groovy.lang.Closure,boolean)>(r0, r1, r2, 1);

        return;
    }

    public static boolean deleteDir(java.io.File)
    {
        java.io.File r0, r2;
        int $i0, i1;
        java.io.File[] $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if $r1 != null goto label3;

        return 0;

     label3:
        z6 = 1;

        i1 = 0;

     label4:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label7;

        r2 = $r1[i1];

        $z3 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label5;

        $z5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: boolean deleteDir(java.io.File)>(r2);

        if $z5 != 0 goto label6;

        z6 = 0;

        goto label6;

     label5:
        $z4 = virtualinvoke r2.<java.io.File: boolean delete()>();

        if $z4 != 0 goto label6;

        z6 = 0;

     label6:
        i1 = i1 + 1;

        goto label4;

     label7:
        $z2 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label8;

        z6 = 0;

     label8:
        return z6;
    }

    public static java.util.TimerTask runAfter(java.util.Timer, int, groovy.lang.Closure)
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods$3 $r0;
        int i0;
        groovy.lang.Closure r1;
        java.util.Timer r2;
        long $l1;

        r2 := @parameter0: java.util.Timer;

        i0 := @parameter1: int;

        r1 := @parameter2: groovy.lang.Closure;

        $r0 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$3;

        specialinvoke $r0.<org.codehaus.groovy.runtime.DefaultGroovyMethods$3: void <init>(groovy.lang.Closure)>(r1);

        $l1 = (long) i0;

        virtualinvoke r2.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r0, $l1);

        return $r0;
    }

    public static java.io.BufferedReader newReader(java.io.File) throws java.io.IOException
    {
        java.io.BufferedReader $r2;
        java.io.File r1;
        groovy.util.CharsetToolkit $r0;

        r1 := @parameter0: java.io.File;

        $r0 = new groovy.util.CharsetToolkit;

        specialinvoke $r0.<groovy.util.CharsetToolkit: void <init>(java.io.File)>(r1);

        $r2 = virtualinvoke $r0.<groovy.util.CharsetToolkit: java.io.BufferedReader getReader()>();

        return $r2;
    }

    public static java.io.BufferedReader newReader(java.io.File, java.lang.String) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    {
        java.io.BufferedReader $r0;
        java.io.FileInputStream $r2;
        java.lang.String r4;
        java.io.InputStreamReader $r1;
        java.io.File r3;

        r3 := @parameter0: java.io.File;

        r4 := @parameter1: java.lang.String;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>(r3);

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r2, r4);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        return $r0;
    }

    public static java.io.BufferedReader newReader(java.io.InputStream)
    {
        java.io.BufferedReader $r0;
        java.io.InputStreamReader $r1;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        return $r0;
    }

    public static java.io.BufferedReader newReader(java.io.InputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.BufferedReader $r0;
        java.lang.String r3;
        java.io.InputStreamReader $r1;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r2, r3);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        return $r0;
    }

    public static java.lang.Object withReader(java.io.File, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r2;
        java.lang.Object $r3;
        java.io.BufferedReader $r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedReader newReader(java.io.File)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withReader(java.io.Reader,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object withReader(java.io.File, java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r3;
        java.lang.Object $r4;
        java.lang.String r1;
        java.io.BufferedReader $r2;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedReader newReader(java.io.File,java.lang.String)>(r0, r1);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withReader(java.io.Reader,groovy.lang.Closure)>($r2, r3);

        return $r4;
    }

    public static java.io.BufferedOutputStream newOutputStream(java.io.File) throws java.io.IOException
    {
        java.io.FileOutputStream $r1;
        java.io.File r2;
        java.io.BufferedOutputStream $r0;

        r2 := @parameter0: java.io.File;

        $r0 = new java.io.BufferedOutputStream;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r1);

        return $r0;
    }

    public static java.io.DataOutputStream newDataOutputStream(java.io.File) throws java.io.IOException
    {
        java.io.FileOutputStream $r1;
        java.io.DataOutputStream $r0;
        java.io.File r2;

        r2 := @parameter0: java.io.File;

        $r0 = new java.io.DataOutputStream;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r1);

        return $r0;
    }

    public static java.lang.Object withOutputStream(java.io.File, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r2;
        java.lang.Object $r3;
        java.io.File r0;
        java.io.BufferedOutputStream $r1;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedOutputStream newOutputStream(java.io.File)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withStream(java.io.OutputStream,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object withInputStream(java.io.File, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.BufferedInputStream $r1;
        groovy.lang.Closure r2;
        java.lang.Object $r3;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedInputStream newInputStream(java.io.File)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withStream(java.io.InputStream,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object withInputStream(java.net.URL, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.BufferedInputStream $r1;
        java.net.URL r0;
        groovy.lang.Closure r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.net.URL;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedInputStream newInputStream(java.net.URL)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withStream(java.io.InputStream,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object withDataOutputStream(java.io.File, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.DataOutputStream $r1;
        groovy.lang.Closure r2;
        java.lang.Object $r3;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.DataOutputStream newDataOutputStream(java.io.File)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withStream(java.io.OutputStream,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object withDataInputStream(java.io.File, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.DataInputStream $r1;
        groovy.lang.Closure r2;
        java.lang.Object $r3;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.DataInputStream newDataInputStream(java.io.File)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withStream(java.io.InputStream,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.io.BufferedWriter newWriter(java.io.File) throws java.io.IOException
    {
        java.io.FileWriter $r1;
        java.io.BufferedWriter $r0;
        java.io.File r2;

        r2 := @parameter0: java.io.File;

        $r0 = new java.io.BufferedWriter;

        $r1 = new java.io.FileWriter;

        specialinvoke $r1.<java.io.FileWriter: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r1);

        return $r0;
    }

    public static java.io.BufferedWriter newWriter(java.io.File, boolean) throws java.io.IOException
    {
        java.io.BufferedWriter $r0;
        java.io.FileWriter $r1;
        java.io.File r2;
        boolean z0;

        r2 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        $r0 = new java.io.BufferedWriter;

        $r1 = new java.io.FileWriter;

        specialinvoke $r1.<java.io.FileWriter: void <init>(java.io.File,boolean)>(r2, z0);

        specialinvoke $r0.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r1);

        return $r0;
    }

    public static java.io.BufferedWriter newWriter(java.io.File, java.lang.String, boolean) throws java.io.IOException
    {
        java.io.FileOutputStream $r0, $r7;
        java.io.File r1;
        groovy.io.EncodingAwareBufferedWriter $r5, $r8;
        java.io.OutputStreamWriter $r6, $r9;
        java.lang.String r2, $r3, $r4;
        boolean z0, $z1, $z2;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r5 = new groovy.io.EncodingAwareBufferedWriter;

        $r6 = new java.io.OutputStreamWriter;

        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r1, z0);

        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r7, r2);

        specialinvoke $r5.<groovy.io.EncodingAwareBufferedWriter: void <init>(java.io.OutputStreamWriter)>($r6);

        return $r5;

     label1:
        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        $r3 = "UTF-16BE";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void writeUtf16Bom(java.io.FileOutputStream,boolean)>($r0, 1);

        goto label3;

     label2:
        $r4 = "UTF-16LE";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label3;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void writeUtf16Bom(java.io.FileOutputStream,boolean)>($r0, 0);

     label3:
        $r8 = new groovy.io.EncodingAwareBufferedWriter;

        $r9 = new java.io.OutputStreamWriter;

        specialinvoke $r9.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r0, r2);

        specialinvoke $r8.<groovy.io.EncodingAwareBufferedWriter: void <init>(java.io.OutputStreamWriter)>($r9);

        return $r8;
    }

    public static java.io.BufferedWriter newWriter(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.lang.String r1;
        java.io.File r0;
        java.io.BufferedWriter $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedWriter newWriter(java.io.File,java.lang.String,boolean)>(r0, r1, 0);

        return $r2;
    }

    private static void writeUtf16Bom(java.io.FileOutputStream, boolean) throws java.io.IOException
    {
        int $i1, $i3, $i5, $i7;
        java.io.FileOutputStream r0;
        boolean z0;

        r0 := @parameter0: java.io.FileOutputStream;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i1 = (int) -2;

        virtualinvoke r0.<java.io.FileOutputStream: void write(int)>($i1);

        $i3 = (int) -1;

        virtualinvoke r0.<java.io.FileOutputStream: void write(int)>($i3);

        goto label2;

     label1:
        $i5 = (int) -1;

        virtualinvoke r0.<java.io.FileOutputStream: void write(int)>($i5);

        $i7 = (int) -2;

        virtualinvoke r0.<java.io.FileOutputStream: void write(int)>($i7);

     label2:
        return;
    }

    public static java.lang.Object withWriter(java.io.File, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.BufferedWriter $r1;
        groovy.lang.Closure r2;
        java.lang.Object $r3;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedWriter newWriter(java.io.File)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withWriter(java.io.Writer,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object withWriter(java.io.File, java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.BufferedWriter $r2;
        groovy.lang.Closure r3;
        java.lang.Object $r4;
        java.lang.String r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedWriter newWriter(java.io.File,java.lang.String)>(r0, r1);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withWriter(java.io.Writer,groovy.lang.Closure)>($r2, r3);

        return $r4;
    }

    public static java.lang.Object withWriterAppend(java.io.File, java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.BufferedWriter $r2;
        groovy.lang.Closure r3;
        java.lang.Object $r4;
        java.lang.String r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedWriter newWriter(java.io.File,java.lang.String,boolean)>(r0, r1, 1);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withWriter(java.io.Writer,groovy.lang.Closure)>($r2, r3);

        return $r4;
    }

    public static java.lang.Object withWriterAppend(java.io.File, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.BufferedWriter $r1;
        groovy.lang.Closure r2;
        java.lang.Object $r3;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedWriter newWriter(java.io.File,boolean)>(r0, 1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withWriter(java.io.Writer,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.io.PrintWriter newPrintWriter(java.io.File) throws java.io.IOException
    {
        java.io.PrintWriter $r0;
        java.io.File r1;
        java.io.BufferedWriter $r2;

        r1 := @parameter0: java.io.File;

        $r0 = new java.io.PrintWriter;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedWriter newWriter(java.io.File)>(r1);

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.io.Writer)>($r2);

        return $r0;
    }

    public static java.io.PrintWriter newPrintWriter(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.PrintWriter $r0;
        java.io.BufferedWriter $r3;
        java.lang.String r2;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.io.PrintWriter;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedWriter newWriter(java.io.File,java.lang.String)>(r1, r2);

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.io.Writer)>($r3);

        return $r0;
    }

    public static java.lang.Object withPrintWriter(java.io.File, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.PrintWriter $r1;
        groovy.lang.Closure r2;
        java.lang.Object $r3;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.PrintWriter newPrintWriter(java.io.File)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withWriter(java.io.Writer,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object withPrintWriter(java.io.File, java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.PrintWriter $r2;
        groovy.lang.Closure r3;
        java.lang.Object $r4;
        java.lang.String r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.PrintWriter newPrintWriter(java.io.File,java.lang.String)>(r0, r1);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withWriter(java.io.Writer,groovy.lang.Closure)>($r2, r3);

        return $r4;
    }

    public static java.lang.Object withWriter(java.io.Writer, groovy.lang.Closure) throws java.io.IOException
    {
        java.lang.Throwable $r2;
        java.io.Writer r4, r5;
        groovy.lang.Closure r0;
        java.lang.Object $r1;
        java.io.IOException $r3;

        r4 := @parameter0: java.io.Writer;

        r0 := @parameter1: groovy.lang.Closure;

     label1:
        $r1 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r4);

     label2:
        virtualinvoke r4.<java.io.Writer: void flush()>();

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

     label5:
        r5 = r4;

        r4 = null;

        virtualinvoke r5.<java.io.Writer: void close()>();

     label6:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(null);

        return $r1;

     label7:
        $r2 := @caughtexception;

     label8:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(r4);

        throw $r2;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public static java.lang.Object withReader(java.io.Reader, groovy.lang.Closure) throws java.io.IOException
    {
        java.lang.Throwable $r3;
        groovy.lang.Closure r0;
        java.lang.Object $r1;
        java.io.Reader r2, r4;

        r4 := @parameter0: java.io.Reader;

        r0 := @parameter1: groovy.lang.Closure;

     label1:
        $r1 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r4);

        r2 = r4;

        r4 = null;

        virtualinvoke r2.<java.io.Reader: void close()>();

     label2:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(null);

        return $r1;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(r4);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.lang.Object withStream(java.io.InputStream, groovy.lang.Closure) throws java.io.IOException
    {
        java.lang.Throwable $r3;
        groovy.lang.Closure r0;
        java.lang.Object $r1;
        java.io.InputStream r2, r4;

        r4 := @parameter0: java.io.InputStream;

        r0 := @parameter1: groovy.lang.Closure;

     label1:
        $r1 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r4);

        r2 = r4;

        r4 = null;

        virtualinvoke r2.<java.io.InputStream: void close()>();

     label2:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeInputStreamWithWarning(java.io.InputStream)>(null);

        return $r1;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeInputStreamWithWarning(java.io.InputStream)>(r4);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.util.List readLines(java.io.InputStream) throws java.io.IOException
    {
        java.util.List $r3;
        java.io.BufferedReader $r0;
        java.io.InputStreamReader $r1;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List readLines(java.io.Reader)>($r0);

        return $r3;
    }

    public static java.lang.Object withReader(java.net.URL, groovy.lang.Closure) throws java.io.IOException
    {
        java.net.URL r0;
        java.net.URLConnection $r1;
        groovy.lang.Closure r3;
        java.lang.Object $r4;
        java.io.InputStream $r2;

        r0 := @parameter0: java.net.URL;

        r3 := @parameter1: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<java.net.URL: java.net.URLConnection openConnection()>();

        $r2 = virtualinvoke $r1.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withReader(java.io.InputStream,groovy.lang.Closure)>($r2, r3);

        return $r4;
    }

    public static java.lang.Object withReader(java.net.URL, java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        java.net.URL r0;
        java.net.URLConnection $r1;
        groovy.lang.Closure r4;
        java.lang.Object $r5;
        java.lang.String r3;
        java.io.InputStream $r2;

        r0 := @parameter0: java.net.URL;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<java.net.URL: java.net.URLConnection openConnection()>();

        $r2 = virtualinvoke $r1.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withReader(java.io.InputStream,java.lang.String,groovy.lang.Closure)>($r2, r3, r4);

        return $r5;
    }

    public static java.lang.Object withReader(java.io.InputStream, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r2;
        java.lang.Object $r3;
        java.io.InputStreamReader $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: groovy.lang.Closure;

        $r0 = new java.io.InputStreamReader;

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withReader(java.io.Reader,groovy.lang.Closure)>($r0, r2);

        return $r3;
    }

    public static java.lang.Object withReader(java.io.InputStream, java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r3;
        java.lang.Object $r4;
        java.lang.String r2;
        java.io.InputStreamReader $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: groovy.lang.Closure;

        $r0 = new java.io.InputStreamReader;

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r1, r2);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withReader(java.io.Reader,groovy.lang.Closure)>($r0, r3);

        return $r4;
    }

    public static java.lang.Object withWriter(java.io.OutputStream, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.io.OutputStreamWriter $r0;
        groovy.lang.Closure r2;
        java.lang.Object $r3;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: groovy.lang.Closure;

        $r0 = new java.io.OutputStreamWriter;

        specialinvoke $r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withWriter(java.io.Writer,groovy.lang.Closure)>($r0, r2);

        return $r3;
    }

    public static java.lang.Object withWriter(java.io.OutputStream, java.lang.String, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.io.OutputStreamWriter $r0;
        groovy.lang.Closure r3;
        java.lang.Object $r4;
        java.lang.String r2;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: groovy.lang.Closure;

        $r0 = new java.io.OutputStreamWriter;

        specialinvoke $r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r1, r2);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object withWriter(java.io.Writer,groovy.lang.Closure)>($r0, r3);

        return $r4;
    }

    public static java.lang.Object withStream(java.io.OutputStream, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.OutputStream r2, r4;
        java.lang.Throwable $r3;
        groovy.lang.Closure r0;
        java.lang.Object $r1;

        r4 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: groovy.lang.Closure;

     label1:
        $r1 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r4);

        virtualinvoke r4.<java.io.OutputStream: void flush()>();

        r2 = r4;

        r4 = null;

        virtualinvoke r2.<java.io.OutputStream: void close()>();

     label2:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeOutputStreamWithWarning(java.io.OutputStream)>(null);

        return $r1;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeOutputStreamWithWarning(java.io.OutputStream)>(r4);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.io.BufferedInputStream newInputStream(java.io.File) throws java.io.FileNotFoundException
    {
        java.io.BufferedInputStream $r0;
        java.io.FileInputStream $r1;
        java.io.File r2;

        r2 := @parameter0: java.io.File;

        $r0 = new java.io.BufferedInputStream;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);

        return $r0;
    }

    public static java.io.BufferedInputStream newInputStream(java.net.URL) throws java.net.MalformedURLException, java.io.IOException
    {
        java.io.BufferedInputStream $r0;
        java.net.URL r1;
        java.net.URLConnection $r2;
        java.io.InputStream $r3;

        r1 := @parameter0: java.net.URL;

        $r0 = new java.io.BufferedInputStream;

        $r2 = virtualinvoke r1.<java.net.URL: java.net.URLConnection openConnection()>();

        $r3 = virtualinvoke $r2.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r3);

        return $r0;
    }

    public static java.io.BufferedReader newReader(java.net.URL) throws java.net.MalformedURLException, java.io.IOException
    {
        java.net.URL r0;
        java.net.URLConnection $r1;
        java.io.BufferedReader $r3;
        java.io.InputStream $r2;

        r0 := @parameter0: java.net.URL;

        $r1 = virtualinvoke r0.<java.net.URL: java.net.URLConnection openConnection()>();

        $r2 = virtualinvoke $r1.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedReader newReader(java.io.InputStream)>($r2);

        return $r3;
    }

    public static java.io.BufferedReader newReader(java.net.URL, java.lang.String) throws java.net.MalformedURLException, java.io.IOException
    {
        java.net.URL r2;
        java.net.URLConnection $r3;
        java.io.BufferedReader $r0;
        java.lang.String r5;
        java.io.InputStreamReader $r1;
        java.io.InputStream $r4;

        r2 := @parameter0: java.net.URL;

        r5 := @parameter1: java.lang.String;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        $r3 = virtualinvoke r2.<java.net.URL: java.net.URLConnection openConnection()>();

        $r4 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r4, r5);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        return $r0;
    }

    public static java.io.DataInputStream newDataInputStream(java.io.File) throws java.io.FileNotFoundException
    {
        java.io.DataInputStream $r0;
        java.io.FileInputStream $r1;
        java.io.File r2;

        r2 := @parameter0: java.io.File;

        $r0 = new java.io.DataInputStream;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r1);

        return $r0;
    }

    public static void eachByte(java.io.File, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r2;
        java.io.BufferedInputStream $r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedInputStream newInputStream(java.io.File)>(r0);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void eachByte(java.io.InputStream,groovy.lang.Closure)>($r1, r2);

        return;
    }

    public static void eachByte(java.lang.Byte[], groovy.lang.Closure)
    {
        groovy.lang.Closure r1;
        java.lang.Byte[] r0;

        r0 := @parameter0: java.lang.Byte[];

        r1 := @parameter1: groovy.lang.Closure;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object each(java.lang.Object,groovy.lang.Closure)>(r0, r1);

        return;
    }

    public static void eachByte(byte[], groovy.lang.Closure)
    {
        byte[] r0;
        groovy.lang.Closure r1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: groovy.lang.Closure;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object each(java.lang.Object,groovy.lang.Closure)>(r0, r1);

        return;
    }

    public static void eachByte(java.io.InputStream, groovy.lang.Closure) throws java.io.IOException
    {
        java.lang.Throwable $r2;
        groovy.lang.Closure r0;
        byte $b1;
        int $i0, $i3;
        java.lang.Byte $r5;
        java.io.InputStream r3, r4;

        r3 := @parameter0: java.io.InputStream;

        r0 := @parameter1: groovy.lang.Closure;

     label1:
        $i0 = virtualinvoke r3.<java.io.InputStream: int read()>();

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        goto label3;

     label2:
        $r5 = new java.lang.Byte;

        $b1 = (byte) $i0;

        specialinvoke $r5.<java.lang.Byte: void <init>(byte)>($b1);

        virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r5);

        goto label1;

     label3:
        r4 = r3;

        r3 = null;

        virtualinvoke r4.<java.io.InputStream: void close()>();

     label4:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeInputStreamWithWarning(java.io.InputStream)>(null);

        goto label7;

     label5:
        $r2 := @caughtexception;

     label6:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeInputStreamWithWarning(java.io.InputStream)>(r3);

        throw $r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void eachByte(java.net.URL, groovy.lang.Closure) throws java.io.IOException
    {
        java.net.URL r0;
        java.net.URLConnection $r1;
        groovy.lang.Closure r3;
        java.io.InputStream $r2;

        r0 := @parameter0: java.net.URL;

        r3 := @parameter1: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<java.net.URL: java.net.URLConnection openConnection()>();

        $r2 = virtualinvoke $r1.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void eachByte(java.io.InputStream,groovy.lang.Closure)>($r2, r3);

        return;
    }

    public static void transformChar(java.io.Reader, java.io.Writer, groovy.lang.Closure) throws java.io.IOException
    {
        java.lang.Throwable $r7;
        groovy.lang.Closure r3;
        char $c1;
        java.io.Reader r2, r8;
        int $i0, $i3;
        java.io.Writer r1, r9;
        char[] r0;
        java.lang.Object $r5;
        java.lang.String $r6, $r10;

        r8 := @parameter0: java.io.Reader;

        r9 := @parameter1: java.io.Writer;

        r3 := @parameter2: groovy.lang.Closure;

     label1:
        r0 = newarray (char)[1];

     label2:
        $i0 = virtualinvoke r8.<java.io.Reader: int read()>();

        $i3 = (int) -1;

        if $i0 == $i3 goto label3;

        $c1 = (char) $i0;

        r0[0] = $c1;

        $r10 = new java.lang.String;

        specialinvoke $r10.<java.lang.String: void <init>(char[])>(r0);

        $r5 = virtualinvoke r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r10);

        $r6 = (java.lang.String) $r5;

        virtualinvoke r9.<java.io.Writer: void write(java.lang.String)>($r6);

        goto label2;

     label3:
        virtualinvoke r9.<java.io.Writer: void flush()>();

        r1 = r9;

        r9 = null;

        virtualinvoke r1.<java.io.Writer: void close()>();

        r2 = r8;

        r8 = null;

        virtualinvoke r2.<java.io.Reader: void close()>();

     label4:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(null);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(null);

        goto label7;

     label5:
        $r7 := @caughtexception;

     label6:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(r8);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(r9);

        throw $r7;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void transformLine(java.io.Reader, java.io.Writer, groovy.lang.Closure) throws java.io.IOException
    {
        java.lang.Throwable $r7;
        java.io.BufferedWriter $r1;
        groovy.lang.Closure r4;
        java.io.Reader r3, r8;
        java.io.Writer r9, r10;
        java.lang.Object $r5;
        java.io.BufferedReader $r0;
        java.lang.String $r2, $r6;

        r8 := @parameter0: java.io.Reader;

        r9 := @parameter1: java.io.Writer;

        r4 := @parameter2: groovy.lang.Closure;

        $r0 = new java.io.BufferedReader;

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>(r8);

        $r1 = new java.io.BufferedWriter;

        specialinvoke $r1.<java.io.BufferedWriter: void <init>(java.io.Writer)>(r9);

     label1:
        $r2 = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r2 == null goto label3;

        $r5 = virtualinvoke r4.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r2);

        if $r5 == null goto label2;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.BufferedWriter: void write(java.lang.String)>($r6);

        virtualinvoke $r1.<java.io.BufferedWriter: void newLine()>();

     label2:
        goto label1;

     label3:
        virtualinvoke $r1.<java.io.BufferedWriter: void flush()>();

        r10 = r9;

        r9 = null;

        virtualinvoke r10.<java.io.Writer: void close()>();

        r3 = r8;

        r8 = null;

        virtualinvoke r3.<java.io.Reader: void close()>();

     label4:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>($r0);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(null);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>($r1);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(null);

        goto label7;

     label5:
        $r7 := @caughtexception;

     label6:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>($r0);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(r8);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>($r1);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(r9);

        throw $r7;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void filterLine(java.io.Reader, java.io.Writer, groovy.lang.Closure) throws java.io.IOException
    {
        java.lang.Throwable $r6;
        java.io.BufferedWriter $r1;
        groovy.lang.Closure r4;
        java.io.Reader r3, r7;
        java.io.Writer r2, r8;
        java.lang.Object $r5;
        java.io.BufferedReader $r0;
        java.lang.String $r9;
        boolean $z0;

        r7 := @parameter0: java.io.Reader;

        r8 := @parameter1: java.io.Writer;

        r4 := @parameter2: groovy.lang.Closure;

        $r0 = new java.io.BufferedReader;

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>(r7);

        $r1 = new java.io.BufferedWriter;

        specialinvoke $r1.<java.io.BufferedWriter: void <init>(java.io.Writer)>(r8);

     label1:
        $r9 = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r9 == null goto label2;

        $r5 = virtualinvoke r4.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r9);

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<java.io.BufferedWriter: void write(java.lang.String)>($r9);

        virtualinvoke $r1.<java.io.BufferedWriter: void newLine()>();

        goto label1;

     label2:
        virtualinvoke $r1.<java.io.BufferedWriter: void flush()>();

        r2 = r8;

        r8 = null;

        virtualinvoke r2.<java.io.Writer: void close()>();

        r3 = r7;

        r7 = null;

        virtualinvoke r3.<java.io.Reader: void close()>();

     label3:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>($r0);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(null);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>($r1);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(null);

        goto label6;

     label4:
        $r6 := @caughtexception;

     label5:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>($r0);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeReaderWithWarning(java.io.Reader)>(r7);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>($r1);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeWriterWithWarning(java.io.Writer)>(r8);

        throw $r6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static groovy.lang.Writable filterLine(java.io.File, groovy.lang.Closure) throws java.io.IOException
    {
        groovy.lang.Closure r2;
        java.io.BufferedReader $r1;
        java.io.File r0;
        groovy.lang.Writable $r3;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedReader newReader(java.io.File)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: groovy.lang.Writable filterLine(java.io.Reader,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static void filterLine(java.io.File, java.io.Writer, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.Writer r2;
        groovy.lang.Closure r3;
        java.io.BufferedReader $r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.Writer;

        r3 := @parameter2: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedReader newReader(java.io.File)>(r0);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void filterLine(java.io.Reader,java.io.Writer,groovy.lang.Closure)>($r1, r2, r3);

        return;
    }

    public static groovy.lang.Writable filterLine(java.io.Reader, groovy.lang.Closure)
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods$4 $r2;
        groovy.lang.Closure r3;
        java.io.BufferedReader $r0;
        java.io.Reader r1;

        r1 := @parameter0: java.io.Reader;

        r3 := @parameter1: groovy.lang.Closure;

        $r0 = new java.io.BufferedReader;

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>(r1);

        $r2 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$4;

        specialinvoke $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethods$4: void <init>(java.io.BufferedReader,groovy.lang.Closure)>($r0, r3);

        return $r2;
    }

    public static groovy.sql.GroovyRowResult toRowResult(java.sql.ResultSet) throws java.sql.SQLException
    {
        groovy.sql.GroovyRowResult $r3;
        java.util.LinkedHashMap $r2;
        java.sql.ResultSet r0;
        int $i0, $i1, i2;
        java.lang.Object $r5;
        java.lang.String $r4;
        java.sql.ResultSetMetaData $r1;

        r0 := @parameter0: java.sql.ResultSet;

        $r1 = interfaceinvoke r0.<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()>();

        $r2 = new java.util.LinkedHashMap;

        $i0 = interfaceinvoke $r1.<java.sql.ResultSetMetaData: int getColumnCount()>();

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>(int,float)>($i0, 1.0F);

        i2 = 1;

     label1:
        $i1 = interfaceinvoke $r1.<java.sql.ResultSetMetaData: int getColumnCount()>();

        if i2 > $i1 goto label2;

        $r4 = interfaceinvoke $r1.<java.sql.ResultSetMetaData: java.lang.String getColumnName(int)>(i2);

        $r5 = interfaceinvoke r0.<java.sql.ResultSet: java.lang.Object getObject(int)>(i2);

        virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = new groovy.sql.GroovyRowResult;

        specialinvoke $r3.<groovy.sql.GroovyRowResult: void <init>(java.util.LinkedHashMap)>($r2);

        return $r3;
    }

    public static groovy.lang.Writable filterLine(java.io.InputStream, groovy.lang.Closure)
    {
        groovy.lang.Closure r2;
        java.io.BufferedReader $r1;
        groovy.lang.Writable $r3;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r2 := @parameter1: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedReader newReader(java.io.InputStream)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: groovy.lang.Writable filterLine(java.io.Reader,groovy.lang.Closure)>($r1, r2);

        return $r3;
    }

    public static void filterLine(java.io.InputStream, java.io.Writer, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.Writer r2;
        groovy.lang.Closure r3;
        java.io.BufferedReader $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.Writer;

        r3 := @parameter2: groovy.lang.Closure;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.BufferedReader newReader(java.io.InputStream)>(r0);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void filterLine(java.io.Reader,java.io.Writer,groovy.lang.Closure)>($r1, r2, r3);

        return;
    }

    public static byte[] readBytes(java.io.File) throws java.io.IOException
    {
        java.lang.Throwable $r10;
        byte[] r1;
        java.io.DataInputStream $r3, r17;
        long $l0;
        java.lang.StringBuffer $r5, $r7, $r8, $r12, $r14, $r15;
        int $i1;
        java.lang.String $r9, $r16;
        java.io.IOException $r4, $r11;
        java.io.FileInputStream $r2;
        java.util.logging.Logger $r6, $r13;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        $i1 = (int) $l0;

        r1 = newarray (byte)[$i1];

        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        $r3 = new java.io.DataInputStream;

        specialinvoke $r3.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r2);

        r17 = $r3;

     label01:
        virtualinvoke $r3.<java.io.DataInputStream: void readFully(byte[])>(r1);

        r17 = null;

        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label02:
        if null == null goto label12;

     label03:
        virtualinvoke r17.<java.io.DataInputStream: void close()>();

     label04:
        goto label12;

     label05:
        $r11 := @caughtexception;

        $r13 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.logging.Logger LOG>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught exception closing DataInputStream: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r13.<java.util.logging.Logger: void warning(java.lang.String)>($r16);

        goto label12;

     label06:
        $r10 := @caughtexception;

     label07:
        if r17 == null goto label11;

     label08:
        virtualinvoke r17.<java.io.DataInputStream: void close()>();

     label09:
        goto label11;

     label10:
        $r4 := @caughtexception;

        $r6 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.logging.Logger LOG>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught exception closing DataInputStream: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void warning(java.lang.String)>($r9);

     label11:
        throw $r10;

     label12:
        return r1;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public static java.lang.Object withStreams(java.net.Socket, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.OutputStream $r2, r8;
        java.lang.Throwable $r6;
        java.net.Socket r0;
        java.lang.Object[] $r4;
        groovy.lang.Closure r3;
        java.lang.Object $r5;
        java.io.InputStream $r1, r7;

        r0 := @parameter0: java.net.Socket;

        r3 := @parameter1: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<java.net.Socket: java.io.InputStream getInputStream()>();

        r7 = $r1;

        $r2 = virtualinvoke r0.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        r8 = $r2;

     label1:
        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = $r1;

        $r4[1] = $r2;

        $r5 = virtualinvoke r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r4);

        r7 = null;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        r8 = null;

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

     label2:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeInputStreamWithWarning(java.io.InputStream)>(null);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeOutputStreamWithWarning(java.io.OutputStream)>(null);

        return $r5;

     label3:
        $r6 := @caughtexception;

     label4:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeInputStreamWithWarning(java.io.InputStream)>(r7);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeOutputStreamWithWarning(java.io.OutputStream)>(r8);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.lang.Object withObjectStreams(java.net.Socket, groovy.lang.Closure) throws java.io.IOException
    {
        java.io.OutputStream $r2, r10;
        java.lang.Throwable $r8;
        java.net.Socket r0;
        java.lang.Object[] $r6;
        java.io.ObjectInputStream $r4, r12;
        groovy.lang.Closure r5;
        java.io.ObjectOutputStream $r3, r11;
        java.lang.Object $r7;
        java.io.InputStream $r1, r9;

        r0 := @parameter0: java.net.Socket;

        r5 := @parameter1: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<java.net.Socket: java.io.InputStream getInputStream()>();

        r9 = $r1;

        $r2 = virtualinvoke r0.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        r10 = $r2;

        $r3 = new java.io.ObjectOutputStream;

        specialinvoke $r3.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r2);

        r11 = $r3;

        $r4 = new java.io.ObjectInputStream;

        specialinvoke $r4.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r1);

        r12 = $r4;

     label1:
        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = $r4;

        $r6[1] = $r3;

        $r7 = virtualinvoke r5.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r6);

        r12 = null;

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        r9 = null;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        r11 = null;

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

        r10 = null;

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

     label2:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeInputStreamWithWarning(java.io.InputStream)>(null);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeInputStreamWithWarning(java.io.InputStream)>(null);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeOutputStreamWithWarning(java.io.OutputStream)>(null);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeOutputStreamWithWarning(java.io.OutputStream)>(null);

        return $r7;

     label3:
        $r8 := @caughtexception;

     label4:
        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeInputStreamWithWarning(java.io.InputStream)>(r12);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeInputStreamWithWarning(java.io.InputStream)>(r9);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeOutputStreamWithWarning(java.io.OutputStream)>(r11);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeOutputStreamWithWarning(java.io.OutputStream)>(r10);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static void closeInputStreamWithWarning(java.io.InputStream)
    {
        java.lang.StringBuffer $r2, $r4, $r5;
        java.io.IOException $r1;
        java.lang.String $r6;
        java.util.logging.Logger $r3;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        if r0 == null goto label4;

     label1:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r3 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.logging.Logger LOG>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught exception closing InputStream: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void warning(java.lang.String)>($r6);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void closeOutputStreamWithWarning(java.io.OutputStream)
    {
        java.io.OutputStream r0;
        java.lang.StringBuffer $r2, $r4, $r5;
        java.io.IOException $r1;
        java.lang.String $r6;
        java.util.logging.Logger $r3;

        r0 := @parameter0: java.io.OutputStream;

        if r0 == null goto label4;

     label1:
        virtualinvoke r0.<java.io.OutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r3 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.logging.Logger LOG>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught exception closing OutputStream: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void warning(java.lang.String)>($r6);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void closeReaderWithWarning(java.io.Reader)
    {
        java.lang.StringBuffer $r2, $r4, $r5;
        java.io.Reader r0;
        java.lang.String $r6;
        java.util.logging.Logger $r3;
        java.lang.Exception $r1;

        r0 := @parameter0: java.io.Reader;

        if r0 == null goto label4;

     label1:
        virtualinvoke r0.<java.io.Reader: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r3 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.logging.Logger LOG>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught exception closing Reader: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void warning(java.lang.String)>($r6);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static void closeWriterWithWarning(java.io.Writer)
    {
        java.lang.StringBuffer $r2, $r4, $r5;
        java.io.Writer r0;
        java.io.IOException $r1;
        java.lang.String $r6;
        java.util.logging.Logger $r3;

        r0 := @parameter0: java.io.Writer;

        if r0 == null goto label4;

     label1:
        virtualinvoke r0.<java.io.Writer: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r3 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.logging.Logger LOG>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught exception closing Writer: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void warning(java.lang.String)>($r6);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.io.Writer leftShift(java.net.Socket, java.lang.Object) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        java.net.Socket r0;
        java.io.Writer $r3;
        java.lang.Object r2;

        r0 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.Writer leftShift(java.io.OutputStream,java.lang.Object)>($r1, r2);

        return $r3;
    }

    public static java.io.OutputStream leftShift(java.net.Socket, byte[]) throws java.io.IOException
    {
        java.io.OutputStream $r1, $r3;
        byte[] r2;
        java.net.Socket r0;

        r0 := @parameter0: java.net.Socket;

        r2 := @parameter1: byte[];

        $r1 = virtualinvoke r0.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.OutputStream leftShift(java.io.OutputStream,byte[])>($r1, r2);

        return $r3;
    }

    public static java.net.Socket accept(java.net.ServerSocket, groovy.lang.Closure) throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.net.Socket $r1;
        java.lang.Thread $r2;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$5 $r3;
        groovy.lang.Closure r4;

        r0 := @parameter0: java.net.ServerSocket;

        r4 := @parameter1: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<java.net.ServerSocket: java.net.Socket accept()>();

        $r2 = new java.lang.Thread;

        $r3 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$5;

        specialinvoke $r3.<org.codehaus.groovy.runtime.DefaultGroovyMethods$5: void <init>(groovy.lang.Closure,java.net.Socket)>(r4, $r1);

        specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable)>($r3);

        virtualinvoke $r2.<java.lang.Thread: void start()>();

        return $r1;
    }

    public static java.io.File asWritable(java.io.File)
    {
        org.codehaus.groovy.runtime.WritableFile $r0;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        $r0 = new org.codehaus.groovy.runtime.WritableFile;

        specialinvoke $r0.<org.codehaus.groovy.runtime.WritableFile: void <init>(java.io.File)>(r1);

        return $r0;
    }

    public static java.lang.Object asType(java.io.File, java.lang.Class)
    {
        java.lang.Class r0, $r1, $r5;
        java.lang.Object $r3;
        java.io.File r2, $r4;

        r2 := @parameter0: java.io.File;

        r0 := @parameter1: java.lang.Class;

        $r1 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$groovy$lang$Writable>;

        if $r1 != null goto label1;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("groovy.lang.Writable");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$groovy$lang$Writable> = $r5;

        goto label2;

     label1:
        $r5 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$groovy$lang$Writable>;

     label2:
        if r0 != $r5 goto label3;

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.File asWritable(java.io.File)>(r2);

        return $r4;

     label3:
        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object asType(java.lang.Object,java.lang.Class)>(r2, r0);

        return $r3;
    }

    public static java.io.File asWritable(java.io.File, java.lang.String)
    {
        org.codehaus.groovy.runtime.WritableFile $r0;
        java.lang.String r2;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.codehaus.groovy.runtime.WritableFile;

        specialinvoke $r0.<org.codehaus.groovy.runtime.WritableFile: void <init>(java.io.File,java.lang.String)>(r1, r2);

        return $r0;
    }

    public static java.util.List toList(java.lang.String)
    {
        int $i0, $i1, i2;
        java.lang.String r0, $r2;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $i1 = i2 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i2, $i1);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public static char[] getChars(java.lang.String)
    {
        char[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        return $r1;
    }

    public static java.lang.Object asType(groovy.lang.GString, java.lang.Class)
    {
        groovy.lang.GString r2;
        java.lang.Class r0, $r1, $r6;
        java.lang.Object $r3;
        java.lang.String $r5;
        java.io.File $r4;

        r2 := @parameter0: groovy.lang.GString;

        r0 := @parameter1: java.lang.Class;

        $r1 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$io$File>;

        if $r1 != null goto label1;

        $r6 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.io.File");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$io$File> = $r6;

        goto label2;

     label1:
        $r6 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$io$File>;

     label2:
        if r0 != $r6 goto label3;

        $r4 = new java.io.File;

        $r5 = virtualinvoke r2.<groovy.lang.GString: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5);

        return $r4;

     label3:
        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object asType(java.lang.Object,java.lang.Class)>(r2, r0);

        return $r3;
    }

    public static java.lang.Object asType(java.lang.String, java.lang.Class)
    {
        java.lang.Float $r17;
        java.lang.Integer $r23;
        java.math.BigDecimal $r26;
        java.lang.Character $r19;
        java.lang.Long $r24;
        java.lang.Short $r22;
        java.math.BigInteger $r25;
        java.lang.Byte $r21;
        boolean $z0;
        java.util.List $r27;
        java.lang.Object[] $r14;
        java.lang.Double $r18;
        java.lang.String r12, $r20;
        java.io.File $r16;
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38;
        java.lang.Object $r13, $r15;

        r12 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        $r1 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$List>;

        if $r1 != null goto label01;

        $r28 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.util.List");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$List> = $r28;

        goto label02;

     label01:
        $r28 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$util$List>;

     label02:
        if r0 != $r28 goto label03;

        $r27 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List toList(java.lang.String)>(r12);

        return $r27;

     label03:
        $r2 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$math$BigDecimal>;

        if $r2 != null goto label04;

        $r29 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.math.BigDecimal");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$math$BigDecimal> = $r29;

        goto label05;

     label04:
        $r29 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$math$BigDecimal>;

     label05:
        if r0 != $r29 goto label06;

        $r26 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.math.BigDecimal toBigDecimal(java.lang.String)>(r12);

        return $r26;

     label06:
        $r3 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$math$BigInteger>;

        if $r3 != null goto label07;

        $r30 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.math.BigInteger");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$math$BigInteger> = $r30;

        goto label08;

     label07:
        $r30 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$math$BigInteger>;

     label08:
        if r0 != $r30 goto label09;

        $r25 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.math.BigInteger toBigInteger(java.lang.String)>(r12);

        return $r25;

     label09:
        $r4 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Long>;

        if $r4 != null goto label10;

        $r31 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Long> = $r31;

        goto label11;

     label10:
        $r31 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Long>;

     label11:
        if r0 != $r31 goto label12;

        $r24 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Long toLong(java.lang.String)>(r12);

        return $r24;

     label12:
        $r5 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Integer>;

        if $r5 != null goto label13;

        $r32 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Integer> = $r32;

        goto label14;

     label13:
        $r32 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Integer>;

     label14:
        if r0 != $r32 goto label15;

        $r23 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Integer toInteger(java.lang.String)>(r12);

        return $r23;

     label15:
        $r6 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Short>;

        if $r6 != null goto label16;

        $r33 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Short> = $r33;

        goto label17;

     label16:
        $r33 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Short>;

     label17:
        if r0 != $r33 goto label18;

        $r22 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Short toShort(java.lang.String)>(r12);

        return $r22;

     label18:
        $r7 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Byte>;

        if $r7 != null goto label19;

        $r34 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Byte> = $r34;

        goto label20;

     label19:
        $r34 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Byte>;

     label20:
        if r0 != $r34 goto label21;

        $r20 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>();

        $r21 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)>($r20);

        return $r21;

     label21:
        $r8 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Character>;

        if $r8 != null goto label22;

        $r35 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Character");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Character> = $r35;

        goto label23;

     label22:
        $r35 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Character>;

     label23:
        if r0 != $r35 goto label24;

        $r19 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Character toCharacter(java.lang.String)>(r12);

        return $r19;

     label24:
        $r9 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Double>;

        if $r9 != null goto label25;

        $r36 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Double> = $r36;

        goto label26;

     label25:
        $r36 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Double>;

     label26:
        if r0 != $r36 goto label27;

        $r18 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Double toDouble(java.lang.String)>(r12);

        return $r18;

     label27:
        $r10 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Float>;

        if $r10 != null goto label28;

        $r37 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Float> = $r37;

        goto label29;

     label28:
        $r37 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Float>;

     label29:
        if r0 != $r37 goto label30;

        $r17 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Float toFloat(java.lang.String)>(r12);

        return $r17;

     label30:
        $r11 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$io$File>;

        if $r11 != null goto label31;

        $r38 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.io.File");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$io$File> = $r38;

        goto label32;

     label31:
        $r38 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$io$File>;

     label32:
        if r0 != $r38 goto label33;

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>(r12);

        return $r16;

     label33:
        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean isEnumSubclass(java.lang.Object)>(r0);

        if $z0 == 0 goto label34;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r12;

        $r15 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r0, "valueOf", $r14);

        return $r15;

     label34:
        $r13 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object asType(java.lang.Object,java.lang.Class)>(r12, r0);

        return $r13;
    }

    public static java.io.InputStream getIn(java.lang.Process)
    {
        java.lang.Process r0;
        java.io.InputStream $r1;

        r0 := @parameter0: java.lang.Process;

        $r1 = virtualinvoke r0.<java.lang.Process: java.io.InputStream getInputStream()>();

        return $r1;
    }

    public static java.lang.String getText(java.lang.Process) throws java.io.IOException
    {
        java.lang.Process r2;
        java.io.BufferedReader $r0;
        java.lang.String $r4;
        java.io.InputStreamReader $r1;
        java.io.InputStream $r3;

        r2 := @parameter0: java.lang.Process;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        $r3 = virtualinvoke r2.<java.lang.Process: java.io.InputStream getInputStream()>();

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r3);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        $r4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getText(java.io.BufferedReader)>($r0);

        return $r4;
    }

    public static java.io.InputStream getErr(java.lang.Process)
    {
        java.lang.Process r0;
        java.io.InputStream $r1;

        r0 := @parameter0: java.lang.Process;

        $r1 = virtualinvoke r0.<java.lang.Process: java.io.InputStream getErrorStream()>();

        return $r1;
    }

    public static java.io.OutputStream getOut(java.lang.Process)
    {
        java.io.OutputStream $r1;
        java.lang.Process r0;

        r0 := @parameter0: java.lang.Process;

        $r1 = virtualinvoke r0.<java.lang.Process: java.io.OutputStream getOutputStream()>();

        return $r1;
    }

    public static java.io.Writer leftShift(java.lang.Process, java.lang.Object) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        java.lang.Process r0;
        java.io.Writer $r3;
        java.lang.Object r2;

        r0 := @parameter0: java.lang.Process;

        r2 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Process: java.io.OutputStream getOutputStream()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.Writer leftShift(java.io.OutputStream,java.lang.Object)>($r1, r2);

        return $r3;
    }

    public static java.io.OutputStream leftShift(java.lang.Process, byte[]) throws java.io.IOException
    {
        java.io.OutputStream $r1, $r3;
        byte[] r2;
        java.lang.Process r0;

        r0 := @parameter0: java.lang.Process;

        r2 := @parameter1: byte[];

        $r1 = virtualinvoke r0.<java.lang.Process: java.io.OutputStream getOutputStream()>();

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.OutputStream leftShift(java.io.OutputStream,byte[])>($r1, r2);

        return $r3;
    }

    public static void waitForOrKill(java.lang.Process, long)
    {
        java.lang.Process r1;
        java.lang.Thread $r2;
        long l0;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$ProcessRunner $r0;

        r1 := @parameter0: java.lang.Process;

        l0 := @parameter1: long;

        $r0 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$ProcessRunner;

        specialinvoke $r0.<org.codehaus.groovy.runtime.DefaultGroovyMethods$ProcessRunner: void <init>(java.lang.Process)>(r1);

        $r2 = new java.lang.Thread;

        specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable)>($r0);

        virtualinvoke $r2.<java.lang.Thread: void start()>();

        virtualinvoke $r0.<org.codehaus.groovy.runtime.DefaultGroovyMethods$ProcessRunner: void waitForOrKill(long)>(l0);

        return;
    }

    public static void consumeProcessOutput(java.lang.Process)
    {
        java.lang.Process r0;

        r0 := @parameter0: java.lang.Process;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void consumeProcessOutput(java.lang.Process,java.io.OutputStream,java.io.OutputStream)>(r0, null, null);

        return;
    }

    public static void consumeProcessOutput(java.lang.Process, java.lang.StringBuffer, java.lang.StringBuffer)
    {
        java.lang.Process r0;
        java.lang.StringBuffer r1, r2;

        r0 := @parameter0: java.lang.Process;

        r1 := @parameter1: java.lang.StringBuffer;

        r2 := @parameter2: java.lang.StringBuffer;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void consumeProcessOutputStream(java.lang.Process,java.lang.StringBuffer)>(r0, r1);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void consumeProcessErrorStream(java.lang.Process,java.lang.StringBuffer)>(r0, r2);

        return;
    }

    public static void consumeProcessOutput(java.lang.Process, java.io.OutputStream, java.io.OutputStream)
    {
        java.io.OutputStream r1, r2;
        java.lang.Process r0;

        r0 := @parameter0: java.lang.Process;

        r1 := @parameter1: java.io.OutputStream;

        r2 := @parameter2: java.io.OutputStream;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void consumeProcessOutputStream(java.lang.Process,java.io.OutputStream)>(r0, r1);

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void consumeProcessErrorStream(java.lang.Process,java.io.OutputStream)>(r0, r2);

        return;
    }

    public static void consumeProcessErrorStream(java.lang.Process, java.lang.StringBuffer)
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods$TextDumper $r1;
        java.lang.Process r2;
        java.lang.StringBuffer r4;
        java.lang.Thread $r0;
        java.io.InputStream $r3;

        r2 := @parameter0: java.lang.Process;

        r4 := @parameter1: java.lang.StringBuffer;

        $r0 = new java.lang.Thread;

        $r1 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$TextDumper;

        $r3 = virtualinvoke r2.<java.lang.Process: java.io.InputStream getErrorStream()>();

        specialinvoke $r1.<org.codehaus.groovy.runtime.DefaultGroovyMethods$TextDumper: void <init>(java.io.InputStream,java.lang.StringBuffer)>($r3, r4);

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable)>($r1);

        virtualinvoke $r0.<java.lang.Thread: void start()>();

        return;
    }

    public static void consumeProcessErrorStream(java.lang.Process, java.io.OutputStream)
    {
        java.io.OutputStream r4;
        java.lang.Process r2;
        java.lang.Thread $r0;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$ByteDumper $r1;
        java.io.InputStream $r3;

        r2 := @parameter0: java.lang.Process;

        r4 := @parameter1: java.io.OutputStream;

        $r0 = new java.lang.Thread;

        $r1 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$ByteDumper;

        $r3 = virtualinvoke r2.<java.lang.Process: java.io.InputStream getErrorStream()>();

        specialinvoke $r1.<org.codehaus.groovy.runtime.DefaultGroovyMethods$ByteDumper: void <init>(java.io.InputStream,java.io.OutputStream)>($r3, r4);

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable)>($r1);

        virtualinvoke $r0.<java.lang.Thread: void start()>();

        return;
    }

    public static void consumeProcessErrorStream(java.lang.Process, java.io.Writer)
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods$TextDumper $r1;
        java.lang.Process r2;
        java.lang.Thread $r0;
        java.io.Writer r4;
        java.io.InputStream $r3;

        r2 := @parameter0: java.lang.Process;

        r4 := @parameter1: java.io.Writer;

        $r0 = new java.lang.Thread;

        $r1 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$TextDumper;

        $r3 = virtualinvoke r2.<java.lang.Process: java.io.InputStream getErrorStream()>();

        specialinvoke $r1.<org.codehaus.groovy.runtime.DefaultGroovyMethods$TextDumper: void <init>(java.io.InputStream,java.io.Writer)>($r3, r4);

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable)>($r1);

        virtualinvoke $r0.<java.lang.Thread: void start()>();

        return;
    }

    public static void consumeProcessOutputStream(java.lang.Process, java.lang.StringBuffer)
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods$TextDumper $r1;
        java.lang.Process r2;
        java.lang.StringBuffer r4;
        java.lang.Thread $r0;
        java.io.InputStream $r3;

        r2 := @parameter0: java.lang.Process;

        r4 := @parameter1: java.lang.StringBuffer;

        $r0 = new java.lang.Thread;

        $r1 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$TextDumper;

        $r3 = virtualinvoke r2.<java.lang.Process: java.io.InputStream getInputStream()>();

        specialinvoke $r1.<org.codehaus.groovy.runtime.DefaultGroovyMethods$TextDumper: void <init>(java.io.InputStream,java.lang.StringBuffer)>($r3, r4);

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable)>($r1);

        virtualinvoke $r0.<java.lang.Thread: void start()>();

        return;
    }

    public static void consumeProcessOutputStream(java.lang.Process, java.io.OutputStream)
    {
        java.io.OutputStream r4;
        java.lang.Process r2;
        java.lang.Thread $r0;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$ByteDumper $r1;
        java.io.InputStream $r3;

        r2 := @parameter0: java.lang.Process;

        r4 := @parameter1: java.io.OutputStream;

        $r0 = new java.lang.Thread;

        $r1 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$ByteDumper;

        $r3 = virtualinvoke r2.<java.lang.Process: java.io.InputStream getInputStream()>();

        specialinvoke $r1.<org.codehaus.groovy.runtime.DefaultGroovyMethods$ByteDumper: void <init>(java.io.InputStream,java.io.OutputStream)>($r3, r4);

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable)>($r1);

        virtualinvoke $r0.<java.lang.Thread: void start()>();

        return;
    }

    public static void consumeProcessOutputStream(java.lang.Process, java.io.Writer)
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods$TextDumper $r1;
        java.lang.Process r2;
        java.lang.Thread $r0;
        java.io.Writer r4;
        java.io.InputStream $r3;

        r2 := @parameter0: java.lang.Process;

        r4 := @parameter1: java.io.Writer;

        $r0 = new java.lang.Thread;

        $r1 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$TextDumper;

        $r3 = virtualinvoke r2.<java.lang.Process: java.io.InputStream getInputStream()>();

        specialinvoke $r1.<org.codehaus.groovy.runtime.DefaultGroovyMethods$TextDumper: void <init>(java.io.InputStream,java.io.Writer)>($r3, r4);

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable)>($r1);

        virtualinvoke $r0.<java.lang.Thread: void start()>();

        return;
    }

    public static void withWriter(java.lang.Process, groovy.lang.Closure)
    {
        java.lang.Process r2;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$6 $r1;
        java.lang.Thread $r0;
        groovy.lang.Closure r3;

        r2 := @parameter0: java.lang.Process;

        r3 := @parameter1: groovy.lang.Closure;

        $r0 = new java.lang.Thread;

        $r1 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$6;

        specialinvoke $r1.<org.codehaus.groovy.runtime.DefaultGroovyMethods$6: void <init>(java.lang.Process,groovy.lang.Closure)>(r2, r3);

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable)>($r1);

        virtualinvoke $r0.<java.lang.Thread: void start()>();

        return;
    }

    public static void withOutputStream(java.lang.Process, groovy.lang.Closure)
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods$7 $r1;
        java.lang.Process r2;
        java.lang.Thread $r0;
        groovy.lang.Closure r3;

        r2 := @parameter0: java.lang.Process;

        r3 := @parameter1: groovy.lang.Closure;

        $r0 = new java.lang.Thread;

        $r1 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$7;

        specialinvoke $r1.<org.codehaus.groovy.runtime.DefaultGroovyMethods$7: void <init>(java.lang.Process,groovy.lang.Closure)>(r2, r3);

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable)>($r1);

        virtualinvoke $r0.<java.lang.Thread: void start()>();

        return;
    }

    public static java.lang.Process pipeTo(java.lang.Process, java.lang.Process) throws java.io.IOException
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods$8 $r1;
        java.lang.Process r2, r3;
        java.lang.Thread $r0;

        r2 := @parameter0: java.lang.Process;

        r3 := @parameter1: java.lang.Process;

        $r0 = new java.lang.Thread;

        $r1 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$8;

        specialinvoke $r1.<org.codehaus.groovy.runtime.DefaultGroovyMethods$8: void <init>(java.lang.Process,java.lang.Process)>(r2, r3);

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable)>($r1);

        virtualinvoke $r0.<java.lang.Thread: void start()>();

        return r3;
    }

    public static java.lang.Process or(java.lang.Process, java.lang.Process) throws java.io.IOException
    {
        java.lang.Process r0, r1, $r2;

        r0 := @parameter0: java.lang.Process;

        r1 := @parameter1: java.lang.Process;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Process pipeTo(java.lang.Process,java.lang.Process)>(r0, r1);

        return $r2;
    }

    public static void eachMatch(java.lang.String, java.lang.String, groovy.lang.Closure)
    {
        java.lang.Object[] $r6, $r7;
        groovy.lang.Closure r5;
        java.util.ArrayList $r4;
        java.util.regex.Matcher $r3;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String r0, r2, $r8;
        java.util.regex.Pattern $r1;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: groovy.lang.Closure;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r0);

        $r3 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

     label1:
        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label7;

        $i0 = virtualinvoke $r3.<java.util.regex.Matcher: int groupCount()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i4 = 0;

     label2:
        if i4 > $i0 goto label3;

        $r8 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(i4);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        i4 = i4 + 1;

        goto label2;

     label3:
        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i1 == 1 goto label4;

        $i2 = virtualinvoke r5.<groovy.lang.Closure: int getMaximumNumberOfParameters()>();

        $i3 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i2 >= $i3 goto label5;

     label4:
        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray()>();

        virtualinvoke r5.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r6);

        goto label6;

     label5:
        $r7 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray()>();

        virtualinvoke r5.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r7);

     label6:
        goto label1;

     label7:
        return;
    }

    public static java.util.regex.Matcher each(java.util.regex.Matcher, groovy.lang.Closure)
    {
        java.lang.Object[] $r3;
        groovy.lang.Closure r2;
        java.util.ArrayList $r1;
        java.util.regex.Matcher r0;
        int $i0, i1;
        java.lang.String $r4;
        boolean $z0;

        r0 := @parameter0: java.util.regex.Matcher;

        r2 := @parameter1: groovy.lang.Closure;

     label1:
        $z0 = virtualinvoke r0.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke r0.<java.util.regex.Matcher: int groupCount()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label2:
        if i1 > $i0 goto label3;

        $r4 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>(i1);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();

        virtualinvoke r2.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r3);

        goto label1;

     label4:
        return r0;
    }

    public static int findIndexOf(java.lang.Object, groovy.lang.Closure)
    {
        int $i0;
        groovy.lang.Closure r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: groovy.lang.Closure;

        $i0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int findIndexOf(java.lang.Object,int,groovy.lang.Closure)>(r0, 0, r1);

        return $i0;
    }

    public static int findIndexOf(java.lang.Object, int, groovy.lang.Closure)
    {
        java.util.Iterator $r1;
        groovy.lang.Closure r3;
        int i0, i1, i2, $i4;
        java.lang.Object r0, $r2, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r3 := @parameter2: groovy.lang.Closure;

        $i4 = (int) -1;

        i1 = $i4;

        i2 = 0;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        if i2 >= i0 goto label2;

        goto label3;

     label2:
        $r4 = virtualinvoke r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r2);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        i1 = i2;

        goto label4;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return i1;
    }

    public static int findLastIndexOf(java.lang.Object, groovy.lang.Closure)
    {
        int $i0;
        groovy.lang.Closure r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: groovy.lang.Closure;

        $i0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int findLastIndexOf(java.lang.Object,int,groovy.lang.Closure)>(r0, 0, r1);

        return $i0;
    }

    public static int findLastIndexOf(java.lang.Object, int, groovy.lang.Closure)
    {
        java.util.Iterator $r1;
        groovy.lang.Closure r3;
        int i0, i1, i2, $i4;
        java.lang.Object r0, $r2, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r3 := @parameter2: groovy.lang.Closure;

        $i4 = (int) -1;

        i1 = $i4;

        i2 = 0;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        if i2 >= i0 goto label2;

        goto label3;

     label2:
        $r4 = virtualinvoke r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r2);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        i1 = i2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return i1;
    }

    public static java.util.List findIndexValues(java.lang.Object, groovy.lang.Closure)
    {
        groovy.lang.Closure r1;
        java.lang.Object r0;
        java.util.List $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: groovy.lang.Closure;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.List findIndexValues(java.lang.Object,int,groovy.lang.Closure)>(r0, 0, r1);

        return $r2;
    }

    public static java.util.List findIndexValues(java.lang.Object, int, groovy.lang.Closure)
    {
        java.util.Iterator $r2;
        groovy.lang.Closure r4;
        java.lang.Integer $r6;
        java.util.ArrayList $r0;
        int i0, i1;
        java.lang.Object r1, $r3, $r5;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r4 := @parameter2: groovy.lang.Closure;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i1 = 0;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>(r1);

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if i1 >= i0 goto label2;

        goto label3;

     label2:
        $r5 = virtualinvoke r4.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r3);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

        $r6 = new java.lang.Integer;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(i1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return $r0;
    }

    public static java.lang.ClassLoader getRootLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        boolean $z0;

        r0 := @parameter0: java.lang.ClassLoader;

     label1:
        if r0 != null goto label2;

        return null;

     label2:
        $z0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: boolean isRootLoaderClassOrSubClass(java.lang.ClassLoader)>(r0);

        if $z0 == 0 goto label3;

        return r0;

     label3:
        r0 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label1;
    }

    private static boolean isRootLoaderClassOrSubClass(java.lang.ClassLoader)
    {
        java.lang.Class $r2, $r5, r7, $r8, $r9;
        java.lang.ClassLoader r0;
        java.lang.String $r1, $r3, $r4, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.ClassLoader;

        r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        $r1 = virtualinvoke r7.<java.lang.Class: java.lang.String getName()>();

        $r2 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Object>;

        if $r2 != null goto label2;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Object> = $r8;

        goto label3;

     label2:
        $r8 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$java$lang$Object>;

     label3:
        $r3 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label7;

        $r4 = virtualinvoke r7.<java.lang.Class: java.lang.String getName()>();

        $r5 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$org$codehaus$groovy$tools$RootLoader>;

        if $r5 != null goto label4;

        $r9 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.RootLoader");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$org$codehaus$groovy$tools$RootLoader> = $r9;

        goto label5;

     label4:
        $r9 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$org$codehaus$groovy$tools$RootLoader>;

     label5:
        $r6 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label6;

        return 1;

     label6:
        r7 = virtualinvoke r7.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label7:
        return 0;
    }

    public static java.lang.Object asType(java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0, $r2;
        java.lang.Class r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object newInstance(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeConstructorOf(java.lang.Class,java.lang.Object)>(r0, null);

        return $r1;
    }

    public static java.lang.Object newInstance(java.lang.Class, java.lang.Object[])
    {
        java.lang.Object[] $r2, r3;
        java.lang.Class r0;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Object[];

        if r3 != null goto label1;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = null;

        r3 = $r2;

     label1:
        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeConstructorOf(java.lang.Class,java.lang.Object)>(r0, r3);

        return $r1;
    }

    public static groovy.lang.MetaClass getMetaClass(java.lang.Class)
    {
        groovy.lang.MetaClass $r2, $r4, $r6;
        groovy.lang.ExpandoMetaClassCreationHandle $r3;
        groovy.lang.MetaClassRegistry $r0;
        java.lang.Class r1;
        groovy.lang.DelegatingMetaClass $r5;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.lang.Class;

        $r0 = staticinvoke <groovy.lang.GroovySystem: groovy.lang.MetaClassRegistry getMetaClassRegistry()>();

        $r2 = interfaceinvoke $r0.<groovy.lang.MetaClassRegistry: groovy.lang.MetaClass getMetaClass(java.lang.Class)>(r1);

        $z0 = $r2 instanceof groovy.lang.ExpandoMetaClass;

        if $z0 != 0 goto label1;

        $z1 = $r2 instanceof groovy.lang.DelegatingMetaClass;

        if $z1 == 0 goto label2;

        $r5 = (groovy.lang.DelegatingMetaClass) $r2;

        $r6 = virtualinvoke $r5.<groovy.lang.DelegatingMetaClass: groovy.lang.MetaClass getAdaptee()>();

        $z2 = $r6 instanceof groovy.lang.ExpandoMetaClass;

        if $z2 == 0 goto label2;

     label1:
        return $r2;

     label2:
        $r3 = <groovy.lang.ExpandoMetaClassCreationHandle: groovy.lang.ExpandoMetaClassCreationHandle instance>;

        $r4 = virtualinvoke $r3.<groovy.lang.ExpandoMetaClassCreationHandle: groovy.lang.MetaClass create(java.lang.Class,groovy.lang.MetaClassRegistry)>(r1, $r0);

        interfaceinvoke $r4.<groovy.lang.MetaClass: void initialize()>();

        interfaceinvoke $r0.<groovy.lang.MetaClassRegistry: void setMetaClass(java.lang.Class,groovy.lang.MetaClass)>(r1, $r4);

        return $r4;
    }

    public static groovy.lang.MetaClass getMetaClass(java.lang.Object)
    {
        groovy.lang.GroovyObject $r4;
        groovy.lang.MetaClass $r3, $r5;
        groovy.lang.MetaClassRegistry $r1;
        java.lang.Object r0;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof groovy.lang.GroovyObject;

        if $z0 == 0 goto label1;

        $r4 = (groovy.lang.GroovyObject) r0;

        $r5 = interfaceinvoke $r4.<groovy.lang.GroovyObject: groovy.lang.MetaClass getMetaClass()>();

        return $r5;

     label1:
        $r1 = staticinvoke <groovy.lang.GroovySystem: groovy.lang.MetaClassRegistry getMetaClassRegistry()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = interfaceinvoke $r1.<groovy.lang.MetaClassRegistry: groovy.lang.MetaClass getMetaClass(java.lang.Class)>($r2);

        return $r3;
    }

    public static java.util.Iterator iterator(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.Iterator $r2;
        java.util.Collection $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.util.Collection asCollection(java.lang.Object)>(r0);

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        return $r2;
    }

    public static java.util.Iterator iterator(java.util.Enumeration)
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods$9 $r0;
        java.util.Enumeration r1;

        r1 := @parameter0: java.util.Enumeration;

        $r0 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$9;

        specialinvoke $r0.<org.codehaus.groovy.runtime.DefaultGroovyMethods$9: void <init>(java.util.Enumeration)>(r1);

        return $r0;
    }

    public static java.util.Iterator iterator(org.w3c.dom.NodeList)
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods$10 $r0;
        org.w3c.dom.NodeList r1;

        r1 := @parameter0: org.w3c.dom.NodeList;

        $r0 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$10;

        specialinvoke $r0.<org.codehaus.groovy.runtime.DefaultGroovyMethods$10: void <init>(org.w3c.dom.NodeList)>(r1);

        return $r0;
    }

    public static java.util.Iterator iterator(java.util.regex.Matcher)
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods$11 $r0;
        java.util.regex.Matcher r1;

        r1 := @parameter0: java.util.regex.Matcher;

        $r0 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$11;

        specialinvoke $r0.<org.codehaus.groovy.runtime.DefaultGroovyMethods$11: void <init>(java.util.regex.Matcher)>(r1);

        return $r0;
    }

    public static java.util.Iterator iterator(java.io.Reader)
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethods$12 $r2;
        java.io.Reader r0;
        java.io.BufferedReader $r1, r3;
        boolean $z0;

        r0 := @parameter0: java.io.Reader;

        $z0 = r0 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label1;

        r3 = (java.io.BufferedReader) r0;

        goto label2;

     label1:
        $r1 = new java.io.BufferedReader;

        specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>(r0);

        r3 = $r1;

     label2:
        $r2 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$12;

        specialinvoke $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethods$12: void <init>(java.io.BufferedReader)>(r3);

        return $r2;
    }

    public static java.util.Iterator iterator(java.io.InputStream)
    {
        java.io.DataInputStream $r0;
        java.util.Iterator $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.DataInputStream;

        specialinvoke $r0.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.Iterator iterator(java.io.DataInputStream)>($r0);

        return $r2;
    }

    public static java.util.Iterator iterator(java.io.DataInputStream)
    {
        java.io.DataInputStream r1;
        org.codehaus.groovy.runtime.DefaultGroovyMethods$13 $r0;

        r1 := @parameter0: java.io.DataInputStream;

        $r0 = new org.codehaus.groovy.runtime.DefaultGroovyMethods$13;

        specialinvoke $r0.<org.codehaus.groovy.runtime.DefaultGroovyMethods$13: void <init>(java.io.DataInputStream)>(r1);

        return $r0;
    }

    public static java.util.Iterator iterator(java.io.File) throws java.io.IOException
    {
        groovy.lang.DeprecationException $r0;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        $r0 = new groovy.lang.DeprecationException;

        specialinvoke $r0.<groovy.lang.DeprecationException: void <init>(java.lang.String)>("Iterators on files are not supported any more. Use File.eachLine() instead. Alternatively you can use FileReader.iterator() and provide your own exception handling.");

        throw $r0;
    }

    public static java.util.Iterator iterator(java.util.Iterator)
    {
        java.util.Iterator r0;

        r0 := @parameter0: java.util.Iterator;

        return r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static char[] access$100()
    {
        char[] $r0;

        $r0 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: char[] T_TABLE>;

        return $r0;
    }

    static java.util.logging.Logger access$200()
    {
        java.util.logging.Logger $r0;

        $r0 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.logging.Logger LOG>;

        return $r0;
    }

    static void access$300(java.io.OutputStream)
    {
        java.io.OutputStream r0;

        r0 := @parameter0: java.io.OutputStream;

        staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: void closeOutputStreamWithWarning(java.io.OutputStream)>(r0);

        return;
    }

    static void <clinit>()
    {
        byte[] $r7;
        java.util.logging.Logger $r2;
        java.lang.Integer $r9;
        int $i1;
        char[] $r5;
        java.lang.Class $r0, $r8;
        java.lang.String $r1, $r4, $r6;

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String CHUNK_SEPARATOR> = "\r\n";

        $r0 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$org$codehaus$groovy$runtime$DefaultGroovyMethods>;

        if $r0 != null goto label1;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.DefaultGroovyMethods");

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$org$codehaus$groovy$runtime$DefaultGroovyMethods> = $r8;

        goto label2;

     label1:
        $r8 = <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Class class$org$codehaus$groovy$runtime$DefaultGroovyMethods>;

     label2:
        $r1 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.util.logging.Logger LOG> = $r2;

        $r9 = new java.lang.Integer;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>(1);

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Integer ONE> = $r9;

        $r4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

        $r5 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: char[] T_TABLE> = $r5;

        $r6 = "BBBBBBBBBBAABBABBBBBBBBBBBBBBBBBABBBBBBBBBB>BBB?456789:;<=BBB@BBB\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019BBBBBB\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&\'()*+,-./0123";

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: byte[] TRANSLATE_TABLE> = $r7;

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: int charBufferSize> = 4096;

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: int expectedLineLength> = 160;

        $i1 = (int) -1;

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: int EOF> = $i1;

        <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String lineSeparator> = null;

        return;
    }
}
