public class org.waveprotocol.wave.communication.json.RawStringData extends java.lang.Object
{
    private int numEntries;
    private int[] baseStringIndex;
    private java.lang.String serializedData;

    public void <init>()
    {
        org.waveprotocol.wave.communication.json.RawStringData r0;
        int[] $r1;

        r0 := @this: org.waveprotocol.wave.communication.json.RawStringData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.communication.json.RawStringData: int numEntries> = 0;

        $r1 = newarray (int)[2];

        $r1[0] = 0;

        $r1[1] = 0;

        r0.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex> = $r1;

        r0.<org.waveprotocol.wave.communication.json.RawStringData: java.lang.String serializedData> = "";

        return;
    }

    public void <init>(java.lang.String)
    {
        byte b1, $b11, $b12;
        int[] $r1, $r7, $r9;
        boolean $z0;
        java.lang.StringBuilder $r13, $r14, $r16;
        java.lang.String[] $r4;
        int $i2, $i3, $i4, $i5, i6, i9, $i10, $i13, $i14;
        java.lang.String r2, $r3, $r5, $r6, $r8, $r10, $r15;
        char $c0, $c7, $c8;
        org.waveprotocol.wave.communication.json.RawStringData r0;
        java.lang.IllegalArgumentException $r17;

        r0 := @this: org.waveprotocol.wave.communication.json.RawStringData;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.communication.json.RawStringData: int numEntries> = 0;

        $r1 = newarray (int)[2];

        $r1[0] = 0;

        $r1[1] = 0;

        r0.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex> = $r1;

        $c0 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);

        $i13 = (int) $c0;

        if $i13 != 91 goto label1;

        $b12 = 1;

        $b11 = 1;

        goto label2;

     label1:
        $b12 = 0;

        $b11 = 0;

     label2:
        b1 = $b11;

        i9 = $b12;

     label3:
        $i10 = virtualinvoke r2.<java.lang.String: int length()>();

        if i9 >= $i10 goto label5;

        $c7 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i9);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c7);

        if $z0 != 0 goto label4;

        $c8 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i9);

        $i14 = (int) $c8;

        if $i14 != 44 goto label5;

     label4:
        i9 = i9 + 1;

        goto label3;

     label5:
        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(b1, i9);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i2 = lengthof $r4;

        if $i2 == 3 goto label6;

        $r17 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing input string ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r17;

     label6:
        $r5 = $r4[0];

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        r0.<org.waveprotocol.wave.communication.json.RawStringData: int numEntries> = $i3;

        $r7 = r0.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex>;

        $r6 = $r4[1];

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r7[0] = $i4;

        $r9 = r0.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex>;

        $r8 = $r4[2];

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        $r9[1] = $i5;

        i6 = i9 + 1;

        $r10 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(i6);

        r0.<org.waveprotocol.wave.communication.json.RawStringData: java.lang.String serializedData> = $r10;

        return;
    }

    public java.lang.String serialize()
    {
        int[] $r6, $r9;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2;
        java.lang.String $r12, $r13, $r14;
        org.waveprotocol.wave.communication.json.RawStringData r3;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r10, $r11;

        r3 := @this: org.waveprotocol.wave.communication.json.RawStringData;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $i0 = r3.<org.waveprotocol.wave.communication.json.RawStringData: int numEntries>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r6 = r3.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex>;

        $i1 = $r6[0];

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r9 = r3.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex>;

        $i2 = $r9[1];

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(0, $r12);

        $r13 = r3.<org.waveprotocol.wave.communication.json.RawStringData: java.lang.String serializedData>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r14 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;
    }

    public java.lang.String addString(java.lang.String)
    {
        org.waveprotocol.wave.communication.json.RawStringData r0;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r1, r3, $r5, $r8, $r9;

        r0 := @this: org.waveprotocol.wave.communication.json.RawStringData;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.communication.json.RawStringData: java.lang.String serializedData>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        $r2[1] = $i2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<org.waveprotocol.wave.communication.json.RawStringData: java.lang.String serializedData>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.waveprotocol.wave.communication.json.RawStringData: java.lang.String serializedData> = $r8;

        $i3 = r0.<org.waveprotocol.wave.communication.json.RawStringData: int numEntries>;

        $i4 = $i3 + 1;

        r0.<org.waveprotocol.wave.communication.json.RawStringData: int numEntries> = $i4;

        $r9 = specialinvoke r0.<org.waveprotocol.wave.communication.json.RawStringData: java.lang.String convertToRef(int[])>($r2);

        return $r9;
    }

    public java.lang.String getString(java.lang.String)
    {
        int[] $r2;
        int $i0, $i1;
        java.lang.String r1, $r3, $r4;
        org.waveprotocol.wave.communication.json.RawStringData r0;

        r0 := @this: org.waveprotocol.wave.communication.json.RawStringData;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.communication.json.RawStringData: int[] convertToIndex(java.lang.String)>(r1);

        $r3 = r0.<org.waveprotocol.wave.communication.json.RawStringData: java.lang.String serializedData>;

        $i1 = $r2[0];

        $i0 = $r2[1];

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($i1, $i0);

        return $r4;
    }

    public void setBaseStringIndex(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.communication.json.RawStringData r0;
        int[] $r2;

        r0 := @this: org.waveprotocol.wave.communication.json.RawStringData;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.communication.json.RawStringData: int[] convertToIndex(java.lang.String)>(r1);

        r0.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex> = $r2;

        return;
    }

    public java.lang.String getBaseString()
    {
        int[] $r1;
        java.lang.String $r2, $r3;
        org.waveprotocol.wave.communication.json.RawStringData r0;

        r0 := @this: org.waveprotocol.wave.communication.json.RawStringData;

        $r1 = r0.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.communication.json.RawStringData: java.lang.String convertToRef(int[])>($r1);

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.communication.json.RawStringData: java.lang.String getString(java.lang.String)>($r2);

        return $r3;
    }

    public int size()
    {
        int $i0;
        org.waveprotocol.wave.communication.json.RawStringData r0;

        r0 := @this: org.waveprotocol.wave.communication.json.RawStringData;

        $i0 = r0.<org.waveprotocol.wave.communication.json.RawStringData: int numEntries>;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        int[] $r3, $r4, $r5, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String $r6, $r7;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.communication.json.RawStringData r1, r2;
        java.lang.Object r0;

        r2 := @this: org.waveprotocol.wave.communication.json.RawStringData;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.communication.json.RawStringData;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.waveprotocol.wave.communication.json.RawStringData) r0;

        $r3 = r2.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex>;

        $i1 = lengthof $r3;

        $r4 = r1.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex>;

        $i0 = lengthof $r4;

        if $i1 == $i0 goto label2;

        return 0;

     label2:
        i7 = 0;

     label3:
        $r5 = r2.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex>;

        $i2 = lengthof $r5;

        if i7 >= $i2 goto label5;

        $r8 = r2.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex>;

        $i6 = $r8[i7];

        $r9 = r1.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex>;

        $i5 = $r9[i7];

        if $i6 == $i5 goto label4;

        return 0;

     label4:
        i7 = i7 + 1;

        goto label3;

     label5:
        $i4 = r2.<org.waveprotocol.wave.communication.json.RawStringData: int numEntries>;

        $i3 = r1.<org.waveprotocol.wave.communication.json.RawStringData: int numEntries>;

        if $i4 != $i3 goto label6;

        $r7 = r2.<org.waveprotocol.wave.communication.json.RawStringData: java.lang.String serializedData>;

        $r6 = r1.<org.waveprotocol.wave.communication.json.RawStringData: java.lang.String serializedData>;

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        return $z2;
    }

    public int hashCode()
    {
        org.waveprotocol.wave.communication.json.RawStringData r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.communication.json.RawStringData;

        i4 = r0.<org.waveprotocol.wave.communication.json.RawStringData: int numEntries>;

        $i0 = i4 * 31;

        $r1 = r0.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex>;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        i5 = $i0 + $i1;

        $i2 = i5 * 31;

        $r2 = r0.<org.waveprotocol.wave.communication.json.RawStringData: java.lang.String serializedData>;

        $i3 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        i6 = $i2 + $i3;

        return i6;
    }

    private int[] convertToIndex(java.lang.String)
    {
        java.lang.String[] $r1;
        int[] $r3, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.String r0, $r5, $r6, $r11;
        org.waveprotocol.wave.communication.json.RawStringData r2;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r2 := @this: org.waveprotocol.wave.communication.json.RawStringData;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i1 = lengthof $r1;

        $r3 = r2.<org.waveprotocol.wave.communication.json.RawStringData: int[] baseStringIndex>;

        $i0 = lengthof $r3;

        if $i1 == $i0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input argument is not a index");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label1:
        $r4 = newarray (int)[2];

        $r5 = $r1[0];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $r4[0] = $i2;

        $r6 = $r1[1];

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r4[1] = $i3;

        return $r4;
    }

    private java.lang.String convertToRef(int[])
    {
        org.waveprotocol.wave.communication.json.RawStringData r6;
        int[] r1;
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r2, $r3, $r4;
        java.lang.String $r5;

        r6 := @this: org.waveprotocol.wave.communication.json.RawStringData;

        r1 := @parameter0: int[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = r1[0];

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i1 = r1[1];

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
