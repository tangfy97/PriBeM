public abstract class org.apache.batik.dom.AbstractAttr extends org.apache.batik.dom.AbstractParentNode implements org.w3c.dom.Attr
{
    protected java.lang.String nodeName;
    protected boolean unspecified;
    protected boolean isIdAttr;
    protected org.apache.batik.dom.AbstractElement ownerElement;
    protected org.w3c.dom.TypeInfo typeInfo;

    protected void <init>()
    {
        org.apache.batik.dom.AbstractAttr r0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode: void <init>()>();

        return;
    }

    protected void <init>(java.lang.String, org.apache.batik.dom.AbstractDocument) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r3;
        org.apache.batik.dom.AbstractAttr r0;
        org.w3c.dom.DOMException $r4;
        org.apache.batik.dom.AbstractDocument r1;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode: void <init>()>();

        r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument> = r1;

        $z0 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: boolean getStrictErrorChecking()>();

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: boolean isValidName(java.lang.String)>(r2);

        if $z1 != 0 goto label1;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r2;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(5, "xml.name", $r3);

        throw $r4;

     label1:
        return;
    }

    public void setNodeName(java.lang.String)
    {
        org.apache.batik.dom.AbstractAttr r0;
        org.apache.batik.dom.AbstractDocument $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.batik.dom.AbstractAttr: java.lang.String nodeName> = r1;

        $r2 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $z0 = virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument: boolean isId(org.w3c.dom.Attr)>(r0);

        r0.<org.apache.batik.dom.AbstractAttr: boolean isIdAttr> = $z0;

        return;
    }

    public java.lang.String getNodeName()
    {
        java.lang.String $r1;
        org.apache.batik.dom.AbstractAttr r0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        $r1 = r0.<org.apache.batik.dom.AbstractAttr: java.lang.String nodeName>;

        return $r1;
    }

    public short getNodeType()
    {
        org.apache.batik.dom.AbstractAttr r0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        return 2;
    }

    public java.lang.String getNodeValue() throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractAttr r0;
        java.lang.StringBuffer $r3;
        org.w3c.dom.Node $r1, $r2, $r6, r9;
        java.lang.String $r4, $r5, $r7, $r8;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        if $r1 != null goto label1;

        return "";

     label1:
        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        r9 = $r2;

        if $r2 != null goto label2;

        $r8 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        return $r8;

     label2:
        $r3 = new java.lang.StringBuffer;

        $r4 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>($r4);

     label3:
        $r5 = interfaceinvoke r9.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r6 = interfaceinvoke r9.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        r9 = $r6;

        if $r6 != null goto label3;

        $r7 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public void setNodeValue(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.Text $r5;
        org.apache.batik.dom.AbstractElement $r6, $r8;
        java.lang.Object[] $r9;
        org.apache.batik.dom.AbstractAttr r0;
        java.lang.Integer $r14;
        short $s0;
        org.w3c.dom.Document $r4;
        org.w3c.dom.Node $r2;
        org.w3c.dom.DOMException $r12;
        int $i1;
        java.lang.String $r1, r3, $r7, $r11, $r13;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        r3 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label1;

        $r9 = newarray (java.lang.Object)[2];

        $r14 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractAttr: short getNodeType()>();

        $i1 = (int) $s0;

        specialinvoke $r14.<java.lang.Integer: void <init>(int)>($i1);

        $r9[0] = $r14;

        $r11 = virtualinvoke r0.<org.apache.batik.dom.AbstractAttr: java.lang.String getNodeName()>();

        $r9[1] = $r11;

        $r12 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r9);

        throw $r12;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractAttr: java.lang.String getNodeValue()>();

        goto label3;

     label2:
        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>($r2);

     label3:
        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        if $r2 != null goto label2;

        if r3 != null goto label4;

        $r13 = "";

        goto label5;

     label4:
        $r13 = r3;

     label5:
        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r13);

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        $r6 = r0.<org.apache.batik.dom.AbstractAttr: org.apache.batik.dom.AbstractElement ownerElement>;

        if $r6 == null goto label6;

        $r8 = r0.<org.apache.batik.dom.AbstractAttr: org.apache.batik.dom.AbstractElement ownerElement>;

        $r7 = r0.<org.apache.batik.dom.AbstractAttr: java.lang.String nodeName>;

        virtualinvoke $r8.<org.apache.batik.dom.AbstractElement: void fireDOMAttrModifiedEvent(java.lang.String,org.w3c.dom.Attr,java.lang.String,java.lang.String,short)>($r7, r0, $r1, $r13, 1);

     label6:
        return;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.apache.batik.dom.AbstractAttr r0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractAttr: java.lang.String getNodeName()>();

        return $r1;
    }

    public boolean getSpecified()
    {
        org.apache.batik.dom.AbstractAttr r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        $z0 = r0.<org.apache.batik.dom.AbstractAttr: boolean unspecified>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setSpecified(boolean)
    {
        org.apache.batik.dom.AbstractAttr r0;
        boolean z0, $z1;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.apache.batik.dom.AbstractAttr: boolean unspecified> = $z1;

        return;
    }

    public java.lang.String getValue()
    {
        java.lang.String $r1;
        org.apache.batik.dom.AbstractAttr r0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractAttr: java.lang.String getNodeValue()>();

        return $r1;
    }

    public void setValue(java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.String r1;
        org.apache.batik.dom.AbstractAttr r0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.batik.dom.AbstractAttr: void setNodeValue(java.lang.String)>(r1);

        return;
    }

    public void setOwnerElement(org.apache.batik.dom.AbstractElement)
    {
        org.apache.batik.dom.AbstractElement r1;
        org.apache.batik.dom.AbstractAttr r0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        r1 := @parameter0: org.apache.batik.dom.AbstractElement;

        r0.<org.apache.batik.dom.AbstractAttr: org.apache.batik.dom.AbstractElement ownerElement> = r1;

        return;
    }

    public org.w3c.dom.Element getOwnerElement()
    {
        org.apache.batik.dom.AbstractElement $r1;
        org.apache.batik.dom.AbstractAttr r0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        $r1 = r0.<org.apache.batik.dom.AbstractAttr: org.apache.batik.dom.AbstractElement ownerElement>;

        return $r1;
    }

    public org.w3c.dom.TypeInfo getSchemaTypeInfo()
    {
        org.apache.batik.dom.AbstractAttr$AttrTypeInfo $r3;
        org.apache.batik.dom.AbstractAttr r0;
        org.w3c.dom.TypeInfo $r1, $r2;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        $r1 = r0.<org.apache.batik.dom.AbstractAttr: org.w3c.dom.TypeInfo typeInfo>;

        if $r1 != null goto label1;

        $r3 = new org.apache.batik.dom.AbstractAttr$AttrTypeInfo;

        specialinvoke $r3.<org.apache.batik.dom.AbstractAttr$AttrTypeInfo: void <init>(org.apache.batik.dom.AbstractAttr)>(r0);

        r0.<org.apache.batik.dom.AbstractAttr: org.w3c.dom.TypeInfo typeInfo> = $r3;

     label1:
        $r2 = r0.<org.apache.batik.dom.AbstractAttr: org.w3c.dom.TypeInfo typeInfo>;

        return $r2;
    }

    public boolean isId()
    {
        org.apache.batik.dom.AbstractAttr r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        $z0 = r0.<org.apache.batik.dom.AbstractAttr: boolean isIdAttr>;

        return $z0;
    }

    public void setIsId(boolean)
    {
        org.apache.batik.dom.AbstractAttr r0;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.dom.AbstractAttr: boolean isIdAttr> = z0;

        return;
    }

    protected void nodeAdded(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractAttr r0;
        org.w3c.dom.Node r1;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        r1 := @parameter0: org.w3c.dom.Node;

        virtualinvoke r0.<org.apache.batik.dom.AbstractAttr: void setSpecified(boolean)>(1);

        return;
    }

    protected void nodeToBeRemoved(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractAttr r0;
        org.w3c.dom.Node r1;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        r1 := @parameter0: org.w3c.dom.Node;

        virtualinvoke r0.<org.apache.batik.dom.AbstractAttr: void setSpecified(boolean)>(1);

        return;
    }

    protected org.w3c.dom.Node export(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractAttr r0, r3;
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node export(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r3 = (org.apache.batik.dom.AbstractAttr) r1;

        $r4 = r0.<org.apache.batik.dom.AbstractAttr: java.lang.String nodeName>;

        r3.<org.apache.batik.dom.AbstractAttr: java.lang.String nodeName> = $r4;

        r3.<org.apache.batik.dom.AbstractAttr: boolean unspecified> = 0;

        $z0 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: boolean isId(org.w3c.dom.Attr)>(r3);

        r3.<org.apache.batik.dom.AbstractAttr: boolean isIdAttr> = $z0;

        return r1;
    }

    protected org.w3c.dom.Node deepExport(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractAttr r0, r3;
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node deepExport(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r3 = (org.apache.batik.dom.AbstractAttr) r1;

        $r4 = r0.<org.apache.batik.dom.AbstractAttr: java.lang.String nodeName>;

        r3.<org.apache.batik.dom.AbstractAttr: java.lang.String nodeName> = $r4;

        r3.<org.apache.batik.dom.AbstractAttr: boolean unspecified> = 0;

        $z0 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: boolean isId(org.w3c.dom.Attr)>(r3);

        r3.<org.apache.batik.dom.AbstractAttr: boolean isIdAttr> = $z0;

        return r1;
    }

    protected org.w3c.dom.Node copyInto(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractAttr r0, r2;
        org.w3c.dom.Node r1;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node copyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.AbstractAttr) r1;

        $r3 = r0.<org.apache.batik.dom.AbstractAttr: java.lang.String nodeName>;

        r2.<org.apache.batik.dom.AbstractAttr: java.lang.String nodeName> = $r3;

        $z0 = r0.<org.apache.batik.dom.AbstractAttr: boolean unspecified>;

        r2.<org.apache.batik.dom.AbstractAttr: boolean unspecified> = $z0;

        $z1 = r0.<org.apache.batik.dom.AbstractAttr: boolean isIdAttr>;

        r2.<org.apache.batik.dom.AbstractAttr: boolean isIdAttr> = $z1;

        return r1;
    }

    protected org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractAttr r0, r2;
        org.w3c.dom.Node r1;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.AbstractAttr) r1;

        $r3 = r0.<org.apache.batik.dom.AbstractAttr: java.lang.String nodeName>;

        r2.<org.apache.batik.dom.AbstractAttr: java.lang.String nodeName> = $r3;

        $z0 = r0.<org.apache.batik.dom.AbstractAttr: boolean unspecified>;

        r2.<org.apache.batik.dom.AbstractAttr: boolean unspecified> = $z0;

        $z1 = r0.<org.apache.batik.dom.AbstractAttr: boolean isIdAttr>;

        r2.<org.apache.batik.dom.AbstractAttr: boolean isIdAttr> = $z1;

        return r1;
    }

    protected void checkChildType(org.w3c.dom.Node, boolean)
    {
        java.lang.Object[] $r2;
        org.apache.batik.dom.AbstractAttr r1;
        java.lang.Integer $r8, $r9;
        short $s0, $s1, $s2;
        org.w3c.dom.Node r0;
        org.w3c.dom.DOMException $r7;
        int $i3, $i4, $i5;
        java.lang.String $r4, $r6;
        boolean z0;

        r1 := @this: org.apache.batik.dom.AbstractAttr;

        r0 := @parameter0: org.w3c.dom.Node;

        z0 := @parameter1: boolean;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s0;

        lookupswitch($i3)
        {
            case 3: goto label1;
            case 5: goto label1;
            case 11: goto label1;
            default: goto label2;
        };

     label1:
        goto label3;

     label2:
        $r2 = newarray (java.lang.Object)[4];

        $r8 = new java.lang.Integer;

        $s1 = virtualinvoke r1.<org.apache.batik.dom.AbstractAttr: short getNodeType()>();

        $i4 = (int) $s1;

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>($i4);

        $r2[0] = $r8;

        $r4 = virtualinvoke r1.<org.apache.batik.dom.AbstractAttr: java.lang.String getNodeName()>();

        $r2[1] = $r4;

        $r9 = new java.lang.Integer;

        $s2 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i5 = (int) $s2;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i5);

        $r2[2] = $r9;

        $r6 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r2[3] = $r6;

        $r7 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(3, "child.type", $r2);

        throw $r7;

     label3:
        return;
    }

    protected void fireDOMSubtreeModifiedEvent()
    {
        org.w3c.dom.Element $r2, $r3;
        org.apache.batik.dom.AbstractElement $r4;
        org.apache.batik.dom.AbstractAttr r0;
        org.apache.batik.dom.AbstractDocument $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractAttr;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $z0 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: boolean getEventsEnabled()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode: void fireDOMSubtreeModifiedEvent()>();

        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractAttr: org.w3c.dom.Element getOwnerElement()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractAttr: org.w3c.dom.Element getOwnerElement()>();

        $r4 = (org.apache.batik.dom.AbstractElement) $r3;

        virtualinvoke $r4.<org.apache.batik.dom.AbstractParentNode: void fireDOMSubtreeModifiedEvent()>();

     label1:
        return;
    }
}
