public class org.apache.jena.riot.writer.NQuadsWriter extends org.apache.jena.riot.writer.WriterDatasetRIOTBase
{
    private final org.apache.jena.riot.out.CharSpace charSpace;

    public static void write(java.io.OutputStream, java.util.Iterator)
    {
        java.io.OutputStream r0;
        org.apache.jena.riot.out.CharSpace $r2;
        java.util.Iterator r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.util.Iterator;

        $r2 = <org.apache.jena.riot.out.CharSpace: org.apache.jena.riot.out.CharSpace UTF8>;

        staticinvoke <org.apache.jena.riot.writer.NQuadsWriter: void write(java.io.OutputStream,java.util.Iterator,org.apache.jena.riot.out.CharSpace)>(r0, r1, $r2);

        return;
    }

    public static void write(java.io.OutputStream, java.util.Iterator, org.apache.jena.riot.out.CharSpace)
    {
        java.io.OutputStream r0;
        java.util.Iterator r3;
        org.apache.jena.riot.system.StreamRDF $r2;
        org.apache.jena.riot.out.CharSpace r1;

        r0 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: java.util.Iterator;

        r1 := @parameter2: org.apache.jena.riot.out.CharSpace;

        $r2 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF writer(java.io.OutputStream,org.apache.jena.riot.out.CharSpace)>(r0, r1);

        staticinvoke <org.apache.jena.riot.writer.NQuadsWriter: void write$(org.apache.jena.riot.system.StreamRDF,java.util.Iterator)>($r2, r3);

        return;
    }

    public static void write(java.io.Writer, java.util.Iterator)
    {
        java.io.Writer r0;
        org.apache.jena.riot.out.CharSpace $r2;
        java.util.Iterator r1;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: java.util.Iterator;

        $r2 = <org.apache.jena.riot.out.CharSpace: org.apache.jena.riot.out.CharSpace UTF8>;

        staticinvoke <org.apache.jena.riot.writer.NQuadsWriter: void write(java.io.Writer,java.util.Iterator,org.apache.jena.riot.out.CharSpace)>(r0, r1, $r2);

        return;
    }

    public static void write(java.io.Writer, java.util.Iterator, org.apache.jena.riot.out.CharSpace)
    {
        java.util.Iterator r3;
        java.io.Writer r0;
        org.apache.jena.riot.system.StreamRDF $r2;
        org.apache.jena.riot.out.CharSpace r1;

        r0 := @parameter0: java.io.Writer;

        r3 := @parameter1: java.util.Iterator;

        r1 := @parameter2: org.apache.jena.riot.out.CharSpace;

        $r2 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF writer(java.io.Writer,org.apache.jena.riot.out.CharSpace)>(r0, r1);

        staticinvoke <org.apache.jena.riot.writer.NQuadsWriter: void write$(org.apache.jena.riot.system.StreamRDF,java.util.Iterator)>($r2, r3);

        return;
    }

    private static void write$(org.apache.jena.riot.system.StreamRDF, java.util.Iterator)
    {
        org.apache.jena.riot.system.StreamRDF r0;
        java.util.Iterator r1;

        r0 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r1 := @parameter1: java.util.Iterator;

        interfaceinvoke r0.<org.apache.jena.riot.system.StreamRDF: void start()>();

        staticinvoke <org.apache.jena.riot.system.StreamRDFLib: void quadsToStream(org.apache.jena.riot.system.StreamRDF,java.util.Iterator)>(r0, r1);

        interfaceinvoke r0.<org.apache.jena.riot.system.StreamRDF: void finish()>();

        return;
    }

    public void <init>()
    {
        org.apache.jena.riot.out.CharSpace $r1;
        org.apache.jena.riot.writer.NQuadsWriter r0;

        r0 := @this: org.apache.jena.riot.writer.NQuadsWriter;

        $r1 = <org.apache.jena.riot.out.CharSpace: org.apache.jena.riot.out.CharSpace UTF8>;

        specialinvoke r0.<org.apache.jena.riot.writer.NQuadsWriter: void <init>(org.apache.jena.riot.out.CharSpace)>($r1);

        return;
    }

    public void <init>(org.apache.jena.riot.out.CharSpace)
    {
        org.apache.jena.riot.out.CharSpace r1;
        org.apache.jena.riot.writer.NQuadsWriter r0;

        r0 := @this: org.apache.jena.riot.writer.NQuadsWriter;

        r1 := @parameter0: org.apache.jena.riot.out.CharSpace;

        specialinvoke r0.<org.apache.jena.riot.writer.WriterDatasetRIOTBase: void <init>()>();

        r0.<org.apache.jena.riot.writer.NQuadsWriter: org.apache.jena.riot.out.CharSpace charSpace> = r1;

        return;
    }

    public org.apache.jena.riot.Lang getLang()
    {
        org.apache.jena.riot.Lang $r0;
        org.apache.jena.riot.writer.NQuadsWriter r1;

        r1 := @this: org.apache.jena.riot.writer.NQuadsWriter;

        $r0 = <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang NQUADS>;

        return $r0;
    }

    public void write(java.io.Writer, com.hp.hpl.jena.sparql.core.DatasetGraph, org.apache.jena.riot.system.PrefixMap, java.lang.String, com.hp.hpl.jena.sparql.util.Context)
    {
        java.util.Iterator $r2;
        org.apache.jena.riot.out.CharSpace $r4;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        com.hp.hpl.jena.sparql.util.Context r7;
        org.apache.jena.riot.system.PrefixMap r5;
        org.apache.jena.riot.writer.NQuadsWriter r3;
        java.io.Writer r0;
        java.lang.String r6;

        r3 := @this: org.apache.jena.riot.writer.NQuadsWriter;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r5 := @parameter2: org.apache.jena.riot.system.PrefixMap;

        r6 := @parameter3: java.lang.String;

        r7 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, null, null, null);

        $r4 = r3.<org.apache.jena.riot.writer.NQuadsWriter: org.apache.jena.riot.out.CharSpace charSpace>;

        staticinvoke <org.apache.jena.riot.writer.NQuadsWriter: void write(java.io.Writer,java.util.Iterator,org.apache.jena.riot.out.CharSpace)>(r0, $r2, $r4);

        return;
    }

    public void write(java.io.OutputStream, com.hp.hpl.jena.sparql.core.DatasetGraph, org.apache.jena.riot.system.PrefixMap, java.lang.String, com.hp.hpl.jena.sparql.util.Context)
    {
        java.io.OutputStream r0;
        java.util.Iterator $r2;
        org.apache.jena.riot.out.CharSpace $r4;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        com.hp.hpl.jena.sparql.util.Context r7;
        org.apache.jena.riot.system.PrefixMap r5;
        org.apache.jena.riot.writer.NQuadsWriter r3;
        java.lang.String r6;

        r3 := @this: org.apache.jena.riot.writer.NQuadsWriter;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r5 := @parameter2: org.apache.jena.riot.system.PrefixMap;

        r6 := @parameter3: java.lang.String;

        r7 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, null, null, null);

        $r4 = r3.<org.apache.jena.riot.writer.NQuadsWriter: org.apache.jena.riot.out.CharSpace charSpace>;

        staticinvoke <org.apache.jena.riot.writer.NQuadsWriter: void write(java.io.OutputStream,java.util.Iterator,org.apache.jena.riot.out.CharSpace)>(r0, $r2, $r4);

        return;
    }
}
