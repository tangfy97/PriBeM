public class ucar.nc2.iosp.uf.UFheader extends java.lang.Object
{
    ucar.unidata.io.RandomAccessFile raf;
    ucar.nc2.NetcdfFile ncfile;
    static final boolean littleEndianData;
    java.lang.String dataFormat;
    ucar.nc2.iosp.uf.Ray firstRay;
    java.util.HashMap variableGroup;
    private int max_radials;
    private int min_radials;

    public void <init>()
    {
        ucar.nc2.iosp.uf.UFheader r0;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.iosp.uf.UFheader: java.lang.String dataFormat> = "UNIVERSALFORMAT";

        r0.<ucar.nc2.iosp.uf.UFheader: ucar.nc2.iosp.uf.Ray firstRay> = null;

        r0.<ucar.nc2.iosp.uf.UFheader: int max_radials> = 0;

        r0.<ucar.nc2.iosp.uf.UFheader: int min_radials> = 2147483647;

        return;
    }

    public boolean isValidFile(ucar.unidata.io.RandomAccessFile)
    {
        byte[] r1, r3, r8;
        ucar.unidata.io.RandomAccessFile r0;
        long $l1;
        java.io.IOException $r7;
        java.nio.ByteBuffer $r4;
        ucar.nc2.iosp.uf.Ray $r6;
        int $i0, $i2;
        java.lang.String $r2;
        ucar.nc2.iosp.uf.UFheader r5;
        boolean $z0;

        r5 := @this: ucar.nc2.iosp.uf.UFheader;

        r0 := @parameter0: ucar.unidata.io.RandomAccessFile;

     label1:
        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: void seek(long)>(0L);

        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: void order(int)>(0);

        r8 = newarray (byte)[6];

        r1 = newarray (byte)[4];

        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: int read(byte[],int,int)>(r8, 0, 6);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int)>(r8, 4, 2);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("UF");

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: void seek(long)>(0L);

        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: int read(byte[],int,int)>(r1, 0, 4);

        $i0 = staticinvoke <ucar.nc2.iosp.uf.UFheader: int bytesToInt(byte[],boolean)>(r1, 0);

        r3 = newarray (byte)[$i0];

        $l1 = virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: long getFilePointer()>();

        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: int read(byte[],int,int)>(r3, 0, $i0);

        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: int read(byte[],int,int)>(r1, 0, 4);

        $i2 = staticinvoke <ucar.nc2.iosp.uf.UFheader: int bytesToInt(byte[],boolean)>(r1, 0);

        if $i2 == $i0 goto label5;

     label4:
        return 0;

     label5:
        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r3);

        $r6 = new ucar.nc2.iosp.uf.Ray;

        specialinvoke $r6.<ucar.nc2.iosp.uf.Ray: void <init>(java.nio.ByteBuffer,int,long)>($r4, $i0, $l1);

        r5.<ucar.nc2.iosp.uf.UFheader: ucar.nc2.iosp.uf.Ray firstRay> = $r6;

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        return 0;

     label8:
        return 1;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    void read(ucar.unidata.io.RandomAccessFile, ucar.nc2.NetcdfFile) throws java.io.IOException
    {
        byte[] r24, r25;
        ucar.unidata.io.RandomAccessFile r1;
        java.nio.ByteBuffer $r12;
        boolean $z0, $z1, $z2;
        java.util.Set $r5, $r15;
        ucar.nc2.NetcdfFile r2;
        java.util.HashMap $r3, $r4, $r8, $r11, $r19, $r22, $r23;
        long $l1;
        java.util.ArrayList $r10, $r21, r26, r28;
        ucar.nc2.iosp.uf.Ray $r13, $r14;
        int $i0, $i2;
        java.lang.String r18, r27;
        java.util.Iterator $r6, $r16;
        java.lang.Object $r7, $r9, $r17, $r20;
        ucar.nc2.iosp.uf.UFheader r0;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        r1 := @parameter0: ucar.unidata.io.RandomAccessFile;

        r2 := @parameter1: ucar.nc2.NetcdfFile;

        r0.<ucar.nc2.iosp.uf.UFheader: ucar.unidata.io.RandomAccessFile raf> = r1;

        r0.<ucar.nc2.iosp.uf.UFheader: ucar.nc2.NetcdfFile ncfile> = r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<ucar.nc2.iosp.uf.UFheader: java.util.HashMap variableGroup> = $r3;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void seek(long)>(0L);

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void order(int)>(0);

     label1:
        $z1 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: boolean isAtEndOfFile()>();

        if $z1 != 0 goto label7;

        r24 = newarray (byte)[4];

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int read(byte[],int,int)>(r24, 0, 4);

        $i0 = staticinvoke <ucar.nc2.iosp.uf.UFheader: int bytesToInt(byte[],boolean)>(r24, 0);

        r25 = newarray (byte)[$i0];

        $l1 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: long getFilePointer()>();

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int read(byte[],int,int)>(r25, 0, $i0);

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int read(byte[],int,int)>(r24, 0, 4);

        $i2 = staticinvoke <ucar.nc2.iosp.uf.UFheader: int bytesToInt(byte[],boolean)>(r24, 0);

        if $i2 != $i0 goto label1;

        if $i0 != 0 goto label2;

        goto label1;

     label2:
        $r12 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r25);

        $r13 = new ucar.nc2.iosp.uf.Ray;

        specialinvoke $r13.<ucar.nc2.iosp.uf.Ray: void <init>(java.nio.ByteBuffer,int,long)>($r12, $i0, $l1);

        $r14 = r0.<ucar.nc2.iosp.uf.UFheader: ucar.nc2.iosp.uf.Ray firstRay>;

        if $r14 != null goto label3;

        r0.<ucar.nc2.iosp.uf.UFheader: ucar.nc2.iosp.uf.Ray firstRay> = $r13;

     label3:
        $r23 = $r13.<ucar.nc2.iosp.uf.Ray: java.util.HashMap field_header_map>;

        $r15 = virtualinvoke $r23.<java.util.HashMap: java.util.Set keySet()>();

        $r16 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.lang.String) $r17;

        $r19 = r0.<ucar.nc2.iosp.uf.UFheader: java.util.HashMap variableGroup>;

        $r20 = virtualinvoke $r19.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r18);

        r26 = (java.util.ArrayList) $r20;

        if null != r26 goto label5;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        r26 = $r21;

        $r22 = r0.<ucar.nc2.iosp.uf.UFheader: java.util.HashMap variableGroup>;

        virtualinvoke $r22.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, $r21);

     label5:
        virtualinvoke r26.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        goto label4;

     label6:
        goto label1;

     label7:
        $r4 = r0.<ucar.nc2.iosp.uf.UFheader: java.util.HashMap variableGroup>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label8:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r27 = (java.lang.String) $r7;

        $r8 = r0.<ucar.nc2.iosp.uf.UFheader: java.util.HashMap variableGroup>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r27);

        r28 = (java.util.ArrayList) $r9;

        $r10 = specialinvoke r0.<ucar.nc2.iosp.uf.UFheader: java.util.ArrayList sortScans(java.lang.String,java.util.List)>(r27, r28);

        $r11 = r0.<ucar.nc2.iosp.uf.UFheader: java.util.HashMap variableGroup>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r27, $r10);

        goto label8;

     label9:
        return;
    }

    private java.util.ArrayList sortScans(java.lang.String, java.util.List)
    {
        ucar.nc2.iosp.uf.UFheader$GroupComparator $r20;
        java.util.HashMap $r16;
        java.lang.Integer $r17;
        java.util.ArrayList r14, r15, $r18, $r19;
        short $s8;
        ucar.nc2.iosp.uf.Ray r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, i10, $i11;
        java.lang.String r12;
        java.util.Collection $r3;
        ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 $r9;
        java.util.List r1;
        java.lang.Object $r6, $r7, $r10;
        ucar.nc2.iosp.uf.UFheader r5;

        r5 := @this: ucar.nc2.iosp.uf.UFheader;

        r12 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        $r16 = new java.util.HashMap;

        specialinvoke $r16.<java.util.HashMap: void <init>(int)>(600);

        i9 = 0;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i9 >= $i0 goto label3;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i9);

        r13 = (ucar.nc2.iosp.uf.Ray) $r7;

        $r17 = new java.lang.Integer;

        $r9 = r13.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s8 = $r9.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short sweepNumber>;

        $i11 = (int) $s8;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>($i11);

        $r10 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r17);

        r14 = (java.util.ArrayList) $r10;

        if null != r14 goto label2;

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r14 = $r18;

        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r18);

     label2:
        virtualinvoke r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r13);

        i9 = i9 + 1;

        goto label1;

     label3:
        $r19 = new java.util.ArrayList;

        $r3 = virtualinvoke $r16.<java.util.HashMap: java.util.Collection values()>();

        specialinvoke $r19.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r20 = new ucar.nc2.iosp.uf.UFheader$GroupComparator;

        specialinvoke $r20.<ucar.nc2.iosp.uf.UFheader$GroupComparator: void <init>(ucar.nc2.iosp.uf.UFheader,ucar.nc2.iosp.uf.UFheader$1)>(r5, null);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r19, $r20);

        i10 = 0;

     label4:
        $i1 = virtualinvoke $r19.<java.util.ArrayList: int size()>();

        if i10 >= $i1 goto label5;

        $r6 = virtualinvoke $r19.<java.util.ArrayList: java.lang.Object get(int)>(i10);

        r15 = (java.util.ArrayList) $r6;

        $i2 = r5.<ucar.nc2.iosp.uf.UFheader: int max_radials>;

        $i3 = virtualinvoke r15.<java.util.ArrayList: int size()>();

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i3);

        r5.<ucar.nc2.iosp.uf.UFheader: int max_radials> = $i4;

        $i5 = r5.<ucar.nc2.iosp.uf.UFheader: int min_radials>;

        $i6 = virtualinvoke r15.<java.util.ArrayList: int size()>();

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i6);

        r5.<ucar.nc2.iosp.uf.UFheader: int min_radials> = $i7;

        i10 = i10 + 1;

        goto label4;

     label5:
        return $r19;
    }

    public float getMeanElevation(java.lang.String, int)
    {
        java.util.List $r2;
        int i0;
        float $f0;
        java.lang.String r1;
        ucar.nc2.iosp.uf.UFheader r0;
        java.util.ArrayList r3;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<ucar.nc2.iosp.uf.UFheader: java.util.List getGroup(java.lang.String)>(r1);

        r3 = (java.util.ArrayList) $r2;

        $f0 = virtualinvoke r0.<ucar.nc2.iosp.uf.UFheader: float getMeanElevation(java.util.ArrayList)>(r3);

        return $f0;
    }

    public float getMeanElevation(java.util.ArrayList)
    {
        java.util.Iterator $r1;
        java.util.ArrayList r0;
        ucar.nc2.iosp.uf.Ray r3;
        int i0;
        float $f0, $f1, $f2, f3;
        java.lang.Object $r2;
        ucar.nc2.iosp.uf.UFheader r4;
        boolean $z0;

        r4 := @this: ucar.nc2.iosp.uf.UFheader;

        r0 := @parameter0: java.util.ArrayList;

        f3 = 0.0F;

        i0 = 0;

        $r1 = virtualinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (ucar.nc2.iosp.uf.Ray) $r2;

        $f2 = virtualinvoke r3.<ucar.nc2.iosp.uf.Ray: float getElevation()>();

        f3 = f3 + $f2;

        i0 = i0 + 1;

        goto label1;

     label2:
        $f0 = (float) i0;

        $f1 = f3 / $f0;

        return $f1;
    }

    public java.util.List getGroup(java.lang.String)
    {
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        ucar.nc2.iosp.uf.UFheader r0;
        java.util.ArrayList $r4;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<ucar.nc2.iosp.uf.UFheader: java.util.HashMap variableGroup>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.ArrayList) $r3;

        return $r4;
    }

    public int getMaxRadials()
    {
        int $i0;
        ucar.nc2.iosp.uf.UFheader r0;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        $i0 = r0.<ucar.nc2.iosp.uf.UFheader: int max_radials>;

        return $i0;
    }

    public java.lang.String getDataFormat()
    {
        java.lang.String $r1;
        ucar.nc2.iosp.uf.UFheader r0;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        $r1 = r0.<ucar.nc2.iosp.uf.UFheader: java.lang.String dataFormat>;

        return $r1;
    }

    public java.util.Date getStartDate()
    {
        ucar.nc2.iosp.uf.Ray $r1;
        ucar.nc2.iosp.uf.UFheader r0;
        java.util.Date $r2;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        $r1 = r0.<ucar.nc2.iosp.uf.UFheader: ucar.nc2.iosp.uf.Ray firstRay>;

        $r2 = virtualinvoke $r1.<ucar.nc2.iosp.uf.Ray: java.util.Date getDate()>();

        return $r2;
    }

    public java.util.Date getEndDate()
    {
        ucar.nc2.iosp.uf.Ray $r1;
        ucar.nc2.iosp.uf.UFheader r0;
        java.util.Date $r2;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        $r1 = r0.<ucar.nc2.iosp.uf.UFheader: ucar.nc2.iosp.uf.Ray firstRay>;

        $r2 = virtualinvoke $r1.<ucar.nc2.iosp.uf.Ray: java.util.Date getDate()>();

        return $r2;
    }

    public float getHorizontalBeamWidth(java.lang.String)
    {
        ucar.nc2.iosp.uf.Ray $r2;
        float $f0;
        java.lang.String r1;
        ucar.nc2.iosp.uf.UFheader r0;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<ucar.nc2.iosp.uf.UFheader: ucar.nc2.iosp.uf.Ray firstRay>;

        $f0 = virtualinvoke $r2.<ucar.nc2.iosp.uf.Ray: float getHorizontalBeamWidth(java.lang.String)>(r1);

        return $f0;
    }

    public java.lang.String getStationId()
    {
        ucar.nc2.iosp.uf.Ray $r1;
        ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 $r2;
        java.lang.String $r3;
        ucar.nc2.iosp.uf.UFheader r0;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        $r1 = r0.<ucar.nc2.iosp.uf.UFheader: ucar.nc2.iosp.uf.Ray firstRay>;

        $r2 = $r1.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $r3 = $r2.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: java.lang.String siteName>;

        return $r3;
    }

    public java.lang.Short getSweepMode()
    {
        short $s0;
        ucar.nc2.iosp.uf.Ray $r1;
        java.lang.Short $r3;
        ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 $r2;
        ucar.nc2.iosp.uf.UFheader r0;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        $r1 = r0.<ucar.nc2.iosp.uf.UFheader: ucar.nc2.iosp.uf.Ray firstRay>;

        $r2 = $r1.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s0 = $r2.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short sweepMode>;

        $r3 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0);

        return $r3;
    }

    public float getStationLatitude()
    {
        float $f0;
        ucar.nc2.iosp.uf.Ray $r1;
        ucar.nc2.iosp.uf.UFheader r0;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        $r1 = r0.<ucar.nc2.iosp.uf.UFheader: ucar.nc2.iosp.uf.Ray firstRay>;

        $f0 = virtualinvoke $r1.<ucar.nc2.iosp.uf.Ray: float getLatitude()>();

        return $f0;
    }

    public float getStationLongitude()
    {
        float $f0;
        ucar.nc2.iosp.uf.Ray $r1;
        ucar.nc2.iosp.uf.UFheader r0;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        $r1 = r0.<ucar.nc2.iosp.uf.UFheader: ucar.nc2.iosp.uf.Ray firstRay>;

        $f0 = virtualinvoke $r1.<ucar.nc2.iosp.uf.Ray: float getLongtitude()>();

        return $f0;
    }

    public float getStationElevation()
    {
        float $f0;
        ucar.nc2.iosp.uf.Ray $r1;
        ucar.nc2.iosp.uf.UFheader r0;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        $r1 = r0.<ucar.nc2.iosp.uf.UFheader: ucar.nc2.iosp.uf.Ray firstRay>;

        $f0 = virtualinvoke $r1.<ucar.nc2.iosp.uf.Ray: float getElevation()>();

        return $f0;
    }

    public short getMissingData()
    {
        short $s0;
        ucar.nc2.iosp.uf.Ray $r1;
        ucar.nc2.iosp.uf.UFheader r0;

        r0 := @this: ucar.nc2.iosp.uf.UFheader;

        $r1 = r0.<ucar.nc2.iosp.uf.UFheader: ucar.nc2.iosp.uf.Ray firstRay>;

        $s0 = virtualinvoke $r1.<ucar.nc2.iosp.uf.Ray: short getMissingData()>();

        return $s0;
    }

    protected short getShort(byte[], int)
    {
        byte[] r0;
        short $s5, $s8, $s10;
        byte $b3, $b4;
        int i0, i1, i2, $i6, $i7, $i9, $i11;
        ucar.nc2.iosp.uf.UFheader r1;

        r1 := @this: ucar.nc2.iosp.uf.UFheader;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 = i0 + 1;

        i2 = i0 + 0;

        $b3 = r0[i1];

        $i9 = (int) $b3;

        $i6 = $i9 << 8;

        $b4 = r0[i2];

        $s10 = (short) $b4;

        $s5 = $s10 & 255;

        $i11 = (int) $s5;

        $i7 = $i6 | $i11;

        $s8 = (short) $i7;

        return $s8;
    }

    public static int bytesToShort(byte, byte, boolean)
    {
        short $s2, $s6, $s8, $s12;
        byte b0, b1;
        int $i3, $i4, $i5, $i7, $i9, $i10, $i11, $i13;
        boolean z0;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $s8 = (short) b0;

        $s6 = $s8 & 255;

        $i9 = (int) b1;

        $i5 = $i9 << 8;

        $i10 = (int) $s6;

        $i7 = $i10 + $i5;

        return $i7;

     label1:
        $i11 = (int) b0;

        $i3 = $i11 << 8;

        $s12 = (short) b1;

        $s2 = $s12 & 255;

        $i13 = (int) $s2;

        $i4 = $i3 + $i13;

        return $i4;
    }

    public static int bytesToInt(byte[], boolean)
    {
        byte[] r0;
        byte b0, b1, b2, b3;
        boolean z0;
        short $s4, $s5, $s8, $s11, $s14, $s16, $s17, $s20, $s24, $s25, $s28, $s30, $s32, $s34, $s36, $s38;
        int $i6, $i7, $i9, $i10, $i12, $i13, $i15, $i18, $i19, $i21, $i22, $i23, $i26, $i27, $i29, $i31, $i33, $i35, $i37, $i39;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        b0 = r0[0];

        b1 = r0[1];

        b2 = r0[2];

        b3 = r0[3];

        if z0 == 0 goto label1;

        $s24 = (short) b0;

        $s16 = $s24 & 255;

        $s25 = (short) b1;

        $s14 = $s25 & 255;

        $i26 = (int) $s14;

        $i15 = $i26 << 8;

        $i27 = (int) $s16;

        $i19 = $i27 + $i15;

        $s28 = (short) b2;

        $s17 = $s28 & 255;

        $i29 = (int) $s17;

        $i18 = $i29 << 16;

        $i22 = $i19 + $i18;

        $s30 = (short) b3;

        $s20 = $s30 & 255;

        $i31 = (int) $s20;

        $i21 = $i31 << 24;

        $i23 = $i22 + $i21;

        return $i23;

     label1:
        $s32 = (short) b0;

        $s4 = $s32 & 255;

        $i33 = (int) $s4;

        $i7 = $i33 << 24;

        $s34 = (short) b1;

        $s5 = $s34 & 255;

        $i35 = (int) $s5;

        $i6 = $i35 << 16;

        $i10 = $i7 + $i6;

        $s36 = (short) b2;

        $s8 = $s36 & 255;

        $i37 = (int) $s8;

        $i9 = $i37 << 8;

        $i12 = $i10 + $i9;

        $s38 = (short) b3;

        $s11 = $s38 & 255;

        $i39 = (int) $s11;

        $i13 = $i12 + $i39;

        return $i13;
    }

    public static void <clinit>()
    {
        <ucar.nc2.iosp.uf.UFheader: boolean littleEndianData> = 1;

        return;
    }
}
