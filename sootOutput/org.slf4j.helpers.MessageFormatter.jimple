public final class org.slf4j.helpers.MessageFormatter extends java.lang.Object
{
    static final char DELIM_START;
    static final char DELIM_STOP;
    static final java.lang.String DELIM_STR;
    private static final char ESCAPE_CHAR;

    public void <init>()
    {
        org.slf4j.helpers.MessageFormatter r0;

        r0 := @this: org.slf4j.helpers.MessageFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final org.slf4j.helpers.FormattingTuple format(java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r1;
        java.lang.Object r2;
        java.lang.String r0;
        org.slf4j.helpers.FormattingTuple $r3;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>(r0, $r1);

        return $r3;
    }

    public static final org.slf4j.helpers.FormattingTuple format(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r1;
        java.lang.Object r2, r3;
        java.lang.String r0;
        org.slf4j.helpers.FormattingTuple $r4;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        $r4 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>(r0, $r1);

        return $r4;
    }

    static final java.lang.Throwable getThrowableCandidate(java.lang.Object[])
    {
        java.lang.Throwable $r2;
        java.lang.Object[] r0;
        int $i0, $i1, $i2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        r1 = r0[$i2];

        $z0 = r1 instanceof java.lang.Throwable;

        if $z0 == 0 goto label3;

        $r2 = (java.lang.Throwable) r1;

        return $r2;

     label3:
        return null;
    }

    public static final org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String, java.lang.Object[])
    {
        boolean $z0, $z1;
        java.lang.Throwable $r1;
        java.lang.Object[] r0;
        java.util.HashMap $r27, $r28;
        java.lang.StringBuffer $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, $i13, $i15;
        java.lang.String r2, $r4, $r6, $r8, $r9, $r12, $r15, $r16, $r18;
        org.slf4j.helpers.FormattingTuple $r22, $r23, $r25, $r26, $r29, $r30;
        java.lang.Object $r11, $r14;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <org.slf4j.helpers.MessageFormatter: java.lang.Throwable getThrowableCandidate(java.lang.Object[])>(r0);

        if r2 != null goto label01;

        $r22 = new org.slf4j.helpers.FormattingTuple;

        specialinvoke $r22.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>(null, r0, $r1);

        return $r22;

     label01:
        if r0 != null goto label02;

        $r23 = new org.slf4j.helpers.FormattingTuple;

        specialinvoke $r23.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String)>(r2);

        return $r23;

     label02:
        i10 = 0;

        $r24 = new java.lang.StringBuffer;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = $i0 + 50;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>(int)>($i1);

        i11 = 0;

     label03:
        $i2 = lengthof r0;

        if i11 >= $i2 goto label09;

        $i6 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String,int)>("{}", i10);

        $i13 = (int) -1;

        if $i6 != $i13 goto label05;

        if i10 != 0 goto label04;

        $r25 = new org.slf4j.helpers.FormattingTuple;

        specialinvoke $r25.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>(r2, r0, $r1);

        return $r25;

     label04:
        $i9 = virtualinvoke r2.<java.lang.String: int length()>();

        $r16 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i10, $i9);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r26 = new org.slf4j.helpers.FormattingTuple;

        $r18 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r26.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>($r18, r0, $r1);

        return $r26;

     label05:
        $z0 = staticinvoke <org.slf4j.helpers.MessageFormatter: boolean isEscapedDelimeter(java.lang.String,int)>(r2, $i6);

        if $z0 == 0 goto label07;

        $z1 = staticinvoke <org.slf4j.helpers.MessageFormatter: boolean isDoubleEscaped(java.lang.String,int)>(r2, $i6);

        if $z1 != 0 goto label06;

        $i15 = (int) -1;

        i11 = i11 + $i15;

        $i8 = $i6 - 1;

        $r15 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i10, $i8);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(123);

        i10 = $i6 + 1;

        goto label08;

     label06:
        $i7 = $i6 - 1;

        $r12 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i10, $i7);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = r0[i11];

        $r27 = new java.util.HashMap;

        specialinvoke $r27.<java.util.HashMap: void <init>()>();

        staticinvoke <org.slf4j.helpers.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>($r24, $r14, $r27);

        i10 = $i6 + 2;

        goto label08;

     label07:
        $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i10, $i6);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = r0[i11];

        $r28 = new java.util.HashMap;

        specialinvoke $r28.<java.util.HashMap: void <init>()>();

        staticinvoke <org.slf4j.helpers.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>($r24, $r11, $r28);

        i10 = $i6 + 2;

     label08:
        i11 = i11 + 1;

        goto label03;

     label09:
        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i10, $i3);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $i4 = lengthof r0;

        $i5 = $i4 - 1;

        if i11 >= $i5 goto label10;

        $r29 = new org.slf4j.helpers.FormattingTuple;

        $r8 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r29.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>($r8, r0, $r1);

        return $r29;

     label10:
        $r30 = new org.slf4j.helpers.FormattingTuple;

        $r6 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r30.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>($r6, r0, null);

        return $r30;
    }

    static final boolean isEscapedDelimeter(java.lang.String, int)
    {
        int i0, $i1, $i3;
        char $c2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        $i1 = i0 - 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        $i3 = (int) $c2;

        if $i3 != 92 goto label2;

        return 1;

     label2:
        return 0;
    }

    static final boolean isDoubleEscaped(java.lang.String, int)
    {
        int i0, $i1, $i3;
        char $c2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 < 2 goto label1;

        $i1 = i0 - 2;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        $i3 = (int) $c2;

        if $i3 != 92 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static void deeplyAppendParameter(java.lang.StringBuffer, java.lang.Object, java.util.Map)
    {
        byte[] $r18, $r19;
        java.lang.Object[] $r3, $r5;
        double[] $r6, $r7;
        float[] $r8, $r9;
        long[] $r10, $r11;
        int[] $r12, $r13;
        java.lang.StringBuffer r2;
        java.util.Map r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        boolean[] $r20, $r21;
        char[] $r16, $r17;
        java.lang.Object r0;
        java.lang.Class $r1;
        short[] $r14, $r15;

        r2 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.util.Map;

        if r0 != null goto label01;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("null");

        return;

     label01:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label02;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>(r2, r0);

        goto label11;

     label02:
        $z1 = r0 instanceof boolean[];

        if $z1 == 0 goto label03;

        $r20 = (boolean[]) r0;

        $r21 = (boolean[]) $r20;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void booleanArrayAppend(java.lang.StringBuffer,boolean[])>(r2, $r21);

        goto label11;

     label03:
        $z2 = r0 instanceof byte[];

        if $z2 == 0 goto label04;

        $r18 = (byte[]) r0;

        $r19 = (byte[]) $r18;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void byteArrayAppend(java.lang.StringBuffer,byte[])>(r2, $r19);

        goto label11;

     label04:
        $z3 = r0 instanceof char[];

        if $z3 == 0 goto label05;

        $r16 = (char[]) r0;

        $r17 = (char[]) $r16;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void charArrayAppend(java.lang.StringBuffer,char[])>(r2, $r17);

        goto label11;

     label05:
        $z4 = r0 instanceof short[];

        if $z4 == 0 goto label06;

        $r14 = (short[]) r0;

        $r15 = (short[]) $r14;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void shortArrayAppend(java.lang.StringBuffer,short[])>(r2, $r15);

        goto label11;

     label06:
        $z5 = r0 instanceof int[];

        if $z5 == 0 goto label07;

        $r12 = (int[]) r0;

        $r13 = (int[]) $r12;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void intArrayAppend(java.lang.StringBuffer,int[])>(r2, $r13);

        goto label11;

     label07:
        $z6 = r0 instanceof long[];

        if $z6 == 0 goto label08;

        $r10 = (long[]) r0;

        $r11 = (long[]) $r10;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void longArrayAppend(java.lang.StringBuffer,long[])>(r2, $r11);

        goto label11;

     label08:
        $z7 = r0 instanceof float[];

        if $z7 == 0 goto label09;

        $r8 = (float[]) r0;

        $r9 = (float[]) $r8;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void floatArrayAppend(java.lang.StringBuffer,float[])>(r2, $r9);

        goto label11;

     label09:
        $z8 = r0 instanceof double[];

        if $z8 == 0 goto label10;

        $r6 = (double[]) r0;

        $r7 = (double[]) $r6;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void doubleArrayAppend(java.lang.StringBuffer,double[])>(r2, $r7);

        goto label11;

     label10:
        $r3 = (java.lang.Object[]) r0;

        $r5 = (java.lang.Object[]) $r3;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)>(r2, $r5, r4);

     label11:
        return;
    }

    private static void safeObjectAppend(java.lang.StringBuffer, java.lang.Object)
    {
        java.lang.Throwable $r3;
        java.io.PrintStream $r5;
        java.lang.StringBuffer r2, $r4, $r6, $r9, $r10;
        java.lang.Object r0;
        java.lang.Class $r7;
        java.lang.String $r1, $r8, $r11;

        r2 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.lang.Object;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SLF4J: Failed toString() invocation on an object of type [");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r11);

        virtualinvoke $r3.<java.lang.Throwable: void printStackTrace()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[FAILED toString()]");

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static void objectArrayAppend(java.lang.StringBuffer, java.lang.Object[], java.util.Map)
    {
        java.lang.Object[] r2;
        java.lang.StringBuffer r0;
        java.util.Map r1;
        int i0, $i1, i2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.lang.Object[];

        r1 := @parameter2: java.util.Map;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label4;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, null);

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r3 = r2[i2];

        staticinvoke <org.slf4j.helpers.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>(r0, $r3, r1);

        $i1 = i0 - 1;

        if i2 == $i1 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        interfaceinvoke r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        goto label5;

     label4:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

     label5:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        return;
    }

    private static void booleanArrayAppend(java.lang.StringBuffer, boolean[])
    {
        java.lang.StringBuffer r0;
        boolean[] r1;
        int i0, $i1, i2;
        boolean $z0;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: boolean[];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $z0 = r1[i2];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z0);

        $i1 = i0 - 1;

        if i2 == $i1 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        return;
    }

    private static void byteArrayAppend(java.lang.StringBuffer, byte[])
    {
        byte[] r1;
        byte $b1;
        java.lang.StringBuffer r0;
        int i0, $i2, i3, $i4;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: byte[];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $b1 = r1[i3];

        $i4 = (int) $b1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $i2 = i0 - 1;

        if i3 == $i2 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        return;
    }

    private static void charArrayAppend(java.lang.StringBuffer, char[])
    {
        java.lang.StringBuffer r0;
        int i0, $i2, i3;
        char[] r1;
        char $c1;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: char[];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $c1 = r1[i3];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        $i2 = i0 - 1;

        if i3 == $i2 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        return;
    }

    private static void shortArrayAppend(java.lang.StringBuffer, short[])
    {
        short $s1;
        java.lang.StringBuffer r0;
        int i0, $i2, i3, $i4;
        short[] r1;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: short[];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $s1 = r1[i3];

        $i4 = (int) $s1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $i2 = i0 - 1;

        if i3 == $i2 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        return;
    }

    private static void intArrayAppend(java.lang.StringBuffer, int[])
    {
        int[] r1;
        java.lang.StringBuffer r0;
        int i0, $i1, $i2, i3;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: int[];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $i1 = r1[i3];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $i2 = i0 - 1;

        if i3 == $i2 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        return;
    }

    private static void longArrayAppend(java.lang.StringBuffer, long[])
    {
        long[] r1;
        java.lang.StringBuffer r0;
        int i0, $i2, i3;
        long $l1;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: long[];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $l1 = r1[i3];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l1);

        $i2 = i0 - 1;

        if i3 == $i2 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        return;
    }

    private static void floatArrayAppend(java.lang.StringBuffer, float[])
    {
        java.lang.StringBuffer r0;
        int i0, $i1, i2;
        float $f0;
        float[] r1;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: float[];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $f0 = r1[i2];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f0);

        $i1 = i0 - 1;

        if i2 == $i1 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        return;
    }

    private static void doubleArrayAppend(java.lang.StringBuffer, double[])
    {
        java.lang.StringBuffer r0;
        double[] r1;
        int i0, $i1, i2;
        double $d0;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: double[];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $d0 = r1[i2];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);

        $i1 = i0 - 1;

        if i2 == $i1 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        return;
    }

    public static void <clinit>()
    {
        <org.slf4j.helpers.MessageFormatter: char ESCAPE_CHAR> = 92;

        <org.slf4j.helpers.MessageFormatter: java.lang.String DELIM_STR> = "{}";

        <org.slf4j.helpers.MessageFormatter: char DELIM_STOP> = 125;

        <org.slf4j.helpers.MessageFormatter: char DELIM_START> = 123;

        return;
    }
}
