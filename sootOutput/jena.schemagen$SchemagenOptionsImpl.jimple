public class jena.schemagen$SchemagenOptionsImpl extends java.lang.Object implements jena.schemagen$SchemagenOptions
{
    private java.util.List m_cmdLineArgs;
    private com.hp.hpl.jena.rdf.model.Resource m_root;
    private com.hp.hpl.jena.rdf.model.Model m_config;

    public void <init>(java.lang.String[])
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        java.lang.String[] r3;
        java.util.ArrayList $r1;
        jena.schemagen$SchemagenException $r9;
        com.hp.hpl.jena.util.FileManager $r5;
        java.lang.String $r7, $r13, r14;
        boolean $z0, $z1;
        java.lang.Exception $r8;
        java.util.List $r4;
        com.hp.hpl.jena.rdf.model.Model $r2, $r6;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        r3 := @parameter0: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<jena.schemagen$SchemagenOptionsImpl: java.util.List m_cmdLineArgs> = $r1;

        $r2 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Model m_config> = $r2;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        r0.<jena.schemagen$SchemagenOptionsImpl: java.util.List m_cmdLineArgs> = $r4;

        r14 = "file:schemagen.rdf";

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasConfigFileOption()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getConfigFileOption()>();

        r14 = staticinvoke <jena.schemagen$SchemagenUtils: java.lang.String urlCheck(java.lang.String)>($r7);

     label1:
        $r5 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager get()>();

        $r6 = r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Model m_config>;

        virtualinvoke $r5.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model readModel(com.hp.hpl.jena.rdf.model.Model,java.lang.String)>($r6, r14);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $z1 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>("file:schemagen.rdf");

        if $z1 != 0 goto label4;

        $r9 = new jena.schemagen$SchemagenException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read configuration from URL: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<jena.schemagen$SchemagenException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r8);

        throw $r9;

     label4:
        virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: void determineConfigRoot()>();

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected com.hp.hpl.jena.rdf.model.Model getConfigModel()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        com.hp.hpl.jena.rdf.model.Model $r1;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Model m_config>;

        return $r1;
    }

    protected com.hp.hpl.jena.rdf.model.Resource getConfigRoot()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        com.hp.hpl.jena.rdf.model.Resource $r1, $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Resource m_root>;

        if $r1 != null goto label1;

        virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: void determineConfigRoot()>();

     label1:
        $r2 = r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Resource m_root>;

        return $r2;
    }

    protected void determineConfigRoot()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1, $r11;
        com.hp.hpl.jena.rdf.model.StmtIterator $r6;
        com.hp.hpl.jena.rdf.model.Property $r4;
        java.lang.String $r13;
        boolean $z0, $z1;
        com.hp.hpl.jena.rdf.model.Statement $r9;
        com.hp.hpl.jena.rdf.model.Resource $r5, $r8, $r10, $r14;
        com.hp.hpl.jena.rdf.model.Model $r2, $r3, $r7, $r12;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT ROOT>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        if $z0 == 0 goto label1;

        $r12 = r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Model m_config>;

        $r11 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT ROOT>;

        $r13 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r11);

        $r14 = interfaceinvoke $r12.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Resource getResource(java.lang.String)>($r13);

        r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Resource m_root> = $r14;

        goto label3;

     label1:
        $r3 = r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Model m_config>;

        $r4 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r2 = r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Model m_config>;

        $r5 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Resource getResource(java.lang.String)>("http://jena.hpl.hp.com/2003/04/schemagen#Config");

        $r6 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r4, $r5);

        $z1 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r9 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Resource m_root> = $r10;

        goto label3;

     label2:
        $r7 = r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Model m_config>;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Resource createResource()>();

        r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Resource m_root> = $r8;

     label3:
        return;
    }

    protected boolean isTrue(jena.schemagen$SchemagenOptions$OPT)
    {
        java.util.List $r4;
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT r1;
        jena.schemagen$OptionDefinition $r2;
        com.hp.hpl.jena.rdf.model.Resource $r3;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        r1 := @parameter0: jena.schemagen$SchemagenOptions$OPT;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: jena.schemagen$OptionDefinition getOpt(jena.schemagen$SchemagenOptions$OPT)>(r1);

        $r4 = r0.<jena.schemagen$SchemagenOptionsImpl: java.util.List m_cmdLineArgs>;

        $r3 = r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Resource m_root>;

        $z0 = virtualinvoke $r2.<jena.schemagen$OptionDefinition: boolean isTrue(java.util.List,com.hp.hpl.jena.rdf.model.Resource)>($r4, $r3);

        return $z0;
    }

    protected boolean hasValue(jena.schemagen$SchemagenOptions$OPT)
    {
        java.util.List $r4;
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT r1;
        jena.schemagen$OptionDefinition $r2;
        com.hp.hpl.jena.rdf.model.Resource $r3;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        r1 := @parameter0: jena.schemagen$SchemagenOptions$OPT;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: jena.schemagen$OptionDefinition getOpt(jena.schemagen$SchemagenOptions$OPT)>(r1);

        $r4 = r0.<jena.schemagen$SchemagenOptionsImpl: java.util.List m_cmdLineArgs>;

        $r3 = r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Resource m_root>;

        $z0 = virtualinvoke $r2.<jena.schemagen$OptionDefinition: boolean hasValue(java.util.List,com.hp.hpl.jena.rdf.model.Resource)>($r4, $r3);

        return $z0;
    }

    protected com.hp.hpl.jena.rdf.model.RDFNode getValue(jena.schemagen$SchemagenOptions$OPT)
    {
        java.util.List $r4;
        com.hp.hpl.jena.rdf.model.RDFNode $r5;
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT r1;
        jena.schemagen$OptionDefinition $r2;
        com.hp.hpl.jena.rdf.model.Resource $r3;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        r1 := @parameter0: jena.schemagen$SchemagenOptions$OPT;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: jena.schemagen$OptionDefinition getOpt(jena.schemagen$SchemagenOptions$OPT)>(r1);

        $r4 = r0.<jena.schemagen$SchemagenOptionsImpl: java.util.List m_cmdLineArgs>;

        $r3 = r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Resource m_root>;

        $r5 = virtualinvoke $r2.<jena.schemagen$OptionDefinition: com.hp.hpl.jena.rdf.model.RDFNode getValue(java.util.List,com.hp.hpl.jena.rdf.model.Resource)>($r4, $r3);

        return $r5;
    }

    protected java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)
    {
        java.util.List $r4;
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT r1;
        java.lang.String $r5;
        jena.schemagen$OptionDefinition $r2;
        com.hp.hpl.jena.rdf.model.Resource $r3;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        r1 := @parameter0: jena.schemagen$SchemagenOptions$OPT;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: jena.schemagen$OptionDefinition getOpt(jena.schemagen$SchemagenOptions$OPT)>(r1);

        $r4 = r0.<jena.schemagen$SchemagenOptionsImpl: java.util.List m_cmdLineArgs>;

        $r3 = r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Resource m_root>;

        $r5 = virtualinvoke $r2.<jena.schemagen$OptionDefinition: java.lang.String getStringValue(java.util.List,com.hp.hpl.jena.rdf.model.Resource)>($r4, $r3);

        return $r5;
    }

    protected boolean hasResourceValue(jena.schemagen$SchemagenOptions$OPT)
    {
        java.util.List $r4;
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT r1;
        jena.schemagen$OptionDefinition $r2;
        com.hp.hpl.jena.rdf.model.Resource $r3;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        r1 := @parameter0: jena.schemagen$SchemagenOptions$OPT;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: jena.schemagen$OptionDefinition getOpt(jena.schemagen$SchemagenOptions$OPT)>(r1);

        $r4 = r0.<jena.schemagen$SchemagenOptionsImpl: java.util.List m_cmdLineArgs>;

        $r3 = r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Resource m_root>;

        $z0 = virtualinvoke $r2.<jena.schemagen$OptionDefinition: boolean hasResourceValue(java.util.List,com.hp.hpl.jena.rdf.model.Resource)>($r4, $r3);

        return $z0;
    }

    protected com.hp.hpl.jena.rdf.model.Resource getResource(jena.schemagen$SchemagenOptions$OPT)
    {
        java.util.List $r4;
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT r1;
        jena.schemagen$OptionDefinition $r2;
        com.hp.hpl.jena.rdf.model.Resource $r3, $r5;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        r1 := @parameter0: jena.schemagen$SchemagenOptions$OPT;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: jena.schemagen$OptionDefinition getOpt(jena.schemagen$SchemagenOptions$OPT)>(r1);

        $r4 = r0.<jena.schemagen$SchemagenOptionsImpl: java.util.List m_cmdLineArgs>;

        $r3 = r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Resource m_root>;

        $r5 = virtualinvoke $r2.<jena.schemagen$OptionDefinition: com.hp.hpl.jena.rdf.model.Resource getResource(java.util.List,com.hp.hpl.jena.rdf.model.Resource)>($r4, $r3);

        return $r5;
    }

    protected java.util.List getAllValues(jena.schemagen$SchemagenOptions$OPT)
    {
        jena.schemagen$SchemagenOptionsImpl r1;
        jena.schemagen$SchemagenOptions$OPT r2;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r8;
        com.hp.hpl.jena.rdf.model.Property $r6;
        java.lang.String $r12, $r13, $r15, r17;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r5;
        com.hp.hpl.jena.rdf.model.RDFNode $r10;
        jena.schemagen$OptionDefinition $r3;
        com.hp.hpl.jena.rdf.model.Statement $r9;
        com.hp.hpl.jena.rdf.model.Resource $r7, $r11;
        java.util.List $r4;
        java.lang.Object $r14, $r16;

        r1 := @this: jena.schemagen$SchemagenOptionsImpl;

        r2 := @parameter0: jena.schemagen$SchemagenOptions$OPT;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r1.<jena.schemagen$SchemagenOptionsImpl: jena.schemagen$OptionDefinition getOpt(jena.schemagen$SchemagenOptions$OPT)>(r2);

        $r4 = r1.<jena.schemagen$SchemagenOptionsImpl: java.util.List m_cmdLineArgs>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r14;

        $r15 = $r3.<jena.schemagen$OptionDefinition: java.lang.String m_cmdLineForm>;

        $z3 = virtualinvoke r17.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z3 == 0 goto label2;

        $r16 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r16);

     label2:
        goto label1;

     label3:
        $r7 = r1.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Resource m_root>;

        $r6 = $r3.<jena.schemagen$OptionDefinition: com.hp.hpl.jena.rdf.model.Property m_prop>;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r6);

     label4:
        $z1 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z2 = $r10 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z2 == 0 goto label5;

        $r13 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Statement: java.lang.String getString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label6;

     label5:
        $r11 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

     label6:
        goto label4;

     label7:
        return $r0;
    }

    protected jena.schemagen$OptionDefinition getOpt(jena.schemagen$SchemagenOptions$OPT)
    {
        java.lang.Object[] $r2, $r6;
        jena.schemagen$SchemagenOptions$OPT r3;
        jena.schemagen$SchemagenOptionsImpl r9;
        jena.schemagen$OptionDefinition $r8;
        java.lang.Object[][] $r0, $r1, $r5;
        int $i0, i1;
        java.lang.Object $r4, $r7;

        r9 := @this: jena.schemagen$SchemagenOptionsImpl;

        r3 := @parameter0: jena.schemagen$SchemagenOptions$OPT;

        i1 = 0;

     label1:
        $r0 = <jena.schemagen$SchemagenOptionsImpl: java.lang.Object[][] m_optionDefinitions>;

        $i0 = lengthof $r0;

        if i1 >= $i0 goto label3;

        $r1 = <jena.schemagen$SchemagenOptionsImpl: java.lang.Object[][] m_optionDefinitions>;

        $r2 = $r1[i1];

        $r4 = $r2[0];

        if $r4 != r3 goto label2;

        $r5 = <jena.schemagen$SchemagenOptionsImpl: java.lang.Object[][] m_optionDefinitions>;

        $r6 = $r5[i1];

        $r7 = $r6[1];

        $r8 = (jena.schemagen$OptionDefinition) $r7;

        return $r8;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public boolean hasConfigFileOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT CONFIG_FILE>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getConfigFileOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT CONFIG_FILE>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasRootOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT ROOT>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getRootOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT ROOT>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasNoCommentsOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT NO_COMMENTS>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getNoCommentsOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT NO_COMMENTS>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasInputOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT INPUT>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public com.hp.hpl.jena.rdf.model.Resource getInputOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        com.hp.hpl.jena.rdf.model.Resource $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT INPUT>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Resource getResource(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasLangOwlOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT LANG_OWL>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getLangOwlOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT LANG_OWL>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasLangRdfsOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT LANG_RDFS>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getLangRdfsOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT LANG_RDFS>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasOutputOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT OUTPUT>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getOutputOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT OUTPUT>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasHeaderOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT HEADER>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getHeaderOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT HEADER>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasFooterOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT FOOTER>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getFooterOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT FOOTER>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasMarkerOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT MARKER>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getMarkerOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT MARKER>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasPackagenameOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT PACKAGENAME>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getPackagenameOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT PACKAGENAME>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasOntologyOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT ONTOLOGY>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getOntologyOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT ONTOLOGY>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasClassnameOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT CLASSNAME>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getClassnameOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT CLASSNAME>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasClassdecOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT CLASSDEC>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getClassdecOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT CLASSDEC>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasNamespaceOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT NAMESPACE>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public com.hp.hpl.jena.rdf.model.Resource getNamespaceOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        com.hp.hpl.jena.rdf.model.Resource $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT NAMESPACE>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: com.hp.hpl.jena.rdf.model.Resource getResource(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasDeclarationsOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT DECLARATIONS>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getDeclarationsOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT DECLARATIONS>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasPropertySectionOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT PROPERTY_SECTION>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getPropertySectionOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT PROPERTY_SECTION>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasClassSectionOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT CLASS_SECTION>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getClassSectionOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT CLASS_SECTION>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasIndividualsSectionOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT INDIVIDUALS_SECTION>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getIndividualsSectionOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT INDIVIDUALS_SECTION>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasNopropertiesOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT NOPROPERTIES>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public boolean hasNoclassesOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT NOCLASSES>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public boolean hasNoindividualsOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT NOINDIVIDUALS>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public boolean hasPropTemplateOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT PROP_TEMPLATE>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getPropTemplateOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT PROP_TEMPLATE>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasClassTemplateOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT CLASS_TEMPLATE>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getClassTemplateOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT CLASS_TEMPLATE>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasIndividualTemplateOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT INDIVIDUAL_TEMPLATE>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getIndividualTemplateOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT INDIVIDUAL_TEMPLATE>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasUcNamesOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT UC_NAMES>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public boolean hasIncludeOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT INCLUDE>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.util.List getIncludeOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.util.List $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT INCLUDE>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.util.List getAllValues(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasClassnameSuffixOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT CLASSNAME_SUFFIX>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getClassnameSuffixOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT CLASSNAME_SUFFIX>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasNoheaderOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT NOHEADER>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public boolean hasEncodingOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT ENCODING>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getEncodingOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT ENCODING>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasHelpOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT HELP>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean hasValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public java.lang.String getHelpOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        java.lang.String $r2;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT HELP>;

        $r2 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: java.lang.String getStringValue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $r2;
    }

    public boolean hasDosOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT DOS>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public boolean hasUseInfOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT USE_INF>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public boolean hasStrictIndividualsOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT STRICT_INDIVIDUALS>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public boolean hasIncludeSourceOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT INCLUDE_SOURCE>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }

    public boolean hasNoStrictOption()
    {
        jena.schemagen$SchemagenOptionsImpl r0;
        jena.schemagen$SchemagenOptions$OPT $r1;
        boolean $z0;

        r0 := @this: jena.schemagen$SchemagenOptionsImpl;

        $r1 = <jena.schemagen$SchemagenOptions$OPT: jena.schemagen$SchemagenOptions$OPT NO_STRICT>;

        $z0 = virtualinvoke r0.<jena.schemagen$SchemagenOptionsImpl: boolean isTrue(jena.schemagen$SchemagenOptions$OPT)>($r1);

        return $z0;
    }
}
