public abstract class com.ctc.wstx.sr.InputElementStack extends java.lang.Object implements org.codehaus.stax2.AttributeInfo, javax.xml.namespace.NamespaceContext, org.codehaus.stax2.validation.ValidationContext
{
    static final int ID_ATTR_NONE;
    protected final com.ctc.wstx.api.ReaderConfig mConfig;
    protected com.ctc.wstx.sr.InputProblemReporter mReporter;
    protected org.codehaus.stax2.validation.XMLValidator mValidator;
    protected int mIdAttrIndex;

    protected void <init>(com.ctc.wstx.api.ReaderConfig)
    {
        int $i1;
        com.ctc.wstx.sr.InputElementStack r0;
        com.ctc.wstx.api.ReaderConfig r1;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        r1 := @parameter0: com.ctc.wstx.api.ReaderConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ctc.wstx.sr.InputElementStack: com.ctc.wstx.sr.InputProblemReporter mReporter> = null;

        r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator> = null;

        $i1 = (int) -1;

        r0.<com.ctc.wstx.sr.InputElementStack: int mIdAttrIndex> = $i1;

        r0.<com.ctc.wstx.sr.InputElementStack: com.ctc.wstx.api.ReaderConfig mConfig> = r1;

        return;
    }

    protected void connectReporter(com.ctc.wstx.sr.InputProblemReporter)
    {
        com.ctc.wstx.sr.InputElementStack r0;
        com.ctc.wstx.sr.InputProblemReporter r1;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        r1 := @parameter0: com.ctc.wstx.sr.InputProblemReporter;

        r0.<com.ctc.wstx.sr.InputElementStack: com.ctc.wstx.sr.InputProblemReporter mReporter> = r1;

        return;
    }

    protected org.codehaus.stax2.validation.XMLValidator addValidator(org.codehaus.stax2.validation.XMLValidator)
    {
        org.codehaus.stax2.validation.ValidatorPair $r2;
        org.codehaus.stax2.validation.XMLValidator $r1, r3, $r4;
        com.ctc.wstx.sr.InputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        r3 := @parameter0: org.codehaus.stax2.validation.XMLValidator;

        $r1 = r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r1 != null goto label1;

        r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator> = r3;

        goto label2;

     label1:
        $r2 = new org.codehaus.stax2.validation.ValidatorPair;

        $r4 = r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        specialinvoke $r2.<org.codehaus.stax2.validation.ValidatorPair: void <init>(org.codehaus.stax2.validation.XMLValidator,org.codehaus.stax2.validation.XMLValidator)>($r4, r3);

        r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator> = $r2;

     label2:
        return r3;
    }

    protected abstract void setAutomaticDTDValidator(org.codehaus.stax2.validation.XMLValidator, com.ctc.wstx.sr.NsDefaultProvider);

    public org.codehaus.stax2.validation.XMLValidator validateAgainst(org.codehaus.stax2.validation.XMLValidationSchema) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.validation.XMLValidator $r2, $r3;
        org.codehaus.stax2.validation.XMLValidationSchema r1;
        com.ctc.wstx.sr.InputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        r1 := @parameter0: org.codehaus.stax2.validation.XMLValidationSchema;

        $r2 = interfaceinvoke r1.<org.codehaus.stax2.validation.XMLValidationSchema: org.codehaus.stax2.validation.XMLValidator createValidator(org.codehaus.stax2.validation.ValidationContext)>(r0);

        $r3 = virtualinvoke r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator addValidator(org.codehaus.stax2.validation.XMLValidator)>($r2);

        return $r3;
    }

    public org.codehaus.stax2.validation.XMLValidator stopValidatingAgainst(org.codehaus.stax2.validation.XMLValidationSchema) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.validation.XMLValidator[] r0;
        org.codehaus.stax2.validation.XMLValidator $r3, r4, $r5;
        org.codehaus.stax2.validation.XMLValidationSchema r2;
        com.ctc.wstx.sr.InputElementStack r1;
        boolean $z0;

        r1 := @this: com.ctc.wstx.sr.InputElementStack;

        r2 := @parameter0: org.codehaus.stax2.validation.XMLValidationSchema;

        r0 = newarray (org.codehaus.stax2.validation.XMLValidator)[2];

        $r3 = r1.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $z0 = staticinvoke <org.codehaus.stax2.validation.ValidatorPair: boolean removeValidator(org.codehaus.stax2.validation.XMLValidator,org.codehaus.stax2.validation.XMLValidationSchema,org.codehaus.stax2.validation.XMLValidator[])>($r3, r2, r0);

        if $z0 == 0 goto label1;

        r4 = r0[0];

        $r5 = r0[1];

        r1.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator> = $r5;

        virtualinvoke r4.<org.codehaus.stax2.validation.XMLValidator: void validationCompleted(boolean)>(0);

        return r4;

     label1:
        return null;
    }

    public org.codehaus.stax2.validation.XMLValidator stopValidatingAgainst(org.codehaus.stax2.validation.XMLValidator) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.validation.XMLValidator[] r0;
        org.codehaus.stax2.validation.XMLValidator r2, $r3, r4, $r5;
        com.ctc.wstx.sr.InputElementStack r1;
        boolean $z0;

        r1 := @this: com.ctc.wstx.sr.InputElementStack;

        r2 := @parameter0: org.codehaus.stax2.validation.XMLValidator;

        r0 = newarray (org.codehaus.stax2.validation.XMLValidator)[2];

        $r3 = r1.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $z0 = staticinvoke <org.codehaus.stax2.validation.ValidatorPair: boolean removeValidator(org.codehaus.stax2.validation.XMLValidator,org.codehaus.stax2.validation.XMLValidator,org.codehaus.stax2.validation.XMLValidator[])>($r3, r2, r0);

        if $z0 == 0 goto label1;

        r4 = r0[0];

        $r5 = r0[1];

        r1.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator> = $r5;

        virtualinvoke r4.<org.codehaus.stax2.validation.XMLValidator: void validationCompleted(boolean)>(0);

        return r4;

     label1:
        return null;
    }

    protected boolean reallyValidating()
    {
        org.codehaus.stax2.validation.XMLValidator $r1, $r2, $r3;
        com.ctc.wstx.sr.InputElementStack r0;
        com.ctc.wstx.dtd.DTDValidatorBase $r4;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        $r1 = r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $z0 = $r2 instanceof com.ctc.wstx.dtd.DTDValidatorBase;

        if $z0 != 0 goto label2;

        return 1;

     label2:
        $r3 = r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r4 = (com.ctc.wstx.dtd.DTDValidatorBase) $r3;

        $z1 = virtualinvoke $r4.<com.ctc.wstx.dtd.DTDValidatorBase: boolean reallyValidating()>();

        return $z1;
    }

    protected abstract com.ctc.wstx.sr.AttributeCollector getAttrCollector();

    public abstract com.ctc.wstx.util.BaseNsContext createNonTransientNsContext(javax.xml.stream.Location);

    public abstract void push(java.lang.String, java.lang.String);

    public abstract void push(java.lang.String);

    public abstract int pop() throws javax.xml.stream.XMLStreamException;

    public abstract int resolveAndValidateElement() throws javax.xml.stream.XMLStreamException;

    public abstract int getAttributeCount();

    public abstract int findAttributeIndex(java.lang.String, java.lang.String);

    public final int getIdAttributeIndex()
    {
        org.codehaus.stax2.validation.XMLValidator $r1, $r2;
        int $i0, $i1, $i2, $i4;
        com.ctc.wstx.sr.InputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.InputElementStack: int mIdAttrIndex>;

        if $i0 < 0 goto label1;

        $i1 = r0.<com.ctc.wstx.sr.InputElementStack: int mIdAttrIndex>;

        return $i1;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r1 != null goto label2;

        $i4 = (int) -1;

        $i2 = $i4;

        goto label3;

     label2:
        $r2 = r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $i2 = virtualinvoke $r2.<org.codehaus.stax2.validation.XMLValidator: int getIdAttrIndex()>();

     label3:
        return $i2;
    }

    public final int getNotationAttributeIndex()
    {
        org.codehaus.stax2.validation.XMLValidator $r1, $r2;
        int $i0, $i2;
        com.ctc.wstx.sr.InputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        $r1 = r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r1 != null goto label1;

        $i2 = (int) -1;

        $i0 = $i2;

        goto label2;

     label1:
        $r2 = r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $i0 = virtualinvoke $r2.<org.codehaus.stax2.validation.XMLValidator: int getNotationAttrIndex()>();

     label2:
        return $i0;
    }

    public abstract java.lang.String getNamespaceURI(java.lang.String);

    public abstract java.lang.String getPrefix(java.lang.String);

    public abstract java.util.Iterator getPrefixes(java.lang.String);

    public final java.lang.String getXmlVersion()
    {
        com.ctc.wstx.sr.InputElementStack r0;
        java.lang.String $r2;
        com.ctc.wstx.api.ReaderConfig $r1;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        $r1 = r0.<com.ctc.wstx.sr.InputElementStack: com.ctc.wstx.api.ReaderConfig mConfig>;

        $z0 = virtualinvoke $r1.<com.ctc.wstx.api.ReaderConfig: boolean isXml11()>();

        if $z0 == 0 goto label1;

        $r2 = "1.1";

        goto label2;

     label1:
        $r2 = "1.0";

     label2:
        return $r2;
    }

    public java.lang.String getAttributeLocalName(int)
    {
        com.ctc.wstx.sr.AttributeCollector $r1;
        int i0;
        com.ctc.wstx.sr.InputElementStack r0;
        java.lang.String $r2;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.ctc.wstx.sr.InputElementStack: com.ctc.wstx.sr.AttributeCollector getAttrCollector()>();

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.AttributeCollector: java.lang.String getLocalName(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributeNamespace(int)
    {
        com.ctc.wstx.sr.AttributeCollector $r1;
        int i0;
        com.ctc.wstx.sr.InputElementStack r0;
        java.lang.String $r2;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.ctc.wstx.sr.InputElementStack: com.ctc.wstx.sr.AttributeCollector getAttrCollector()>();

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.AttributeCollector: java.lang.String getURI(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributePrefix(int)
    {
        com.ctc.wstx.sr.AttributeCollector $r1;
        int i0;
        com.ctc.wstx.sr.InputElementStack r0;
        java.lang.String $r2;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.ctc.wstx.sr.InputElementStack: com.ctc.wstx.sr.AttributeCollector getAttrCollector()>();

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.AttributeCollector: java.lang.String getPrefix(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributeValue(int)
    {
        com.ctc.wstx.sr.AttributeCollector $r1;
        int i0;
        com.ctc.wstx.sr.InputElementStack r0;
        java.lang.String $r2;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.ctc.wstx.sr.InputElementStack: com.ctc.wstx.sr.AttributeCollector getAttrCollector()>();

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.AttributeCollector: java.lang.String getValue(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        int $i0;
        com.ctc.wstx.sr.InputElementStack r0;
        java.lang.String r1, r2, $r3;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<com.ctc.wstx.sr.InputElementStack: int findAttributeIndex(java.lang.String,java.lang.String)>(r1, r2);

        if $i0 >= 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<com.ctc.wstx.sr.InputElementStack: java.lang.String getAttributeValue(int)>($i0);

     label2:
        return $r3;
    }

    public boolean isNotationDeclared(java.lang.String)
    {
        com.ctc.wstx.sr.InputElementStack r0;
        java.lang.String r1;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public boolean isUnparsedEntityDeclared(java.lang.String)
    {
        com.ctc.wstx.sr.InputElementStack r0;
        java.lang.String r1;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public java.lang.String getBaseUri()
    {
        com.ctc.wstx.sr.InputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        return null;
    }

    public abstract javax.xml.namespace.QName getCurrentElementName();

    public javax.xml.stream.Location getValidationLocation()
    {
        com.ctc.wstx.sr.InputElementStack r0;
        com.ctc.wstx.sr.InputProblemReporter $r1;
        javax.xml.stream.Location $r2;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        $r1 = r0.<com.ctc.wstx.sr.InputElementStack: com.ctc.wstx.sr.InputProblemReporter mReporter>;

        $r2 = interfaceinvoke $r1.<com.ctc.wstx.sr.InputProblemReporter: javax.xml.stream.Location getLocation()>();

        return $r2;
    }

    public void reportProblem(org.codehaus.stax2.validation.XMLValidationProblem) throws org.codehaus.stax2.validation.XMLValidationException
    {
        org.codehaus.stax2.validation.XMLValidationProblem r1;
        com.ctc.wstx.sr.InputElementStack r0;
        com.ctc.wstx.sr.InputProblemReporter $r2;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        r1 := @parameter0: org.codehaus.stax2.validation.XMLValidationProblem;

        $r2 = r0.<com.ctc.wstx.sr.InputElementStack: com.ctc.wstx.sr.InputProblemReporter mReporter>;

        interfaceinvoke $r2.<com.ctc.wstx.sr.InputProblemReporter: void reportValidationProblem(org.codehaus.stax2.validation.XMLValidationProblem)>(r1);

        return;
    }

    public abstract int addDefaultAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

    public abstract boolean isPrefixLocallyDeclared(java.lang.String);

    public abstract void addNsBinding(java.lang.String, java.lang.String);

    public final void validateText(com.ctc.wstx.util.TextBuffer, boolean) throws org.codehaus.stax2.validation.XMLValidationException
    {
        com.ctc.wstx.util.TextBuffer r0;
        org.codehaus.stax2.validation.XMLValidator $r2;
        com.ctc.wstx.sr.InputElementStack r1;
        boolean z0;

        r1 := @this: com.ctc.wstx.sr.InputElementStack;

        r0 := @parameter0: com.ctc.wstx.util.TextBuffer;

        z0 := @parameter1: boolean;

        $r2 = r1.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        virtualinvoke r0.<com.ctc.wstx.util.TextBuffer: void validateText(org.codehaus.stax2.validation.XMLValidator,boolean)>($r2, z0);

        return;
    }

    public abstract boolean isNamespaceAware();

    public abstract int getDepth();

    public abstract boolean isEmpty();

    public abstract java.lang.String getDefaultNsURI();

    public abstract java.lang.String getNsURI();

    public abstract java.lang.String getPrefix();

    public abstract java.lang.String getLocalName();

    public abstract boolean matches(java.lang.String, java.lang.String);

    public abstract java.lang.String getTopElementDesc();

    public abstract int getTotalNsCount();

    public abstract int getCurrentNsCount();

    public abstract java.lang.String getLocalNsPrefix(int);

    public abstract java.lang.String getLocalNsURI(int);

    public final java.lang.String getAttributeType(int)
    {
        org.codehaus.stax2.validation.XMLValidator $r1, $r2;
        int i0, $i1;
        com.ctc.wstx.sr.InputElementStack r0;
        java.lang.String $r3;

        r0 := @this: com.ctc.wstx.sr.InputElementStack;

        i0 := @parameter0: int;

        $i1 = r0.<com.ctc.wstx.sr.InputElementStack: int mIdAttrIndex>;

        if i0 != $i1 goto label1;

        if i0 < 0 goto label1;

        return "ID";

     label1:
        $r1 = r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r1 != null goto label2;

        $r3 = "CDATA";

        goto label3;

     label2:
        $r2 = r0.<com.ctc.wstx.sr.InputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r3 = virtualinvoke $r2.<org.codehaus.stax2.validation.XMLValidator: java.lang.String getAttributeType(int)>(i0);

     label3:
        return $r3;
    }

    protected final void normalizeXmlIdAttr(com.ctc.wstx.sr.AttributeCollector, int)
    {
        com.ctc.wstx.sr.AttributeCollector r0;
        com.ctc.wstx.sr.InputElementStack r4;
        int i0, $i1, $i2, $i3;
        char[] $r2;
        java.lang.String $r3;
        com.ctc.wstx.util.TextBuilder $r1;

        r4 := @this: com.ctc.wstx.sr.InputElementStack;

        r0 := @parameter0: com.ctc.wstx.sr.AttributeCollector;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.ctc.wstx.sr.AttributeCollector: com.ctc.wstx.util.TextBuilder getAttrBuilder()>();

        $r2 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuilder: char[] getCharBuffer()>();

        $i1 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuilder: int getOffset(int)>(i0);

        $i2 = i0 + 1;

        $i3 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuilder: int getOffset(int)>($i2);

        $r3 = staticinvoke <com.ctc.wstx.util.StringUtil: java.lang.String normalizeSpaces(char[],int,int)>($r2, $i1, $i3);

        if $r3 == null goto label1;

        virtualinvoke r0.<com.ctc.wstx.sr.AttributeCollector: void setNormalizedValue(int,java.lang.String)>(i0, $r3);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.ctc.wstx.sr.InputElementStack: int ID_ATTR_NONE> = -1;

        return;
    }
}
