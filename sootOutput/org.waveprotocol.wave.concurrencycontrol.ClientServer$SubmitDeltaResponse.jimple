public final class org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse extends com.google.protobuf.GeneratedMessage
{
    private static final org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse defaultInstance;
    public static final int STATUS_FIELD_NUMBER;
    private boolean hasStatus;
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus status_;
    public static final int OPERATIONSAPPLIED_FIELD_NUMBER;
    private boolean hasOperationsApplied;
    private int operationsApplied_;
    public static final int HASHEDVERSIONAFTERAPPLICATION_FIELD_NUMBER;
    private boolean hasHashedVersionAfterApplication;
    private org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion hashedVersionAfterApplication_;
    public static final int TIMESTAMPAFTERAPPLICATION_FIELD_NUMBER;
    private boolean hasTimestampAfterApplication;
    private long timestampAfterApplication_;
    private int memoizedSerializedSize;

    private void <init>()
    {
        int $i1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        specialinvoke r0.<com.google.protobuf.GeneratedMessage: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int operationsApplied_> = 0;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: long timestampAfterApplication_> = 0L;

        $i1 = (int) -1;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int memoizedSerializedSize> = $i1;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: void initFields()>();

        return;
    }

    private void <init>(boolean)
    {
        int $i1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.google.protobuf.GeneratedMessage: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int operationsApplied_> = 0;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: long timestampAfterApplication_> = 0L;

        $i1 = (int) -1;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int memoizedSerializedSize> = $i1;

        return;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse getDefaultInstance()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r0;

        $r0 = <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse defaultInstance>;

        return $r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r0, r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r0 = <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse defaultInstance>;

        return $r0;
    }

    public static final com.google.protobuf.Descriptors$Descriptor getDescriptor()
    {
        com.google.protobuf.Descriptors$Descriptor $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer: com.google.protobuf.Descriptors$Descriptor access$12900()>();

        return $r0;
    }

    protected com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r1;
        com.google.protobuf.GeneratedMessage$FieldAccessorTable $r0;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer: com.google.protobuf.GeneratedMessage$FieldAccessorTable access$13000()>();

        return $r0;
    }

    public boolean hasStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasStatus>;

        return $z0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus status_>;

        return $r1;
    }

    public boolean hasOperationsApplied()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasOperationsApplied>;

        return $z0;
    }

    public int getOperationsApplied()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $i0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int operationsApplied_>;

        return $i0;
    }

    public boolean hasHashedVersionAfterApplication()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasHashedVersionAfterApplication>;

        return $z0;
    }

    public org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getHashedVersionAfterApplication()
    {
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion hashedVersionAfterApplication_>;

        return $r1;
    }

    public boolean hasTimestampAfterApplication()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasTimestampAfterApplication>;

        return $z0;
    }

    public long getTimestampAfterApplication()
    {
        long $l0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $l0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: long timestampAfterApplication_>;

        return $l0;
    }

    private void initFields()
    {
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getDefaultInstance()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus status_> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getDefaultInstance()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion hashedVersionAfterApplication_> = $r2;

        return;
    }

    public final boolean isInitialized()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r1;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasStatus>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasOperationsApplied>;

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getStatus()>();

        $z2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: boolean isInitialized()>();

        if $z2 != 0 goto label3;

        return 0;

     label3:
        $z3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasHashedVersionAfterApplication()>();

        if $z3 == 0 goto label4;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getHashedVersionAfterApplication()>();

        $z4 = virtualinvoke $r2.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: boolean isInitialized()>();

        if $z4 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream) throws java.io.IOException
    {
        com.google.protobuf.UnknownFieldSet $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        long $l0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r4;
        int $i1;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r3;
        com.google.protobuf.CodedOutputStream r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        r2 := @parameter0: com.google.protobuf.CodedOutputStream;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int getSerializedSize()>();

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasStatus()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getStatus()>();

        virtualinvoke r2.<com.google.protobuf.CodedOutputStream: void writeMessage(int,com.google.protobuf.MessageLite)>(1, $r4);

     label1:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasOperationsApplied()>();

        if $z1 == 0 goto label2;

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int getOperationsApplied()>();

        virtualinvoke r2.<com.google.protobuf.CodedOutputStream: void writeInt32(int,int)>(2, $i1);

     label2:
        $z2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasHashedVersionAfterApplication()>();

        if $z2 == 0 goto label3;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getHashedVersionAfterApplication()>();

        virtualinvoke r2.<com.google.protobuf.CodedOutputStream: void writeMessage(int,com.google.protobuf.MessageLite)>(3, $r3);

     label3:
        $z3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasTimestampAfterApplication()>();

        if $z3 == 0 goto label4;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: long getTimestampAfterApplication()>();

        virtualinvoke r2.<com.google.protobuf.CodedOutputStream: void writeInt64(int,long)>(4, $l0);

     label4:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: com.google.protobuf.UnknownFieldSet getUnknownFields()>();

        virtualinvoke $r1.<com.google.protobuf.UnknownFieldSet: void writeTo(com.google.protobuf.CodedOutputStream)>(r2);

        return;
    }

    public int getSerializedSize()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        long $l1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r3;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i11;
        boolean $z0, $z1, $z2, $z3;
        com.google.protobuf.UnknownFieldSet $r1;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        i8 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int memoizedSerializedSize>;

        $i11 = (int) -1;

        if i8 == $i11 goto label1;

        return i8;

     label1:
        i9 = 0;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasStatus()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getStatus()>();

        $i7 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeMessageSize(int,com.google.protobuf.MessageLite)>(1, $r3);

        i9 = 0 + $i7;

     label2:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasOperationsApplied()>();

        if $z1 == 0 goto label3;

        $i5 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int getOperationsApplied()>();

        $i6 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeInt32Size(int,int)>(2, $i5);

        i9 = i9 + $i6;

     label3:
        $z2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasHashedVersionAfterApplication()>();

        if $z2 == 0 goto label4;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getHashedVersionAfterApplication()>();

        $i4 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeMessageSize(int,com.google.protobuf.MessageLite)>(3, $r2);

        i9 = i9 + $i4;

     label4:
        $z3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasTimestampAfterApplication()>();

        if $z3 == 0 goto label5;

        $l1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: long getTimestampAfterApplication()>();

        $i2 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeInt64Size(int,long)>(4, $l1);

        i9 = i9 + $i2;

     label5:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: com.google.protobuf.UnknownFieldSet getUnknownFields()>();

        $i0 = virtualinvoke $r1.<com.google.protobuf.UnknownFieldSet: int getSerializedSize()>();

        $i3 = i9 + $i0;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int memoizedSerializedSize> = $i3;

        return $i3;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse parseFrom(com.google.protobuf.ByteString) throws com.google.protobuf.InvalidProtocolBufferException
    {
        com.google.protobuf.ByteString r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r0, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r4;
        com.google.protobuf.AbstractMessage$Builder $r2;

        r1 := @parameter0: com.google.protobuf.ByteString;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.ByteString)>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse access$13100(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite) throws com.google.protobuf.InvalidProtocolBufferException
    {
        com.google.protobuf.ByteString r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r0, $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r5;
        com.google.protobuf.ExtensionRegistryLite r2;
        com.google.protobuf.AbstractMessage$Builder $r3;

        r1 := @parameter0: com.google.protobuf.ByteString;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder) $r3;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse access$13100(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder)>($r4);

        return $r5;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse parseFrom(byte[]) throws com.google.protobuf.InvalidProtocolBufferException
    {
        byte[] r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r0, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r4;
        com.google.protobuf.AbstractMessage$Builder $r2;

        r1 := @parameter0: byte[];

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(byte[])>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse access$13100(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite) throws com.google.protobuf.InvalidProtocolBufferException
    {
        byte[] r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r0, $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r5;
        com.google.protobuf.ExtensionRegistryLite r2;
        com.google.protobuf.AbstractMessage$Builder $r3;

        r1 := @parameter0: byte[];

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(byte[],com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder) $r3;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse access$13100(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder)>($r4);

        return $r5;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse parseFrom(java.io.InputStream) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r0, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r4;
        com.google.protobuf.AbstractMessage$Builder $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(java.io.InputStream)>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse access$13100(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse parseFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r0, $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r5;
        com.google.protobuf.ExtensionRegistryLite r2;
        com.google.protobuf.AbstractMessage$Builder $r3;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder) $r3;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse access$13100(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder)>($r4);

        return $r5;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse parseDelimitedFrom(java.io.InputStream) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r2;
        java.io.InputStream r1;
        boolean $z0;

        r1 := @parameter0: java.io.InputStream;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        $z0 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: boolean mergeDelimitedFrom(java.io.InputStream)>(r1);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse access$13100(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder)>($r0);

        return $r2;

     label1:
        return null;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse parseDelimitedFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r3;
        com.google.protobuf.ExtensionRegistryLite r2;
        java.io.InputStream r1;
        boolean $z0;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        $z0 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: boolean mergeDelimitedFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse access$13100(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder)>($r0);

        return $r3;

     label1:
        return null;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse parseFrom(com.google.protobuf.CodedInputStream) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r0, $r3;
        com.google.protobuf.CodedInputStream r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r4;
        com.google.protobuf.AbstractMessage$Builder $r2;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream)>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse access$13100(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse parseFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r0, $r3;
        com.google.protobuf.CodedInputStream r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r4;
        com.google.protobuf.ExtensionRegistryLite r2;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse access$13100(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder access$13200()>();

        return $r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilderForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        return $r0;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r0, $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r1;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder mergeFrom(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse)>(r1);

        return $r2;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder toBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse)>(r0);

        return $r1;
    }

    public volatile com.google.protobuf.Message$Builder toBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder toBuilder()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message$Builder newBuilderForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilderForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse getDefaultInstanceForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite$Builder toBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder toBuilder()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite$Builder newBuilderForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilderForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse getDefaultInstanceForType()>();

        return $r1;
    }

    void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$1)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$1 r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$1;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: void <init>()>();

        return;
    }

    static boolean access$13402(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasStatus> = z0;

        return z0;
    }

    static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$13502(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse, org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        r1 := @parameter1: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus status_> = r1;

        return r1;
    }

    static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$13500(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus status_>;

        return $r1;
    }

    static boolean access$13602(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasOperationsApplied> = z0;

        return z0;
    }

    static int access$13702(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse, int)
    {
        int i0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        i0 := @parameter1: int;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int operationsApplied_> = i0;

        return i0;
    }

    static boolean access$13802(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasHashedVersionAfterApplication> = z0;

        return z0;
    }

    static org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion access$13902(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        r1 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion hashedVersionAfterApplication_> = r1;

        return r1;
    }

    static org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion access$13900(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion hashedVersionAfterApplication_>;

        return $r1;
    }

    static boolean access$14002(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasTimestampAfterApplication> = z0;

        return z0;
    }

    static long access$14102(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse, long)
    {
        long l0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        l0 := @parameter1: long;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: long timestampAfterApplication_> = l0;

        return l0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r0, $r1;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int TIMESTAMPAFTERAPPLICATION_FIELD_NUMBER> = 4;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int HASHEDVERSIONAFTERAPPLICATION_FIELD_NUMBER> = 3;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int OPERATIONSAPPLIED_FIELD_NUMBER> = 2;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int STATUS_FIELD_NUMBER> = 1;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: void <init>(boolean)>(1);

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse defaultInstance> = $r0;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer: void internalForceInit()>();

        $r1 = <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse defaultInstance>;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: void initFields()>();

        return;
    }
}
