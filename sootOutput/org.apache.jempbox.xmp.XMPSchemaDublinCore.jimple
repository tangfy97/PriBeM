public class org.apache.jempbox.xmp.XMPSchemaDublinCore extends org.apache.jempbox.xmp.XMPSchema
{
    public static final java.lang.String NAMESPACE;

    public void <init>(org.apache.jempbox.xmp.XMPMetadata)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        org.apache.jempbox.xmp.XMPMetadata r1;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r1 := @parameter0: org.apache.jempbox.xmp.XMPMetadata;

        specialinvoke r0.<org.apache.jempbox.xmp.XMPSchema: void <init>(org.apache.jempbox.xmp.XMPMetadata,java.lang.String,java.lang.String)>(r1, "dc", "http://purl.org/dc/elements/1.1/");

        return;
    }

    public void <init>(org.w3c.dom.Element, java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        org.w3c.dom.Element r1;
        java.lang.String r2;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jempbox.xmp.XMPSchema: void <init>(org.w3c.dom.Element,java.lang.String)>(r1, r2);

        return;
    }

    public void removeContributor(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":contributor");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void removeBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public void addContributor(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":contributor");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void addBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.util.List getContributors()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.util.List $r6;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":contributor");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getBagList(java.lang.String)>($r5);

        return $r6;
    }

    public void setCoverage(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":coverage");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void setTextProperty(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.lang.String getCoverage()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":coverage");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String getTextProperty(java.lang.String)>($r5);

        return $r6;
    }

    public void removeCreator(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":creator");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void removeSequenceValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public void addCreator(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":creator");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void addSequenceValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.util.List getCreators()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.util.List $r6;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":creator");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getSequenceList(java.lang.String)>($r5);

        return $r6;
    }

    public void removeDate(java.util.Calendar)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.util.Calendar r6;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.util.Calendar;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":date");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void removeSequenceDateValue(java.lang.String,java.util.Calendar)>($r5, r6);

        return;
    }

    public void addDate(java.util.Calendar)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.util.Calendar r6;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.util.Calendar;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":date");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void addSequenceDateValue(java.lang.String,java.util.Calendar)>($r5, r6);

        return;
    }

    public java.util.List getDates() throws java.io.IOException
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.util.List $r6;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":date");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getSequenceDateList(java.lang.String)>($r5);

        return $r6;
    }

    public void setDescription(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":description");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void setLanguageProperty(java.lang.String,java.lang.String,java.lang.String)>($r5, null, r6);

        return;
    }

    public java.lang.String getDescription()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":description");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String getLanguageProperty(java.lang.String,java.lang.String)>($r5, null);

        return $r6;
    }

    public void setDescription(java.lang.String, java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6, r7;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":description");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void setLanguageProperty(java.lang.String,java.lang.String,java.lang.String)>($r5, r6, r7);

        return;
    }

    public java.lang.String getDescription(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6, $r7;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":description");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String getLanguageProperty(java.lang.String,java.lang.String)>($r5, r6);

        return $r7;
    }

    public java.util.List getDescriptionLanguages()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.util.List $r6;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":description");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getLanguagePropertyLanguages(java.lang.String)>($r5);

        return $r6;
    }

    public void setFormat(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":format");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void setTextProperty(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.lang.String getFormat()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":format");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String getTextProperty(java.lang.String)>($r5);

        return $r6;
    }

    public void setIdentifier(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":identifier");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void setTextProperty(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.lang.String getIdentifier()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":identifier");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String getTextProperty(java.lang.String)>($r5);

        return $r6;
    }

    public void removeLanguage(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":language");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void removeBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public void addLanguage(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":language");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void addBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.util.List getLanguages()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.util.List $r6;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":language");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getBagList(java.lang.String)>($r5);

        return $r6;
    }

    public void removePublisher(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":publisher");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void removeBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public void addPublisher(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":publisher");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void addBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.util.List getPublishers()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.util.List $r6;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":publisher");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getBagList(java.lang.String)>($r5);

        return $r6;
    }

    public void removeRelation(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":relation");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void removeBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public void addRelation(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":relation");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void addBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.util.List getRelationships()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.util.List $r6;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":relation");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getBagList(java.lang.String)>($r5);

        return $r6;
    }

    public void setRights(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":rights");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void setLanguageProperty(java.lang.String,java.lang.String,java.lang.String)>($r5, null, r6);

        return;
    }

    public java.lang.String getRights()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":rights");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String getLanguageProperty(java.lang.String,java.lang.String)>($r5, null);

        return $r6;
    }

    public void setRights(java.lang.String, java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6, r7;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":rights");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void setLanguageProperty(java.lang.String,java.lang.String,java.lang.String)>($r5, r6, r7);

        return;
    }

    public java.lang.String getRights(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6, $r7;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":rights");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String getLanguageProperty(java.lang.String,java.lang.String)>($r5, r6);

        return $r7;
    }

    public java.util.List getRightsLanguages()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.util.List $r6;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":rights");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getLanguagePropertyLanguages(java.lang.String)>($r5);

        return $r6;
    }

    public void setSource(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":source");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void setTextProperty(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.lang.String getSource()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":source");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String getTextProperty(java.lang.String)>($r5);

        return $r6;
    }

    public void removeSubject(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":subject");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void removeBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public void addSubject(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":subject");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void addBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.util.List getSubjects()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.util.List $r6;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":subject");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getBagList(java.lang.String)>($r5);

        return $r6;
    }

    public void setTitle(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":title");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void setLanguageProperty(java.lang.String,java.lang.String,java.lang.String)>($r5, null, r6);

        return;
    }

    public java.lang.String getTitle()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":title");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String getLanguageProperty(java.lang.String,java.lang.String)>($r5, null);

        return $r6;
    }

    public void setTitle(java.lang.String, java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6, r7;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":title");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void setLanguageProperty(java.lang.String,java.lang.String,java.lang.String)>($r5, r6, r7);

        return;
    }

    public java.lang.String getTitle(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6, $r7;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":title");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String getLanguageProperty(java.lang.String,java.lang.String)>($r5, r6);

        return $r7;
    }

    public java.util.List getTitleLanguages()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.util.List $r6;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":title");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getLanguagePropertyLanguages(java.lang.String)>($r5);

        return $r6;
    }

    public void addType(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":type");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void addBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.util.List getTypes()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore r0;
        java.util.List $r6;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaDublinCore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":type");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getBagList(java.lang.String)>($r5);

        return $r6;
    }

    public static void <clinit>()
    {
        <org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String NAMESPACE> = "http://purl.org/dc/elements/1.1/";

        return;
    }
}
