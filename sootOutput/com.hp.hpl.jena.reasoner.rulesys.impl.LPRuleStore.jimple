public class com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore extends com.hp.hpl.jena.reasoner.rulesys.impl.RuleStore
{
    protected boolean isCompiled;
    protected java.util.Map predicateToCodeMap;
    protected java.util.ArrayList allRuleClauseCodes;
    protected java.util.Map indexPredicateToCodeMap;
    protected java.util.HashSet tabledPredicates;
    private static final int INDEX_THRESHOLD;
    protected boolean allTabled;

    public void <init>(java.util.List)
    {
        java.util.HashSet $r2;
        java.util.List r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleStore: void <init>(java.util.List)>(r1);

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: boolean isCompiled> = 0;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.HashSet tabledPredicates> = $r2;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: boolean allTabled> = 0;

        return;
    }

    public void <init>()
    {
        java.util.HashSet $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleStore: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: boolean isCompiled> = 0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.HashSet tabledPredicates> = $r1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: boolean allTabled> = 0;

        return;
    }

    public void addAll(com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore)
    {
        java.util.HashSet $r2, $r3, $r5;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore r0, r1;
        com.hp.hpl.jena.graph.Node $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleStore: void addAll(com.hp.hpl.jena.reasoner.rulesys.impl.RuleStore)>(r1);

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.HashSet tabledPredicates>;

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.HashSet tabledPredicates>;

        virtualinvoke $r3.<java.util.HashSet: boolean addAll(java.util.Collection)>($r2);

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.HashSet tabledPredicates>;

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z0 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>($r4);

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: boolean allTabled> = $z0;

        return;
    }

    public synchronized void tablePredicate(com.hp.hpl.jena.graph.Node)
    {
        java.util.HashSet $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore r0;
        com.hp.hpl.jena.graph.Node r1, $r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.HashSet tabledPredicates>;

        virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        if r1 != $r3 goto label1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: boolean allTabled> = 1;

     label1:
        return;
    }

    public java.util.List codeFor(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore r0;
        com.hp.hpl.jena.graph.Node r1;
        java.util.ArrayList $r7;
        java.util.List r8;
        java.util.Map $r2, $r5;
        java.lang.Object $r3, $r6;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: boolean isCompiled>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: void compileAll()>();

     label1:
        $z1 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 == 0 goto label2;

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.ArrayList allRuleClauseCodes>;

        return $r7;

     label2:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.Map predicateToCodeMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.util.List) $r3;

        if r8 != null goto label3;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.Map predicateToCodeMap>;

        $r4 = <com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable WILD>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r8 = (java.util.List) $r6;

     label3:
        return r8;
    }

    public java.util.List codeFor(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore r0;
        com.hp.hpl.jena.graph.Node $r2, $r5, $r8;
        java.util.List $r3, r10;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        java.util.Map $r4, r7;
        java.lang.Object $r6, $r9;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.List codeFor(com.hp.hpl.jena.graph.Node)>($r2);

        if $r3 != null goto label1;

        return $r3;

     label1:
        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.Map indexPredicateToCodeMap>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (java.util.Map) $r6;

        if r7 == null goto label2;

        $r8 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $r9 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r10 = (java.util.List) $r9;

        if r10 == null goto label2;

        return r10;

     label2:
        return $r3;
    }

    public boolean isIndexedPredicate(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.Node r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.Map indexPredicateToCodeMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isTabled(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore r0;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        com.hp.hpl.jena.graph.Node $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: boolean isTabled(com.hp.hpl.jena.graph.Node)>($r2);

        return $z0;
    }

    public boolean isTabled(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore r0;
        com.hp.hpl.jena.graph.Node r1;
        java.util.HashSet $r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: boolean allTabled>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.HashSet tabledPredicates>;

        $z3 = virtualinvoke $r3.<java.util.HashSet: boolean isEmpty()>();

        if $z3 != 0 goto label2;

        return 1;

     label2:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.HashSet tabledPredicates>;

        $z2 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        return $z2;
    }

    protected void compileAll()
    {
        com.hp.hpl.jena.graph.Node $r34, $r49, r58, r62, r65, r71;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode $r46, r68, r73;
        java.util.Map $r7, $r10, $r12, $r22, $r37, $r50, $r53, $r55, r66;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r32, $r45;
        java.util.Set $r13, $r25, $r38;
        java.util.ArrayList $r2, $r15, $r21, $r36, $r47, $r54;
        java.util.Map$Entry r61, r64, r70;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore r0;
        java.util.List $r4, $r56, r59, r60, r63, $r67, r69, r72;
        com.hp.hpl.jena.reasoner.TriplePattern $r33, $r48;
        java.util.HashMap $r1, $r3, $r9, $r52;
        int $i0;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r6, $r11, $r43;
        java.util.Iterator $r5, $r14, $r16, $r24, $r26, $r39;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r31, r57;
        java.lang.Object $r8, $r17, $r18, $r19, $r20, $r23, $r27, $r28, $r29, $r30, $r35, $r40, $r41, $r42, $r44, $r51;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: boolean isCompiled> = 1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.Map predicateToCodeMap> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.ArrayList allRuleClauseCodes> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.Map indexPredicateToCodeMap> = $r3;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.List getAllRules()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r44 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r57 = (com.hp.hpl.jena.reasoner.rulesys.Rule) $r44;

        $r45 = virtualinvoke r57.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getHeadElement(int)>(0);

        $z8 = $r45 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z8 == 0 goto label04;

        $r46 = new com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode;

        specialinvoke $r46.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode: void <init>(com.hp.hpl.jena.reasoner.rulesys.Rule)>(r57);

        $r47 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.ArrayList allRuleClauseCodes>;

        virtualinvoke $r47.<java.util.ArrayList: boolean add(java.lang.Object)>($r46);

        $r48 = (com.hp.hpl.jena.reasoner.TriplePattern) $r45;

        $r49 = virtualinvoke $r48.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        r58 = $r49;

        $z9 = virtualinvoke $r49.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z9 == 0 goto label02;

        r58 = <com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable WILD>;

     label02:
        $r50 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.Map predicateToCodeMap>;

        $r51 = interfaceinvoke $r50.<java.util.Map: java.lang.Object get(java.lang.Object)>(r58);

        $r56 = (java.util.List) $r51;

        r59 = $r56;

        if $r56 != null goto label03;

        $r54 = new java.util.ArrayList;

        specialinvoke $r54.<java.util.ArrayList: void <init>()>();

        r59 = $r54;

        $r55 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.Map predicateToCodeMap>;

        interfaceinvoke $r55.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r58, $r54);

     label03:
        interfaceinvoke r59.<java.util.List: boolean add(java.lang.Object)>($r46);

        $i0 = interfaceinvoke r59.<java.util.List: int size()>();

        if $i0 <= 20 goto label04;

        $r53 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.Map indexPredicateToCodeMap>;

        $r52 = new java.util.HashMap;

        specialinvoke $r52.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r53.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r58, $r52);

     label04:
        goto label01;

     label05:
        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.Map predicateToCodeMap>;

        $r6 = <com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable WILD>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r60 = (java.util.List) $r8;

        if r60 == null goto label08;

        $r37 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.Map predicateToCodeMap>;

        $r38 = interfaceinvoke $r37.<java.util.Map: java.util.Set entrySet()>();

        $r39 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z7 = interfaceinvoke $r39.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label08;

        $r40 = interfaceinvoke $r39.<java.util.Iterator: java.lang.Object next()>();

        r61 = (java.util.Map$Entry) $r40;

        $r41 = interfaceinvoke r61.<java.util.Map$Entry: java.lang.Object getKey()>();

        r62 = (com.hp.hpl.jena.graph.Node) $r41;

        $r42 = interfaceinvoke r61.<java.util.Map$Entry: java.lang.Object getValue()>();

        r63 = (java.util.List) $r42;

        $r43 = <com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable WILD>;

        if r62 == $r43 goto label07;

        interfaceinvoke r63.<java.util.List: boolean addAll(java.util.Collection)>(r60);

     label07:
        goto label06;

     label08:
        $r10 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.Map indexPredicateToCodeMap>;

        $r11 = <com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable WILD>;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r9);

        $r12 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.Map indexPredicateToCodeMap>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>();

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z10 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label19;

        $r18 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r64 = (java.util.Map$Entry) $r18;

        $r19 = interfaceinvoke r64.<java.util.Map$Entry: java.lang.Object getKey()>();

        r65 = (com.hp.hpl.jena.graph.Node) $r19;

        $r20 = interfaceinvoke r64.<java.util.Map$Entry: java.lang.Object getValue()>();

        r66 = (java.util.Map) $r20;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        $z2 = virtualinvoke r65.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z2 == 0 goto label10;

        $r67 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.ArrayList allRuleClauseCodes>;

        goto label11;

     label10:
        $r22 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.Map predicateToCodeMap>;

        $r23 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>(r65);

        $r67 = (java.util.List) $r23;

     label11:
        $r24 = interfaceinvoke $r67.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z11 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label16;

        $r30 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r68 = (com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode) $r30;

        $r31 = virtualinvoke r68.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode: com.hp.hpl.jena.reasoner.rulesys.Rule getRule()>();

        $r32 = virtualinvoke $r31.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getHeadElement(int)>(0);

        z12 = 0;

        $z4 = $r32 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z4 == 0 goto label14;

        $r33 = (com.hp.hpl.jena.reasoner.TriplePattern) $r32;

        $r34 = virtualinvoke $r33.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $z5 = virtualinvoke $r34.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z5 != 0 goto label14;

        $z6 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r34);

        if $z6 != 0 goto label14;

        $r35 = interfaceinvoke r66.<java.util.Map: java.lang.Object get(java.lang.Object)>($r34);

        r69 = (java.util.List) $r35;

        if r69 != null goto label13;

        $r36 = new java.util.ArrayList;

        specialinvoke $r36.<java.util.ArrayList: void <init>()>();

        r69 = $r36;

        interfaceinvoke r66.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, $r36);

     label13:
        interfaceinvoke r69.<java.util.List: boolean add(java.lang.Object)>(r68);

        z12 = 1;

     label14:
        if z12 != 0 goto label15;

        interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>(r68);

     label15:
        goto label12;

     label16:
        $r25 = interfaceinvoke r66.<java.util.Map: java.util.Set entrySet()>();

        $r26 = interfaceinvoke $r25.<java.util.Set: java.util.Iterator iterator()>();

     label17:
        $z3 = interfaceinvoke $r26.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label18;

        $r27 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r70 = (java.util.Map$Entry) $r27;

        $r28 = interfaceinvoke r70.<java.util.Map$Entry: java.lang.Object getKey()>();

        r71 = (com.hp.hpl.jena.graph.Node) $r28;

        $r29 = interfaceinvoke r70.<java.util.Map$Entry: java.lang.Object getValue()>();

        r72 = (java.util.List) $r29;

        interfaceinvoke r72.<java.util.List: boolean addAll(java.util.Collection)>($r21);

        goto label17;

     label18:
        goto label09;

     label19:
        $r15 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.ArrayList allRuleClauseCodes>;

        $r16 = virtualinvoke $r15.<java.util.ArrayList: java.util.Iterator iterator()>();

     label20:
        $z1 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label21;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r73 = (com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode) $r17;

        virtualinvoke r73.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode: void compile(com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore)>(r0);

        goto label20;

     label21:
        return;
    }

    protected void doAddRemoveRule(com.hp.hpl.jena.reasoner.rulesys.Rule, boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule;

        z0 := @parameter1: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: boolean isCompiled> = 0;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleStore: void doAddRemoveRule(com.hp.hpl.jena.reasoner.rulesys.Rule,boolean)>(r1, z0);

        return;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: int INDEX_THRESHOLD> = 20;

        return;
    }
}
