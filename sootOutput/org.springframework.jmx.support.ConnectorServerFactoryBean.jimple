public class org.springframework.jmx.support.ConnectorServerFactoryBean extends org.springframework.jmx.support.MBeanRegistrationSupport implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    public static final java.lang.String DEFAULT_SERVICE_URL;
    private java.lang.String serviceUrl;
    private java.util.Map environment;
    private javax.management.ObjectName objectName;
    private boolean threaded;
    private boolean daemon;
    private javax.management.remote.JMXConnectorServer connectorServer;

    public void <init>()
    {
        org.springframework.jmx.support.ConnectorServerFactoryBean r0;
        java.util.HashMap $r1;

        r0 := @this: org.springframework.jmx.support.ConnectorServerFactoryBean;

        specialinvoke r0.<org.springframework.jmx.support.MBeanRegistrationSupport: void <init>()>();

        r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: java.lang.String serviceUrl> = "service:jmx:jmxmp://localhost:9875";

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: java.util.Map environment> = $r1;

        r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: boolean threaded> = 0;

        r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: boolean daemon> = 0;

        return;
    }

    public void setServiceUrl(java.lang.String)
    {
        org.springframework.jmx.support.ConnectorServerFactoryBean r0;
        java.lang.String r1;

        r0 := @this: org.springframework.jmx.support.ConnectorServerFactoryBean;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: java.lang.String serviceUrl> = r1;

        return;
    }

    public void setEnvironment(java.util.Properties)
    {
        org.springframework.jmx.support.ConnectorServerFactoryBean r1;
        java.util.Properties r0;
        java.util.Map $r2;

        r1 := @this: org.springframework.jmx.support.ConnectorServerFactoryBean;

        r0 := @parameter0: java.util.Properties;

        $r2 = r1.<org.springframework.jmx.support.ConnectorServerFactoryBean: java.util.Map environment>;

        staticinvoke <org.springframework.util.CollectionUtils: void mergePropertiesIntoMap(java.util.Properties,java.util.Map)>(r0, $r2);

        return;
    }

    public void setEnvironmentMap(java.util.Map)
    {
        org.springframework.jmx.support.ConnectorServerFactoryBean r1;
        java.util.Map r0, $r2;

        r1 := @this: org.springframework.jmx.support.ConnectorServerFactoryBean;

        r0 := @parameter0: java.util.Map;

        if r0 == null goto label1;

        $r2 = r1.<org.springframework.jmx.support.ConnectorServerFactoryBean: java.util.Map environment>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r0);

     label1:
        return;
    }

    public void setObjectName(java.lang.Object) throws javax.management.MalformedObjectNameException
    {
        org.springframework.jmx.support.ConnectorServerFactoryBean r0;
        java.lang.Object r1;
        javax.management.ObjectName $r2;

        r0 := @this: org.springframework.jmx.support.ConnectorServerFactoryBean;

        r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <org.springframework.jmx.support.ObjectNameManager: javax.management.ObjectName getInstance(java.lang.Object)>(r1);

        r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.ObjectName objectName> = $r2;

        return;
    }

    public void setThreaded(boolean)
    {
        org.springframework.jmx.support.ConnectorServerFactoryBean r0;
        boolean z0;

        r0 := @this: org.springframework.jmx.support.ConnectorServerFactoryBean;

        z0 := @parameter0: boolean;

        r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: boolean threaded> = z0;

        return;
    }

    public void setDaemon(boolean)
    {
        org.springframework.jmx.support.ConnectorServerFactoryBean r0;
        boolean z0;

        r0 := @this: org.springframework.jmx.support.ConnectorServerFactoryBean;

        z0 := @parameter0: boolean;

        r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: boolean daemon> = z0;

        return;
    }

    public void afterPropertiesSet() throws javax.management.JMException, java.io.IOException
    {
        javax.management.MBeanServer $r1, $r4, $r23;
        java.util.Map $r5;
        java.lang.String $r3, $r14, $r17, $r20;
        javax.management.remote.JMXConnectorServer $r6, $r8, $r12, $r22;
        boolean $z0, $z1, $z2;
        org.springframework.jmx.support.ConnectorServerFactoryBean$1 $r15;
        org.springframework.jmx.support.ConnectorServerFactoryBean r0;
        java.io.IOException $r24;
        javax.management.remote.JMXServiceURL $r2;
        javax.management.ObjectName $r7, $r21;
        org.apache.commons.logging.Log $r9, $r11;
        java.lang.StringBuilder $r10, $r13, $r16, $r18, $r19;

        r0 := @this: org.springframework.jmx.support.ConnectorServerFactoryBean;

        $r1 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.MBeanServer server>;

        if $r1 != null goto label1;

        $r23 = staticinvoke <org.springframework.jmx.support.JmxUtils: javax.management.MBeanServer locateMBeanServer()>();

        r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.MBeanServer server> = $r23;

     label1:
        $r2 = new javax.management.remote.JMXServiceURL;

        $r3 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: java.lang.String serviceUrl>;

        specialinvoke $r2.<javax.management.remote.JMXServiceURL: void <init>(java.lang.String)>($r3);

        $r5 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: java.util.Map environment>;

        $r4 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.MBeanServer server>;

        $r6 = staticinvoke <javax.management.remote.JMXConnectorServerFactory: javax.management.remote.JMXConnectorServer newJMXConnectorServer(javax.management.remote.JMXServiceURL,java.util.Map,javax.management.MBeanServer)>($r2, $r5, $r4);

        r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.remote.JMXConnectorServer connectorServer> = $r6;

        $r7 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.ObjectName objectName>;

        if $r7 == null goto label2;

        $r22 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.remote.JMXConnectorServer connectorServer>;

        $r21 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.ObjectName objectName>;

        virtualinvoke r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: void doRegister(java.lang.Object,javax.management.ObjectName)>($r22, $r21);

     label2:
        $z0 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: boolean threaded>;

        if $z0 == 0 goto label3;

        $r15 = new org.springframework.jmx.support.ConnectorServerFactoryBean$1;

        specialinvoke $r15.<org.springframework.jmx.support.ConnectorServerFactoryBean$1: void <init>(org.springframework.jmx.support.ConnectorServerFactoryBean)>(r0);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("JMX Connector Thread [");

        $r17 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: java.lang.String serviceUrl>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.lang.Thread: void setName(java.lang.String)>($r20);

        $z2 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: boolean daemon>;

        virtualinvoke $r15.<java.lang.Thread: void setDaemon(boolean)>($z2);

        virtualinvoke $r15.<java.lang.Thread: void start()>();

        goto label4;

     label3:
        $r8 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.remote.JMXConnectorServer connectorServer>;

        virtualinvoke $r8.<javax.management.remote.JMXConnectorServer: void start()>();

     label4:
        $r9 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r9.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z1 == 0 goto label7;

        $r11 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: org.apache.commons.logging.Log logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("JMX connector server started: ");

        $r12 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.remote.JMXConnectorServer connectorServer>;

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r14);

     label5:
        goto label7;

     label6:
        $r24 := @caughtexception;

        virtualinvoke r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: void unregisterBeans()>();

        throw $r24;

     label7:
        return;

        catch java.io.IOException from label2 to label5 with label6;
    }

    public javax.management.remote.JMXConnectorServer getObject()
    {
        org.springframework.jmx.support.ConnectorServerFactoryBean r0;
        javax.management.remote.JMXConnectorServer $r1;

        r0 := @this: org.springframework.jmx.support.ConnectorServerFactoryBean;

        $r1 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.remote.JMXConnectorServer connectorServer>;

        return $r1;
    }

    public java.lang.Class getObjectType()
    {
        org.springframework.jmx.support.ConnectorServerFactoryBean r0;
        java.lang.Class $r3;
        javax.management.remote.JMXConnectorServer $r1, $r2;

        r0 := @this: org.springframework.jmx.support.ConnectorServerFactoryBean;

        $r1 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.remote.JMXConnectorServer connectorServer>;

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.remote.JMXConnectorServer connectorServer>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        goto label2;

     label1:
        $r3 = class "Ljavax/management/remote/JMXConnectorServer;";

     label2:
        return $r3;
    }

    public boolean isSingleton()
    {
        org.springframework.jmx.support.ConnectorServerFactoryBean r0;

        r0 := @this: org.springframework.jmx.support.ConnectorServerFactoryBean;

        return 1;
    }

    public void destroy() throws java.io.IOException
    {
        java.lang.Throwable $r8;
        org.springframework.jmx.support.ConnectorServerFactoryBean r0;
        org.apache.commons.logging.Log $r1, $r4;
        java.lang.StringBuilder $r3, $r6;
        java.lang.String $r7;
        javax.management.remote.JMXConnectorServer $r2, $r5;
        boolean $z0;

        r0 := @this: org.springframework.jmx.support.ConnectorServerFactoryBean;

        $r1 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: org.apache.commons.logging.Log logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Stopping JMX connector server: ");

        $r5 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.remote.JMXConnectorServer connectorServer>;

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r7);

     label1:
        $r2 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.remote.JMXConnectorServer connectorServer>;

        virtualinvoke $r2.<javax.management.remote.JMXConnectorServer: void stop()>();

        goto label3;

     label2:
        $r8 := @caughtexception;

        virtualinvoke r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: void unregisterBeans()>();

        throw $r8;

     label3:
        virtualinvoke r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: void unregisterBeans()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public volatile java.lang.Object getObject() throws java.lang.Exception
    {
        org.springframework.jmx.support.ConnectorServerFactoryBean r0;
        javax.management.remote.JMXConnectorServer $r1;

        r0 := @this: org.springframework.jmx.support.ConnectorServerFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.remote.JMXConnectorServer getObject()>();

        return $r1;
    }

    static javax.management.remote.JMXConnectorServer access$1(org.springframework.jmx.support.ConnectorServerFactoryBean)
    {
        org.springframework.jmx.support.ConnectorServerFactoryBean r0;
        javax.management.remote.JMXConnectorServer $r1;

        r0 := @parameter0: org.springframework.jmx.support.ConnectorServerFactoryBean;

        $r1 = r0.<org.springframework.jmx.support.ConnectorServerFactoryBean: javax.management.remote.JMXConnectorServer connectorServer>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.springframework.jmx.support.ConnectorServerFactoryBean: java.lang.String DEFAULT_SERVICE_URL> = "service:jmx:jmxmp://localhost:9875";

        return;
    }
}
