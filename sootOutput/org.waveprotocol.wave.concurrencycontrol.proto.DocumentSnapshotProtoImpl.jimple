public final class org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot, org.waveprotocol.wave.communication.gson.GsonSerializable, org.waveprotocol.wave.communication.proto.ProtoWrapper
{
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto;
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder> = $r1;

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder> = $r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto> = r2;

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder> = $r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)>(r2);

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot getPB()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto>;

        return $r1;
    }

    public void setPB(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder> = null;

        return;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)
    {
        java.util.Iterator $r7;
        org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl $r3;
        long $l0, $l1;
        java.util.List $r6;
        org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot r1;
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.federation.ProtocolDocumentOperation $r4;
        java.lang.Object $r8;
        java.lang.String $r2, $r5, r9;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot: java.lang.String getDocumentId()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void setDocumentId(java.lang.String)>($r2);

        $r3 = new org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl;

        $r4 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot: org.waveprotocol.wave.federation.ProtocolDocumentOperation getDocumentOperation()>();

        specialinvoke $r3.<org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl: void <init>(org.waveprotocol.wave.federation.ProtocolDocumentOperation)>($r4);

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void setDocumentOperation(org.waveprotocol.wave.federation.ProtocolDocumentOperation)>($r3);

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot: java.lang.String getAuthor()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void setAuthor(java.lang.String)>($r5);

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void clearContributor()>();

        $r6 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot: java.util.List getContributor()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r8;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void addContributor(java.lang.String)>(r9);

        goto label1;

     label2:
        $l0 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot: long getLastModifiedVersion()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void setLastModifiedVersion(long)>($l0);

        $l1 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot: long getLastModifiedTime()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void setLastModifiedTime(long)>($l1);

        return;
    }

    public java.lang.String getDocumentId()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        java.lang.String $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String getDocumentId()>();

        return $r2;
    }

    public void setDocumentId(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder>;

        virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder setDocumentId(java.lang.String)>(r1);

        return;
    }

    public org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl getDocumentOperation()
    {
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r2;
        org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProto()>();

        $r1 = new org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation getDocumentOperation()>();

        specialinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation)>($r3);

        return $r1;
    }

    public void setDocumentOperation(org.waveprotocol.wave.federation.ProtocolDocumentOperation)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation $r5;
        org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl $r4;
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r1, $r3;
        org.waveprotocol.wave.federation.ProtocolDocumentOperation r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolDocumentOperation;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder clearDocumentOperation()>();

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl getOrCreateProtocolDocumentOperationProtoImpl(org.waveprotocol.wave.federation.ProtocolDocumentOperation)>(r2);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation getPB()>();

        virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder setDocumentOperation(org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation)>($r5);

        return;
    }

    public java.lang.String getAuthor()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        java.lang.String $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String getAuthor()>();

        return $r2;
    }

    public void setAuthor(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder>;

        virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder setAuthor(java.lang.String)>(r1);

        return;
    }

    public java.util.List getContributor()
    {
        java.util.List $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.util.List getContributorList()>();

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        return $r3;
    }

    public void addAllContributor(java.util.List)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r2;
        java.util.List r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder>;

        virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder addAllContributor(java.lang.Iterable)>(r1);

        return;
    }

    public java.lang.String getContributor(int)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        int i0;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String getContributor(int)>(i0);

        return $r2;
    }

    public void setContributor(int, java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        int i0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder>;

        virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder setContributor(int,java.lang.String)>(i0, r1);

        return;
    }

    public int getContributorSize()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: int getContributorCount()>();

        return $i0;
    }

    public void addContributor(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder>;

        virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder addContributor(java.lang.String)>(r1);

        return;
    }

    public void clearContributor()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder clearContributor()>();

        return;
    }

    public long getLastModifiedVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        long $l0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto>;

        $l0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: long getLastModifiedVersion()>();

        return $l0;
    }

    public void setLastModifiedVersion(long)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r1;
        long l0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        l0 := @parameter0: long;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder setLastModifiedVersion(long)>(l0);

        return;
    }

    public long getLastModifiedTime()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        long $l0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto>;

        $l0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: long getLastModifiedTime()>();

        return $l0;
    }

    public void setLastModifiedTime(long)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r1;
        long l0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        l0 := @parameter0: long;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder setLastModifiedTime(long)>(l0);

        return;
    }

    private org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl getOrCreateProtocolDocumentOperationProtoImpl(org.waveprotocol.wave.federation.ProtocolDocumentOperation)
    {
        org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r3;
        org.waveprotocol.wave.federation.ProtocolDocumentOperation r0;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.federation.ProtocolDocumentOperation;

        $z0 = r0 instanceof org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl) r0;

        return $r2;

     label1:
        $r1 = new org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl: void <init>()>();

        virtualinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl: void copyFrom(org.waveprotocol.wave.federation.ProtocolDocumentOperation)>(r0);

        return $r1;
    }

    private void switchToProto()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto>;

        if $r1 != null goto label1;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot build()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto> = $r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder> = null;

     label1:
        return;
    }

    private void switchToProtoBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r1, $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder>;

        if $r1 != null goto label3;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto>;

        if $r2 != null goto label1;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto>;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot)>($r3);

     label2:
        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder> = $r4;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto> = null;

     label3:
        return;
    }

    private void invalidateAll()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder protoBuilder> = $r1;

        return;
    }

    public com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData, com.google.gson.Gson)
    {
        com.google.gson.JsonObject $r0;
        org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl $r4;
        long $l1, $l2;
        com.google.gson.JsonElement $r7;
        com.google.gson.Gson r6;
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r2;
        int $i0, i3;
        com.google.gson.JsonPrimitive $r1, $r8, $r13;
        java.lang.String $r3, $r9, $r14;
        org.waveprotocol.wave.communication.json.RawStringData r5;
        com.google.gson.JsonArray $r10, $r11, $r12;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r5 := @parameter0: org.waveprotocol.wave.communication.json.RawStringData;

        r6 := @parameter1: com.google.gson.Gson;

        $r0 = new com.google.gson.JsonObject;

        specialinvoke $r0.<com.google.gson.JsonObject: void <init>()>();

        $r1 = new com.google.gson.JsonPrimitive;

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: java.lang.String getDocumentId()>();

        specialinvoke $r1.<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>($r3);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("1", $r1);

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl getDocumentOperation()>();

        $r7 = interfaceinvoke $r4.<org.waveprotocol.wave.communication.gson.GsonSerializable: com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData,com.google.gson.Gson)>(r5, r6);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("2", $r7);

        $r8 = new com.google.gson.JsonPrimitive;

        $r9 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: java.lang.String getAuthor()>();

        specialinvoke $r8.<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>($r9);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("3", $r8);

        $r10 = new com.google.gson.JsonArray;

        specialinvoke $r10.<com.google.gson.JsonArray: void <init>()>();

        i3 = 0;

     label1:
        $i0 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: int getContributorSize()>();

        if i3 >= $i0 goto label2;

        $r13 = new com.google.gson.JsonPrimitive;

        $r14 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: java.lang.String getContributor(int)>(i3);

        specialinvoke $r13.<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>($r14);

        virtualinvoke $r10.<com.google.gson.JsonArray: void add(com.google.gson.JsonElement)>($r13);

        i3 = i3 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("4", $r10);

        $l1 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: long getLastModifiedVersion()>();

        $r11 = staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: com.google.gson.JsonArray toJson(long)>($l1);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("5", $r11);

        $l2 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: long getLastModifiedTime()>();

        $r12 = staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: com.google.gson.JsonArray toJson(long)>($l2);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("6", $r12);

        return $r0;
    }

    public void fromGson(com.google.gson.JsonElement, com.google.gson.Gson, org.waveprotocol.wave.communication.json.RawStringData) throws org.waveprotocol.wave.communication.gson.GsonException
    {
        com.google.gson.JsonObject $r1;
        org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl $r12;
        long $l0, $l1;
        com.google.gson.JsonElement r0, $r3, $r4, $r5, $r7, $r9, $r11, $r15;
        com.google.gson.Gson r13;
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r2;
        int $i2, i3;
        java.lang.String $r8, $r10, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.communication.json.RawStringData r14;
        com.google.gson.JsonArray $r6;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r0 := @parameter0: com.google.gson.JsonElement;

        r13 := @parameter1: com.google.gson.Gson;

        r14 := @parameter2: org.waveprotocol.wave.communication.json.RawStringData;

        $r1 = virtualinvoke r0.<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>();

        specialinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void invalidateAll()>();

        $z0 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("1");

        if $z0 == 0 goto label1;

        $r15 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("1");

        $r16 = virtualinvoke $r15.<com.google.gson.JsonElement: java.lang.String getAsString()>();

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void setDocumentId(java.lang.String)>($r16);

     label1:
        $z1 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("2");

        if $z1 == 0 goto label2;

        $r11 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("2");

        $r12 = new org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl;

        specialinvoke $r12.<org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl: void <init>()>();

        staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: void extractJsonObject(org.waveprotocol.wave.communication.gson.GsonSerializable,com.google.gson.JsonElement,com.google.gson.Gson,org.waveprotocol.wave.communication.json.RawStringData)>($r12, $r11, r13, r14);

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void setDocumentOperation(org.waveprotocol.wave.federation.ProtocolDocumentOperation)>($r12);

     label2:
        $z2 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("3");

        if $z2 == 0 goto label3;

        $r9 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("3");

        $r10 = virtualinvoke $r9.<com.google.gson.JsonElement: java.lang.String getAsString()>();

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void setAuthor(java.lang.String)>($r10);

     label3:
        $z3 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("4");

        if $z3 == 0 goto label5;

        $r5 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("4");

        $r6 = virtualinvoke $r5.<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>();

        i3 = 0;

     label4:
        $i2 = virtualinvoke $r6.<com.google.gson.JsonArray: int size()>();

        if i3 >= $i2 goto label5;

        $r7 = virtualinvoke $r6.<com.google.gson.JsonArray: com.google.gson.JsonElement get(int)>(i3);

        $r8 = virtualinvoke $r7.<com.google.gson.JsonElement: java.lang.String getAsString()>();

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void addContributor(java.lang.String)>($r8);

        i3 = i3 + 1;

        goto label4;

     label5:
        $z4 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("5");

        if $z4 == 0 goto label6;

        $r4 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("5");

        $l1 = staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: long fromJson(com.google.gson.JsonElement)>($r4);

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void setLastModifiedVersion(long)>($l1);

     label6:
        $z5 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("6");

        if $z5 == 0 goto label7;

        $r3 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("6");

        $l0 = staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: long fromJson(com.google.gson.JsonElement)>($r3);

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void setLastModifiedTime(long)>($l0);

     label7:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r2, $r4;
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0, $r3;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot getPB()>();

        $r3 = (org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl) r1;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot getPB()>();

        $z1 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label2:
        return 0;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r1 instanceof org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot;

        if $z1 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot) r1;

        $z2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.DocumentSnapshotUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot,org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)>(r0, $r2);

        return $z2;

     label2:
        return 0;
    }

    public int hashCode()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot getPB()>();

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        java.lang.String $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot getPB()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String toString()>();

        return $r2;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolDocumentOperation getDocumentOperation()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolDocumentOperationProtoImpl getDocumentOperation()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite getPB()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot getPB()>();

        return $r1;
    }

    public volatile void setPB(com.google.protobuf.MessageLite)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl r0;
        com.google.protobuf.MessageLite r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl;

        r1 := @parameter0: com.google.protobuf.MessageLite;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot) r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.DocumentSnapshotProtoImpl: void setPB(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot)>($r2);

        return;
    }
}
