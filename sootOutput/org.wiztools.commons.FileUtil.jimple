public final class org.wiztools.commons.FileUtil extends java.lang.Object
{

    private void <init>()
    {
        org.wiztools.commons.FileUtil r0;

        r0 := @this: org.wiztools.commons.FileUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getContentAsString(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        java.nio.charset.Charset r2;
        java.io.FileInputStream $r0, r5;
        java.lang.String $r3;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.nio.charset.Charset;

        r5 = null;

     label1:
        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        r5 = $r0;

        $r3 = staticinvoke <org.wiztools.commons.StreamUtil: java.lang.String inputStream2String(java.io.InputStream,java.nio.charset.Charset)>($r0, r2);

     label2:
        if $r0 == null goto label3;

        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label3:
        return $r3;

     label4:
        $r4 := @caughtexception;

     label5:
        if r5 == null goto label6;

        virtualinvoke r5.<java.io.InputStream: void close()>();

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static byte[] getContentAsBytes(java.io.File) throws java.io.IOException
    {
        byte[] $r2;
        java.io.FileInputStream $r0;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        $r2 = staticinvoke <org.wiztools.commons.StreamUtil: byte[] inputStream2Bytes(java.io.InputStream)>($r0);

        return $r2;
    }

    public static java.lang.String getMimeType(java.io.File)
    {
        java.lang.Throwable $r4;
        java.net.URL $r2;
        java.io.File r0;
        java.lang.Exception $r5;
        java.net.URLConnection $r3, r7;
        java.net.URI $r1;
        java.lang.String r6;

        r0 := @parameter0: java.io.File;

        r6 = null;

        r7 = null;

     label1:
        $r1 = virtualinvoke r0.<java.io.File: java.net.URI toURI()>();

        $r2 = virtualinvoke $r1.<java.net.URI: java.net.URL toURL()>();

        $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>();

        r7 = $r3;

        r6 = virtualinvoke $r3.<java.net.URLConnection: java.lang.String getContentType()>();

     label2:
        if $r3 == null goto label8;

        goto label8;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

     label4:
        if r7 == null goto label8;

        goto label8;

     label5:
        $r4 := @caughtexception;

     label6:
        if r7 == null goto label7;

     label7:
        throw $r4;

     label8:
        return r6;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void writeString(java.io.File, java.lang.String, java.nio.charset.Charset) throws java.io.IOException
    {
        java.io.PrintWriter $r0, r6;
        java.lang.Throwable $r5;
        java.nio.charset.Charset r2;
        java.lang.String $r3, r4;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        r4 := @parameter1: java.lang.String;

        r2 := @parameter2: java.nio.charset.Charset;

        r6 = null;

     label1:
        $r0 = new java.io.PrintWriter;

        $r3 = virtualinvoke r2.<java.nio.charset.Charset: java.lang.String name()>();

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.io.File,java.lang.String)>(r1, $r3);

        r6 = $r0;

        virtualinvoke $r0.<java.io.PrintWriter: void print(java.lang.String)>(r4);

     label2:
        virtualinvoke $r0.<java.io.PrintWriter: void close()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke r6.<java.io.PrintWriter: void close()>();

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void writeBytes(java.io.File, byte[]) throws java.io.IOException
    {
        java.lang.Throwable $r3;
        byte[] r2;
        int $i0;
        java.io.FileOutputStream $r0, r4;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: byte[];

        r4 = null;

     label1:
        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        r4 = $r0;

        $i0 = lengthof r2;

        virtualinvoke $r0.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i0);

     label2:
        if $r0 == null goto label6;

        virtualinvoke $r0.<java.io.OutputStream: void close()>();

        goto label6;

     label3:
        $r3 := @caughtexception;

     label4:
        if r4 == null goto label5;

        virtualinvoke r4.<java.io.OutputStream: void close()>();

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void copy(java.io.File, java.io.File) throws java.io.IOException
    {
        long $l0;
        java.lang.String[] $r6;
        int $i1, i2;
        java.lang.String r7;
        boolean $z0, $z1, $z2;
        java.io.FileOutputStream $r4;
        java.io.FileInputStream $r2;
        java.io.File r0, r1, $r8, $r9;
        java.nio.channels.FileChannel $r3, $r5;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label4;

        $z2 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label1;

        virtualinvoke r1.<java.io.File: boolean mkdir()>();

     label1:
        $r6 = virtualinvoke r0.<java.io.File: java.lang.String[] list()>();

        $i1 = lengthof $r6;

        i2 = 0;

     label2:
        if i2 >= $i1 goto label3;

        r7 = $r6[i2];

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, r7);

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r7);

        staticinvoke <org.wiztools.commons.FileUtil: void copy(java.io.File,java.io.File)>($r8, $r9);

        i2 = i2 + 1;

        goto label2;

     label3:
        goto label7;

     label4:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label5;

        virtualinvoke r1.<java.io.File: boolean createNewFile()>();

     label5:
        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        $r3 = virtualinvoke $r2.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        $r5 = virtualinvoke $r4.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        $l0 = virtualinvoke $r3.<java.nio.channels.FileChannel: long size()>();

        virtualinvoke $r5.<java.nio.channels.FileChannel: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)>($r3, 0L, $l0);

        if $r3 == null goto label6;

        virtualinvoke $r3.<java.nio.channels.FileChannel: void close()>();

     label6:
        if $r5 == null goto label7;

        virtualinvoke $r5.<java.nio.channels.FileChannel: void close()>();

     label7:
        return;
    }
}
