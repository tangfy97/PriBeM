public class org.waveprotocol.wave.client.editor.util.EditorDocFormatter extends java.lang.Object
{
    private static final int DOCUMENT_STRINGIFY_INDENT;

    private void <init>()
    {
        org.waveprotocol.wave.client.editor.util.EditorDocFormatter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.util.EditorDocFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String formatContentDomString(org.waveprotocol.wave.client.editor.Editor)
    {
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted $r15;
        org.waveprotocol.wave.common.logging.Logger $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r11;
        org.waveprotocol.wave.model.document.util.Pretty $r9, $r10;
        java.lang.String $r13;
        org.waveprotocol.wave.model.document.util.Point $r6, $r8, $r16, r17, $r18;
        boolean $z0, $z1;
        org.waveprotocol.wave.client.editor.Editor r0;
        org.waveprotocol.wave.client.editor.content.ContentView $r12;
        org.waveprotocol.wave.model.document.util.PointRange $r4;
        org.waveprotocol.wave.client.editor.EditorImpl r3;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing $r14;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r5, $r7;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.Editor;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.EditorTestingUtil: boolean isConsistent(org.waveprotocol.wave.client.editor.Editor)>(r0);

        if $z0 == 0 goto label11;

        $z1 = r0 instanceof org.waveprotocol.wave.client.editor.EditorImpl;

        if $z1 == 0 goto label10;

        r3 = (org.waveprotocol.wave.client.editor.EditorImpl) r0;

        $r4 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.PointRange getOrderedHtmlSelection()>();

     label01:
        if $r4 != null goto label02;

        $r16 = null;

        goto label03;

     label02:
        $r5 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.impl.NodeManager getNodeManager()>();

        $r6 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point getFirst()>();

        $r16 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point nodeletPointToWrapperPoint(org.waveprotocol.wave.model.document.util.Point)>($r6);

     label03:
        r17 = $r16;

        if $r4 != null goto label04;

        $r18 = null;

        goto label05;

     label04:
        $r7 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.impl.NodeManager getNodeManager()>();

        $r8 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point getSecond()>();

        $r18 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point nodeletPointToWrapperPoint(org.waveprotocol.wave.model.document.util.Point)>($r8);

     label05:
        $r9 = new org.waveprotocol.wave.model.document.util.Pretty;

        specialinvoke $r9.<org.waveprotocol.wave.model.document.util.Pretty: void <init>()>();

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Pretty select(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>(r17, $r18);

        $r11 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.ContentDocument getContent()>();

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentView getFullContentView()>();

        $r13 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.util.Pretty: java.lang.String print(org.waveprotocol.wave.model.document.ReadableDocument)>($r12);

     label06:
        return $r13;

     label07:
        $r15 := @caughtexception;

        goto label09;

     label08:
        $r14 := @caughtexception;

     label09:
        goto label11;

     label10:
        return null;

     label11:
        $r1 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>("EditorDocFormatter called with inconsistent Doc");

        return null;

        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted from label01 to label06 with label07;
        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing from label01 to label06 with label08;
    }

    public static java.lang.String formatImplDomString(org.waveprotocol.wave.client.editor.Editor)
    {
        com.google.gwt.user.client.Element $r9;
        org.waveprotocol.wave.common.logging.Logger $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r17;
        org.waveprotocol.wave.model.document.util.Pretty $r6, $r21;
        java.lang.String $r7;
        org.waveprotocol.wave.model.document.util.Point r4, $r10, $r13, $r19, $r20;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.client.editor.Editor r0;
        org.waveprotocol.wave.model.document.util.PointRange $r3, r16;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r18;
        com.google.gwt.user.client.ui.Widget $r8;
        java.lang.Object $r11, $r14;
        com.google.gwt.dom.client.Node $r12, $r15, $r22, $r23;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.Editor;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.EditorTestingUtil: boolean isConsistent(org.waveprotocol.wave.client.editor.Editor)>(r0);

        if $z0 == 0 goto label7;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.PointRange getOrdered()>();

        r16 = $r3;

        if $r3 == null goto label2;

        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.Editor: com.google.gwt.user.client.ui.Widget getWidget()>();

        $r9 = virtualinvoke $r8.<com.google.gwt.user.client.ui.Widget: com.google.gwt.user.client.Element getElement()>();

        $r10 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point getFirst()>();

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r12 = (com.google.gwt.dom.client.Node) $r11;

        $r22 = (com.google.gwt.dom.client.Node) $r9;

        $z1 = virtualinvoke $r22.<com.google.gwt.dom.client.Node: boolean isOrHasChild(com.google.gwt.dom.client.Node)>($r12);

        if $z1 == 0 goto label1;

        $r13 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point getSecond()>();

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r15 = (com.google.gwt.dom.client.Node) $r14;

        $r23 = (com.google.gwt.dom.client.Node) $r9;

        $z2 = virtualinvoke $r23.<com.google.gwt.dom.client.Node: boolean isOrHasChild(com.google.gwt.dom.client.Node)>($r15);

        if $z2 == 0 goto label2;

     label1:
        r16 = null;

     label2:
        $r17 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.ContentDocument getContent()>();

        $r18 = virtualinvoke $r17.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.HtmlView getRawHtmlView()>();

        if r16 == null goto label3;

        $r19 = virtualinvoke r16.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point getFirst()>();

        goto label4;

     label3:
        $r19 = null;

     label4:
        r4 = $r19;

        if r16 == null goto label5;

        $r20 = virtualinvoke r16.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point getSecond()>();

        goto label6;

     label5:
        $r20 = null;

     label6:
        $r21 = new org.waveprotocol.wave.model.document.util.Pretty;

        specialinvoke $r21.<org.waveprotocol.wave.model.document.util.Pretty: void <init>()>();

        $r6 = virtualinvoke $r21.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Pretty select(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>(r4, $r20);

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.util.Pretty: java.lang.String print(org.waveprotocol.wave.model.document.ReadableDocument)>($r18);

        return $r7;

     label7:
        $r1 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>("EditorDocFormatter called with inconsistent Doc");

        return null;
    }

    public static java.lang.String formatPersistentDomString(org.waveprotocol.wave.client.editor.Editor)
    {
        org.waveprotocol.wave.client.editor.Editor r0;
        org.waveprotocol.wave.common.logging.Logger $r2;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r3;
        java.lang.String $r4;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.Editor;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.EditorTestingUtil: boolean isConsistent(org.waveprotocol.wave.client.editor.Editor)>(r0);

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.model.document.operation.DocInitialization getDocumentInitialization()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: java.lang.String toPrettyXmlString(org.waveprotocol.wave.model.document.operation.DocInitialization,int)>($r3, 2);

        return $r4;

     label1:
        $r1 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>("EditorDocFormatter called with inconsistent Doc");

        return null;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.client.editor.util.EditorDocFormatter: int DOCUMENT_STRINGIFY_INDENT> = 2;

        return;
    }
}
