public class org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor extends org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl
{
    private java.util.ArrayList childrenBuffer;
    private java.lang.Boolean usingAnd;

    public void <init>()
    {
        java.lang.Boolean $r2;
        org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor: java.util.ArrayList childrenBuffer> = $r1;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor: java.lang.Boolean usingAnd> = $r2;

        return;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode process(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator r4, $r5;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        java.lang.IllegalArgumentException $r9;
        java.lang.Boolean $r6;
        org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor r0;
        java.lang.Object $r3;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r7, $r8;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor;

        r7 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey DEFAULT_OPERATOR>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        r4 = (org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator) $r3;

        if r4 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR should be set on the QueryConfigHandler");

        throw $r9;

     label1:
        $r5 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator: org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator AND>;

        if $r5 != r4 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r0.<org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor: java.lang.Boolean usingAnd> = $r6;

        $r8 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode process(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r7);

        return $r8;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.util.ArrayList $r3, $r6, $r9, $r11, $r14, $r17;
        org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier $r8, $r16;
        java.lang.Boolean $r2;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, $r10, $r18, r19, r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r5, $r13;
        java.util.List $r4, $r12;
        org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor r1;
        java.lang.Object $r7, $r15;

        r1 := @this: org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.AndQueryNode;

        if $z0 == 0 goto label3;

        $r11 = r1.<org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor: java.util.ArrayList childrenBuffer>;

        virtualinvoke $r11.<java.util.ArrayList: void clear()>();

        $r12 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.util.List getChildren()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z5 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label2;

        $r15 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r15;

        $r17 = r1.<org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor: java.util.ArrayList childrenBuffer>;

        $r16 = <org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier MOD_REQ>;

        $r18 = specialinvoke r1.<org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode applyModifier(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)>(r19, $r16);

        virtualinvoke $r17.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

        goto label1;

     label2:
        $r14 = r1.<org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor: java.util.ArrayList childrenBuffer>;

        interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: void set(java.util.List)>($r14);

        goto label6;

     label3:
        $r2 = r1.<org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor: java.lang.Boolean usingAnd>;

        $z1 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label6;

        $z2 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode;

        if $z2 == 0 goto label6;

        $z3 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.OrQueryNode;

        if $z3 != 0 goto label6;

        $r3 = r1.<org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor: java.util.ArrayList childrenBuffer>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        $r4 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.util.List getChildren()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r7;

        $r9 = r1.<org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor: java.util.ArrayList childrenBuffer>;

        $r8 = <org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier MOD_REQ>;

        $r10 = specialinvoke r1.<org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode applyModifier(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)>(r20, $r8);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        goto label4;

     label5:
        $r6 = r1.<org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor: java.util.ArrayList childrenBuffer>;

        interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: void set(java.util.List)>($r6);

     label6:
        return r0;
    }

    private org.apache.lucene.queryparser.flexible.core.nodes.QueryNode applyModifier(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier $r2, $r3, r6;
        org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode r1, $r4, $r7;
        org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor r8;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, $r5;
        boolean $z0;

        r8 := @this: org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        r6 := @parameter1: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode;

        if $z0 != 0 goto label1;

        $r7 = new org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode;

        specialinvoke $r7.<org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode: void <init>(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)>(r0, r6);

        return $r7;

     label1:
        r1 = (org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode) r0;

        $r2 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier getModifier()>();

        $r3 = <org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier MOD_NONE>;

        if $r2 != $r3 goto label2;

        $r4 = new org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode;

        $r5 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()>();

        specialinvoke $r4.<org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode: void <init>(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)>($r5, r6);

        return $r4;

     label2:
        return r0;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor r1;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;

        r1 := @this: org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        return r0;
    }

    protected java.util.List setChildrenOrder(java.util.List) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.util.List r0;
        org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.precedence.processors.BooleanModifiersQueryNodeProcessor;

        r0 := @parameter0: java.util.List;

        return r0;
    }
}
