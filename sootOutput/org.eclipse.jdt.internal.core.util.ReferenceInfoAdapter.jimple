public abstract class org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter extends java.lang.Object
{

    public void <init>()
    {
        org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter r0;

        r0 := @this: org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void acceptAnnotationTypeReference(char[][], int, int)
    {
        int i0, i1;
        org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter r0;
        char[][] r1;

        r0 := @this: org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter;

        r1 := @parameter0: char[][];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void acceptAnnotationTypeReference(char[], int)
    {
        int i0;
        char[] r1;
        org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter r0;

        r0 := @this: org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        return;
    }

    public void acceptConstructorReference(char[], int, int)
    {
        int i0, i1;
        char[] r1;
        org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter r0;

        r0 := @this: org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void acceptFieldReference(char[], int)
    {
        int i0;
        char[] r1;
        org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter r0;

        r0 := @this: org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        return;
    }

    public void acceptMethodReference(char[], int, int)
    {
        int i0, i1;
        char[] r1;
        org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter r0;

        r0 := @this: org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void acceptTypeReference(char[][], int, int)
    {
        int i0, i1;
        org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter r0;
        char[][] r1;

        r0 := @this: org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter;

        r1 := @parameter0: char[][];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void acceptTypeReference(char[], int)
    {
        int i0;
        char[] r1;
        org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter r0;

        r0 := @this: org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        return;
    }

    public void acceptUnknownReference(char[][], int, int)
    {
        int i0, i1;
        org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter r0;
        char[][] r1;

        r0 := @this: org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter;

        r1 := @parameter0: char[][];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void acceptUnknownReference(char[], int)
    {
        int i0;
        char[] r1;
        org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter r0;

        r0 := @this: org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        return;
    }
}
