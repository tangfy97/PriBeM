public class org.apache.batik.css.engine.value.svg.EnableBackgroundManager extends org.apache.batik.css.engine.value.LengthManager
{
    protected int orientation;

    public void <init>()
    {
        org.apache.batik.css.engine.value.svg.EnableBackgroundManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.EnableBackgroundManager;

        specialinvoke r0.<org.apache.batik.css.engine.value.LengthManager: void <init>()>();

        return;
    }

    public boolean isInheritedProperty()
    {
        org.apache.batik.css.engine.value.svg.EnableBackgroundManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.EnableBackgroundManager;

        return 0;
    }

    public boolean isAnimatableProperty()
    {
        org.apache.batik.css.engine.value.svg.EnableBackgroundManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.EnableBackgroundManager;

        return 0;
    }

    public boolean isAdditiveProperty()
    {
        org.apache.batik.css.engine.value.svg.EnableBackgroundManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.EnableBackgroundManager;

        return 0;
    }

    public int getPropertyType()
    {
        org.apache.batik.css.engine.value.svg.EnableBackgroundManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.EnableBackgroundManager;

        return 23;
    }

    public java.lang.String getPropertyName()
    {
        org.apache.batik.css.engine.value.svg.EnableBackgroundManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.EnableBackgroundManager;

        return "enable-background";
    }

    public org.apache.batik.css.engine.value.Value getDefaultValue()
    {
        org.apache.batik.css.engine.value.svg.EnableBackgroundManager r1;
        org.apache.batik.css.engine.value.Value $r0;

        r1 := @this: org.apache.batik.css.engine.value.svg.EnableBackgroundManager;

        $r0 = <org.apache.batik.css.engine.value.svg.SVGValueConstants: org.apache.batik.css.engine.value.Value ACCUMULATE_VALUE>;

        return $r0;
    }

    public org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        org.apache.batik.css.engine.CSSEngine r7;
        short $s0, $s1;
        org.w3c.dom.DOMException $r11, $r12, $r15;
        org.w3c.css.sac.LexicalUnit $r5, $r9, r16, r17;
        int i2, $i3;
        java.lang.String $r0, $r1, $r2;
        org.apache.batik.css.engine.value.Value $r4, $r8, $r10, $r13, $r14;
        org.apache.batik.css.engine.value.ListValue $r18;
        org.apache.batik.css.engine.value.svg.EnableBackgroundManager r6;

        r6 := @this: org.apache.batik.css.engine.value.svg.EnableBackgroundManager;

        r16 := @parameter0: org.w3c.css.sac.LexicalUnit;

        r7 := @parameter1: org.apache.batik.css.engine.CSSEngine;

        $s0 = interfaceinvoke r16.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i3 = (int) $s0;

        lookupswitch($i3)
        {
            case 12: goto label1;
            case 35: goto label3;
            default: goto label2;
        };

     label1:
        $r14 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value INHERIT_VALUE>;

        return $r14;

     label2:
        $s1 = interfaceinvoke r16.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $r15 = virtualinvoke r6.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidLexicalUnitDOMException(short)>($s1);

        throw $r15;

     label3:
        $r0 = interfaceinvoke r16.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String intern()>();

        if $r2 != "accumulate" goto label4;

        $r13 = <org.apache.batik.css.engine.value.svg.SVGValueConstants: org.apache.batik.css.engine.value.Value ACCUMULATE_VALUE>;

        return $r13;

     label4:
        if $r2 == "new" goto label5;

        $r12 = virtualinvoke r6.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidIdentifierDOMException(java.lang.String)>($r2);

        throw $r12;

     label5:
        $r18 = new org.apache.batik.css.engine.value.ListValue;

        specialinvoke $r18.<org.apache.batik.css.engine.value.ListValue: void <init>(char)>(32);

        $r4 = <org.apache.batik.css.engine.value.svg.SVGValueConstants: org.apache.batik.css.engine.value.Value NEW_VALUE>;

        virtualinvoke $r18.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r4);

        $r5 = interfaceinvoke r16.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        r17 = $r5;

        if $r5 != null goto label6;

        return $r18;

     label6:
        $r8 = specialinvoke r6.<org.apache.batik.css.engine.value.LengthManager: org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit,org.apache.batik.css.engine.CSSEngine)>($r5, r7);

        virtualinvoke $r18.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r8);

        i2 = 1;

        goto label9;

     label7:
        $r9 = interfaceinvoke r17.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        r17 = $r9;

        if $r9 != null goto label8;

        $r11 = virtualinvoke r6.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createMalformedLexicalUnitDOMException()>();

        throw $r11;

     label8:
        $r10 = specialinvoke r6.<org.apache.batik.css.engine.value.LengthManager: org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit,org.apache.batik.css.engine.CSSEngine)>($r9, r7);

        virtualinvoke $r18.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r10);

        i2 = i2 + 1;

     label9:
        if i2 < 4 goto label7;

        return $r18;
    }

    public org.apache.batik.css.engine.value.Value createStringValue(short, java.lang.String, org.apache.batik.css.engine.CSSEngine)
    {
        org.apache.batik.css.engine.value.Value $r1;
        org.apache.batik.css.engine.CSSEngine r5;
        short s0;
        org.w3c.dom.DOMException $r3, $r4;
        int $i1;
        org.apache.batik.css.engine.value.svg.EnableBackgroundManager r2;
        java.lang.String r0;
        boolean $z0;

        r2 := @this: org.apache.batik.css.engine.value.svg.EnableBackgroundManager;

        s0 := @parameter0: short;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: org.apache.batik.css.engine.CSSEngine;

        $i1 = (int) s0;

        if $i1 == 21 goto label1;

        $r4 = virtualinvoke r2.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidStringTypeDOMException(short)>(s0);

        throw $r4;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("accumulate");

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke r2.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidIdentifierDOMException(java.lang.String)>(r0);

        throw $r3;

     label2:
        $r1 = <org.apache.batik.css.engine.value.svg.SVGValueConstants: org.apache.batik.css.engine.value.Value ACCUMULATE_VALUE>;

        return $r1;
    }

    public org.apache.batik.css.engine.value.Value createFloatValue(short, float) throws org.w3c.dom.DOMException
    {
        short s0;
        org.w3c.dom.DOMException $r1;
        float f0;
        org.apache.batik.css.engine.value.svg.EnableBackgroundManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.EnableBackgroundManager;

        s0 := @parameter0: short;

        f0 := @parameter1: float;

        $r1 = virtualinvoke r0.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createDOMException()>();

        throw $r1;
    }

    public org.apache.batik.css.engine.value.Value computeValue(org.apache.batik.css.engine.CSSStylableElement, java.lang.String, org.apache.batik.css.engine.CSSEngine, int, org.apache.batik.css.engine.StyleMap, org.apache.batik.css.engine.value.Value)
    {
        org.apache.batik.css.engine.CSSStylableElement r4;
        org.apache.batik.css.engine.CSSEngine r6;
        short $s0;
        org.apache.batik.css.engine.StyleMap r7;
        int $i1, i2, $i3;
        java.lang.String r5;
        org.apache.batik.css.engine.value.Value r0, $r2, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16;
        org.apache.batik.css.engine.value.ListValue r1, $r17;
        org.apache.batik.css.engine.value.svg.EnableBackgroundManager r3;

        r3 := @this: org.apache.batik.css.engine.value.svg.EnableBackgroundManager;

        r4 := @parameter0: org.apache.batik.css.engine.CSSStylableElement;

        r5 := @parameter1: java.lang.String;

        r6 := @parameter2: org.apache.batik.css.engine.CSSEngine;

        i2 := @parameter3: int;

        r7 := @parameter4: org.apache.batik.css.engine.StyleMap;

        r0 := @parameter5: org.apache.batik.css.engine.value.Value;

        $s0 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        $i3 = (int) $s0;

        if $i3 != 2 goto label2;

        r1 = (org.apache.batik.css.engine.value.ListValue) r0;

        $i1 = virtualinvoke r1.<org.apache.batik.css.engine.value.ListValue: int getLength()>();

        if $i1 != 5 goto label2;

        $r2 = virtualinvoke r1.<org.apache.batik.css.engine.value.ListValue: org.apache.batik.css.engine.value.Value item(int)>(1);

        r3.<org.apache.batik.css.engine.value.svg.EnableBackgroundManager: int orientation> = 0;

        $r8 = specialinvoke r3.<org.apache.batik.css.engine.value.LengthManager: org.apache.batik.css.engine.value.Value computeValue(org.apache.batik.css.engine.CSSStylableElement,java.lang.String,org.apache.batik.css.engine.CSSEngine,int,org.apache.batik.css.engine.StyleMap,org.apache.batik.css.engine.value.Value)>(r4, r5, r6, i2, r7, $r2);

        $r9 = virtualinvoke r1.<org.apache.batik.css.engine.value.ListValue: org.apache.batik.css.engine.value.Value item(int)>(2);

        r3.<org.apache.batik.css.engine.value.svg.EnableBackgroundManager: int orientation> = 1;

        $r10 = specialinvoke r3.<org.apache.batik.css.engine.value.LengthManager: org.apache.batik.css.engine.value.Value computeValue(org.apache.batik.css.engine.CSSStylableElement,java.lang.String,org.apache.batik.css.engine.CSSEngine,int,org.apache.batik.css.engine.StyleMap,org.apache.batik.css.engine.value.Value)>(r4, r5, r6, i2, r7, $r9);

        $r11 = virtualinvoke r1.<org.apache.batik.css.engine.value.ListValue: org.apache.batik.css.engine.value.Value item(int)>(3);

        r3.<org.apache.batik.css.engine.value.svg.EnableBackgroundManager: int orientation> = 0;

        $r12 = specialinvoke r3.<org.apache.batik.css.engine.value.LengthManager: org.apache.batik.css.engine.value.Value computeValue(org.apache.batik.css.engine.CSSStylableElement,java.lang.String,org.apache.batik.css.engine.CSSEngine,int,org.apache.batik.css.engine.StyleMap,org.apache.batik.css.engine.value.Value)>(r4, r5, r6, i2, r7, $r11);

        $r13 = virtualinvoke r1.<org.apache.batik.css.engine.value.ListValue: org.apache.batik.css.engine.value.Value item(int)>(4);

        r3.<org.apache.batik.css.engine.value.svg.EnableBackgroundManager: int orientation> = 1;

        $r14 = specialinvoke r3.<org.apache.batik.css.engine.value.LengthManager: org.apache.batik.css.engine.value.Value computeValue(org.apache.batik.css.engine.CSSStylableElement,java.lang.String,org.apache.batik.css.engine.CSSEngine,int,org.apache.batik.css.engine.StyleMap,org.apache.batik.css.engine.value.Value)>(r4, r5, r6, i2, r7, $r13);

        if $r2 != $r8 goto label1;

        if $r9 != $r10 goto label1;

        if $r11 != $r12 goto label1;

        if $r13 == $r14 goto label2;

     label1:
        $r17 = new org.apache.batik.css.engine.value.ListValue;

        specialinvoke $r17.<org.apache.batik.css.engine.value.ListValue: void <init>(char)>(32);

        $r16 = virtualinvoke r1.<org.apache.batik.css.engine.value.ListValue: org.apache.batik.css.engine.value.Value item(int)>(0);

        virtualinvoke $r17.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r16);

        virtualinvoke $r17.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r8);

        virtualinvoke $r17.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r10);

        virtualinvoke $r17.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r12);

        virtualinvoke $r17.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r14);

        return $r17;

     label2:
        return r0;
    }

    protected int getOrientation()
    {
        int $i0;
        org.apache.batik.css.engine.value.svg.EnableBackgroundManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.EnableBackgroundManager;

        $i0 = r0.<org.apache.batik.css.engine.value.svg.EnableBackgroundManager: int orientation>;

        return $i0;
    }
}
