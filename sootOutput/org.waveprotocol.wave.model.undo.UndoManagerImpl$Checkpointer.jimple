final class org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer extends java.lang.Object
{
    private final java.util.Stack partitions;
    private int lastPartition;

    private void <init>()
    {
        org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer r0;
        java.util.Stack $r1;

        r0 := @this: org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Stack;

        specialinvoke $r1.<java.util.Stack: void <init>()>();

        r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: java.util.Stack partitions> = $r1;

        r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: int lastPartition> = 0;

        return;
    }

    void checkpoint()
    {
        org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer r0;
        int $i0, $i1;
        java.lang.Integer $r2;
        java.util.Stack $r1;

        r0 := @this: org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer;

        $i0 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: int lastPartition>;

        if $i0 <= 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: java.util.Stack partitions>;

        $i1 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: int lastPartition>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r2);

        r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: int lastPartition> = 0;

     label1:
        return;
    }

    int releaseCheckpoint()
    {
        java.lang.Integer $r4;
        java.util.Stack $r1, $r2;
        org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer r0;
        int $i0, $i1, i2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer;

        $i0 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: int lastPartition>;

        if $i0 <= 0 goto label1;

        i2 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: int lastPartition>;

        r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: int lastPartition> = 0;

        return i2;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: java.util.Stack partitions>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r2 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: java.util.Stack partitions>;

        $r3 = virtualinvoke $r2.<java.util.Stack: java.lang.Object pop()>();

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i1;
    }

    void increment()
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer r0;

        r0 := @this: org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer;

        $i0 = r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: int lastPartition>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: int lastPartition> = $i1;

        return;
    }

    void <init>(org.waveprotocol.wave.model.undo.UndoManagerImpl$1)
    {
        org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer r0;
        org.waveprotocol.wave.model.undo.UndoManagerImpl$1 r1;

        r0 := @this: org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer;

        r1 := @parameter0: org.waveprotocol.wave.model.undo.UndoManagerImpl$1;

        specialinvoke r0.<org.waveprotocol.wave.model.undo.UndoManagerImpl$Checkpointer: void <init>()>();

        return;
    }
}
