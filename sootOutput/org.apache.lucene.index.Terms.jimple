public abstract class org.apache.lucene.index.Terms extends java.lang.Object
{
    public static final org.apache.lucene.index.Terms[] EMPTY_ARRAY;

    protected void <init>()
    {
        org.apache.lucene.index.Terms r0;

        r0 := @this: org.apache.lucene.index.Terms;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum) throws java.io.IOException;

    public org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef) throws java.io.IOException
    {
        org.apache.lucene.index.Terms r5;
        org.apache.lucene.util.BytesRef r3;
        org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE $r1, $r2;
        java.lang.IllegalArgumentException $r9;
        org.apache.lucene.index.AutomatonTermsEnum $r7;
        org.apache.lucene.index.Terms$1 $r4;
        org.apache.lucene.index.TermsEnum $r6, $r8;
        org.apache.lucene.util.automaton.CompiledAutomaton r0;

        r5 := @this: org.apache.lucene.index.Terms;

        r0 := @parameter0: org.apache.lucene.util.automaton.CompiledAutomaton;

        r3 := @parameter1: org.apache.lucene.util.BytesRef;

        $r2 = r0.<org.apache.lucene.util.automaton.CompiledAutomaton: org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE type>;

        $r1 = <org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE: org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE NORMAL>;

        if $r2 == $r1 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("please use CompiledAutomaton.getTermsEnum instead");

        throw $r9;

     label1:
        if r3 != null goto label2;

        $r7 = new org.apache.lucene.index.AutomatonTermsEnum;

        $r8 = virtualinvoke r5.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        specialinvoke $r7.<org.apache.lucene.index.AutomatonTermsEnum: void <init>(org.apache.lucene.index.TermsEnum,org.apache.lucene.util.automaton.CompiledAutomaton)>($r8, r0);

        return $r7;

     label2:
        $r4 = new org.apache.lucene.index.Terms$1;

        $r6 = virtualinvoke r5.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        specialinvoke $r4.<org.apache.lucene.index.Terms$1: void <init>(org.apache.lucene.index.Terms,org.apache.lucene.index.TermsEnum,org.apache.lucene.util.automaton.CompiledAutomaton,org.apache.lucene.util.BytesRef)>(r5, $r6, r0, r3);

        return $r4;
    }

    public abstract java.util.Comparator getComparator();

    public abstract long size() throws java.io.IOException;

    public abstract long getSumTotalTermFreq() throws java.io.IOException;

    public abstract long getSumDocFreq() throws java.io.IOException;

    public abstract int getDocCount() throws java.io.IOException;

    public abstract boolean hasOffsets();

    public abstract boolean hasPositions();

    public abstract boolean hasPayloads();

    static void <clinit>()
    {
        org.apache.lucene.index.Terms[] $r0;

        $r0 = newarray (org.apache.lucene.index.Terms)[0];

        <org.apache.lucene.index.Terms: org.apache.lucene.index.Terms[] EMPTY_ARRAY> = $r0;

        return;
    }
}
