public class org.pircbotx.InputThread extends java.lang.Thread
{
    private final org.pircbotx.PircBotX bot;
    private java.io.BufferedReader breader;
    private boolean isConnected;

    protected void <init>(org.pircbotx.PircBotX, java.net.Socket, java.io.BufferedReader)
    {
        java.net.Socket r3;
        org.pircbotx.InputThread r0;
        java.io.BufferedReader r2;
        org.pircbotx.PircBotX r1;

        r0 := @this: org.pircbotx.InputThread;

        r1 := @parameter0: org.pircbotx.PircBotX;

        r3 := @parameter1: java.net.Socket;

        r2 := @parameter2: java.io.BufferedReader;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<org.pircbotx.InputThread: java.io.BufferedReader breader> = null;

        r0.<org.pircbotx.InputThread: boolean isConnected> = 1;

        r0.<org.pircbotx.InputThread: org.pircbotx.PircBotX bot> = r1;

        r0.<org.pircbotx.InputThread: java.io.BufferedReader breader> = r2;

        return;
    }

    boolean isConnected()
    {
        org.pircbotx.InputThread r0;
        boolean $z0;

        r0 := @this: org.pircbotx.InputThread;

        $z0 = r0.<org.pircbotx.InputThread: boolean isConnected>;

        return $z0;
    }

    public void run()
    {
        org.pircbotx.InputThread r0;
        long $l0, $l1;
        java.io.InterruptedIOException $r7;
        java.lang.String $r12, r14;
        org.pircbotx.PircBotX $r1, $r2, $r4, $r6, $r9;
        boolean $z0;
        java.lang.Exception $r3, $r5;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.io.BufferedReader $r13;

        r0 := @this: org.pircbotx.InputThread;

     label01:
        $r13 = r0.<org.pircbotx.InputThread: java.io.BufferedReader breader>;

        r14 = virtualinvoke $r13.<java.io.BufferedReader: java.lang.String readLine()>();

     label02:
        goto label05;

     label03:
        $r7 := @caughtexception;

        $r9 = r0.<org.pircbotx.InputThread: org.pircbotx.PircBotX bot>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PING ");

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = $l0 / 1000L;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<org.pircbotx.PircBotX: void sendRawLine(java.lang.String)>($r12);

        goto label01;

     label04:
        $r5 := @caughtexception;

        $r6 = r0.<org.pircbotx.InputThread: org.pircbotx.PircBotX bot>;

        virtualinvoke $r6.<org.pircbotx.PircBotX: void logException(java.lang.Throwable)>($r5);

        r14 = null;

     label05:
        if r14 != null goto label06;

        goto label11;

     label06:
        $r1 = r0.<org.pircbotx.InputThread: org.pircbotx.PircBotX bot>;

        virtualinvoke $r1.<org.pircbotx.PircBotX: void handleLine(java.lang.String)>(r14);

     label07:
        goto label09;

     label08:
        $r3 := @caughtexception;

        $r4 = r0.<org.pircbotx.InputThread: org.pircbotx.PircBotX bot>;

        virtualinvoke $r4.<org.pircbotx.PircBotX: void logException(java.lang.Throwable)>($r3);

     label09:
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label10;

        r0.<org.pircbotx.InputThread: boolean isConnected> = 0;

        return;

     label10:
        goto label01;

     label11:
        r0.<org.pircbotx.InputThread: boolean isConnected> = 0;

        $r2 = r0.<org.pircbotx.InputThread: org.pircbotx.PircBotX bot>;

        virtualinvoke $r2.<org.pircbotx.PircBotX: void shutdown()>();

        return;

        catch java.io.InterruptedIOException from label01 to label02 with label03;
        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Exception from label06 to label07 with label08;
    }
}
