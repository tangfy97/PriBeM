public final class org.apache.http.conn.routing.HttpRoute extends java.lang.Object implements org.apache.http.conn.routing.RouteInfo, java.lang.Cloneable
{
    private static final org.apache.http.HttpHost[] EMPTY_HTTP_HOST_ARRAY;
    private final org.apache.http.HttpHost targetHost;
    private final java.net.InetAddress localAddress;
    private final org.apache.http.HttpHost[] proxyChain;
    private final org.apache.http.conn.routing.RouteInfo$TunnelType tunnelled;
    private final org.apache.http.conn.routing.RouteInfo$LayerType layered;
    private final boolean secure;

    private void <init>(java.net.InetAddress, org.apache.http.HttpHost, org.apache.http.HttpHost[], boolean, org.apache.http.conn.routing.RouteInfo$TunnelType, org.apache.http.conn.routing.RouteInfo$LayerType)
    {
        org.apache.http.conn.routing.RouteInfo$TunnelType $r3, r8;
        org.apache.http.HttpHost[] r2;
        org.apache.http.conn.routing.HttpRoute r0;
        java.lang.IllegalArgumentException $r5, $r6, $r7;
        java.net.InetAddress r4;
        int $i0;
        org.apache.http.conn.routing.RouteInfo$LayerType r9;
        org.apache.http.HttpHost r1;
        boolean z0;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        r4 := @parameter0: java.net.InetAddress;

        r1 := @parameter1: org.apache.http.HttpHost;

        r2 := @parameter2: org.apache.http.HttpHost[];

        z0 := @parameter3: boolean;

        r8 := @parameter4: org.apache.http.conn.routing.RouteInfo$TunnelType;

        r9 := @parameter5: org.apache.http.conn.routing.RouteInfo$LayerType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host may not be null.");

        throw $r7;

     label1:
        if r2 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Proxies may not be null.");

        throw $r6;

     label2:
        $r3 = <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType TUNNELLED>;

        if r8 != $r3 goto label3;

        $i0 = lengthof r2;

        if $i0 != 0 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Proxy required if tunnelled.");

        throw $r5;

     label3:
        if r8 != null goto label4;

        r8 = <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType PLAIN>;

     label4:
        if r9 != null goto label5;

        r9 = <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType PLAIN>;

     label5:
        r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost targetHost> = r1;

        r0.<org.apache.http.conn.routing.HttpRoute: java.net.InetAddress localAddress> = r4;

        r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] proxyChain> = r2;

        r0.<org.apache.http.conn.routing.HttpRoute: boolean secure> = z0;

        r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$TunnelType tunnelled> = r8;

        r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$LayerType layered> = r9;

        return;
    }

    public void <init>(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost[], boolean, org.apache.http.conn.routing.RouteInfo$TunnelType, org.apache.http.conn.routing.RouteInfo$LayerType)
    {
        org.apache.http.conn.routing.RouteInfo$TunnelType r5;
        org.apache.http.HttpHost[] r3, $r4;
        org.apache.http.conn.routing.HttpRoute r0;
        java.net.InetAddress r1;
        org.apache.http.conn.routing.RouteInfo$LayerType r6;
        org.apache.http.HttpHost r2;
        boolean z0;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        r2 := @parameter0: org.apache.http.HttpHost;

        r1 := @parameter1: java.net.InetAddress;

        r3 := @parameter2: org.apache.http.HttpHost[];

        z0 := @parameter3: boolean;

        r5 := @parameter4: org.apache.http.conn.routing.RouteInfo$TunnelType;

        r6 := @parameter5: org.apache.http.conn.routing.RouteInfo$LayerType;

        $r4 = staticinvoke <org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] toChain(org.apache.http.HttpHost[])>(r3);

        specialinvoke r0.<org.apache.http.conn.routing.HttpRoute: void <init>(java.net.InetAddress,org.apache.http.HttpHost,org.apache.http.HttpHost[],boolean,org.apache.http.conn.routing.RouteInfo$TunnelType,org.apache.http.conn.routing.RouteInfo$LayerType)>(r1, r2, $r4, z0, r5, r6);

        return;
    }

    public void <init>(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost, boolean, org.apache.http.conn.routing.RouteInfo$TunnelType, org.apache.http.conn.routing.RouteInfo$LayerType)
    {
        org.apache.http.conn.routing.RouteInfo$TunnelType r5;
        org.apache.http.HttpHost[] $r4;
        org.apache.http.conn.routing.HttpRoute r0;
        java.net.InetAddress r1;
        org.apache.http.conn.routing.RouteInfo$LayerType r6;
        org.apache.http.HttpHost r2, r3;
        boolean z0;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        r2 := @parameter0: org.apache.http.HttpHost;

        r1 := @parameter1: java.net.InetAddress;

        r3 := @parameter2: org.apache.http.HttpHost;

        z0 := @parameter3: boolean;

        r5 := @parameter4: org.apache.http.conn.routing.RouteInfo$TunnelType;

        r6 := @parameter5: org.apache.http.conn.routing.RouteInfo$LayerType;

        $r4 = staticinvoke <org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] toChain(org.apache.http.HttpHost)>(r3);

        specialinvoke r0.<org.apache.http.conn.routing.HttpRoute: void <init>(java.net.InetAddress,org.apache.http.HttpHost,org.apache.http.HttpHost[],boolean,org.apache.http.conn.routing.RouteInfo$TunnelType,org.apache.http.conn.routing.RouteInfo$LayerType)>(r1, r2, $r4, z0, r5, r6);

        return;
    }

    public void <init>(org.apache.http.HttpHost, java.net.InetAddress, boolean)
    {
        java.net.InetAddress r1;
        org.apache.http.conn.routing.RouteInfo$TunnelType $r4;
        org.apache.http.HttpHost[] $r5;
        org.apache.http.conn.routing.HttpRoute r0;
        org.apache.http.conn.routing.RouteInfo$LayerType $r3;
        org.apache.http.HttpHost r2;
        boolean z0;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        r2 := @parameter0: org.apache.http.HttpHost;

        r1 := @parameter1: java.net.InetAddress;

        z0 := @parameter2: boolean;

        $r5 = <org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] EMPTY_HTTP_HOST_ARRAY>;

        $r4 = <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType PLAIN>;

        $r3 = <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType PLAIN>;

        specialinvoke r0.<org.apache.http.conn.routing.HttpRoute: void <init>(java.net.InetAddress,org.apache.http.HttpHost,org.apache.http.HttpHost[],boolean,org.apache.http.conn.routing.RouteInfo$TunnelType,org.apache.http.conn.routing.RouteInfo$LayerType)>(r1, r2, $r5, z0, $r4, $r3);

        return;
    }

    public void <init>(org.apache.http.HttpHost)
    {
        org.apache.http.conn.routing.RouteInfo$TunnelType $r3;
        org.apache.http.HttpHost[] $r4;
        org.apache.http.conn.routing.HttpRoute r0;
        org.apache.http.conn.routing.RouteInfo$LayerType $r2;
        org.apache.http.HttpHost r1;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        r1 := @parameter0: org.apache.http.HttpHost;

        $r4 = <org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] EMPTY_HTTP_HOST_ARRAY>;

        $r3 = <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType PLAIN>;

        $r2 = <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType PLAIN>;

        specialinvoke r0.<org.apache.http.conn.routing.HttpRoute: void <init>(java.net.InetAddress,org.apache.http.HttpHost,org.apache.http.HttpHost[],boolean,org.apache.http.conn.routing.RouteInfo$TunnelType,org.apache.http.conn.routing.RouteInfo$LayerType)>(null, r1, $r4, 0, $r3, $r2);

        return;
    }

    public void <init>(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost, boolean)
    {
        org.apache.http.conn.routing.RouteInfo$TunnelType $r6;
        org.apache.http.HttpHost[] $r5;
        org.apache.http.conn.routing.HttpRoute r0;
        java.lang.IllegalArgumentException $r4;
        java.net.InetAddress r1;
        org.apache.http.conn.routing.RouteInfo$LayerType $r7;
        org.apache.http.HttpHost r2, r3;
        boolean z0;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        r2 := @parameter0: org.apache.http.HttpHost;

        r1 := @parameter1: java.net.InetAddress;

        r3 := @parameter2: org.apache.http.HttpHost;

        z0 := @parameter3: boolean;

        $r5 = staticinvoke <org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] toChain(org.apache.http.HttpHost)>(r3);

        if z0 == 0 goto label1;

        $r6 = <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType TUNNELLED>;

        goto label2;

     label1:
        $r6 = <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType PLAIN>;

     label2:
        if z0 == 0 goto label3;

        $r7 = <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType LAYERED>;

        goto label4;

     label3:
        $r7 = <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType PLAIN>;

     label4:
        specialinvoke r0.<org.apache.http.conn.routing.HttpRoute: void <init>(java.net.InetAddress,org.apache.http.HttpHost,org.apache.http.HttpHost[],boolean,org.apache.http.conn.routing.RouteInfo$TunnelType,org.apache.http.conn.routing.RouteInfo$LayerType)>(r1, r2, $r5, z0, $r6, $r7);

        if r3 != null goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Proxy host may not be null.");

        throw $r4;

     label5:
        return;
    }

    private static org.apache.http.HttpHost[] toChain(org.apache.http.HttpHost)
    {
        org.apache.http.HttpHost[] $r1, $r2;
        org.apache.http.HttpHost r0;

        r0 := @parameter0: org.apache.http.HttpHost;

        if r0 != null goto label1;

        $r2 = <org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] EMPTY_HTTP_HOST_ARRAY>;

        return $r2;

     label1:
        $r1 = newarray (org.apache.http.HttpHost)[1];

        $r1[0] = r0;

        return $r1;
    }

    private static org.apache.http.HttpHost[] toChain(org.apache.http.HttpHost[])
    {
        org.apache.http.HttpHost[] r0, $r1, r4;
        java.lang.IllegalArgumentException $r3;
        int $i0, i1, $i2, $i3, i4;
        org.apache.http.HttpHost r2;

        r0 := @parameter0: org.apache.http.HttpHost[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 >= 1 goto label2;

     label1:
        $r1 = <org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] EMPTY_HTTP_HOST_ARRAY>;

        return $r1;

     label2:
        i1 = lengthof r0;

        i4 = 0;

     label3:
        if i4 >= i1 goto label5;

        r2 = r0[i4];

        if r2 != null goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Proxy chain may not contain null elements.");

        throw $r3;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        $i2 = lengthof r0;

        r4 = newarray (org.apache.http.HttpHost)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r4, 0, $i3);

        return r4;
    }

    public final org.apache.http.HttpHost getTargetHost()
    {
        org.apache.http.conn.routing.HttpRoute r0;
        org.apache.http.HttpHost $r1;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        $r1 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost targetHost>;

        return $r1;
    }

    public final java.net.InetAddress getLocalAddress()
    {
        java.net.InetAddress $r1;
        org.apache.http.conn.routing.HttpRoute r0;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        $r1 = r0.<org.apache.http.conn.routing.HttpRoute: java.net.InetAddress localAddress>;

        return $r1;
    }

    public final int getHopCount()
    {
        int $i0, $i1;
        org.apache.http.HttpHost[] $r1;
        org.apache.http.conn.routing.HttpRoute r0;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        $r1 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] proxyChain>;

        $i0 = lengthof $r1;

        $i1 = $i0 + 1;

        return $i1;
    }

    public final org.apache.http.HttpHost getHopTarget(int)
    {
        org.apache.http.conn.routing.HttpRoute r0;
        int i0, $i1, $i2;
        java.lang.String $r8, $r13;
        org.apache.http.HttpHost[] $r1;
        java.lang.IllegalArgumentException $r2, $r9;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r10, $r11, $r12;
        org.apache.http.HttpHost r14;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hop index must not be negative: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        $i1 = virtualinvoke r0.<org.apache.http.conn.routing.HttpRoute: int getHopCount()>();

        if i0 < $i1 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hop index ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds route length ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label2:
        $i2 = $i1 - 1;

        if i0 >= $i2 goto label3;

        $r1 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] proxyChain>;

        r14 = $r1[i0];

        goto label4;

     label3:
        r14 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost targetHost>;

     label4:
        return r14;
    }

    public final org.apache.http.HttpHost getProxyHost()
    {
        int $i0;
        org.apache.http.HttpHost[] $r1, $r2;
        org.apache.http.conn.routing.HttpRoute r0;
        org.apache.http.HttpHost $r3;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        $r1 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] proxyChain>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] proxyChain>;

        $r3 = $r2[0];

     label2:
        return $r3;
    }

    public final org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType()
    {
        org.apache.http.conn.routing.HttpRoute r0;
        org.apache.http.conn.routing.RouteInfo$TunnelType $r1;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        $r1 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$TunnelType tunnelled>;

        return $r1;
    }

    public final boolean isTunnelled()
    {
        org.apache.http.conn.routing.RouteInfo$TunnelType $r1, $r2;
        org.apache.http.conn.routing.HttpRoute r0;
        boolean $z0;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        $r2 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$TunnelType tunnelled>;

        $r1 = <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType TUNNELLED>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final org.apache.http.conn.routing.RouteInfo$LayerType getLayerType()
    {
        org.apache.http.conn.routing.HttpRoute r0;
        org.apache.http.conn.routing.RouteInfo$LayerType $r1;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        $r1 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$LayerType layered>;

        return $r1;
    }

    public final boolean isLayered()
    {
        org.apache.http.conn.routing.HttpRoute r0;
        org.apache.http.conn.routing.RouteInfo$LayerType $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        $r2 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$LayerType layered>;

        $r1 = <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType LAYERED>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isSecure()
    {
        org.apache.http.conn.routing.HttpRoute r0;
        boolean $z0;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        $z0 = r0.<org.apache.http.conn.routing.HttpRoute: boolean secure>;

        return $z0;
    }

    public final boolean equals(java.lang.Object)
    {
        org.apache.http.conn.routing.HttpRoute r0, r2;
        java.net.InetAddress $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.http.conn.routing.RouteInfo$TunnelType $r3, $r4;
        org.apache.http.HttpHost[] $r11, $r12;
        java.lang.Object r1;
        org.apache.http.conn.routing.RouteInfo$LayerType $r5, $r6;
        org.apache.http.HttpHost $r7, $r8;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.http.conn.routing.HttpRoute;

        if $z0 == 0 goto label4;

        r2 = (org.apache.http.conn.routing.HttpRoute) r1;

        $z2 = r0.<org.apache.http.conn.routing.HttpRoute: boolean secure>;

        $z1 = r2.<org.apache.http.conn.routing.HttpRoute: boolean secure>;

        if $z2 != $z1 goto label2;

        $r4 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$TunnelType tunnelled>;

        $r3 = r2.<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$TunnelType tunnelled>;

        if $r4 != $r3 goto label2;

        $r6 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$LayerType layered>;

        $r5 = r2.<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$LayerType layered>;

        if $r6 != $r5 goto label2;

        $r8 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost targetHost>;

        $r7 = r2.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost targetHost>;

        $z3 = staticinvoke <org.apache.http.util.LangUtils: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z3 == 0 goto label2;

        $r10 = r0.<org.apache.http.conn.routing.HttpRoute: java.net.InetAddress localAddress>;

        $r9 = r2.<org.apache.http.conn.routing.HttpRoute: java.net.InetAddress localAddress>;

        $z4 = staticinvoke <org.apache.http.util.LangUtils: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9);

        if $z4 == 0 goto label2;

        $r12 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] proxyChain>;

        $r11 = r2.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] proxyChain>;

        $z5 = staticinvoke <org.apache.http.util.LangUtils: boolean equals(java.lang.Object[],java.lang.Object[])>($r12, $r11);

        if $z5 == 0 goto label2;

        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        return $z6;

     label4:
        return 0;
    }

    public final int hashCode()
    {
        org.apache.http.conn.routing.HttpRoute r0;
        java.net.InetAddress $r2;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        boolean $z0;
        org.apache.http.conn.routing.RouteInfo$TunnelType $r4;
        org.apache.http.HttpHost[] $r3, $r6;
        org.apache.http.conn.routing.RouteInfo$LayerType $r5;
        org.apache.http.HttpHost $r1, $r7;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        $r1 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost targetHost>;

        $i0 = staticinvoke <org.apache.http.util.LangUtils: int hashCode(int,java.lang.Object)>(17, $r1);

        $r2 = r0.<org.apache.http.conn.routing.HttpRoute: java.net.InetAddress localAddress>;

        i5 = staticinvoke <org.apache.http.util.LangUtils: int hashCode(int,java.lang.Object)>($i0, $r2);

        i6 = 0;

     label1:
        $r3 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] proxyChain>;

        $i1 = lengthof $r3;

        if i6 >= $i1 goto label2;

        $r6 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] proxyChain>;

        $r7 = $r6[i6];

        i5 = staticinvoke <org.apache.http.util.LangUtils: int hashCode(int,java.lang.Object)>(i5, $r7);

        i6 = i6 + 1;

        goto label1;

     label2:
        $z0 = r0.<org.apache.http.conn.routing.HttpRoute: boolean secure>;

        $i2 = staticinvoke <org.apache.http.util.LangUtils: int hashCode(int,boolean)>(i5, $z0);

        $r4 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$TunnelType tunnelled>;

        $i3 = staticinvoke <org.apache.http.util.LangUtils: int hashCode(int,java.lang.Object)>($i2, $r4);

        $r5 = r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$LayerType layered>;

        $i4 = staticinvoke <org.apache.http.util.LangUtils: int hashCode(int,java.lang.Object)>($i3, $r5);

        return $i4;
    }

    public final java.lang.String toString()
    {
        org.apache.http.conn.routing.HttpRoute r1;
        java.net.InetAddress $r2, $r11;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r8;
        boolean $z0;
        org.apache.http.conn.routing.RouteInfo$TunnelType $r3, $r4;
        org.apache.http.HttpHost[] $r10;
        java.lang.StringBuilder $r0;
        org.apache.http.conn.routing.RouteInfo$LayerType $r5, $r6;
        org.apache.http.HttpHost $r7, r9;

        r1 := @this: org.apache.http.conn.routing.HttpRoute;

        $r0 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r1.<org.apache.http.conn.routing.HttpRoute: int getHopCount()>();

        $i1 = $i0 * 30;

        $i2 = 50 + $i1;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>($i2);

        $r2 = r1.<org.apache.http.conn.routing.HttpRoute: java.net.InetAddress localAddress>;

        if $r2 == null goto label1;

        $r11 = r1.<org.apache.http.conn.routing.HttpRoute: java.net.InetAddress localAddress>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        $r4 = r1.<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$TunnelType tunnelled>;

        $r3 = <org.apache.http.conn.routing.RouteInfo$TunnelType: org.apache.http.conn.routing.RouteInfo$TunnelType TUNNELLED>;

        if $r4 != $r3 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(116);

     label2:
        $r6 = r1.<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$LayerType layered>;

        $r5 = <org.apache.http.conn.routing.RouteInfo$LayerType: org.apache.http.conn.routing.RouteInfo$LayerType LAYERED>;

        if $r6 != $r5 goto label3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(108);

     label3:
        $z0 = r1.<org.apache.http.conn.routing.HttpRoute: boolean secure>;

        if $z0 == 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(115);

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}->");

        $r10 = r1.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] proxyChain>;

        $i3 = lengthof $r10;

        i4 = 0;

     label5:
        if i4 >= $i3 goto label6;

        r9 = $r10[i4];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        i4 = i4 + 1;

        goto label5;

     label6:
        $r7 = r1.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost targetHost>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.lang.Object $r1;
        org.apache.http.conn.routing.HttpRoute r0;

        r0 := @this: org.apache.http.conn.routing.HttpRoute;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.http.HttpHost[] $r0;

        $r0 = newarray (org.apache.http.HttpHost)[0];

        <org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] EMPTY_HTTP_HOST_ARRAY> = $r0;

        return;
    }
}
