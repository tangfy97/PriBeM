class jena.schemagen$2 extends java.lang.Object implements java.util.Comparator
{
    final jena.schemagen this$0;

    void <init>(jena.schemagen)
    {
        jena.schemagen r1;
        jena.schemagen$2 r0;

        r0 := @this: jena.schemagen$2;

        r1 := @parameter0: jena.schemagen;

        r0.<jena.schemagen$2: jena.schemagen this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(com.hp.hpl.jena.rdf.model.RDFNode, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        byte $b3;
        com.hp.hpl.jena.rdf.model.AnonId $r6, $r8;
        int $i0, $i1, $i2, $i5;
        java.lang.String $r2, $r3, $r4, $r5, $r7, $r9;
        jena.schemagen$2 r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.hp.hpl.jena.rdf.model.RDFNode r0, r1;
        com.hp.hpl.jena.rdf.model.Resource r13, r14;
        com.hp.hpl.jena.rdf.model.Literal r11, r12;

        r10 := @this: jena.schemagen$2;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isLiteral()>();

        if $z0 != 0 goto label1;

        $z4 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isLiteral()>();

        if $z4 == 0 goto label5;

     label1:
        $z1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isLiteral()>();

        if $z1 == 0 goto label2;

        $z3 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isLiteral()>();

        if $z3 == 0 goto label2;

        r11 = (com.hp.hpl.jena.rdf.model.Literal) r0;

        r12 = (com.hp.hpl.jena.rdf.model.Literal) r1;

        $r2 = interfaceinvoke r11.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        $r3 = interfaceinvoke r12.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>($r3);

        return $i0;

     label2:
        $z2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isLiteral()>();

        if $z2 == 0 goto label3;

        $b3 = -1;

        goto label4;

     label3:
        $b3 = 1;

     label4:
        return $b3;

     label5:
        r13 = (com.hp.hpl.jena.rdf.model.Resource) r0;

        r14 = (com.hp.hpl.jena.rdf.model.Resource) r1;

        $z5 = interfaceinvoke r13.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z5 == 0 goto label6;

        $z8 = interfaceinvoke r14.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z8 == 0 goto label6;

        $r6 = interfaceinvoke r13.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.AnonId getId()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.rdf.model.AnonId: java.lang.String toString()>();

        $r8 = interfaceinvoke r14.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.AnonId getId()>();

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.rdf.model.AnonId: java.lang.String toString()>();

        $i2 = virtualinvoke $r7.<java.lang.String: int compareTo(java.lang.String)>($r9);

        return $i2;

     label6:
        $z6 = interfaceinvoke r13.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z6 == 0 goto label7;

        $i5 = (int) -1;

        return $i5;

     label7:
        $z7 = interfaceinvoke r14.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z7 == 0 goto label8;

        return 1;

     label8:
        $r4 = interfaceinvoke r13.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r5 = interfaceinvoke r14.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $i1 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>($r5);

        return $i1;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r3, $r4;
        int $i0;
        java.lang.Object r1, r2;
        jena.schemagen$2 r0;

        r0 := @this: jena.schemagen$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.hp.hpl.jena.rdf.model.RDFNode) r1;

        $r3 = (com.hp.hpl.jena.rdf.model.RDFNode) r2;

        $i0 = virtualinvoke r0.<jena.schemagen$2: int compare(com.hp.hpl.jena.rdf.model.RDFNode,com.hp.hpl.jena.rdf.model.RDFNode)>($r4, $r3);

        return $i0;
    }
}
