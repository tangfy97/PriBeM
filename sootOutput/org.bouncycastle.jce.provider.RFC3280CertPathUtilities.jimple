public class org.bouncycastle.jce.provider.RFC3280CertPathUtilities extends java.lang.Object
{
    protected static final java.lang.String CERTIFICATE_POLICIES;
    protected static final java.lang.String POLICY_MAPPINGS;
    protected static final java.lang.String INHIBIT_ANY_POLICY;
    protected static final java.lang.String ISSUING_DISTRIBUTION_POINT;
    protected static final java.lang.String FRESHEST_CRL;
    protected static final java.lang.String DELTA_CRL_INDICATOR;
    protected static final java.lang.String POLICY_CONSTRAINTS;
    protected static final java.lang.String BASIC_CONSTRAINTS;
    protected static final java.lang.String CRL_DISTRIBUTION_POINTS;
    protected static final java.lang.String SUBJECT_ALTERNATIVE_NAME;
    protected static final java.lang.String NAME_CONSTRAINTS;
    protected static final java.lang.String AUTHORITY_KEY_IDENTIFIER;
    protected static final java.lang.String KEY_USAGE;
    protected static final java.lang.String CRL_NUMBER;
    protected static final java.lang.String ANY_POLICY;
    protected static final int KEY_CERT_SIGN;
    protected static final int CRL_SIGN;
    protected static final java.lang.String[] crlReasons;

    public void <init>()
    {
        org.bouncycastle.jce.provider.RFC3280CertPathUtilities r0;

        r0 := @this: org.bouncycastle.jce.provider.RFC3280CertPathUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected static void processCRLB2(org.bouncycastle.asn1.x509.DistributionPoint, java.lang.Object, java.security.cert.X509CRL) throws org.bouncycastle.jce.provider.AnnotatedException
    {
        org.bouncycastle.asn1.x509.GeneralName[] $r16, $r59, r69;
        byte[] $r27, $r47;
        org.bouncycastle.asn1.ASN1Sequence $r29, $r33, $r49;
        org.bouncycastle.asn1.x509.BasicConstraints $r73;
        java.util.Enumeration $r34, $r50;
        java.security.cert.X509CRL r0;
        java.lang.Exception $r61, $r67;
        org.bouncycastle.asn1.x509.GeneralName $r18, $r22, $r24, $r30, $r37, $r52, $r60;
        org.bouncycastle.asn1.DERObject $r2, $r32, $r72;
        java.util.ArrayList $r11;
        java.lang.String $r1, $r71;
        org.bouncycastle.asn1.x509.X509Name $r25, $r38, $r54;
        java.io.IOException $r63, $r65;
        org.bouncycastle.asn1.x509.GeneralNames $r14, $r15, $r23, $r42, $r44, $r58;
        org.bouncycastle.asn1.x509.IssuingDistributionPoint $r3, $r9;
        org.bouncycastle.asn1.ASN1Object $r28, $r48;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9, $z10, z11, z12;
        org.bouncycastle.asn1.DERSequence $r39, $r53;
        java.security.cert.X509Extension $r70;
        org.bouncycastle.asn1.x509.DistributionPointName $r4, $r10, $r13, $r20;
        javax.security.auth.x500.X500Principal $r26, $r46;
        org.bouncycastle.asn1.DEREncodable $r31, $r41, $r56;
        org.bouncycastle.asn1.x509.DistributionPoint r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9, i10, i11;
        org.bouncycastle.jce.provider.AnnotatedException $r6, $r7, $r8, $r17, $r19, $r21, $r62, $r64, $r66, $r68;
        org.bouncycastle.asn1.ASN1Encodable $r36, $r43, $r51, $r57;
        org.bouncycastle.asn1.ASN1EncodableVector $r35, $r45;
        java.lang.Object r5, $r40, $r55;

        r12 := @parameter0: org.bouncycastle.asn1.x509.DistributionPoint;

        r5 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.security.cert.X509CRL;

     label01:
        $r1 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String ISSUING_DISTRIBUTION_POINT>;

        $r2 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r0, $r1);

        $r3 = staticinvoke <org.bouncycastle.asn1.x509.IssuingDistributionPoint: org.bouncycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object)>($r2);

     label02:
        goto label04;

     label03:
        $r67 := @caughtexception;

        $r68 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r68.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Issuing distribution point extension could not be decoded.", $r67);

        throw $r68;

     label04:
        if $r3 == null goto label39;

        $r4 = virtualinvoke $r3.<org.bouncycastle.asn1.x509.IssuingDistributionPoint: org.bouncycastle.asn1.x509.DistributionPointName getDistributionPoint()>();

        if $r4 == null goto label32;

        $r9 = staticinvoke <org.bouncycastle.asn1.x509.IssuingDistributionPoint: org.bouncycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object)>($r3);

        $r10 = virtualinvoke $r9.<org.bouncycastle.asn1.x509.IssuingDistributionPoint: org.bouncycastle.asn1.x509.DistributionPointName getDistributionPoint()>();

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $i0 = virtualinvoke $r10.<org.bouncycastle.asn1.x509.DistributionPointName: int getType()>();

        if $i0 != 0 goto label06;

        $r57 = virtualinvoke $r10.<org.bouncycastle.asn1.x509.DistributionPointName: org.bouncycastle.asn1.ASN1Encodable getName()>();

        $r58 = staticinvoke <org.bouncycastle.asn1.x509.GeneralNames: org.bouncycastle.asn1.x509.GeneralNames getInstance(java.lang.Object)>($r57);

        $r59 = virtualinvoke $r58.<org.bouncycastle.asn1.x509.GeneralNames: org.bouncycastle.asn1.x509.GeneralName[] getNames()>();

        i7 = 0;

     label05:
        $i6 = lengthof $r59;

        if i7 >= $i6 goto label06;

        $r60 = $r59[i7];

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r60);

        i7 = i7 + 1;

        goto label05;

     label06:
        $i1 = virtualinvoke $r10.<org.bouncycastle.asn1.x509.DistributionPointName: int getType()>();

        if $i1 != 1 goto label12;

        $r45 = new org.bouncycastle.asn1.ASN1EncodableVector;

        specialinvoke $r45.<org.bouncycastle.asn1.ASN1EncodableVector: void <init>()>();

     label07:
        $r46 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: javax.security.auth.x500.X500Principal getIssuerPrincipal(java.security.cert.X509CRL)>(r0);

        $r47 = virtualinvoke $r46.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        $r48 = staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Object fromByteArray(byte[])>($r47);

        $r49 = staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r48);

        $r50 = virtualinvoke $r49.<org.bouncycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label08:
        $z7 = interfaceinvoke $r50.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z7 == 0 goto label09;

        $r55 = interfaceinvoke $r50.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r56 = (org.bouncycastle.asn1.DEREncodable) $r55;

        virtualinvoke $r45.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r56);

        goto label08;

     label09:
        goto label11;

     label10:
        $r65 := @caughtexception;

        $r66 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r66.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Could not read CRL issuer.", $r65);

        throw $r66;

     label11:
        $r51 = virtualinvoke $r10.<org.bouncycastle.asn1.x509.DistributionPointName: org.bouncycastle.asn1.ASN1Encodable getName()>();

        virtualinvoke $r45.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r51);

        $r52 = new org.bouncycastle.asn1.x509.GeneralName;

        $r53 = new org.bouncycastle.asn1.DERSequence;

        specialinvoke $r53.<org.bouncycastle.asn1.DERSequence: void <init>(org.bouncycastle.asn1.DEREncodableVector)>($r45);

        $r54 = staticinvoke <org.bouncycastle.asn1.x509.X509Name: org.bouncycastle.asn1.x509.X509Name getInstance(java.lang.Object)>($r53);

        specialinvoke $r52.<org.bouncycastle.asn1.x509.GeneralName: void <init>(org.bouncycastle.asn1.x509.X509Name)>($r54);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r52);

     label12:
        z8 = 0;

        z12 = 0;

        z11 = 0;

        $r13 = virtualinvoke r12.<org.bouncycastle.asn1.x509.DistributionPoint: org.bouncycastle.asn1.x509.DistributionPointName getDistributionPoint()>();

        if $r13 == null goto label27;

        $r20 = virtualinvoke r12.<org.bouncycastle.asn1.x509.DistributionPoint: org.bouncycastle.asn1.x509.DistributionPointName getDistributionPoint()>();

        r69 = null;

        $i3 = virtualinvoke $r20.<org.bouncycastle.asn1.x509.DistributionPointName: int getType()>();

        if $i3 != 0 goto label13;

        $r43 = virtualinvoke $r20.<org.bouncycastle.asn1.x509.DistributionPointName: org.bouncycastle.asn1.ASN1Encodable getName()>();

        $r44 = staticinvoke <org.bouncycastle.asn1.x509.GeneralNames: org.bouncycastle.asn1.x509.GeneralNames getInstance(java.lang.Object)>($r43);

        r69 = virtualinvoke $r44.<org.bouncycastle.asn1.x509.GeneralNames: org.bouncycastle.asn1.x509.GeneralName[] getNames()>();

     label13:
        $i4 = virtualinvoke $r20.<org.bouncycastle.asn1.x509.DistributionPointName: int getType()>();

        if $i4 != 1 goto label22;

        $r23 = virtualinvoke r12.<org.bouncycastle.asn1.x509.DistributionPoint: org.bouncycastle.asn1.x509.GeneralNames getCRLIssuer()>();

        if $r23 == null goto label14;

        $r42 = virtualinvoke r12.<org.bouncycastle.asn1.x509.DistributionPoint: org.bouncycastle.asn1.x509.GeneralNames getCRLIssuer()>();

        r69 = virtualinvoke $r42.<org.bouncycastle.asn1.x509.GeneralNames: org.bouncycastle.asn1.x509.GeneralName[] getNames()>();

        goto label18;

     label14:
        r69 = newarray (org.bouncycastle.asn1.x509.GeneralName)[1];

     label15:
        $r24 = new org.bouncycastle.asn1.x509.GeneralName;

        $r25 = new org.bouncycastle.asn1.x509.X509Name;

        $r26 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: javax.security.auth.x500.X500Principal getEncodedIssuerPrincipal(java.lang.Object)>(r5);

        $r27 = virtualinvoke $r26.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        $r28 = staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Object fromByteArray(byte[])>($r27);

        $r29 = (org.bouncycastle.asn1.ASN1Sequence) $r28;

        specialinvoke $r25.<org.bouncycastle.asn1.x509.X509Name: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r29);

        specialinvoke $r24.<org.bouncycastle.asn1.x509.GeneralName: void <init>(org.bouncycastle.asn1.x509.X509Name)>($r25);

        r69[0] = $r24;

     label16:
        goto label18;

     label17:
        $r63 := @caughtexception;

        $r64 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r64.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Could not read certificate issuer.", $r63);

        throw $r64;

     label18:
        i8 = 0;

     label19:
        $i9 = lengthof r69;

        if i8 >= $i9 goto label22;

        $r30 = r69[i8];

        $r31 = virtualinvoke $r30.<org.bouncycastle.asn1.x509.GeneralName: org.bouncycastle.asn1.DEREncodable getName()>();

        $r32 = interfaceinvoke $r31.<org.bouncycastle.asn1.DEREncodable: org.bouncycastle.asn1.DERObject getDERObject()>();

        $r33 = staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<org.bouncycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

        $r35 = new org.bouncycastle.asn1.ASN1EncodableVector;

        specialinvoke $r35.<org.bouncycastle.asn1.ASN1EncodableVector: void <init>()>();

     label20:
        $z6 = interfaceinvoke $r34.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z6 == 0 goto label21;

        $r40 = interfaceinvoke $r34.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r41 = (org.bouncycastle.asn1.DEREncodable) $r40;

        virtualinvoke $r35.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r41);

        goto label20;

     label21:
        $r36 = virtualinvoke $r20.<org.bouncycastle.asn1.x509.DistributionPointName: org.bouncycastle.asn1.ASN1Encodable getName()>();

        virtualinvoke $r35.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r36);

        $r37 = new org.bouncycastle.asn1.x509.GeneralName;

        $r38 = new org.bouncycastle.asn1.x509.X509Name;

        $r39 = new org.bouncycastle.asn1.DERSequence;

        specialinvoke $r39.<org.bouncycastle.asn1.DERSequence: void <init>(org.bouncycastle.asn1.DEREncodableVector)>($r35);

        specialinvoke $r38.<org.bouncycastle.asn1.x509.X509Name: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r39);

        specialinvoke $r37.<org.bouncycastle.asn1.x509.GeneralName: void <init>(org.bouncycastle.asn1.x509.X509Name)>($r38);

        r69[i8] = $r37;

        i8 = i8 + 1;

        goto label19;

     label22:
        if r69 == null goto label25;

        i10 = 0;

     label23:
        $i5 = lengthof r69;

        if i10 >= $i5 goto label25;

        $r22 = r69[i10];

        $z5 = interfaceinvoke $r11.<java.util.List: boolean contains(java.lang.Object)>($r22);

        if $z5 == 0 goto label24;

        z8 = 1;

        z12 = 1;

        goto label25;

     label24:
        i10 = i10 + 1;

        goto label23;

     label25:
        if z12 != 0 goto label26;

        $r21 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r21.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.");

        throw $r21;

     label26:
        goto label32;

     label27:
        $r14 = virtualinvoke r12.<org.bouncycastle.asn1.x509.DistributionPoint: org.bouncycastle.asn1.x509.GeneralNames getCRLIssuer()>();

        if $r14 != null goto label28;

        $r19 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r19.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Either the cRLIssuer or the distributionPoint field must be contained in DistributionPoint.");

        throw $r19;

     label28:
        $r15 = virtualinvoke r12.<org.bouncycastle.asn1.x509.DistributionPoint: org.bouncycastle.asn1.x509.GeneralNames getCRLIssuer()>();

        $r16 = virtualinvoke $r15.<org.bouncycastle.asn1.x509.GeneralNames: org.bouncycastle.asn1.x509.GeneralName[] getNames()>();

        i11 = 0;

     label29:
        $i2 = lengthof $r16;

        if i11 >= $i2 goto label31;

        $r18 = $r16[i11];

        $z4 = interfaceinvoke $r11.<java.util.List: boolean contains(java.lang.Object)>($r18);

        if $z4 == 0 goto label30;

        z8 = 1;

        z11 = 1;

        goto label31;

     label30:
        i11 = i11 + 1;

        goto label29;

     label31:
        if z11 != 0 goto label32;

        $r17 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r17.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.");

        throw $r17;

     label32:
        $r70 = (java.security.cert.X509Extension) r5;

        $r71 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String BASIC_CONSTRAINTS>;

        $r72 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>($r70, $r71);

        $r73 = staticinvoke <org.bouncycastle.asn1.x509.BasicConstraints: org.bouncycastle.asn1.x509.BasicConstraints getInstance(java.lang.Object)>($r72);

     label33:
        goto label35;

     label34:
        $r61 := @caughtexception;

        $r62 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r62.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Basic constraints extension could not be decoded.", $r61);

        throw $r62;

     label35:
        $z0 = r5 instanceof java.security.cert.X509Certificate;

        if $z0 == 0 goto label38;

        $z1 = virtualinvoke $r3.<org.bouncycastle.asn1.x509.IssuingDistributionPoint: boolean onlyContainsUserCerts()>();

        if $z1 == 0 goto label36;

        if $r73 == null goto label36;

        $z3 = virtualinvoke $r73.<org.bouncycastle.asn1.x509.BasicConstraints: boolean isCA()>();

        if $z3 == 0 goto label36;

        $r8 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r8.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("CA Cert CRL only contains user certificates.");

        throw $r8;

     label36:
        $z9 = virtualinvoke $r3.<org.bouncycastle.asn1.x509.IssuingDistributionPoint: boolean onlyContainsCACerts()>();

        if $z9 == 0 goto label38;

        if $r73 == null goto label37;

        $z2 = virtualinvoke $r73.<org.bouncycastle.asn1.x509.BasicConstraints: boolean isCA()>();

        if $z2 != 0 goto label38;

     label37:
        $r7 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r7.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("End CRL only contains CA certificates.");

        throw $r7;

     label38:
        $z10 = virtualinvoke $r3.<org.bouncycastle.asn1.x509.IssuingDistributionPoint: boolean onlyContainsAttributeCerts()>();

        if $z10 == 0 goto label39;

        $r6 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r6.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("onlyContainsAttributeCerts boolean is asserted.");

        throw $r6;

     label39:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.io.IOException from label07 to label09 with label10;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.lang.Exception from label32 to label33 with label34;
    }

    protected static void processCRLB1(org.bouncycastle.asn1.x509.DistributionPoint, java.lang.Object, java.security.cert.X509CRL) throws org.bouncycastle.jce.provider.AnnotatedException
    {
        org.bouncycastle.asn1.x509.GeneralName[] $r9;
        byte[] $r16, $r21;
        java.security.cert.X509CRL r0;
        org.bouncycastle.asn1.x509.IssuingDistributionPoint $r17;
        boolean $z0, $z1, $z2, z3, z4, z5, z6, z7;
        org.bouncycastle.asn1.x509.GeneralName $r12, $r13;
        javax.security.auth.x500.X500Principal $r4, $r6, $r20;
        org.bouncycastle.asn1.DERObject $r2, $r15;
        org.bouncycastle.asn1.DEREncodable $r14;
        org.bouncycastle.asn1.x509.DistributionPoint r3;
        int $i0, $i1, i2;
        org.bouncycastle.jce.provider.AnnotatedException $r7, $r10, $r11, $r19;
        java.lang.String $r1;
        java.io.IOException $r18;
        org.bouncycastle.asn1.x509.GeneralNames $r8, $r22;
        java.lang.Object r5;

        r3 := @parameter0: org.bouncycastle.asn1.x509.DistributionPoint;

        r5 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.security.cert.X509CRL;

        $r1 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String ISSUING_DISTRIBUTION_POINT>;

        $r2 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r0, $r1);

        z3 = 0;

        if $r2 == null goto label01;

        $r17 = staticinvoke <org.bouncycastle.asn1.x509.IssuingDistributionPoint: org.bouncycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object)>($r2);

        $z2 = virtualinvoke $r17.<org.bouncycastle.asn1.x509.IssuingDistributionPoint: boolean isIndirectCRL()>();

        if $z2 == 0 goto label01;

        z3 = 1;

     label01:
        $r20 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: javax.security.auth.x500.X500Principal getIssuerPrincipal(java.security.cert.X509CRL)>(r0);

        $r21 = virtualinvoke $r20.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        z4 = 0;

        z7 = 0;

        z6 = 0;

        z5 = 0;

        $r22 = virtualinvoke r3.<org.bouncycastle.asn1.x509.DistributionPoint: org.bouncycastle.asn1.x509.GeneralNames getCRLIssuer()>();

        if $r22 == null goto label10;

        $r8 = virtualinvoke r3.<org.bouncycastle.asn1.x509.DistributionPoint: org.bouncycastle.asn1.x509.GeneralNames getCRLIssuer()>();

        $r9 = virtualinvoke $r8.<org.bouncycastle.asn1.x509.GeneralNames: org.bouncycastle.asn1.x509.GeneralName[] getNames()>();

        i2 = 0;

     label02:
        $i0 = lengthof $r9;

        if i2 >= $i0 goto label07;

        $r12 = $r9[i2];

        $i1 = virtualinvoke $r12.<org.bouncycastle.asn1.x509.GeneralName: int getTagNo()>();

        if $i1 != 4 goto label06;

     label03:
        $r13 = $r9[i2];

        $r14 = virtualinvoke $r13.<org.bouncycastle.asn1.x509.GeneralName: org.bouncycastle.asn1.DEREncodable getName()>();

        $r15 = interfaceinvoke $r14.<org.bouncycastle.asn1.DEREncodable: org.bouncycastle.asn1.DERObject getDERObject()>();

        $r16 = virtualinvoke $r15.<org.bouncycastle.asn1.DERObject: byte[] getEncoded()>();

        $z1 = staticinvoke <org.bouncycastle.util.Arrays: boolean areEqual(byte[],byte[])>($r16, $r21);

        if $z1 == 0 goto label04;

        z4 = 1;

        z7 = 1;

        z6 = 1;

        z5 = 1;

     label04:
        goto label06;

     label05:
        $r18 := @caughtexception;

        $r19 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r19.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("CRL issuer information from distribution point cannot be decoded.", $r18);

        throw $r19;

     label06:
        i2 = i2 + 1;

        goto label02;

     label07:
        if z5 == 0 goto label08;

        if z3 != 0 goto label08;

        $r11 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r11.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Distribution point contains cRLIssuer field but CRL is not indirect.");

        throw $r11;

     label08:
        if z7 != 0 goto label09;

        $r10 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r10.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("CRL issuer of CRL does not match CRL issuer of distribution point.");

        throw $r10;

     label09:
        goto label11;

     label10:
        $r4 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: javax.security.auth.x500.X500Principal getIssuerPrincipal(java.security.cert.X509CRL)>(r0);

        $r6 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: javax.security.auth.x500.X500Principal getEncodedIssuerPrincipal(java.lang.Object)>(r5);

        $z0 = virtualinvoke $r4.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label11;

        z4 = 1;

        z6 = 1;

     label11:
        if z6 != 0 goto label12;

        $r7 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r7.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Cannot find matching CRL issuer for certificate.");

        throw $r7;

     label12:
        return;

        catch java.io.IOException from label03 to label04 with label05;
    }

    protected static org.bouncycastle.jce.provider.ReasonsMask processCRLD(java.security.cert.X509CRL, org.bouncycastle.asn1.x509.DistributionPoint) throws org.bouncycastle.jce.provider.AnnotatedException
    {
        org.bouncycastle.asn1.DERObject $r2;
        java.security.cert.X509CRL r0;
        org.bouncycastle.asn1.x509.IssuingDistributionPoint $r3;
        org.bouncycastle.asn1.x509.DistributionPoint r4;
        int $i0, $i1, $i2, $i3;
        org.bouncycastle.jce.provider.AnnotatedException $r19;
        java.lang.String $r1;
        org.bouncycastle.asn1.x509.ReasonFlags $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r14, $r16;
        org.bouncycastle.jce.provider.ReasonsMask $r9, $r13, $r15, $r17, $r20, $r21, $r22, $r23;
        java.lang.Exception $r18;

        r0 := @parameter0: java.security.cert.X509CRL;

        r4 := @parameter1: org.bouncycastle.asn1.x509.DistributionPoint;

     label01:
        $r1 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String ISSUING_DISTRIBUTION_POINT>;

        $r2 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r0, $r1);

        $r3 = staticinvoke <org.bouncycastle.asn1.x509.IssuingDistributionPoint: org.bouncycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object)>($r2);

     label02:
        goto label04;

     label03:
        $r18 := @caughtexception;

        $r19 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r19.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Issuing distribution point extension could not be decoded.", $r18);

        throw $r19;

     label04:
        if $r3 == null goto label05;

        $r11 = virtualinvoke $r3.<org.bouncycastle.asn1.x509.IssuingDistributionPoint: org.bouncycastle.asn1.x509.ReasonFlags getOnlySomeReasons()>();

        if $r11 == null goto label05;

        $r12 = virtualinvoke r4.<org.bouncycastle.asn1.x509.DistributionPoint: org.bouncycastle.asn1.x509.ReasonFlags getReasons()>();

        if $r12 == null goto label05;

        $r13 = new org.bouncycastle.jce.provider.ReasonsMask;

        $r14 = virtualinvoke r4.<org.bouncycastle.asn1.x509.DistributionPoint: org.bouncycastle.asn1.x509.ReasonFlags getReasons()>();

        $i2 = virtualinvoke $r14.<org.bouncycastle.asn1.x509.ReasonFlags: int intValue()>();

        specialinvoke $r13.<org.bouncycastle.jce.provider.ReasonsMask: void <init>(int)>($i2);

        $r15 = new org.bouncycastle.jce.provider.ReasonsMask;

        $r16 = virtualinvoke $r3.<org.bouncycastle.asn1.x509.IssuingDistributionPoint: org.bouncycastle.asn1.x509.ReasonFlags getOnlySomeReasons()>();

        $i3 = virtualinvoke $r16.<org.bouncycastle.asn1.x509.ReasonFlags: int intValue()>();

        specialinvoke $r15.<org.bouncycastle.jce.provider.ReasonsMask: void <init>(int)>($i3);

        $r17 = virtualinvoke $r13.<org.bouncycastle.jce.provider.ReasonsMask: org.bouncycastle.jce.provider.ReasonsMask intersect(org.bouncycastle.jce.provider.ReasonsMask)>($r15);

        return $r17;

     label05:
        if $r3 == null goto label06;

        $r10 = virtualinvoke $r3.<org.bouncycastle.asn1.x509.IssuingDistributionPoint: org.bouncycastle.asn1.x509.ReasonFlags getOnlySomeReasons()>();

        if $r10 != null goto label07;

     label06:
        $r5 = virtualinvoke r4.<org.bouncycastle.asn1.x509.DistributionPoint: org.bouncycastle.asn1.x509.ReasonFlags getReasons()>();

        if $r5 != null goto label07;

        $r9 = <org.bouncycastle.jce.provider.ReasonsMask: org.bouncycastle.jce.provider.ReasonsMask allReasons>;

        return $r9;

     label07:
        $r6 = virtualinvoke r4.<org.bouncycastle.asn1.x509.DistributionPoint: org.bouncycastle.asn1.x509.ReasonFlags getReasons()>();

        if $r6 != null goto label08;

        $r20 = <org.bouncycastle.jce.provider.ReasonsMask: org.bouncycastle.jce.provider.ReasonsMask allReasons>;

        goto label09;

     label08:
        $r20 = new org.bouncycastle.jce.provider.ReasonsMask;

        $r7 = virtualinvoke r4.<org.bouncycastle.asn1.x509.DistributionPoint: org.bouncycastle.asn1.x509.ReasonFlags getReasons()>();

        $i0 = virtualinvoke $r7.<org.bouncycastle.asn1.x509.ReasonFlags: int intValue()>();

        specialinvoke $r20.<org.bouncycastle.jce.provider.ReasonsMask: void <init>(int)>($i0);

     label09:
        if $r3 != null goto label10;

        $r21 = <org.bouncycastle.jce.provider.ReasonsMask: org.bouncycastle.jce.provider.ReasonsMask allReasons>;

        goto label11;

     label10:
        $r22 = new org.bouncycastle.jce.provider.ReasonsMask;

        $r21 = $r22;

        $r8 = virtualinvoke $r3.<org.bouncycastle.asn1.x509.IssuingDistributionPoint: org.bouncycastle.asn1.x509.ReasonFlags getOnlySomeReasons()>();

        $i1 = virtualinvoke $r8.<org.bouncycastle.asn1.x509.ReasonFlags: int intValue()>();

        specialinvoke $r22.<org.bouncycastle.jce.provider.ReasonsMask: void <init>(int)>($i1);

     label11:
        $r23 = virtualinvoke $r20.<org.bouncycastle.jce.provider.ReasonsMask: org.bouncycastle.jce.provider.ReasonsMask intersect(org.bouncycastle.jce.provider.ReasonsMask)>($r21);

        return $r23;

        catch java.lang.Exception from label01 to label02 with label03;
    }

    protected static java.util.Set processCRLF(java.security.cert.X509CRL, java.lang.Object, java.security.cert.X509Certificate, java.security.PublicKey, org.bouncycastle.x509.ExtendedPKIXParameters, java.util.List) throws org.bouncycastle.jce.provider.AnnotatedException
    {
        java.security.cert.X509Certificate r11, r44, r48;
        byte[] $r3;
        java.security.cert.X509CRL r1;
        org.bouncycastle.x509.ExtendedPKIXParameters r4, $r25, r45;
        java.security.cert.CertPathBuilder $r22;
        java.security.cert.CertPathValidatorException $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.bouncycastle.x509.X509CertStoreSelector $r0, $r23;
        java.util.Collection $r6, $r8, $r10;
        org.bouncycastle.x509.ExtendedPKIXBuilderParameters r46;
        java.security.cert.CertPathBuilderResult $r27;
        java.lang.Exception $r32;
        java.util.List $r5, $r7, $r9, r26, $r29;
        javax.security.auth.x500.X500Principal $r2;
        java.util.ArrayList $r13, $r14;
        java.util.HashSet $r15;
        java.security.cert.CertPathBuilderException $r37;
        int $i0, $i1, i2;
        org.bouncycastle.jce.provider.AnnotatedException $r16, $r20, $r36, $r38, $r39, $r40, $r42, r47;
        java.lang.String $r34;
        java.util.Iterator $r12;
        boolean[] $r18;
        java.security.PublicKey $r30, r31;
        java.io.IOException $r41;
        java.security.cert.CertPath $r28;
        java.lang.RuntimeException $r33;
        java.lang.Object $r17, $r19, $r21, $r24, r43;

        r1 := @parameter0: java.security.cert.X509CRL;

        r43 := @parameter1: java.lang.Object;

        r11 := @parameter2: java.security.cert.X509Certificate;

        r31 := @parameter3: java.security.PublicKey;

        r4 := @parameter4: org.bouncycastle.x509.ExtendedPKIXParameters;

        r26 := @parameter5: java.util.List;

        $r0 = new org.bouncycastle.x509.X509CertStoreSelector;

        specialinvoke $r0.<org.bouncycastle.x509.X509CertStoreSelector: void <init>()>();

     label01:
        $r2 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: javax.security.auth.x500.X500Principal getIssuerPrincipal(java.security.cert.X509CRL)>(r1);

        $r3 = virtualinvoke $r2.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        virtualinvoke $r0.<org.bouncycastle.x509.X509CertStoreSelector: void setSubject(byte[])>($r3);

     label02:
        goto label04;

     label03:
        $r41 := @caughtexception;

        $r42 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r42.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Subject criteria for certificate selector to find issuer certificate for CRL could not be set.", $r41);

        throw $r42;

     label04:
        $r5 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: java.util.List getStores()>();

        $r6 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Collection findCertificates(org.bouncycastle.x509.X509CertStoreSelector,java.util.List)>($r0, $r5);

        $r7 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: java.util.List getAdditionalStores()>();

        $r8 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Collection findCertificates(org.bouncycastle.x509.X509CertStoreSelector,java.util.List)>($r0, $r7);

        interfaceinvoke $r6.<java.util.Collection: boolean addAll(java.util.Collection)>($r8);

        $r9 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: java.util.List getCertStores()>();

        $r10 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Collection findCertificates(org.bouncycastle.x509.X509CertStoreSelector,java.util.List)>($r0, $r9);

        interfaceinvoke $r6.<java.util.Collection: boolean addAll(java.util.Collection)>($r10);

     label05:
        goto label07;

     label06:
        $r39 := @caughtexception;

        $r40 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r40.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Issuer certificate for CRL cannot be searched.", $r39);

        throw $r40;

     label07:
        interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>(r11);

        $r12 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

     label08:
        $z5 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label17;

        $r21 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r44 = (java.security.cert.X509Certificate) $r21;

        $z3 = virtualinvoke r44.<java.security.cert.X509Certificate: boolean equals(java.lang.Object)>(r11);

        if $z3 == 0 goto label09;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r44);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r31);

        goto label08;

     label09:
        $r22 = staticinvoke <java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String,java.lang.String)>("PKIX", "BC");

        $r23 = new org.bouncycastle.x509.X509CertStoreSelector;

        specialinvoke $r23.<org.bouncycastle.x509.X509CertStoreSelector: void <init>()>();

        virtualinvoke $r23.<org.bouncycastle.x509.X509CertStoreSelector: void setCertificate(java.security.cert.X509Certificate)>(r44);

        $r24 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: java.lang.Object clone()>();

        r45 = (org.bouncycastle.x509.ExtendedPKIXParameters) $r24;

        virtualinvoke r45.<org.bouncycastle.x509.ExtendedPKIXParameters: void setTargetCertConstraints(java.security.cert.CertSelector)>($r23);

        $r25 = staticinvoke <org.bouncycastle.x509.ExtendedPKIXBuilderParameters: org.bouncycastle.x509.ExtendedPKIXParameters getInstance(java.security.cert.PKIXParameters)>(r45);

        r46 = (org.bouncycastle.x509.ExtendedPKIXBuilderParameters) $r25;

        $z4 = interfaceinvoke r26.<java.util.List: boolean contains(java.lang.Object)>(r44);

        if $z4 == 0 goto label10;

        virtualinvoke r46.<org.bouncycastle.x509.ExtendedPKIXBuilderParameters: void setRevocationEnabled(boolean)>(0);

        goto label11;

     label10:
        virtualinvoke r46.<org.bouncycastle.x509.ExtendedPKIXBuilderParameters: void setRevocationEnabled(boolean)>(1);

     label11:
        $r27 = virtualinvoke $r22.<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilderResult build(java.security.cert.CertPathParameters)>(r46);

        $r28 = interfaceinvoke $r27.<java.security.cert.CertPathBuilderResult: java.security.cert.CertPath getCertPath()>();

        $r29 = virtualinvoke $r28.<java.security.cert.CertPath: java.util.List getCertificates()>();

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r44);

        $r30 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.security.PublicKey getNextWorkingKey(java.util.List,int)>($r29, 0);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r30);

     label12:
        goto label16;

     label13:
        $r37 := @caughtexception;

        $r38 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r38.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error.", $r37);

        throw $r38;

     label14:
        $r35 := @caughtexception;

        $r36 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r36.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Public key of issuer certificate of CRL could not be retrieved.", $r35);

        throw $r36;

     label15:
        $r32 := @caughtexception;

        $r33 = new java.lang.RuntimeException;

        $r34 = virtualinvoke $r32.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r33.<java.lang.RuntimeException: void <init>(java.lang.String)>($r34);

        throw $r33;

     label16:
        goto label08;

     label17:
        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>()>();

        r47 = null;

        i2 = 0;

     label18:
        $i0 = interfaceinvoke $r13.<java.util.List: int size()>();

        if i2 >= $i0 goto label22;

        $r17 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i2);

        r48 = (java.security.cert.X509Certificate) $r17;

        $r18 = virtualinvoke r48.<java.security.cert.X509Certificate: boolean[] getKeyUsage()>();

        if $r18 == null goto label20;

        $i1 = lengthof $r18;

        if $i1 < 7 goto label19;

        $z2 = $r18[6];

        if $z2 != 0 goto label20;

     label19:
        $r20 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r20.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Issuer certificate key usage extension does not permit CRL signing.");

        r47 = $r20;

        goto label21;

     label20:
        $r19 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i2);

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>($r19);

     label21:
        i2 = i2 + 1;

        goto label18;

     label22:
        $z0 = interfaceinvoke $r15.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label23;

        if r47 != null goto label23;

        $r16 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r16.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Cannot find a valid issuer certificate.");

        throw $r16;

     label23:
        $z1 = interfaceinvoke $r15.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label24;

        if r47 == null goto label24;

        throw r47;

     label24:
        return $r15;

        catch java.io.IOException from label01 to label02 with label03;
        catch org.bouncycastle.jce.provider.AnnotatedException from label04 to label05 with label06;
        catch java.security.cert.CertPathBuilderException from label09 to label12 with label13;
        catch java.security.cert.CertPathValidatorException from label09 to label12 with label14;
        catch java.lang.Exception from label09 to label12 with label15;
    }

    protected static java.security.PublicKey processCRLG(java.security.cert.X509CRL, java.util.Set) throws org.bouncycastle.jce.provider.AnnotatedException
    {
        java.util.Iterator $r1;
        java.security.cert.X509CRL r5;
        java.util.Set r0;
        java.security.PublicKey r4;
        java.lang.Exception $r6, r7;
        org.bouncycastle.jce.provider.AnnotatedException $r2;
        java.lang.Object $r3;
        boolean $z0;

        r5 := @parameter0: java.security.cert.X509CRL;

        r0 := @parameter1: java.util.Set;

        r7 = null;

        $r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.security.PublicKey) $r3;

     label2:
        virtualinvoke r5.<java.security.cert.X509CRL: void verify(java.security.PublicKey)>(r4);

     label3:
        return r4;

     label4:
        $r6 := @caughtexception;

        r7 = $r6;

        goto label1;

     label5:
        $r2 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r2.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot verify CRL.", r7);

        throw $r2;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected static java.security.cert.X509CRL processCRLH(java.util.Set, java.security.PublicKey) throws org.bouncycastle.jce.provider.AnnotatedException
    {
        java.util.Iterator $r1;
        java.security.cert.X509CRL r4;
        java.util.Set r0;
        java.security.PublicKey r5;
        java.lang.Exception $r6, r7;
        org.bouncycastle.jce.provider.AnnotatedException $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Set;

        r5 := @parameter1: java.security.PublicKey;

        r7 = null;

        $r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.security.cert.X509CRL) $r3;

     label2:
        virtualinvoke r4.<java.security.cert.X509CRL: void verify(java.security.PublicKey)>(r5);

     label3:
        return r4;

     label4:
        $r6 := @caughtexception;

        r7 = $r6;

        goto label1;

     label5:
        if r7 == null goto label6;

        $r2 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r2.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot verify delta CRL.", r7);

        throw $r2;

     label6:
        return null;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected static java.util.Set processCRLA1i(java.util.Date, org.bouncycastle.x509.ExtendedPKIXParameters, java.security.cert.X509Certificate, java.security.cert.X509CRL) throws org.bouncycastle.jce.provider.AnnotatedException
    {
        java.security.cert.X509Certificate r2;
        org.bouncycastle.asn1.DERObject $r4, $r10;
        java.util.Date r6;
        org.bouncycastle.x509.ExtendedPKIXParameters r1;
        java.security.cert.X509CRL r7;
        java.util.HashSet $r0;
        org.bouncycastle.jce.provider.AnnotatedException $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        java.lang.String $r3, $r9;
        boolean $z0;
        org.bouncycastle.asn1.x509.CRLDistPoint $r5, r19;
        java.util.Set $r8;

        r6 := @parameter0: java.util.Date;

        r1 := @parameter1: org.bouncycastle.x509.ExtendedPKIXParameters;

        r2 := @parameter2: java.security.cert.X509Certificate;

        r7 := @parameter3: java.security.cert.X509CRL;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $z0 = virtualinvoke r1.<org.bouncycastle.x509.ExtendedPKIXParameters: boolean isUseDeltasEnabled()>();

        if $z0 == 0 goto label15;

     label01:
        $r3 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String FRESHEST_CRL>;

        $r4 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r2, $r3);

        $r5 = staticinvoke <org.bouncycastle.asn1.x509.CRLDistPoint: org.bouncycastle.asn1.x509.CRLDistPoint getInstance(java.lang.Object)>($r4);

        r19 = $r5;

     label02:
        goto label04;

     label03:
        $r17 := @caughtexception;

        $r18 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r18.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Freshest CRL extension could not be decoded from certificate.", $r17);

        throw $r18;

     label04:
        if $r5 != null goto label08;

     label05:
        $r9 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String FRESHEST_CRL>;

        $r10 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r7, $r9);

        r19 = staticinvoke <org.bouncycastle.asn1.x509.CRLDistPoint: org.bouncycastle.asn1.x509.CRLDistPoint getInstance(java.lang.Object)>($r10);

     label06:
        goto label08;

     label07:
        $r15 := @caughtexception;

        $r16 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r16.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Freshest CRL extension could not be decoded from CRL.", $r15);

        throw $r16;

     label08:
        if r19 == null goto label15;

     label09:
        staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: void addAdditionalStoresFromCRLDistributionPoint(org.bouncycastle.asn1.x509.CRLDistPoint,org.bouncycastle.x509.ExtendedPKIXParameters)>(r19, r1);

     label10:
        goto label12;

     label11:
        $r13 := @caughtexception;

        $r14 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("No new delta CRL locations could be added from Freshest CRL extension.", $r13);

        throw $r14;

     label12:
        $r8 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getDeltaCRLs(java.util.Date,org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509CRL)>(r6, r1, r7);

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

     label13:
        goto label15;

     label14:
        $r11 := @caughtexception;

        $r12 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r12.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Exception obtaining delta CRLs.", $r11);

        throw $r12;

     label15:
        return $r0;

        catch org.bouncycastle.jce.provider.AnnotatedException from label01 to label02 with label03;
        catch org.bouncycastle.jce.provider.AnnotatedException from label05 to label06 with label07;
        catch org.bouncycastle.jce.provider.AnnotatedException from label09 to label10 with label11;
        catch org.bouncycastle.jce.provider.AnnotatedException from label12 to label13 with label14;
    }

    protected static java.util.Set[] processCRLA1ii(java.util.Date, org.bouncycastle.x509.ExtendedPKIXParameters, java.security.cert.X509Certificate, java.security.cert.X509CRL) throws org.bouncycastle.jce.provider.AnnotatedException
    {
        java.security.cert.X509Certificate r3;
        byte[] $r9;
        javax.security.auth.x500.X500Principal $r8;
        java.util.Date $r5, r6, $r18;
        org.bouncycastle.x509.ExtendedPKIXParameters r4;
        java.security.cert.X509CRL r7;
        java.util.HashSet $r0, $r1;
        org.bouncycastle.jce.provider.AnnotatedException $r19, $r20, $r21, $r22, $r24;
        java.util.Set[] $r16;
        java.lang.String $r28;
        boolean $z0;
        java.util.Collection $r11, $r13, $r15;
        java.util.Set $r17;
        java.io.IOException $r23;
        java.util.List $r10, $r12, $r14;
        org.bouncycastle.x509.X509CRLStoreSelector $r2;
        java.lang.StringBuilder $r25, $r26, $r27;

        r6 := @parameter0: java.util.Date;

        r4 := @parameter1: org.bouncycastle.x509.ExtendedPKIXParameters;

        r3 := @parameter2: java.security.cert.X509Certificate;

        r7 := @parameter3: java.security.cert.X509CRL;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = new org.bouncycastle.x509.X509CRLStoreSelector;

        specialinvoke $r2.<org.bouncycastle.x509.X509CRLStoreSelector: void <init>()>();

        virtualinvoke $r2.<org.bouncycastle.x509.X509CRLStoreSelector: void setCertificateChecking(java.security.cert.X509Certificate)>(r3);

        $r5 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: java.util.Date getDate()>();

        if $r5 == null goto label01;

        $r18 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: java.util.Date getDate()>();

        virtualinvoke $r2.<org.bouncycastle.x509.X509CRLStoreSelector: void setDateAndTime(java.util.Date)>($r18);

        goto label02;

     label01:
        virtualinvoke $r2.<org.bouncycastle.x509.X509CRLStoreSelector: void setDateAndTime(java.util.Date)>(r6);

     label02:
        $r8 = virtualinvoke r7.<java.security.cert.X509CRL: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $r9 = virtualinvoke $r8.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        virtualinvoke $r2.<org.bouncycastle.x509.X509CRLStoreSelector: void addIssuerName(byte[])>($r9);

     label03:
        goto label05;

     label04:
        $r23 := @caughtexception;

        $r24 = new org.bouncycastle.jce.provider.AnnotatedException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot extract issuer from CRL.");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>($r28, $r23);

        throw $r24;

     label05:
        virtualinvoke $r2.<org.bouncycastle.x509.X509CRLStoreSelector: void setCompleteCRLEnabled(boolean)>(1);

     label06:
        $r10 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: java.util.List getAdditionalStores()>();

        $r11 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Collection findCRLs(org.bouncycastle.x509.X509CRLStoreSelector,java.util.List)>($r2, $r10);

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r11);

        $r12 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: java.util.List getStores()>();

        $r13 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Collection findCRLs(org.bouncycastle.x509.X509CRLStoreSelector,java.util.List)>($r2, $r12);

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r13);

        $r14 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: java.util.List getCertStores()>();

        $r15 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Collection findCRLs(org.bouncycastle.x509.X509CRLStoreSelector,java.util.List)>($r2, $r14);

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r15);

     label07:
        goto label09;

     label08:
        $r21 := @caughtexception;

        $r22 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r22.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Exception obtaining complete CRLs.", $r21);

        throw $r22;

     label09:
        $z0 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: boolean isUseDeltasEnabled()>();

        if $z0 == 0 goto label13;

     label10:
        $r17 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getDeltaCRLs(java.util.Date,org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509CRL)>(r6, r4, r7);

        interfaceinvoke $r1.<java.util.Set: boolean addAll(java.util.Collection)>($r17);

     label11:
        goto label13;

     label12:
        $r19 := @caughtexception;

        $r20 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r20.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Exception obtaining delta CRLs.", $r19);

        throw $r20;

     label13:
        $r16 = newarray (java.util.Set)[2];

        $r16[0] = $r0;

        $r16[1] = $r1;

        return $r16;

        catch java.io.IOException from label02 to label03 with label04;
        catch org.bouncycastle.jce.provider.AnnotatedException from label06 to label07 with label08;
        catch org.bouncycastle.jce.provider.AnnotatedException from label10 to label11 with label12;
    }

    protected static void processCRLC(java.security.cert.X509CRL, java.security.cert.X509CRL, org.bouncycastle.x509.ExtendedPKIXParameters) throws org.bouncycastle.jce.provider.AnnotatedException
    {
        java.security.cert.X509CRL r0, r1;
        org.bouncycastle.asn1.x509.IssuingDistributionPoint $r4, $r10;
        org.bouncycastle.x509.ExtendedPKIXParameters r5;
        boolean $z0, $z1, $z2, $z3, z4;
        java.lang.Exception $r24, $r26;
        javax.security.auth.x500.X500Principal $r6, $r7;
        org.bouncycastle.asn1.DERObject $r3, $r9, $r12, $r14;
        org.bouncycastle.jce.provider.AnnotatedException $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r25, $r27;
        java.lang.String $r2, $r8, $r11, $r13;

        r0 := @parameter0: java.security.cert.X509CRL;

        r1 := @parameter1: java.security.cert.X509CRL;

        r5 := @parameter2: org.bouncycastle.x509.ExtendedPKIXParameters;

        if r0 != null goto label01;

        return;

     label01:
        $r2 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String ISSUING_DISTRIBUTION_POINT>;

        $r3 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r1, $r2);

        $r4 = staticinvoke <org.bouncycastle.asn1.x509.IssuingDistributionPoint: org.bouncycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object)>($r3);

     label02:
        goto label04;

     label03:
        $r26 := @caughtexception;

        $r27 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r27.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Issuing distribution point extension could not be decoded.", $r26);

        throw $r27;

     label04:
        $z0 = virtualinvoke r5.<org.bouncycastle.x509.ExtendedPKIXParameters: boolean isUseDeltasEnabled()>();

        if $z0 == 0 goto label20;

        $r6 = virtualinvoke r0.<java.security.cert.X509CRL: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $r7 = virtualinvoke r1.<java.security.cert.X509CRL: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $z1 = virtualinvoke $r6.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label05;

        $r19 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r19.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Complete CRL issuer does not match delta CRL issuer.");

        throw $r19;

     label05:
        $r8 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String ISSUING_DISTRIBUTION_POINT>;

        $r9 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r0, $r8);

        $r10 = staticinvoke <org.bouncycastle.asn1.x509.IssuingDistributionPoint: org.bouncycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object)>($r9);

     label06:
        goto label08;

     label07:
        $r24 := @caughtexception;

        $r25 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r25.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Issuing distribution point extension from delta CRL could not be decoded.", $r24);

        throw $r25;

     label08:
        z4 = 0;

        if $r4 != null goto label09;

        if $r10 != null goto label10;

        z4 = 1;

        goto label10;

     label09:
        $z2 = virtualinvoke $r4.<org.bouncycastle.asn1.x509.IssuingDistributionPoint: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label10;

        z4 = 1;

     label10:
        if z4 != 0 goto label11;

        $r18 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r18.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Issuing distribution point extension from delta CRL and complete CRL does not match.");

        throw $r18;

     label11:
        $r11 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String AUTHORITY_KEY_IDENTIFIER>;

        $r12 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r1, $r11);

     label12:
        goto label14;

     label13:
        $r22 := @caughtexception;

        $r23 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r23.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Authority key identifier extension could not be extracted from complete CRL.", $r22);

        throw $r23;

     label14:
        $r13 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String AUTHORITY_KEY_IDENTIFIER>;

        $r14 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r0, $r13);

     label15:
        goto label17;

     label16:
        $r20 := @caughtexception;

        $r21 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r21.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Authority key identifier extension could not be extracted from delta CRL.", $r20);

        throw $r21;

     label17:
        if $r12 != null goto label18;

        $r17 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r17.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("CRL authority key identifier is null.");

        throw $r17;

     label18:
        if $r14 != null goto label19;

        $r16 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r16.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Delta CRL authority key identifier is null.");

        throw $r16;

     label19:
        $z3 = virtualinvoke $r12.<org.bouncycastle.asn1.DERObject: boolean equals(java.lang.Object)>($r14);

        if $z3 != 0 goto label20;

        $r15 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r15.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Delta CRL authority key identifier does not match complete CRL authority key identifier.");

        throw $r15;

     label20:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label07;
        catch org.bouncycastle.jce.provider.AnnotatedException from label11 to label12 with label13;
        catch org.bouncycastle.jce.provider.AnnotatedException from label14 to label15 with label16;
    }

    protected static void processCRLI(java.util.Date, java.security.cert.X509CRL, java.lang.Object, org.bouncycastle.jce.provider.CertStatus, org.bouncycastle.x509.ExtendedPKIXParameters) throws org.bouncycastle.jce.provider.AnnotatedException
    {
        org.bouncycastle.jce.provider.CertStatus r4;
        java.util.Date r2;
        org.bouncycastle.x509.ExtendedPKIXParameters r0;
        java.security.cert.X509CRL r1;
        java.lang.Object r3;
        boolean $z0;

        r2 := @parameter0: java.util.Date;

        r1 := @parameter1: java.security.cert.X509CRL;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: org.bouncycastle.jce.provider.CertStatus;

        r0 := @parameter4: org.bouncycastle.x509.ExtendedPKIXParameters;

        $z0 = virtualinvoke r0.<org.bouncycastle.x509.ExtendedPKIXParameters: boolean isUseDeltasEnabled()>();

        if $z0 == 0 goto label1;

        if r1 == null goto label1;

        staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: void getCertStatus(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.bouncycastle.jce.provider.CertStatus)>(r2, r1, r3, r4);

     label1:
        return;
    }

    protected static void processCRLJ(java.util.Date, java.security.cert.X509CRL, java.lang.Object, org.bouncycastle.jce.provider.CertStatus) throws org.bouncycastle.jce.provider.AnnotatedException
    {
        org.bouncycastle.jce.provider.CertStatus r0;
        java.util.Date r1;
        int $i0;
        java.security.cert.X509CRL r2;
        java.lang.Object r3;

        r1 := @parameter0: java.util.Date;

        r2 := @parameter1: java.security.cert.X509CRL;

        r3 := @parameter2: java.lang.Object;

        r0 := @parameter3: org.bouncycastle.jce.provider.CertStatus;

        $i0 = virtualinvoke r0.<org.bouncycastle.jce.provider.CertStatus: int getCertStatus()>();

        if $i0 != 11 goto label1;

        staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: void getCertStatus(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.bouncycastle.jce.provider.CertStatus)>(r1, r2, r3, r0);

     label1:
        return;
    }

    protected static org.bouncycastle.jce.provider.PKIXPolicyNode prepareCertB(java.security.cert.CertPath, int, java.util.List[], org.bouncycastle.jce.provider.PKIXPolicyNode, int) throws java.security.cert.CertPathValidatorException
    {
        org.bouncycastle.asn1.ASN1Sequence $r6, $r47, r70, r76;
        java.util.Enumeration $r29;
        org.bouncycastle.asn1.x509.PolicyInformation $r43;
        java.util.Set $r30, $r37, $r39, $r51, r71, r75;
        java.lang.Exception $r63;
        java.security.cert.PolicyNode $r17, $r31;
        org.bouncycastle.asn1.DERObject $r5, $r28;
        java.util.ArrayList $r88;
        java.lang.String $r4, $r16, $r25, $r26, $r27, $r32, $r33, $r40, $r44, $r46, $r49, $r55, $r58, r72;
        java.security.cert.X509Certificate r3;
        java.util.List[] r12;
        java.security.cert.CertPathValidatorException $r61, $r86;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, z13;
        org.bouncycastle.asn1.DERObjectIdentifier $r45, $r54, $r57;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r81, $r85, $r87;
        java.util.List $r1, $r13, $r20, $r22, $r38, r79;
        org.bouncycastle.jce.provider.PKIXPolicyNode r7, $r19, $r41, r69, r73, r74, r77, r78, r80, $r89;
        org.bouncycastle.asn1.DEREncodable $r52, $r53, $r56;
        java.util.HashMap $r82;
        java.util.HashSet $r83, $r84;
        int i0, $i1, i2, $i3, i4, $i5, i6, i7, i8, $i10;
        org.bouncycastle.jce.provider.AnnotatedException $r65, $r67;
        java.util.Iterator $r10, $r14, $r21, $r23;
        java.security.cert.CertPath r0;
        java.lang.Object $r2, $r11, $r15, $r18, $r24, $r36, $r42, $r48, $r50, $r59;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        r12 := @parameter2: java.util.List[];

        r7 := @parameter3: org.bouncycastle.jce.provider.PKIXPolicyNode;

        i4 := @parameter4: int;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        i2 = $i1 - i0;

     label01:
        $r4 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String POLICY_MAPPINGS>;

        $r5 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r4);

        $r6 = staticinvoke <org.bouncycastle.asn1.DERSequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r5);

     label02:
        goto label04;

     label03:
        $r67 := @caughtexception;

        $r81 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r81.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy mappings extension could not be decoded.", $r67, r0, i0);

        throw $r81;

     label04:
        r69 = r7;

        if $r6 == null goto label39;

        $r82 = new java.util.HashMap;

        specialinvoke $r82.<java.util.HashMap: void <init>()>();

        $r83 = new java.util.HashSet;

        specialinvoke $r83.<java.util.HashSet: void <init>()>();

        i6 = 0;

     label05:
        $i3 = virtualinvoke $r6.<org.bouncycastle.asn1.ASN1Sequence: int size()>();

        if i6 >= $i3 goto label08;

        $r52 = virtualinvoke $r6.<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.DEREncodable getObjectAt(int)>(i6);

        r70 = (org.bouncycastle.asn1.ASN1Sequence) $r52;

        $r53 = virtualinvoke r70.<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.DEREncodable getObjectAt(int)>(0);

        $r54 = (org.bouncycastle.asn1.DERObjectIdentifier) $r53;

        $r55 = virtualinvoke $r54.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        $r56 = virtualinvoke r70.<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.DEREncodable getObjectAt(int)>(1);

        $r57 = (org.bouncycastle.asn1.DERObjectIdentifier) $r56;

        $r58 = virtualinvoke $r57.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        $z11 = interfaceinvoke $r82.<java.util.Map: boolean containsKey(java.lang.Object)>($r55);

        if $z11 != 0 goto label06;

        $r84 = new java.util.HashSet;

        specialinvoke $r84.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r84.<java.util.Set: boolean add(java.lang.Object)>($r58);

        interfaceinvoke $r82.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r55, $r84);

        interfaceinvoke $r83.<java.util.Set: boolean add(java.lang.Object)>($r55);

        goto label07;

     label06:
        $r59 = interfaceinvoke $r82.<java.util.Map: java.lang.Object get(java.lang.Object)>($r55);

        r71 = (java.util.Set) $r59;

        interfaceinvoke r71.<java.util.Set: boolean add(java.lang.Object)>($r58);

     label07:
        i6 = i6 + 1;

        goto label05;

     label08:
        $r10 = interfaceinvoke $r83.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label39;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r72 = (java.lang.String) $r11;

        if i4 <= 0 goto label31;

        z12 = 0;

        $r20 = r12[i2];

        $r21 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z4 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label12;

        $r48 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r73 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r48;

        $r49 = virtualinvoke r73.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z10 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z10 == 0 goto label11;

        z12 = 1;

        $r50 = interfaceinvoke $r82.<java.util.Map: java.lang.Object get(java.lang.Object)>(r72);

        $r51 = (java.util.Set) $r50;

        r73.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.util.Set expectedPolicies> = $r51;

        goto label12;

     label11:
        goto label10;

     label12:
        if z12 != 0 goto label30;

        $r22 = r12[i2];

        $r23 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z5 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label30;

        $r24 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r74 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r24;

        $r25 = "2.5.29.32.0";

        $r26 = virtualinvoke r74.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z6 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        if $z6 == 0 goto label29;

        r75 = null;

     label14:
        $r27 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CERTIFICATE_POLICIES>;

        $r28 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r27);

        r76 = (org.bouncycastle.asn1.ASN1Sequence) $r28;

     label15:
        goto label17;

     label16:
        $r65 := @caughtexception;

        $r85 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r85.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Certificate policies extension could not be decoded.", $r65, r0, i0);

        throw $r85;

     label17:
        $r29 = virtualinvoke r76.<org.bouncycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label18:
        $z7 = interfaceinvoke $r29.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z7 == 0 goto label27;

     label19:
        $r42 = interfaceinvoke $r29.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r43 = staticinvoke <org.bouncycastle.asn1.x509.PolicyInformation: org.bouncycastle.asn1.x509.PolicyInformation getInstance(java.lang.Object)>($r42);

     label20:
        goto label22;

     label21:
        $r63 := @caughtexception;

        $r86 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r86.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy information could not be decoded.", $r63, r0, i0);

        throw $r86;

     label22:
        $r44 = "2.5.29.32.0";

        $r45 = virtualinvoke $r43.<org.bouncycastle.asn1.x509.PolicyInformation: org.bouncycastle.asn1.DERObjectIdentifier getPolicyIdentifier()>();

        $r46 = virtualinvoke $r45.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        $z9 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>($r46);

        if $z9 == 0 goto label26;

     label23:
        $r47 = virtualinvoke $r43.<org.bouncycastle.asn1.x509.PolicyInformation: org.bouncycastle.asn1.ASN1Sequence getPolicyQualifiers()>();

        r75 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getQualifierSet(org.bouncycastle.asn1.ASN1Sequence)>($r47);

     label24:
        goto label27;

     label25:
        $r61 := @caughtexception;

        $r87 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r87.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy qualifier info set could not be decoded.", $r61, r0, i0);

        throw $r87;

     label26:
        goto label18;

     label27:
        z13 = 0;

        $r30 = virtualinvoke r3.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();

        if $r30 == null goto label28;

        $r39 = virtualinvoke r3.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();

        $r40 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CERTIFICATE_POLICIES>;

        z13 = interfaceinvoke $r39.<java.util.Set: boolean contains(java.lang.Object)>($r40);

     label28:
        $r31 = virtualinvoke r74.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.security.cert.PolicyNode getParent()>();

        $r41 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r31;

        $r32 = "2.5.29.32.0";

        $r33 = virtualinvoke $r41.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z8 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>($r33);

        if $z8 == 0 goto label30;

        $r89 = new org.bouncycastle.jce.provider.PKIXPolicyNode;

        $r88 = new java.util.ArrayList;

        specialinvoke $r88.<java.util.ArrayList: void <init>()>();

        $r36 = interfaceinvoke $r82.<java.util.Map: java.lang.Object get(java.lang.Object)>(r72);

        $r37 = (java.util.Set) $r36;

        specialinvoke $r89.<org.bouncycastle.jce.provider.PKIXPolicyNode: void <init>(java.util.List,int,java.util.Set,java.security.cert.PolicyNode,java.util.Set,java.lang.String,boolean)>($r88, i2, $r37, $r41, r75, r72, z13);

        virtualinvoke $r41.<org.bouncycastle.jce.provider.PKIXPolicyNode: void addChild(org.bouncycastle.jce.provider.PKIXPolicyNode)>($r89);

        $r38 = r12[i2];

        interfaceinvoke $r38.<java.util.List: boolean add(java.lang.Object)>($r89);

        goto label30;

     label29:
        goto label13;

     label30:
        goto label38;

     label31:
        if i4 > 0 goto label38;

        $r13 = r12[i2];

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label32:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label38;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r77 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r15;

        $r16 = virtualinvoke r77.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z2 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z2 == 0 goto label37;

        $r17 = virtualinvoke r77.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.security.cert.PolicyNode getParent()>();

        r78 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r17;

        virtualinvoke r78.<org.bouncycastle.jce.provider.PKIXPolicyNode: void removeChild(org.bouncycastle.jce.provider.PKIXPolicyNode)>(r77);

        interfaceinvoke $r14.<java.util.Iterator: void remove()>();

        i7 = i2 - 1;

     label33:
        if i7 < 0 goto label37;

        r79 = r12[i7];

        i8 = 0;

     label34:
        $i5 = interfaceinvoke r79.<java.util.List: int size()>();

        if i8 >= $i5 goto label36;

        $r18 = interfaceinvoke r79.<java.util.List: java.lang.Object get(int)>(i8);

        r80 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r18;

        $z3 = virtualinvoke r80.<org.bouncycastle.jce.provider.PKIXPolicyNode: boolean hasChildren()>();

        if $z3 != 0 goto label35;

        $r19 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.bouncycastle.jce.provider.PKIXPolicyNode,java.util.List[],org.bouncycastle.jce.provider.PKIXPolicyNode)>(r69, r12, r80);

        r69 = $r19;

        if $r19 != null goto label35;

        goto label36;

     label35:
        i8 = i8 + 1;

        goto label34;

     label36:
        $i10 = (int) -1;

        i7 = i7 + $i10;

        goto label33;

     label37:
        goto label32;

     label38:
        goto label09;

     label39:
        return r69;

        catch org.bouncycastle.jce.provider.AnnotatedException from label01 to label02 with label03;
        catch org.bouncycastle.jce.provider.AnnotatedException from label14 to label15 with label16;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.security.cert.CertPathValidatorException from label23 to label24 with label25;
    }

    protected static void prepareNextCertA(java.security.cert.CertPath, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.X509Certificate r3;
        org.bouncycastle.asn1.ASN1Sequence $r6, $r8;
        org.bouncycastle.asn1.DERObject $r5;
        org.bouncycastle.asn1.DEREncodable $r7, $r9, $r11;
        int i0, $i1, i2;
        org.bouncycastle.jce.provider.AnnotatedException $r21;
        java.lang.String $r4, $r13, $r14, $r15, $r16;
        java.security.cert.CertPathValidatorException $r17, $r18;
        org.bouncycastle.asn1.DERObjectIdentifier $r10, $r12;
        boolean $z0, $z1;
        java.security.cert.CertPath r0;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r20, $r22;
        java.lang.Exception $r19;
        java.util.List $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

     label01:
        $r4 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String POLICY_MAPPINGS>;

        $r5 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r4);

        $r6 = staticinvoke <org.bouncycastle.asn1.DERSequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r5);

     label02:
        goto label04;

     label03:
        $r21 := @caughtexception;

        $r22 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r22.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy mappings extension could not be decoded.", $r21, r0, i0);

        throw $r22;

     label04:
        if $r6 == null goto label12;

        i2 = 0;

     label05:
        $i1 = virtualinvoke $r6.<org.bouncycastle.asn1.ASN1Sequence: int size()>();

        if i2 >= $i1 goto label12;

     label06:
        $r7 = virtualinvoke $r6.<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.DEREncodable getObjectAt(int)>(i2);

        $r8 = staticinvoke <org.bouncycastle.asn1.DERSequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.DEREncodable getObjectAt(int)>(0);

        $r10 = staticinvoke <org.bouncycastle.asn1.DERObjectIdentifier: org.bouncycastle.asn1.DERObjectIdentifier getInstance(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r8.<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.DEREncodable getObjectAt(int)>(1);

        $r12 = staticinvoke <org.bouncycastle.asn1.DERObjectIdentifier: org.bouncycastle.asn1.DERObjectIdentifier getInstance(java.lang.Object)>($r11);

     label07:
        goto label09;

     label08:
        $r19 := @caughtexception;

        $r20 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r20.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy mappings extension contents could not be decoded.", $r19, r0, i0);

        throw $r20;

     label09:
        $r13 = "2.5.29.32.0";

        $r14 = virtualinvoke $r10.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z0 == 0 goto label10;

        $r18 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r18.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("IssuerDomainPolicy is anyPolicy", null, r0, i0);

        throw $r18;

     label10:
        $r15 = "2.5.29.32.0";

        $r16 = virtualinvoke $r12.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z1 == 0 goto label11;

        $r17 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r17.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("SubjectDomainPolicy is anyPolicy,", null, r0, i0);

        throw $r17;

     label11:
        i2 = i2 + 1;

        goto label05;

     label12:
        return;

        catch org.bouncycastle.jce.provider.AnnotatedException from label01 to label02 with label03;
        catch java.lang.Exception from label06 to label07 with label08;
    }

    protected static void processCertF(java.security.cert.CertPath, int, org.bouncycastle.jce.provider.PKIXPolicyNode, int) throws java.security.cert.CertPathValidatorException
    {
        org.bouncycastle.jce.provider.PKIXPolicyNode r0;
        int i0, i1;
        java.security.cert.CertPath r2;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r1;

        r2 := @parameter0: java.security.cert.CertPath;

        i1 := @parameter1: int;

        r0 := @parameter2: org.bouncycastle.jce.provider.PKIXPolicyNode;

        i0 := @parameter3: int;

        if i0 > 0 goto label1;

        if r0 != null goto label1;

        $r1 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r1.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("No valid policy tree found when one expected.", null, r2, i1);

        throw $r1;

     label1:
        return;
    }

    protected static org.bouncycastle.jce.provider.PKIXPolicyNode processCertE(java.security.cert.CertPath, int, org.bouncycastle.jce.provider.PKIXPolicyNode) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.X509Certificate r3;
        org.bouncycastle.asn1.ASN1Sequence $r6;
        org.bouncycastle.jce.provider.PKIXPolicyNode r9;
        org.bouncycastle.asn1.DERObject $r5;
        java.security.cert.CertPath r0;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r8;
        java.util.List $r1;
        int i0;
        org.bouncycastle.jce.provider.AnnotatedException $r7;
        java.lang.Object $r2;
        java.lang.String $r4;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        r9 := @parameter2: org.bouncycastle.jce.provider.PKIXPolicyNode;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

     label1:
        $r4 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CERTIFICATE_POLICIES>;

        $r5 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r4);

        $r6 = staticinvoke <org.bouncycastle.asn1.DERSequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r5);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r8.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Could not read certificate policies extension from certificate.", $r7, r0, i0);

        throw $r8;

     label4:
        if $r6 != null goto label5;

        r9 = null;

     label5:
        return r9;

        catch org.bouncycastle.jce.provider.AnnotatedException from label1 to label2 with label3;
    }

    protected static void processCertBC(java.security.cert.CertPath, int, org.bouncycastle.jce.provider.PKIXNameConstraintValidator) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.X509Certificate r3;
        byte[] $r6;
        org.bouncycastle.asn1.x509.GeneralName[] $r17;
        org.bouncycastle.asn1.ASN1Sequence $r8;
        org.bouncycastle.jce.provider.PKIXNameConstraintValidatorException $r22, $r26, $r30;
        java.util.Enumeration $r16;
        java.util.Vector $r15;
        java.security.cert.CertPathValidatorException $r23, $r25, $r27, $r29, $r31, $r33;
        boolean $z0, $z1;
        org.bouncycastle.asn1.DERObjectIdentifier $r14;
        java.lang.Exception $r24, $r28, $r32;
        java.util.List $r1;
        org.bouncycastle.asn1.x509.GeneralName $r18, $r19, $r21;
        org.bouncycastle.jce.provider.PKIXNameConstraintValidator r9;
        javax.security.auth.x500.X500Principal $r4;
        org.bouncycastle.asn1.DERObject $r7, $r11;
        org.bouncycastle.asn1.ASN1InputStream $r5;
        int i0, $i1, i2, $i3, i4;
        java.lang.String $r10, r34;
        org.bouncycastle.asn1.x509.X509Name $r13;
        java.security.cert.CertPath r0;
        org.bouncycastle.asn1.x509.GeneralNames $r12;
        java.lang.Object $r2, $r20;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        r9 := @parameter2: org.bouncycastle.jce.provider.PKIXNameConstraintValidator;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        i2 = $i1 - i0;

        $z0 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: boolean isSelfIssued(java.security.cert.X509Certificate)>(r3);

        if $z0 == 0 goto label01;

        if i2 < $i1 goto label27;

     label01:
        $r4 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: javax.security.auth.x500.X500Principal getSubjectPrincipal(java.security.cert.X509Certificate)>(r3);

        $r5 = new org.bouncycastle.asn1.ASN1InputStream;

        $r6 = virtualinvoke $r4.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        specialinvoke $r5.<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>($r6);

     label02:
        $r7 = virtualinvoke $r5.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.DERObject readObject()>();

        $r8 = staticinvoke <org.bouncycastle.asn1.DERSequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r7);

     label03:
        goto label05;

     label04:
        $r32 := @caughtexception;

        $r33 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r33.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Exception extracting subject name when checking subtrees.", $r32, r0, i0);

        throw $r33;

     label05:
        virtualinvoke r9.<org.bouncycastle.jce.provider.PKIXNameConstraintValidator: void checkPermittedDN(org.bouncycastle.asn1.ASN1Sequence)>($r8);

        virtualinvoke r9.<org.bouncycastle.jce.provider.PKIXNameConstraintValidator: void checkExcludedDN(org.bouncycastle.asn1.ASN1Sequence)>($r8);

     label06:
        goto label08;

     label07:
        $r30 := @caughtexception;

        $r31 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r31.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Subtree check for certificate subject failed.", $r30, r0, i0);

        throw $r31;

     label08:
        $r10 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String SUBJECT_ALTERNATIVE_NAME>;

        $r11 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r10);

        $r12 = staticinvoke <org.bouncycastle.asn1.x509.GeneralNames: org.bouncycastle.asn1.x509.GeneralNames getInstance(java.lang.Object)>($r11);

     label09:
        goto label11;

     label10:
        $r28 := @caughtexception;

        $r29 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r29.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Subject alternative name extension could not be decoded.", $r28, r0, i0);

        throw $r29;

     label11:
        $r13 = new org.bouncycastle.asn1.x509.X509Name;

        specialinvoke $r13.<org.bouncycastle.asn1.x509.X509Name: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r8);

        $r14 = <org.bouncycastle.asn1.x509.X509Name: org.bouncycastle.asn1.DERObjectIdentifier EmailAddress>;

        $r15 = virtualinvoke $r13.<org.bouncycastle.asn1.x509.X509Name: java.util.Vector getValues(org.bouncycastle.asn1.DERObjectIdentifier)>($r14);

        $r16 = virtualinvoke $r15.<java.util.Vector: java.util.Enumeration elements()>();

     label12:
        $z1 = interfaceinvoke $r16.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label17;

        $r20 = interfaceinvoke $r16.<java.util.Enumeration: java.lang.Object nextElement()>();

        r34 = (java.lang.String) $r20;

        $r21 = new org.bouncycastle.asn1.x509.GeneralName;

        specialinvoke $r21.<org.bouncycastle.asn1.x509.GeneralName: void <init>(int,java.lang.String)>(1, r34);

     label13:
        virtualinvoke r9.<org.bouncycastle.jce.provider.PKIXNameConstraintValidator: void checkPermitted(org.bouncycastle.asn1.x509.GeneralName)>($r21);

        virtualinvoke r9.<org.bouncycastle.jce.provider.PKIXNameConstraintValidator: void checkExcluded(org.bouncycastle.asn1.x509.GeneralName)>($r21);

     label14:
        goto label16;

     label15:
        $r26 := @caughtexception;

        $r27 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r27.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Subtree check for certificate subject alternative email failed.", $r26, r0, i0);

        throw $r27;

     label16:
        goto label12;

     label17:
        if $r12 == null goto label27;

     label18:
        $r17 = virtualinvoke $r12.<org.bouncycastle.asn1.x509.GeneralNames: org.bouncycastle.asn1.x509.GeneralName[] getNames()>();

     label19:
        goto label21;

     label20:
        $r24 := @caughtexception;

        $r25 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r25.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Subject alternative name contents could not be decoded.", $r24, r0, i0);

        throw $r25;

     label21:
        i4 = 0;

     label22:
        $i3 = lengthof $r17;

        if i4 >= $i3 goto label27;

     label23:
        $r18 = $r17[i4];

        virtualinvoke r9.<org.bouncycastle.jce.provider.PKIXNameConstraintValidator: void checkPermitted(org.bouncycastle.asn1.x509.GeneralName)>($r18);

        $r19 = $r17[i4];

        virtualinvoke r9.<org.bouncycastle.jce.provider.PKIXNameConstraintValidator: void checkExcluded(org.bouncycastle.asn1.x509.GeneralName)>($r19);

     label24:
        goto label26;

     label25:
        $r22 := @caughtexception;

        $r23 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r23.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Subtree check for certificate subject alternative name failed.", $r22, r0, i0);

        throw $r23;

     label26:
        i4 = i4 + 1;

        goto label22;

     label27:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
        catch org.bouncycastle.jce.provider.PKIXNameConstraintValidatorException from label05 to label06 with label07;
        catch java.lang.Exception from label08 to label09 with label10;
        catch org.bouncycastle.jce.provider.PKIXNameConstraintValidatorException from label13 to label14 with label15;
        catch java.lang.Exception from label18 to label19 with label20;
        catch org.bouncycastle.jce.provider.PKIXNameConstraintValidatorException from label23 to label24 with label25;
    }

    protected static org.bouncycastle.jce.provider.PKIXPolicyNode processCertD(java.security.cert.CertPath, int, java.util.Set, org.bouncycastle.jce.provider.PKIXPolicyNode, java.util.List[], int) throws java.security.cert.CertPathValidatorException
    {
        org.bouncycastle.asn1.ASN1Sequence $r6, $r23, $r46;
        java.util.Enumeration $r8, $r11;
        org.bouncycastle.asn1.x509.PolicyInformation $r19, $r41;
        java.util.Set r10, $r12, $r24, $r26, $r47;
        org.bouncycastle.asn1.DERObject $r5;
        java.util.ArrayList $r66;
        java.lang.String $r4, $r13, $r20, $r22, $r36, $r43, $r44, $r45, r54;
        java.security.cert.X509Certificate r3;
        java.util.List[] r14;
        java.security.cert.CertPathValidatorException $r48;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, $z17;
        org.bouncycastle.asn1.DERObjectIdentifier $r21, $r29, $r42;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r61, $r63;
        java.util.List $r1, $r34, r52, r57, r59;
        org.bouncycastle.jce.provider.PKIXPolicyNode r7, $r17, r53, r55, r56, r58, r60, $r67;
        java.util.HashSet $r62, $r64, $r65;
        int i0, $i1, i2, i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, $i13;
        org.bouncycastle.jce.provider.AnnotatedException $r50;
        java.util.Iterator $r27, $r30, $r37;
        java.security.cert.CertPath r0;
        java.lang.Object $r2, $r15, $r16, $r18, $r25, $r28, $r35, $r39, $r40;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        r10 := @parameter2: java.util.Set;

        r7 := @parameter3: org.bouncycastle.jce.provider.PKIXPolicyNode;

        r14 := @parameter4: java.util.List[];

        i3 := @parameter5: int;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        i2 = $i1 - i0;

     label01:
        $r4 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CERTIFICATE_POLICIES>;

        $r5 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r4);

        $r6 = staticinvoke <org.bouncycastle.asn1.DERSequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r5);

     label02:
        goto label04;

     label03:
        $r50 := @caughtexception;

        $r61 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r61.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Could not read certificate policies extension from certificate.", $r50, r0, i0);

        throw $r61;

     label04:
        if $r6 == null goto label39;

        if r7 == null goto label39;

        $r8 = virtualinvoke $r6.<org.bouncycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

        $r62 = new java.util.HashSet;

        specialinvoke $r62.<java.util.HashSet: void <init>()>();

     label05:
        $z0 = interfaceinvoke $r8.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label11;

        $r40 = interfaceinvoke $r8.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r41 = staticinvoke <org.bouncycastle.asn1.x509.PolicyInformation: org.bouncycastle.asn1.x509.PolicyInformation getInstance(java.lang.Object)>($r40);

        $r42 = virtualinvoke $r41.<org.bouncycastle.asn1.x509.PolicyInformation: org.bouncycastle.asn1.DERObjectIdentifier getPolicyIdentifier()>();

        $r43 = virtualinvoke $r42.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        interfaceinvoke $r62.<java.util.Set: boolean add(java.lang.Object)>($r43);

        $r44 = "2.5.29.32.0";

        $r45 = virtualinvoke $r42.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        $z12 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>($r45);

        if $z12 != 0 goto label10;

     label06:
        $r46 = virtualinvoke $r41.<org.bouncycastle.asn1.x509.PolicyInformation: org.bouncycastle.asn1.ASN1Sequence getPolicyQualifiers()>();

        $r47 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getQualifierSet(org.bouncycastle.asn1.ASN1Sequence)>($r46);

     label07:
        goto label09;

     label08:
        $r48 := @caughtexception;

        $r63 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r63.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy qualifier info set could not be build.", $r48, r0, i0);

        throw $r63;

     label09:
        $z13 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: boolean processCertD1i(int,java.util.List[],org.bouncycastle.asn1.DERObjectIdentifier,java.util.Set)>(i2, r14, $r42, $r47);

        if $z13 != 0 goto label10;

        staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: void processCertD1ii(int,java.util.List[],org.bouncycastle.asn1.DERObjectIdentifier,java.util.Set)>(i2, r14, $r42, $r47);

     label10:
        goto label05;

     label11:
        $z1 = interfaceinvoke r10.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label12;

        $z9 = interfaceinvoke r10.<java.util.Set: boolean contains(java.lang.Object)>("2.5.29.32.0");

        if $z9 == 0 goto label13;

     label12:
        interfaceinvoke r10.<java.util.Set: void clear()>();

        interfaceinvoke r10.<java.util.Set: boolean addAll(java.util.Collection)>($r62);

        goto label17;

     label13:
        $r37 = interfaceinvoke r10.<java.util.Set: java.util.Iterator iterator()>();

        $r64 = new java.util.HashSet;

        specialinvoke $r64.<java.util.HashSet: void <init>()>();

     label14:
        $z10 = interfaceinvoke $r37.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label16;

        $r39 = interfaceinvoke $r37.<java.util.Iterator: java.lang.Object next()>();

        $z11 = interfaceinvoke $r62.<java.util.Set: boolean contains(java.lang.Object)>($r39);

        if $z11 == 0 goto label15;

        interfaceinvoke $r64.<java.util.Set: boolean add(java.lang.Object)>($r39);

     label15:
        goto label14;

     label16:
        interfaceinvoke r10.<java.util.Set: void clear()>();

        interfaceinvoke r10.<java.util.Set: boolean addAll(java.util.Collection)>($r64);

     label17:
        if i3 > 0 goto label18;

        if i2 >= $i1 goto label31;

        $z8 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: boolean isSelfIssued(java.security.cert.X509Certificate)>(r3);

        if $z8 == 0 goto label31;

     label18:
        $r11 = virtualinvoke $r6.<org.bouncycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label19:
        $z14 = interfaceinvoke $r11.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z14 == 0 goto label31;

        $r18 = interfaceinvoke $r11.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r19 = staticinvoke <org.bouncycastle.asn1.x509.PolicyInformation: org.bouncycastle.asn1.x509.PolicyInformation getInstance(java.lang.Object)>($r18);

        $r20 = "2.5.29.32.0";

        $r21 = virtualinvoke $r19.<org.bouncycastle.asn1.x509.PolicyInformation: org.bouncycastle.asn1.DERObjectIdentifier getPolicyIdentifier()>();

        $r22 = virtualinvoke $r21.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        $z4 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z4 == 0 goto label30;

        $r23 = virtualinvoke $r19.<org.bouncycastle.asn1.x509.PolicyInformation: org.bouncycastle.asn1.ASN1Sequence getPolicyQualifiers()>();

        $r24 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getQualifierSet(org.bouncycastle.asn1.ASN1Sequence)>($r23);

        $i6 = i2 - 1;

        r52 = r14[$i6];

        i8 = 0;

     label20:
        $i7 = interfaceinvoke r52.<java.util.List: int size()>();

        if i8 >= $i7 goto label29;

        $r25 = interfaceinvoke r52.<java.util.List: java.lang.Object get(int)>(i8);

        r53 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r25;

        $r26 = virtualinvoke r53.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.util.Set getExpectedPolicies()>();

        $r27 = interfaceinvoke $r26.<java.util.Set: java.util.Iterator iterator()>();

     label21:
        $z15 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label28;

        $r28 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        $z5 = $r28 instanceof java.lang.String;

        if $z5 == 0 goto label22;

        r54 = (java.lang.String) $r28;

        goto label23;

     label22:
        $z6 = $r28 instanceof org.bouncycastle.asn1.DERObjectIdentifier;

        if $z6 == 0 goto label21;

        $r29 = (org.bouncycastle.asn1.DERObjectIdentifier) $r28;

        r54 = virtualinvoke $r29.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

     label23:
        z16 = 0;

        $r30 = virtualinvoke r53.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.util.Iterator getChildren()>();

     label24:
        $z17 = interfaceinvoke $r30.<java.util.Iterator: boolean hasNext()>();

        if $z17 == 0 goto label26;

        $r35 = interfaceinvoke $r30.<java.util.Iterator: java.lang.Object next()>();

        r55 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r35;

        $r36 = virtualinvoke r55.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z7 = virtualinvoke r54.<java.lang.String: boolean equals(java.lang.Object)>($r36);

        if $z7 == 0 goto label25;

        z16 = 1;

     label25:
        goto label24;

     label26:
        if z16 != 0 goto label27;

        $r65 = new java.util.HashSet;

        specialinvoke $r65.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r65.<java.util.Set: boolean add(java.lang.Object)>(r54);

        $r67 = new org.bouncycastle.jce.provider.PKIXPolicyNode;

        $r66 = new java.util.ArrayList;

        specialinvoke $r66.<java.util.ArrayList: void <init>()>();

        specialinvoke $r67.<org.bouncycastle.jce.provider.PKIXPolicyNode: void <init>(java.util.List,int,java.util.Set,java.security.cert.PolicyNode,java.util.Set,java.lang.String,boolean)>($r66, i2, $r65, r53, $r24, r54, 0);

        virtualinvoke r53.<org.bouncycastle.jce.provider.PKIXPolicyNode: void addChild(org.bouncycastle.jce.provider.PKIXPolicyNode)>($r67);

        $r34 = r14[i2];

        interfaceinvoke $r34.<java.util.List: boolean add(java.lang.Object)>($r67);

     label27:
        goto label21;

     label28:
        i8 = i8 + 1;

        goto label20;

     label29:
        goto label31;

     label30:
        goto label19;

     label31:
        r56 = r7;

        i9 = i2 - 1;

     label32:
        if i9 < 0 goto label36;

        r57 = r14[i9];

        i10 = 0;

     label33:
        $i5 = interfaceinvoke r57.<java.util.List: int size()>();

        if i10 >= $i5 goto label35;

        $r16 = interfaceinvoke r57.<java.util.List: java.lang.Object get(int)>(i10);

        r58 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r16;

        $z3 = virtualinvoke r58.<org.bouncycastle.jce.provider.PKIXPolicyNode: boolean hasChildren()>();

        if $z3 != 0 goto label34;

        $r17 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.bouncycastle.jce.provider.PKIXPolicyNode,java.util.List[],org.bouncycastle.jce.provider.PKIXPolicyNode)>(r56, r14, r58);

        r56 = $r17;

        if $r17 != null goto label34;

        goto label35;

     label34:
        i10 = i10 + 1;

        goto label33;

     label35:
        $i13 = (int) -1;

        i9 = i9 + $i13;

        goto label32;

     label36:
        $r12 = virtualinvoke r3.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();

        if $r12 == null goto label38;

        $r13 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CERTIFICATE_POLICIES>;

        $z2 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>($r13);

        r59 = r14[i2];

        i11 = 0;

     label37:
        $i4 = interfaceinvoke r59.<java.util.List: int size()>();

        if i11 >= $i4 goto label38;

        $r15 = interfaceinvoke r59.<java.util.List: java.lang.Object get(int)>(i11);

        r60 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r15;

        virtualinvoke r60.<org.bouncycastle.jce.provider.PKIXPolicyNode: void setCritical(boolean)>($z2);

        i11 = i11 + 1;

        goto label37;

     label38:
        return r56;

     label39:
        return null;

        catch org.bouncycastle.jce.provider.AnnotatedException from label01 to label02 with label03;
        catch java.security.cert.CertPathValidatorException from label06 to label07 with label08;
    }

    protected static void processCertA(java.security.cert.CertPath, org.bouncycastle.x509.ExtendedPKIXParameters, int, java.security.PublicKey, boolean, javax.security.auth.x500.X500Principal, java.security.cert.X509Certificate) throws org.bouncycastle.jce.exception.ExtCertPathValidatorException
    {
        java.security.cert.X509Certificate r3, r18;
        java.util.Date $r5, $r17;
        org.bouncycastle.x509.ExtendedPKIXParameters r4;
        java.security.cert.CertificateExpiredException $r34;
        java.security.GeneralSecurityException $r41;
        boolean z0, $z1, $z2;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r8, $r23, $r26, $r28, $r35, $r42;
        java.util.List $r1;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r14, $r15, $r29, $r30, $r32, $r36, $r37, $r39;
        java.lang.Throwable $r22, r43;
        javax.security.auth.x500.X500Principal $r6, r7, $r11;
        java.security.cert.CertificateNotYetValidException $r27;
        int i0;
        org.bouncycastle.jce.provider.AnnotatedException $r21, $r25;
        java.lang.String $r16, $r20, $r24, $r31, $r33, $r38, $r40;
        java.security.PublicKey r19;
        java.security.cert.CertPath r0;
        java.lang.Object $r2;

        r0 := @parameter0: java.security.cert.CertPath;

        r4 := @parameter1: org.bouncycastle.x509.ExtendedPKIXParameters;

        i0 := @parameter2: int;

        r19 := @parameter3: java.security.PublicKey;

        z0 := @parameter4: boolean;

        r7 := @parameter5: javax.security.auth.x500.X500Principal;

        r18 := @parameter6: java.security.cert.X509Certificate;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        if z0 != 0 goto label04;

     label01:
        $r20 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: java.lang.String getSigProvider()>();

        staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: void verifyX509Certificate(java.security.cert.X509Certificate,java.security.PublicKey,java.lang.String)>(r3, r19, $r20);

     label02:
        goto label04;

     label03:
        $r41 := @caughtexception;

        $r42 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r42.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Could not validate certificate signature.", $r41, r0, i0);

        throw $r42;

     label04:
        $r5 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Date getValidCertDateFromValidityModel(org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.CertPath,int)>(r4, r0, i0);

        virtualinvoke r3.<java.security.cert.X509Certificate: void checkValidity(java.util.Date)>($r5);

     label05:
        goto label09;

     label06:
        $r34 := @caughtexception;

        $r35 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not validate certificate: ");

        $r38 = virtualinvoke $r34.<java.security.cert.CertificateExpiredException: java.lang.String getMessage()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>($r40, $r34, r0, i0);

        throw $r35;

     label07:
        $r27 := @caughtexception;

        $r28 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not validate certificate: ");

        $r31 = virtualinvoke $r27.<java.security.cert.CertificateNotYetValidException: java.lang.String getMessage()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>($r33, $r27, r0, i0);

        throw $r28;

     label08:
        $r25 := @caughtexception;

        $r26 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r26.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Could not validate time of certificate.", $r25, r0, i0);

        throw $r26;

     label09:
        $z1 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: boolean isRevocationEnabled()>();

        if $z1 == 0 goto label14;

     label10:
        $r17 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Date getValidCertDateFromValidityModel(org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.CertPath,int)>(r4, r0, i0);

        staticinvoke <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: void checkCRLs(org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,java.util.List)>(r4, r3, $r17, r18, r19, $r1);

     label11:
        goto label14;

     label12:
        $r21 := @caughtexception;

        r43 = $r21;

        $r22 = virtualinvoke $r21.<org.bouncycastle.jce.provider.AnnotatedException: java.lang.Throwable getCause()>();

        if null == $r22 goto label13;

        r43 = virtualinvoke $r21.<org.bouncycastle.jce.provider.AnnotatedException: java.lang.Throwable getCause()>();

     label13:
        $r23 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        $r24 = virtualinvoke $r21.<org.bouncycastle.jce.provider.AnnotatedException: java.lang.String getMessage()>();

        specialinvoke $r23.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>($r24, r43, r0, i0);

        throw $r23;

     label14:
        $r6 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: javax.security.auth.x500.X500Principal getEncodedIssuerPrincipal(java.lang.Object)>(r3);

        $z2 = virtualinvoke $r6.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>(r7);

        if $z2 != 0 goto label15;

        $r8 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IssuerName(");

        $r11 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: javax.security.auth.x500.X500Principal getEncodedIssuerPrincipal(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") does not match SubjectName(");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") of signing certificate.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>($r16, null, r0, i0);

        throw $r8;

     label15:
        return;

        catch java.security.GeneralSecurityException from label01 to label02 with label03;
        catch java.security.cert.CertificateExpiredException from label04 to label05 with label06;
        catch java.security.cert.CertificateNotYetValidException from label04 to label05 with label07;
        catch org.bouncycastle.jce.provider.AnnotatedException from label04 to label05 with label08;
        catch org.bouncycastle.jce.provider.AnnotatedException from label10 to label11 with label12;
    }

    protected static int prepareNextCertI1(java.security.cert.CertPath, int, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.X509Certificate r3;
        org.bouncycastle.asn1.ASN1Sequence $r6;
        org.bouncycastle.asn1.DERObject $r5;
        java.util.Enumeration $r7;
        int i0, i1, $i2, $i3;
        java.math.BigInteger $r11;
        java.lang.String $r4;
        boolean $z0;
        org.bouncycastle.asn1.ASN1TaggedObject $r9;
        java.security.cert.CertPath r0;
        org.bouncycastle.asn1.DERInteger $r10;
        java.lang.IllegalArgumentException $r12;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r13, $r15;
        java.lang.Exception $r14;
        java.util.List $r1;
        java.lang.Object $r2, $r8;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

     label01:
        $r4 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String POLICY_CONSTRAINTS>;

        $r5 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r4);

        $r6 = staticinvoke <org.bouncycastle.asn1.DERSequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r5);

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

        $r15 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r15.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy constraints extension cannot be decoded.", $r14, r0, i0);

        throw $r15;

     label04:
        if $r6 == null goto label11;

        $r7 = virtualinvoke $r6.<org.bouncycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label05:
        $z0 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label11;

     label06:
        $r8 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r9 = staticinvoke <org.bouncycastle.asn1.ASN1TaggedObject: org.bouncycastle.asn1.ASN1TaggedObject getInstance(java.lang.Object)>($r8);

        $i2 = virtualinvoke $r9.<org.bouncycastle.asn1.ASN1TaggedObject: int getTagNo()>();

        if $i2 != 0 goto label09;

        $r10 = staticinvoke <org.bouncycastle.asn1.DERInteger: org.bouncycastle.asn1.DERInteger getInstance(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<org.bouncycastle.asn1.DERInteger: java.math.BigInteger getValue()>();

        $i3 = virtualinvoke $r11.<java.math.BigInteger: int intValue()>();

        if $i3 >= i1 goto label08;

     label07:
        return $i3;

     label08:
        goto label11;

     label09:
        goto label05;

     label10:
        $r12 := @caughtexception;

        $r13 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r13.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy constraints extension contents cannot be decoded.", $r12, r0, i0);

        throw $r13;

     label11:
        return i1;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label06 to label07 with label10;
    }

    protected static int prepareNextCertI2(java.security.cert.CertPath, int, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.X509Certificate r3;
        org.bouncycastle.asn1.ASN1Sequence $r6;
        org.bouncycastle.asn1.DERObject $r5;
        java.util.Enumeration $r7;
        int i0, i1, $i2, $i3;
        java.math.BigInteger $r11;
        java.lang.String $r4;
        boolean $z0;
        org.bouncycastle.asn1.ASN1TaggedObject $r9;
        java.security.cert.CertPath r0;
        org.bouncycastle.asn1.DERInteger $r10;
        java.lang.IllegalArgumentException $r12;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r13, $r15;
        java.lang.Exception $r14;
        java.util.List $r1;
        java.lang.Object $r2, $r8;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

     label01:
        $r4 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String POLICY_CONSTRAINTS>;

        $r5 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r4);

        $r6 = staticinvoke <org.bouncycastle.asn1.DERSequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r5);

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

        $r15 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r15.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy constraints extension cannot be decoded.", $r14, r0, i0);

        throw $r15;

     label04:
        if $r6 == null goto label11;

        $r7 = virtualinvoke $r6.<org.bouncycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label05:
        $z0 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label11;

     label06:
        $r8 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r9 = staticinvoke <org.bouncycastle.asn1.ASN1TaggedObject: org.bouncycastle.asn1.ASN1TaggedObject getInstance(java.lang.Object)>($r8);

        $i2 = virtualinvoke $r9.<org.bouncycastle.asn1.ASN1TaggedObject: int getTagNo()>();

        if $i2 != 1 goto label09;

        $r10 = staticinvoke <org.bouncycastle.asn1.DERInteger: org.bouncycastle.asn1.DERInteger getInstance(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<org.bouncycastle.asn1.DERInteger: java.math.BigInteger getValue()>();

        $i3 = virtualinvoke $r11.<java.math.BigInteger: int intValue()>();

        if $i3 >= i1 goto label08;

     label07:
        return $i3;

     label08:
        goto label11;

     label09:
        goto label05;

     label10:
        $r12 := @caughtexception;

        $r13 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r13.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy constraints extension contents cannot be decoded.", $r12, r0, i0);

        throw $r13;

     label11:
        return i1;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label06 to label07 with label10;
    }

    protected static void prepareNextCertG(java.security.cert.CertPath, int, org.bouncycastle.jce.provider.PKIXNameConstraintValidator) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.X509Certificate r3;
        org.bouncycastle.asn1.ASN1Sequence $r6, $r7, $r8;
        org.bouncycastle.asn1.DERObject $r5;
        java.util.Enumeration $r9;
        int i0;
        java.lang.String $r4;
        boolean $z0;
        org.bouncycastle.asn1.x509.NameConstraints $r13, r20;
        java.security.cert.CertPath r0;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r15, $r17, $r19;
        java.lang.Exception $r14, $r16, $r18;
        org.bouncycastle.asn1.x509.GeneralSubtree $r11;
        java.util.List $r1;
        java.lang.Object $r2, $r10;
        org.bouncycastle.jce.provider.PKIXNameConstraintValidator r12;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        r12 := @parameter2: org.bouncycastle.jce.provider.PKIXNameConstraintValidator;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        r20 = null;

     label01:
        $r4 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String NAME_CONSTRAINTS>;

        $r5 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r4);

        $r6 = staticinvoke <org.bouncycastle.asn1.DERSequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r5);

        if $r6 == null goto label02;

        $r13 = new org.bouncycastle.asn1.x509.NameConstraints;

        specialinvoke $r13.<org.bouncycastle.asn1.x509.NameConstraints: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r6);

        r20 = $r13;

     label02:
        goto label04;

     label03:
        $r18 := @caughtexception;

        $r19 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r19.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Name constraints extension could not be decoded.", $r18, r0, i0);

        throw $r19;

     label04:
        if r20 == null goto label12;

        $r7 = virtualinvoke r20.<org.bouncycastle.asn1.x509.NameConstraints: org.bouncycastle.asn1.ASN1Sequence getPermittedSubtrees()>();

        if $r7 == null goto label08;

     label05:
        virtualinvoke r12.<org.bouncycastle.jce.provider.PKIXNameConstraintValidator: void intersectPermittedSubtree(org.bouncycastle.asn1.ASN1Sequence)>($r7);

     label06:
        goto label08;

     label07:
        $r16 := @caughtexception;

        $r17 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r17.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Permitted subtrees cannot be build from name constraints extension.", $r16, r0, i0);

        throw $r17;

     label08:
        $r8 = virtualinvoke r20.<org.bouncycastle.asn1.x509.NameConstraints: org.bouncycastle.asn1.ASN1Sequence getExcludedSubtrees()>();

        if $r8 == null goto label12;

        $r9 = virtualinvoke $r8.<org.bouncycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label09:
        $z0 = interfaceinvoke $r9.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label10;

        $r10 = interfaceinvoke $r9.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r11 = staticinvoke <org.bouncycastle.asn1.x509.GeneralSubtree: org.bouncycastle.asn1.x509.GeneralSubtree getInstance(java.lang.Object)>($r10);

        virtualinvoke r12.<org.bouncycastle.jce.provider.PKIXNameConstraintValidator: void addExcludedSubtree(org.bouncycastle.asn1.x509.GeneralSubtree)>($r11);

        goto label09;

     label10:
        goto label12;

     label11:
        $r14 := @caughtexception;

        $r15 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r15.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Excluded subtrees cannot be build from name constraints extension.", $r14, r0, i0);

        throw $r15;

     label12:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Exception from label09 to label10 with label11;
    }

    private static void checkCRL(org.bouncycastle.asn1.x509.DistributionPoint, org.bouncycastle.x509.ExtendedPKIXParameters, java.security.cert.X509Certificate, java.util.Date, java.security.cert.X509Certificate, java.security.PublicKey, org.bouncycastle.jce.provider.CertStatus, org.bouncycastle.jce.provider.ReasonsMask, java.util.List) throws org.bouncycastle.jce.provider.AnnotatedException
    {
        java.security.cert.X509Certificate r3, r11;
        java.util.Date r1, $r30, $r31, $r39;
        org.bouncycastle.x509.ExtendedPKIXParameters r4;
        java.security.cert.X509CRL r37, r38;
        byte $b3, $b9;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6;
        org.bouncycastle.asn1.DERObjectIdentifier $r19, $r21, $r25, $r27;
        org.bouncycastle.jce.provider.ReasonsMask r8, $r10;
        java.util.Set $r5, $r14, $r16, $r17, $r33;
        java.util.List r13;
        org.bouncycastle.asn1.x509.DistributionPoint r2;
        long $l0, $l1, $l2, $l7, $l8;
        java.util.HashSet $r42, $r44;
        int $i4, $i5, $i6, $i10, $i11;
        org.bouncycastle.jce.provider.AnnotatedException $r35, r36, $r40, $r41, $r43, $r45;
        java.lang.String $r20, $r22, $r26, $r28;
        java.util.Iterator $r6;
        java.security.PublicKey r12, $r15;
        org.bouncycastle.jce.provider.CertStatus r7;
        java.lang.Object $r9;

        r2 := @parameter0: org.bouncycastle.asn1.x509.DistributionPoint;

        r4 := @parameter1: org.bouncycastle.x509.ExtendedPKIXParameters;

        r3 := @parameter2: java.security.cert.X509Certificate;

        r1 := @parameter3: java.util.Date;

        r11 := @parameter4: java.security.cert.X509Certificate;

        r12 := @parameter5: java.security.PublicKey;

        r7 := @parameter6: org.bouncycastle.jce.provider.CertStatus;

        r8 := @parameter7: org.bouncycastle.jce.provider.ReasonsMask;

        r13 := @parameter8: java.util.List;

        $r39 = new java.util.Date;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke $r39.<java.util.Date: void <init>(long)>($l0);

        $l1 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $l2 = virtualinvoke $r39.<java.util.Date: long getTime()>();

        $b3 = $l1 cmp $l2;

        $i10 = (int) $b3;

        if $i10 <= 0 goto label01;

        $r40 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r40.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Validation time is in future.");

        throw $r40;

     label01:
        $r5 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getCompleteCRLs(org.bouncycastle.asn1.x509.DistributionPoint,java.lang.Object,java.util.Date,org.bouncycastle.x509.ExtendedPKIXParameters)>(r2, r3, $r39, r4);

        z5 = 0;

        r36 = null;

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z6 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label13;

        $i4 = virtualinvoke r7.<org.bouncycastle.jce.provider.CertStatus: int getCertStatus()>();

        if $i4 != 11 goto label13;

        $z0 = virtualinvoke r8.<org.bouncycastle.jce.provider.ReasonsMask: boolean isAllReasons()>();

        if $z0 != 0 goto label13;

     label03:
        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r37 = (java.security.cert.X509CRL) $r9;

        $r10 = staticinvoke <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: org.bouncycastle.jce.provider.ReasonsMask processCRLD(java.security.cert.X509CRL,org.bouncycastle.asn1.x509.DistributionPoint)>(r37, r2);

        $z1 = virtualinvoke $r10.<org.bouncycastle.jce.provider.ReasonsMask: boolean hasNewReasons(org.bouncycastle.jce.provider.ReasonsMask)>(r8);

        if $z1 != 0 goto label05;

     label04:
        goto label02;

     label05:
        $r14 = staticinvoke <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.util.Set processCRLF(java.security.cert.X509CRL,java.lang.Object,java.security.cert.X509Certificate,java.security.PublicKey,org.bouncycastle.x509.ExtendedPKIXParameters,java.util.List)>(r37, r3, r11, r12, r4, r13);

        $r15 = staticinvoke <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.security.PublicKey processCRLG(java.security.cert.X509CRL,java.util.Set)>(r37, $r14);

        r38 = null;

        $z2 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: boolean isUseDeltasEnabled()>();

        if $z2 == 0 goto label06;

        $r33 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getDeltaCRLs(java.util.Date,org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509CRL)>($r39, r4, r37);

        r38 = staticinvoke <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.security.cert.X509CRL processCRLH(java.util.Set,java.security.PublicKey)>($r33, $r15);

     label06:
        $i5 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: int getValidityModel()>();

        if $i5 == 1 goto label07;

        $r30 = virtualinvoke r3.<java.security.cert.X509Certificate: java.util.Date getNotAfter()>();

        $l7 = virtualinvoke $r30.<java.util.Date: long getTime()>();

        $r31 = virtualinvoke r37.<java.security.cert.X509CRL: java.util.Date getThisUpdate()>();

        $l8 = virtualinvoke $r31.<java.util.Date: long getTime()>();

        $b9 = $l7 cmp $l8;

        $i11 = (int) $b9;

        if $i11 >= 0 goto label07;

        $r41 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r41.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("No valid CRL for current time found.");

        throw $r41;

     label07:
        staticinvoke <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: void processCRLB1(org.bouncycastle.asn1.x509.DistributionPoint,java.lang.Object,java.security.cert.X509CRL)>(r2, r3, r37);

        staticinvoke <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: void processCRLB2(org.bouncycastle.asn1.x509.DistributionPoint,java.lang.Object,java.security.cert.X509CRL)>(r2, r3, r37);

        staticinvoke <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: void processCRLC(java.security.cert.X509CRL,java.security.cert.X509CRL,org.bouncycastle.x509.ExtendedPKIXParameters)>(r38, r37, r4);

        staticinvoke <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: void processCRLI(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.bouncycastle.jce.provider.CertStatus,org.bouncycastle.x509.ExtendedPKIXParameters)>(r1, r38, r3, r7, r4);

        staticinvoke <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: void processCRLJ(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.bouncycastle.jce.provider.CertStatus)>(r1, r37, r3, r7);

        $i6 = virtualinvoke r7.<org.bouncycastle.jce.provider.CertStatus: int getCertStatus()>();

        if $i6 != 8 goto label08;

        virtualinvoke r7.<org.bouncycastle.jce.provider.CertStatus: void setCertStatus(int)>(11);

     label08:
        virtualinvoke r8.<org.bouncycastle.jce.provider.ReasonsMask: void addReasons(org.bouncycastle.jce.provider.ReasonsMask)>($r10);

        $r16 = virtualinvoke r37.<java.security.cert.X509CRL: java.util.Set getCriticalExtensionOIDs()>();

        if $r16 == null goto label09;

        $r42 = new java.util.HashSet;

        specialinvoke $r42.<java.util.HashSet: void <init>(java.util.Collection)>($r16);

        $r25 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier IssuingDistributionPoint>;

        $r26 = virtualinvoke $r25.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        interfaceinvoke $r42.<java.util.Set: boolean remove(java.lang.Object)>($r26);

        $r27 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier DeltaCRLIndicator>;

        $r28 = virtualinvoke $r27.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        interfaceinvoke $r42.<java.util.Set: boolean remove(java.lang.Object)>($r28);

        $z4 = interfaceinvoke $r42.<java.util.Set: boolean isEmpty()>();

        if $z4 != 0 goto label09;

        $r43 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r43.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("CRL contains unsupported critical extensions.");

        throw $r43;

     label09:
        if r38 == null goto label10;

        $r17 = virtualinvoke r38.<java.security.cert.X509CRL: java.util.Set getCriticalExtensionOIDs()>();

        if $r17 == null goto label10;

        $r44 = new java.util.HashSet;

        specialinvoke $r44.<java.util.HashSet: void <init>(java.util.Collection)>($r17);

        $r19 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier IssuingDistributionPoint>;

        $r20 = virtualinvoke $r19.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        interfaceinvoke $r44.<java.util.Set: boolean remove(java.lang.Object)>($r20);

        $r21 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier DeltaCRLIndicator>;

        $r22 = virtualinvoke $r21.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        interfaceinvoke $r44.<java.util.Set: boolean remove(java.lang.Object)>($r22);

        $z3 = interfaceinvoke $r44.<java.util.Set: boolean isEmpty()>();

        if $z3 != 0 goto label10;

        $r45 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r45.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Delta CRL contains unsupported critical extension.");

        throw $r45;

     label10:
        z5 = 1;

     label11:
        goto label02;

     label12:
        $r35 := @caughtexception;

        r36 = $r35;

        goto label02;

     label13:
        if z5 != 0 goto label14;

        throw r36;

     label14:
        return;

        catch org.bouncycastle.jce.provider.AnnotatedException from label03 to label04 with label12;
        catch org.bouncycastle.jce.provider.AnnotatedException from label05 to label11 with label12;
    }

    protected static void checkCRLs(org.bouncycastle.x509.ExtendedPKIXParameters, java.security.cert.X509Certificate, java.util.Date, java.security.cert.X509Certificate, java.security.PublicKey, java.util.List) throws org.bouncycastle.jce.provider.AnnotatedException
    {
        byte[] $r24;
        java.lang.Exception $r39, $r42, $r46;
        org.bouncycastle.asn1.x509.GeneralName $r29;
        java.lang.StringBuilder $r8, $r9, $r11, $r13, $r14, $r15, $r18;
        org.bouncycastle.asn1.DERObject $r2, $r25;
        java.lang.String $r1, $r12, $r17, $r19;
        org.bouncycastle.jce.provider.CertStatus $r5;
        org.bouncycastle.asn1.x509.GeneralNames $r28;
        org.bouncycastle.asn1.x509.DistributionPoint[] $r35;
        java.security.cert.X509Certificate r0, r32;
        java.util.Date $r10, r31;
        org.bouncycastle.x509.ExtendedPKIXParameters r4, r49, r50;
        boolean $z0, $z1, $z2, $z3, z4;
        org.bouncycastle.jce.provider.ReasonsMask $r6;
        org.bouncycastle.asn1.x509.CRLDistPoint $r3;
        java.util.List r34;
        org.bouncycastle.asn1.x509.DistributionPointName $r27;
        javax.security.auth.x500.X500Principal $r23;
        org.bouncycastle.asn1.x509.DistributionPoint $r26, $r37;
        java.lang.String[] $r16;
        org.bouncycastle.asn1.ASN1InputStream $r22;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7;
        org.bouncycastle.jce.provider.AnnotatedException $r7, $r20, $r21, $r38, $r40, $r41, $r43, $r44, $r45, $r47, r48;
        java.security.PublicKey r33;
        java.lang.Object $r30, $r36;

        r4 := @parameter0: org.bouncycastle.x509.ExtendedPKIXParameters;

        r0 := @parameter1: java.security.cert.X509Certificate;

        r31 := @parameter2: java.util.Date;

        r32 := @parameter3: java.security.cert.X509Certificate;

        r33 := @parameter4: java.security.PublicKey;

        r34 := @parameter5: java.util.List;

        r48 = null;

     label01:
        $r1 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CRL_DISTRIBUTION_POINTS>;

        $r2 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r0, $r1);

        $r3 = staticinvoke <org.bouncycastle.asn1.x509.CRLDistPoint: org.bouncycastle.asn1.x509.CRLDistPoint getInstance(java.lang.Object)>($r2);

     label02:
        goto label04;

     label03:
        $r46 := @caughtexception;

        $r47 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r47.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("CRL distribution point extension could not be read.", $r46);

        throw $r47;

     label04:
        staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: void addAdditionalStoresFromCRLDistributionPoint(org.bouncycastle.asn1.x509.CRLDistPoint,org.bouncycastle.x509.ExtendedPKIXParameters)>($r3, r4);

     label05:
        goto label07;

     label06:
        $r44 := @caughtexception;

        $r45 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r45.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("No additional CRL locations could be decoded from CRL distribution point extension.", $r44);

        throw $r45;

     label07:
        $r5 = new org.bouncycastle.jce.provider.CertStatus;

        specialinvoke $r5.<org.bouncycastle.jce.provider.CertStatus: void <init>()>();

        $r6 = new org.bouncycastle.jce.provider.ReasonsMask;

        specialinvoke $r6.<org.bouncycastle.jce.provider.ReasonsMask: void <init>()>();

        z4 = 0;

        if $r3 == null goto label17;

     label08:
        $r35 = virtualinvoke $r3.<org.bouncycastle.asn1.x509.CRLDistPoint: org.bouncycastle.asn1.x509.DistributionPoint[] getDistributionPoints()>();

     label09:
        goto label11;

     label10:
        $r42 := @caughtexception;

        $r43 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r43.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Distribution points could not be read.", $r42);

        throw $r43;

     label11:
        if $r35 == null goto label17;

        i5 = 0;

     label12:
        $i3 = lengthof $r35;

        if i5 >= $i3 goto label17;

        $i4 = virtualinvoke $r5.<org.bouncycastle.jce.provider.CertStatus: int getCertStatus()>();

        if $i4 != 11 goto label17;

        $z3 = virtualinvoke $r6.<org.bouncycastle.jce.provider.ReasonsMask: boolean isAllReasons()>();

        if $z3 != 0 goto label17;

        $r36 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: java.lang.Object clone()>();

        r49 = (org.bouncycastle.x509.ExtendedPKIXParameters) $r36;

     label13:
        $r37 = $r35[i5];

        staticinvoke <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: void checkCRL(org.bouncycastle.asn1.x509.DistributionPoint,org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,org.bouncycastle.jce.provider.CertStatus,org.bouncycastle.jce.provider.ReasonsMask,java.util.List)>($r37, r49, r0, r31, r32, r33, $r5, $r6, r34);

        z4 = 1;

     label14:
        goto label16;

     label15:
        $r41 := @caughtexception;

        r48 = $r41;

     label16:
        i5 = i5 + 1;

        goto label12;

     label17:
        $i6 = virtualinvoke $r5.<org.bouncycastle.jce.provider.CertStatus: int getCertStatus()>();

        if $i6 != 11 goto label24;

        $z2 = virtualinvoke $r6.<org.bouncycastle.jce.provider.ReasonsMask: boolean isAllReasons()>();

        if $z2 != 0 goto label24;

     label18:
        $r22 = new org.bouncycastle.asn1.ASN1InputStream;

        $r23 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: javax.security.auth.x500.X500Principal getEncodedIssuerPrincipal(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r23.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        specialinvoke $r22.<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>($r24);

        $r25 = virtualinvoke $r22.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.DERObject readObject()>();

     label19:
        goto label21;

     label20:
        $r39 := @caughtexception;

        $r40 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r40.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Issuer from certificate for CRL could not be reencoded.", $r39);

        throw $r40;

     label21:
        $r26 = new org.bouncycastle.asn1.x509.DistributionPoint;

        $r27 = new org.bouncycastle.asn1.x509.DistributionPointName;

        $r28 = new org.bouncycastle.asn1.x509.GeneralNames;

        $r29 = new org.bouncycastle.asn1.x509.GeneralName;

        specialinvoke $r29.<org.bouncycastle.asn1.x509.GeneralName: void <init>(int,org.bouncycastle.asn1.ASN1Encodable)>(4, $r25);

        specialinvoke $r28.<org.bouncycastle.asn1.x509.GeneralNames: void <init>(org.bouncycastle.asn1.x509.GeneralName)>($r29);

        specialinvoke $r27.<org.bouncycastle.asn1.x509.DistributionPointName: void <init>(int,org.bouncycastle.asn1.ASN1Encodable)>(0, $r28);

        specialinvoke $r26.<org.bouncycastle.asn1.x509.DistributionPoint: void <init>(org.bouncycastle.asn1.x509.DistributionPointName,org.bouncycastle.asn1.x509.ReasonFlags,org.bouncycastle.asn1.x509.GeneralNames)>($r27, null, null);

        $r30 = virtualinvoke r4.<org.bouncycastle.x509.ExtendedPKIXParameters: java.lang.Object clone()>();

        r50 = (org.bouncycastle.x509.ExtendedPKIXParameters) $r30;

        staticinvoke <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: void checkCRL(org.bouncycastle.asn1.x509.DistributionPoint,org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,org.bouncycastle.jce.provider.CertStatus,org.bouncycastle.jce.provider.ReasonsMask,java.util.List)>($r26, r50, r0, r31, r32, r33, $r5, $r6, r34);

        z4 = 1;

     label22:
        goto label24;

     label23:
        $r38 := @caughtexception;

        r48 = $r38;

     label24:
        if z4 != 0 goto label26;

        $z1 = r48 instanceof org.bouncycastle.jce.provider.AnnotatedException;

        if $z1 == 0 goto label25;

        throw r48;

     label25:
        $r21 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r21.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("No valid CRL found.", r48);

        throw $r21;

     label26:
        $i0 = virtualinvoke $r5.<org.bouncycastle.jce.provider.CertStatus: int getCertStatus()>();

        if $i0 == 11 goto label27;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificate revocation after ");

        $r10 = virtualinvoke $r5.<org.bouncycastle.jce.provider.CertStatus: java.util.Date getRevocationDate()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", reason: ");

        $r16 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String[] crlReasons>;

        $i2 = virtualinvoke $r5.<org.bouncycastle.jce.provider.CertStatus: int getCertStatus()>();

        $r17 = $r16[$i2];

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r20.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>($r19);

        throw $r20;

     label27:
        $z0 = virtualinvoke $r6.<org.bouncycastle.jce.provider.ReasonsMask: boolean isAllReasons()>();

        if $z0 != 0 goto label28;

        $i1 = virtualinvoke $r5.<org.bouncycastle.jce.provider.CertStatus: int getCertStatus()>();

        if $i1 != 11 goto label28;

        virtualinvoke $r5.<org.bouncycastle.jce.provider.CertStatus: void setCertStatus(int)>(12);

     label28:
        $i7 = virtualinvoke $r5.<org.bouncycastle.jce.provider.CertStatus: int getCertStatus()>();

        if $i7 != 12 goto label29;

        $r7 = new org.bouncycastle.jce.provider.AnnotatedException;

        specialinvoke $r7.<org.bouncycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Certificate status could not be determined.");

        throw $r7;

     label29:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch org.bouncycastle.jce.provider.AnnotatedException from label04 to label05 with label06;
        catch java.lang.Exception from label08 to label09 with label10;
        catch org.bouncycastle.jce.provider.AnnotatedException from label13 to label14 with label15;
        catch java.lang.Exception from label18 to label19 with label20;
        catch org.bouncycastle.jce.provider.AnnotatedException from label18 to label22 with label23;
    }

    protected static int prepareNextCertJ(java.security.cert.CertPath, int, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.X509Certificate r3;
        org.bouncycastle.asn1.DERObject $r5;
        java.security.cert.CertPath r0;
        org.bouncycastle.asn1.DERInteger $r6;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r9;
        java.lang.Exception $r8;
        java.util.List $r1;
        int i0, i1, $i2;
        java.lang.Object $r2;
        java.math.BigInteger $r7;
        java.lang.String $r4;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

     label1:
        $r4 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String INHIBIT_ANY_POLICY>;

        $r5 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r4);

        $r6 = staticinvoke <org.bouncycastle.asn1.DERInteger: org.bouncycastle.asn1.DERInteger getInstance(java.lang.Object)>($r5);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r9.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Inhibit any-policy extension cannot be decoded.", $r8, r0, i0);

        throw $r9;

     label4:
        if $r6 == null goto label5;

        $r7 = virtualinvoke $r6.<org.bouncycastle.asn1.DERInteger: java.math.BigInteger getValue()>();

        $i2 = virtualinvoke $r7.<java.math.BigInteger: int intValue()>();

        if $i2 >= i1 goto label5;

        return $i2;

     label5:
        return i1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected static void prepareNextCertK(java.security.cert.CertPath, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.X509Certificate r3;
        org.bouncycastle.asn1.x509.BasicConstraints $r6;
        org.bouncycastle.asn1.DERObject $r5;
        java.security.cert.CertPath r0;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r10;
        java.lang.Exception $r9;
        java.util.List $r1;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r4;
        java.security.cert.CertPathValidatorException $r7, $r8;
        boolean $z0;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

     label1:
        $r4 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String BASIC_CONSTRAINTS>;

        $r5 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r4);

        $r6 = staticinvoke <org.bouncycastle.asn1.x509.BasicConstraints: org.bouncycastle.asn1.x509.BasicConstraints getInstance(java.lang.Object)>($r5);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r10.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Basic constraints extension cannot be decoded.", $r9, r0, i0);

        throw $r10;

     label4:
        if $r6 == null goto label5;

        $z0 = virtualinvoke $r6.<org.bouncycastle.asn1.x509.BasicConstraints: boolean isCA()>();

        if $z0 != 0 goto label6;

        $r8 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r8.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String)>("Not a CA certificate");

        throw $r8;

     label5:
        $r7 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r7.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String)>("Intermediate certificate lacks BasicConstraints");

        throw $r7;

     label6:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected static int prepareNextCertL(java.security.cert.CertPath, int, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.X509Certificate r3;
        java.security.cert.CertPath r0;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r4;
        java.util.List $r1;
        int i0, i1, $i2;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $z0 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: boolean isSelfIssued(java.security.cert.X509Certificate)>(r3);

        if $z0 != 0 goto label2;

        if i1 > 0 goto label1;

        $r4 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r4.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Max path length not greater than zero", null, r0, i0);

        throw $r4;

     label1:
        $i2 = i1 - 1;

        return $i2;

     label2:
        return i1;
    }

    protected static int prepareNextCertM(java.security.cert.CertPath, int, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.X509Certificate r3;
        org.bouncycastle.asn1.x509.BasicConstraints $r6;
        org.bouncycastle.asn1.DERObject $r5;
        java.security.cert.CertPath r0;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r9;
        java.lang.Exception $r8;
        java.util.List $r1;
        int i0, i1, $i2;
        java.lang.Object $r2;
        java.math.BigInteger $r7;
        java.lang.String $r4;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

     label1:
        $r4 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String BASIC_CONSTRAINTS>;

        $r5 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r4);

        $r6 = staticinvoke <org.bouncycastle.asn1.x509.BasicConstraints: org.bouncycastle.asn1.x509.BasicConstraints getInstance(java.lang.Object)>($r5);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r9.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Basic constraints extension cannot be decoded.", $r8, r0, i0);

        throw $r9;

     label4:
        if $r6 == null goto label5;

        $r7 = virtualinvoke $r6.<org.bouncycastle.asn1.x509.BasicConstraints: java.math.BigInteger getPathLenConstraint()>();

        if $r7 == null goto label5;

        $i2 = virtualinvoke $r7.<java.math.BigInteger: int intValue()>();

        if $i2 >= i1 goto label5;

        return $i2;

     label5:
        return i1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected static void prepareNextCertN(java.security.cert.CertPath, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.X509Certificate r3;
        boolean[] $r4;
        java.security.cert.CertPath r0;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r5;
        java.util.List $r1;
        int i0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $r4 = virtualinvoke r3.<java.security.cert.X509Certificate: boolean[] getKeyUsage()>();

        if $r4 == null goto label1;

        $z0 = $r4[5];

        if $z0 != 0 goto label1;

        $r5 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r5.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Issuer certificate keyusage extension is critical and does not permit key signing.", null, r0, i0);

        throw $r5;

     label1:
        return;
    }

    protected static void prepareNextCertO(java.security.cert.CertPath, int, java.util.Set, java.util.List) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.X509Certificate r3;
        java.lang.Throwable $r13;
        java.security.cert.PKIXCertPathChecker $r9;
        int i0;
        java.security.cert.CertPathValidatorException $r10, $r11;
        java.lang.String $r12;
        boolean $z0, $z1;
        java.util.Iterator $r5;
        java.util.Set r6;
        java.security.cert.CertPath r0;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r7;
        java.util.List $r1, r4;
        java.lang.Object $r2, $r8;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        r6 := @parameter2: java.util.Set;

        r4 := @parameter3: java.util.List;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

     label2:
        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.security.cert.PKIXCertPathChecker) $r8;

        virtualinvoke $r9.<java.security.cert.PKIXCertPathChecker: void check(java.security.cert.Certificate,java.util.Collection)>(r3, r6);

     label3:
        goto label1;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.security.cert.CertPathValidatorException;

        $r12 = virtualinvoke $r10.<java.security.cert.CertPathValidatorException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r10.<java.security.cert.CertPathValidatorException: java.lang.Throwable getCause()>();

        specialinvoke $r11.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>($r12, $r13, r0, i0);

        throw $r11;

     label5:
        $z1 = interfaceinvoke r6.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label6;

        $r7 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r7.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Certificate has unsupported critical extension.", null, r0, i0);

        throw $r7;

     label6:
        return;

        catch java.security.cert.CertPathValidatorException from label2 to label3 with label4;
    }

    protected static int prepareNextCertH1(java.security.cert.CertPath, int, int)
    {
        java.security.cert.X509Certificate r3;
        java.security.cert.CertPath r0;
        java.util.List $r1;
        int i0, i1, $i2;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $z0 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: boolean isSelfIssued(java.security.cert.X509Certificate)>(r3);

        if $z0 != 0 goto label1;

        if i1 == 0 goto label1;

        $i2 = i1 - 1;

        return $i2;

     label1:
        return i1;
    }

    protected static int prepareNextCertH2(java.security.cert.CertPath, int, int)
    {
        java.security.cert.X509Certificate r3;
        java.security.cert.CertPath r0;
        java.util.List $r1;
        int i0, i1, $i2;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $z0 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: boolean isSelfIssued(java.security.cert.X509Certificate)>(r3);

        if $z0 != 0 goto label1;

        if i1 == 0 goto label1;

        $i2 = i1 - 1;

        return $i2;

     label1:
        return i1;
    }

    protected static int prepareNextCertH3(java.security.cert.CertPath, int, int)
    {
        java.security.cert.X509Certificate r3;
        java.security.cert.CertPath r0;
        java.util.List $r1;
        int i0, i1, $i2;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $z0 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: boolean isSelfIssued(java.security.cert.X509Certificate)>(r3);

        if $z0 != 0 goto label1;

        if i1 == 0 goto label1;

        $i2 = i1 - 1;

        return $i2;

     label1:
        return i1;
    }

    protected static int wrapupCertA(int, java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate r0;
        int i0, $i2;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.security.cert.X509Certificate;

        $z0 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: boolean isSelfIssued(java.security.cert.X509Certificate)>(r0);

        if $z0 != 0 goto label1;

        if i0 == 0 goto label1;

        $i2 = (int) -1;

        i0 = i0 + $i2;

     label1:
        return i0;
    }

    protected static int wrapupCertB(java.security.cert.CertPath, int, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.X509Certificate r3;
        org.bouncycastle.asn1.ASN1Sequence $r6;
        org.bouncycastle.asn1.DERObject $r5;
        java.util.Enumeration $r7;
        int i0, i1, $i2, $i3;
        org.bouncycastle.jce.provider.AnnotatedException $r14;
        java.math.BigInteger $r11;
        java.lang.String $r4;
        boolean $z0;
        org.bouncycastle.asn1.ASN1TaggedObject r9;
        java.security.cert.CertPath r0;
        org.bouncycastle.asn1.DERInteger $r10;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r13, $r15;
        java.lang.Exception $r12;
        java.util.List $r1;
        java.lang.Object $r2, $r8;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

     label01:
        $r4 = <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String POLICY_CONSTRAINTS>;

        $r5 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r4);

        $r6 = staticinvoke <org.bouncycastle.asn1.DERSequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r5);

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

        $r15 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r15.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy constraints could no be decoded.", $r14, r0, i0);

        throw $r15;

     label04:
        if $r6 == null goto label11;

        $r7 = virtualinvoke $r6.<org.bouncycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label05:
        $z0 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label11;

        $r8 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        r9 = (org.bouncycastle.asn1.ASN1TaggedObject) $r8;

        $i2 = virtualinvoke r9.<org.bouncycastle.asn1.ASN1TaggedObject: int getTagNo()>();

        lookupswitch($i2)
        {
            case 0: goto label06;
            default: goto label10;
        };

     label06:
        $r10 = staticinvoke <org.bouncycastle.asn1.DERInteger: org.bouncycastle.asn1.DERInteger getInstance(java.lang.Object)>(r9);

        $r11 = virtualinvoke $r10.<org.bouncycastle.asn1.DERInteger: java.math.BigInteger getValue()>();

        $i3 = virtualinvoke $r11.<java.math.BigInteger: int intValue()>();

     label07:
        goto label09;

     label08:
        $r12 := @caughtexception;

        $r13 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r13.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy constraints requireExplicitPolicy field could no be decoded.", $r12, r0, i0);

        throw $r13;

     label09:
        if $i3 != 0 goto label10;

        return 0;

     label10:
        goto label05;

     label11:
        return i1;

        catch org.bouncycastle.jce.provider.AnnotatedException from label01 to label02 with label03;
        catch java.lang.Exception from label06 to label07 with label08;
    }

    protected static void wrapupCertF(java.security.cert.CertPath, int, java.util.List, java.util.Set) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.X509Certificate r3;
        java.util.Iterator $r5;
        java.util.Set r6;
        java.security.cert.CertPath r0;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r7, $r11;
        java.security.cert.PKIXCertPathChecker $r9;
        java.util.List $r1, r4;
        int i0;
        java.lang.Object $r2, $r8;
        java.security.cert.CertPathValidatorException $r10;
        boolean $z0, $z1;

        r0 := @parameter0: java.security.cert.CertPath;

        i0 := @parameter1: int;

        r4 := @parameter2: java.util.List;

        r6 := @parameter3: java.util.Set;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

     label2:
        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.security.cert.PKIXCertPathChecker) $r8;

        virtualinvoke $r9.<java.security.cert.PKIXCertPathChecker: void check(java.security.cert.Certificate,java.util.Collection)>(r3, r6);

     label3:
        goto label1;

     label4:
        $r10 := @caughtexception;

        $r11 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r11.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Additional certificate path checker failed.", $r10, r0, i0);

        throw $r11;

     label5:
        $z1 = interfaceinvoke r6.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label6;

        $r7 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r7.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Certificate has unsupported critical extension", null, r0, i0);

        throw $r7;

     label6:
        return;

        catch java.security.cert.CertPathValidatorException from label2 to label3 with label4;
    }

    protected static org.bouncycastle.jce.provider.PKIXPolicyNode wrapupCertG(java.security.cert.CertPath, org.bouncycastle.x509.ExtendedPKIXParameters, java.util.Set, int, java.util.List[], org.bouncycastle.jce.provider.PKIXPolicyNode, java.util.Set) throws java.security.cert.CertPathValidatorException
    {
        java.util.Set r2, r18;
        java.lang.String $r8, $r10, $r11, $r15, $r16, $r23, $r25, $r26;
        java.util.List[] r4;
        org.bouncycastle.x509.ExtendedPKIXParameters r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        org.bouncycastle.jce.exception.ExtCertPathValidatorException $r43, $r44;
        java.util.List $r1, r33, r36, r38, r41;
        org.bouncycastle.jce.provider.PKIXPolicyNode r14, r31, r32, r34, r35, r37, r39, r40, r42;
        java.util.HashSet $r45, $r46;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, $i17, $i19;
        java.util.Iterator $r5, $r12, $r20, $r27;
        java.security.cert.CertPath r0;
        java.lang.Object $r6, $r7, $r9, $r13, $r21, $r22, $r24, $r28;

        r0 := @parameter0: java.security.cert.CertPath;

        r17 := @parameter1: org.bouncycastle.x509.ExtendedPKIXParameters;

        r2 := @parameter2: java.util.Set;

        i7 := @parameter3: int;

        r4 := @parameter4: java.util.List[];

        r31 := @parameter5: org.bouncycastle.jce.provider.PKIXPolicyNode;

        r18 := @parameter6: java.util.Set;

        $r1 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if r31 != null goto label02;

        $z14 = virtualinvoke r17.<org.bouncycastle.x509.ExtendedPKIXParameters: boolean isExplicitPolicyRequired()>();

        if $z14 == 0 goto label01;

        $r43 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r43.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Explicit policy requested but none available.", null, r0, i7);

        throw $r43;

     label01:
        r32 = null;

        goto label34;

     label02:
        $z0 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: boolean isAnyPolicy(java.util.Set)>(r2);

        if $z0 == 0 goto label18;

        $z7 = virtualinvoke r17.<org.bouncycastle.x509.ExtendedPKIXParameters: boolean isExplicitPolicyRequired()>();

        if $z7 == 0 goto label17;

        $z8 = interfaceinvoke r18.<java.util.Set: boolean isEmpty()>();

        if $z8 == 0 goto label03;

        $r44 = new org.bouncycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r44.<org.bouncycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Explicit policy requested but none available.", null, r0, i7);

        throw $r44;

     label03:
        $r45 = new java.util.HashSet;

        specialinvoke $r45.<java.util.HashSet: void <init>()>();

        i8 = 0;

     label04:
        $i4 = lengthof r4;

        if i8 >= $i4 goto label09;

        r33 = r4[i8];

        i9 = 0;

     label05:
        $i6 = interfaceinvoke r33.<java.util.List: int size()>();

        if i9 >= $i6 goto label08;

        $r24 = interfaceinvoke r33.<java.util.List: java.lang.Object get(int)>(i9);

        r34 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r24;

        $r25 = "2.5.29.32.0";

        $r26 = virtualinvoke r34.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z12 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        if $z12 == 0 goto label07;

        $r27 = virtualinvoke r34.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.util.Iterator getChildren()>();

     label06:
        $z13 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label07;

        $r28 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r45.<java.util.Set: boolean add(java.lang.Object)>($r28);

        goto label06;

     label07:
        i9 = i9 + 1;

        goto label05;

     label08:
        i8 = i8 + 1;

        goto label04;

     label09:
        $r20 = interfaceinvoke $r45.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z9 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label12;

        $r22 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r35 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r22;

        $r23 = virtualinvoke r35.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z11 = interfaceinvoke r18.<java.util.Set: boolean contains(java.lang.Object)>($r23);

        if $z11 != 0 goto label11;

     label11:
        goto label10;

     label12:
        if r31 == null goto label17;

        i10 = $i0 - 1;

     label13:
        if i10 < 0 goto label17;

        r36 = r4[i10];

        i11 = 0;

     label14:
        $i5 = interfaceinvoke r36.<java.util.List: int size()>();

        if i11 >= $i5 goto label16;

        $r21 = interfaceinvoke r36.<java.util.List: java.lang.Object get(int)>(i11);

        r37 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r21;

        $z10 = virtualinvoke r37.<org.bouncycastle.jce.provider.PKIXPolicyNode: boolean hasChildren()>();

        if $z10 != 0 goto label15;

        r31 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.bouncycastle.jce.provider.PKIXPolicyNode,java.util.List[],org.bouncycastle.jce.provider.PKIXPolicyNode)>(r31, r4, r37);

     label15:
        i11 = i11 + 1;

        goto label14;

     label16:
        $i17 = (int) -1;

        i10 = i10 + $i17;

        goto label13;

     label17:
        r32 = r31;

        goto label34;

     label18:
        $r46 = new java.util.HashSet;

        specialinvoke $r46.<java.util.HashSet: void <init>()>();

        i12 = 0;

     label19:
        $i1 = lengthof r4;

        if i12 >= $i1 goto label25;

        r38 = r4[i12];

        i13 = 0;

     label20:
        $i3 = interfaceinvoke r38.<java.util.List: int size()>();

        if i13 >= $i3 goto label24;

        $r9 = interfaceinvoke r38.<java.util.List: java.lang.Object get(int)>(i13);

        r39 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r9;

        $r10 = "2.5.29.32.0";

        $r11 = virtualinvoke r39.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z4 == 0 goto label23;

        $r12 = virtualinvoke r39.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.util.Iterator getChildren()>();

     label21:
        $z5 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label23;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r13;

        $r15 = "2.5.29.32.0";

        $r16 = virtualinvoke r14.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z6 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z6 != 0 goto label22;

        interfaceinvoke $r46.<java.util.Set: boolean add(java.lang.Object)>(r14);

     label22:
        goto label21;

     label23:
        i13 = i13 + 1;

        goto label20;

     label24:
        i12 = i12 + 1;

        goto label19;

     label25:
        $r5 = interfaceinvoke $r46.<java.util.Set: java.util.Iterator iterator()>();

     label26:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label28;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r40 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r7;

        $r8 = virtualinvoke r40.<org.bouncycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z3 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        if $z3 != 0 goto label27;

        r31 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.bouncycastle.jce.provider.PKIXPolicyNode,java.util.List[],org.bouncycastle.jce.provider.PKIXPolicyNode)>(r31, r4, r40);

     label27:
        goto label26;

     label28:
        if r31 == null goto label33;

        i14 = $i0 - 1;

     label29:
        if i14 < 0 goto label33;

        r41 = r4[i14];

        i15 = 0;

     label30:
        $i2 = interfaceinvoke r41.<java.util.List: int size()>();

        if i15 >= $i2 goto label32;

        $r6 = interfaceinvoke r41.<java.util.List: java.lang.Object get(int)>(i15);

        r42 = (org.bouncycastle.jce.provider.PKIXPolicyNode) $r6;

        $z2 = virtualinvoke r42.<org.bouncycastle.jce.provider.PKIXPolicyNode: boolean hasChildren()>();

        if $z2 != 0 goto label31;

        r31 = staticinvoke <org.bouncycastle.jce.provider.CertPathValidatorUtilities: org.bouncycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.bouncycastle.jce.provider.PKIXPolicyNode,java.util.List[],org.bouncycastle.jce.provider.PKIXPolicyNode)>(r31, r4, r42);

     label31:
        i15 = i15 + 1;

        goto label30;

     label32:
        $i19 = (int) -1;

        i14 = i14 + $i19;

        goto label29;

     label33:
        r32 = r31;

     label34:
        return r32;
    }

    static void <clinit>()
    {
        java.lang.String[] $r28;
        java.lang.String $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27;
        org.bouncycastle.asn1.DERObjectIdentifier $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26;

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: int CRL_SIGN> = 6;

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: int KEY_CERT_SIGN> = 5;

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String ANY_POLICY> = "2.5.29.32.0";

        $r0 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier CertificatePolicies>;

        $r1 = virtualinvoke $r0.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CERTIFICATE_POLICIES> = $r1;

        $r2 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier PolicyMappings>;

        $r3 = virtualinvoke $r2.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String POLICY_MAPPINGS> = $r3;

        $r4 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier InhibitAnyPolicy>;

        $r5 = virtualinvoke $r4.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String INHIBIT_ANY_POLICY> = $r5;

        $r6 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier IssuingDistributionPoint>;

        $r7 = virtualinvoke $r6.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String ISSUING_DISTRIBUTION_POINT> = $r7;

        $r8 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier FreshestCRL>;

        $r9 = virtualinvoke $r8.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String FRESHEST_CRL> = $r9;

        $r10 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier DeltaCRLIndicator>;

        $r11 = virtualinvoke $r10.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String DELTA_CRL_INDICATOR> = $r11;

        $r12 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier PolicyConstraints>;

        $r13 = virtualinvoke $r12.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String POLICY_CONSTRAINTS> = $r13;

        $r14 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier BasicConstraints>;

        $r15 = virtualinvoke $r14.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String BASIC_CONSTRAINTS> = $r15;

        $r16 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier CRLDistributionPoints>;

        $r17 = virtualinvoke $r16.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CRL_DISTRIBUTION_POINTS> = $r17;

        $r18 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier SubjectAlternativeName>;

        $r19 = virtualinvoke $r18.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String SUBJECT_ALTERNATIVE_NAME> = $r19;

        $r20 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier NameConstraints>;

        $r21 = virtualinvoke $r20.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String NAME_CONSTRAINTS> = $r21;

        $r22 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier AuthorityKeyIdentifier>;

        $r23 = virtualinvoke $r22.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String AUTHORITY_KEY_IDENTIFIER> = $r23;

        $r24 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier KeyUsage>;

        $r25 = virtualinvoke $r24.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String KEY_USAGE> = $r25;

        $r26 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier CRLNumber>;

        $r27 = virtualinvoke $r26.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CRL_NUMBER> = $r27;

        $r28 = newarray (java.lang.String)[11];

        $r28[0] = "unspecified";

        $r28[1] = "keyCompromise";

        $r28[2] = "cACompromise";

        $r28[3] = "affiliationChanged";

        $r28[4] = "superseded";

        $r28[5] = "cessationOfOperation";

        $r28[6] = "certificateHold";

        $r28[7] = "unknown";

        $r28[8] = "removeFromCRL";

        $r28[9] = "privilegeWithdrawn";

        $r28[10] = "aACompromise";

        <org.bouncycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String[] crlReasons> = $r28;

        return;
    }
}
