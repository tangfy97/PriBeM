class net.oauth.signature.Base64 extends java.lang.Object
{
    static final int CHUNK_SIZE;
    static final byte[] CHUNK_SEPARATOR;
    private static final byte[] intToBase64;
    private static final byte PAD;
    private static final byte[] base64ToInt;
    private static final int MASK_6BITS;
    private static final int MASK_8BITS;
    private final int lineLength;
    private final byte[] lineSeparator;
    private final int decodeSize;
    private final int encodeSize;
    private byte[] buf;
    private int pos;
    private int readPos;
    private int currentLinePos;
    private int modulus;
    private boolean eof;
    private int x;

    public void <init>()
    {
        byte[] $r1;
        net.oauth.signature.Base64 r0;

        r0 := @this: net.oauth.signature.Base64;

        $r1 = <net.oauth.signature.Base64: byte[] CHUNK_SEPARATOR>;

        specialinvoke r0.<net.oauth.signature.Base64: void <init>(int,byte[])>(76, $r1);

        return;
    }

    public void <init>(int)
    {
        int i0;
        byte[] $r1;
        net.oauth.signature.Base64 r0;

        r0 := @this: net.oauth.signature.Base64;

        i0 := @parameter0: int;

        $r1 = <net.oauth.signature.Base64: byte[] CHUNK_SEPARATOR>;

        specialinvoke r0.<net.oauth.signature.Base64: void <init>(int,byte[])>(i0, $r1);

        return;
    }

    public void <init>(int, byte[])
    {
        byte[] r1, $r2, $r3;
        net.oauth.signature.Base64 r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r4, $r10, $r12, r13;
        boolean $z0;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.io.UnsupportedEncodingException $r11;

        r0 := @this: net.oauth.signature.Base64;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.oauth.signature.Base64: int lineLength> = i0;

        $i1 = lengthof r1;

        $r2 = newarray (byte)[$i1];

        r0.<net.oauth.signature.Base64: byte[] lineSeparator> = $r2;

        $r3 = r0.<net.oauth.signature.Base64: byte[] lineSeparator>;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, $i2);

        if i0 <= 0 goto label1;

        $i5 = lengthof r1;

        $i6 = 4 + $i5;

        r0.<net.oauth.signature.Base64: int encodeSize> = $i6;

        goto label2;

     label1:
        r0.<net.oauth.signature.Base64: int encodeSize> = 4;

     label2:
        $i3 = r0.<net.oauth.signature.Base64: int encodeSize>;

        $i4 = $i3 - 1;

        r0.<net.oauth.signature.Base64: int decodeSize> = $i4;

        $z0 = staticinvoke <net.oauth.signature.Base64: boolean containsBase64Byte(byte[])>(r1);

        if $z0 == 0 goto label7;

     label3:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.lang.String)>(r1, "UTF-8");

        r13 = $r4;

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        $r12 = new java.lang.String;

        specialinvoke $r12.<java.lang.String: void <init>(byte[])>(r1);

        r13 = $r12;

     label6:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lineSeperator must not contain base64 characters: [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label7:
        return;

        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
    }

    boolean hasData()
    {
        byte[] $r1;
        net.oauth.signature.Base64 r0;
        boolean $z0;

        r0 := @this: net.oauth.signature.Base64;

        $r1 = r0.<net.oauth.signature.Base64: byte[] buf>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    int avail()
    {
        byte[] $r1;
        net.oauth.signature.Base64 r0;
        int $i0, $i1, $i2;

        r0 := @this: net.oauth.signature.Base64;

        $r1 = r0.<net.oauth.signature.Base64: byte[] buf>;

        if $r1 == null goto label1;

        $i1 = r0.<net.oauth.signature.Base64: int pos>;

        $i0 = r0.<net.oauth.signature.Base64: int readPos>;

        $i2 = $i1 - $i0;

        goto label2;

     label1:
        $i2 = 0;

     label2:
        return $i2;
    }

    private void resizeBuf()
    {
        byte[] $r1, $r2, r3, $r4, $r5, $r6;
        net.oauth.signature.Base64 r0;
        int $i0, $i1, $i2;

        r0 := @this: net.oauth.signature.Base64;

        $r1 = r0.<net.oauth.signature.Base64: byte[] buf>;

        if $r1 != null goto label1;

        $r6 = newarray (byte)[8192];

        r0.<net.oauth.signature.Base64: byte[] buf> = $r6;

        r0.<net.oauth.signature.Base64: int pos> = 0;

        r0.<net.oauth.signature.Base64: int readPos> = 0;

        goto label2;

     label1:
        $r2 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i0 = lengthof $r2;

        $i1 = $i0 * 2;

        r3 = newarray (byte)[$i1];

        $r5 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $r4 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r3, 0, $i2);

        r0.<net.oauth.signature.Base64: byte[] buf> = r3;

     label2:
        return;
    }

    int readResults(byte[], int, int)
    {
        byte[] $r1, r2, $r3, $r4;
        net.oauth.signature.Base64 r0;
        byte $b9;
        int $i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;

        r0 := @this: net.oauth.signature.Base64;

        r2 := @parameter0: byte[];

        i3 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<net.oauth.signature.Base64: byte[] buf>;

        if $r1 == null goto label3;

        $i0 = virtualinvoke r0.<net.oauth.signature.Base64: int avail()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, i1);

        $r3 = r0.<net.oauth.signature.Base64: byte[] buf>;

        if $r3 == r2 goto label1;

        $r4 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i4 = r0.<net.oauth.signature.Base64: int readPos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i4, r2, i3, $i2);

        $i5 = r0.<net.oauth.signature.Base64: int readPos>;

        $i6 = $i5 + $i2;

        r0.<net.oauth.signature.Base64: int readPos> = $i6;

        $i8 = r0.<net.oauth.signature.Base64: int readPos>;

        $i7 = r0.<net.oauth.signature.Base64: int pos>;

        if $i8 < $i7 goto label2;

        r0.<net.oauth.signature.Base64: byte[] buf> = null;

        goto label2;

     label1:
        r0.<net.oauth.signature.Base64: byte[] buf> = null;

     label2:
        return $i2;

     label3:
        $z0 = r0.<net.oauth.signature.Base64: boolean eof>;

        if $z0 == 0 goto label4;

        $b9 = -1;

        goto label5;

     label4:
        $b9 = 0;

     label5:
        return $b9;
    }

    void setInitialBuffer(byte[], int, int)
    {
        byte[] r0;
        net.oauth.signature.Base64 r1;
        int i0, $i1, i2;

        r1 := @this: net.oauth.signature.Base64;

        r0 := @parameter0: byte[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        if r0 == null goto label1;

        $i1 = lengthof r0;

        if $i1 != i0 goto label1;

        r1.<net.oauth.signature.Base64: byte[] buf> = r0;

        r1.<net.oauth.signature.Base64: int pos> = i2;

        r1.<net.oauth.signature.Base64: int readPos> = i2;

     label1:
        return;
    }

    void encode(byte[], int, int)
    {
        byte[] $r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34;
        net.oauth.signature.Base64 r0;
        byte $b10, $b16, $b22, $b27, $b47, $b53, $b59, $b72, $b78, $b95;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i50, $i51, $i52, $i54, $i55, $i56, $i57, $i58, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i73, $i74, $i75, $i76, $i77, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, i87, $i88, $i89, i90, $i91, $i92, $i93, $i94, i96, $i97, $i98, $i99;
        boolean $z0;

        r0 := @this: net.oauth.signature.Base64;

        r2 := @parameter0: byte[];

        i87 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = r0.<net.oauth.signature.Base64: boolean eof>;

        if $z0 == 0 goto label01;

        return;

     label01:
        if i0 >= 0 goto label07;

        r0.<net.oauth.signature.Base64: boolean eof> = 1;

        $r16 = r0.<net.oauth.signature.Base64: byte[] buf>;

        if $r16 == null goto label02;

        $r34 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i84 = lengthof $r34;

        $i83 = r0.<net.oauth.signature.Base64: int pos>;

        $i86 = $i84 - $i83;

        $i85 = r0.<net.oauth.signature.Base64: int encodeSize>;

        if $i86 >= $i85 goto label03;

     label02:
        specialinvoke r0.<net.oauth.signature.Base64: void resizeBuf()>();

     label03:
        $i88 = r0.<net.oauth.signature.Base64: int modulus>;

        lookupswitch($i88)
        {
            case 1: goto label04;
            case 2: goto label05;
            default: goto label06;
        };

     label04:
        $r28 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i67 = r0.<net.oauth.signature.Base64: int pos>;

        $i68 = $i67 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i68;

        $r29 = <net.oauth.signature.Base64: byte[] intToBase64>;

        $i69 = r0.<net.oauth.signature.Base64: int x>;

        $i70 = $i69 >> 2;

        $i71 = $i70 & 63;

        $b72 = $r29[$i71];

        $r28[$i67] = $b72;

        $r30 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i73 = r0.<net.oauth.signature.Base64: int pos>;

        $i74 = $i73 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i74;

        $r31 = <net.oauth.signature.Base64: byte[] intToBase64>;

        $i75 = r0.<net.oauth.signature.Base64: int x>;

        $i76 = $i75 << 4;

        $i77 = $i76 & 63;

        $b78 = $r31[$i77];

        $r30[$i73] = $b78;

        $r32 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i79 = r0.<net.oauth.signature.Base64: int pos>;

        $i80 = $i79 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i80;

        $r32[$i79] = 61;

        $r33 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i81 = r0.<net.oauth.signature.Base64: int pos>;

        $i82 = $i81 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i82;

        $r33[$i81] = 61;

        goto label06;

     label05:
        $r17 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i42 = r0.<net.oauth.signature.Base64: int pos>;

        $i43 = $i42 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i43;

        $r18 = <net.oauth.signature.Base64: byte[] intToBase64>;

        $i44 = r0.<net.oauth.signature.Base64: int x>;

        $i45 = $i44 >> 10;

        $i46 = $i45 & 63;

        $b47 = $r18[$i46];

        $r17[$i42] = $b47;

        $r19 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i48 = r0.<net.oauth.signature.Base64: int pos>;

        $i49 = $i48 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i49;

        $r20 = <net.oauth.signature.Base64: byte[] intToBase64>;

        $i50 = r0.<net.oauth.signature.Base64: int x>;

        $i51 = $i50 >> 4;

        $i52 = $i51 & 63;

        $b53 = $r20[$i52];

        $r19[$i48] = $b53;

        $r21 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i54 = r0.<net.oauth.signature.Base64: int pos>;

        $i55 = $i54 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i55;

        $r22 = <net.oauth.signature.Base64: byte[] intToBase64>;

        $i56 = r0.<net.oauth.signature.Base64: int x>;

        $i57 = $i56 << 2;

        $i58 = $i57 & 63;

        $b59 = $r22[$i58];

        $r21[$i54] = $b59;

        $r23 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i60 = r0.<net.oauth.signature.Base64: int pos>;

        $i61 = $i60 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i61;

        $r23[$i60] = 61;

     label06:
        $i89 = r0.<net.oauth.signature.Base64: int lineLength>;

        if $i89 <= 0 goto label13;

        $r26 = r0.<net.oauth.signature.Base64: byte[] lineSeparator>;

        $r25 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i63 = r0.<net.oauth.signature.Base64: int pos>;

        $r24 = r0.<net.oauth.signature.Base64: byte[] lineSeparator>;

        $i62 = lengthof $r24;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r26, 0, $r25, $i63, $i62);

        $i65 = r0.<net.oauth.signature.Base64: int pos>;

        $r27 = r0.<net.oauth.signature.Base64: byte[] lineSeparator>;

        $i64 = lengthof $r27;

        $i66 = $i65 + $i64;

        r0.<net.oauth.signature.Base64: int pos> = $i66;

        goto label13;

     label07:
        i90 = 0;

     label08:
        if i90 >= i0 goto label13;

        $r1 = r0.<net.oauth.signature.Base64: byte[] buf>;

        if $r1 == null goto label09;

        $r15 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i39 = lengthof $r15;

        $i38 = r0.<net.oauth.signature.Base64: int pos>;

        $i41 = $i39 - $i38;

        $i40 = r0.<net.oauth.signature.Base64: int encodeSize>;

        if $i41 >= $i40 goto label10;

     label09:
        specialinvoke r0.<net.oauth.signature.Base64: void resizeBuf()>();

     label10:
        $i91 = r0.<net.oauth.signature.Base64: int modulus>;

        $i92 = $i91 + 1;

        r0.<net.oauth.signature.Base64: int modulus> = $i92;

        $i93 = $i92 % 3;

        r0.<net.oauth.signature.Base64: int modulus> = $i93;

        $i94 = i87;

        i87 = i87 + 1;

        $b95 = r2[$i94];

        $i97 = (int) $b95;

        i96 = $i97;

        $i98 = (int) $b95;

        if $i98 >= 0 goto label11;

        $i99 = (int) $b95;

        i96 = $i99 + 256;

     label11:
        $i1 = r0.<net.oauth.signature.Base64: int x>;

        $i2 = $i1 << 8;

        $i3 = $i2 + i96;

        r0.<net.oauth.signature.Base64: int x> = $i3;

        $i4 = r0.<net.oauth.signature.Base64: int modulus>;

        if 0 != $i4 goto label12;

        $r3 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i5 = r0.<net.oauth.signature.Base64: int pos>;

        $i6 = $i5 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i6;

        $r4 = <net.oauth.signature.Base64: byte[] intToBase64>;

        $i7 = r0.<net.oauth.signature.Base64: int x>;

        $i8 = $i7 >> 18;

        $i9 = $i8 & 63;

        $b10 = $r4[$i9];

        $r3[$i5] = $b10;

        $r5 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i11 = r0.<net.oauth.signature.Base64: int pos>;

        $i12 = $i11 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i12;

        $r6 = <net.oauth.signature.Base64: byte[] intToBase64>;

        $i13 = r0.<net.oauth.signature.Base64: int x>;

        $i14 = $i13 >> 12;

        $i15 = $i14 & 63;

        $b16 = $r6[$i15];

        $r5[$i11] = $b16;

        $r7 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i17 = r0.<net.oauth.signature.Base64: int pos>;

        $i18 = $i17 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i18;

        $r8 = <net.oauth.signature.Base64: byte[] intToBase64>;

        $i19 = r0.<net.oauth.signature.Base64: int x>;

        $i20 = $i19 >> 6;

        $i21 = $i20 & 63;

        $b22 = $r8[$i21];

        $r7[$i17] = $b22;

        $r9 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i23 = r0.<net.oauth.signature.Base64: int pos>;

        $i24 = $i23 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i24;

        $r10 = <net.oauth.signature.Base64: byte[] intToBase64>;

        $i25 = r0.<net.oauth.signature.Base64: int x>;

        $i26 = $i25 & 63;

        $b27 = $r10[$i26];

        $r9[$i23] = $b27;

        $i28 = r0.<net.oauth.signature.Base64: int currentLinePos>;

        $i29 = $i28 + 4;

        r0.<net.oauth.signature.Base64: int currentLinePos> = $i29;

        $i30 = r0.<net.oauth.signature.Base64: int lineLength>;

        if $i30 <= 0 goto label12;

        $i32 = r0.<net.oauth.signature.Base64: int lineLength>;

        $i31 = r0.<net.oauth.signature.Base64: int currentLinePos>;

        if $i32 > $i31 goto label12;

        $r13 = r0.<net.oauth.signature.Base64: byte[] lineSeparator>;

        $r12 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i34 = r0.<net.oauth.signature.Base64: int pos>;

        $r11 = r0.<net.oauth.signature.Base64: byte[] lineSeparator>;

        $i33 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, $r12, $i34, $i33);

        $i36 = r0.<net.oauth.signature.Base64: int pos>;

        $r14 = r0.<net.oauth.signature.Base64: byte[] lineSeparator>;

        $i35 = lengthof $r14;

        $i37 = $i36 + $i35;

        r0.<net.oauth.signature.Base64: int pos> = $i37;

        r0.<net.oauth.signature.Base64: int currentLinePos> = 0;

     label12:
        i90 = i90 + 1;

        goto label08;

     label13:
        return;
    }

    void decode(byte[], int, int)
    {
        byte[] $r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        net.oauth.signature.Base64 r0;
        byte b2, $b15, $b21, $b26, $b35, $b41, $b49, $b57;
        boolean $z0;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i39, $i40, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i50, $i51, $i52, $i53, i54, i55, $i56, $i58, $i59, $i60, $i61, $i62, $i63;

        r0 := @this: net.oauth.signature.Base64;

        r2 := @parameter0: byte[];

        i54 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = r0.<net.oauth.signature.Base64: boolean eof>;

        if $z0 == 0 goto label01;

        return;

     label01:
        if i0 >= 0 goto label02;

        r0.<net.oauth.signature.Base64: boolean eof> = 1;

     label02:
        i55 = 0;

     label03:
        if i55 >= i0 goto label11;

        $r1 = r0.<net.oauth.signature.Base64: byte[] buf>;

        if $r1 == null goto label04;

        $r11 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i51 = lengthof $r11;

        $i50 = r0.<net.oauth.signature.Base64: int pos>;

        $i53 = $i51 - $i50;

        $i52 = r0.<net.oauth.signature.Base64: int decodeSize>;

        if $i53 >= $i52 goto label05;

     label04:
        specialinvoke r0.<net.oauth.signature.Base64: void resizeBuf()>();

     label05:
        $i56 = i54;

        i54 = i54 + 1;

        $b57 = r2[$i56];

        $i58 = (int) $b57;

        if $i58 != 61 goto label09;

        $i27 = r0.<net.oauth.signature.Base64: int x>;

        $i28 = $i27 << 6;

        r0.<net.oauth.signature.Base64: int x> = $i28;

        $i29 = r0.<net.oauth.signature.Base64: int modulus>;

        lookupswitch($i29)
        {
            case 2: goto label06;
            case 3: goto label07;
            default: goto label08;
        };

     label06:
        $i42 = r0.<net.oauth.signature.Base64: int x>;

        $i43 = $i42 << 6;

        r0.<net.oauth.signature.Base64: int x> = $i43;

        $r10 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i44 = r0.<net.oauth.signature.Base64: int pos>;

        $i45 = $i44 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i45;

        $i46 = r0.<net.oauth.signature.Base64: int x>;

        $i47 = $i46 >> 16;

        $i48 = $i47 & 255;

        $b49 = (byte) $i48;

        $r10[$i44] = $b49;

        goto label08;

     label07:
        $r8 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i30 = r0.<net.oauth.signature.Base64: int pos>;

        $i31 = $i30 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i31;

        $i32 = r0.<net.oauth.signature.Base64: int x>;

        $i33 = $i32 >> 16;

        $i34 = $i33 & 255;

        $b35 = (byte) $i34;

        $r8[$i30] = $b35;

        $r9 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i36 = r0.<net.oauth.signature.Base64: int pos>;

        $i37 = $i36 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i37;

        $i38 = r0.<net.oauth.signature.Base64: int x>;

        $i39 = $i38 >> 8;

        $i40 = $i39 & 255;

        $b41 = (byte) $i40;

        $r9[$i36] = $b41;

     label08:
        r0.<net.oauth.signature.Base64: boolean eof> = 1;

        return;

     label09:
        $i59 = (int) $b57;

        if $i59 < 0 goto label10;

        $r3 = <net.oauth.signature.Base64: byte[] base64ToInt>;

        $i1 = lengthof $r3;

        $i60 = (int) $b57;

        if $i60 >= $i1 goto label10;

        $r4 = <net.oauth.signature.Base64: byte[] base64ToInt>;

        $i61 = (int) $b57;

        b2 = $r4[$i61];

        $i62 = (int) b2;

        if $i62 < 0 goto label10;

        $i3 = r0.<net.oauth.signature.Base64: int modulus>;

        $i4 = $i3 + 1;

        r0.<net.oauth.signature.Base64: int modulus> = $i4;

        $i5 = $i4 % 4;

        r0.<net.oauth.signature.Base64: int modulus> = $i5;

        $i6 = r0.<net.oauth.signature.Base64: int x>;

        $i7 = $i6 << 6;

        $i63 = (int) b2;

        $i8 = $i7 + $i63;

        r0.<net.oauth.signature.Base64: int x> = $i8;

        $i9 = r0.<net.oauth.signature.Base64: int modulus>;

        if $i9 != 0 goto label10;

        $r5 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i10 = r0.<net.oauth.signature.Base64: int pos>;

        $i11 = $i10 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i11;

        $i12 = r0.<net.oauth.signature.Base64: int x>;

        $i13 = $i12 >> 16;

        $i14 = $i13 & 255;

        $b15 = (byte) $i14;

        $r5[$i10] = $b15;

        $r6 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i16 = r0.<net.oauth.signature.Base64: int pos>;

        $i17 = $i16 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i17;

        $i18 = r0.<net.oauth.signature.Base64: int x>;

        $i19 = $i18 >> 8;

        $i20 = $i19 & 255;

        $b21 = (byte) $i20;

        $r6[$i16] = $b21;

        $r7 = r0.<net.oauth.signature.Base64: byte[] buf>;

        $i22 = r0.<net.oauth.signature.Base64: int pos>;

        $i23 = $i22 + 1;

        r0.<net.oauth.signature.Base64: int pos> = $i23;

        $i24 = r0.<net.oauth.signature.Base64: int x>;

        $i25 = $i24 & 255;

        $b26 = (byte) $i25;

        $r7[$i22] = $b26;

     label10:
        i55 = i55 + 1;

        goto label03;

     label11:
        return;
    }

    public static boolean isBase64(byte)
    {
        byte[] $r0, $r1;
        byte b0, $b2;
        int $i1, $i3, $i4, $i5, $i6, $i7, $i9;
        boolean $z0;

        b0 := @parameter0: byte;

        $i3 = (int) b0;

        if $i3 == 61 goto label1;

        $i4 = (int) b0;

        if $i4 < 0 goto label2;

        $r0 = <net.oauth.signature.Base64: byte[] base64ToInt>;

        $i1 = lengthof $r0;

        $i5 = (int) b0;

        if $i5 >= $i1 goto label2;

        $r1 = <net.oauth.signature.Base64: byte[] base64ToInt>;

        $i6 = (int) b0;

        $b2 = $r1[$i6];

        $i7 = (int) $b2;

        $i9 = (int) -1;

        if $i7 == $i9 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isArrayByteBase64(byte[])
    {
        byte[] r0;
        byte $b1, $b2;
        int $i0, i3;
        boolean $z0, $z1;

        r0 := @parameter0: byte[];

        i3 = 0;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label3;

        $b1 = r0[i3];

        $z0 = staticinvoke <net.oauth.signature.Base64: boolean isBase64(byte)>($b1);

        if $z0 != 0 goto label2;

        $b2 = r0[i3];

        $z1 = staticinvoke <net.oauth.signature.Base64: boolean isWhiteSpace(byte)>($b2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static boolean containsBase64Byte(byte[])
    {
        byte[] r0;
        byte $b1;
        int $i0, i2;
        boolean $z0;

        r0 := @parameter0: byte[];

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label3;

        $b1 = r0[i2];

        $z0 = staticinvoke <net.oauth.signature.Base64: boolean isBase64(byte)>($b1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static byte[] encodeBase64(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <net.oauth.signature.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 0);

        return $r1;
    }

    public static byte[] encodeBase64Chunked(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <net.oauth.signature.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 1);

        return $r1;
    }

    public byte[] decode(byte[])
    {
        byte[] r0, $r1;
        net.oauth.signature.Base64 r2;

        r2 := @this: net.oauth.signature.Base64;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <net.oauth.signature.Base64: byte[] decodeBase64(byte[])>(r0);

        return $r1;
    }

    public static byte[] encodeBase64(byte[], boolean)
    {
        byte[] r0, r2, $r3, $r5;
        long $l10, $l12, $l13, $l14, $l15, $l16, $l17, l18;
        net.oauth.signature.Base64 r1, $r6, $r7, $r8;
        byte $b4, $b5;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i11, $i19, $i21;
        boolean z0;
        java.lang.IllegalArgumentException $r9;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        if z0 == 0 goto label3;

        $r7 = new net.oauth.signature.Base64;

        $r6 = $r7;

        specialinvoke $r7.<net.oauth.signature.Base64: void <init>()>();

        goto label4;

     label3:
        $r8 = new net.oauth.signature.Base64;

        $r6 = $r8;

        specialinvoke $r8.<net.oauth.signature.Base64: void <init>(int)>(0);

     label4:
        r1 = $r6;

        $i1 = lengthof r0;

        $i2 = $i1 * 4;

        $i3 = $i2 / 3;

        $l16 = (long) $i3;

        l18 = $l16;

        $l17 = $l16 % 4L;

        $b4 = $l17 cmp 0L;

        if $b4 == 0 goto label5;

        $l15 = 4L - $l17;

        l18 = $l16 + $l15;

     label5:
        if z0 == 0 goto label6;

        $l10 = l18 / 76L;

        $l13 = 1L + $l10;

        $r5 = <net.oauth.signature.Base64: byte[] CHUNK_SEPARATOR>;

        $i11 = lengthof $r5;

        $l12 = (long) $i11;

        $l14 = $l13 * $l12;

        l18 = l18 + $l14;

     label6:
        $b5 = l18 cmp 2147483647L;

        $i19 = (int) $b5;

        if $i19 <= 0 goto label7;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input array too big, output array would be bigger than Integer.MAX_VALUE=2147483647");

        throw $r9;

     label7:
        $i6 = (int) l18;

        r2 = newarray (byte)[$i6];

        $i7 = lengthof r2;

        virtualinvoke r1.<net.oauth.signature.Base64: void setInitialBuffer(byte[],int,int)>(r2, 0, $i7);

        $i8 = lengthof r0;

        virtualinvoke r1.<net.oauth.signature.Base64: void encode(byte[],int,int)>(r0, 0, $i8);

        $i21 = (int) -1;

        virtualinvoke r1.<net.oauth.signature.Base64: void encode(byte[],int,int)>(r0, 0, $i21);

        $r3 = r1.<net.oauth.signature.Base64: byte[] buf>;

        if $r3 == r2 goto label8;

        $i9 = lengthof r2;

        virtualinvoke r1.<net.oauth.signature.Base64: int readResults(byte[],int,int)>(r2, 0, $i9);

     label8:
        return r2;
    }

    public static byte[] decodeBase64(byte[])
    {
        byte[] r0, r2, r3;
        long l4;
        net.oauth.signature.Base64 $r4;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i11;

        r0 := @parameter0: byte[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        $r4 = new net.oauth.signature.Base64;

        specialinvoke $r4.<net.oauth.signature.Base64: void <init>()>();

        $i1 = lengthof r0;

        $i2 = $i1 * 3;

        $i3 = $i2 / 4;

        l4 = (long) $i3;

        $i5 = (int) l4;

        r2 = newarray (byte)[$i5];

        $i6 = lengthof r2;

        virtualinvoke $r4.<net.oauth.signature.Base64: void setInitialBuffer(byte[],int,int)>(r2, 0, $i6);

        $i7 = lengthof r0;

        virtualinvoke $r4.<net.oauth.signature.Base64: void decode(byte[],int,int)>(r0, 0, $i7);

        $i11 = (int) -1;

        virtualinvoke $r4.<net.oauth.signature.Base64: void decode(byte[],int,int)>(r0, 0, $i11);

        $i8 = $r4.<net.oauth.signature.Base64: int pos>;

        r3 = newarray (byte)[$i8];

        $i9 = lengthof r3;

        virtualinvoke $r4.<net.oauth.signature.Base64: int readResults(byte[],int,int)>(r3, 0, $i9);

        return r3;
    }

    private static boolean isWhiteSpace(byte)
    {
        int $i1;
        byte b0;

        b0 := @parameter0: byte;

        $i1 = (int) b0;

        lookupswitch($i1)
        {
            case 9: goto label1;
            case 10: goto label1;
            case 13: goto label1;
            case 32: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    static byte[] discardNonBase64(byte[])
    {
        byte[] r0, r1, r2;
        byte $b2, $b4;
        int $i0, $i1, $i3, i5, i6;
        boolean $z0;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        r1 = newarray (byte)[$i0];

        i5 = 0;

        i6 = 0;

     label1:
        $i1 = lengthof r0;

        if i6 >= $i1 goto label3;

        $b2 = r0[i6];

        $z0 = staticinvoke <net.oauth.signature.Base64: boolean isBase64(byte)>($b2);

        if $z0 == 0 goto label2;

        $i3 = i5;

        i5 = i5 + 1;

        $b4 = r0[i6];

        r1[$i3] = $b4;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        r2 = newarray (byte)[i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, i5);

        return r2;
    }

    public byte[] encode(byte[])
    {
        byte[] r0, $r1;
        net.oauth.signature.Base64 r2;

        r2 := @this: net.oauth.signature.Base64;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <net.oauth.signature.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 0);

        return $r1;
    }

    public static java.math.BigInteger decodeInteger(byte[])
    {
        byte[] r1, $r2;
        java.math.BigInteger $r0;

        r1 := @parameter0: byte[];

        $r0 = new java.math.BigInteger;

        $r2 = staticinvoke <net.oauth.signature.Base64: byte[] decodeBase64(byte[])>(r1);

        specialinvoke $r0.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        return $r0;
    }

    public static byte[] encodeInteger(java.math.BigInteger)
    {
        byte[] $r1, $r2;
        java.math.BigInteger r0;
        java.lang.NullPointerException $r3;

        r0 := @parameter0: java.math.BigInteger;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("encodeInteger called with null parameter");

        throw $r3;

     label1:
        $r1 = staticinvoke <net.oauth.signature.Base64: byte[] toIntegerBytes(java.math.BigInteger)>(r0);

        $r2 = staticinvoke <net.oauth.signature.Base64: byte[] encodeBase64(byte[],boolean)>($r1, 0);

        return $r2;
    }

    static byte[] toIntegerBytes(java.math.BigInteger)
    {
        byte[] $r1, $r2;
        byte b16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i17, $i19;
        java.math.BigInteger r0;

        r0 := @parameter0: java.math.BigInteger;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i1 = $i0 + 7;

        $i2 = $i1 >> 3;

        i15 = $i2 << 3;

        $r1 = virtualinvoke r0.<java.math.BigInteger: byte[] toByteArray()>();

        $i3 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i4 = $i3 % 8;

        if $i4 == 0 goto label1;

        $i10 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i11 = $i10 / 8;

        $i13 = $i11 + 1;

        $i12 = i15 / 8;

        if $i13 != $i12 goto label1;

        return $r1;

     label1:
        b16 = 0;

        $i14 = lengthof $r1;

        i17 = $i14;

        $i5 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i6 = $i5 % 8;

        if $i6 != 0 goto label2;

        b16 = 1;

        $i19 = (int) -1;

        i17 = $i14 + $i19;

     label2:
        $i7 = i15 / 8;

        $i9 = $i7 - i17;

        $i8 = i15 / 8;

        $r2 = newarray (byte)[$i8];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, b16, $r2, $i9, i17);

        return $r2;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2;

        <net.oauth.signature.Base64: int MASK_8BITS> = 255;

        <net.oauth.signature.Base64: int MASK_6BITS> = 63;

        <net.oauth.signature.Base64: byte PAD> = 61;

        <net.oauth.signature.Base64: int CHUNK_SIZE> = 76;

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <net.oauth.signature.Base64: byte[] CHUNK_SEPARATOR> = $r0;

        $r1 = newarray (byte)[64];

        $r1[0] = 65;

        $r1[1] = 66;

        $r1[2] = 67;

        $r1[3] = 68;

        $r1[4] = 69;

        $r1[5] = 70;

        $r1[6] = 71;

        $r1[7] = 72;

        $r1[8] = 73;

        $r1[9] = 74;

        $r1[10] = 75;

        $r1[11] = 76;

        $r1[12] = 77;

        $r1[13] = 78;

        $r1[14] = 79;

        $r1[15] = 80;

        $r1[16] = 81;

        $r1[17] = 82;

        $r1[18] = 83;

        $r1[19] = 84;

        $r1[20] = 85;

        $r1[21] = 86;

        $r1[22] = 87;

        $r1[23] = 88;

        $r1[24] = 89;

        $r1[25] = 90;

        $r1[26] = 97;

        $r1[27] = 98;

        $r1[28] = 99;

        $r1[29] = 100;

        $r1[30] = 101;

        $r1[31] = 102;

        $r1[32] = 103;

        $r1[33] = 104;

        $r1[34] = 105;

        $r1[35] = 106;

        $r1[36] = 107;

        $r1[37] = 108;

        $r1[38] = 109;

        $r1[39] = 110;

        $r1[40] = 111;

        $r1[41] = 112;

        $r1[42] = 113;

        $r1[43] = 114;

        $r1[44] = 115;

        $r1[45] = 116;

        $r1[46] = 117;

        $r1[47] = 118;

        $r1[48] = 119;

        $r1[49] = 120;

        $r1[50] = 121;

        $r1[51] = 122;

        $r1[52] = 48;

        $r1[53] = 49;

        $r1[54] = 50;

        $r1[55] = 51;

        $r1[56] = 52;

        $r1[57] = 53;

        $r1[58] = 54;

        $r1[59] = 55;

        $r1[60] = 56;

        $r1[61] = 57;

        $r1[62] = 43;

        $r1[63] = 47;

        <net.oauth.signature.Base64: byte[] intToBase64> = $r1;

        $r2 = newarray (byte)[123];

        $r2[0] = -1;

        $r2[1] = -1;

        $r2[2] = -1;

        $r2[3] = -1;

        $r2[4] = -1;

        $r2[5] = -1;

        $r2[6] = -1;

        $r2[7] = -1;

        $r2[8] = -1;

        $r2[9] = -1;

        $r2[10] = -1;

        $r2[11] = -1;

        $r2[12] = -1;

        $r2[13] = -1;

        $r2[14] = -1;

        $r2[15] = -1;

        $r2[16] = -1;

        $r2[17] = -1;

        $r2[18] = -1;

        $r2[19] = -1;

        $r2[20] = -1;

        $r2[21] = -1;

        $r2[22] = -1;

        $r2[23] = -1;

        $r2[24] = -1;

        $r2[25] = -1;

        $r2[26] = -1;

        $r2[27] = -1;

        $r2[28] = -1;

        $r2[29] = -1;

        $r2[30] = -1;

        $r2[31] = -1;

        $r2[32] = -1;

        $r2[33] = -1;

        $r2[34] = -1;

        $r2[35] = -1;

        $r2[36] = -1;

        $r2[37] = -1;

        $r2[38] = -1;

        $r2[39] = -1;

        $r2[40] = -1;

        $r2[41] = -1;

        $r2[42] = -1;

        $r2[43] = 62;

        $r2[44] = -1;

        $r2[45] = -1;

        $r2[46] = -1;

        $r2[47] = 63;

        $r2[48] = 52;

        $r2[49] = 53;

        $r2[50] = 54;

        $r2[51] = 55;

        $r2[52] = 56;

        $r2[53] = 57;

        $r2[54] = 58;

        $r2[55] = 59;

        $r2[56] = 60;

        $r2[57] = 61;

        $r2[58] = -1;

        $r2[59] = -1;

        $r2[60] = -1;

        $r2[61] = -1;

        $r2[62] = -1;

        $r2[63] = -1;

        $r2[64] = -1;

        $r2[65] = 0;

        $r2[66] = 1;

        $r2[67] = 2;

        $r2[68] = 3;

        $r2[69] = 4;

        $r2[70] = 5;

        $r2[71] = 6;

        $r2[72] = 7;

        $r2[73] = 8;

        $r2[74] = 9;

        $r2[75] = 10;

        $r2[76] = 11;

        $r2[77] = 12;

        $r2[78] = 13;

        $r2[79] = 14;

        $r2[80] = 15;

        $r2[81] = 16;

        $r2[82] = 17;

        $r2[83] = 18;

        $r2[84] = 19;

        $r2[85] = 20;

        $r2[86] = 21;

        $r2[87] = 22;

        $r2[88] = 23;

        $r2[89] = 24;

        $r2[90] = 25;

        $r2[91] = -1;

        $r2[92] = -1;

        $r2[93] = -1;

        $r2[94] = -1;

        $r2[95] = -1;

        $r2[96] = -1;

        $r2[97] = 26;

        $r2[98] = 27;

        $r2[99] = 28;

        $r2[100] = 29;

        $r2[101] = 30;

        $r2[102] = 31;

        $r2[103] = 32;

        $r2[104] = 33;

        $r2[105] = 34;

        $r2[106] = 35;

        $r2[107] = 36;

        $r2[108] = 37;

        $r2[109] = 38;

        $r2[110] = 39;

        $r2[111] = 40;

        $r2[112] = 41;

        $r2[113] = 42;

        $r2[114] = 43;

        $r2[115] = 44;

        $r2[116] = 45;

        $r2[117] = 46;

        $r2[118] = 47;

        $r2[119] = 48;

        $r2[120] = 49;

        $r2[121] = 50;

        $r2[122] = 51;

        <net.oauth.signature.Base64: byte[] base64ToInt> = $r2;

        return;
    }
}
