public class com.hp.hpl.jena.sparql.expr.E_NotExists extends com.hp.hpl.jena.sparql.expr.ExprFunctionOp
{
    private static final java.lang.String symbol;

    public void <init>(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.E_NotExists r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_NotExists;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.E_NotExists: void <init>(com.hp.hpl.jena.sparql.syntax.Element,com.hp.hpl.jena.sparql.algebra.Op)>(null, r1);

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.syntax.Element)
    {
        com.hp.hpl.jena.sparql.syntax.Element r1;
        com.hp.hpl.jena.sparql.expr.E_NotExists r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_NotExists;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.algebra.Op compile(com.hp.hpl.jena.sparql.syntax.Element)>(r1);

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.E_NotExists: void <init>(com.hp.hpl.jena.sparql.syntax.Element,com.hp.hpl.jena.sparql.algebra.Op)>(r1, $r2);

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.syntax.Element, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.syntax.Element r1;
        com.hp.hpl.jena.sparql.expr.E_NotExists r0;
        com.hp.hpl.jena.sparql.algebra.Op r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_NotExists;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: void <init>(java.lang.String,com.hp.hpl.jena.sparql.syntax.Element,com.hp.hpl.jena.sparql.algebra.Op)>("notexists", r1, r2);

        return;
    }

    public com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding, boolean)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r2;
        com.hp.hpl.jena.sparql.expr.E_NotExists r0, $r4;
        com.hp.hpl.jena.sparql.syntax.Element $r5;
        com.hp.hpl.jena.sparql.algebra.Op $r1, $r3;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_NotExists;

        r2 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.E_NotExists: com.hp.hpl.jena.sparql.algebra.Op getGraphPattern()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.sparql.algebra.Op substitute(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r1, r2);

        $r4 = new com.hp.hpl.jena.sparql.expr.E_NotExists;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.E_NotExists: com.hp.hpl.jena.sparql.syntax.Element getElement()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.expr.E_NotExists: void <init>(com.hp.hpl.jena.sparql.syntax.Element,com.hp.hpl.jena.sparql.algebra.Op)>($r5, $r3);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.expr.Expr applyNodeTransform(com.hp.hpl.jena.sparql.graph.NodeTransform)
    {
        com.hp.hpl.jena.sparql.expr.E_NotExists r1, $r4;
        com.hp.hpl.jena.sparql.syntax.Element $r5;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r3;
        com.hp.hpl.jena.sparql.graph.NodeTransform r0;

        r1 := @this: com.hp.hpl.jena.sparql.expr.E_NotExists;

        r0 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.E_NotExists: com.hp.hpl.jena.sparql.algebra.Op getGraphPattern()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.algebra.Op)>(r0, $r2);

        $r4 = new com.hp.hpl.jena.sparql.expr.E_NotExists;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.E_NotExists: com.hp.hpl.jena.sparql.syntax.Element getElement()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.expr.E_NotExists: void <init>(com.hp.hpl.jena.sparql.syntax.Element,com.hp.hpl.jena.sparql.algebra.Op)>($r5, $r3);

        return $r4;
    }

    protected com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.QueryIterator, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r3;
        com.hp.hpl.jena.sparql.expr.NodeValue $r1;
        com.hp.hpl.jena.sparql.expr.E_NotExists r2;
        com.hp.hpl.jena.sparql.function.FunctionEnv r4;
        com.hp.hpl.jena.sparql.engine.QueryIterator r0;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.expr.E_NotExists;

        r3 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r4 := @parameter2: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue booleanReturn(boolean)>($z1);

        return $r1;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.sparql.expr.E_NotExists r1;
        int $i0, $i1, $i2;
        java.lang.String $r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r1 := @this: com.hp.hpl.jena.sparql.expr.E_NotExists;

        $r0 = "notexists";

        $i0 = virtualinvoke $r0.<java.lang.String: int hashCode()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.E_NotExists: com.hp.hpl.jena.sparql.algebra.Op getGraphPattern()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.sparql.expr.E_NotExists r0, r2;
        java.lang.Object r1;
        com.hp.hpl.jena.sparql.algebra.Op $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_NotExists;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.hp.hpl.jena.sparql.expr.E_NotExists;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.hp.hpl.jena.sparql.expr.E_NotExists) r1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.E_NotExists: com.hp.hpl.jena.sparql.algebra.Op getGraphPattern()>();

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.E_NotExists: com.hp.hpl.jena.sparql.algebra.Op getGraphPattern()>();

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        return $z1;
    }

    public com.hp.hpl.jena.sparql.expr.ExprFunctionOp copy(com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.E_NotExists $r0, r2;
        com.hp.hpl.jena.sparql.expr.ExprList r3;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r2 := @this: com.hp.hpl.jena.sparql.expr.E_NotExists;

        r3 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.expr.E_NotExists;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.E_NotExists: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return $r0;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.E_NotExists: java.lang.String symbol> = "notexists";

        return;
    }
}
