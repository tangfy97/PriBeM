final class kodkod.util.ints.Ints$RangeIntSet extends kodkod.util.ints.AbstractIntSet
{
    private final kodkod.util.ints.IntRange range;

    void <init>(kodkod.util.ints.IntRange)
    {
        kodkod.util.ints.Ints$RangeIntSet r0;
        kodkod.util.ints.IntRange r1;

        r0 := @this: kodkod.util.ints.Ints$RangeIntSet;

        r1 := @parameter0: kodkod.util.ints.IntRange;

        specialinvoke r0.<kodkod.util.ints.AbstractIntSet: void <init>()>();

        r0.<kodkod.util.ints.Ints$RangeIntSet: kodkod.util.ints.IntRange range> = r1;

        return;
    }

    public boolean contains(int)
    {
        kodkod.util.ints.Ints$RangeIntSet r0;
        int i0;
        kodkod.util.ints.IntRange $r1;
        boolean $z0;

        r0 := @this: kodkod.util.ints.Ints$RangeIntSet;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.Ints$RangeIntSet: kodkod.util.ints.IntRange range>;

        $z0 = virtualinvoke $r1.<kodkod.util.ints.IntRange: boolean contains(int)>(i0);

        return $z0;
    }

    public int min()
    {
        kodkod.util.ints.Ints$RangeIntSet r0;
        int $i0;
        kodkod.util.ints.IntRange $r1;

        r0 := @this: kodkod.util.ints.Ints$RangeIntSet;

        $r1 = r0.<kodkod.util.ints.Ints$RangeIntSet: kodkod.util.ints.IntRange range>;

        $i0 = virtualinvoke $r1.<kodkod.util.ints.IntRange: int min()>();

        return $i0;
    }

    public int max()
    {
        kodkod.util.ints.Ints$RangeIntSet r0;
        int $i0;
        kodkod.util.ints.IntRange $r1;

        r0 := @this: kodkod.util.ints.Ints$RangeIntSet;

        $r1 = r0.<kodkod.util.ints.Ints$RangeIntSet: kodkod.util.ints.IntRange range>;

        $i0 = virtualinvoke $r1.<kodkod.util.ints.IntRange: int max()>();

        return $i0;
    }

    public kodkod.util.ints.IntIterator iterator(int, int)
    {
        kodkod.util.ints.Ints$RangeIntSet r1;
        kodkod.util.ints.Ints$RangeIntSet$1 $r0;
        int i0, i1;

        r1 := @this: kodkod.util.ints.Ints$RangeIntSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new kodkod.util.ints.Ints$RangeIntSet$1;

        specialinvoke $r0.<kodkod.util.ints.Ints$RangeIntSet$1: void <init>(kodkod.util.ints.Ints$RangeIntSet,int,int)>(r1, i0, i1);

        return $r0;
    }

    public int size()
    {
        kodkod.util.ints.Ints$RangeIntSet r0;
        int $i0;
        kodkod.util.ints.IntRange $r1;

        r0 := @this: kodkod.util.ints.Ints$RangeIntSet;

        $r1 = r0.<kodkod.util.ints.Ints$RangeIntSet: kodkod.util.ints.IntRange range>;

        $i0 = virtualinvoke $r1.<kodkod.util.ints.IntRange: int size()>();

        return $i0;
    }

    public kodkod.util.ints.IntSet copy()
    {
        kodkod.util.ints.Ints$RangeIntSet r0;

        r0 := @this: kodkod.util.ints.Ints$RangeIntSet;

        return r0;
    }

    public int floor(int)
    {
        kodkod.util.ints.Ints$RangeIntSet r0;
        kodkod.util.ints.IntRange $r1, $r2;
        int i0, $i1, $i2, $i3;
        java.util.NoSuchElementException $r3;

        r0 := @this: kodkod.util.ints.Ints$RangeIntSet;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.Ints$RangeIntSet: kodkod.util.ints.IntRange range>;

        $i1 = virtualinvoke $r1.<kodkod.util.ints.IntRange: int min()>();

        if i0 >= $i1 goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<kodkod.util.ints.Ints$RangeIntSet: kodkod.util.ints.IntRange range>;

        $i2 = virtualinvoke $r2.<kodkod.util.ints.IntRange: int max()>();

        $i3 = staticinvoke <java.lang.StrictMath: int min(int,int)>(i0, $i2);

        return $i3;
    }

    public int ceil(int)
    {
        kodkod.util.ints.Ints$RangeIntSet r0;
        kodkod.util.ints.IntRange $r1, $r2;
        int i0, $i1, $i2, $i3;
        java.util.NoSuchElementException $r3;

        r0 := @this: kodkod.util.ints.Ints$RangeIntSet;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.Ints$RangeIntSet: kodkod.util.ints.IntRange range>;

        $i1 = virtualinvoke $r1.<kodkod.util.ints.IntRange: int max()>();

        if i0 <= $i1 goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<kodkod.util.ints.Ints$RangeIntSet: kodkod.util.ints.IntRange range>;

        $i2 = virtualinvoke $r2.<kodkod.util.ints.IntRange: int min()>();

        $i3 = staticinvoke <java.lang.StrictMath: int max(int,int)>(i0, $i2);

        return $i3;
    }

    public kodkod.util.ints.IntSet clone()
    {
        kodkod.util.ints.Ints$RangeIntSet r0;

        r0 := @this: kodkod.util.ints.Ints$RangeIntSet;

        return r0;
    }

    static kodkod.util.ints.IntRange access$0(kodkod.util.ints.Ints$RangeIntSet)
    {
        kodkod.util.ints.Ints$RangeIntSet r0;
        kodkod.util.ints.IntRange $r1;

        r0 := @parameter0: kodkod.util.ints.Ints$RangeIntSet;

        $r1 = r0.<kodkod.util.ints.Ints$RangeIntSet: kodkod.util.ints.IntRange range>;

        return $r1;
    }
}
