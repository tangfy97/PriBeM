public final class org.apache.lucene.util.WeakIdentityMap extends java.lang.Object
{
    private final java.lang.ref.ReferenceQueue queue;
    private final java.util.Map backingStore;
    private final boolean reapOnRead;
    static final java.lang.Object NULL;

    public static org.apache.lucene.util.WeakIdentityMap newHashMap()
    {
        org.apache.lucene.util.WeakIdentityMap $r0;

        $r0 = staticinvoke <org.apache.lucene.util.WeakIdentityMap: org.apache.lucene.util.WeakIdentityMap newHashMap(boolean)>(1);

        return $r0;
    }

    public static org.apache.lucene.util.WeakIdentityMap newHashMap(boolean)
    {
        java.util.HashMap $r1;
        org.apache.lucene.util.WeakIdentityMap $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = new org.apache.lucene.util.WeakIdentityMap;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        specialinvoke $r0.<org.apache.lucene.util.WeakIdentityMap: void <init>(java.util.Map,boolean)>($r1, z0);

        return $r0;
    }

    public static org.apache.lucene.util.WeakIdentityMap newConcurrentHashMap()
    {
        org.apache.lucene.util.WeakIdentityMap $r0;

        $r0 = staticinvoke <org.apache.lucene.util.WeakIdentityMap: org.apache.lucene.util.WeakIdentityMap newConcurrentHashMap(boolean)>(1);

        return $r0;
    }

    public static org.apache.lucene.util.WeakIdentityMap newConcurrentHashMap(boolean)
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.lucene.util.WeakIdentityMap $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = new org.apache.lucene.util.WeakIdentityMap;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        specialinvoke $r0.<org.apache.lucene.util.WeakIdentityMap: void <init>(java.util.Map,boolean)>($r1, z0);

        return $r0;
    }

    private void <init>(java.util.Map, boolean)
    {
        java.util.Map r2;
        org.apache.lucene.util.WeakIdentityMap r0;
        java.lang.ref.ReferenceQueue $r1;
        boolean z0;

        r0 := @this: org.apache.lucene.util.WeakIdentityMap;

        r2 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<org.apache.lucene.util.WeakIdentityMap: java.lang.ref.ReferenceQueue queue> = $r1;

        r0.<org.apache.lucene.util.WeakIdentityMap: java.util.Map backingStore> = r2;

        r0.<org.apache.lucene.util.WeakIdentityMap: boolean reapOnRead> = z0;

        return;
    }

    public void clear()
    {
        org.apache.lucene.util.WeakIdentityMap r0;
        java.util.Map $r1;

        r0 := @this: org.apache.lucene.util.WeakIdentityMap;

        $r1 = r0.<org.apache.lucene.util.WeakIdentityMap: java.util.Map backingStore>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        virtualinvoke r0.<org.apache.lucene.util.WeakIdentityMap: void reap()>();

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference $r1;
        java.util.Map $r3;
        java.lang.Object r2;
        org.apache.lucene.util.WeakIdentityMap r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.WeakIdentityMap;

        r2 := @parameter0: java.lang.Object;

        $z0 = r0.<org.apache.lucene.util.WeakIdentityMap: boolean reapOnRead>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.lucene.util.WeakIdentityMap: void reap()>();

     label1:
        $r3 = r0.<org.apache.lucene.util.WeakIdentityMap: java.util.Map backingStore>;

        $r1 = new org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference;

        specialinvoke $r1.<org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r2, null);

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        return $z1;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference $r1;
        java.util.Map $r3;
        java.lang.Object r2, $r4;
        org.apache.lucene.util.WeakIdentityMap r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.WeakIdentityMap;

        r2 := @parameter0: java.lang.Object;

        $z0 = r0.<org.apache.lucene.util.WeakIdentityMap: boolean reapOnRead>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.lucene.util.WeakIdentityMap: void reap()>();

     label1:
        $r3 = r0.<org.apache.lucene.util.WeakIdentityMap: java.util.Map backingStore>;

        $r1 = new org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference;

        specialinvoke $r1.<org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r2, null);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        return $r4;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference $r1;
        java.util.Map $r4;
        java.lang.Object r2, r5, $r6;
        org.apache.lucene.util.WeakIdentityMap r0;
        java.lang.ref.ReferenceQueue $r3;

        r0 := @this: org.apache.lucene.util.WeakIdentityMap;

        r2 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        virtualinvoke r0.<org.apache.lucene.util.WeakIdentityMap: void reap()>();

        $r4 = r0.<org.apache.lucene.util.WeakIdentityMap: java.util.Map backingStore>;

        $r1 = new org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference;

        $r3 = r0.<org.apache.lucene.util.WeakIdentityMap: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r1.<org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r2, $r3);

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r5);

        return $r6;
    }

    public boolean isEmpty()
    {
        int $i0;
        org.apache.lucene.util.WeakIdentityMap r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.WeakIdentityMap;

        $i0 = virtualinvoke r0.<org.apache.lucene.util.WeakIdentityMap: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference $r1;
        java.util.Map $r3;
        java.lang.Object r2, $r4;
        org.apache.lucene.util.WeakIdentityMap r0;

        r0 := @this: org.apache.lucene.util.WeakIdentityMap;

        r2 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.lucene.util.WeakIdentityMap: void reap()>();

        $r3 = r0.<org.apache.lucene.util.WeakIdentityMap: java.util.Map backingStore>;

        $r1 = new org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference;

        specialinvoke $r1.<org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r2, null);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        return $r4;
    }

    public int size()
    {
        java.util.Map $r1, $r2;
        int $i0;
        org.apache.lucene.util.WeakIdentityMap r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.WeakIdentityMap;

        $r1 = r0.<org.apache.lucene.util.WeakIdentityMap: java.util.Map backingStore>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = r0.<org.apache.lucene.util.WeakIdentityMap: boolean reapOnRead>;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.apache.lucene.util.WeakIdentityMap: void reap()>();

     label2:
        $r2 = r0.<org.apache.lucene.util.WeakIdentityMap: java.util.Map backingStore>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        return $i0;
    }

    public java.util.Iterator keyIterator()
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        org.apache.lucene.util.WeakIdentityMap$1 $r4;
        java.util.Set $r2;
        org.apache.lucene.util.WeakIdentityMap r0;

        r0 := @this: org.apache.lucene.util.WeakIdentityMap;

        virtualinvoke r0.<org.apache.lucene.util.WeakIdentityMap: void reap()>();

        $r1 = r0.<org.apache.lucene.util.WeakIdentityMap: java.util.Map backingStore>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = new org.apache.lucene.util.WeakIdentityMap$1;

        specialinvoke $r4.<org.apache.lucene.util.WeakIdentityMap$1: void <init>(org.apache.lucene.util.WeakIdentityMap,java.util.Iterator)>(r0, $r3);

        return $r4;
    }

    public java.util.Iterator valueIterator()
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Collection $r2;
        org.apache.lucene.util.WeakIdentityMap r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.WeakIdentityMap;

        $z0 = r0.<org.apache.lucene.util.WeakIdentityMap: boolean reapOnRead>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.lucene.util.WeakIdentityMap: void reap()>();

     label1:
        $r1 = r0.<org.apache.lucene.util.WeakIdentityMap: java.util.Map backingStore>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }

    public void reap()
    {
        java.lang.ref.Reference $r2;
        java.util.Map $r3;
        org.apache.lucene.util.WeakIdentityMap r0;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @this: org.apache.lucene.util.WeakIdentityMap;

     label1:
        $r1 = r0.<org.apache.lucene.util.WeakIdentityMap: java.lang.ref.ReferenceQueue queue>;

        $r2 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.lucene.util.WeakIdentityMap: java.util.Map backingStore>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        goto label1;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.apache.lucene.util.WeakIdentityMap: java.lang.Object NULL> = $r0;

        return;
    }
}
