public class org.springframework.scripting.bsh.BshScriptFactory extends java.lang.Object implements org.springframework.scripting.ScriptFactory, org.springframework.beans.factory.BeanClassLoaderAware
{
    private final java.lang.String scriptSourceLocator;
    private final java.lang.Class[] scriptInterfaces;
    private java.lang.ClassLoader beanClassLoader;
    private java.lang.Class scriptClass;
    private final java.lang.Object scriptClassMonitor;
    private boolean wasModifiedForTypeCheck;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.scripting.bsh.BshScriptFactory r0;

        r0 := @this: org.springframework.scripting.bsh.BshScriptFactory;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.springframework.scripting.bsh.BshScriptFactory: void <init>(java.lang.String,java.lang.Class[])>(r1, null);

        return;
    }

    public void <init>(java.lang.String, java.lang.Class[])
    {
        org.springframework.scripting.bsh.BshScriptFactory r0;
        java.lang.Class[] r4;
        java.lang.Object $r2;
        java.lang.ClassLoader $r1;
        java.lang.String r3;

        r0 := @this: org.springframework.scripting.bsh.BshScriptFactory;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Class[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.ClassLoader beanClassLoader> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.Object scriptClassMonitor> = $r2;

        r0.<org.springframework.scripting.bsh.BshScriptFactory: boolean wasModifiedForTypeCheck> = 0;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r3, "\'scriptSourceLocator\' must not be empty");

        r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.String scriptSourceLocator> = r3;

        r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.Class[] scriptInterfaces> = r4;

        return;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.springframework.scripting.bsh.BshScriptFactory r0;

        r0 := @this: org.springframework.scripting.bsh.BshScriptFactory;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.ClassLoader beanClassLoader> = r1;

        return;
    }

    public java.lang.String getScriptSourceLocator()
    {
        java.lang.String $r1;
        org.springframework.scripting.bsh.BshScriptFactory r0;

        r0 := @this: org.springframework.scripting.bsh.BshScriptFactory;

        $r1 = r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.String scriptSourceLocator>;

        return $r1;
    }

    public java.lang.Class[] getScriptInterfaces()
    {
        java.lang.Class[] $r1;
        org.springframework.scripting.bsh.BshScriptFactory r0;

        r0 := @this: org.springframework.scripting.bsh.BshScriptFactory;

        $r1 = r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.Class[] scriptInterfaces>;

        return $r1;
    }

    public boolean requiresConfigInterface()
    {
        org.springframework.scripting.bsh.BshScriptFactory r0;

        r0 := @this: org.springframework.scripting.bsh.BshScriptFactory;

        return 1;
    }

    public java.lang.Object getScriptedObject(org.springframework.scripting.ScriptSource, java.lang.Class[]) throws java.io.IOException, org.springframework.scripting.ScriptCompilationException
    {
        java.lang.Throwable $r14, $r16, $r22;
        org.springframework.scripting.bsh.BshScriptFactory r0;
        java.lang.String $r3, $r8, $r19, $r21;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class[] r4;
        org.springframework.scripting.ScriptSource r2;
        org.springframework.scripting.ScriptCompilationException $r15, $r17;
        java.lang.Object $r1, $r6, $r10, $r11;
        java.lang.Class $r7, $r12, $r13;
        java.lang.StringBuilder $r18, $r20;
        java.lang.ClassLoader $r5, $r9;

        r0 := @this: org.springframework.scripting.bsh.BshScriptFactory;

        r2 := @parameter0: org.springframework.scripting.ScriptSource;

        r4 := @parameter1: java.lang.Class[];

     label01:
        $r1 = r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.Object scriptClassMonitor>;

        entermonitor $r1;

     label02:
        $z0 = r0.<org.springframework.scripting.bsh.BshScriptFactory: boolean wasModifiedForTypeCheck>;

        if $z0 == 0 goto label03;

        $r13 = r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.Class scriptClass>;

        if $r13 != null goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        r0.<org.springframework.scripting.bsh.BshScriptFactory: boolean wasModifiedForTypeCheck> = 0;

        $z3 = interfaceinvoke r2.<org.springframework.scripting.ScriptSource: boolean isModified()>();

        if $z3 != 0 goto label05;

        if $z2 == 0 goto label08;

     label05:
        $r3 = interfaceinvoke r2.<org.springframework.scripting.ScriptSource: java.lang.String getScriptAsString()>();

        $r5 = r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.ClassLoader beanClassLoader>;

        $r6 = staticinvoke <org.springframework.scripting.bsh.BshScriptUtils: java.lang.Object evaluateBshScript(java.lang.String,java.lang.Class[],java.lang.ClassLoader)>($r3, r4, $r5);

        $z1 = $r6 instanceof java.lang.Class;

        if $z1 == 0 goto label06;

        $r7 = (java.lang.Class) $r6;

        r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.Class scriptClass> = $r7;

        goto label08;

     label06:
        exitmonitor $r1;

     label07:
        return $r6;

     label08:
        $r12 = r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.Class scriptClass>;

        exitmonitor $r1;

     label09:
        goto label12;

     label10:
        $r22 := @caughtexception;

        exitmonitor $r1;

     label11:
        throw $r22;

     label12:
        if $r12 == null goto label16;

     label13:
        $r11 = virtualinvoke $r12.<java.lang.Class: java.lang.Object newInstance()>();

     label14:
        return $r11;

     label15:
        $r16 := @caughtexception;

        $r17 = new org.springframework.scripting.ScriptCompilationException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate script class: ");

        $r19 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.springframework.scripting.ScriptCompilationException: void <init>(org.springframework.scripting.ScriptSource,java.lang.String,java.lang.Throwable)>(r2, $r21, $r16);

        throw $r17;

     label16:
        $r8 = interfaceinvoke r2.<org.springframework.scripting.ScriptSource: java.lang.String getScriptAsString()>();

        $r9 = r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.ClassLoader beanClassLoader>;

        $r10 = staticinvoke <org.springframework.scripting.bsh.BshScriptUtils: java.lang.Object createBshObject(java.lang.String,java.lang.Class[],java.lang.ClassLoader)>($r8, r4, $r9);

     label17:
        return $r10;

     label18:
        $r14 := @caughtexception;

        $r15 = new org.springframework.scripting.ScriptCompilationException;

        specialinvoke $r15.<org.springframework.scripting.ScriptCompilationException: void <init>(org.springframework.scripting.ScriptSource,java.lang.Throwable)>(r2, $r14);

        throw $r15;

        catch java.lang.Throwable from label02 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch bsh.EvalError from label01 to label07 with label18;
        catch bsh.EvalError from label08 to label14 with label18;
        catch bsh.EvalError from label15 to label17 with label18;
    }

    public java.lang.Class getScriptedObjectType(org.springframework.scripting.ScriptSource) throws java.io.IOException, org.springframework.scripting.ScriptCompilationException
    {
        java.lang.Throwable $r6, $r8;
        org.springframework.scripting.bsh.BshScriptFactory r0;
        org.springframework.scripting.ScriptSource r2;
        org.springframework.scripting.ScriptCompilationException $r7;
        java.lang.Object $r1;
        java.lang.Class $r3, $r5;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.springframework.scripting.bsh.BshScriptFactory;

        r2 := @parameter0: org.springframework.scripting.ScriptSource;

     label1:
        $r1 = r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.Object scriptClassMonitor>;

        entermonitor $r1;

     label2:
        $z0 = interfaceinvoke r2.<org.springframework.scripting.ScriptSource: boolean isModified()>();

        if $z0 == 0 goto label3;

        r0.<org.springframework.scripting.bsh.BshScriptFactory: boolean wasModifiedForTypeCheck> = 1;

        $r4 = interfaceinvoke r2.<org.springframework.scripting.ScriptSource: java.lang.String getScriptAsString()>();

        $r5 = staticinvoke <org.springframework.scripting.bsh.BshScriptUtils: java.lang.Class determineBshObjectType(java.lang.String)>($r4);

        r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.Class scriptClass> = $r5;

     label3:
        $r3 = r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.Class scriptClass>;

        exitmonitor $r1;

     label4:
        return $r3;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r8;

     label7:
        $r6 := @caughtexception;

        $r7 = new org.springframework.scripting.ScriptCompilationException;

        specialinvoke $r7.<org.springframework.scripting.ScriptCompilationException: void <init>(org.springframework.scripting.ScriptSource,java.lang.Throwable)>(r2, $r6);

        throw $r7;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
        catch bsh.EvalError from label1 to label4 with label7;
        catch bsh.EvalError from label5 to label7 with label7;
    }

    public boolean requiresScriptedObjectRefresh(org.springframework.scripting.ScriptSource)
    {
        java.lang.Throwable $r3;
        org.springframework.scripting.ScriptSource r2;
        org.springframework.scripting.bsh.BshScriptFactory r0;
        java.lang.Object $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.scripting.bsh.BshScriptFactory;

        r2 := @parameter0: org.springframework.scripting.ScriptSource;

        $r1 = r0.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.Object scriptClassMonitor>;

        entermonitor $r1;

     label1:
        $z0 = interfaceinvoke r2.<org.springframework.scripting.ScriptSource: boolean isModified()>();

        if $z0 != 0 goto label2;

        $z1 = r0.<org.springframework.scripting.bsh.BshScriptFactory: boolean wasModifiedForTypeCheck>;

        if $z1 != 0 goto label2;

        $z2 = 0;

        goto label3;

     label2:
        $z2 = 1;

     label3:
        exitmonitor $r1;

     label4:
        return $z2;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.lang.String toString()
    {
        org.springframework.scripting.bsh.BshScriptFactory r1;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r2, $r5;

        r1 := @this: org.springframework.scripting.bsh.BshScriptFactory;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("BshScriptFactory: script source locator [");

        $r2 = r1.<org.springframework.scripting.bsh.BshScriptFactory: java.lang.String scriptSourceLocator>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
