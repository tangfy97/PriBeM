class com.mycila.inject.internal.cglib.proxy.MixinBeanEmitter extends com.mycila.inject.internal.cglib.proxy.MixinEmitter
{

    public void <init>(com.mycila.inject.internal.asm.ClassVisitor, java.lang.String, java.lang.Class[])
    {
        com.mycila.inject.internal.cglib.proxy.MixinBeanEmitter r0;
        java.lang.Class[] r3;
        java.lang.String r2;
        com.mycila.inject.internal.asm.ClassVisitor r1;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.MixinBeanEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.MixinEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor,java.lang.String,java.lang.Class[],int[])>(r1, r2, r3, null);

        return;
    }

    protected java.lang.Class[] getInterfaces(java.lang.Class[])
    {
        java.lang.Class[] r1;
        com.mycila.inject.internal.cglib.proxy.MixinBeanEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.MixinBeanEmitter;

        r1 := @parameter0: java.lang.Class[];

        return null;
    }

    protected java.lang.reflect.Method[] getMethods(java.lang.Class)
    {
        java.beans.PropertyDescriptor[] $r1;
        com.mycila.inject.internal.cglib.proxy.MixinBeanEmitter r3;
        java.lang.Class r0;
        java.lang.reflect.Method[] $r2;

        r3 := @this: com.mycila.inject.internal.cglib.proxy.MixinBeanEmitter;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.reflect.Method[] getPropertyMethods(java.beans.PropertyDescriptor[],boolean,boolean)>($r1, 1, 1);

        return $r2;
    }
}
